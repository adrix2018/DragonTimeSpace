// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carddata_config.proto

#include "carddata_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_carddata_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_carddata_config_t_carddata_config_carddata_5fconfig_2eproto;
namespace pb {
class carddata_config_t_carddata_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<carddata_config_t_carddata_config> _instance;
} _carddata_config_t_carddata_config_default_instance_;
class carddata_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<carddata_config> _instance;
} _carddata_config_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_carddata_config_carddata_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_carddata_config_default_instance_;
    new (ptr) ::pb::carddata_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::carddata_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_carddata_config_carddata_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_carddata_config_carddata_5fconfig_2eproto}, {
      &scc_info_carddata_config_t_carddata_config_carddata_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_carddata_config_t_carddata_config_carddata_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_carddata_config_t_carddata_config_default_instance_;
    new (ptr) ::pb::carddata_config_t_carddata_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::carddata_config_t_carddata_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_carddata_config_t_carddata_config_carddata_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_carddata_config_t_carddata_config_carddata_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_carddata_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_carddata_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_carddata_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_carddata_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, cardid_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, cardtype_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, cardgroup_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, cardstar_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, decomposid_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, fixedeffectid1_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, fixedeffectid2_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, fixedeffectid3_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, randskillgroup_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, randskillnum_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, randtriggergroup_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, randtriggernum_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, randeffectgroup_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, randeffectnum_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config_t_carddata_config, maxdurable_),
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  15,
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::carddata_config, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::pb::carddata_config_t_carddata_config)},
  { 37, 43, sizeof(::pb::carddata_config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_carddata_config_t_carddata_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_carddata_config_default_instance_),
};

const char descriptor_table_protodef_carddata_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025carddata_config.proto\022\002pb\"\271\003\n\017carddata"
  "_config\0224\n\005datas\030\001 \003(\0132%.pb.carddata_con"
  "fig.t_carddata_config\032\357\002\n\021t_carddata_con"
  "fig\022\020\n\005tbxid\030\001 \002(\r:\0010\022\021\n\006cardid\030\002 \002(\r:\0010"
  "\022\020\n\010cardtype\030\003 \002(\r\022\021\n\tcardgroup\030\004 \002(\r\022\020\n"
  "\010cardstar\030\005 \002(\r\022\022\n\ndecomposid\030\006 \002(\r\022\026\n\016f"
  "ixedeffectid1\030\007 \002(\r\022\026\n\016fixedeffectid2\030\010 "
  "\002(\r\022\026\n\016fixedeffectid3\030\t \002(\r\022\026\n\016randskill"
  "group\030\n \002(\t\022\024\n\014randskillnum\030\013 \002(\t\022\030\n\020ran"
  "dtriggergroup\030\014 \002(\t\022\026\n\016randtriggernum\030\r "
  "\002(\t\022\027\n\017randeffectgroup\030\016 \002(\t\022\025\n\rrandeffe"
  "ctnum\030\017 \002(\t\022\022\n\nmaxdurable\030\020 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_carddata_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_carddata_5fconfig_2eproto_sccs[2] = {
  &scc_info_carddata_config_carddata_5fconfig_2eproto.base,
  &scc_info_carddata_config_t_carddata_config_carddata_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_carddata_5fconfig_2eproto_once;
static bool descriptor_table_carddata_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_carddata_5fconfig_2eproto = {
  &descriptor_table_carddata_5fconfig_2eproto_initialized, descriptor_table_protodef_carddata_5fconfig_2eproto, "carddata_config.proto", 471,
  &descriptor_table_carddata_5fconfig_2eproto_once, descriptor_table_carddata_5fconfig_2eproto_sccs, descriptor_table_carddata_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_carddata_5fconfig_2eproto::offsets,
  file_level_metadata_carddata_5fconfig_2eproto, 2, file_level_enum_descriptors_carddata_5fconfig_2eproto, file_level_service_descriptors_carddata_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_carddata_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_carddata_5fconfig_2eproto)), true);
namespace pb {

// ===================================================================

void carddata_config_t_carddata_config::InitAsDefaultInstance() {
}
class carddata_config_t_carddata_config::_Internal {
 public:
  using HasBits = decltype(std::declval<carddata_config_t_carddata_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cardid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cardtype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cardgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cardstar(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_decomposid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fixedeffectid1(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fixedeffectid2(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_fixedeffectid3(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_randskillgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_randskillnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_randtriggergroup(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_randtriggernum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_randeffectgroup(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_randeffectnum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_maxdurable(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

carddata_config_t_carddata_config::carddata_config_t_carddata_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.carddata_config.t_carddata_config)
}
carddata_config_t_carddata_config::carddata_config_t_carddata_config(const carddata_config_t_carddata_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  randskillgroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_randskillgroup()) {
    randskillgroup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randskillgroup_);
  }
  randskillnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_randskillnum()) {
    randskillnum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randskillnum_);
  }
  randtriggergroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_randtriggergroup()) {
    randtriggergroup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randtriggergroup_);
  }
  randtriggernum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_randtriggernum()) {
    randtriggernum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randtriggernum_);
  }
  randeffectgroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_randeffectgroup()) {
    randeffectgroup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randeffectgroup_);
  }
  randeffectnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_randeffectnum()) {
    randeffectnum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randeffectnum_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxdurable_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(maxdurable_));
  // @@protoc_insertion_point(copy_constructor:pb.carddata_config.t_carddata_config)
}

void carddata_config_t_carddata_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_carddata_config_t_carddata_config_carddata_5fconfig_2eproto.base);
  randskillgroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  randskillnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  randtriggergroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  randtriggernum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  randeffectgroup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  randeffectnum_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxdurable_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(maxdurable_));
}

carddata_config_t_carddata_config::~carddata_config_t_carddata_config() {
  // @@protoc_insertion_point(destructor:pb.carddata_config.t_carddata_config)
  SharedDtor();
}

void carddata_config_t_carddata_config::SharedDtor() {
  randskillgroup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  randskillnum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  randtriggergroup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  randtriggernum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  randeffectgroup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  randeffectnum_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void carddata_config_t_carddata_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const carddata_config_t_carddata_config& carddata_config_t_carddata_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_carddata_config_t_carddata_config_carddata_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void carddata_config_t_carddata_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.carddata_config.t_carddata_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      randskillgroup_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      randskillnum_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      randtriggergroup_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      randtriggernum_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      randeffectgroup_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      randeffectnum_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cardid_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(cardid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cardtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxdurable_) -
        reinterpret_cast<char*>(&cardtype_)) + sizeof(maxdurable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* carddata_config_t_carddata_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&has_bits);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cardid = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cardid(&has_bits);
          cardid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cardtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cardtype(&has_bits);
          cardtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cardgroup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cardgroup(&has_bits);
          cardgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cardstar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cardstar(&has_bits);
          cardstar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 decomposid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_decomposid(&has_bits);
          decomposid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fixedeffectid1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_fixedeffectid1(&has_bits);
          fixedeffectid1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fixedeffectid2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fixedeffectid2(&has_bits);
          fixedeffectid2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fixedeffectid3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_fixedeffectid3(&has_bits);
          fixedeffectid3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string randskillgroup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_randskillgroup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.carddata_config.t_carddata_config.randskillgroup");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string randskillnum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_randskillnum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.carddata_config.t_carddata_config.randskillnum");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string randtriggergroup = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_randtriggergroup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.carddata_config.t_carddata_config.randtriggergroup");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string randtriggernum = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_randtriggernum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.carddata_config.t_carddata_config.randtriggernum");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string randeffectgroup = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_randeffectgroup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.carddata_config.t_carddata_config.randeffectgroup");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string randeffectnum = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_randeffectnum();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.carddata_config.t_carddata_config.randeffectnum");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxdurable = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_maxdurable(&has_bits);
          maxdurable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* carddata_config_t_carddata_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.carddata_config.t_carddata_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 cardid = 2 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cardid(), target);
  }

  // required uint32 cardtype = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cardtype(), target);
  }

  // required uint32 cardgroup = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cardgroup(), target);
  }

  // required uint32 cardstar = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cardstar(), target);
  }

  // required uint32 decomposid = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_decomposid(), target);
  }

  // required uint32 fixedeffectid1 = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_fixedeffectid1(), target);
  }

  // required uint32 fixedeffectid2 = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_fixedeffectid2(), target);
  }

  // required uint32 fixedeffectid3 = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fixedeffectid3(), target);
  }

  // required string randskillgroup = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_randskillgroup().data(), static_cast<int>(this->_internal_randskillgroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.carddata_config.t_carddata_config.randskillgroup");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_randskillgroup(), target);
  }

  // required string randskillnum = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_randskillnum().data(), static_cast<int>(this->_internal_randskillnum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.carddata_config.t_carddata_config.randskillnum");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_randskillnum(), target);
  }

  // required string randtriggergroup = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_randtriggergroup().data(), static_cast<int>(this->_internal_randtriggergroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.carddata_config.t_carddata_config.randtriggergroup");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_randtriggergroup(), target);
  }

  // required string randtriggernum = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_randtriggernum().data(), static_cast<int>(this->_internal_randtriggernum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.carddata_config.t_carddata_config.randtriggernum");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_randtriggernum(), target);
  }

  // required string randeffectgroup = 14;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_randeffectgroup().data(), static_cast<int>(this->_internal_randeffectgroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.carddata_config.t_carddata_config.randeffectgroup");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_randeffectgroup(), target);
  }

  // required string randeffectnum = 15;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_randeffectnum().data(), static_cast<int>(this->_internal_randeffectnum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.carddata_config.t_carddata_config.randeffectnum");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_randeffectnum(), target);
  }

  // required uint32 maxdurable = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_maxdurable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.carddata_config.t_carddata_config)
  return target;
}

size_t carddata_config_t_carddata_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.carddata_config.t_carddata_config)
  size_t total_size = 0;

  if (_internal_has_randskillgroup()) {
    // required string randskillgroup = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randskillgroup());
  }

  if (_internal_has_randskillnum()) {
    // required string randskillnum = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randskillnum());
  }

  if (_internal_has_randtriggergroup()) {
    // required string randtriggergroup = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randtriggergroup());
  }

  if (_internal_has_randtriggernum()) {
    // required string randtriggernum = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randtriggernum());
  }

  if (_internal_has_randeffectgroup()) {
    // required string randeffectgroup = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randeffectgroup());
  }

  if (_internal_has_randeffectnum()) {
    // required string randeffectnum = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randeffectnum());
  }

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_cardid()) {
    // required uint32 cardid = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cardid());
  }

  if (_internal_has_cardtype()) {
    // required uint32 cardtype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cardtype());
  }

  if (_internal_has_cardgroup()) {
    // required uint32 cardgroup = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cardgroup());
  }

  if (_internal_has_cardstar()) {
    // required uint32 cardstar = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cardstar());
  }

  if (_internal_has_decomposid()) {
    // required uint32 decomposid = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decomposid());
  }

  if (_internal_has_fixedeffectid1()) {
    // required uint32 fixedeffectid1 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fixedeffectid1());
  }

  if (_internal_has_fixedeffectid2()) {
    // required uint32 fixedeffectid2 = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fixedeffectid2());
  }

  if (_internal_has_fixedeffectid3()) {
    // required uint32 fixedeffectid3 = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fixedeffectid3());
  }

  if (_internal_has_maxdurable()) {
    // required uint32 maxdurable = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxdurable());
  }

  return total_size;
}
size_t carddata_config_t_carddata_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.carddata_config.t_carddata_config)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000ffff) ^ 0x0000ffff) == 0) {  // All required fields are present.
    // required string randskillgroup = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randskillgroup());

    // required string randskillnum = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randskillnum());

    // required string randtriggergroup = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randtriggergroup());

    // required string randtriggernum = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randtriggernum());

    // required string randeffectgroup = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randeffectgroup());

    // required string randeffectnum = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_randeffectnum());

    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 cardid = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cardid());

    // required uint32 cardtype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cardtype());

    // required uint32 cardgroup = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cardgroup());

    // required uint32 cardstar = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cardstar());

    // required uint32 decomposid = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_decomposid());

    // required uint32 fixedeffectid1 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fixedeffectid1());

    // required uint32 fixedeffectid2 = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fixedeffectid2());

    // required uint32 fixedeffectid3 = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fixedeffectid3());

    // required uint32 maxdurable = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxdurable());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void carddata_config_t_carddata_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.carddata_config.t_carddata_config)
  GOOGLE_DCHECK_NE(&from, this);
  const carddata_config_t_carddata_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<carddata_config_t_carddata_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.carddata_config.t_carddata_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.carddata_config.t_carddata_config)
    MergeFrom(*source);
  }
}

void carddata_config_t_carddata_config::MergeFrom(const carddata_config_t_carddata_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.carddata_config.t_carddata_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      randskillgroup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randskillgroup_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      randskillnum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randskillnum_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      randtriggergroup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randtriggergroup_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      randtriggernum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randtriggernum_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      randeffectgroup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randeffectgroup_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      randeffectnum_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.randeffectnum_);
    }
    if (cached_has_bits & 0x00000040u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00000080u) {
      cardid_ = from.cardid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cardtype_ = from.cardtype_;
    }
    if (cached_has_bits & 0x00000200u) {
      cardgroup_ = from.cardgroup_;
    }
    if (cached_has_bits & 0x00000400u) {
      cardstar_ = from.cardstar_;
    }
    if (cached_has_bits & 0x00000800u) {
      decomposid_ = from.decomposid_;
    }
    if (cached_has_bits & 0x00001000u) {
      fixedeffectid1_ = from.fixedeffectid1_;
    }
    if (cached_has_bits & 0x00002000u) {
      fixedeffectid2_ = from.fixedeffectid2_;
    }
    if (cached_has_bits & 0x00004000u) {
      fixedeffectid3_ = from.fixedeffectid3_;
    }
    if (cached_has_bits & 0x00008000u) {
      maxdurable_ = from.maxdurable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void carddata_config_t_carddata_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.carddata_config.t_carddata_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void carddata_config_t_carddata_config::CopyFrom(const carddata_config_t_carddata_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.carddata_config.t_carddata_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool carddata_config_t_carddata_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;
  return true;
}

void carddata_config_t_carddata_config::InternalSwap(carddata_config_t_carddata_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  randskillgroup_.Swap(&other->randskillgroup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  randskillnum_.Swap(&other->randskillnum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  randtriggergroup_.Swap(&other->randtriggergroup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  randtriggernum_.Swap(&other->randtriggernum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  randeffectgroup_.Swap(&other->randeffectgroup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  randeffectnum_.Swap(&other->randeffectnum_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(cardid_, other->cardid_);
  swap(cardtype_, other->cardtype_);
  swap(cardgroup_, other->cardgroup_);
  swap(cardstar_, other->cardstar_);
  swap(decomposid_, other->decomposid_);
  swap(fixedeffectid1_, other->fixedeffectid1_);
  swap(fixedeffectid2_, other->fixedeffectid2_);
  swap(fixedeffectid3_, other->fixedeffectid3_);
  swap(maxdurable_, other->maxdurable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata carddata_config_t_carddata_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void carddata_config::InitAsDefaultInstance() {
}
class carddata_config::_Internal {
 public:
  using HasBits = decltype(std::declval<carddata_config>()._has_bits_);
};

carddata_config::carddata_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.carddata_config)
}
carddata_config::carddata_config(const carddata_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.carddata_config)
}

void carddata_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_carddata_config_carddata_5fconfig_2eproto.base);
}

carddata_config::~carddata_config() {
  // @@protoc_insertion_point(destructor:pb.carddata_config)
  SharedDtor();
}

void carddata_config::SharedDtor() {
}

void carddata_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const carddata_config& carddata_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_carddata_config_carddata_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void carddata_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.carddata_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* carddata_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.carddata_config.t_carddata_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* carddata_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.carddata_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.carddata_config.t_carddata_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.carddata_config)
  return target;
}

size_t carddata_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.carddata_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.carddata_config.t_carddata_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void carddata_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.carddata_config)
  GOOGLE_DCHECK_NE(&from, this);
  const carddata_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<carddata_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.carddata_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.carddata_config)
    MergeFrom(*source);
  }
}

void carddata_config::MergeFrom(const carddata_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.carddata_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void carddata_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.carddata_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void carddata_config::CopyFrom(const carddata_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.carddata_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool carddata_config::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void carddata_config::InternalSwap(carddata_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata carddata_config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::carddata_config_t_carddata_config* Arena::CreateMaybeMessage< ::pb::carddata_config_t_carddata_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::carddata_config_t_carddata_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::carddata_config* Arena::CreateMaybeMessage< ::pb::carddata_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::carddata_config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
