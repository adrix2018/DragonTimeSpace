// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill_data.proto

#include "skill_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_skill_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_skill_data_t_skill_lv_config_skill_5fdata_2eproto;
namespace pb {
class skill_data_t_skill_lv_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<skill_data_t_skill_lv_config> _instance;
} _skill_data_t_skill_lv_config_default_instance_;
class skill_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<skill_data> _instance;
} _skill_data_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_skill_data_skill_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_skill_data_default_instance_;
    new (ptr) ::pb::skill_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::skill_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_skill_data_skill_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_skill_data_skill_5fdata_2eproto}, {
      &scc_info_skill_data_t_skill_lv_config_skill_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_skill_data_t_skill_lv_config_skill_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_skill_data_t_skill_lv_config_default_instance_;
    new (ptr) ::pb::skill_data_t_skill_lv_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::skill_data_t_skill_lv_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_skill_data_t_skill_lv_config_skill_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_skill_data_t_skill_lv_config_skill_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skill_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skill_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skill_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skill_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, id_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, skillid_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, skillname_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, hero_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, unlocklevel_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, unlockevolution_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, dtime_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, maxoverlaytimes_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, canbe_passive_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, good_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, releasetype_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, chanttime_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, usetype_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, canbe_breakattack_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, level_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, desc_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, skillstatus_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, magiccost_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, skillicon_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, belongcareer_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, careerunlocklevel_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, createproficiency_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, needtarget_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, skillrange_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, extskill_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, publiccd_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, movebreakcomb_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, skillbreakcomb_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, multiskill_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, searchtype_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, castbeyondtype_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, searchrange_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, relyon_state_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, levelup_type_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, nextskillid_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data_t_skill_lv_config, levelupcost_),
  9,
  10,
  11,
  0,
  1,
  12,
  2,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  25,
  20,
  3,
  4,
  21,
  5,
  22,
  23,
  24,
  26,
  6,
  7,
  29,
  27,
  28,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  8,
  PROTOBUF_FIELD_OFFSET(::pb::skill_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::skill_data, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 42, sizeof(::pb::skill_data_t_skill_lv_config)},
  { 79, 85, sizeof(::pb::skill_data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_skill_data_t_skill_lv_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_skill_data_default_instance_),
};

const char descriptor_table_protodef_skill_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020skill_data.proto\022\002pb\"\277\006\n\nskill_data\022/\n"
  "\005datas\030\001 \003(\0132 .pb.skill_data.t_skill_lv_"
  "config\032\377\005\n\021t_skill_lv_config\022\020\n\005tbxid\030\001 "
  "\002(\004:\0010\022\r\n\002id\030\002 \002(\004:\0010\022\017\n\007skillid\030\003 \002(\r\022\021"
  "\n\tskillname\030\004 \002(\t\022\014\n\004hero\030\005 \002(\t\022\023\n\013unloc"
  "klevel\030\006 \002(\r\022\027\n\017unlockevolution\030\007 \002(\t\022\r\n"
  "\005dtime\030\010 \002(\r\022\027\n\017maxoverlaytimes\030\t \002(\r\022\025\n"
  "\rcanbe_passive\030\n \002(\r\022\014\n\004good\030\013 \002(\r\022\023\n\013re"
  "leasetype\030\014 \002(\r\022\021\n\tchanttime\030\r \002(\r\022\017\n\007us"
  "etype\030\016 \002(\r\022\031\n\021canbe_breakattack\030\017 \002(\010\022\r"
  "\n\005level\030\020 \002(\r\022\014\n\004desc\030\021 \002(\t\022\023\n\013skillstat"
  "us\030\022 \002(\t\022\021\n\tmagiccost\030\023 \002(\r\022\021\n\tskillicon"
  "\030\024 \002(\t\022\024\n\014belongcareer\030\025 \002(\r\022\031\n\021careerun"
  "locklevel\030\026 \002(\r\022\031\n\021createproficiency\030\027 \002"
  "(\r\022\022\n\nNeedTarget\030\030 \002(\010\022\022\n\nSkillRange\030\031 \002"
  "(\t\022\020\n\010extskill\030\032 \002(\t\022\020\n\010publicCD\030\033 \002(\r\022\025"
  "\n\rMoveBreakComb\030\034 \002(\010\022\026\n\016SkillBreakComb\030"
  "\035 \002(\010\022\022\n\nmultiskill\030\036 \002(\010\022\022\n\nSearchType\030"
  "\037 \002(\r\022\026\n\016CastBeyondType\030  \002(\r\022\023\n\013SearchR"
  "ange\030! \002(\r\022\024\n\014relyon_state\030\" \002(\r\022\024\n\014leve"
  "lup_type\030# \002(\r\022\023\n\013nextskillid\030$ \002(\r\022\023\n\013l"
  "evelupcost\030% \002(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skill_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_skill_5fdata_2eproto_sccs[2] = {
  &scc_info_skill_data_skill_5fdata_2eproto.base,
  &scc_info_skill_data_t_skill_lv_config_skill_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skill_5fdata_2eproto_once;
static bool descriptor_table_skill_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skill_5fdata_2eproto = {
  &descriptor_table_skill_5fdata_2eproto_initialized, descriptor_table_protodef_skill_5fdata_2eproto, "skill_data.proto", 856,
  &descriptor_table_skill_5fdata_2eproto_once, descriptor_table_skill_5fdata_2eproto_sccs, descriptor_table_skill_5fdata_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_skill_5fdata_2eproto::offsets,
  file_level_metadata_skill_5fdata_2eproto, 2, file_level_enum_descriptors_skill_5fdata_2eproto, file_level_service_descriptors_skill_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_skill_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_skill_5fdata_2eproto)), true);
namespace pb {

// ===================================================================

void skill_data_t_skill_lv_config::InitAsDefaultInstance() {
}
class skill_data_t_skill_lv_config::_Internal {
 public:
  using HasBits = decltype(std::declval<skill_data_t_skill_lv_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_skillid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_skillname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unlocklevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_unlockevolution(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_maxoverlaytimes(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_canbe_passive(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_good(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_releasetype(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_chanttime(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_usetype(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_canbe_breakattack(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skillstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_magiccost(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_skillicon(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_belongcareer(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_careerunlocklevel(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_createproficiency(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_needtarget(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_skillrange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_extskill(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_publiccd(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_movebreakcomb(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_skillbreakcomb(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_multiskill(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_searchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_castbeyondtype(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_searchrange(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_relyon_state(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_levelup_type(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_nextskillid(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_levelupcost(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

skill_data_t_skill_lv_config::skill_data_t_skill_lv_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.skill_data.t_skill_lv_config)
}
skill_data_t_skill_lv_config::skill_data_t_skill_lv_config(const skill_data_t_skill_lv_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skillname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_skillname()) {
    skillname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skillname_);
  }
  hero_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hero()) {
    hero_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hero_);
  }
  unlockevolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unlockevolution()) {
    unlockevolution_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unlockevolution_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  skillstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_skillstatus()) {
    skillstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skillstatus_);
  }
  skillicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_skillicon()) {
    skillicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skillicon_);
  }
  skillrange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_skillrange()) {
    skillrange_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skillrange_);
  }
  extskill_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extskill()) {
    extskill_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extskill_);
  }
  levelupcost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_levelupcost()) {
    levelupcost_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.levelupcost_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nextskillid_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(nextskillid_));
  // @@protoc_insertion_point(copy_constructor:pb.skill_data.t_skill_lv_config)
}

void skill_data_t_skill_lv_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_skill_data_t_skill_lv_config_skill_5fdata_2eproto.base);
  skillname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unlockevolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skillstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skillicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skillrange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extskill_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  levelupcost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nextskillid_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(nextskillid_));
}

skill_data_t_skill_lv_config::~skill_data_t_skill_lv_config() {
  // @@protoc_insertion_point(destructor:pb.skill_data.t_skill_lv_config)
  SharedDtor();
}

void skill_data_t_skill_lv_config::SharedDtor() {
  skillname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hero_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unlockevolution_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skillstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skillicon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skillrange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extskill_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  levelupcost_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void skill_data_t_skill_lv_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const skill_data_t_skill_lv_config& skill_data_t_skill_lv_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_skill_data_t_skill_lv_config_skill_5fdata_2eproto.base);
  return *internal_default_instance();
}


void skill_data_t_skill_lv_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.skill_data.t_skill_lv_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      skillname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hero_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      unlockevolution_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      desc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      skillstatus_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      skillicon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      skillrange_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      extskill_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    levelupcost_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&canbe_passive_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(canbe_passive_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&good_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&careerunlocklevel_) -
        reinterpret_cast<char*>(&good_)) + sizeof(careerunlocklevel_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&createproficiency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&searchtype_) -
        reinterpret_cast<char*>(&createproficiency_)) + sizeof(searchtype_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&castbeyondtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nextskillid_) -
        reinterpret_cast<char*>(&castbeyondtype_)) + sizeof(nextskillid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* skill_data_t_skill_lv_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&_has_bits_);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&_has_bits_);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 skillid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_skillid(&_has_bits_);
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string skillname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_skillname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_data.t_skill_lv_config.skillname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string hero = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hero();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_data.t_skill_lv_config.hero");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 unlocklevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_unlocklevel(&_has_bits_);
          unlocklevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string unlockevolution = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_unlockevolution();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_data.t_skill_lv_config.unlockevolution");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 dtime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_dtime(&_has_bits_);
          dtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxoverlaytimes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_maxoverlaytimes(&_has_bits_);
          maxoverlaytimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 canbe_passive = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_canbe_passive(&_has_bits_);
          canbe_passive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 good = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_good(&_has_bits_);
          good_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 releasetype = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_releasetype(&_has_bits_);
          releasetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 chanttime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_chanttime(&_has_bits_);
          chanttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 usetype = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_usetype(&_has_bits_);
          usetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool canbe_breakattack = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_canbe_breakattack(&_has_bits_);
          canbe_breakattack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 level = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_level(&_has_bits_);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string desc = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_data.t_skill_lv_config.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string skillstatus = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_skillstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_data.t_skill_lv_config.skillstatus");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 magiccost = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_magiccost(&_has_bits_);
          magiccost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string skillicon = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_skillicon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_data.t_skill_lv_config.skillicon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 belongcareer = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_belongcareer(&_has_bits_);
          belongcareer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 careerunlocklevel = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_careerunlocklevel(&_has_bits_);
          careerunlocklevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 createproficiency = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_createproficiency(&_has_bits_);
          createproficiency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool NeedTarget = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_needtarget(&_has_bits_);
          needtarget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SkillRange = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_skillrange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_data.t_skill_lv_config.SkillRange");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string extskill = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_extskill();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_data.t_skill_lv_config.extskill");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 publicCD = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_publiccd(&_has_bits_);
          publiccd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool MoveBreakComb = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_movebreakcomb(&_has_bits_);
          movebreakcomb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool SkillBreakComb = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_skillbreakcomb(&_has_bits_);
          skillbreakcomb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool multiskill = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_multiskill(&_has_bits_);
          multiskill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 SearchType = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_searchtype(&_has_bits_);
          searchtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 CastBeyondType = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_castbeyondtype(&_has_bits_);
          castbeyondtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 SearchRange = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_searchrange(&_has_bits_);
          searchrange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 relyon_state = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_relyon_state(&_has_bits_);
          relyon_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 levelup_type = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_levelup_type(&_has_bits_);
          levelup_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nextskillid = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_nextskillid(&_has_bits_);
          nextskillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string levelupcost = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_levelupcost();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_data.t_skill_lv_config.levelupcost");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* skill_data_t_skill_lv_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.skill_data.t_skill_lv_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint64 id = 2 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // required uint32 skillid = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skillid(), target);
  }

  // required string skillname = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_skillname().data(), static_cast<int>(this->_internal_skillname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_data.t_skill_lv_config.skillname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_skillname(), target);
  }

  // required string hero = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero().data(), static_cast<int>(this->_internal_hero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_data.t_skill_lv_config.hero");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hero(), target);
  }

  // required uint32 unlocklevel = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_unlocklevel(), target);
  }

  // required string unlockevolution = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unlockevolution().data(), static_cast<int>(this->_internal_unlockevolution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_data.t_skill_lv_config.unlockevolution");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_unlockevolution(), target);
  }

  // required uint32 dtime = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_dtime(), target);
  }

  // required uint32 maxoverlaytimes = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_maxoverlaytimes(), target);
  }

  // required uint32 canbe_passive = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_canbe_passive(), target);
  }

  // required uint32 good = 11;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_good(), target);
  }

  // required uint32 releasetype = 12;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_releasetype(), target);
  }

  // required uint32 chanttime = 13;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_chanttime(), target);
  }

  // required uint32 usetype = 14;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_usetype(), target);
  }

  // required bool canbe_breakattack = 15;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_canbe_breakattack(), target);
  }

  // required uint32 level = 16;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_level(), target);
  }

  // required string desc = 17;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_data.t_skill_lv_config.desc");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_desc(), target);
  }

  // required string skillstatus = 18;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_skillstatus().data(), static_cast<int>(this->_internal_skillstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_data.t_skill_lv_config.skillstatus");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_skillstatus(), target);
  }

  // required uint32 magiccost = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_magiccost(), target);
  }

  // required string skillicon = 20;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_skillicon().data(), static_cast<int>(this->_internal_skillicon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_data.t_skill_lv_config.skillicon");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_skillicon(), target);
  }

  // required uint32 belongcareer = 21;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_belongcareer(), target);
  }

  // required uint32 careerunlocklevel = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_careerunlocklevel(), target);
  }

  // required uint32 createproficiency = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_createproficiency(), target);
  }

  // required bool NeedTarget = 24;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_needtarget(), target);
  }

  // required string SkillRange = 25;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_skillrange().data(), static_cast<int>(this->_internal_skillrange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_data.t_skill_lv_config.SkillRange");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_skillrange(), target);
  }

  // required string extskill = 26;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extskill().data(), static_cast<int>(this->_internal_extskill().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_data.t_skill_lv_config.extskill");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_extskill(), target);
  }

  // required uint32 publicCD = 27;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_publiccd(), target);
  }

  // required bool MoveBreakComb = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_movebreakcomb(), target);
  }

  // required bool SkillBreakComb = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_skillbreakcomb(), target);
  }

  // required bool multiskill = 30;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_multiskill(), target);
  }

  // required uint32 SearchType = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_searchtype(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 CastBeyondType = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_castbeyondtype(), target);
  }

  // required uint32 SearchRange = 33;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_searchrange(), target);
  }

  // required uint32 relyon_state = 34;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_relyon_state(), target);
  }

  // required uint32 levelup_type = 35;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_levelup_type(), target);
  }

  // required uint32 nextskillid = 36;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_nextskillid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string levelupcost = 37;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_levelupcost().data(), static_cast<int>(this->_internal_levelupcost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_data.t_skill_lv_config.levelupcost");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_levelupcost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.skill_data.t_skill_lv_config)
  return target;
}

size_t skill_data_t_skill_lv_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.skill_data.t_skill_lv_config)
  size_t total_size = 0;

  if (_internal_has_skillname()) {
    // required string skillname = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skillname());
  }

  if (_internal_has_hero()) {
    // required string hero = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hero());
  }

  if (_internal_has_unlockevolution()) {
    // required string unlockevolution = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unlockevolution());
  }

  if (_internal_has_desc()) {
    // required string desc = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  if (_internal_has_skillstatus()) {
    // required string skillstatus = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skillstatus());
  }

  if (_internal_has_skillicon()) {
    // required string skillicon = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skillicon());
  }

  if (_internal_has_skillrange()) {
    // required string SkillRange = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skillrange());
  }

  if (_internal_has_extskill()) {
    // required string extskill = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extskill());
  }

  if (_internal_has_levelupcost()) {
    // required string levelupcost = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_levelupcost());
  }

  if (_internal_has_tbxid()) {
    // required uint64 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint64 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (_internal_has_skillid()) {
    // required uint32 skillid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skillid());
  }

  if (_internal_has_unlocklevel()) {
    // required uint32 unlocklevel = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unlocklevel());
  }

  if (_internal_has_dtime()) {
    // required uint32 dtime = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dtime());
  }

  if (_internal_has_maxoverlaytimes()) {
    // required uint32 maxoverlaytimes = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxoverlaytimes());
  }

  if (_internal_has_canbe_passive()) {
    // required uint32 canbe_passive = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_canbe_passive());
  }

  if (_internal_has_good()) {
    // required uint32 good = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_good());
  }

  if (_internal_has_releasetype()) {
    // required uint32 releasetype = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_releasetype());
  }

  if (_internal_has_chanttime()) {
    // required uint32 chanttime = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chanttime());
  }

  if (_internal_has_usetype()) {
    // required uint32 usetype = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_usetype());
  }

  if (_internal_has_level()) {
    // required uint32 level = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (_internal_has_magiccost()) {
    // required uint32 magiccost = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_magiccost());
  }

  if (_internal_has_belongcareer()) {
    // required uint32 belongcareer = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_belongcareer());
  }

  if (_internal_has_careerunlocklevel()) {
    // required uint32 careerunlocklevel = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_careerunlocklevel());
  }

  if (_internal_has_createproficiency()) {
    // required uint32 createproficiency = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_createproficiency());
  }

  if (_internal_has_canbe_breakattack()) {
    // required bool canbe_breakattack = 15;
    total_size += 1 + 1;
  }

  if (_internal_has_needtarget()) {
    // required bool NeedTarget = 24;
    total_size += 2 + 1;
  }

  if (_internal_has_movebreakcomb()) {
    // required bool MoveBreakComb = 28;
    total_size += 2 + 1;
  }

  if (_internal_has_skillbreakcomb()) {
    // required bool SkillBreakComb = 29;
    total_size += 2 + 1;
  }

  if (_internal_has_publiccd()) {
    // required uint32 publicCD = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_publiccd());
  }

  if (_internal_has_multiskill()) {
    // required bool multiskill = 30;
    total_size += 2 + 1;
  }

  if (_internal_has_searchtype()) {
    // required uint32 SearchType = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_searchtype());
  }

  if (_internal_has_castbeyondtype()) {
    // required uint32 CastBeyondType = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_castbeyondtype());
  }

  if (_internal_has_searchrange()) {
    // required uint32 SearchRange = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_searchrange());
  }

  if (_internal_has_relyon_state()) {
    // required uint32 relyon_state = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_relyon_state());
  }

  if (_internal_has_levelup_type()) {
    // required uint32 levelup_type = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levelup_type());
  }

  if (_internal_has_nextskillid()) {
    // required uint32 nextskillid = 36;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nextskillid());
  }

  return total_size;
}
size_t skill_data_t_skill_lv_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.skill_data.t_skill_lv_config)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_has_bits_[1] & 0x0000001f) ^ 0x0000001f)) == 0) {  // All required fields are present.
    // required string skillname = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skillname());

    // required string hero = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hero());

    // required string unlockevolution = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unlockevolution());

    // required string desc = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());

    // required string skillstatus = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skillstatus());

    // required string skillicon = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skillicon());

    // required string SkillRange = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skillrange());

    // required string extskill = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extskill());

    // required string levelupcost = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_levelupcost());

    // required uint64 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tbxid());

    // required uint64 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());

    // required uint32 skillid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skillid());

    // required uint32 unlocklevel = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unlocklevel());

    // required uint32 dtime = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dtime());

    // required uint32 maxoverlaytimes = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxoverlaytimes());

    // required uint32 canbe_passive = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_canbe_passive());

    // required uint32 good = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_good());

    // required uint32 releasetype = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_releasetype());

    // required uint32 chanttime = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chanttime());

    // required uint32 usetype = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_usetype());

    // required uint32 level = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());

    // required uint32 magiccost = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_magiccost());

    // required uint32 belongcareer = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_belongcareer());

    // required uint32 careerunlocklevel = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_careerunlocklevel());

    // required uint32 createproficiency = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_createproficiency());

    // required bool canbe_breakattack = 15;
    total_size += 1 + 1;

    // required bool NeedTarget = 24;
    total_size += 2 + 1;

    // required bool MoveBreakComb = 28;
    total_size += 2 + 1;

    // required bool SkillBreakComb = 29;
    total_size += 2 + 1;

    // required uint32 publicCD = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_publiccd());

    // required bool multiskill = 30;
    total_size += 2 + 1;

    // required uint32 SearchType = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_searchtype());

    // required uint32 CastBeyondType = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_castbeyondtype());

    // required uint32 SearchRange = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_searchrange());

    // required uint32 relyon_state = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_relyon_state());

    // required uint32 levelup_type = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levelup_type());

    // required uint32 nextskillid = 36;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nextskillid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void skill_data_t_skill_lv_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.skill_data.t_skill_lv_config)
  GOOGLE_DCHECK_NE(&from, this);
  const skill_data_t_skill_lv_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<skill_data_t_skill_lv_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.skill_data.t_skill_lv_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.skill_data.t_skill_lv_config)
    MergeFrom(*source);
  }
}

void skill_data_t_skill_lv_config::MergeFrom(const skill_data_t_skill_lv_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.skill_data.t_skill_lv_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      skillname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skillname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      hero_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hero_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      unlockevolution_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unlockevolution_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      skillstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skillstatus_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      skillicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skillicon_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      skillrange_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skillrange_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      extskill_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extskill_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      levelupcost_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.levelupcost_);
    }
    if (cached_has_bits & 0x00000200u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00000400u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000800u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00001000u) {
      unlocklevel_ = from.unlocklevel_;
    }
    if (cached_has_bits & 0x00002000u) {
      dtime_ = from.dtime_;
    }
    if (cached_has_bits & 0x00004000u) {
      maxoverlaytimes_ = from.maxoverlaytimes_;
    }
    if (cached_has_bits & 0x00008000u) {
      canbe_passive_ = from.canbe_passive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      good_ = from.good_;
    }
    if (cached_has_bits & 0x00020000u) {
      releasetype_ = from.releasetype_;
    }
    if (cached_has_bits & 0x00040000u) {
      chanttime_ = from.chanttime_;
    }
    if (cached_has_bits & 0x00080000u) {
      usetype_ = from.usetype_;
    }
    if (cached_has_bits & 0x00100000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00200000u) {
      magiccost_ = from.magiccost_;
    }
    if (cached_has_bits & 0x00400000u) {
      belongcareer_ = from.belongcareer_;
    }
    if (cached_has_bits & 0x00800000u) {
      careerunlocklevel_ = from.careerunlocklevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      createproficiency_ = from.createproficiency_;
    }
    if (cached_has_bits & 0x02000000u) {
      canbe_breakattack_ = from.canbe_breakattack_;
    }
    if (cached_has_bits & 0x04000000u) {
      needtarget_ = from.needtarget_;
    }
    if (cached_has_bits & 0x08000000u) {
      movebreakcomb_ = from.movebreakcomb_;
    }
    if (cached_has_bits & 0x10000000u) {
      skillbreakcomb_ = from.skillbreakcomb_;
    }
    if (cached_has_bits & 0x20000000u) {
      publiccd_ = from.publiccd_;
    }
    if (cached_has_bits & 0x40000000u) {
      multiskill_ = from.multiskill_;
    }
    if (cached_has_bits & 0x80000000u) {
      searchtype_ = from.searchtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      castbeyondtype_ = from.castbeyondtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      searchrange_ = from.searchrange_;
    }
    if (cached_has_bits & 0x00000004u) {
      relyon_state_ = from.relyon_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      levelup_type_ = from.levelup_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      nextskillid_ = from.nextskillid_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void skill_data_t_skill_lv_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.skill_data.t_skill_lv_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_data_t_skill_lv_config::CopyFrom(const skill_data_t_skill_lv_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.skill_data.t_skill_lv_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_data_t_skill_lv_config::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void skill_data_t_skill_lv_config::InternalSwap(skill_data_t_skill_lv_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  skillname_.Swap(&other->skillname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_.Swap(&other->hero_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unlockevolution_.Swap(&other->unlockevolution_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skillstatus_.Swap(&other->skillstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skillicon_.Swap(&other->skillicon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skillrange_.Swap(&other->skillrange_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extskill_.Swap(&other->extskill_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  levelupcost_.Swap(&other->levelupcost_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(skillid_, other->skillid_);
  swap(unlocklevel_, other->unlocklevel_);
  swap(dtime_, other->dtime_);
  swap(maxoverlaytimes_, other->maxoverlaytimes_);
  swap(canbe_passive_, other->canbe_passive_);
  swap(good_, other->good_);
  swap(releasetype_, other->releasetype_);
  swap(chanttime_, other->chanttime_);
  swap(usetype_, other->usetype_);
  swap(level_, other->level_);
  swap(magiccost_, other->magiccost_);
  swap(belongcareer_, other->belongcareer_);
  swap(careerunlocklevel_, other->careerunlocklevel_);
  swap(createproficiency_, other->createproficiency_);
  swap(canbe_breakattack_, other->canbe_breakattack_);
  swap(needtarget_, other->needtarget_);
  swap(movebreakcomb_, other->movebreakcomb_);
  swap(skillbreakcomb_, other->skillbreakcomb_);
  swap(publiccd_, other->publiccd_);
  swap(multiskill_, other->multiskill_);
  swap(searchtype_, other->searchtype_);
  swap(castbeyondtype_, other->castbeyondtype_);
  swap(searchrange_, other->searchrange_);
  swap(relyon_state_, other->relyon_state_);
  swap(levelup_type_, other->levelup_type_);
  swap(nextskillid_, other->nextskillid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata skill_data_t_skill_lv_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void skill_data::InitAsDefaultInstance() {
}
class skill_data::_Internal {
 public:
  using HasBits = decltype(std::declval<skill_data>()._has_bits_);
};

skill_data::skill_data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.skill_data)
}
skill_data::skill_data(const skill_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.skill_data)
}

void skill_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_skill_data_skill_5fdata_2eproto.base);
}

skill_data::~skill_data() {
  // @@protoc_insertion_point(destructor:pb.skill_data)
  SharedDtor();
}

void skill_data::SharedDtor() {
}

void skill_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const skill_data& skill_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_skill_data_skill_5fdata_2eproto.base);
  return *internal_default_instance();
}


void skill_data::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.skill_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* skill_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.skill_data.t_skill_lv_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* skill_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.skill_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.skill_data.t_skill_lv_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.skill_data)
  return target;
}

size_t skill_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.skill_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.skill_data.t_skill_lv_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void skill_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.skill_data)
  GOOGLE_DCHECK_NE(&from, this);
  const skill_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<skill_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.skill_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.skill_data)
    MergeFrom(*source);
  }
}

void skill_data::MergeFrom(const skill_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.skill_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void skill_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.skill_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_data::CopyFrom(const skill_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.skill_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_data::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void skill_data::InternalSwap(skill_data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata skill_data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::skill_data_t_skill_lv_config* Arena::CreateMaybeMessage< ::pb::skill_data_t_skill_lv_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::skill_data_t_skill_lv_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::skill_data* Arena::CreateMaybeMessage< ::pb::skill_data >(Arena* arena) {
  return Arena::CreateInternal< ::pb::skill_data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
