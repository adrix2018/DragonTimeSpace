// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guide.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_guide_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_guide_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_guide_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_guide_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_guide_2eproto;
namespace pb {
class guide;
class guideDefaultTypeInternal;
extern guideDefaultTypeInternal _guide_default_instance_;
class guide_t_guide;
class guide_t_guideDefaultTypeInternal;
extern guide_t_guideDefaultTypeInternal _guide_t_guide_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::guide* Arena::CreateMaybeMessage<::pb::guide>(Arena*);
template<> ::pb::guide_t_guide* Arena::CreateMaybeMessage<::pb::guide_t_guide>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class guide_t_guide :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.guide.t_guide) */ {
 public:
  guide_t_guide();
  virtual ~guide_t_guide();

  guide_t_guide(const guide_t_guide& from);
  guide_t_guide(guide_t_guide&& from) noexcept
    : guide_t_guide() {
    *this = ::std::move(from);
  }

  inline guide_t_guide& operator=(const guide_t_guide& from) {
    CopyFrom(from);
    return *this;
  }
  inline guide_t_guide& operator=(guide_t_guide&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const guide_t_guide& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const guide_t_guide* internal_default_instance() {
    return reinterpret_cast<const guide_t_guide*>(
               &_guide_t_guide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(guide_t_guide& a, guide_t_guide& b) {
    a.Swap(&b);
  }
  inline void Swap(guide_t_guide* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline guide_t_guide* New() const final {
    return CreateMaybeMessage<guide_t_guide>(nullptr);
  }

  guide_t_guide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<guide_t_guide>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const guide_t_guide& from);
  void MergeFrom(const guide_t_guide& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(guide_t_guide* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.guide.t_guide";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guide_2eproto);
    return ::descriptor_table_guide_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 5,
    kHightlightcomponentFieldNumber = 6,
    kGuidetextFieldNumber = 10,
    kDescribeFieldNumber = 11,
    kTrigquestFieldNumber = 15,
    kTriglimitFieldNumber = 16,
    kPosarrowFieldNumber = 20,
    kPosdialogueFieldNumber = 21,
    kPospaintingFieldNumber = 22,
    kPositionsquareFieldNumber = 23,
    kUIbondFieldNumber = 29,
    kUIbonusFieldNumber = 30,
    kPositionbonusFieldNumber = 31,
    kPositionoriginFieldNumber = 32,
    kUInumberFieldNumber = 33,
    kZoomFieldNumber = 35,
    kUiinitialFieldNumber = 36,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kGuideidFieldNumber = 3,
    kTriggertypeFieldNumber = 4,
    kDisappeartypeFieldNumber = 7,
    kWidthFieldNumber = 8,
    kHightFieldNumber = 9,
    kNeedfreezetimeFieldNumber = 12,
    kDirectionFieldNumber = 13,
    kTrignpcFieldNumber = 14,
    kIffreezeFieldNumber = 17,
    kShowbuffFieldNumber = 18,
    kShownpcFieldNumber = 19,
    kLasttimeFieldNumber = 24,
    kSteptimeFieldNumber = 25,
    kStateidFieldNumber = 26,
    kIfbtnFieldNumber = 27,
    kHighlighttypeFieldNumber = 28,
    kEnddistanceFieldNumber = 34,
    kItemidFieldNumber = 37,
    kAvataridFieldNumber = 38,
  };
  // required string condition = 5;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const std::string& condition() const;
  void set_condition(const std::string& value);
  void set_condition(std::string&& value);
  void set_condition(const char* value);
  void set_condition(const char* value, size_t size);
  std::string* mutable_condition();
  std::string* release_condition();
  void set_allocated_condition(std::string* condition);
  private:
  const std::string& _internal_condition() const;
  void _internal_set_condition(const std::string& value);
  std::string* _internal_mutable_condition();
  public:

  // required string hightlightcomponent = 6;
  bool has_hightlightcomponent() const;
  private:
  bool _internal_has_hightlightcomponent() const;
  public:
  void clear_hightlightcomponent();
  const std::string& hightlightcomponent() const;
  void set_hightlightcomponent(const std::string& value);
  void set_hightlightcomponent(std::string&& value);
  void set_hightlightcomponent(const char* value);
  void set_hightlightcomponent(const char* value, size_t size);
  std::string* mutable_hightlightcomponent();
  std::string* release_hightlightcomponent();
  void set_allocated_hightlightcomponent(std::string* hightlightcomponent);
  private:
  const std::string& _internal_hightlightcomponent() const;
  void _internal_set_hightlightcomponent(const std::string& value);
  std::string* _internal_mutable_hightlightcomponent();
  public:

  // required string guidetext = 10;
  bool has_guidetext() const;
  private:
  bool _internal_has_guidetext() const;
  public:
  void clear_guidetext();
  const std::string& guidetext() const;
  void set_guidetext(const std::string& value);
  void set_guidetext(std::string&& value);
  void set_guidetext(const char* value);
  void set_guidetext(const char* value, size_t size);
  std::string* mutable_guidetext();
  std::string* release_guidetext();
  void set_allocated_guidetext(std::string* guidetext);
  private:
  const std::string& _internal_guidetext() const;
  void _internal_set_guidetext(const std::string& value);
  std::string* _internal_mutable_guidetext();
  public:

  // required string describe = 11;
  bool has_describe() const;
  private:
  bool _internal_has_describe() const;
  public:
  void clear_describe();
  const std::string& describe() const;
  void set_describe(const std::string& value);
  void set_describe(std::string&& value);
  void set_describe(const char* value);
  void set_describe(const char* value, size_t size);
  std::string* mutable_describe();
  std::string* release_describe();
  void set_allocated_describe(std::string* describe);
  private:
  const std::string& _internal_describe() const;
  void _internal_set_describe(const std::string& value);
  std::string* _internal_mutable_describe();
  public:

  // required string trigquest = 15;
  bool has_trigquest() const;
  private:
  bool _internal_has_trigquest() const;
  public:
  void clear_trigquest();
  const std::string& trigquest() const;
  void set_trigquest(const std::string& value);
  void set_trigquest(std::string&& value);
  void set_trigquest(const char* value);
  void set_trigquest(const char* value, size_t size);
  std::string* mutable_trigquest();
  std::string* release_trigquest();
  void set_allocated_trigquest(std::string* trigquest);
  private:
  const std::string& _internal_trigquest() const;
  void _internal_set_trigquest(const std::string& value);
  std::string* _internal_mutable_trigquest();
  public:

  // required string triglimit = 16;
  bool has_triglimit() const;
  private:
  bool _internal_has_triglimit() const;
  public:
  void clear_triglimit();
  const std::string& triglimit() const;
  void set_triglimit(const std::string& value);
  void set_triglimit(std::string&& value);
  void set_triglimit(const char* value);
  void set_triglimit(const char* value, size_t size);
  std::string* mutable_triglimit();
  std::string* release_triglimit();
  void set_allocated_triglimit(std::string* triglimit);
  private:
  const std::string& _internal_triglimit() const;
  void _internal_set_triglimit(const std::string& value);
  std::string* _internal_mutable_triglimit();
  public:

  // required string posarrow = 20;
  bool has_posarrow() const;
  private:
  bool _internal_has_posarrow() const;
  public:
  void clear_posarrow();
  const std::string& posarrow() const;
  void set_posarrow(const std::string& value);
  void set_posarrow(std::string&& value);
  void set_posarrow(const char* value);
  void set_posarrow(const char* value, size_t size);
  std::string* mutable_posarrow();
  std::string* release_posarrow();
  void set_allocated_posarrow(std::string* posarrow);
  private:
  const std::string& _internal_posarrow() const;
  void _internal_set_posarrow(const std::string& value);
  std::string* _internal_mutable_posarrow();
  public:

  // required string posdialogue = 21;
  bool has_posdialogue() const;
  private:
  bool _internal_has_posdialogue() const;
  public:
  void clear_posdialogue();
  const std::string& posdialogue() const;
  void set_posdialogue(const std::string& value);
  void set_posdialogue(std::string&& value);
  void set_posdialogue(const char* value);
  void set_posdialogue(const char* value, size_t size);
  std::string* mutable_posdialogue();
  std::string* release_posdialogue();
  void set_allocated_posdialogue(std::string* posdialogue);
  private:
  const std::string& _internal_posdialogue() const;
  void _internal_set_posdialogue(const std::string& value);
  std::string* _internal_mutable_posdialogue();
  public:

  // required string pospainting = 22;
  bool has_pospainting() const;
  private:
  bool _internal_has_pospainting() const;
  public:
  void clear_pospainting();
  const std::string& pospainting() const;
  void set_pospainting(const std::string& value);
  void set_pospainting(std::string&& value);
  void set_pospainting(const char* value);
  void set_pospainting(const char* value, size_t size);
  std::string* mutable_pospainting();
  std::string* release_pospainting();
  void set_allocated_pospainting(std::string* pospainting);
  private:
  const std::string& _internal_pospainting() const;
  void _internal_set_pospainting(const std::string& value);
  std::string* _internal_mutable_pospainting();
  public:

  // required string positionsquare = 23;
  bool has_positionsquare() const;
  private:
  bool _internal_has_positionsquare() const;
  public:
  void clear_positionsquare();
  const std::string& positionsquare() const;
  void set_positionsquare(const std::string& value);
  void set_positionsquare(std::string&& value);
  void set_positionsquare(const char* value);
  void set_positionsquare(const char* value, size_t size);
  std::string* mutable_positionsquare();
  std::string* release_positionsquare();
  void set_allocated_positionsquare(std::string* positionsquare);
  private:
  const std::string& _internal_positionsquare() const;
  void _internal_set_positionsquare(const std::string& value);
  std::string* _internal_mutable_positionsquare();
  public:

  // required string UIbond = 29;
  bool has_uibond() const;
  private:
  bool _internal_has_uibond() const;
  public:
  void clear_uibond();
  const std::string& uibond() const;
  void set_uibond(const std::string& value);
  void set_uibond(std::string&& value);
  void set_uibond(const char* value);
  void set_uibond(const char* value, size_t size);
  std::string* mutable_uibond();
  std::string* release_uibond();
  void set_allocated_uibond(std::string* uibond);
  private:
  const std::string& _internal_uibond() const;
  void _internal_set_uibond(const std::string& value);
  std::string* _internal_mutable_uibond();
  public:

  // required string UIbonus = 30;
  bool has_uibonus() const;
  private:
  bool _internal_has_uibonus() const;
  public:
  void clear_uibonus();
  const std::string& uibonus() const;
  void set_uibonus(const std::string& value);
  void set_uibonus(std::string&& value);
  void set_uibonus(const char* value);
  void set_uibonus(const char* value, size_t size);
  std::string* mutable_uibonus();
  std::string* release_uibonus();
  void set_allocated_uibonus(std::string* uibonus);
  private:
  const std::string& _internal_uibonus() const;
  void _internal_set_uibonus(const std::string& value);
  std::string* _internal_mutable_uibonus();
  public:

  // required string positionbonus = 31;
  bool has_positionbonus() const;
  private:
  bool _internal_has_positionbonus() const;
  public:
  void clear_positionbonus();
  const std::string& positionbonus() const;
  void set_positionbonus(const std::string& value);
  void set_positionbonus(std::string&& value);
  void set_positionbonus(const char* value);
  void set_positionbonus(const char* value, size_t size);
  std::string* mutable_positionbonus();
  std::string* release_positionbonus();
  void set_allocated_positionbonus(std::string* positionbonus);
  private:
  const std::string& _internal_positionbonus() const;
  void _internal_set_positionbonus(const std::string& value);
  std::string* _internal_mutable_positionbonus();
  public:

  // required string positionorigin = 32;
  bool has_positionorigin() const;
  private:
  bool _internal_has_positionorigin() const;
  public:
  void clear_positionorigin();
  const std::string& positionorigin() const;
  void set_positionorigin(const std::string& value);
  void set_positionorigin(std::string&& value);
  void set_positionorigin(const char* value);
  void set_positionorigin(const char* value, size_t size);
  std::string* mutable_positionorigin();
  std::string* release_positionorigin();
  void set_allocated_positionorigin(std::string* positionorigin);
  private:
  const std::string& _internal_positionorigin() const;
  void _internal_set_positionorigin(const std::string& value);
  std::string* _internal_mutable_positionorigin();
  public:

  // required string UInumber = 33;
  bool has_uinumber() const;
  private:
  bool _internal_has_uinumber() const;
  public:
  void clear_uinumber();
  const std::string& uinumber() const;
  void set_uinumber(const std::string& value);
  void set_uinumber(std::string&& value);
  void set_uinumber(const char* value);
  void set_uinumber(const char* value, size_t size);
  std::string* mutable_uinumber();
  std::string* release_uinumber();
  void set_allocated_uinumber(std::string* uinumber);
  private:
  const std::string& _internal_uinumber() const;
  void _internal_set_uinumber(const std::string& value);
  std::string* _internal_mutable_uinumber();
  public:

  // required string zoom = 35;
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;
  public:
  void clear_zoom();
  const std::string& zoom() const;
  void set_zoom(const std::string& value);
  void set_zoom(std::string&& value);
  void set_zoom(const char* value);
  void set_zoom(const char* value, size_t size);
  std::string* mutable_zoom();
  std::string* release_zoom();
  void set_allocated_zoom(std::string* zoom);
  private:
  const std::string& _internal_zoom() const;
  void _internal_set_zoom(const std::string& value);
  std::string* _internal_mutable_zoom();
  public:

  // required string Uiinitial = 36;
  bool has_uiinitial() const;
  private:
  bool _internal_has_uiinitial() const;
  public:
  void clear_uiinitial();
  const std::string& uiinitial() const;
  void set_uiinitial(const std::string& value);
  void set_uiinitial(std::string&& value);
  void set_uiinitial(const char* value);
  void set_uiinitial(const char* value, size_t size);
  std::string* mutable_uiinitial();
  std::string* release_uiinitial();
  void set_allocated_uiinitial(std::string* uiinitial);
  private:
  const std::string& _internal_uiinitial() const;
  void _internal_set_uiinitial(const std::string& value);
  std::string* _internal_mutable_uiinitial();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 guideid = 3;
  bool has_guideid() const;
  private:
  bool _internal_has_guideid() const;
  public:
  void clear_guideid();
  ::PROTOBUF_NAMESPACE_ID::uint32 guideid() const;
  void set_guideid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guideid() const;
  void _internal_set_guideid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 triggertype = 4;
  bool has_triggertype() const;
  private:
  bool _internal_has_triggertype() const;
  public:
  void clear_triggertype();
  ::PROTOBUF_NAMESPACE_ID::uint32 triggertype() const;
  void set_triggertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_triggertype() const;
  void _internal_set_triggertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 disappeartype = 7;
  bool has_disappeartype() const;
  private:
  bool _internal_has_disappeartype() const;
  public:
  void clear_disappeartype();
  ::PROTOBUF_NAMESPACE_ID::uint32 disappeartype() const;
  void set_disappeartype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_disappeartype() const;
  void _internal_set_disappeartype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 width = 8;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 hight = 9;
  bool has_hight() const;
  private:
  bool _internal_has_hight() const;
  public:
  void clear_hight();
  ::PROTOBUF_NAMESPACE_ID::uint32 hight() const;
  void set_hight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hight() const;
  void _internal_set_hight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool needfreezetime = 12;
  bool has_needfreezetime() const;
  private:
  bool _internal_has_needfreezetime() const;
  public:
  void clear_needfreezetime();
  bool needfreezetime() const;
  void set_needfreezetime(bool value);
  private:
  bool _internal_needfreezetime() const;
  void _internal_set_needfreezetime(bool value);
  public:

  // required uint32 direction = 13;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 trignpc = 14;
  bool has_trignpc() const;
  private:
  bool _internal_has_trignpc() const;
  public:
  void clear_trignpc();
  ::PROTOBUF_NAMESPACE_ID::uint32 trignpc() const;
  void set_trignpc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trignpc() const;
  void _internal_set_trignpc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 iffreeze = 17;
  bool has_iffreeze() const;
  private:
  bool _internal_has_iffreeze() const;
  public:
  void clear_iffreeze();
  ::PROTOBUF_NAMESPACE_ID::uint32 iffreeze() const;
  void set_iffreeze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iffreeze() const;
  void _internal_set_iffreeze(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 showbuff = 18;
  bool has_showbuff() const;
  private:
  bool _internal_has_showbuff() const;
  public:
  void clear_showbuff();
  ::PROTOBUF_NAMESPACE_ID::uint32 showbuff() const;
  void set_showbuff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_showbuff() const;
  void _internal_set_showbuff(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 shownpc = 19;
  bool has_shownpc() const;
  private:
  bool _internal_has_shownpc() const;
  public:
  void clear_shownpc();
  ::PROTOBUF_NAMESPACE_ID::uint32 shownpc() const;
  void set_shownpc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shownpc() const;
  void _internal_set_shownpc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 lasttime = 24;
  bool has_lasttime() const;
  private:
  bool _internal_has_lasttime() const;
  public:
  void clear_lasttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 lasttime() const;
  void set_lasttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lasttime() const;
  void _internal_set_lasttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float steptime = 25;
  bool has_steptime() const;
  private:
  bool _internal_has_steptime() const;
  public:
  void clear_steptime();
  float steptime() const;
  void set_steptime(float value);
  private:
  float _internal_steptime() const;
  void _internal_set_steptime(float value);
  public:

  // required uint32 stateid = 26;
  bool has_stateid() const;
  private:
  bool _internal_has_stateid() const;
  public:
  void clear_stateid();
  ::PROTOBUF_NAMESPACE_ID::uint32 stateid() const;
  void set_stateid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stateid() const;
  void _internal_set_stateid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ifbtn = 27;
  bool has_ifbtn() const;
  private:
  bool _internal_has_ifbtn() const;
  public:
  void clear_ifbtn();
  ::PROTOBUF_NAMESPACE_ID::uint32 ifbtn() const;
  void set_ifbtn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ifbtn() const;
  void _internal_set_ifbtn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 highlighttype = 28;
  bool has_highlighttype() const;
  private:
  bool _internal_has_highlighttype() const;
  public:
  void clear_highlighttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 highlighttype() const;
  void set_highlighttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_highlighttype() const;
  void _internal_set_highlighttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 enddistance = 34;
  bool has_enddistance() const;
  private:
  bool _internal_has_enddistance() const;
  public:
  void clear_enddistance();
  ::PROTOBUF_NAMESPACE_ID::uint32 enddistance() const;
  void set_enddistance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enddistance() const;
  void _internal_set_enddistance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 itemid = 37;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  ::PROTOBUF_NAMESPACE_ID::uint32 itemid() const;
  void set_itemid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_itemid() const;
  void _internal_set_itemid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 avatarid = 38;
  bool has_avatarid() const;
  private:
  bool _internal_has_avatarid() const;
  public:
  void clear_avatarid();
  ::PROTOBUF_NAMESPACE_ID::uint32 avatarid() const;
  void set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avatarid() const;
  void _internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.guide.t_guide)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr condition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hightlightcomponent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guidetext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr describe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trigquest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr triglimit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posarrow_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posdialogue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pospainting_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positionsquare_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uibond_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uibonus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positionbonus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr positionorigin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uinumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zoom_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uiinitial_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guideid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 triggertype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 disappeartype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hight_;
  bool needfreezetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trignpc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iffreeze_;
  ::PROTOBUF_NAMESPACE_ID::uint32 showbuff_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shownpc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lasttime_;
  float steptime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stateid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ifbtn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 highlighttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enddistance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 itemid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avatarid_;
  friend struct ::TableStruct_guide_2eproto;
};
// -------------------------------------------------------------------

class guide :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.guide) */ {
 public:
  guide();
  virtual ~guide();

  guide(const guide& from);
  guide(guide&& from) noexcept
    : guide() {
    *this = ::std::move(from);
  }

  inline guide& operator=(const guide& from) {
    CopyFrom(from);
    return *this;
  }
  inline guide& operator=(guide&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const guide& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const guide* internal_default_instance() {
    return reinterpret_cast<const guide*>(
               &_guide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(guide& a, guide& b) {
    a.Swap(&b);
  }
  inline void Swap(guide* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline guide* New() const final {
    return CreateMaybeMessage<guide>(nullptr);
  }

  guide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<guide>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const guide& from);
  void MergeFrom(const guide& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(guide* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.guide";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_guide_2eproto);
    return ::descriptor_table_guide_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef guide_t_guide t_guide;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.guide.t_guide datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::guide_t_guide* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::guide_t_guide >*
      mutable_datas();
  private:
  const ::pb::guide_t_guide& _internal_datas(int index) const;
  ::pb::guide_t_guide* _internal_add_datas();
  public:
  const ::pb::guide_t_guide& datas(int index) const;
  ::pb::guide_t_guide* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::guide_t_guide >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.guide)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::guide_t_guide > datas_;
  friend struct ::TableStruct_guide_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// guide_t_guide

// required uint32 tbxid = 1 [default = 0];
inline bool guide_t_guide::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool guide_t_guide::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void guide_t_guide::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.tbxid)
  return _internal_tbxid();
}
inline void guide_t_guide::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  tbxid_ = value;
}
inline void guide_t_guide::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool guide_t_guide::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool guide_t_guide::has_id() const {
  return _internal_has_id();
}
inline void guide_t_guide::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::id() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.id)
  return _internal_id();
}
inline void guide_t_guide::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  id_ = value;
}
inline void guide_t_guide::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.id)
}

// required uint32 guideid = 3;
inline bool guide_t_guide::_internal_has_guideid() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool guide_t_guide::has_guideid() const {
  return _internal_has_guideid();
}
inline void guide_t_guide::clear_guideid() {
  guideid_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_guideid() const {
  return guideid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::guideid() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.guideid)
  return _internal_guideid();
}
inline void guide_t_guide::_internal_set_guideid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  guideid_ = value;
}
inline void guide_t_guide::set_guideid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guideid(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.guideid)
}

// required uint32 triggertype = 4;
inline bool guide_t_guide::_internal_has_triggertype() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool guide_t_guide::has_triggertype() const {
  return _internal_has_triggertype();
}
inline void guide_t_guide::clear_triggertype() {
  triggertype_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_triggertype() const {
  return triggertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::triggertype() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.triggertype)
  return _internal_triggertype();
}
inline void guide_t_guide::_internal_set_triggertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  triggertype_ = value;
}
inline void guide_t_guide::set_triggertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_triggertype(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.triggertype)
}

// required string condition = 5;
inline bool guide_t_guide::_internal_has_condition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool guide_t_guide::has_condition() const {
  return _internal_has_condition();
}
inline void guide_t_guide::clear_condition() {
  condition_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& guide_t_guide::condition() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.condition)
  return _internal_condition();
}
inline void guide_t_guide::set_condition(const std::string& value) {
  _internal_set_condition(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.condition)
}
inline std::string* guide_t_guide::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.condition)
  return _internal_mutable_condition();
}
inline const std::string& guide_t_guide::_internal_condition() const {
  return condition_.GetNoArena();
}
inline void guide_t_guide::_internal_set_condition(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  condition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_condition(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  condition_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.condition)
}
inline void guide_t_guide::set_condition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  condition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.condition)
}
inline void guide_t_guide::set_condition(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  condition_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.condition)
}
inline std::string* guide_t_guide::_internal_mutable_condition() {
  _has_bits_[0] |= 0x00000001u;
  return condition_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_condition() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.condition)
  if (!_internal_has_condition()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return condition_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_condition(std::string* condition) {
  if (condition != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  condition_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), condition);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.condition)
}

// required string hightlightcomponent = 6;
inline bool guide_t_guide::_internal_has_hightlightcomponent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool guide_t_guide::has_hightlightcomponent() const {
  return _internal_has_hightlightcomponent();
}
inline void guide_t_guide::clear_hightlightcomponent() {
  hightlightcomponent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& guide_t_guide::hightlightcomponent() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.hightlightcomponent)
  return _internal_hightlightcomponent();
}
inline void guide_t_guide::set_hightlightcomponent(const std::string& value) {
  _internal_set_hightlightcomponent(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.hightlightcomponent)
}
inline std::string* guide_t_guide::mutable_hightlightcomponent() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.hightlightcomponent)
  return _internal_mutable_hightlightcomponent();
}
inline const std::string& guide_t_guide::_internal_hightlightcomponent() const {
  return hightlightcomponent_.GetNoArena();
}
inline void guide_t_guide::_internal_set_hightlightcomponent(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hightlightcomponent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_hightlightcomponent(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hightlightcomponent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.hightlightcomponent)
}
inline void guide_t_guide::set_hightlightcomponent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hightlightcomponent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.hightlightcomponent)
}
inline void guide_t_guide::set_hightlightcomponent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hightlightcomponent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.hightlightcomponent)
}
inline std::string* guide_t_guide::_internal_mutable_hightlightcomponent() {
  _has_bits_[0] |= 0x00000002u;
  return hightlightcomponent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_hightlightcomponent() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.hightlightcomponent)
  if (!_internal_has_hightlightcomponent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hightlightcomponent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_hightlightcomponent(std::string* hightlightcomponent) {
  if (hightlightcomponent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hightlightcomponent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hightlightcomponent);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.hightlightcomponent)
}

// required uint32 disappeartype = 7;
inline bool guide_t_guide::_internal_has_disappeartype() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool guide_t_guide::has_disappeartype() const {
  return _internal_has_disappeartype();
}
inline void guide_t_guide::clear_disappeartype() {
  disappeartype_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_disappeartype() const {
  return disappeartype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::disappeartype() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.disappeartype)
  return _internal_disappeartype();
}
inline void guide_t_guide::_internal_set_disappeartype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  disappeartype_ = value;
}
inline void guide_t_guide::set_disappeartype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_disappeartype(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.disappeartype)
}

// required uint32 width = 8;
inline bool guide_t_guide::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool guide_t_guide::has_width() const {
  return _internal_has_width();
}
inline void guide_t_guide::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::width() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.width)
  return _internal_width();
}
inline void guide_t_guide::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  width_ = value;
}
inline void guide_t_guide::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.width)
}

// required uint32 hight = 9;
inline bool guide_t_guide::_internal_has_hight() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool guide_t_guide::has_hight() const {
  return _internal_has_hight();
}
inline void guide_t_guide::clear_hight() {
  hight_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_hight() const {
  return hight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::hight() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.hight)
  return _internal_hight();
}
inline void guide_t_guide::_internal_set_hight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  hight_ = value;
}
inline void guide_t_guide::set_hight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hight(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.hight)
}

// required string guidetext = 10;
inline bool guide_t_guide::_internal_has_guidetext() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool guide_t_guide::has_guidetext() const {
  return _internal_has_guidetext();
}
inline void guide_t_guide::clear_guidetext() {
  guidetext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& guide_t_guide::guidetext() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.guidetext)
  return _internal_guidetext();
}
inline void guide_t_guide::set_guidetext(const std::string& value) {
  _internal_set_guidetext(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.guidetext)
}
inline std::string* guide_t_guide::mutable_guidetext() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.guidetext)
  return _internal_mutable_guidetext();
}
inline const std::string& guide_t_guide::_internal_guidetext() const {
  return guidetext_.GetNoArena();
}
inline void guide_t_guide::_internal_set_guidetext(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  guidetext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_guidetext(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  guidetext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.guidetext)
}
inline void guide_t_guide::set_guidetext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  guidetext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.guidetext)
}
inline void guide_t_guide::set_guidetext(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  guidetext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.guidetext)
}
inline std::string* guide_t_guide::_internal_mutable_guidetext() {
  _has_bits_[0] |= 0x00000004u;
  return guidetext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_guidetext() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.guidetext)
  if (!_internal_has_guidetext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return guidetext_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_guidetext(std::string* guidetext) {
  if (guidetext != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  guidetext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guidetext);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.guidetext)
}

// required string describe = 11;
inline bool guide_t_guide::_internal_has_describe() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool guide_t_guide::has_describe() const {
  return _internal_has_describe();
}
inline void guide_t_guide::clear_describe() {
  describe_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& guide_t_guide::describe() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.describe)
  return _internal_describe();
}
inline void guide_t_guide::set_describe(const std::string& value) {
  _internal_set_describe(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.describe)
}
inline std::string* guide_t_guide::mutable_describe() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.describe)
  return _internal_mutable_describe();
}
inline const std::string& guide_t_guide::_internal_describe() const {
  return describe_.GetNoArena();
}
inline void guide_t_guide::_internal_set_describe(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  describe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_describe(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  describe_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.describe)
}
inline void guide_t_guide::set_describe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  describe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.describe)
}
inline void guide_t_guide::set_describe(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  describe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.describe)
}
inline std::string* guide_t_guide::_internal_mutable_describe() {
  _has_bits_[0] |= 0x00000008u;
  return describe_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_describe() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.describe)
  if (!_internal_has_describe()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return describe_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_describe(std::string* describe) {
  if (describe != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  describe_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.describe)
}

// required bool needfreezetime = 12;
inline bool guide_t_guide::_internal_has_needfreezetime() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool guide_t_guide::has_needfreezetime() const {
  return _internal_has_needfreezetime();
}
inline void guide_t_guide::clear_needfreezetime() {
  needfreezetime_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool guide_t_guide::_internal_needfreezetime() const {
  return needfreezetime_;
}
inline bool guide_t_guide::needfreezetime() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.needfreezetime)
  return _internal_needfreezetime();
}
inline void guide_t_guide::_internal_set_needfreezetime(bool value) {
  _has_bits_[0] |= 0x01000000u;
  needfreezetime_ = value;
}
inline void guide_t_guide::set_needfreezetime(bool value) {
  _internal_set_needfreezetime(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.needfreezetime)
}

// required uint32 direction = 13;
inline bool guide_t_guide::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool guide_t_guide::has_direction() const {
  return _internal_has_direction();
}
inline void guide_t_guide::clear_direction() {
  direction_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::direction() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.direction)
  return _internal_direction();
}
inline void guide_t_guide::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  direction_ = value;
}
inline void guide_t_guide::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.direction)
}

// required uint32 trignpc = 14;
inline bool guide_t_guide::_internal_has_trignpc() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool guide_t_guide::has_trignpc() const {
  return _internal_has_trignpc();
}
inline void guide_t_guide::clear_trignpc() {
  trignpc_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_trignpc() const {
  return trignpc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::trignpc() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.trignpc)
  return _internal_trignpc();
}
inline void guide_t_guide::_internal_set_trignpc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  trignpc_ = value;
}
inline void guide_t_guide::set_trignpc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trignpc(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.trignpc)
}

// required string trigquest = 15;
inline bool guide_t_guide::_internal_has_trigquest() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool guide_t_guide::has_trigquest() const {
  return _internal_has_trigquest();
}
inline void guide_t_guide::clear_trigquest() {
  trigquest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& guide_t_guide::trigquest() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.trigquest)
  return _internal_trigquest();
}
inline void guide_t_guide::set_trigquest(const std::string& value) {
  _internal_set_trigquest(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.trigquest)
}
inline std::string* guide_t_guide::mutable_trigquest() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.trigquest)
  return _internal_mutable_trigquest();
}
inline const std::string& guide_t_guide::_internal_trigquest() const {
  return trigquest_.GetNoArena();
}
inline void guide_t_guide::_internal_set_trigquest(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  trigquest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_trigquest(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  trigquest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.trigquest)
}
inline void guide_t_guide::set_trigquest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  trigquest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.trigquest)
}
inline void guide_t_guide::set_trigquest(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  trigquest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.trigquest)
}
inline std::string* guide_t_guide::_internal_mutable_trigquest() {
  _has_bits_[0] |= 0x00000010u;
  return trigquest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_trigquest() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.trigquest)
  if (!_internal_has_trigquest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return trigquest_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_trigquest(std::string* trigquest) {
  if (trigquest != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  trigquest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trigquest);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.trigquest)
}

// required string triglimit = 16;
inline bool guide_t_guide::_internal_has_triglimit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool guide_t_guide::has_triglimit() const {
  return _internal_has_triglimit();
}
inline void guide_t_guide::clear_triglimit() {
  triglimit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& guide_t_guide::triglimit() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.triglimit)
  return _internal_triglimit();
}
inline void guide_t_guide::set_triglimit(const std::string& value) {
  _internal_set_triglimit(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.triglimit)
}
inline std::string* guide_t_guide::mutable_triglimit() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.triglimit)
  return _internal_mutable_triglimit();
}
inline const std::string& guide_t_guide::_internal_triglimit() const {
  return triglimit_.GetNoArena();
}
inline void guide_t_guide::_internal_set_triglimit(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  triglimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_triglimit(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  triglimit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.triglimit)
}
inline void guide_t_guide::set_triglimit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  triglimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.triglimit)
}
inline void guide_t_guide::set_triglimit(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  triglimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.triglimit)
}
inline std::string* guide_t_guide::_internal_mutable_triglimit() {
  _has_bits_[0] |= 0x00000020u;
  return triglimit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_triglimit() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.triglimit)
  if (!_internal_has_triglimit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return triglimit_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_triglimit(std::string* triglimit) {
  if (triglimit != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  triglimit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), triglimit);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.triglimit)
}

// required uint32 iffreeze = 17;
inline bool guide_t_guide::_internal_has_iffreeze() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool guide_t_guide::has_iffreeze() const {
  return _internal_has_iffreeze();
}
inline void guide_t_guide::clear_iffreeze() {
  iffreeze_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_iffreeze() const {
  return iffreeze_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::iffreeze() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.iffreeze)
  return _internal_iffreeze();
}
inline void guide_t_guide::_internal_set_iffreeze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  iffreeze_ = value;
}
inline void guide_t_guide::set_iffreeze(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iffreeze(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.iffreeze)
}

// required uint32 showbuff = 18;
inline bool guide_t_guide::_internal_has_showbuff() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool guide_t_guide::has_showbuff() const {
  return _internal_has_showbuff();
}
inline void guide_t_guide::clear_showbuff() {
  showbuff_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_showbuff() const {
  return showbuff_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::showbuff() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.showbuff)
  return _internal_showbuff();
}
inline void guide_t_guide::_internal_set_showbuff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  showbuff_ = value;
}
inline void guide_t_guide::set_showbuff(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_showbuff(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.showbuff)
}

// required uint32 shownpc = 19;
inline bool guide_t_guide::_internal_has_shownpc() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool guide_t_guide::has_shownpc() const {
  return _internal_has_shownpc();
}
inline void guide_t_guide::clear_shownpc() {
  shownpc_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_shownpc() const {
  return shownpc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::shownpc() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.shownpc)
  return _internal_shownpc();
}
inline void guide_t_guide::_internal_set_shownpc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  shownpc_ = value;
}
inline void guide_t_guide::set_shownpc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shownpc(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.shownpc)
}

// required string posarrow = 20;
inline bool guide_t_guide::_internal_has_posarrow() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool guide_t_guide::has_posarrow() const {
  return _internal_has_posarrow();
}
inline void guide_t_guide::clear_posarrow() {
  posarrow_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& guide_t_guide::posarrow() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.posarrow)
  return _internal_posarrow();
}
inline void guide_t_guide::set_posarrow(const std::string& value) {
  _internal_set_posarrow(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.posarrow)
}
inline std::string* guide_t_guide::mutable_posarrow() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.posarrow)
  return _internal_mutable_posarrow();
}
inline const std::string& guide_t_guide::_internal_posarrow() const {
  return posarrow_.GetNoArena();
}
inline void guide_t_guide::_internal_set_posarrow(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  posarrow_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_posarrow(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  posarrow_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.posarrow)
}
inline void guide_t_guide::set_posarrow(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  posarrow_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.posarrow)
}
inline void guide_t_guide::set_posarrow(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  posarrow_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.posarrow)
}
inline std::string* guide_t_guide::_internal_mutable_posarrow() {
  _has_bits_[0] |= 0x00000040u;
  return posarrow_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_posarrow() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.posarrow)
  if (!_internal_has_posarrow()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return posarrow_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_posarrow(std::string* posarrow) {
  if (posarrow != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  posarrow_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), posarrow);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.posarrow)
}

// required string posdialogue = 21;
inline bool guide_t_guide::_internal_has_posdialogue() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool guide_t_guide::has_posdialogue() const {
  return _internal_has_posdialogue();
}
inline void guide_t_guide::clear_posdialogue() {
  posdialogue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& guide_t_guide::posdialogue() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.posdialogue)
  return _internal_posdialogue();
}
inline void guide_t_guide::set_posdialogue(const std::string& value) {
  _internal_set_posdialogue(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.posdialogue)
}
inline std::string* guide_t_guide::mutable_posdialogue() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.posdialogue)
  return _internal_mutable_posdialogue();
}
inline const std::string& guide_t_guide::_internal_posdialogue() const {
  return posdialogue_.GetNoArena();
}
inline void guide_t_guide::_internal_set_posdialogue(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  posdialogue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_posdialogue(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  posdialogue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.posdialogue)
}
inline void guide_t_guide::set_posdialogue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  posdialogue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.posdialogue)
}
inline void guide_t_guide::set_posdialogue(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  posdialogue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.posdialogue)
}
inline std::string* guide_t_guide::_internal_mutable_posdialogue() {
  _has_bits_[0] |= 0x00000080u;
  return posdialogue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_posdialogue() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.posdialogue)
  if (!_internal_has_posdialogue()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return posdialogue_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_posdialogue(std::string* posdialogue) {
  if (posdialogue != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  posdialogue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), posdialogue);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.posdialogue)
}

// required string pospainting = 22;
inline bool guide_t_guide::_internal_has_pospainting() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool guide_t_guide::has_pospainting() const {
  return _internal_has_pospainting();
}
inline void guide_t_guide::clear_pospainting() {
  pospainting_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& guide_t_guide::pospainting() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.pospainting)
  return _internal_pospainting();
}
inline void guide_t_guide::set_pospainting(const std::string& value) {
  _internal_set_pospainting(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.pospainting)
}
inline std::string* guide_t_guide::mutable_pospainting() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.pospainting)
  return _internal_mutable_pospainting();
}
inline const std::string& guide_t_guide::_internal_pospainting() const {
  return pospainting_.GetNoArena();
}
inline void guide_t_guide::_internal_set_pospainting(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  pospainting_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_pospainting(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  pospainting_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.pospainting)
}
inline void guide_t_guide::set_pospainting(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  pospainting_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.pospainting)
}
inline void guide_t_guide::set_pospainting(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  pospainting_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.pospainting)
}
inline std::string* guide_t_guide::_internal_mutable_pospainting() {
  _has_bits_[0] |= 0x00000100u;
  return pospainting_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_pospainting() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.pospainting)
  if (!_internal_has_pospainting()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return pospainting_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_pospainting(std::string* pospainting) {
  if (pospainting != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  pospainting_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pospainting);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.pospainting)
}

// required string positionsquare = 23;
inline bool guide_t_guide::_internal_has_positionsquare() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool guide_t_guide::has_positionsquare() const {
  return _internal_has_positionsquare();
}
inline void guide_t_guide::clear_positionsquare() {
  positionsquare_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& guide_t_guide::positionsquare() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.positionsquare)
  return _internal_positionsquare();
}
inline void guide_t_guide::set_positionsquare(const std::string& value) {
  _internal_set_positionsquare(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.positionsquare)
}
inline std::string* guide_t_guide::mutable_positionsquare() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.positionsquare)
  return _internal_mutable_positionsquare();
}
inline const std::string& guide_t_guide::_internal_positionsquare() const {
  return positionsquare_.GetNoArena();
}
inline void guide_t_guide::_internal_set_positionsquare(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  positionsquare_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_positionsquare(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  positionsquare_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.positionsquare)
}
inline void guide_t_guide::set_positionsquare(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  positionsquare_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.positionsquare)
}
inline void guide_t_guide::set_positionsquare(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  positionsquare_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.positionsquare)
}
inline std::string* guide_t_guide::_internal_mutable_positionsquare() {
  _has_bits_[0] |= 0x00000200u;
  return positionsquare_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_positionsquare() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.positionsquare)
  if (!_internal_has_positionsquare()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return positionsquare_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_positionsquare(std::string* positionsquare) {
  if (positionsquare != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  positionsquare_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), positionsquare);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.positionsquare)
}

// required uint32 lasttime = 24;
inline bool guide_t_guide::_internal_has_lasttime() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool guide_t_guide::has_lasttime() const {
  return _internal_has_lasttime();
}
inline void guide_t_guide::clear_lasttime() {
  lasttime_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_lasttime() const {
  return lasttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::lasttime() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.lasttime)
  return _internal_lasttime();
}
inline void guide_t_guide::_internal_set_lasttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  lasttime_ = value;
}
inline void guide_t_guide::set_lasttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lasttime(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.lasttime)
}

// required float steptime = 25;
inline bool guide_t_guide::_internal_has_steptime() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool guide_t_guide::has_steptime() const {
  return _internal_has_steptime();
}
inline void guide_t_guide::clear_steptime() {
  steptime_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float guide_t_guide::_internal_steptime() const {
  return steptime_;
}
inline float guide_t_guide::steptime() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.steptime)
  return _internal_steptime();
}
inline void guide_t_guide::_internal_set_steptime(float value) {
  _has_bits_[0] |= 0x80000000u;
  steptime_ = value;
}
inline void guide_t_guide::set_steptime(float value) {
  _internal_set_steptime(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.steptime)
}

// required uint32 stateid = 26;
inline bool guide_t_guide::_internal_has_stateid() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool guide_t_guide::has_stateid() const {
  return _internal_has_stateid();
}
inline void guide_t_guide::clear_stateid() {
  stateid_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_stateid() const {
  return stateid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::stateid() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.stateid)
  return _internal_stateid();
}
inline void guide_t_guide::_internal_set_stateid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  stateid_ = value;
}
inline void guide_t_guide::set_stateid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stateid(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.stateid)
}

// required uint32 ifbtn = 27;
inline bool guide_t_guide::_internal_has_ifbtn() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool guide_t_guide::has_ifbtn() const {
  return _internal_has_ifbtn();
}
inline void guide_t_guide::clear_ifbtn() {
  ifbtn_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_ifbtn() const {
  return ifbtn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::ifbtn() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.ifbtn)
  return _internal_ifbtn();
}
inline void guide_t_guide::_internal_set_ifbtn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  ifbtn_ = value;
}
inline void guide_t_guide::set_ifbtn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ifbtn(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.ifbtn)
}

// required uint32 highlighttype = 28;
inline bool guide_t_guide::_internal_has_highlighttype() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool guide_t_guide::has_highlighttype() const {
  return _internal_has_highlighttype();
}
inline void guide_t_guide::clear_highlighttype() {
  highlighttype_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_highlighttype() const {
  return highlighttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::highlighttype() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.highlighttype)
  return _internal_highlighttype();
}
inline void guide_t_guide::_internal_set_highlighttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  highlighttype_ = value;
}
inline void guide_t_guide::set_highlighttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_highlighttype(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.highlighttype)
}

// required string UIbond = 29;
inline bool guide_t_guide::_internal_has_uibond() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool guide_t_guide::has_uibond() const {
  return _internal_has_uibond();
}
inline void guide_t_guide::clear_uibond() {
  uibond_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& guide_t_guide::uibond() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.UIbond)
  return _internal_uibond();
}
inline void guide_t_guide::set_uibond(const std::string& value) {
  _internal_set_uibond(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.UIbond)
}
inline std::string* guide_t_guide::mutable_uibond() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.UIbond)
  return _internal_mutable_uibond();
}
inline const std::string& guide_t_guide::_internal_uibond() const {
  return uibond_.GetNoArena();
}
inline void guide_t_guide::_internal_set_uibond(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  uibond_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_uibond(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  uibond_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.UIbond)
}
inline void guide_t_guide::set_uibond(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  uibond_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.UIbond)
}
inline void guide_t_guide::set_uibond(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  uibond_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.UIbond)
}
inline std::string* guide_t_guide::_internal_mutable_uibond() {
  _has_bits_[0] |= 0x00000400u;
  return uibond_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_uibond() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.UIbond)
  if (!_internal_has_uibond()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return uibond_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_uibond(std::string* uibond) {
  if (uibond != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  uibond_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uibond);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.UIbond)
}

// required string UIbonus = 30;
inline bool guide_t_guide::_internal_has_uibonus() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool guide_t_guide::has_uibonus() const {
  return _internal_has_uibonus();
}
inline void guide_t_guide::clear_uibonus() {
  uibonus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& guide_t_guide::uibonus() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.UIbonus)
  return _internal_uibonus();
}
inline void guide_t_guide::set_uibonus(const std::string& value) {
  _internal_set_uibonus(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.UIbonus)
}
inline std::string* guide_t_guide::mutable_uibonus() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.UIbonus)
  return _internal_mutable_uibonus();
}
inline const std::string& guide_t_guide::_internal_uibonus() const {
  return uibonus_.GetNoArena();
}
inline void guide_t_guide::_internal_set_uibonus(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  uibonus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_uibonus(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  uibonus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.UIbonus)
}
inline void guide_t_guide::set_uibonus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  uibonus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.UIbonus)
}
inline void guide_t_guide::set_uibonus(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  uibonus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.UIbonus)
}
inline std::string* guide_t_guide::_internal_mutable_uibonus() {
  _has_bits_[0] |= 0x00000800u;
  return uibonus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_uibonus() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.UIbonus)
  if (!_internal_has_uibonus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return uibonus_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_uibonus(std::string* uibonus) {
  if (uibonus != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  uibonus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uibonus);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.UIbonus)
}

// required string positionbonus = 31;
inline bool guide_t_guide::_internal_has_positionbonus() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool guide_t_guide::has_positionbonus() const {
  return _internal_has_positionbonus();
}
inline void guide_t_guide::clear_positionbonus() {
  positionbonus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& guide_t_guide::positionbonus() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.positionbonus)
  return _internal_positionbonus();
}
inline void guide_t_guide::set_positionbonus(const std::string& value) {
  _internal_set_positionbonus(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.positionbonus)
}
inline std::string* guide_t_guide::mutable_positionbonus() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.positionbonus)
  return _internal_mutable_positionbonus();
}
inline const std::string& guide_t_guide::_internal_positionbonus() const {
  return positionbonus_.GetNoArena();
}
inline void guide_t_guide::_internal_set_positionbonus(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  positionbonus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_positionbonus(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  positionbonus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.positionbonus)
}
inline void guide_t_guide::set_positionbonus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  positionbonus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.positionbonus)
}
inline void guide_t_guide::set_positionbonus(const char* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  positionbonus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.positionbonus)
}
inline std::string* guide_t_guide::_internal_mutable_positionbonus() {
  _has_bits_[0] |= 0x00001000u;
  return positionbonus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_positionbonus() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.positionbonus)
  if (!_internal_has_positionbonus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return positionbonus_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_positionbonus(std::string* positionbonus) {
  if (positionbonus != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  positionbonus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), positionbonus);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.positionbonus)
}

// required string positionorigin = 32;
inline bool guide_t_guide::_internal_has_positionorigin() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool guide_t_guide::has_positionorigin() const {
  return _internal_has_positionorigin();
}
inline void guide_t_guide::clear_positionorigin() {
  positionorigin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& guide_t_guide::positionorigin() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.positionorigin)
  return _internal_positionorigin();
}
inline void guide_t_guide::set_positionorigin(const std::string& value) {
  _internal_set_positionorigin(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.positionorigin)
}
inline std::string* guide_t_guide::mutable_positionorigin() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.positionorigin)
  return _internal_mutable_positionorigin();
}
inline const std::string& guide_t_guide::_internal_positionorigin() const {
  return positionorigin_.GetNoArena();
}
inline void guide_t_guide::_internal_set_positionorigin(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  positionorigin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_positionorigin(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  positionorigin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.positionorigin)
}
inline void guide_t_guide::set_positionorigin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  positionorigin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.positionorigin)
}
inline void guide_t_guide::set_positionorigin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00002000u;
  positionorigin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.positionorigin)
}
inline std::string* guide_t_guide::_internal_mutable_positionorigin() {
  _has_bits_[0] |= 0x00002000u;
  return positionorigin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_positionorigin() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.positionorigin)
  if (!_internal_has_positionorigin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return positionorigin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_positionorigin(std::string* positionorigin) {
  if (positionorigin != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  positionorigin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), positionorigin);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.positionorigin)
}

// required string UInumber = 33;
inline bool guide_t_guide::_internal_has_uinumber() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool guide_t_guide::has_uinumber() const {
  return _internal_has_uinumber();
}
inline void guide_t_guide::clear_uinumber() {
  uinumber_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& guide_t_guide::uinumber() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.UInumber)
  return _internal_uinumber();
}
inline void guide_t_guide::set_uinumber(const std::string& value) {
  _internal_set_uinumber(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.UInumber)
}
inline std::string* guide_t_guide::mutable_uinumber() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.UInumber)
  return _internal_mutable_uinumber();
}
inline const std::string& guide_t_guide::_internal_uinumber() const {
  return uinumber_.GetNoArena();
}
inline void guide_t_guide::_internal_set_uinumber(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  uinumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_uinumber(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  uinumber_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.UInumber)
}
inline void guide_t_guide::set_uinumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  uinumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.UInumber)
}
inline void guide_t_guide::set_uinumber(const char* value, size_t size) {
  _has_bits_[0] |= 0x00004000u;
  uinumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.UInumber)
}
inline std::string* guide_t_guide::_internal_mutable_uinumber() {
  _has_bits_[0] |= 0x00004000u;
  return uinumber_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_uinumber() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.UInumber)
  if (!_internal_has_uinumber()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return uinumber_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_uinumber(std::string* uinumber) {
  if (uinumber != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  uinumber_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uinumber);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.UInumber)
}

// required uint32 enddistance = 34;
inline bool guide_t_guide::_internal_has_enddistance() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool guide_t_guide::has_enddistance() const {
  return _internal_has_enddistance();
}
inline void guide_t_guide::clear_enddistance() {
  enddistance_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_enddistance() const {
  return enddistance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::enddistance() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.enddistance)
  return _internal_enddistance();
}
inline void guide_t_guide::_internal_set_enddistance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  enddistance_ = value;
}
inline void guide_t_guide::set_enddistance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enddistance(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.enddistance)
}

// required string zoom = 35;
inline bool guide_t_guide::_internal_has_zoom() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool guide_t_guide::has_zoom() const {
  return _internal_has_zoom();
}
inline void guide_t_guide::clear_zoom() {
  zoom_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& guide_t_guide::zoom() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.zoom)
  return _internal_zoom();
}
inline void guide_t_guide::set_zoom(const std::string& value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.zoom)
}
inline std::string* guide_t_guide::mutable_zoom() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.zoom)
  return _internal_mutable_zoom();
}
inline const std::string& guide_t_guide::_internal_zoom() const {
  return zoom_.GetNoArena();
}
inline void guide_t_guide::_internal_set_zoom(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  zoom_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_zoom(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  zoom_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.zoom)
}
inline void guide_t_guide::set_zoom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  zoom_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.zoom)
}
inline void guide_t_guide::set_zoom(const char* value, size_t size) {
  _has_bits_[0] |= 0x00008000u;
  zoom_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.zoom)
}
inline std::string* guide_t_guide::_internal_mutable_zoom() {
  _has_bits_[0] |= 0x00008000u;
  return zoom_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_zoom() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.zoom)
  if (!_internal_has_zoom()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return zoom_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_zoom(std::string* zoom) {
  if (zoom != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  zoom_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zoom);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.zoom)
}

// required string Uiinitial = 36;
inline bool guide_t_guide::_internal_has_uiinitial() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool guide_t_guide::has_uiinitial() const {
  return _internal_has_uiinitial();
}
inline void guide_t_guide::clear_uiinitial() {
  uiinitial_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& guide_t_guide::uiinitial() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.Uiinitial)
  return _internal_uiinitial();
}
inline void guide_t_guide::set_uiinitial(const std::string& value) {
  _internal_set_uiinitial(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.Uiinitial)
}
inline std::string* guide_t_guide::mutable_uiinitial() {
  // @@protoc_insertion_point(field_mutable:pb.guide.t_guide.Uiinitial)
  return _internal_mutable_uiinitial();
}
inline const std::string& guide_t_guide::_internal_uiinitial() const {
  return uiinitial_.GetNoArena();
}
inline void guide_t_guide::_internal_set_uiinitial(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  uiinitial_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void guide_t_guide::set_uiinitial(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  uiinitial_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.guide.t_guide.Uiinitial)
}
inline void guide_t_guide::set_uiinitial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  uiinitial_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.guide.t_guide.Uiinitial)
}
inline void guide_t_guide::set_uiinitial(const char* value, size_t size) {
  _has_bits_[0] |= 0x00010000u;
  uiinitial_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.guide.t_guide.Uiinitial)
}
inline std::string* guide_t_guide::_internal_mutable_uiinitial() {
  _has_bits_[0] |= 0x00010000u;
  return uiinitial_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* guide_t_guide::release_uiinitial() {
  // @@protoc_insertion_point(field_release:pb.guide.t_guide.Uiinitial)
  if (!_internal_has_uiinitial()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return uiinitial_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void guide_t_guide::set_allocated_uiinitial(std::string* uiinitial) {
  if (uiinitial != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  uiinitial_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uiinitial);
  // @@protoc_insertion_point(field_set_allocated:pb.guide.t_guide.Uiinitial)
}

// required uint32 itemid = 37;
inline bool guide_t_guide::_internal_has_itemid() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool guide_t_guide::has_itemid() const {
  return _internal_has_itemid();
}
inline void guide_t_guide::clear_itemid() {
  itemid_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_itemid() const {
  return itemid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::itemid() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.itemid)
  return _internal_itemid();
}
inline void guide_t_guide::_internal_set_itemid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  itemid_ = value;
}
inline void guide_t_guide::set_itemid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.itemid)
}

// required uint32 avatarid = 38;
inline bool guide_t_guide::_internal_has_avatarid() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool guide_t_guide::has_avatarid() const {
  return _internal_has_avatarid();
}
inline void guide_t_guide::clear_avatarid() {
  avatarid_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::_internal_avatarid() const {
  return avatarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 guide_t_guide::avatarid() const {
  // @@protoc_insertion_point(field_get:pb.guide.t_guide.avatarid)
  return _internal_avatarid();
}
inline void guide_t_guide::_internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  avatarid_ = value;
}
inline void guide_t_guide::set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avatarid(value);
  // @@protoc_insertion_point(field_set:pb.guide.t_guide.avatarid)
}

// -------------------------------------------------------------------

// guide

// repeated .pb.guide.t_guide datas = 1;
inline int guide::_internal_datas_size() const {
  return datas_.size();
}
inline int guide::datas_size() const {
  return _internal_datas_size();
}
inline void guide::clear_datas() {
  datas_.Clear();
}
inline ::pb::guide_t_guide* guide::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.guide.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::guide_t_guide >*
guide::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.guide.datas)
  return &datas_;
}
inline const ::pb::guide_t_guide& guide::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::guide_t_guide& guide::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.guide.datas)
  return _internal_datas(index);
}
inline ::pb::guide_t_guide* guide::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::guide_t_guide* guide::add_datas() {
  // @@protoc_insertion_point(field_add:pb.guide.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::guide_t_guide >&
guide::datas() const {
  // @@protoc_insertion_point(field_list:pb.guide.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_guide_2eproto
