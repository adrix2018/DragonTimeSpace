// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_level_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_player_5flevel_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_player_5flevel_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_player_5flevel_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_player_5flevel_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_player_5flevel_5fconfig_2eproto;
namespace pb {
class player_level_config;
class player_level_configDefaultTypeInternal;
extern player_level_configDefaultTypeInternal _player_level_config_default_instance_;
class player_level_config_t_player_level_config;
class player_level_config_t_player_level_configDefaultTypeInternal;
extern player_level_config_t_player_level_configDefaultTypeInternal _player_level_config_t_player_level_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::player_level_config* Arena::CreateMaybeMessage<::pb::player_level_config>(Arena*);
template<> ::pb::player_level_config_t_player_level_config* Arena::CreateMaybeMessage<::pb::player_level_config_t_player_level_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class player_level_config_t_player_level_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.player_level_config.t_player_level_config) */ {
 public:
  player_level_config_t_player_level_config();
  virtual ~player_level_config_t_player_level_config();

  player_level_config_t_player_level_config(const player_level_config_t_player_level_config& from);
  player_level_config_t_player_level_config(player_level_config_t_player_level_config&& from) noexcept
    : player_level_config_t_player_level_config() {
    *this = ::std::move(from);
  }

  inline player_level_config_t_player_level_config& operator=(const player_level_config_t_player_level_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_level_config_t_player_level_config& operator=(player_level_config_t_player_level_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const player_level_config_t_player_level_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const player_level_config_t_player_level_config* internal_default_instance() {
    return reinterpret_cast<const player_level_config_t_player_level_config*>(
               &_player_level_config_t_player_level_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(player_level_config_t_player_level_config& a, player_level_config_t_player_level_config& b) {
    a.Swap(&b);
  }
  inline void Swap(player_level_config_t_player_level_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline player_level_config_t_player_level_config* New() const final {
    return CreateMaybeMessage<player_level_config_t_player_level_config>(nullptr);
  }

  player_level_config_t_player_level_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<player_level_config_t_player_level_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const player_level_config_t_player_level_config& from);
  void MergeFrom(const player_level_config_t_player_level_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(player_level_config_t_player_level_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.player_level_config.t_player_level_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_player_5flevel_5fconfig_2eproto);
    return ::descriptor_table_player_5flevel_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kExpFieldNumber = 3,
    kPhyPowerLimitFieldNumber = 4,
    kHeroBagLimitFieldNumber = 5,
    kLeadershipLimitFieldNumber = 6,
    kBuddyLimitFieldNumber = 7,
    kPhyPowerAwardFieldNumber = 8,
    kItemBagLimitFieldNumber = 9,
    kFairyAirLimitFieldNumber = 10,
    kMoraleFieldNumber = 11,
    kEquipBagLimitFieldNumber = 12,
    kBuySilverFieldNumber = 13,
  };
  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 exp = 3;
  bool has_exp() const;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 phy_power_limit = 4;
  bool has_phy_power_limit() const;
  private:
  bool _internal_has_phy_power_limit() const;
  public:
  void clear_phy_power_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 phy_power_limit() const;
  void set_phy_power_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phy_power_limit() const;
  void _internal_set_phy_power_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 hero_bag_limit = 5;
  bool has_hero_bag_limit() const;
  private:
  bool _internal_has_hero_bag_limit() const;
  public:
  void clear_hero_bag_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_bag_limit() const;
  void set_hero_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hero_bag_limit() const;
  void _internal_set_hero_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 leadership_limit = 6;
  bool has_leadership_limit() const;
  private:
  bool _internal_has_leadership_limit() const;
  public:
  void clear_leadership_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 leadership_limit() const;
  void set_leadership_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leadership_limit() const;
  void _internal_set_leadership_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 buddy_limit = 7;
  bool has_buddy_limit() const;
  private:
  bool _internal_has_buddy_limit() const;
  public:
  void clear_buddy_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 buddy_limit() const;
  void set_buddy_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buddy_limit() const;
  void _internal_set_buddy_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 phy_power_award = 8;
  bool has_phy_power_award() const;
  private:
  bool _internal_has_phy_power_award() const;
  public:
  void clear_phy_power_award();
  ::PROTOBUF_NAMESPACE_ID::uint32 phy_power_award() const;
  void set_phy_power_award(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phy_power_award() const;
  void _internal_set_phy_power_award(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 item_bag_limit = 9;
  bool has_item_bag_limit() const;
  private:
  bool _internal_has_item_bag_limit() const;
  public:
  void clear_item_bag_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_bag_limit() const;
  void set_item_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item_bag_limit() const;
  void _internal_set_item_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 fairy_air_limit = 10;
  bool has_fairy_air_limit() const;
  private:
  bool _internal_has_fairy_air_limit() const;
  public:
  void clear_fairy_air_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 fairy_air_limit() const;
  void set_fairy_air_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fairy_air_limit() const;
  void _internal_set_fairy_air_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 morale = 11;
  bool has_morale() const;
  private:
  bool _internal_has_morale() const;
  public:
  void clear_morale();
  ::PROTOBUF_NAMESPACE_ID::uint32 morale() const;
  void set_morale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_morale() const;
  void _internal_set_morale(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 equip_bag_limit = 12;
  bool has_equip_bag_limit() const;
  private:
  bool _internal_has_equip_bag_limit() const;
  public:
  void clear_equip_bag_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 equip_bag_limit() const;
  void set_equip_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_equip_bag_limit() const;
  void _internal_set_equip_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 buy_silver = 13;
  bool has_buy_silver() const;
  private:
  bool _internal_has_buy_silver() const;
  public:
  void clear_buy_silver();
  ::PROTOBUF_NAMESPACE_ID::uint32 buy_silver() const;
  void set_buy_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_buy_silver() const;
  void _internal_set_buy_silver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.player_level_config.t_player_level_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phy_power_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hero_bag_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leadership_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buddy_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phy_power_award_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_bag_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fairy_air_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 morale_;
  ::PROTOBUF_NAMESPACE_ID::uint32 equip_bag_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 buy_silver_;
  friend struct ::TableStruct_player_5flevel_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class player_level_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.player_level_config) */ {
 public:
  player_level_config();
  virtual ~player_level_config();

  player_level_config(const player_level_config& from);
  player_level_config(player_level_config&& from) noexcept
    : player_level_config() {
    *this = ::std::move(from);
  }

  inline player_level_config& operator=(const player_level_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_level_config& operator=(player_level_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const player_level_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const player_level_config* internal_default_instance() {
    return reinterpret_cast<const player_level_config*>(
               &_player_level_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(player_level_config& a, player_level_config& b) {
    a.Swap(&b);
  }
  inline void Swap(player_level_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline player_level_config* New() const final {
    return CreateMaybeMessage<player_level_config>(nullptr);
  }

  player_level_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<player_level_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const player_level_config& from);
  void MergeFrom(const player_level_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(player_level_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.player_level_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_player_5flevel_5fconfig_2eproto);
    return ::descriptor_table_player_5flevel_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef player_level_config_t_player_level_config t_player_level_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.player_level_config.t_player_level_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::player_level_config_t_player_level_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::player_level_config_t_player_level_config >*
      mutable_datas();
  private:
  const ::pb::player_level_config_t_player_level_config& _internal_datas(int index) const;
  ::pb::player_level_config_t_player_level_config* _internal_add_datas();
  public:
  const ::pb::player_level_config_t_player_level_config& datas(int index) const;
  ::pb::player_level_config_t_player_level_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::player_level_config_t_player_level_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.player_level_config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::player_level_config_t_player_level_config > datas_;
  friend struct ::TableStruct_player_5flevel_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// player_level_config_t_player_level_config

// required uint32 tbxid = 1 [default = 0];
inline bool player_level_config_t_player_level_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void player_level_config_t_player_level_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.tbxid)
  return _internal_tbxid();
}
inline void player_level_config_t_player_level_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tbxid_ = value;
}
inline void player_level_config_t_player_level_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool player_level_config_t_player_level_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_id() const {
  return _internal_has_id();
}
inline void player_level_config_t_player_level_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::id() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.id)
  return _internal_id();
}
inline void player_level_config_t_player_level_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void player_level_config_t_player_level_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.id)
}

// required uint32 exp = 3;
inline bool player_level_config_t_player_level_config::_internal_has_exp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_exp() const {
  return _internal_has_exp();
}
inline void player_level_config_t_player_level_config::clear_exp() {
  exp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::exp() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.exp)
  return _internal_exp();
}
inline void player_level_config_t_player_level_config::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  exp_ = value;
}
inline void player_level_config_t_player_level_config::set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.exp)
}

// required uint32 phy_power_limit = 4;
inline bool player_level_config_t_player_level_config::_internal_has_phy_power_limit() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_phy_power_limit() const {
  return _internal_has_phy_power_limit();
}
inline void player_level_config_t_player_level_config::clear_phy_power_limit() {
  phy_power_limit_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_phy_power_limit() const {
  return phy_power_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::phy_power_limit() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.phy_power_limit)
  return _internal_phy_power_limit();
}
inline void player_level_config_t_player_level_config::_internal_set_phy_power_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  phy_power_limit_ = value;
}
inline void player_level_config_t_player_level_config::set_phy_power_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phy_power_limit(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.phy_power_limit)
}

// required uint32 hero_bag_limit = 5;
inline bool player_level_config_t_player_level_config::_internal_has_hero_bag_limit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_hero_bag_limit() const {
  return _internal_has_hero_bag_limit();
}
inline void player_level_config_t_player_level_config::clear_hero_bag_limit() {
  hero_bag_limit_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_hero_bag_limit() const {
  return hero_bag_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::hero_bag_limit() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.hero_bag_limit)
  return _internal_hero_bag_limit();
}
inline void player_level_config_t_player_level_config::_internal_set_hero_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  hero_bag_limit_ = value;
}
inline void player_level_config_t_player_level_config::set_hero_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hero_bag_limit(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.hero_bag_limit)
}

// required uint32 leadership_limit = 6;
inline bool player_level_config_t_player_level_config::_internal_has_leadership_limit() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_leadership_limit() const {
  return _internal_has_leadership_limit();
}
inline void player_level_config_t_player_level_config::clear_leadership_limit() {
  leadership_limit_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_leadership_limit() const {
  return leadership_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::leadership_limit() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.leadership_limit)
  return _internal_leadership_limit();
}
inline void player_level_config_t_player_level_config::_internal_set_leadership_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  leadership_limit_ = value;
}
inline void player_level_config_t_player_level_config::set_leadership_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leadership_limit(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.leadership_limit)
}

// required uint32 buddy_limit = 7;
inline bool player_level_config_t_player_level_config::_internal_has_buddy_limit() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_buddy_limit() const {
  return _internal_has_buddy_limit();
}
inline void player_level_config_t_player_level_config::clear_buddy_limit() {
  buddy_limit_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_buddy_limit() const {
  return buddy_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::buddy_limit() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.buddy_limit)
  return _internal_buddy_limit();
}
inline void player_level_config_t_player_level_config::_internal_set_buddy_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  buddy_limit_ = value;
}
inline void player_level_config_t_player_level_config::set_buddy_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buddy_limit(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.buddy_limit)
}

// required uint32 phy_power_award = 8;
inline bool player_level_config_t_player_level_config::_internal_has_phy_power_award() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_phy_power_award() const {
  return _internal_has_phy_power_award();
}
inline void player_level_config_t_player_level_config::clear_phy_power_award() {
  phy_power_award_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_phy_power_award() const {
  return phy_power_award_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::phy_power_award() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.phy_power_award)
  return _internal_phy_power_award();
}
inline void player_level_config_t_player_level_config::_internal_set_phy_power_award(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  phy_power_award_ = value;
}
inline void player_level_config_t_player_level_config::set_phy_power_award(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phy_power_award(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.phy_power_award)
}

// required uint32 item_bag_limit = 9;
inline bool player_level_config_t_player_level_config::_internal_has_item_bag_limit() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_item_bag_limit() const {
  return _internal_has_item_bag_limit();
}
inline void player_level_config_t_player_level_config::clear_item_bag_limit() {
  item_bag_limit_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_item_bag_limit() const {
  return item_bag_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::item_bag_limit() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.item_bag_limit)
  return _internal_item_bag_limit();
}
inline void player_level_config_t_player_level_config::_internal_set_item_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  item_bag_limit_ = value;
}
inline void player_level_config_t_player_level_config::set_item_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item_bag_limit(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.item_bag_limit)
}

// required uint32 fairy_air_limit = 10;
inline bool player_level_config_t_player_level_config::_internal_has_fairy_air_limit() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_fairy_air_limit() const {
  return _internal_has_fairy_air_limit();
}
inline void player_level_config_t_player_level_config::clear_fairy_air_limit() {
  fairy_air_limit_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_fairy_air_limit() const {
  return fairy_air_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::fairy_air_limit() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.fairy_air_limit)
  return _internal_fairy_air_limit();
}
inline void player_level_config_t_player_level_config::_internal_set_fairy_air_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  fairy_air_limit_ = value;
}
inline void player_level_config_t_player_level_config::set_fairy_air_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fairy_air_limit(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.fairy_air_limit)
}

// required uint32 morale = 11;
inline bool player_level_config_t_player_level_config::_internal_has_morale() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_morale() const {
  return _internal_has_morale();
}
inline void player_level_config_t_player_level_config::clear_morale() {
  morale_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_morale() const {
  return morale_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::morale() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.morale)
  return _internal_morale();
}
inline void player_level_config_t_player_level_config::_internal_set_morale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  morale_ = value;
}
inline void player_level_config_t_player_level_config::set_morale(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_morale(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.morale)
}

// required uint32 equip_bag_limit = 12;
inline bool player_level_config_t_player_level_config::_internal_has_equip_bag_limit() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_equip_bag_limit() const {
  return _internal_has_equip_bag_limit();
}
inline void player_level_config_t_player_level_config::clear_equip_bag_limit() {
  equip_bag_limit_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_equip_bag_limit() const {
  return equip_bag_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::equip_bag_limit() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.equip_bag_limit)
  return _internal_equip_bag_limit();
}
inline void player_level_config_t_player_level_config::_internal_set_equip_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  equip_bag_limit_ = value;
}
inline void player_level_config_t_player_level_config::set_equip_bag_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_equip_bag_limit(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.equip_bag_limit)
}

// required uint32 buy_silver = 13;
inline bool player_level_config_t_player_level_config::_internal_has_buy_silver() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool player_level_config_t_player_level_config::has_buy_silver() const {
  return _internal_has_buy_silver();
}
inline void player_level_config_t_player_level_config::clear_buy_silver() {
  buy_silver_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::_internal_buy_silver() const {
  return buy_silver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 player_level_config_t_player_level_config::buy_silver() const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.t_player_level_config.buy_silver)
  return _internal_buy_silver();
}
inline void player_level_config_t_player_level_config::_internal_set_buy_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  buy_silver_ = value;
}
inline void player_level_config_t_player_level_config::set_buy_silver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_buy_silver(value);
  // @@protoc_insertion_point(field_set:pb.player_level_config.t_player_level_config.buy_silver)
}

// -------------------------------------------------------------------

// player_level_config

// repeated .pb.player_level_config.t_player_level_config datas = 1;
inline int player_level_config::_internal_datas_size() const {
  return datas_.size();
}
inline int player_level_config::datas_size() const {
  return _internal_datas_size();
}
inline void player_level_config::clear_datas() {
  datas_.Clear();
}
inline ::pb::player_level_config_t_player_level_config* player_level_config::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.player_level_config.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::player_level_config_t_player_level_config >*
player_level_config::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.player_level_config.datas)
  return &datas_;
}
inline const ::pb::player_level_config_t_player_level_config& player_level_config::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::player_level_config_t_player_level_config& player_level_config::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.player_level_config.datas)
  return _internal_datas(index);
}
inline ::pb::player_level_config_t_player_level_config* player_level_config::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::player_level_config_t_player_level_config* player_level_config::add_datas() {
  // @@protoc_insertion_point(field_add:pb.player_level_config.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::player_level_config_t_player_level_config >&
player_level_config::datas() const {
  // @@protoc_insertion_point(field_list:pb.player_level_config.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_player_5flevel_5fconfig_2eproto
