// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newUser.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_newUser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_newUser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_newUser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_newUser_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_newUser_2eproto;
namespace pb {
class newUser;
class newUserDefaultTypeInternal;
extern newUserDefaultTypeInternal _newUser_default_instance_;
class newUser_t_newuser_init;
class newUser_t_newuser_initDefaultTypeInternal;
extern newUser_t_newuser_initDefaultTypeInternal _newUser_t_newuser_init_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::newUser* Arena::CreateMaybeMessage<::pb::newUser>(Arena*);
template<> ::pb::newUser_t_newuser_init* Arena::CreateMaybeMessage<::pb::newUser_t_newuser_init>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class newUser_t_newuser_init :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.newUser.t_newuser_init) */ {
 public:
  newUser_t_newuser_init();
  virtual ~newUser_t_newuser_init();

  newUser_t_newuser_init(const newUser_t_newuser_init& from);
  newUser_t_newuser_init(newUser_t_newuser_init&& from) noexcept
    : newUser_t_newuser_init() {
    *this = ::std::move(from);
  }

  inline newUser_t_newuser_init& operator=(const newUser_t_newuser_init& from) {
    CopyFrom(from);
    return *this;
  }
  inline newUser_t_newuser_init& operator=(newUser_t_newuser_init&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const newUser_t_newuser_init& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const newUser_t_newuser_init* internal_default_instance() {
    return reinterpret_cast<const newUser_t_newuser_init*>(
               &_newUser_t_newuser_init_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(newUser_t_newuser_init& a, newUser_t_newuser_init& b) {
    a.Swap(&b);
  }
  inline void Swap(newUser_t_newuser_init* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline newUser_t_newuser_init* New() const final {
    return CreateMaybeMessage<newUser_t_newuser_init>(nullptr);
  }

  newUser_t_newuser_init* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<newUser_t_newuser_init>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const newUser_t_newuser_init& from);
  void MergeFrom(const newUser_t_newuser_init& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(newUser_t_newuser_init* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.newUser.t_newuser_init";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_newUser_2eproto);
    return ::descriptor_table_newUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kModelFieldNumber = 4,
    kIconFieldNumber = 6,
    kDesFieldNumber = 7,
    kCharactFieldNumber = 8,
    kVideoFieldNumber = 9,
    kAbilityFieldNumber = 10,
    kStageFieldNumber = 12,
    kHairdoiconFieldNumber = 14,
    kHairdoFieldNumber = 15,
    kColoriconFieldNumber = 16,
    kColorFieldNumber = 17,
    kFeatureiconFieldNumber = 18,
    kFeatureFieldNumber = 19,
    kAntennaiconFieldNumber = 20,
    kAntennaFieldNumber = 21,
    kSkillFieldNumber = 22,
    kVideotapeFieldNumber = 23,
    kBodyFieldNumber = 24,
    kScenenameFieldNumber = 25,
    kCammaxdisFieldNumber = 26,
    kCammindisFieldNumber = 27,
    kCamposFieldNumber = 28,
    kFogparamFieldNumber = 29,
    kLightingFieldNumber = 30,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kFighterFieldNumber = 5,
    kSexFieldNumber = 11,
    kSkinFieldNumber = 13,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string Model = 4;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  void set_model(const std::string& value);
  void set_model(std::string&& value);
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  std::string* mutable_model();
  std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // required string Icon = 6;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // required string Des = 7;
  bool has_des() const;
  private:
  bool _internal_has_des() const;
  public:
  void clear_des();
  const std::string& des() const;
  void set_des(const std::string& value);
  void set_des(std::string&& value);
  void set_des(const char* value);
  void set_des(const char* value, size_t size);
  std::string* mutable_des();
  std::string* release_des();
  void set_allocated_des(std::string* des);
  private:
  const std::string& _internal_des() const;
  void _internal_set_des(const std::string& value);
  std::string* _internal_mutable_des();
  public:

  // required string Charact = 8;
  bool has_charact() const;
  private:
  bool _internal_has_charact() const;
  public:
  void clear_charact();
  const std::string& charact() const;
  void set_charact(const std::string& value);
  void set_charact(std::string&& value);
  void set_charact(const char* value);
  void set_charact(const char* value, size_t size);
  std::string* mutable_charact();
  std::string* release_charact();
  void set_allocated_charact(std::string* charact);
  private:
  const std::string& _internal_charact() const;
  void _internal_set_charact(const std::string& value);
  std::string* _internal_mutable_charact();
  public:

  // required string Video = 9;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const std::string& video() const;
  void set_video(const std::string& value);
  void set_video(std::string&& value);
  void set_video(const char* value);
  void set_video(const char* value, size_t size);
  std::string* mutable_video();
  std::string* release_video();
  void set_allocated_video(std::string* video);
  private:
  const std::string& _internal_video() const;
  void _internal_set_video(const std::string& value);
  std::string* _internal_mutable_video();
  public:

  // required string Ability = 10;
  bool has_ability() const;
  private:
  bool _internal_has_ability() const;
  public:
  void clear_ability();
  const std::string& ability() const;
  void set_ability(const std::string& value);
  void set_ability(std::string&& value);
  void set_ability(const char* value);
  void set_ability(const char* value, size_t size);
  std::string* mutable_ability();
  std::string* release_ability();
  void set_allocated_ability(std::string* ability);
  private:
  const std::string& _internal_ability() const;
  void _internal_set_ability(const std::string& value);
  std::string* _internal_mutable_ability();
  public:

  // required string Stage = 12;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  const std::string& stage() const;
  void set_stage(const std::string& value);
  void set_stage(std::string&& value);
  void set_stage(const char* value);
  void set_stage(const char* value, size_t size);
  std::string* mutable_stage();
  std::string* release_stage();
  void set_allocated_stage(std::string* stage);
  private:
  const std::string& _internal_stage() const;
  void _internal_set_stage(const std::string& value);
  std::string* _internal_mutable_stage();
  public:

  // required string hairdoicon = 14;
  bool has_hairdoicon() const;
  private:
  bool _internal_has_hairdoicon() const;
  public:
  void clear_hairdoicon();
  const std::string& hairdoicon() const;
  void set_hairdoicon(const std::string& value);
  void set_hairdoicon(std::string&& value);
  void set_hairdoicon(const char* value);
  void set_hairdoicon(const char* value, size_t size);
  std::string* mutable_hairdoicon();
  std::string* release_hairdoicon();
  void set_allocated_hairdoicon(std::string* hairdoicon);
  private:
  const std::string& _internal_hairdoicon() const;
  void _internal_set_hairdoicon(const std::string& value);
  std::string* _internal_mutable_hairdoicon();
  public:

  // required string hairdo = 15;
  bool has_hairdo() const;
  private:
  bool _internal_has_hairdo() const;
  public:
  void clear_hairdo();
  const std::string& hairdo() const;
  void set_hairdo(const std::string& value);
  void set_hairdo(std::string&& value);
  void set_hairdo(const char* value);
  void set_hairdo(const char* value, size_t size);
  std::string* mutable_hairdo();
  std::string* release_hairdo();
  void set_allocated_hairdo(std::string* hairdo);
  private:
  const std::string& _internal_hairdo() const;
  void _internal_set_hairdo(const std::string& value);
  std::string* _internal_mutable_hairdo();
  public:

  // required string coloricon = 16;
  bool has_coloricon() const;
  private:
  bool _internal_has_coloricon() const;
  public:
  void clear_coloricon();
  const std::string& coloricon() const;
  void set_coloricon(const std::string& value);
  void set_coloricon(std::string&& value);
  void set_coloricon(const char* value);
  void set_coloricon(const char* value, size_t size);
  std::string* mutable_coloricon();
  std::string* release_coloricon();
  void set_allocated_coloricon(std::string* coloricon);
  private:
  const std::string& _internal_coloricon() const;
  void _internal_set_coloricon(const std::string& value);
  std::string* _internal_mutable_coloricon();
  public:

  // required string color = 17;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // required string featureicon = 18;
  bool has_featureicon() const;
  private:
  bool _internal_has_featureicon() const;
  public:
  void clear_featureicon();
  const std::string& featureicon() const;
  void set_featureicon(const std::string& value);
  void set_featureicon(std::string&& value);
  void set_featureicon(const char* value);
  void set_featureicon(const char* value, size_t size);
  std::string* mutable_featureicon();
  std::string* release_featureicon();
  void set_allocated_featureicon(std::string* featureicon);
  private:
  const std::string& _internal_featureicon() const;
  void _internal_set_featureicon(const std::string& value);
  std::string* _internal_mutable_featureicon();
  public:

  // required string feature = 19;
  bool has_feature() const;
  private:
  bool _internal_has_feature() const;
  public:
  void clear_feature();
  const std::string& feature() const;
  void set_feature(const std::string& value);
  void set_feature(std::string&& value);
  void set_feature(const char* value);
  void set_feature(const char* value, size_t size);
  std::string* mutable_feature();
  std::string* release_feature();
  void set_allocated_feature(std::string* feature);
  private:
  const std::string& _internal_feature() const;
  void _internal_set_feature(const std::string& value);
  std::string* _internal_mutable_feature();
  public:

  // required string antennaicon = 20;
  bool has_antennaicon() const;
  private:
  bool _internal_has_antennaicon() const;
  public:
  void clear_antennaicon();
  const std::string& antennaicon() const;
  void set_antennaicon(const std::string& value);
  void set_antennaicon(std::string&& value);
  void set_antennaicon(const char* value);
  void set_antennaicon(const char* value, size_t size);
  std::string* mutable_antennaicon();
  std::string* release_antennaicon();
  void set_allocated_antennaicon(std::string* antennaicon);
  private:
  const std::string& _internal_antennaicon() const;
  void _internal_set_antennaicon(const std::string& value);
  std::string* _internal_mutable_antennaicon();
  public:

  // required string antenna = 21;
  bool has_antenna() const;
  private:
  bool _internal_has_antenna() const;
  public:
  void clear_antenna();
  const std::string& antenna() const;
  void set_antenna(const std::string& value);
  void set_antenna(std::string&& value);
  void set_antenna(const char* value);
  void set_antenna(const char* value, size_t size);
  std::string* mutable_antenna();
  std::string* release_antenna();
  void set_allocated_antenna(std::string* antenna);
  private:
  const std::string& _internal_antenna() const;
  void _internal_set_antenna(const std::string& value);
  std::string* _internal_mutable_antenna();
  public:

  // required string skill = 22;
  bool has_skill() const;
  private:
  bool _internal_has_skill() const;
  public:
  void clear_skill();
  const std::string& skill() const;
  void set_skill(const std::string& value);
  void set_skill(std::string&& value);
  void set_skill(const char* value);
  void set_skill(const char* value, size_t size);
  std::string* mutable_skill();
  std::string* release_skill();
  void set_allocated_skill(std::string* skill);
  private:
  const std::string& _internal_skill() const;
  void _internal_set_skill(const std::string& value);
  std::string* _internal_mutable_skill();
  public:

  // required string videotape = 23;
  bool has_videotape() const;
  private:
  bool _internal_has_videotape() const;
  public:
  void clear_videotape();
  const std::string& videotape() const;
  void set_videotape(const std::string& value);
  void set_videotape(std::string&& value);
  void set_videotape(const char* value);
  void set_videotape(const char* value, size_t size);
  std::string* mutable_videotape();
  std::string* release_videotape();
  void set_allocated_videotape(std::string* videotape);
  private:
  const std::string& _internal_videotape() const;
  void _internal_set_videotape(const std::string& value);
  std::string* _internal_mutable_videotape();
  public:

  // required string body = 24;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // required string scenename = 25;
  bool has_scenename() const;
  private:
  bool _internal_has_scenename() const;
  public:
  void clear_scenename();
  const std::string& scenename() const;
  void set_scenename(const std::string& value);
  void set_scenename(std::string&& value);
  void set_scenename(const char* value);
  void set_scenename(const char* value, size_t size);
  std::string* mutable_scenename();
  std::string* release_scenename();
  void set_allocated_scenename(std::string* scenename);
  private:
  const std::string& _internal_scenename() const;
  void _internal_set_scenename(const std::string& value);
  std::string* _internal_mutable_scenename();
  public:

  // required string cammaxdis = 26;
  bool has_cammaxdis() const;
  private:
  bool _internal_has_cammaxdis() const;
  public:
  void clear_cammaxdis();
  const std::string& cammaxdis() const;
  void set_cammaxdis(const std::string& value);
  void set_cammaxdis(std::string&& value);
  void set_cammaxdis(const char* value);
  void set_cammaxdis(const char* value, size_t size);
  std::string* mutable_cammaxdis();
  std::string* release_cammaxdis();
  void set_allocated_cammaxdis(std::string* cammaxdis);
  private:
  const std::string& _internal_cammaxdis() const;
  void _internal_set_cammaxdis(const std::string& value);
  std::string* _internal_mutable_cammaxdis();
  public:

  // required string cammindis = 27;
  bool has_cammindis() const;
  private:
  bool _internal_has_cammindis() const;
  public:
  void clear_cammindis();
  const std::string& cammindis() const;
  void set_cammindis(const std::string& value);
  void set_cammindis(std::string&& value);
  void set_cammindis(const char* value);
  void set_cammindis(const char* value, size_t size);
  std::string* mutable_cammindis();
  std::string* release_cammindis();
  void set_allocated_cammindis(std::string* cammindis);
  private:
  const std::string& _internal_cammindis() const;
  void _internal_set_cammindis(const std::string& value);
  std::string* _internal_mutable_cammindis();
  public:

  // required string campos = 28;
  bool has_campos() const;
  private:
  bool _internal_has_campos() const;
  public:
  void clear_campos();
  const std::string& campos() const;
  void set_campos(const std::string& value);
  void set_campos(std::string&& value);
  void set_campos(const char* value);
  void set_campos(const char* value, size_t size);
  std::string* mutable_campos();
  std::string* release_campos();
  void set_allocated_campos(std::string* campos);
  private:
  const std::string& _internal_campos() const;
  void _internal_set_campos(const std::string& value);
  std::string* _internal_mutable_campos();
  public:

  // required string fogparam = 29;
  bool has_fogparam() const;
  private:
  bool _internal_has_fogparam() const;
  public:
  void clear_fogparam();
  const std::string& fogparam() const;
  void set_fogparam(const std::string& value);
  void set_fogparam(std::string&& value);
  void set_fogparam(const char* value);
  void set_fogparam(const char* value, size_t size);
  std::string* mutable_fogparam();
  std::string* release_fogparam();
  void set_allocated_fogparam(std::string* fogparam);
  private:
  const std::string& _internal_fogparam() const;
  void _internal_set_fogparam(const std::string& value);
  std::string* _internal_mutable_fogparam();
  public:

  // required string lighting = 30;
  bool has_lighting() const;
  private:
  bool _internal_has_lighting() const;
  public:
  void clear_lighting();
  const std::string& lighting() const;
  void set_lighting(const std::string& value);
  void set_lighting(std::string&& value);
  void set_lighting(const char* value);
  void set_lighting(const char* value, size_t size);
  std::string* mutable_lighting();
  std::string* release_lighting();
  void set_allocated_lighting(std::string* lighting);
  private:
  const std::string& _internal_lighting() const;
  void _internal_set_lighting(const std::string& value);
  std::string* _internal_mutable_lighting();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 Fighter = 5;
  bool has_fighter() const;
  private:
  bool _internal_has_fighter() const;
  public:
  void clear_fighter();
  ::PROTOBUF_NAMESPACE_ID::uint32 fighter() const;
  void set_fighter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fighter() const;
  void _internal_set_fighter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 Sex = 11;
  bool has_sex() const;
  private:
  bool _internal_has_sex() const;
  public:
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::uint32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 Skin = 13;
  bool has_skin() const;
  private:
  bool _internal_has_skin() const;
  public:
  void clear_skin();
  ::PROTOBUF_NAMESPACE_ID::uint32 skin() const;
  void set_skin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skin() const;
  void _internal_set_skin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.newUser.t_newuser_init)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr des_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr charact_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr video_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ability_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hairdoicon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hairdo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coloricon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr featureicon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr antennaicon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr antenna_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr videotape_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cammaxdis_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cammindis_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr campos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fogparam_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lighting_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fighter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skin_;
  friend struct ::TableStruct_newUser_2eproto;
};
// -------------------------------------------------------------------

class newUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.newUser) */ {
 public:
  newUser();
  virtual ~newUser();

  newUser(const newUser& from);
  newUser(newUser&& from) noexcept
    : newUser() {
    *this = ::std::move(from);
  }

  inline newUser& operator=(const newUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline newUser& operator=(newUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const newUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const newUser* internal_default_instance() {
    return reinterpret_cast<const newUser*>(
               &_newUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(newUser& a, newUser& b) {
    a.Swap(&b);
  }
  inline void Swap(newUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline newUser* New() const final {
    return CreateMaybeMessage<newUser>(nullptr);
  }

  newUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<newUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const newUser& from);
  void MergeFrom(const newUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(newUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.newUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_newUser_2eproto);
    return ::descriptor_table_newUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef newUser_t_newuser_init t_newuser_init;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.newUser.t_newuser_init datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::newUser_t_newuser_init* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::newUser_t_newuser_init >*
      mutable_datas();
  private:
  const ::pb::newUser_t_newuser_init& _internal_datas(int index) const;
  ::pb::newUser_t_newuser_init* _internal_add_datas();
  public:
  const ::pb::newUser_t_newuser_init& datas(int index) const;
  ::pb::newUser_t_newuser_init* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::newUser_t_newuser_init >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.newUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::newUser_t_newuser_init > datas_;
  friend struct ::TableStruct_newUser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// newUser_t_newuser_init

// required uint32 tbxid = 1 [default = 0];
inline bool newUser_t_newuser_init::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void newUser_t_newuser_init::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 newUser_t_newuser_init::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 newUser_t_newuser_init::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.tbxid)
  return _internal_tbxid();
}
inline void newUser_t_newuser_init::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  tbxid_ = value;
}
inline void newUser_t_newuser_init::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool newUser_t_newuser_init::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_id() const {
  return _internal_has_id();
}
inline void newUser_t_newuser_init::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 newUser_t_newuser_init::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 newUser_t_newuser_init::id() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.id)
  return _internal_id();
}
inline void newUser_t_newuser_init::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  id_ = value;
}
inline void newUser_t_newuser_init::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.id)
}

// required string name = 3;
inline bool newUser_t_newuser_init::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_name() const {
  return _internal_has_name();
}
inline void newUser_t_newuser_init::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& newUser_t_newuser_init::name() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.name)
  return _internal_name();
}
inline void newUser_t_newuser_init::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.name)
}
inline std::string* newUser_t_newuser_init::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.name)
  return _internal_mutable_name();
}
inline const std::string& newUser_t_newuser_init::_internal_name() const {
  return name_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.name)
}
inline void newUser_t_newuser_init::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.name)
}
inline void newUser_t_newuser_init::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.name)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_name() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.name)
}

// required string Model = 4;
inline bool newUser_t_newuser_init::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_model() const {
  return _internal_has_model();
}
inline void newUser_t_newuser_init::clear_model() {
  model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& newUser_t_newuser_init::model() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.Model)
  return _internal_model();
}
inline void newUser_t_newuser_init::set_model(const std::string& value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.Model)
}
inline std::string* newUser_t_newuser_init::mutable_model() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.Model)
  return _internal_mutable_model();
}
inline const std::string& newUser_t_newuser_init::_internal_model() const {
  return model_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_model(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_model(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.Model)
}
inline void newUser_t_newuser_init::set_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.Model)
}
inline void newUser_t_newuser_init::set_model(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.Model)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000002u;
  return model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_model() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.Model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return model_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.Model)
}

// required uint32 Fighter = 5;
inline bool newUser_t_newuser_init::_internal_has_fighter() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_fighter() const {
  return _internal_has_fighter();
}
inline void newUser_t_newuser_init::clear_fighter() {
  fighter_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 newUser_t_newuser_init::_internal_fighter() const {
  return fighter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 newUser_t_newuser_init::fighter() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.Fighter)
  return _internal_fighter();
}
inline void newUser_t_newuser_init::_internal_set_fighter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  fighter_ = value;
}
inline void newUser_t_newuser_init::set_fighter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fighter(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.Fighter)
}

// required string Icon = 6;
inline bool newUser_t_newuser_init::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_icon() const {
  return _internal_has_icon();
}
inline void newUser_t_newuser_init::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& newUser_t_newuser_init::icon() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.Icon)
  return _internal_icon();
}
inline void newUser_t_newuser_init::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.Icon)
}
inline std::string* newUser_t_newuser_init::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.Icon)
  return _internal_mutable_icon();
}
inline const std::string& newUser_t_newuser_init::_internal_icon() const {
  return icon_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.Icon)
}
inline void newUser_t_newuser_init::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.Icon)
}
inline void newUser_t_newuser_init::set_icon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.Icon)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000004u;
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_icon() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.Icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return icon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.Icon)
}

// required string Des = 7;
inline bool newUser_t_newuser_init::_internal_has_des() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_des() const {
  return _internal_has_des();
}
inline void newUser_t_newuser_init::clear_des() {
  des_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& newUser_t_newuser_init::des() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.Des)
  return _internal_des();
}
inline void newUser_t_newuser_init::set_des(const std::string& value) {
  _internal_set_des(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.Des)
}
inline std::string* newUser_t_newuser_init::mutable_des() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.Des)
  return _internal_mutable_des();
}
inline const std::string& newUser_t_newuser_init::_internal_des() const {
  return des_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_des(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  des_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_des(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  des_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.Des)
}
inline void newUser_t_newuser_init::set_des(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  des_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.Des)
}
inline void newUser_t_newuser_init::set_des(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  des_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.Des)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_des() {
  _has_bits_[0] |= 0x00000008u;
  return des_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_des() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.Des)
  if (!_internal_has_des()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return des_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_des(std::string* des) {
  if (des != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  des_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), des);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.Des)
}

// required string Charact = 8;
inline bool newUser_t_newuser_init::_internal_has_charact() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_charact() const {
  return _internal_has_charact();
}
inline void newUser_t_newuser_init::clear_charact() {
  charact_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& newUser_t_newuser_init::charact() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.Charact)
  return _internal_charact();
}
inline void newUser_t_newuser_init::set_charact(const std::string& value) {
  _internal_set_charact(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.Charact)
}
inline std::string* newUser_t_newuser_init::mutable_charact() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.Charact)
  return _internal_mutable_charact();
}
inline const std::string& newUser_t_newuser_init::_internal_charact() const {
  return charact_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_charact(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  charact_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_charact(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  charact_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.Charact)
}
inline void newUser_t_newuser_init::set_charact(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  charact_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.Charact)
}
inline void newUser_t_newuser_init::set_charact(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  charact_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.Charact)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_charact() {
  _has_bits_[0] |= 0x00000010u;
  return charact_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_charact() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.Charact)
  if (!_internal_has_charact()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return charact_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_charact(std::string* charact) {
  if (charact != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  charact_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), charact);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.Charact)
}

// required string Video = 9;
inline bool newUser_t_newuser_init::_internal_has_video() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_video() const {
  return _internal_has_video();
}
inline void newUser_t_newuser_init::clear_video() {
  video_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& newUser_t_newuser_init::video() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.Video)
  return _internal_video();
}
inline void newUser_t_newuser_init::set_video(const std::string& value) {
  _internal_set_video(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.Video)
}
inline std::string* newUser_t_newuser_init::mutable_video() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.Video)
  return _internal_mutable_video();
}
inline const std::string& newUser_t_newuser_init::_internal_video() const {
  return video_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_video(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  video_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_video(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  video_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.Video)
}
inline void newUser_t_newuser_init::set_video(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  video_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.Video)
}
inline void newUser_t_newuser_init::set_video(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  video_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.Video)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_video() {
  _has_bits_[0] |= 0x00000020u;
  return video_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_video() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.Video)
  if (!_internal_has_video()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return video_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_video(std::string* video) {
  if (video != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  video_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), video);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.Video)
}

// required string Ability = 10;
inline bool newUser_t_newuser_init::_internal_has_ability() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_ability() const {
  return _internal_has_ability();
}
inline void newUser_t_newuser_init::clear_ability() {
  ability_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& newUser_t_newuser_init::ability() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.Ability)
  return _internal_ability();
}
inline void newUser_t_newuser_init::set_ability(const std::string& value) {
  _internal_set_ability(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.Ability)
}
inline std::string* newUser_t_newuser_init::mutable_ability() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.Ability)
  return _internal_mutable_ability();
}
inline const std::string& newUser_t_newuser_init::_internal_ability() const {
  return ability_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_ability(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  ability_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_ability(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  ability_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.Ability)
}
inline void newUser_t_newuser_init::set_ability(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  ability_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.Ability)
}
inline void newUser_t_newuser_init::set_ability(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  ability_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.Ability)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_ability() {
  _has_bits_[0] |= 0x00000040u;
  return ability_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_ability() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.Ability)
  if (!_internal_has_ability()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return ability_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_ability(std::string* ability) {
  if (ability != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  ability_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ability);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.Ability)
}

// required uint32 Sex = 11;
inline bool newUser_t_newuser_init::_internal_has_sex() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_sex() const {
  return _internal_has_sex();
}
inline void newUser_t_newuser_init::clear_sex() {
  sex_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 newUser_t_newuser_init::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 newUser_t_newuser_init::sex() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.Sex)
  return _internal_sex();
}
inline void newUser_t_newuser_init::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  sex_ = value;
}
inline void newUser_t_newuser_init::set_sex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.Sex)
}

// required string Stage = 12;
inline bool newUser_t_newuser_init::_internal_has_stage() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_stage() const {
  return _internal_has_stage();
}
inline void newUser_t_newuser_init::clear_stage() {
  stage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& newUser_t_newuser_init::stage() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.Stage)
  return _internal_stage();
}
inline void newUser_t_newuser_init::set_stage(const std::string& value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.Stage)
}
inline std::string* newUser_t_newuser_init::mutable_stage() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.Stage)
  return _internal_mutable_stage();
}
inline const std::string& newUser_t_newuser_init::_internal_stage() const {
  return stage_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_stage(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  stage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_stage(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  stage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.Stage)
}
inline void newUser_t_newuser_init::set_stage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  stage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.Stage)
}
inline void newUser_t_newuser_init::set_stage(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  stage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.Stage)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_stage() {
  _has_bits_[0] |= 0x00000080u;
  return stage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_stage() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.Stage)
  if (!_internal_has_stage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return stage_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_stage(std::string* stage) {
  if (stage != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  stage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stage);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.Stage)
}

// required uint32 Skin = 13;
inline bool newUser_t_newuser_init::_internal_has_skin() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_skin() const {
  return _internal_has_skin();
}
inline void newUser_t_newuser_init::clear_skin() {
  skin_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 newUser_t_newuser_init::_internal_skin() const {
  return skin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 newUser_t_newuser_init::skin() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.Skin)
  return _internal_skin();
}
inline void newUser_t_newuser_init::_internal_set_skin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  skin_ = value;
}
inline void newUser_t_newuser_init::set_skin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skin(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.Skin)
}

// required string hairdoicon = 14;
inline bool newUser_t_newuser_init::_internal_has_hairdoicon() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_hairdoicon() const {
  return _internal_has_hairdoicon();
}
inline void newUser_t_newuser_init::clear_hairdoicon() {
  hairdoicon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& newUser_t_newuser_init::hairdoicon() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.hairdoicon)
  return _internal_hairdoicon();
}
inline void newUser_t_newuser_init::set_hairdoicon(const std::string& value) {
  _internal_set_hairdoicon(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.hairdoicon)
}
inline std::string* newUser_t_newuser_init::mutable_hairdoicon() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.hairdoicon)
  return _internal_mutable_hairdoicon();
}
inline const std::string& newUser_t_newuser_init::_internal_hairdoicon() const {
  return hairdoicon_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_hairdoicon(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  hairdoicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_hairdoicon(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  hairdoicon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.hairdoicon)
}
inline void newUser_t_newuser_init::set_hairdoicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  hairdoicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.hairdoicon)
}
inline void newUser_t_newuser_init::set_hairdoicon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  hairdoicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.hairdoicon)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_hairdoicon() {
  _has_bits_[0] |= 0x00000100u;
  return hairdoicon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_hairdoicon() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.hairdoicon)
  if (!_internal_has_hairdoicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return hairdoicon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_hairdoicon(std::string* hairdoicon) {
  if (hairdoicon != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  hairdoicon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hairdoicon);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.hairdoicon)
}

// required string hairdo = 15;
inline bool newUser_t_newuser_init::_internal_has_hairdo() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_hairdo() const {
  return _internal_has_hairdo();
}
inline void newUser_t_newuser_init::clear_hairdo() {
  hairdo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& newUser_t_newuser_init::hairdo() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.hairdo)
  return _internal_hairdo();
}
inline void newUser_t_newuser_init::set_hairdo(const std::string& value) {
  _internal_set_hairdo(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.hairdo)
}
inline std::string* newUser_t_newuser_init::mutable_hairdo() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.hairdo)
  return _internal_mutable_hairdo();
}
inline const std::string& newUser_t_newuser_init::_internal_hairdo() const {
  return hairdo_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_hairdo(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  hairdo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_hairdo(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  hairdo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.hairdo)
}
inline void newUser_t_newuser_init::set_hairdo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  hairdo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.hairdo)
}
inline void newUser_t_newuser_init::set_hairdo(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  hairdo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.hairdo)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_hairdo() {
  _has_bits_[0] |= 0x00000200u;
  return hairdo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_hairdo() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.hairdo)
  if (!_internal_has_hairdo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return hairdo_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_hairdo(std::string* hairdo) {
  if (hairdo != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  hairdo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hairdo);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.hairdo)
}

// required string coloricon = 16;
inline bool newUser_t_newuser_init::_internal_has_coloricon() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_coloricon() const {
  return _internal_has_coloricon();
}
inline void newUser_t_newuser_init::clear_coloricon() {
  coloricon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& newUser_t_newuser_init::coloricon() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.coloricon)
  return _internal_coloricon();
}
inline void newUser_t_newuser_init::set_coloricon(const std::string& value) {
  _internal_set_coloricon(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.coloricon)
}
inline std::string* newUser_t_newuser_init::mutable_coloricon() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.coloricon)
  return _internal_mutable_coloricon();
}
inline const std::string& newUser_t_newuser_init::_internal_coloricon() const {
  return coloricon_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_coloricon(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  coloricon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_coloricon(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  coloricon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.coloricon)
}
inline void newUser_t_newuser_init::set_coloricon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  coloricon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.coloricon)
}
inline void newUser_t_newuser_init::set_coloricon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  coloricon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.coloricon)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_coloricon() {
  _has_bits_[0] |= 0x00000400u;
  return coloricon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_coloricon() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.coloricon)
  if (!_internal_has_coloricon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return coloricon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_coloricon(std::string* coloricon) {
  if (coloricon != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  coloricon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coloricon);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.coloricon)
}

// required string color = 17;
inline bool newUser_t_newuser_init::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_color() const {
  return _internal_has_color();
}
inline void newUser_t_newuser_init::clear_color() {
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& newUser_t_newuser_init::color() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.color)
  return _internal_color();
}
inline void newUser_t_newuser_init::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.color)
}
inline std::string* newUser_t_newuser_init::mutable_color() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.color)
  return _internal_mutable_color();
}
inline const std::string& newUser_t_newuser_init::_internal_color() const {
  return color_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_color(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.color)
}
inline void newUser_t_newuser_init::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.color)
}
inline void newUser_t_newuser_init::set_color(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.color)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000800u;
  return color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_color() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return color_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.color)
}

// required string featureicon = 18;
inline bool newUser_t_newuser_init::_internal_has_featureicon() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_featureicon() const {
  return _internal_has_featureicon();
}
inline void newUser_t_newuser_init::clear_featureicon() {
  featureicon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& newUser_t_newuser_init::featureicon() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.featureicon)
  return _internal_featureicon();
}
inline void newUser_t_newuser_init::set_featureicon(const std::string& value) {
  _internal_set_featureicon(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.featureicon)
}
inline std::string* newUser_t_newuser_init::mutable_featureicon() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.featureicon)
  return _internal_mutable_featureicon();
}
inline const std::string& newUser_t_newuser_init::_internal_featureicon() const {
  return featureicon_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_featureicon(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  featureicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_featureicon(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  featureicon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.featureicon)
}
inline void newUser_t_newuser_init::set_featureicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  featureicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.featureicon)
}
inline void newUser_t_newuser_init::set_featureicon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  featureicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.featureicon)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_featureicon() {
  _has_bits_[0] |= 0x00001000u;
  return featureicon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_featureicon() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.featureicon)
  if (!_internal_has_featureicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return featureicon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_featureicon(std::string* featureicon) {
  if (featureicon != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  featureicon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), featureicon);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.featureicon)
}

// required string feature = 19;
inline bool newUser_t_newuser_init::_internal_has_feature() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_feature() const {
  return _internal_has_feature();
}
inline void newUser_t_newuser_init::clear_feature() {
  feature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& newUser_t_newuser_init::feature() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.feature)
  return _internal_feature();
}
inline void newUser_t_newuser_init::set_feature(const std::string& value) {
  _internal_set_feature(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.feature)
}
inline std::string* newUser_t_newuser_init::mutable_feature() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.feature)
  return _internal_mutable_feature();
}
inline const std::string& newUser_t_newuser_init::_internal_feature() const {
  return feature_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_feature(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  feature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_feature(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  feature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.feature)
}
inline void newUser_t_newuser_init::set_feature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  feature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.feature)
}
inline void newUser_t_newuser_init::set_feature(const char* value, size_t size) {
  _has_bits_[0] |= 0x00002000u;
  feature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.feature)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_feature() {
  _has_bits_[0] |= 0x00002000u;
  return feature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_feature() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.feature)
  if (!_internal_has_feature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return feature_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_feature(std::string* feature) {
  if (feature != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  feature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.feature)
}

// required string antennaicon = 20;
inline bool newUser_t_newuser_init::_internal_has_antennaicon() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_antennaicon() const {
  return _internal_has_antennaicon();
}
inline void newUser_t_newuser_init::clear_antennaicon() {
  antennaicon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& newUser_t_newuser_init::antennaicon() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.antennaicon)
  return _internal_antennaicon();
}
inline void newUser_t_newuser_init::set_antennaicon(const std::string& value) {
  _internal_set_antennaicon(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.antennaicon)
}
inline std::string* newUser_t_newuser_init::mutable_antennaicon() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.antennaicon)
  return _internal_mutable_antennaicon();
}
inline const std::string& newUser_t_newuser_init::_internal_antennaicon() const {
  return antennaicon_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_antennaicon(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  antennaicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_antennaicon(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  antennaicon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.antennaicon)
}
inline void newUser_t_newuser_init::set_antennaicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  antennaicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.antennaicon)
}
inline void newUser_t_newuser_init::set_antennaicon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00004000u;
  antennaicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.antennaicon)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_antennaicon() {
  _has_bits_[0] |= 0x00004000u;
  return antennaicon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_antennaicon() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.antennaicon)
  if (!_internal_has_antennaicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return antennaicon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_antennaicon(std::string* antennaicon) {
  if (antennaicon != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  antennaicon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), antennaicon);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.antennaicon)
}

// required string antenna = 21;
inline bool newUser_t_newuser_init::_internal_has_antenna() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_antenna() const {
  return _internal_has_antenna();
}
inline void newUser_t_newuser_init::clear_antenna() {
  antenna_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& newUser_t_newuser_init::antenna() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.antenna)
  return _internal_antenna();
}
inline void newUser_t_newuser_init::set_antenna(const std::string& value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.antenna)
}
inline std::string* newUser_t_newuser_init::mutable_antenna() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.antenna)
  return _internal_mutable_antenna();
}
inline const std::string& newUser_t_newuser_init::_internal_antenna() const {
  return antenna_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_antenna(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  antenna_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_antenna(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  antenna_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.antenna)
}
inline void newUser_t_newuser_init::set_antenna(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  antenna_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.antenna)
}
inline void newUser_t_newuser_init::set_antenna(const char* value, size_t size) {
  _has_bits_[0] |= 0x00008000u;
  antenna_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.antenna)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_antenna() {
  _has_bits_[0] |= 0x00008000u;
  return antenna_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_antenna() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.antenna)
  if (!_internal_has_antenna()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return antenna_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_antenna(std::string* antenna) {
  if (antenna != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  antenna_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), antenna);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.antenna)
}

// required string skill = 22;
inline bool newUser_t_newuser_init::_internal_has_skill() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_skill() const {
  return _internal_has_skill();
}
inline void newUser_t_newuser_init::clear_skill() {
  skill_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& newUser_t_newuser_init::skill() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.skill)
  return _internal_skill();
}
inline void newUser_t_newuser_init::set_skill(const std::string& value) {
  _internal_set_skill(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.skill)
}
inline std::string* newUser_t_newuser_init::mutable_skill() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.skill)
  return _internal_mutable_skill();
}
inline const std::string& newUser_t_newuser_init::_internal_skill() const {
  return skill_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_skill(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  skill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_skill(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  skill_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.skill)
}
inline void newUser_t_newuser_init::set_skill(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  skill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.skill)
}
inline void newUser_t_newuser_init::set_skill(const char* value, size_t size) {
  _has_bits_[0] |= 0x00010000u;
  skill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.skill)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_skill() {
  _has_bits_[0] |= 0x00010000u;
  return skill_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_skill() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.skill)
  if (!_internal_has_skill()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return skill_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_skill(std::string* skill) {
  if (skill != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  skill_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.skill)
}

// required string videotape = 23;
inline bool newUser_t_newuser_init::_internal_has_videotape() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_videotape() const {
  return _internal_has_videotape();
}
inline void newUser_t_newuser_init::clear_videotape() {
  videotape_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& newUser_t_newuser_init::videotape() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.videotape)
  return _internal_videotape();
}
inline void newUser_t_newuser_init::set_videotape(const std::string& value) {
  _internal_set_videotape(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.videotape)
}
inline std::string* newUser_t_newuser_init::mutable_videotape() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.videotape)
  return _internal_mutable_videotape();
}
inline const std::string& newUser_t_newuser_init::_internal_videotape() const {
  return videotape_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_videotape(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  videotape_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_videotape(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  videotape_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.videotape)
}
inline void newUser_t_newuser_init::set_videotape(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00020000u;
  videotape_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.videotape)
}
inline void newUser_t_newuser_init::set_videotape(const char* value, size_t size) {
  _has_bits_[0] |= 0x00020000u;
  videotape_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.videotape)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_videotape() {
  _has_bits_[0] |= 0x00020000u;
  return videotape_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_videotape() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.videotape)
  if (!_internal_has_videotape()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return videotape_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_videotape(std::string* videotape) {
  if (videotape != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  videotape_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), videotape);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.videotape)
}

// required string body = 24;
inline bool newUser_t_newuser_init::_internal_has_body() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_body() const {
  return _internal_has_body();
}
inline void newUser_t_newuser_init::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& newUser_t_newuser_init::body() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.body)
  return _internal_body();
}
inline void newUser_t_newuser_init::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.body)
}
inline std::string* newUser_t_newuser_init::mutable_body() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.body)
  return _internal_mutable_body();
}
inline const std::string& newUser_t_newuser_init::_internal_body() const {
  return body_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_body(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_body(std::string&& value) {
  _has_bits_[0] |= 0x00040000u;
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.body)
}
inline void newUser_t_newuser_init::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00040000u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.body)
}
inline void newUser_t_newuser_init::set_body(const char* value, size_t size) {
  _has_bits_[0] |= 0x00040000u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.body)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_body() {
  _has_bits_[0] |= 0x00040000u;
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_body() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.body)
  if (!_internal_has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  return body_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.body)
}

// required string scenename = 25;
inline bool newUser_t_newuser_init::_internal_has_scenename() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_scenename() const {
  return _internal_has_scenename();
}
inline void newUser_t_newuser_init::clear_scenename() {
  scenename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& newUser_t_newuser_init::scenename() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.scenename)
  return _internal_scenename();
}
inline void newUser_t_newuser_init::set_scenename(const std::string& value) {
  _internal_set_scenename(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.scenename)
}
inline std::string* newUser_t_newuser_init::mutable_scenename() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.scenename)
  return _internal_mutable_scenename();
}
inline const std::string& newUser_t_newuser_init::_internal_scenename() const {
  return scenename_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_scenename(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  scenename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_scenename(std::string&& value) {
  _has_bits_[0] |= 0x00080000u;
  scenename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.scenename)
}
inline void newUser_t_newuser_init::set_scenename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00080000u;
  scenename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.scenename)
}
inline void newUser_t_newuser_init::set_scenename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00080000u;
  scenename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.scenename)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_scenename() {
  _has_bits_[0] |= 0x00080000u;
  return scenename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_scenename() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.scenename)
  if (!_internal_has_scenename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  return scenename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_scenename(std::string* scenename) {
  if (scenename != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  scenename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenename);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.scenename)
}

// required string cammaxdis = 26;
inline bool newUser_t_newuser_init::_internal_has_cammaxdis() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_cammaxdis() const {
  return _internal_has_cammaxdis();
}
inline void newUser_t_newuser_init::clear_cammaxdis() {
  cammaxdis_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& newUser_t_newuser_init::cammaxdis() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.cammaxdis)
  return _internal_cammaxdis();
}
inline void newUser_t_newuser_init::set_cammaxdis(const std::string& value) {
  _internal_set_cammaxdis(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.cammaxdis)
}
inline std::string* newUser_t_newuser_init::mutable_cammaxdis() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.cammaxdis)
  return _internal_mutable_cammaxdis();
}
inline const std::string& newUser_t_newuser_init::_internal_cammaxdis() const {
  return cammaxdis_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_cammaxdis(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  cammaxdis_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_cammaxdis(std::string&& value) {
  _has_bits_[0] |= 0x00100000u;
  cammaxdis_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.cammaxdis)
}
inline void newUser_t_newuser_init::set_cammaxdis(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00100000u;
  cammaxdis_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.cammaxdis)
}
inline void newUser_t_newuser_init::set_cammaxdis(const char* value, size_t size) {
  _has_bits_[0] |= 0x00100000u;
  cammaxdis_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.cammaxdis)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_cammaxdis() {
  _has_bits_[0] |= 0x00100000u;
  return cammaxdis_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_cammaxdis() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.cammaxdis)
  if (!_internal_has_cammaxdis()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return cammaxdis_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_cammaxdis(std::string* cammaxdis) {
  if (cammaxdis != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  cammaxdis_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cammaxdis);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.cammaxdis)
}

// required string cammindis = 27;
inline bool newUser_t_newuser_init::_internal_has_cammindis() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_cammindis() const {
  return _internal_has_cammindis();
}
inline void newUser_t_newuser_init::clear_cammindis() {
  cammindis_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00200000u;
}
inline const std::string& newUser_t_newuser_init::cammindis() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.cammindis)
  return _internal_cammindis();
}
inline void newUser_t_newuser_init::set_cammindis(const std::string& value) {
  _internal_set_cammindis(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.cammindis)
}
inline std::string* newUser_t_newuser_init::mutable_cammindis() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.cammindis)
  return _internal_mutable_cammindis();
}
inline const std::string& newUser_t_newuser_init::_internal_cammindis() const {
  return cammindis_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_cammindis(const std::string& value) {
  _has_bits_[0] |= 0x00200000u;
  cammindis_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_cammindis(std::string&& value) {
  _has_bits_[0] |= 0x00200000u;
  cammindis_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.cammindis)
}
inline void newUser_t_newuser_init::set_cammindis(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00200000u;
  cammindis_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.cammindis)
}
inline void newUser_t_newuser_init::set_cammindis(const char* value, size_t size) {
  _has_bits_[0] |= 0x00200000u;
  cammindis_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.cammindis)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_cammindis() {
  _has_bits_[0] |= 0x00200000u;
  return cammindis_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_cammindis() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.cammindis)
  if (!_internal_has_cammindis()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00200000u;
  return cammindis_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_cammindis(std::string* cammindis) {
  if (cammindis != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  cammindis_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cammindis);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.cammindis)
}

// required string campos = 28;
inline bool newUser_t_newuser_init::_internal_has_campos() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_campos() const {
  return _internal_has_campos();
}
inline void newUser_t_newuser_init::clear_campos() {
  campos_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00400000u;
}
inline const std::string& newUser_t_newuser_init::campos() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.campos)
  return _internal_campos();
}
inline void newUser_t_newuser_init::set_campos(const std::string& value) {
  _internal_set_campos(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.campos)
}
inline std::string* newUser_t_newuser_init::mutable_campos() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.campos)
  return _internal_mutable_campos();
}
inline const std::string& newUser_t_newuser_init::_internal_campos() const {
  return campos_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_campos(const std::string& value) {
  _has_bits_[0] |= 0x00400000u;
  campos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_campos(std::string&& value) {
  _has_bits_[0] |= 0x00400000u;
  campos_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.campos)
}
inline void newUser_t_newuser_init::set_campos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00400000u;
  campos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.campos)
}
inline void newUser_t_newuser_init::set_campos(const char* value, size_t size) {
  _has_bits_[0] |= 0x00400000u;
  campos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.campos)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_campos() {
  _has_bits_[0] |= 0x00400000u;
  return campos_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_campos() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.campos)
  if (!_internal_has_campos()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00400000u;
  return campos_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_campos(std::string* campos) {
  if (campos != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  campos_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), campos);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.campos)
}

// required string fogparam = 29;
inline bool newUser_t_newuser_init::_internal_has_fogparam() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_fogparam() const {
  return _internal_has_fogparam();
}
inline void newUser_t_newuser_init::clear_fogparam() {
  fogparam_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00800000u;
}
inline const std::string& newUser_t_newuser_init::fogparam() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.fogparam)
  return _internal_fogparam();
}
inline void newUser_t_newuser_init::set_fogparam(const std::string& value) {
  _internal_set_fogparam(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.fogparam)
}
inline std::string* newUser_t_newuser_init::mutable_fogparam() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.fogparam)
  return _internal_mutable_fogparam();
}
inline const std::string& newUser_t_newuser_init::_internal_fogparam() const {
  return fogparam_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_fogparam(const std::string& value) {
  _has_bits_[0] |= 0x00800000u;
  fogparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_fogparam(std::string&& value) {
  _has_bits_[0] |= 0x00800000u;
  fogparam_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.fogparam)
}
inline void newUser_t_newuser_init::set_fogparam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00800000u;
  fogparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.fogparam)
}
inline void newUser_t_newuser_init::set_fogparam(const char* value, size_t size) {
  _has_bits_[0] |= 0x00800000u;
  fogparam_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.fogparam)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_fogparam() {
  _has_bits_[0] |= 0x00800000u;
  return fogparam_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_fogparam() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.fogparam)
  if (!_internal_has_fogparam()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00800000u;
  return fogparam_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_fogparam(std::string* fogparam) {
  if (fogparam != nullptr) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  fogparam_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fogparam);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.fogparam)
}

// required string lighting = 30;
inline bool newUser_t_newuser_init::_internal_has_lighting() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool newUser_t_newuser_init::has_lighting() const {
  return _internal_has_lighting();
}
inline void newUser_t_newuser_init::clear_lighting() {
  lighting_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x01000000u;
}
inline const std::string& newUser_t_newuser_init::lighting() const {
  // @@protoc_insertion_point(field_get:pb.newUser.t_newuser_init.lighting)
  return _internal_lighting();
}
inline void newUser_t_newuser_init::set_lighting(const std::string& value) {
  _internal_set_lighting(value);
  // @@protoc_insertion_point(field_set:pb.newUser.t_newuser_init.lighting)
}
inline std::string* newUser_t_newuser_init::mutable_lighting() {
  // @@protoc_insertion_point(field_mutable:pb.newUser.t_newuser_init.lighting)
  return _internal_mutable_lighting();
}
inline const std::string& newUser_t_newuser_init::_internal_lighting() const {
  return lighting_.GetNoArena();
}
inline void newUser_t_newuser_init::_internal_set_lighting(const std::string& value) {
  _has_bits_[0] |= 0x01000000u;
  lighting_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void newUser_t_newuser_init::set_lighting(std::string&& value) {
  _has_bits_[0] |= 0x01000000u;
  lighting_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.newUser.t_newuser_init.lighting)
}
inline void newUser_t_newuser_init::set_lighting(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x01000000u;
  lighting_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.newUser.t_newuser_init.lighting)
}
inline void newUser_t_newuser_init::set_lighting(const char* value, size_t size) {
  _has_bits_[0] |= 0x01000000u;
  lighting_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.newUser.t_newuser_init.lighting)
}
inline std::string* newUser_t_newuser_init::_internal_mutable_lighting() {
  _has_bits_[0] |= 0x01000000u;
  return lighting_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* newUser_t_newuser_init::release_lighting() {
  // @@protoc_insertion_point(field_release:pb.newUser.t_newuser_init.lighting)
  if (!_internal_has_lighting()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x01000000u;
  return lighting_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void newUser_t_newuser_init::set_allocated_lighting(std::string* lighting) {
  if (lighting != nullptr) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  lighting_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lighting);
  // @@protoc_insertion_point(field_set_allocated:pb.newUser.t_newuser_init.lighting)
}

// -------------------------------------------------------------------

// newUser

// repeated .pb.newUser.t_newuser_init datas = 1;
inline int newUser::_internal_datas_size() const {
  return datas_.size();
}
inline int newUser::datas_size() const {
  return _internal_datas_size();
}
inline void newUser::clear_datas() {
  datas_.Clear();
}
inline ::pb::newUser_t_newuser_init* newUser::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.newUser.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::newUser_t_newuser_init >*
newUser::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.newUser.datas)
  return &datas_;
}
inline const ::pb::newUser_t_newuser_init& newUser::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::newUser_t_newuser_init& newUser::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.newUser.datas)
  return _internal_datas(index);
}
inline ::pb::newUser_t_newuser_init* newUser::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::newUser_t_newuser_init* newUser::add_datas() {
  // @@protoc_insertion_point(field_add:pb.newUser.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::newUser_t_newuser_init >&
newUser::datas() const {
  // @@protoc_insertion_point(field_list:pb.newUser.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_newUser_2eproto
