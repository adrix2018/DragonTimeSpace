// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: charstate.proto

#include "charstate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_charstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_charstate_t_charstate_config_charstate_2eproto;
namespace pb {
class charstate_t_charstate_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<charstate_t_charstate_config> _instance;
} _charstate_t_charstate_config_default_instance_;
class charstateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<charstate> _instance;
} _charstate_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_charstate_charstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_charstate_default_instance_;
    new (ptr) ::pb::charstate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::charstate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_charstate_charstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_charstate_charstate_2eproto}, {
      &scc_info_charstate_t_charstate_config_charstate_2eproto.base,}};

static void InitDefaultsscc_info_charstate_t_charstate_config_charstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_charstate_t_charstate_config_default_instance_;
    new (ptr) ::pb::charstate_t_charstate_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::charstate_t_charstate_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_charstate_t_charstate_config_charstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_charstate_t_charstate_config_charstate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_charstate_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_charstate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_charstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_charstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, id_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, name_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, value_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, battleshow_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, good_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, addtype_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, replacetype_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, removetype_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, addlayer_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, reset_time_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, animpriority_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, animtype_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, buffanim_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, revertanim_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, buffeffect_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, bufficon_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, iconshowtype_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, iconpriority_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, introduce_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, controltype_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, breaktype_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate_t_charstate_config, endingeffect_),
  6,
  7,
  0,
  1,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  2,
  3,
  19,
  20,
  4,
  21,
  22,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::charstate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::charstate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::charstate, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(::pb::charstate_t_charstate_config)},
  { 51, 57, sizeof(::pb::charstate)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_charstate_t_charstate_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_charstate_default_instance_),
};

const char descriptor_table_protodef_charstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017charstate.proto\022\002pb\"\204\004\n\tcharstate\022/\n\005d"
  "atas\030\001 \003(\0132 .pb.charstate.t_charstate_co"
  "nfig\032\305\003\n\022t_charstate_config\022\020\n\005tbxid\030\001 \002"
  "(\r:\0010\022\r\n\002id\030\002 \002(\r:\0010\022\014\n\004name\030\003 \002(\t\022\r\n\005va"
  "lue\030\004 \002(\t\022\022\n\nbattleshow\030\005 \002(\r\022\014\n\004good\030\006 "
  "\002(\r\022\017\n\007addtype\030\007 \002(\r\022\023\n\013replacetype\030\010 \002("
  "\r\022\022\n\nremovetype\030\t \002(\r\022\020\n\010addlayer\030\n \002(\r\022"
  "\022\n\nreset_time\030\013 \002(\r\022\024\n\014AnimPriority\030\014 \002("
  "\r\022\020\n\010Animtype\030\r \002(\r\022\020\n\010BuffAnim\030\016 \002(\r\022\022\n"
  "\nRevertAnim\030\017 \002(\r\022\022\n\nBuffEffect\030\020 \002(\t\022\020\n"
  "\010BuffIcon\030\021 \002(\t\022\024\n\014IconShowType\030\022 \002(\r\022\024\n"
  "\014IconPriority\030\023 \002(\r\022\021\n\tintroduce\030\024 \002(\t\022\023"
  "\n\013ControlType\030\025 \002(\r\022\021\n\tBreakType\030\026 \002(\r\022\024"
  "\n\014EndingEffect\030\027 \002(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_charstate_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_charstate_2eproto_sccs[2] = {
  &scc_info_charstate_charstate_2eproto.base,
  &scc_info_charstate_t_charstate_config_charstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_charstate_2eproto_once;
static bool descriptor_table_charstate_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_charstate_2eproto = {
  &descriptor_table_charstate_2eproto_initialized, descriptor_table_protodef_charstate_2eproto, "charstate.proto", 540,
  &descriptor_table_charstate_2eproto_once, descriptor_table_charstate_2eproto_sccs, descriptor_table_charstate_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_charstate_2eproto::offsets,
  file_level_metadata_charstate_2eproto, 2, file_level_enum_descriptors_charstate_2eproto, file_level_service_descriptors_charstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_charstate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_charstate_2eproto)), true);
namespace pb {

// ===================================================================

void charstate_t_charstate_config::InitAsDefaultInstance() {
}
class charstate_t_charstate_config::_Internal {
 public:
  using HasBits = decltype(std::declval<charstate_t_charstate_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_battleshow(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_good(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_addtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_replacetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_removetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_addlayer(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_reset_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_animpriority(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_animtype(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_buffanim(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_revertanim(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_buffeffect(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bufficon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iconshowtype(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_iconpriority(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_introduce(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_controltype(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_breaktype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_endingeffect(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

charstate_t_charstate_config::charstate_t_charstate_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.charstate.t_charstate_config)
}
charstate_t_charstate_config::charstate_t_charstate_config(const charstate_t_charstate_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  buffeffect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_buffeffect()) {
    buffeffect_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffeffect_);
  }
  bufficon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bufficon()) {
    bufficon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bufficon_);
  }
  introduce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_introduce()) {
    introduce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.introduce_);
  }
  endingeffect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_endingeffect()) {
    endingeffect_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endingeffect_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&breaktype_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(breaktype_));
  // @@protoc_insertion_point(copy_constructor:pb.charstate.t_charstate_config)
}

void charstate_t_charstate_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_charstate_t_charstate_config_charstate_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffeffect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bufficon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  introduce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endingeffect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&breaktype_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(breaktype_));
}

charstate_t_charstate_config::~charstate_t_charstate_config() {
  // @@protoc_insertion_point(destructor:pb.charstate.t_charstate_config)
  SharedDtor();
}

void charstate_t_charstate_config::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffeffect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bufficon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  introduce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endingeffect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void charstate_t_charstate_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const charstate_t_charstate_config& charstate_t_charstate_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_charstate_t_charstate_config_charstate_2eproto.base);
  return *internal_default_instance();
}


void charstate_t_charstate_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.charstate.t_charstate_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      buffeffect_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      bufficon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      introduce_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      endingeffect_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&battleshow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&animpriority_) -
        reinterpret_cast<char*>(&battleshow_)) + sizeof(animpriority_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&animtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&breaktype_) -
        reinterpret_cast<char*>(&animtype_)) + sizeof(breaktype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* charstate_t_charstate_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&has_bits);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.charstate.t_charstate_config.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.charstate.t_charstate_config.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 battleshow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_battleshow(&has_bits);
          battleshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 good = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_good(&has_bits);
          good_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 addtype = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_addtype(&has_bits);
          addtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 replacetype = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_replacetype(&has_bits);
          replacetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 removetype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_removetype(&has_bits);
          removetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 addlayer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_addlayer(&has_bits);
          addlayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 reset_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_reset_time(&has_bits);
          reset_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 AnimPriority = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_animpriority(&has_bits);
          animpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 Animtype = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_animtype(&has_bits);
          animtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 BuffAnim = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_buffanim(&has_bits);
          buffanim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 RevertAnim = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_revertanim(&has_bits);
          revertanim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string BuffEffect = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_buffeffect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.charstate.t_charstate_config.BuffEffect");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string BuffIcon = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_bufficon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.charstate.t_charstate_config.BuffIcon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 IconShowType = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_iconshowtype(&has_bits);
          iconshowtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 IconPriority = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_iconpriority(&has_bits);
          iconpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string introduce = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_introduce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.charstate.t_charstate_config.introduce");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 ControlType = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_controltype(&has_bits);
          controltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 BreakType = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_breaktype(&has_bits);
          breaktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string EndingEffect = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_endingeffect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.charstate.t_charstate_config.EndingEffect");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* charstate_t_charstate_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.charstate.t_charstate_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.charstate.t_charstate_config.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // required string value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.charstate.t_charstate_config.value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  // required uint32 battleshow = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_battleshow(), target);
  }

  // required uint32 good = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_good(), target);
  }

  // required uint32 addtype = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_addtype(), target);
  }

  // required uint32 replacetype = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_replacetype(), target);
  }

  // required uint32 removetype = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_removetype(), target);
  }

  // required uint32 addlayer = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_addlayer(), target);
  }

  // required uint32 reset_time = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_reset_time(), target);
  }

  // required uint32 AnimPriority = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_animpriority(), target);
  }

  // required uint32 Animtype = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_animtype(), target);
  }

  // required uint32 BuffAnim = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_buffanim(), target);
  }

  // required uint32 RevertAnim = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_revertanim(), target);
  }

  // required string BuffEffect = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buffeffect().data(), static_cast<int>(this->_internal_buffeffect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.charstate.t_charstate_config.BuffEffect");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_buffeffect(), target);
  }

  // required string BuffIcon = 17;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bufficon().data(), static_cast<int>(this->_internal_bufficon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.charstate.t_charstate_config.BuffIcon");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_bufficon(), target);
  }

  // required uint32 IconShowType = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_iconshowtype(), target);
  }

  // required uint32 IconPriority = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_iconpriority(), target);
  }

  // required string introduce = 20;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_introduce().data(), static_cast<int>(this->_internal_introduce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.charstate.t_charstate_config.introduce");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_introduce(), target);
  }

  // required uint32 ControlType = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_controltype(), target);
  }

  // required uint32 BreakType = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_breaktype(), target);
  }

  // required string EndingEffect = 23;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_endingeffect().data(), static_cast<int>(this->_internal_endingeffect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.charstate.t_charstate_config.EndingEffect");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_endingeffect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.charstate.t_charstate_config)
  return target;
}

size_t charstate_t_charstate_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.charstate.t_charstate_config)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_value()) {
    // required string value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_buffeffect()) {
    // required string BuffEffect = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buffeffect());
  }

  if (_internal_has_bufficon()) {
    // required string BuffIcon = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bufficon());
  }

  if (_internal_has_introduce()) {
    // required string introduce = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_introduce());
  }

  if (_internal_has_endingeffect()) {
    // required string EndingEffect = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endingeffect());
  }

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_battleshow()) {
    // required uint32 battleshow = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_battleshow());
  }

  if (_internal_has_good()) {
    // required uint32 good = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_good());
  }

  if (_internal_has_addtype()) {
    // required uint32 addtype = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addtype());
  }

  if (_internal_has_replacetype()) {
    // required uint32 replacetype = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replacetype());
  }

  if (_internal_has_removetype()) {
    // required uint32 removetype = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_removetype());
  }

  if (_internal_has_addlayer()) {
    // required uint32 addlayer = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addlayer());
  }

  if (_internal_has_reset_time()) {
    // required uint32 reset_time = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_time());
  }

  if (_internal_has_animpriority()) {
    // required uint32 AnimPriority = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_animpriority());
  }

  if (_internal_has_animtype()) {
    // required uint32 Animtype = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_animtype());
  }

  if (_internal_has_buffanim()) {
    // required uint32 BuffAnim = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buffanim());
  }

  if (_internal_has_revertanim()) {
    // required uint32 RevertAnim = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_revertanim());
  }

  if (_internal_has_iconshowtype()) {
    // required uint32 IconShowType = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iconshowtype());
  }

  if (_internal_has_iconpriority()) {
    // required uint32 IconPriority = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iconpriority());
  }

  if (_internal_has_controltype()) {
    // required uint32 ControlType = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_controltype());
  }

  if (_internal_has_breaktype()) {
    // required uint32 BreakType = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_breaktype());
  }

  return total_size;
}
size_t charstate_t_charstate_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.charstate.t_charstate_config)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x007fffff) ^ 0x007fffff) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required string BuffEffect = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buffeffect());

    // required string BuffIcon = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bufficon());

    // required string introduce = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_introduce());

    // required string EndingEffect = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endingeffect());

    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 battleshow = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_battleshow());

    // required uint32 good = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_good());

    // required uint32 addtype = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addtype());

    // required uint32 replacetype = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_replacetype());

    // required uint32 removetype = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_removetype());

    // required uint32 addlayer = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addlayer());

    // required uint32 reset_time = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reset_time());

    // required uint32 AnimPriority = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_animpriority());

    // required uint32 Animtype = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_animtype());

    // required uint32 BuffAnim = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buffanim());

    // required uint32 RevertAnim = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_revertanim());

    // required uint32 IconShowType = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iconshowtype());

    // required uint32 IconPriority = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iconpriority());

    // required uint32 ControlType = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_controltype());

    // required uint32 BreakType = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_breaktype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void charstate_t_charstate_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.charstate.t_charstate_config)
  GOOGLE_DCHECK_NE(&from, this);
  const charstate_t_charstate_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<charstate_t_charstate_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.charstate.t_charstate_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.charstate.t_charstate_config)
    MergeFrom(*source);
  }
}

void charstate_t_charstate_config::MergeFrom(const charstate_t_charstate_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.charstate.t_charstate_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      buffeffect_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffeffect_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      bufficon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bufficon_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      introduce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.introduce_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      endingeffect_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endingeffect_);
    }
    if (cached_has_bits & 0x00000040u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      battleshow_ = from.battleshow_;
    }
    if (cached_has_bits & 0x00000200u) {
      good_ = from.good_;
    }
    if (cached_has_bits & 0x00000400u) {
      addtype_ = from.addtype_;
    }
    if (cached_has_bits & 0x00000800u) {
      replacetype_ = from.replacetype_;
    }
    if (cached_has_bits & 0x00001000u) {
      removetype_ = from.removetype_;
    }
    if (cached_has_bits & 0x00002000u) {
      addlayer_ = from.addlayer_;
    }
    if (cached_has_bits & 0x00004000u) {
      reset_time_ = from.reset_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      animpriority_ = from.animpriority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      animtype_ = from.animtype_;
    }
    if (cached_has_bits & 0x00020000u) {
      buffanim_ = from.buffanim_;
    }
    if (cached_has_bits & 0x00040000u) {
      revertanim_ = from.revertanim_;
    }
    if (cached_has_bits & 0x00080000u) {
      iconshowtype_ = from.iconshowtype_;
    }
    if (cached_has_bits & 0x00100000u) {
      iconpriority_ = from.iconpriority_;
    }
    if (cached_has_bits & 0x00200000u) {
      controltype_ = from.controltype_;
    }
    if (cached_has_bits & 0x00400000u) {
      breaktype_ = from.breaktype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void charstate_t_charstate_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.charstate.t_charstate_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void charstate_t_charstate_config::CopyFrom(const charstate_t_charstate_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.charstate.t_charstate_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool charstate_t_charstate_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;
  return true;
}

void charstate_t_charstate_config::InternalSwap(charstate_t_charstate_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buffeffect_.Swap(&other->buffeffect_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bufficon_.Swap(&other->bufficon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  introduce_.Swap(&other->introduce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  endingeffect_.Swap(&other->endingeffect_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(battleshow_, other->battleshow_);
  swap(good_, other->good_);
  swap(addtype_, other->addtype_);
  swap(replacetype_, other->replacetype_);
  swap(removetype_, other->removetype_);
  swap(addlayer_, other->addlayer_);
  swap(reset_time_, other->reset_time_);
  swap(animpriority_, other->animpriority_);
  swap(animtype_, other->animtype_);
  swap(buffanim_, other->buffanim_);
  swap(revertanim_, other->revertanim_);
  swap(iconshowtype_, other->iconshowtype_);
  swap(iconpriority_, other->iconpriority_);
  swap(controltype_, other->controltype_);
  swap(breaktype_, other->breaktype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata charstate_t_charstate_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void charstate::InitAsDefaultInstance() {
}
class charstate::_Internal {
 public:
  using HasBits = decltype(std::declval<charstate>()._has_bits_);
};

charstate::charstate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.charstate)
}
charstate::charstate(const charstate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.charstate)
}

void charstate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_charstate_charstate_2eproto.base);
}

charstate::~charstate() {
  // @@protoc_insertion_point(destructor:pb.charstate)
  SharedDtor();
}

void charstate::SharedDtor() {
}

void charstate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const charstate& charstate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_charstate_charstate_2eproto.base);
  return *internal_default_instance();
}


void charstate::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.charstate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* charstate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.charstate.t_charstate_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* charstate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.charstate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.charstate.t_charstate_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.charstate)
  return target;
}

size_t charstate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.charstate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.charstate.t_charstate_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void charstate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.charstate)
  GOOGLE_DCHECK_NE(&from, this);
  const charstate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<charstate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.charstate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.charstate)
    MergeFrom(*source);
  }
}

void charstate::MergeFrom(const charstate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.charstate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void charstate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.charstate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void charstate::CopyFrom(const charstate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.charstate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool charstate::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void charstate::InternalSwap(charstate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata charstate::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::charstate_t_charstate_config* Arena::CreateMaybeMessage< ::pb::charstate_t_charstate_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::charstate_t_charstate_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::charstate* Arena::CreateMaybeMessage< ::pb::charstate >(Arena* arena) {
  return Arena::CreateInternal< ::pb::charstate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
