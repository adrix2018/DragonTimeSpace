// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heros.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_heros_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_heros_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_heros_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_heros_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_heros_2eproto;
namespace pb {
class heros;
class herosDefaultTypeInternal;
extern herosDefaultTypeInternal _heros_default_instance_;
class heros_t_hero_config;
class heros_t_hero_configDefaultTypeInternal;
extern heros_t_hero_configDefaultTypeInternal _heros_t_hero_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::heros* Arena::CreateMaybeMessage<::pb::heros>(Arena*);
template<> ::pb::heros_t_hero_config* Arena::CreateMaybeMessage<::pb::heros_t_hero_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class heros_t_hero_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.heros.t_hero_config) */ {
 public:
  heros_t_hero_config();
  virtual ~heros_t_hero_config();

  heros_t_hero_config(const heros_t_hero_config& from);
  heros_t_hero_config(heros_t_hero_config&& from) noexcept
    : heros_t_hero_config() {
    *this = ::std::move(from);
  }

  inline heros_t_hero_config& operator=(const heros_t_hero_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline heros_t_hero_config& operator=(heros_t_hero_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const heros_t_hero_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const heros_t_hero_config* internal_default_instance() {
    return reinterpret_cast<const heros_t_hero_config*>(
               &_heros_t_hero_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(heros_t_hero_config& a, heros_t_hero_config& b) {
    a.Swap(&b);
  }
  inline void Swap(heros_t_hero_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline heros_t_hero_config* New() const final {
    return CreateMaybeMessage<heros_t_hero_config>(nullptr);
  }

  heros_t_hero_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<heros_t_hero_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const heros_t_hero_config& from);
  void MergeFrom(const heros_t_hero_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(heros_t_hero_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.heros.t_hero_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_heros_2eproto);
    return ::descriptor_table_heros_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeiconFieldNumber = 4,
    kDescFieldNumber = 5,
    kEvolutionFieldNumber = 6,
    kPrimecardFieldNumber = 7,
    kMaxcardFieldNumber = 8,
    kSkillFieldNumber = 15,
    kRepeatgetFieldNumber = 16,
    kHerocharaFieldNumber = 17,
    kTrickFieldNumber = 18,
    kModelactFieldNumber = 19,
    kGetherodescFieldNumber = 31,
    kFettersFieldNumber = 33,
    kRecommandpriceFieldNumber = 34,
    kHeronameFieldNumber = 37,
    kAvatarFieldNumber = 41,
    kExskillFieldNumber = 43,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kActiveskill1FieldNumber = 9,
    kActiveskill2FieldNumber = 10,
    kActiveskill3FieldNumber = 11,
    kActiveskill4FieldNumber = 12,
    kNormalskillFieldNumber = 13,
    kPassiveskillFieldNumber = 14,
    kMaxhpFieldNumber = 20,
    kPdamageFieldNumber = 21,
    kMdamageFieldNumber = 22,
    kPdefenceFieldNumber = 23,
    kMdefenceFieldNumber = 24,
    kBangFieldNumber = 25,
    kToughnessFieldNumber = 26,
    kBlockFieldNumber = 27,
    kPenetrateFieldNumber = 28,
    kHitFieldNumber = 29,
    kMissFieldNumber = 30,
    kGetheropathwayFieldNumber = 32,
    kAddmpcfgFieldNumber = 35,
    kMaxstarFieldNumber = 36,
    kIsshowFieldNumber = 38,
    kAccurateFieldNumber = 39,
    kDeflectFieldNumber = 40,
    kNewavatarFieldNumber = 42,
  };
  // required string typeicon = 4;
  bool has_typeicon() const;
  private:
  bool _internal_has_typeicon() const;
  public:
  void clear_typeicon();
  const std::string& typeicon() const;
  void set_typeicon(const std::string& value);
  void set_typeicon(std::string&& value);
  void set_typeicon(const char* value);
  void set_typeicon(const char* value, size_t size);
  std::string* mutable_typeicon();
  std::string* release_typeicon();
  void set_allocated_typeicon(std::string* typeicon);
  private:
  const std::string& _internal_typeicon() const;
  void _internal_set_typeicon(const std::string& value);
  std::string* _internal_mutable_typeicon();
  public:

  // required string desc = 5;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // required string evolution = 6;
  bool has_evolution() const;
  private:
  bool _internal_has_evolution() const;
  public:
  void clear_evolution();
  const std::string& evolution() const;
  void set_evolution(const std::string& value);
  void set_evolution(std::string&& value);
  void set_evolution(const char* value);
  void set_evolution(const char* value, size_t size);
  std::string* mutable_evolution();
  std::string* release_evolution();
  void set_allocated_evolution(std::string* evolution);
  private:
  const std::string& _internal_evolution() const;
  void _internal_set_evolution(const std::string& value);
  std::string* _internal_mutable_evolution();
  public:

  // required string primecard = 7;
  bool has_primecard() const;
  private:
  bool _internal_has_primecard() const;
  public:
  void clear_primecard();
  const std::string& primecard() const;
  void set_primecard(const std::string& value);
  void set_primecard(std::string&& value);
  void set_primecard(const char* value);
  void set_primecard(const char* value, size_t size);
  std::string* mutable_primecard();
  std::string* release_primecard();
  void set_allocated_primecard(std::string* primecard);
  private:
  const std::string& _internal_primecard() const;
  void _internal_set_primecard(const std::string& value);
  std::string* _internal_mutable_primecard();
  public:

  // required string maxcard = 8;
  bool has_maxcard() const;
  private:
  bool _internal_has_maxcard() const;
  public:
  void clear_maxcard();
  const std::string& maxcard() const;
  void set_maxcard(const std::string& value);
  void set_maxcard(std::string&& value);
  void set_maxcard(const char* value);
  void set_maxcard(const char* value, size_t size);
  std::string* mutable_maxcard();
  std::string* release_maxcard();
  void set_allocated_maxcard(std::string* maxcard);
  private:
  const std::string& _internal_maxcard() const;
  void _internal_set_maxcard(const std::string& value);
  std::string* _internal_mutable_maxcard();
  public:

  // required string skill = 15;
  bool has_skill() const;
  private:
  bool _internal_has_skill() const;
  public:
  void clear_skill();
  const std::string& skill() const;
  void set_skill(const std::string& value);
  void set_skill(std::string&& value);
  void set_skill(const char* value);
  void set_skill(const char* value, size_t size);
  std::string* mutable_skill();
  std::string* release_skill();
  void set_allocated_skill(std::string* skill);
  private:
  const std::string& _internal_skill() const;
  void _internal_set_skill(const std::string& value);
  std::string* _internal_mutable_skill();
  public:

  // required string repeatget = 16;
  bool has_repeatget() const;
  private:
  bool _internal_has_repeatget() const;
  public:
  void clear_repeatget();
  const std::string& repeatget() const;
  void set_repeatget(const std::string& value);
  void set_repeatget(std::string&& value);
  void set_repeatget(const char* value);
  void set_repeatget(const char* value, size_t size);
  std::string* mutable_repeatget();
  std::string* release_repeatget();
  void set_allocated_repeatget(std::string* repeatget);
  private:
  const std::string& _internal_repeatget() const;
  void _internal_set_repeatget(const std::string& value);
  std::string* _internal_mutable_repeatget();
  public:

  // required string herochara = 17;
  bool has_herochara() const;
  private:
  bool _internal_has_herochara() const;
  public:
  void clear_herochara();
  const std::string& herochara() const;
  void set_herochara(const std::string& value);
  void set_herochara(std::string&& value);
  void set_herochara(const char* value);
  void set_herochara(const char* value, size_t size);
  std::string* mutable_herochara();
  std::string* release_herochara();
  void set_allocated_herochara(std::string* herochara);
  private:
  const std::string& _internal_herochara() const;
  void _internal_set_herochara(const std::string& value);
  std::string* _internal_mutable_herochara();
  public:

  // required string trick = 18;
  bool has_trick() const;
  private:
  bool _internal_has_trick() const;
  public:
  void clear_trick();
  const std::string& trick() const;
  void set_trick(const std::string& value);
  void set_trick(std::string&& value);
  void set_trick(const char* value);
  void set_trick(const char* value, size_t size);
  std::string* mutable_trick();
  std::string* release_trick();
  void set_allocated_trick(std::string* trick);
  private:
  const std::string& _internal_trick() const;
  void _internal_set_trick(const std::string& value);
  std::string* _internal_mutable_trick();
  public:

  // required string modelact = 19;
  bool has_modelact() const;
  private:
  bool _internal_has_modelact() const;
  public:
  void clear_modelact();
  const std::string& modelact() const;
  void set_modelact(const std::string& value);
  void set_modelact(std::string&& value);
  void set_modelact(const char* value);
  void set_modelact(const char* value, size_t size);
  std::string* mutable_modelact();
  std::string* release_modelact();
  void set_allocated_modelact(std::string* modelact);
  private:
  const std::string& _internal_modelact() const;
  void _internal_set_modelact(const std::string& value);
  std::string* _internal_mutable_modelact();
  public:

  // required string getherodesc = 31;
  bool has_getherodesc() const;
  private:
  bool _internal_has_getherodesc() const;
  public:
  void clear_getherodesc();
  const std::string& getherodesc() const;
  void set_getherodesc(const std::string& value);
  void set_getherodesc(std::string&& value);
  void set_getherodesc(const char* value);
  void set_getherodesc(const char* value, size_t size);
  std::string* mutable_getherodesc();
  std::string* release_getherodesc();
  void set_allocated_getherodesc(std::string* getherodesc);
  private:
  const std::string& _internal_getherodesc() const;
  void _internal_set_getherodesc(const std::string& value);
  std::string* _internal_mutable_getherodesc();
  public:

  // required string fetters = 33;
  bool has_fetters() const;
  private:
  bool _internal_has_fetters() const;
  public:
  void clear_fetters();
  const std::string& fetters() const;
  void set_fetters(const std::string& value);
  void set_fetters(std::string&& value);
  void set_fetters(const char* value);
  void set_fetters(const char* value, size_t size);
  std::string* mutable_fetters();
  std::string* release_fetters();
  void set_allocated_fetters(std::string* fetters);
  private:
  const std::string& _internal_fetters() const;
  void _internal_set_fetters(const std::string& value);
  std::string* _internal_mutable_fetters();
  public:

  // required string recommandprice = 34;
  bool has_recommandprice() const;
  private:
  bool _internal_has_recommandprice() const;
  public:
  void clear_recommandprice();
  const std::string& recommandprice() const;
  void set_recommandprice(const std::string& value);
  void set_recommandprice(std::string&& value);
  void set_recommandprice(const char* value);
  void set_recommandprice(const char* value, size_t size);
  std::string* mutable_recommandprice();
  std::string* release_recommandprice();
  void set_allocated_recommandprice(std::string* recommandprice);
  private:
  const std::string& _internal_recommandprice() const;
  void _internal_set_recommandprice(const std::string& value);
  std::string* _internal_mutable_recommandprice();
  public:

  // required string heroname = 37;
  bool has_heroname() const;
  private:
  bool _internal_has_heroname() const;
  public:
  void clear_heroname();
  const std::string& heroname() const;
  void set_heroname(const std::string& value);
  void set_heroname(std::string&& value);
  void set_heroname(const char* value);
  void set_heroname(const char* value, size_t size);
  std::string* mutable_heroname();
  std::string* release_heroname();
  void set_allocated_heroname(std::string* heroname);
  private:
  const std::string& _internal_heroname() const;
  void _internal_set_heroname(const std::string& value);
  std::string* _internal_mutable_heroname();
  public:

  // required string avatar = 41;
  bool has_avatar() const;
  private:
  bool _internal_has_avatar() const;
  public:
  void clear_avatar();
  const std::string& avatar() const;
  void set_avatar(const std::string& value);
  void set_avatar(std::string&& value);
  void set_avatar(const char* value);
  void set_avatar(const char* value, size_t size);
  std::string* mutable_avatar();
  std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // required string exskill = 43;
  bool has_exskill() const;
  private:
  bool _internal_has_exskill() const;
  public:
  void clear_exskill();
  const std::string& exskill() const;
  void set_exskill(const std::string& value);
  void set_exskill(std::string&& value);
  void set_exskill(const char* value);
  void set_exskill(const char* value, size_t size);
  std::string* mutable_exskill();
  std::string* release_exskill();
  void set_allocated_exskill(std::string* exskill);
  private:
  const std::string& _internal_exskill() const;
  void _internal_set_exskill(const std::string& value);
  std::string* _internal_mutable_exskill();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 activeskill_1 = 9;
  bool has_activeskill_1() const;
  private:
  bool _internal_has_activeskill_1() const;
  public:
  void clear_activeskill_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 activeskill_1() const;
  void set_activeskill_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activeskill_1() const;
  void _internal_set_activeskill_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 activeskill_2 = 10;
  bool has_activeskill_2() const;
  private:
  bool _internal_has_activeskill_2() const;
  public:
  void clear_activeskill_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 activeskill_2() const;
  void set_activeskill_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activeskill_2() const;
  void _internal_set_activeskill_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 activeskill_3 = 11;
  bool has_activeskill_3() const;
  private:
  bool _internal_has_activeskill_3() const;
  public:
  void clear_activeskill_3();
  ::PROTOBUF_NAMESPACE_ID::uint32 activeskill_3() const;
  void set_activeskill_3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activeskill_3() const;
  void _internal_set_activeskill_3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 activeskill_4 = 12;
  bool has_activeskill_4() const;
  private:
  bool _internal_has_activeskill_4() const;
  public:
  void clear_activeskill_4();
  ::PROTOBUF_NAMESPACE_ID::uint32 activeskill_4() const;
  void set_activeskill_4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activeskill_4() const;
  void _internal_set_activeskill_4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 normalskill = 13;
  bool has_normalskill() const;
  private:
  bool _internal_has_normalskill() const;
  public:
  void clear_normalskill();
  ::PROTOBUF_NAMESPACE_ID::uint32 normalskill() const;
  void set_normalskill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_normalskill() const;
  void _internal_set_normalskill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 passiveskill = 14;
  bool has_passiveskill() const;
  private:
  bool _internal_has_passiveskill() const;
  public:
  void clear_passiveskill();
  ::PROTOBUF_NAMESPACE_ID::uint32 passiveskill() const;
  void set_passiveskill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_passiveskill() const;
  void _internal_set_passiveskill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 maxhp = 20;
  bool has_maxhp() const;
  private:
  bool _internal_has_maxhp() const;
  public:
  void clear_maxhp();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxhp() const;
  void _internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 pdamage = 21;
  bool has_pdamage() const;
  private:
  bool _internal_has_pdamage() const;
  public:
  void clear_pdamage();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdamage() const;
  void set_pdamage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdamage() const;
  void _internal_set_pdamage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 mdamage = 22;
  bool has_mdamage() const;
  private:
  bool _internal_has_mdamage() const;
  public:
  void clear_mdamage();
  ::PROTOBUF_NAMESPACE_ID::uint32 mdamage() const;
  void set_mdamage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mdamage() const;
  void _internal_set_mdamage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 pdefence = 23;
  bool has_pdefence() const;
  private:
  bool _internal_has_pdefence() const;
  public:
  void clear_pdefence();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdefence() const;
  void set_pdefence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdefence() const;
  void _internal_set_pdefence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 mdefence = 24;
  bool has_mdefence() const;
  private:
  bool _internal_has_mdefence() const;
  public:
  void clear_mdefence();
  ::PROTOBUF_NAMESPACE_ID::uint32 mdefence() const;
  void set_mdefence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mdefence() const;
  void _internal_set_mdefence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 bang = 25;
  bool has_bang() const;
  private:
  bool _internal_has_bang() const;
  public:
  void clear_bang();
  ::PROTOBUF_NAMESPACE_ID::uint32 bang() const;
  void set_bang(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bang() const;
  void _internal_set_bang(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 toughness = 26;
  bool has_toughness() const;
  private:
  bool _internal_has_toughness() const;
  public:
  void clear_toughness();
  ::PROTOBUF_NAMESPACE_ID::uint32 toughness() const;
  void set_toughness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_toughness() const;
  void _internal_set_toughness(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 block = 27;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  ::PROTOBUF_NAMESPACE_ID::uint32 block() const;
  void set_block(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block() const;
  void _internal_set_block(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 penetrate = 28;
  bool has_penetrate() const;
  private:
  bool _internal_has_penetrate() const;
  public:
  void clear_penetrate();
  ::PROTOBUF_NAMESPACE_ID::uint32 penetrate() const;
  void set_penetrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penetrate() const;
  void _internal_set_penetrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 hit = 29;
  bool has_hit() const;
  private:
  bool _internal_has_hit() const;
  public:
  void clear_hit();
  ::PROTOBUF_NAMESPACE_ID::uint32 hit() const;
  void set_hit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hit() const;
  void _internal_set_hit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 miss = 30;
  bool has_miss() const;
  private:
  bool _internal_has_miss() const;
  public:
  void clear_miss();
  ::PROTOBUF_NAMESPACE_ID::uint32 miss() const;
  void set_miss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_miss() const;
  void _internal_set_miss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 getheropathway = 32;
  bool has_getheropathway() const;
  private:
  bool _internal_has_getheropathway() const;
  public:
  void clear_getheropathway();
  ::PROTOBUF_NAMESPACE_ID::uint32 getheropathway() const;
  void set_getheropathway(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_getheropathway() const;
  void _internal_set_getheropathway(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 addmpcfg = 35;
  bool has_addmpcfg() const;
  private:
  bool _internal_has_addmpcfg() const;
  public:
  void clear_addmpcfg();
  ::PROTOBUF_NAMESPACE_ID::uint32 addmpcfg() const;
  void set_addmpcfg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_addmpcfg() const;
  void _internal_set_addmpcfg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 maxstar = 36;
  bool has_maxstar() const;
  private:
  bool _internal_has_maxstar() const;
  public:
  void clear_maxstar();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxstar() const;
  void set_maxstar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxstar() const;
  void _internal_set_maxstar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 isshow = 38;
  bool has_isshow() const;
  private:
  bool _internal_has_isshow() const;
  public:
  void clear_isshow();
  ::PROTOBUF_NAMESPACE_ID::uint32 isshow() const;
  void set_isshow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_isshow() const;
  void _internal_set_isshow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 accurate = 39;
  bool has_accurate() const;
  private:
  bool _internal_has_accurate() const;
  public:
  void clear_accurate();
  ::PROTOBUF_NAMESPACE_ID::uint32 accurate() const;
  void set_accurate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accurate() const;
  void _internal_set_accurate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 deflect = 40;
  bool has_deflect() const;
  private:
  bool _internal_has_deflect() const;
  public:
  void clear_deflect();
  ::PROTOBUF_NAMESPACE_ID::uint32 deflect() const;
  void set_deflect(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deflect() const;
  void _internal_set_deflect(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 newavatar = 42;
  bool has_newavatar() const;
  private:
  bool _internal_has_newavatar() const;
  public:
  void clear_newavatar();
  ::PROTOBUF_NAMESPACE_ID::uint32 newavatar() const;
  void set_newavatar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_newavatar() const;
  void _internal_set_newavatar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.heros.t_hero_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr typeicon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evolution_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primecard_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxcard_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repeatget_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr herochara_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelact_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr getherodesc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fetters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recommandprice_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heroname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exskill_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activeskill_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activeskill_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activeskill_3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activeskill_4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 normalskill_;
  ::PROTOBUF_NAMESPACE_ID::uint32 passiveskill_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdamage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mdamage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdefence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mdefence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bang_;
  ::PROTOBUF_NAMESPACE_ID::uint32 toughness_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_;
  ::PROTOBUF_NAMESPACE_ID::uint32 penetrate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 miss_;
  ::PROTOBUF_NAMESPACE_ID::uint32 getheropathway_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addmpcfg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxstar_;
  ::PROTOBUF_NAMESPACE_ID::uint32 isshow_;
  ::PROTOBUF_NAMESPACE_ID::uint32 accurate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deflect_;
  ::PROTOBUF_NAMESPACE_ID::uint32 newavatar_;
  friend struct ::TableStruct_heros_2eproto;
};
// -------------------------------------------------------------------

class heros :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.heros) */ {
 public:
  heros();
  virtual ~heros();

  heros(const heros& from);
  heros(heros&& from) noexcept
    : heros() {
    *this = ::std::move(from);
  }

  inline heros& operator=(const heros& from) {
    CopyFrom(from);
    return *this;
  }
  inline heros& operator=(heros&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const heros& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const heros* internal_default_instance() {
    return reinterpret_cast<const heros*>(
               &_heros_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(heros& a, heros& b) {
    a.Swap(&b);
  }
  inline void Swap(heros* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline heros* New() const final {
    return CreateMaybeMessage<heros>(nullptr);
  }

  heros* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<heros>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const heros& from);
  void MergeFrom(const heros& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(heros* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.heros";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_heros_2eproto);
    return ::descriptor_table_heros_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef heros_t_hero_config t_hero_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.heros.t_hero_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::heros_t_hero_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::heros_t_hero_config >*
      mutable_datas();
  private:
  const ::pb::heros_t_hero_config& _internal_datas(int index) const;
  ::pb::heros_t_hero_config* _internal_add_datas();
  public:
  const ::pb::heros_t_hero_config& datas(int index) const;
  ::pb::heros_t_hero_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::heros_t_hero_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.heros)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::heros_t_hero_config > datas_;
  friend struct ::TableStruct_heros_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// heros_t_hero_config

// required uint32 tbxid = 1 [default = 0];
inline bool heros_t_hero_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void heros_t_hero_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.tbxid)
  return _internal_tbxid();
}
inline void heros_t_hero_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  tbxid_ = value;
}
inline void heros_t_hero_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool heros_t_hero_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_id() const {
  return _internal_has_id();
}
inline void heros_t_hero_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::id() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.id)
  return _internal_id();
}
inline void heros_t_hero_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  id_ = value;
}
inline void heros_t_hero_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.id)
}

// required uint32 type = 3;
inline bool heros_t_hero_config::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_type() const {
  return _internal_has_type();
}
inline void heros_t_hero_config::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::type() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.type)
  return _internal_type();
}
inline void heros_t_hero_config::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  type_ = value;
}
inline void heros_t_hero_config::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.type)
}

// required string typeicon = 4;
inline bool heros_t_hero_config::_internal_has_typeicon() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_typeicon() const {
  return _internal_has_typeicon();
}
inline void heros_t_hero_config::clear_typeicon() {
  typeicon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& heros_t_hero_config::typeicon() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.typeicon)
  return _internal_typeicon();
}
inline void heros_t_hero_config::set_typeicon(const std::string& value) {
  _internal_set_typeicon(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.typeicon)
}
inline std::string* heros_t_hero_config::mutable_typeicon() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.typeicon)
  return _internal_mutable_typeicon();
}
inline const std::string& heros_t_hero_config::_internal_typeicon() const {
  return typeicon_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_typeicon(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  typeicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_typeicon(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  typeicon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.typeicon)
}
inline void heros_t_hero_config::set_typeicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  typeicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.typeicon)
}
inline void heros_t_hero_config::set_typeicon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  typeicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.typeicon)
}
inline std::string* heros_t_hero_config::_internal_mutable_typeicon() {
  _has_bits_[0] |= 0x00000001u;
  return typeicon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_typeicon() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.typeicon)
  if (!_internal_has_typeicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return typeicon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_typeicon(std::string* typeicon) {
  if (typeicon != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  typeicon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), typeicon);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.typeicon)
}

// required string desc = 5;
inline bool heros_t_hero_config::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_desc() const {
  return _internal_has_desc();
}
inline void heros_t_hero_config::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& heros_t_hero_config::desc() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.desc)
  return _internal_desc();
}
inline void heros_t_hero_config::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.desc)
}
inline std::string* heros_t_hero_config::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.desc)
  return _internal_mutable_desc();
}
inline const std::string& heros_t_hero_config::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.desc)
}
inline void heros_t_hero_config::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.desc)
}
inline void heros_t_hero_config::set_desc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.desc)
}
inline std::string* heros_t_hero_config::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000002u;
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_desc() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return desc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.desc)
}

// required string evolution = 6;
inline bool heros_t_hero_config::_internal_has_evolution() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_evolution() const {
  return _internal_has_evolution();
}
inline void heros_t_hero_config::clear_evolution() {
  evolution_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& heros_t_hero_config::evolution() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.evolution)
  return _internal_evolution();
}
inline void heros_t_hero_config::set_evolution(const std::string& value) {
  _internal_set_evolution(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.evolution)
}
inline std::string* heros_t_hero_config::mutable_evolution() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.evolution)
  return _internal_mutable_evolution();
}
inline const std::string& heros_t_hero_config::_internal_evolution() const {
  return evolution_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_evolution(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  evolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_evolution(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  evolution_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.evolution)
}
inline void heros_t_hero_config::set_evolution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  evolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.evolution)
}
inline void heros_t_hero_config::set_evolution(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  evolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.evolution)
}
inline std::string* heros_t_hero_config::_internal_mutable_evolution() {
  _has_bits_[0] |= 0x00000004u;
  return evolution_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_evolution() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.evolution)
  if (!_internal_has_evolution()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return evolution_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_evolution(std::string* evolution) {
  if (evolution != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  evolution_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), evolution);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.evolution)
}

// required string primecard = 7;
inline bool heros_t_hero_config::_internal_has_primecard() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_primecard() const {
  return _internal_has_primecard();
}
inline void heros_t_hero_config::clear_primecard() {
  primecard_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& heros_t_hero_config::primecard() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.primecard)
  return _internal_primecard();
}
inline void heros_t_hero_config::set_primecard(const std::string& value) {
  _internal_set_primecard(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.primecard)
}
inline std::string* heros_t_hero_config::mutable_primecard() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.primecard)
  return _internal_mutable_primecard();
}
inline const std::string& heros_t_hero_config::_internal_primecard() const {
  return primecard_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_primecard(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  primecard_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_primecard(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  primecard_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.primecard)
}
inline void heros_t_hero_config::set_primecard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  primecard_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.primecard)
}
inline void heros_t_hero_config::set_primecard(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  primecard_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.primecard)
}
inline std::string* heros_t_hero_config::_internal_mutable_primecard() {
  _has_bits_[0] |= 0x00000008u;
  return primecard_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_primecard() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.primecard)
  if (!_internal_has_primecard()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return primecard_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_primecard(std::string* primecard) {
  if (primecard != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  primecard_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primecard);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.primecard)
}

// required string maxcard = 8;
inline bool heros_t_hero_config::_internal_has_maxcard() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_maxcard() const {
  return _internal_has_maxcard();
}
inline void heros_t_hero_config::clear_maxcard() {
  maxcard_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& heros_t_hero_config::maxcard() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.maxcard)
  return _internal_maxcard();
}
inline void heros_t_hero_config::set_maxcard(const std::string& value) {
  _internal_set_maxcard(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.maxcard)
}
inline std::string* heros_t_hero_config::mutable_maxcard() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.maxcard)
  return _internal_mutable_maxcard();
}
inline const std::string& heros_t_hero_config::_internal_maxcard() const {
  return maxcard_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_maxcard(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  maxcard_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_maxcard(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  maxcard_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.maxcard)
}
inline void heros_t_hero_config::set_maxcard(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  maxcard_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.maxcard)
}
inline void heros_t_hero_config::set_maxcard(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  maxcard_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.maxcard)
}
inline std::string* heros_t_hero_config::_internal_mutable_maxcard() {
  _has_bits_[0] |= 0x00000010u;
  return maxcard_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_maxcard() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.maxcard)
  if (!_internal_has_maxcard()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return maxcard_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_maxcard(std::string* maxcard) {
  if (maxcard != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  maxcard_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maxcard);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.maxcard)
}

// required uint32 activeskill_1 = 9;
inline bool heros_t_hero_config::_internal_has_activeskill_1() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_activeskill_1() const {
  return _internal_has_activeskill_1();
}
inline void heros_t_hero_config::clear_activeskill_1() {
  activeskill_1_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_activeskill_1() const {
  return activeskill_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::activeskill_1() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.activeskill_1)
  return _internal_activeskill_1();
}
inline void heros_t_hero_config::_internal_set_activeskill_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  activeskill_1_ = value;
}
inline void heros_t_hero_config::set_activeskill_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activeskill_1(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.activeskill_1)
}

// required uint32 activeskill_2 = 10;
inline bool heros_t_hero_config::_internal_has_activeskill_2() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_activeskill_2() const {
  return _internal_has_activeskill_2();
}
inline void heros_t_hero_config::clear_activeskill_2() {
  activeskill_2_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_activeskill_2() const {
  return activeskill_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::activeskill_2() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.activeskill_2)
  return _internal_activeskill_2();
}
inline void heros_t_hero_config::_internal_set_activeskill_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  activeskill_2_ = value;
}
inline void heros_t_hero_config::set_activeskill_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activeskill_2(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.activeskill_2)
}

// required uint32 activeskill_3 = 11;
inline bool heros_t_hero_config::_internal_has_activeskill_3() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_activeskill_3() const {
  return _internal_has_activeskill_3();
}
inline void heros_t_hero_config::clear_activeskill_3() {
  activeskill_3_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_activeskill_3() const {
  return activeskill_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::activeskill_3() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.activeskill_3)
  return _internal_activeskill_3();
}
inline void heros_t_hero_config::_internal_set_activeskill_3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  activeskill_3_ = value;
}
inline void heros_t_hero_config::set_activeskill_3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activeskill_3(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.activeskill_3)
}

// required uint32 activeskill_4 = 12;
inline bool heros_t_hero_config::_internal_has_activeskill_4() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_activeskill_4() const {
  return _internal_has_activeskill_4();
}
inline void heros_t_hero_config::clear_activeskill_4() {
  activeskill_4_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_activeskill_4() const {
  return activeskill_4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::activeskill_4() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.activeskill_4)
  return _internal_activeskill_4();
}
inline void heros_t_hero_config::_internal_set_activeskill_4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  activeskill_4_ = value;
}
inline void heros_t_hero_config::set_activeskill_4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activeskill_4(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.activeskill_4)
}

// required uint32 normalskill = 13;
inline bool heros_t_hero_config::_internal_has_normalskill() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_normalskill() const {
  return _internal_has_normalskill();
}
inline void heros_t_hero_config::clear_normalskill() {
  normalskill_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_normalskill() const {
  return normalskill_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::normalskill() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.normalskill)
  return _internal_normalskill();
}
inline void heros_t_hero_config::_internal_set_normalskill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  normalskill_ = value;
}
inline void heros_t_hero_config::set_normalskill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_normalskill(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.normalskill)
}

// required uint32 passiveskill = 14;
inline bool heros_t_hero_config::_internal_has_passiveskill() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_passiveskill() const {
  return _internal_has_passiveskill();
}
inline void heros_t_hero_config::clear_passiveskill() {
  passiveskill_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_passiveskill() const {
  return passiveskill_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::passiveskill() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.passiveskill)
  return _internal_passiveskill();
}
inline void heros_t_hero_config::_internal_set_passiveskill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  passiveskill_ = value;
}
inline void heros_t_hero_config::set_passiveskill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_passiveskill(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.passiveskill)
}

// required string skill = 15;
inline bool heros_t_hero_config::_internal_has_skill() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_skill() const {
  return _internal_has_skill();
}
inline void heros_t_hero_config::clear_skill() {
  skill_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& heros_t_hero_config::skill() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.skill)
  return _internal_skill();
}
inline void heros_t_hero_config::set_skill(const std::string& value) {
  _internal_set_skill(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.skill)
}
inline std::string* heros_t_hero_config::mutable_skill() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.skill)
  return _internal_mutable_skill();
}
inline const std::string& heros_t_hero_config::_internal_skill() const {
  return skill_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_skill(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  skill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_skill(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  skill_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.skill)
}
inline void heros_t_hero_config::set_skill(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  skill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.skill)
}
inline void heros_t_hero_config::set_skill(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  skill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.skill)
}
inline std::string* heros_t_hero_config::_internal_mutable_skill() {
  _has_bits_[0] |= 0x00000020u;
  return skill_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_skill() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.skill)
  if (!_internal_has_skill()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return skill_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_skill(std::string* skill) {
  if (skill != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  skill_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.skill)
}

// required string repeatget = 16;
inline bool heros_t_hero_config::_internal_has_repeatget() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_repeatget() const {
  return _internal_has_repeatget();
}
inline void heros_t_hero_config::clear_repeatget() {
  repeatget_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& heros_t_hero_config::repeatget() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.repeatget)
  return _internal_repeatget();
}
inline void heros_t_hero_config::set_repeatget(const std::string& value) {
  _internal_set_repeatget(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.repeatget)
}
inline std::string* heros_t_hero_config::mutable_repeatget() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.repeatget)
  return _internal_mutable_repeatget();
}
inline const std::string& heros_t_hero_config::_internal_repeatget() const {
  return repeatget_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_repeatget(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  repeatget_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_repeatget(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  repeatget_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.repeatget)
}
inline void heros_t_hero_config::set_repeatget(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  repeatget_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.repeatget)
}
inline void heros_t_hero_config::set_repeatget(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  repeatget_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.repeatget)
}
inline std::string* heros_t_hero_config::_internal_mutable_repeatget() {
  _has_bits_[0] |= 0x00000040u;
  return repeatget_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_repeatget() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.repeatget)
  if (!_internal_has_repeatget()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return repeatget_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_repeatget(std::string* repeatget) {
  if (repeatget != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  repeatget_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repeatget);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.repeatget)
}

// required string herochara = 17;
inline bool heros_t_hero_config::_internal_has_herochara() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_herochara() const {
  return _internal_has_herochara();
}
inline void heros_t_hero_config::clear_herochara() {
  herochara_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& heros_t_hero_config::herochara() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.herochara)
  return _internal_herochara();
}
inline void heros_t_hero_config::set_herochara(const std::string& value) {
  _internal_set_herochara(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.herochara)
}
inline std::string* heros_t_hero_config::mutable_herochara() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.herochara)
  return _internal_mutable_herochara();
}
inline const std::string& heros_t_hero_config::_internal_herochara() const {
  return herochara_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_herochara(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  herochara_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_herochara(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  herochara_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.herochara)
}
inline void heros_t_hero_config::set_herochara(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  herochara_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.herochara)
}
inline void heros_t_hero_config::set_herochara(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  herochara_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.herochara)
}
inline std::string* heros_t_hero_config::_internal_mutable_herochara() {
  _has_bits_[0] |= 0x00000080u;
  return herochara_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_herochara() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.herochara)
  if (!_internal_has_herochara()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return herochara_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_herochara(std::string* herochara) {
  if (herochara != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  herochara_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), herochara);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.herochara)
}

// required string trick = 18;
inline bool heros_t_hero_config::_internal_has_trick() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_trick() const {
  return _internal_has_trick();
}
inline void heros_t_hero_config::clear_trick() {
  trick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& heros_t_hero_config::trick() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.trick)
  return _internal_trick();
}
inline void heros_t_hero_config::set_trick(const std::string& value) {
  _internal_set_trick(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.trick)
}
inline std::string* heros_t_hero_config::mutable_trick() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.trick)
  return _internal_mutable_trick();
}
inline const std::string& heros_t_hero_config::_internal_trick() const {
  return trick_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_trick(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  trick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_trick(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  trick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.trick)
}
inline void heros_t_hero_config::set_trick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  trick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.trick)
}
inline void heros_t_hero_config::set_trick(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  trick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.trick)
}
inline std::string* heros_t_hero_config::_internal_mutable_trick() {
  _has_bits_[0] |= 0x00000100u;
  return trick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_trick() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.trick)
  if (!_internal_has_trick()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return trick_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_trick(std::string* trick) {
  if (trick != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  trick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trick);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.trick)
}

// required string modelact = 19;
inline bool heros_t_hero_config::_internal_has_modelact() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_modelact() const {
  return _internal_has_modelact();
}
inline void heros_t_hero_config::clear_modelact() {
  modelact_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& heros_t_hero_config::modelact() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.modelact)
  return _internal_modelact();
}
inline void heros_t_hero_config::set_modelact(const std::string& value) {
  _internal_set_modelact(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.modelact)
}
inline std::string* heros_t_hero_config::mutable_modelact() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.modelact)
  return _internal_mutable_modelact();
}
inline const std::string& heros_t_hero_config::_internal_modelact() const {
  return modelact_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_modelact(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  modelact_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_modelact(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  modelact_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.modelact)
}
inline void heros_t_hero_config::set_modelact(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  modelact_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.modelact)
}
inline void heros_t_hero_config::set_modelact(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  modelact_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.modelact)
}
inline std::string* heros_t_hero_config::_internal_mutable_modelact() {
  _has_bits_[0] |= 0x00000200u;
  return modelact_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_modelact() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.modelact)
  if (!_internal_has_modelact()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return modelact_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_modelact(std::string* modelact) {
  if (modelact != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  modelact_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelact);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.modelact)
}

// required uint32 maxhp = 20;
inline bool heros_t_hero_config::_internal_has_maxhp() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_maxhp() const {
  return _internal_has_maxhp();
}
inline void heros_t_hero_config::clear_maxhp() {
  maxhp_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_maxhp() const {
  return maxhp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.maxhp)
  return _internal_maxhp();
}
inline void heros_t_hero_config::_internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  maxhp_ = value;
}
inline void heros_t_hero_config::set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.maxhp)
}

// required uint32 pdamage = 21;
inline bool heros_t_hero_config::_internal_has_pdamage() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_pdamage() const {
  return _internal_has_pdamage();
}
inline void heros_t_hero_config::clear_pdamage() {
  pdamage_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_pdamage() const {
  return pdamage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::pdamage() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.pdamage)
  return _internal_pdamage();
}
inline void heros_t_hero_config::_internal_set_pdamage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  pdamage_ = value;
}
inline void heros_t_hero_config::set_pdamage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdamage(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.pdamage)
}

// required uint32 mdamage = 22;
inline bool heros_t_hero_config::_internal_has_mdamage() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_mdamage() const {
  return _internal_has_mdamage();
}
inline void heros_t_hero_config::clear_mdamage() {
  mdamage_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_mdamage() const {
  return mdamage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::mdamage() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.mdamage)
  return _internal_mdamage();
}
inline void heros_t_hero_config::_internal_set_mdamage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  mdamage_ = value;
}
inline void heros_t_hero_config::set_mdamage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mdamage(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.mdamage)
}

// required uint32 pdefence = 23;
inline bool heros_t_hero_config::_internal_has_pdefence() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_pdefence() const {
  return _internal_has_pdefence();
}
inline void heros_t_hero_config::clear_pdefence() {
  pdefence_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_pdefence() const {
  return pdefence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::pdefence() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.pdefence)
  return _internal_pdefence();
}
inline void heros_t_hero_config::_internal_set_pdefence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  pdefence_ = value;
}
inline void heros_t_hero_config::set_pdefence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdefence(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.pdefence)
}

// required uint32 mdefence = 24;
inline bool heros_t_hero_config::_internal_has_mdefence() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_mdefence() const {
  return _internal_has_mdefence();
}
inline void heros_t_hero_config::clear_mdefence() {
  mdefence_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_mdefence() const {
  return mdefence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::mdefence() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.mdefence)
  return _internal_mdefence();
}
inline void heros_t_hero_config::_internal_set_mdefence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  mdefence_ = value;
}
inline void heros_t_hero_config::set_mdefence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mdefence(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.mdefence)
}

// required uint32 bang = 25;
inline bool heros_t_hero_config::_internal_has_bang() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_bang() const {
  return _internal_has_bang();
}
inline void heros_t_hero_config::clear_bang() {
  bang_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_bang() const {
  return bang_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::bang() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.bang)
  return _internal_bang();
}
inline void heros_t_hero_config::_internal_set_bang(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  bang_ = value;
}
inline void heros_t_hero_config::set_bang(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bang(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.bang)
}

// required uint32 toughness = 26;
inline bool heros_t_hero_config::_internal_has_toughness() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_toughness() const {
  return _internal_has_toughness();
}
inline void heros_t_hero_config::clear_toughness() {
  toughness_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_toughness() const {
  return toughness_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::toughness() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.toughness)
  return _internal_toughness();
}
inline void heros_t_hero_config::_internal_set_toughness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  toughness_ = value;
}
inline void heros_t_hero_config::set_toughness(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_toughness(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.toughness)
}

// required uint32 block = 27;
inline bool heros_t_hero_config::_internal_has_block() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_block() const {
  return _internal_has_block();
}
inline void heros_t_hero_config::clear_block() {
  block_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_block() const {
  return block_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::block() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.block)
  return _internal_block();
}
inline void heros_t_hero_config::_internal_set_block(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  block_ = value;
}
inline void heros_t_hero_config::set_block(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.block)
}

// required uint32 penetrate = 28;
inline bool heros_t_hero_config::_internal_has_penetrate() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_penetrate() const {
  return _internal_has_penetrate();
}
inline void heros_t_hero_config::clear_penetrate() {
  penetrate_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_penetrate() const {
  return penetrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::penetrate() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.penetrate)
  return _internal_penetrate();
}
inline void heros_t_hero_config::_internal_set_penetrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  penetrate_ = value;
}
inline void heros_t_hero_config::set_penetrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_penetrate(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.penetrate)
}

// required uint32 hit = 29;
inline bool heros_t_hero_config::_internal_has_hit() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_hit() const {
  return _internal_has_hit();
}
inline void heros_t_hero_config::clear_hit() {
  hit_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_hit() const {
  return hit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::hit() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.hit)
  return _internal_hit();
}
inline void heros_t_hero_config::_internal_set_hit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  hit_ = value;
}
inline void heros_t_hero_config::set_hit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hit(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.hit)
}

// required uint32 miss = 30;
inline bool heros_t_hero_config::_internal_has_miss() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_miss() const {
  return _internal_has_miss();
}
inline void heros_t_hero_config::clear_miss() {
  miss_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_miss() const {
  return miss_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::miss() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.miss)
  return _internal_miss();
}
inline void heros_t_hero_config::_internal_set_miss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  miss_ = value;
}
inline void heros_t_hero_config::set_miss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_miss(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.miss)
}

// required string getherodesc = 31;
inline bool heros_t_hero_config::_internal_has_getherodesc() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_getherodesc() const {
  return _internal_has_getherodesc();
}
inline void heros_t_hero_config::clear_getherodesc() {
  getherodesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& heros_t_hero_config::getherodesc() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.getherodesc)
  return _internal_getherodesc();
}
inline void heros_t_hero_config::set_getherodesc(const std::string& value) {
  _internal_set_getherodesc(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.getherodesc)
}
inline std::string* heros_t_hero_config::mutable_getherodesc() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.getherodesc)
  return _internal_mutable_getherodesc();
}
inline const std::string& heros_t_hero_config::_internal_getherodesc() const {
  return getherodesc_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_getherodesc(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  getherodesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_getherodesc(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  getherodesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.getherodesc)
}
inline void heros_t_hero_config::set_getherodesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  getherodesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.getherodesc)
}
inline void heros_t_hero_config::set_getherodesc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  getherodesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.getherodesc)
}
inline std::string* heros_t_hero_config::_internal_mutable_getherodesc() {
  _has_bits_[0] |= 0x00000400u;
  return getherodesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_getherodesc() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.getherodesc)
  if (!_internal_has_getherodesc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return getherodesc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_getherodesc(std::string* getherodesc) {
  if (getherodesc != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  getherodesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), getherodesc);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.getherodesc)
}

// required uint32 getheropathway = 32;
inline bool heros_t_hero_config::_internal_has_getheropathway() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_getheropathway() const {
  return _internal_has_getheropathway();
}
inline void heros_t_hero_config::clear_getheropathway() {
  getheropathway_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_getheropathway() const {
  return getheropathway_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::getheropathway() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.getheropathway)
  return _internal_getheropathway();
}
inline void heros_t_hero_config::_internal_set_getheropathway(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  getheropathway_ = value;
}
inline void heros_t_hero_config::set_getheropathway(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_getheropathway(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.getheropathway)
}

// required string fetters = 33;
inline bool heros_t_hero_config::_internal_has_fetters() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_fetters() const {
  return _internal_has_fetters();
}
inline void heros_t_hero_config::clear_fetters() {
  fetters_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& heros_t_hero_config::fetters() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.fetters)
  return _internal_fetters();
}
inline void heros_t_hero_config::set_fetters(const std::string& value) {
  _internal_set_fetters(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.fetters)
}
inline std::string* heros_t_hero_config::mutable_fetters() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.fetters)
  return _internal_mutable_fetters();
}
inline const std::string& heros_t_hero_config::_internal_fetters() const {
  return fetters_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_fetters(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  fetters_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_fetters(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  fetters_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.fetters)
}
inline void heros_t_hero_config::set_fetters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  fetters_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.fetters)
}
inline void heros_t_hero_config::set_fetters(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  fetters_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.fetters)
}
inline std::string* heros_t_hero_config::_internal_mutable_fetters() {
  _has_bits_[0] |= 0x00000800u;
  return fetters_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_fetters() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.fetters)
  if (!_internal_has_fetters()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return fetters_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_fetters(std::string* fetters) {
  if (fetters != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  fetters_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fetters);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.fetters)
}

// required string recommandprice = 34;
inline bool heros_t_hero_config::_internal_has_recommandprice() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_recommandprice() const {
  return _internal_has_recommandprice();
}
inline void heros_t_hero_config::clear_recommandprice() {
  recommandprice_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& heros_t_hero_config::recommandprice() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.recommandprice)
  return _internal_recommandprice();
}
inline void heros_t_hero_config::set_recommandprice(const std::string& value) {
  _internal_set_recommandprice(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.recommandprice)
}
inline std::string* heros_t_hero_config::mutable_recommandprice() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.recommandprice)
  return _internal_mutable_recommandprice();
}
inline const std::string& heros_t_hero_config::_internal_recommandprice() const {
  return recommandprice_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_recommandprice(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  recommandprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_recommandprice(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  recommandprice_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.recommandprice)
}
inline void heros_t_hero_config::set_recommandprice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  recommandprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.recommandprice)
}
inline void heros_t_hero_config::set_recommandprice(const char* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  recommandprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.recommandprice)
}
inline std::string* heros_t_hero_config::_internal_mutable_recommandprice() {
  _has_bits_[0] |= 0x00001000u;
  return recommandprice_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_recommandprice() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.recommandprice)
  if (!_internal_has_recommandprice()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return recommandprice_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_recommandprice(std::string* recommandprice) {
  if (recommandprice != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  recommandprice_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recommandprice);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.recommandprice)
}

// required uint32 addmpcfg = 35;
inline bool heros_t_hero_config::_internal_has_addmpcfg() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_addmpcfg() const {
  return _internal_has_addmpcfg();
}
inline void heros_t_hero_config::clear_addmpcfg() {
  addmpcfg_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_addmpcfg() const {
  return addmpcfg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::addmpcfg() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.addmpcfg)
  return _internal_addmpcfg();
}
inline void heros_t_hero_config::_internal_set_addmpcfg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  addmpcfg_ = value;
}
inline void heros_t_hero_config::set_addmpcfg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_addmpcfg(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.addmpcfg)
}

// required uint32 maxstar = 36;
inline bool heros_t_hero_config::_internal_has_maxstar() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_maxstar() const {
  return _internal_has_maxstar();
}
inline void heros_t_hero_config::clear_maxstar() {
  maxstar_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_maxstar() const {
  return maxstar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::maxstar() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.maxstar)
  return _internal_maxstar();
}
inline void heros_t_hero_config::_internal_set_maxstar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  maxstar_ = value;
}
inline void heros_t_hero_config::set_maxstar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxstar(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.maxstar)
}

// required string heroname = 37;
inline bool heros_t_hero_config::_internal_has_heroname() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_heroname() const {
  return _internal_has_heroname();
}
inline void heros_t_hero_config::clear_heroname() {
  heroname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& heros_t_hero_config::heroname() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.heroname)
  return _internal_heroname();
}
inline void heros_t_hero_config::set_heroname(const std::string& value) {
  _internal_set_heroname(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.heroname)
}
inline std::string* heros_t_hero_config::mutable_heroname() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.heroname)
  return _internal_mutable_heroname();
}
inline const std::string& heros_t_hero_config::_internal_heroname() const {
  return heroname_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_heroname(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  heroname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_heroname(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  heroname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.heroname)
}
inline void heros_t_hero_config::set_heroname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  heroname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.heroname)
}
inline void heros_t_hero_config::set_heroname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00002000u;
  heroname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.heroname)
}
inline std::string* heros_t_hero_config::_internal_mutable_heroname() {
  _has_bits_[0] |= 0x00002000u;
  return heroname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_heroname() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.heroname)
  if (!_internal_has_heroname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return heroname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_heroname(std::string* heroname) {
  if (heroname != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  heroname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), heroname);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.heroname)
}

// required uint32 isshow = 38;
inline bool heros_t_hero_config::_internal_has_isshow() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_isshow() const {
  return _internal_has_isshow();
}
inline void heros_t_hero_config::clear_isshow() {
  isshow_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_isshow() const {
  return isshow_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::isshow() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.isshow)
  return _internal_isshow();
}
inline void heros_t_hero_config::_internal_set_isshow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  isshow_ = value;
}
inline void heros_t_hero_config::set_isshow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_isshow(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.isshow)
}

// required uint32 accurate = 39;
inline bool heros_t_hero_config::_internal_has_accurate() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_accurate() const {
  return _internal_has_accurate();
}
inline void heros_t_hero_config::clear_accurate() {
  accurate_ = 0u;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_accurate() const {
  return accurate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::accurate() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.accurate)
  return _internal_accurate();
}
inline void heros_t_hero_config::_internal_set_accurate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000100u;
  accurate_ = value;
}
inline void heros_t_hero_config::set_accurate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_accurate(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.accurate)
}

// required uint32 deflect = 40;
inline bool heros_t_hero_config::_internal_has_deflect() const {
  bool value = (_has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_deflect() const {
  return _internal_has_deflect();
}
inline void heros_t_hero_config::clear_deflect() {
  deflect_ = 0u;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_deflect() const {
  return deflect_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::deflect() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.deflect)
  return _internal_deflect();
}
inline void heros_t_hero_config::_internal_set_deflect(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000200u;
  deflect_ = value;
}
inline void heros_t_hero_config::set_deflect(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deflect(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.deflect)
}

// required string avatar = 41;
inline bool heros_t_hero_config::_internal_has_avatar() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_avatar() const {
  return _internal_has_avatar();
}
inline void heros_t_hero_config::clear_avatar() {
  avatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& heros_t_hero_config::avatar() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.avatar)
  return _internal_avatar();
}
inline void heros_t_hero_config::set_avatar(const std::string& value) {
  _internal_set_avatar(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.avatar)
}
inline std::string* heros_t_hero_config::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& heros_t_hero_config::_internal_avatar() const {
  return avatar_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_avatar(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_avatar(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  avatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.avatar)
}
inline void heros_t_hero_config::set_avatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.avatar)
}
inline void heros_t_hero_config::set_avatar(const char* value, size_t size) {
  _has_bits_[0] |= 0x00004000u;
  avatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.avatar)
}
inline std::string* heros_t_hero_config::_internal_mutable_avatar() {
  _has_bits_[0] |= 0x00004000u;
  return avatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_avatar() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.avatar)
  if (!_internal_has_avatar()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return avatar_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  avatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.avatar)
}

// required uint32 newavatar = 42;
inline bool heros_t_hero_config::_internal_has_newavatar() const {
  bool value = (_has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_newavatar() const {
  return _internal_has_newavatar();
}
inline void heros_t_hero_config::clear_newavatar() {
  newavatar_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::_internal_newavatar() const {
  return newavatar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 heros_t_hero_config::newavatar() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.newavatar)
  return _internal_newavatar();
}
inline void heros_t_hero_config::_internal_set_newavatar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  newavatar_ = value;
}
inline void heros_t_hero_config::set_newavatar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_newavatar(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.newavatar)
}

// required string exskill = 43;
inline bool heros_t_hero_config::_internal_has_exskill() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool heros_t_hero_config::has_exskill() const {
  return _internal_has_exskill();
}
inline void heros_t_hero_config::clear_exskill() {
  exskill_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& heros_t_hero_config::exskill() const {
  // @@protoc_insertion_point(field_get:pb.heros.t_hero_config.exskill)
  return _internal_exskill();
}
inline void heros_t_hero_config::set_exskill(const std::string& value) {
  _internal_set_exskill(value);
  // @@protoc_insertion_point(field_set:pb.heros.t_hero_config.exskill)
}
inline std::string* heros_t_hero_config::mutable_exskill() {
  // @@protoc_insertion_point(field_mutable:pb.heros.t_hero_config.exskill)
  return _internal_mutable_exskill();
}
inline const std::string& heros_t_hero_config::_internal_exskill() const {
  return exskill_.GetNoArena();
}
inline void heros_t_hero_config::_internal_set_exskill(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  exskill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void heros_t_hero_config::set_exskill(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  exskill_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.heros.t_hero_config.exskill)
}
inline void heros_t_hero_config::set_exskill(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  exskill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.heros.t_hero_config.exskill)
}
inline void heros_t_hero_config::set_exskill(const char* value, size_t size) {
  _has_bits_[0] |= 0x00008000u;
  exskill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.heros.t_hero_config.exskill)
}
inline std::string* heros_t_hero_config::_internal_mutable_exskill() {
  _has_bits_[0] |= 0x00008000u;
  return exskill_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* heros_t_hero_config::release_exskill() {
  // @@protoc_insertion_point(field_release:pb.heros.t_hero_config.exskill)
  if (!_internal_has_exskill()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return exskill_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void heros_t_hero_config::set_allocated_exskill(std::string* exskill) {
  if (exskill != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  exskill_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exskill);
  // @@protoc_insertion_point(field_set_allocated:pb.heros.t_hero_config.exskill)
}

// -------------------------------------------------------------------

// heros

// repeated .pb.heros.t_hero_config datas = 1;
inline int heros::_internal_datas_size() const {
  return datas_.size();
}
inline int heros::datas_size() const {
  return _internal_datas_size();
}
inline void heros::clear_datas() {
  datas_.Clear();
}
inline ::pb::heros_t_hero_config* heros::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.heros.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::heros_t_hero_config >*
heros::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.heros.datas)
  return &datas_;
}
inline const ::pb::heros_t_hero_config& heros::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::heros_t_hero_config& heros::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.heros.datas)
  return _internal_datas(index);
}
inline ::pb::heros_t_hero_config* heros::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::heros_t_hero_config* heros::add_datas() {
  // @@protoc_insertion_point(field_add:pb.heros.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::heros_t_hero_config >&
heros::datas() const {
  // @@protoc_insertion_point(field_list:pb.heros.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_heros_2eproto
