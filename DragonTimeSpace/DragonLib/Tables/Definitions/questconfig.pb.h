// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: questconfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_questconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_questconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_questconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_questconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_questconfig_2eproto;
namespace pb {
class questconfig;
class questconfigDefaultTypeInternal;
extern questconfigDefaultTypeInternal _questconfig_default_instance_;
class questconfig_t_quest_config;
class questconfig_t_quest_configDefaultTypeInternal;
extern questconfig_t_quest_configDefaultTypeInternal _questconfig_t_quest_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::questconfig* Arena::CreateMaybeMessage<::pb::questconfig>(Arena*);
template<> ::pb::questconfig_t_quest_config* Arena::CreateMaybeMessage<::pb::questconfig_t_quest_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class questconfig_t_quest_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.questconfig.t_quest_config) */ {
 public:
  questconfig_t_quest_config();
  virtual ~questconfig_t_quest_config();

  questconfig_t_quest_config(const questconfig_t_quest_config& from);
  questconfig_t_quest_config(questconfig_t_quest_config&& from) noexcept
    : questconfig_t_quest_config() {
    *this = ::std::move(from);
  }

  inline questconfig_t_quest_config& operator=(const questconfig_t_quest_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline questconfig_t_quest_config& operator=(questconfig_t_quest_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const questconfig_t_quest_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const questconfig_t_quest_config* internal_default_instance() {
    return reinterpret_cast<const questconfig_t_quest_config*>(
               &_questconfig_t_quest_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(questconfig_t_quest_config& a, questconfig_t_quest_config& b) {
    a.Swap(&b);
  }
  inline void Swap(questconfig_t_quest_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline questconfig_t_quest_config* New() const final {
    return CreateMaybeMessage<questconfig_t_quest_config>(nullptr);
  }

  questconfig_t_quest_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<questconfig_t_quest_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const questconfig_t_quest_config& from);
  void MergeFrom(const questconfig_t_quest_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(questconfig_t_quest_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.questconfig.t_quest_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_questconfig_2eproto);
    return ::descriptor_table_questconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kDescFieldNumber = 6,
    kLevellimitFieldNumber = 9,
    kGoalFieldNumber = 10,
    kDegreenameFieldNumber = 11,
    kAwardFieldNumber = 12,
    kObjectsFieldNumber = 14,
    kPathwaydoingFieldNumber = 17,
    kUseobjectFieldNumber = 18,
    kPathwaydoneFieldNumber = 20,
    kPathwaypreFieldNumber = 21,
    kPredescFieldNumber = 22,
    kDegreeFieldNumber = 29,
    kCommitdescFieldNumber = 30,
    kVisitNpcIdFieldNumber = 31,
    kPrequestlimitFieldNumber = 32,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kAcceptNpcIdFieldNumber = 3,
    kCommitNpcIdFieldNumber = 4,
    kGroupFieldNumber = 7,
    kTypeFieldNumber = 8,
    kCanabandonFieldNumber = 13,
    kCanCycleFieldNumber = 15,
    kPathfindstateFieldNumber = 16,
    kGatheridFieldNumber = 19,
    kAfterquestnpcidFieldNumber = 23,
    kLevelawardFieldNumber = 24,
    kObjawardFieldNumber = 25,
    kShowCopyIdFieldNumber = 26,
    kShowCommonMapFieldNumber = 27,
    kLastsecsFieldNumber = 28,
    kCanShareFieldNumber = 33,
    kAutoShareFieldNumber = 34,
    kTimelimitFieldNumber = 35,
    kIfRingFieldNumber = 36,
    kStateShowFieldNumber = 37,
  };
  // required string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string desc = 6;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // required string levellimit = 9;
  bool has_levellimit() const;
  private:
  bool _internal_has_levellimit() const;
  public:
  void clear_levellimit();
  const std::string& levellimit() const;
  void set_levellimit(const std::string& value);
  void set_levellimit(std::string&& value);
  void set_levellimit(const char* value);
  void set_levellimit(const char* value, size_t size);
  std::string* mutable_levellimit();
  std::string* release_levellimit();
  void set_allocated_levellimit(std::string* levellimit);
  private:
  const std::string& _internal_levellimit() const;
  void _internal_set_levellimit(const std::string& value);
  std::string* _internal_mutable_levellimit();
  public:

  // required string goal = 10;
  bool has_goal() const;
  private:
  bool _internal_has_goal() const;
  public:
  void clear_goal();
  const std::string& goal() const;
  void set_goal(const std::string& value);
  void set_goal(std::string&& value);
  void set_goal(const char* value);
  void set_goal(const char* value, size_t size);
  std::string* mutable_goal();
  std::string* release_goal();
  void set_allocated_goal(std::string* goal);
  private:
  const std::string& _internal_goal() const;
  void _internal_set_goal(const std::string& value);
  std::string* _internal_mutable_goal();
  public:

  // required string degreename = 11;
  bool has_degreename() const;
  private:
  bool _internal_has_degreename() const;
  public:
  void clear_degreename();
  const std::string& degreename() const;
  void set_degreename(const std::string& value);
  void set_degreename(std::string&& value);
  void set_degreename(const char* value);
  void set_degreename(const char* value, size_t size);
  std::string* mutable_degreename();
  std::string* release_degreename();
  void set_allocated_degreename(std::string* degreename);
  private:
  const std::string& _internal_degreename() const;
  void _internal_set_degreename(const std::string& value);
  std::string* _internal_mutable_degreename();
  public:

  // required string award = 12;
  bool has_award() const;
  private:
  bool _internal_has_award() const;
  public:
  void clear_award();
  const std::string& award() const;
  void set_award(const std::string& value);
  void set_award(std::string&& value);
  void set_award(const char* value);
  void set_award(const char* value, size_t size);
  std::string* mutable_award();
  std::string* release_award();
  void set_allocated_award(std::string* award);
  private:
  const std::string& _internal_award() const;
  void _internal_set_award(const std::string& value);
  std::string* _internal_mutable_award();
  public:

  // required string objects = 14;
  bool has_objects() const;
  private:
  bool _internal_has_objects() const;
  public:
  void clear_objects();
  const std::string& objects() const;
  void set_objects(const std::string& value);
  void set_objects(std::string&& value);
  void set_objects(const char* value);
  void set_objects(const char* value, size_t size);
  std::string* mutable_objects();
  std::string* release_objects();
  void set_allocated_objects(std::string* objects);
  private:
  const std::string& _internal_objects() const;
  void _internal_set_objects(const std::string& value);
  std::string* _internal_mutable_objects();
  public:

  // required string pathwaydoing = 17;
  bool has_pathwaydoing() const;
  private:
  bool _internal_has_pathwaydoing() const;
  public:
  void clear_pathwaydoing();
  const std::string& pathwaydoing() const;
  void set_pathwaydoing(const std::string& value);
  void set_pathwaydoing(std::string&& value);
  void set_pathwaydoing(const char* value);
  void set_pathwaydoing(const char* value, size_t size);
  std::string* mutable_pathwaydoing();
  std::string* release_pathwaydoing();
  void set_allocated_pathwaydoing(std::string* pathwaydoing);
  private:
  const std::string& _internal_pathwaydoing() const;
  void _internal_set_pathwaydoing(const std::string& value);
  std::string* _internal_mutable_pathwaydoing();
  public:

  // required string useobject = 18;
  bool has_useobject() const;
  private:
  bool _internal_has_useobject() const;
  public:
  void clear_useobject();
  const std::string& useobject() const;
  void set_useobject(const std::string& value);
  void set_useobject(std::string&& value);
  void set_useobject(const char* value);
  void set_useobject(const char* value, size_t size);
  std::string* mutable_useobject();
  std::string* release_useobject();
  void set_allocated_useobject(std::string* useobject);
  private:
  const std::string& _internal_useobject() const;
  void _internal_set_useobject(const std::string& value);
  std::string* _internal_mutable_useobject();
  public:

  // required string pathwaydone = 20;
  bool has_pathwaydone() const;
  private:
  bool _internal_has_pathwaydone() const;
  public:
  void clear_pathwaydone();
  const std::string& pathwaydone() const;
  void set_pathwaydone(const std::string& value);
  void set_pathwaydone(std::string&& value);
  void set_pathwaydone(const char* value);
  void set_pathwaydone(const char* value, size_t size);
  std::string* mutable_pathwaydone();
  std::string* release_pathwaydone();
  void set_allocated_pathwaydone(std::string* pathwaydone);
  private:
  const std::string& _internal_pathwaydone() const;
  void _internal_set_pathwaydone(const std::string& value);
  std::string* _internal_mutable_pathwaydone();
  public:

  // required string pathwaypre = 21;
  bool has_pathwaypre() const;
  private:
  bool _internal_has_pathwaypre() const;
  public:
  void clear_pathwaypre();
  const std::string& pathwaypre() const;
  void set_pathwaypre(const std::string& value);
  void set_pathwaypre(std::string&& value);
  void set_pathwaypre(const char* value);
  void set_pathwaypre(const char* value, size_t size);
  std::string* mutable_pathwaypre();
  std::string* release_pathwaypre();
  void set_allocated_pathwaypre(std::string* pathwaypre);
  private:
  const std::string& _internal_pathwaypre() const;
  void _internal_set_pathwaypre(const std::string& value);
  std::string* _internal_mutable_pathwaypre();
  public:

  // required string predesc = 22;
  bool has_predesc() const;
  private:
  bool _internal_has_predesc() const;
  public:
  void clear_predesc();
  const std::string& predesc() const;
  void set_predesc(const std::string& value);
  void set_predesc(std::string&& value);
  void set_predesc(const char* value);
  void set_predesc(const char* value, size_t size);
  std::string* mutable_predesc();
  std::string* release_predesc();
  void set_allocated_predesc(std::string* predesc);
  private:
  const std::string& _internal_predesc() const;
  void _internal_set_predesc(const std::string& value);
  std::string* _internal_mutable_predesc();
  public:

  // required string degree = 29;
  bool has_degree() const;
  private:
  bool _internal_has_degree() const;
  public:
  void clear_degree();
  const std::string& degree() const;
  void set_degree(const std::string& value);
  void set_degree(std::string&& value);
  void set_degree(const char* value);
  void set_degree(const char* value, size_t size);
  std::string* mutable_degree();
  std::string* release_degree();
  void set_allocated_degree(std::string* degree);
  private:
  const std::string& _internal_degree() const;
  void _internal_set_degree(const std::string& value);
  std::string* _internal_mutable_degree();
  public:

  // required string commitdesc = 30;
  bool has_commitdesc() const;
  private:
  bool _internal_has_commitdesc() const;
  public:
  void clear_commitdesc();
  const std::string& commitdesc() const;
  void set_commitdesc(const std::string& value);
  void set_commitdesc(std::string&& value);
  void set_commitdesc(const char* value);
  void set_commitdesc(const char* value, size_t size);
  std::string* mutable_commitdesc();
  std::string* release_commitdesc();
  void set_allocated_commitdesc(std::string* commitdesc);
  private:
  const std::string& _internal_commitdesc() const;
  void _internal_set_commitdesc(const std::string& value);
  std::string* _internal_mutable_commitdesc();
  public:

  // required string VisitNpcId = 31;
  bool has_visitnpcid() const;
  private:
  bool _internal_has_visitnpcid() const;
  public:
  void clear_visitnpcid();
  const std::string& visitnpcid() const;
  void set_visitnpcid(const std::string& value);
  void set_visitnpcid(std::string&& value);
  void set_visitnpcid(const char* value);
  void set_visitnpcid(const char* value, size_t size);
  std::string* mutable_visitnpcid();
  std::string* release_visitnpcid();
  void set_allocated_visitnpcid(std::string* visitnpcid);
  private:
  const std::string& _internal_visitnpcid() const;
  void _internal_set_visitnpcid(const std::string& value);
  std::string* _internal_mutable_visitnpcid();
  public:

  // required string prequestlimit = 32;
  bool has_prequestlimit() const;
  private:
  bool _internal_has_prequestlimit() const;
  public:
  void clear_prequestlimit();
  const std::string& prequestlimit() const;
  void set_prequestlimit(const std::string& value);
  void set_prequestlimit(std::string&& value);
  void set_prequestlimit(const char* value);
  void set_prequestlimit(const char* value, size_t size);
  std::string* mutable_prequestlimit();
  std::string* release_prequestlimit();
  void set_allocated_prequestlimit(std::string* prequestlimit);
  private:
  const std::string& _internal_prequestlimit() const;
  void _internal_set_prequestlimit(const std::string& value);
  std::string* _internal_mutable_prequestlimit();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 AcceptNpcId = 3;
  bool has_acceptnpcid() const;
  private:
  bool _internal_has_acceptnpcid() const;
  public:
  void clear_acceptnpcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 acceptnpcid() const;
  void set_acceptnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_acceptnpcid() const;
  void _internal_set_acceptnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 CommitNpcId = 4;
  bool has_commitnpcid() const;
  private:
  bool _internal_has_commitnpcid() const;
  public:
  void clear_commitnpcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 commitnpcid() const;
  void set_commitnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_commitnpcid() const;
  void _internal_set_commitnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 group = 7;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::uint32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 8;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool canabandon = 13;
  bool has_canabandon() const;
  private:
  bool _internal_has_canabandon() const;
  public:
  void clear_canabandon();
  bool canabandon() const;
  void set_canabandon(bool value);
  private:
  bool _internal_canabandon() const;
  void _internal_set_canabandon(bool value);
  public:

  // required bool can_cycle = 15;
  bool has_can_cycle() const;
  private:
  bool _internal_has_can_cycle() const;
  public:
  void clear_can_cycle();
  bool can_cycle() const;
  void set_can_cycle(bool value);
  private:
  bool _internal_can_cycle() const;
  void _internal_set_can_cycle(bool value);
  public:

  // required uint32 pathfindstate = 16;
  bool has_pathfindstate() const;
  private:
  bool _internal_has_pathfindstate() const;
  public:
  void clear_pathfindstate();
  ::PROTOBUF_NAMESPACE_ID::uint32 pathfindstate() const;
  void set_pathfindstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pathfindstate() const;
  void _internal_set_pathfindstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 gatherid = 19;
  bool has_gatherid() const;
  private:
  bool _internal_has_gatherid() const;
  public:
  void clear_gatherid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gatherid() const;
  void set_gatherid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gatherid() const;
  void _internal_set_gatherid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 afterquestnpcid = 23;
  bool has_afterquestnpcid() const;
  private:
  bool _internal_has_afterquestnpcid() const;
  public:
  void clear_afterquestnpcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 afterquestnpcid() const;
  void set_afterquestnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_afterquestnpcid() const;
  void _internal_set_afterquestnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 levelaward = 24;
  bool has_levelaward() const;
  private:
  bool _internal_has_levelaward() const;
  public:
  void clear_levelaward();
  ::PROTOBUF_NAMESPACE_ID::uint32 levelaward() const;
  void set_levelaward(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_levelaward() const;
  void _internal_set_levelaward(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 objaward = 25;
  bool has_objaward() const;
  private:
  bool _internal_has_objaward() const;
  public:
  void clear_objaward();
  ::PROTOBUF_NAMESPACE_ID::uint32 objaward() const;
  void set_objaward(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objaward() const;
  void _internal_set_objaward(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 show_copy_id = 26;
  bool has_show_copy_id() const;
  private:
  bool _internal_has_show_copy_id() const;
  public:
  void clear_show_copy_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 show_copy_id() const;
  void set_show_copy_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_show_copy_id() const;
  void _internal_set_show_copy_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 show_common_map = 27;
  bool has_show_common_map() const;
  private:
  bool _internal_has_show_common_map() const;
  public:
  void clear_show_common_map();
  ::PROTOBUF_NAMESPACE_ID::uint32 show_common_map() const;
  void set_show_common_map(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_show_common_map() const;
  void _internal_set_show_common_map(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 lastsecs = 28;
  bool has_lastsecs() const;
  private:
  bool _internal_has_lastsecs() const;
  public:
  void clear_lastsecs();
  ::PROTOBUF_NAMESPACE_ID::uint32 lastsecs() const;
  void set_lastsecs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lastsecs() const;
  void _internal_set_lastsecs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 can_share = 33;
  bool has_can_share() const;
  private:
  bool _internal_has_can_share() const;
  public:
  void clear_can_share();
  ::PROTOBUF_NAMESPACE_ID::uint32 can_share() const;
  void set_can_share(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_can_share() const;
  void _internal_set_can_share(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 auto_share = 34;
  bool has_auto_share() const;
  private:
  bool _internal_has_auto_share() const;
  public:
  void clear_auto_share();
  ::PROTOBUF_NAMESPACE_ID::uint32 auto_share() const;
  void set_auto_share(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_auto_share() const;
  void _internal_set_auto_share(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 timelimit = 35;
  bool has_timelimit() const;
  private:
  bool _internal_has_timelimit() const;
  public:
  void clear_timelimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 timelimit() const;
  void set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timelimit() const;
  void _internal_set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 if_ring = 36;
  bool has_if_ring() const;
  private:
  bool _internal_has_if_ring() const;
  public:
  void clear_if_ring();
  ::PROTOBUF_NAMESPACE_ID::uint32 if_ring() const;
  void set_if_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_if_ring() const;
  void _internal_set_if_ring(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 state_show = 37;
  bool has_state_show() const;
  private:
  bool _internal_has_state_show() const;
  public:
  void clear_state_show();
  ::PROTOBUF_NAMESPACE_ID::uint32 state_show() const;
  void set_state_show(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_state_show() const;
  void _internal_set_state_show(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.questconfig.t_quest_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr levellimit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr degreename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr award_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathwaydoing_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useobject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathwaydone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathwaypre_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr predesc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr degree_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commitdesc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visitnpcid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prequestlimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 acceptnpcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 commitnpcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 group_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  bool canabandon_;
  bool can_cycle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pathfindstate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gatherid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 afterquestnpcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 levelaward_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objaward_;
  ::PROTOBUF_NAMESPACE_ID::uint32 show_copy_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 show_common_map_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lastsecs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 can_share_;
  ::PROTOBUF_NAMESPACE_ID::uint32 auto_share_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timelimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 if_ring_;
  ::PROTOBUF_NAMESPACE_ID::uint32 state_show_;
  friend struct ::TableStruct_questconfig_2eproto;
};
// -------------------------------------------------------------------

class questconfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.questconfig) */ {
 public:
  questconfig();
  virtual ~questconfig();

  questconfig(const questconfig& from);
  questconfig(questconfig&& from) noexcept
    : questconfig() {
    *this = ::std::move(from);
  }

  inline questconfig& operator=(const questconfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline questconfig& operator=(questconfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const questconfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const questconfig* internal_default_instance() {
    return reinterpret_cast<const questconfig*>(
               &_questconfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(questconfig& a, questconfig& b) {
    a.Swap(&b);
  }
  inline void Swap(questconfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline questconfig* New() const final {
    return CreateMaybeMessage<questconfig>(nullptr);
  }

  questconfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<questconfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const questconfig& from);
  void MergeFrom(const questconfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(questconfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.questconfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_questconfig_2eproto);
    return ::descriptor_table_questconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef questconfig_t_quest_config t_quest_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.questconfig.t_quest_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::questconfig_t_quest_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::questconfig_t_quest_config >*
      mutable_datas();
  private:
  const ::pb::questconfig_t_quest_config& _internal_datas(int index) const;
  ::pb::questconfig_t_quest_config* _internal_add_datas();
  public:
  const ::pb::questconfig_t_quest_config& datas(int index) const;
  ::pb::questconfig_t_quest_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::questconfig_t_quest_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.questconfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::questconfig_t_quest_config > datas_;
  friend struct ::TableStruct_questconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// questconfig_t_quest_config

// required uint32 tbxid = 1 [default = 0];
inline bool questconfig_t_quest_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void questconfig_t_quest_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.tbxid)
  return _internal_tbxid();
}
inline void questconfig_t_quest_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  tbxid_ = value;
}
inline void questconfig_t_quest_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool questconfig_t_quest_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_id() const {
  return _internal_has_id();
}
inline void questconfig_t_quest_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::id() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.id)
  return _internal_id();
}
inline void questconfig_t_quest_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  id_ = value;
}
inline void questconfig_t_quest_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.id)
}

// required uint32 AcceptNpcId = 3;
inline bool questconfig_t_quest_config::_internal_has_acceptnpcid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_acceptnpcid() const {
  return _internal_has_acceptnpcid();
}
inline void questconfig_t_quest_config::clear_acceptnpcid() {
  acceptnpcid_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_acceptnpcid() const {
  return acceptnpcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::acceptnpcid() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.AcceptNpcId)
  return _internal_acceptnpcid();
}
inline void questconfig_t_quest_config::_internal_set_acceptnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  acceptnpcid_ = value;
}
inline void questconfig_t_quest_config::set_acceptnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_acceptnpcid(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.AcceptNpcId)
}

// required uint32 CommitNpcId = 4;
inline bool questconfig_t_quest_config::_internal_has_commitnpcid() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_commitnpcid() const {
  return _internal_has_commitnpcid();
}
inline void questconfig_t_quest_config::clear_commitnpcid() {
  commitnpcid_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_commitnpcid() const {
  return commitnpcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::commitnpcid() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.CommitNpcId)
  return _internal_commitnpcid();
}
inline void questconfig_t_quest_config::_internal_set_commitnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  commitnpcid_ = value;
}
inline void questconfig_t_quest_config::set_commitnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_commitnpcid(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.CommitNpcId)
}

// required string name = 5;
inline bool questconfig_t_quest_config::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_name() const {
  return _internal_has_name();
}
inline void questconfig_t_quest_config::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& questconfig_t_quest_config::name() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.name)
  return _internal_name();
}
inline void questconfig_t_quest_config::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.name)
}
inline std::string* questconfig_t_quest_config::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.name)
  return _internal_mutable_name();
}
inline const std::string& questconfig_t_quest_config::_internal_name() const {
  return name_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.name)
}
inline void questconfig_t_quest_config::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.name)
}
inline void questconfig_t_quest_config::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.name)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_name() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.name)
}

// required string desc = 6;
inline bool questconfig_t_quest_config::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_desc() const {
  return _internal_has_desc();
}
inline void questconfig_t_quest_config::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& questconfig_t_quest_config::desc() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.desc)
  return _internal_desc();
}
inline void questconfig_t_quest_config::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.desc)
}
inline std::string* questconfig_t_quest_config::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.desc)
  return _internal_mutable_desc();
}
inline const std::string& questconfig_t_quest_config::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.desc)
}
inline void questconfig_t_quest_config::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.desc)
}
inline void questconfig_t_quest_config::set_desc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.desc)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000002u;
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_desc() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return desc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.desc)
}

// required uint32 group = 7;
inline bool questconfig_t_quest_config::_internal_has_group() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_group() const {
  return _internal_has_group();
}
inline void questconfig_t_quest_config::clear_group() {
  group_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::group() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.group)
  return _internal_group();
}
inline void questconfig_t_quest_config::_internal_set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  group_ = value;
}
inline void questconfig_t_quest_config::set_group(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.group)
}

// required uint32 type = 8;
inline bool questconfig_t_quest_config::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_type() const {
  return _internal_has_type();
}
inline void questconfig_t_quest_config::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::type() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.type)
  return _internal_type();
}
inline void questconfig_t_quest_config::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  type_ = value;
}
inline void questconfig_t_quest_config::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.type)
}

// required string levellimit = 9;
inline bool questconfig_t_quest_config::_internal_has_levellimit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_levellimit() const {
  return _internal_has_levellimit();
}
inline void questconfig_t_quest_config::clear_levellimit() {
  levellimit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& questconfig_t_quest_config::levellimit() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.levellimit)
  return _internal_levellimit();
}
inline void questconfig_t_quest_config::set_levellimit(const std::string& value) {
  _internal_set_levellimit(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.levellimit)
}
inline std::string* questconfig_t_quest_config::mutable_levellimit() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.levellimit)
  return _internal_mutable_levellimit();
}
inline const std::string& questconfig_t_quest_config::_internal_levellimit() const {
  return levellimit_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_levellimit(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  levellimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_levellimit(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  levellimit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.levellimit)
}
inline void questconfig_t_quest_config::set_levellimit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  levellimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.levellimit)
}
inline void questconfig_t_quest_config::set_levellimit(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  levellimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.levellimit)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_levellimit() {
  _has_bits_[0] |= 0x00000004u;
  return levellimit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_levellimit() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.levellimit)
  if (!_internal_has_levellimit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return levellimit_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_levellimit(std::string* levellimit) {
  if (levellimit != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  levellimit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), levellimit);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.levellimit)
}

// required string goal = 10;
inline bool questconfig_t_quest_config::_internal_has_goal() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_goal() const {
  return _internal_has_goal();
}
inline void questconfig_t_quest_config::clear_goal() {
  goal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& questconfig_t_quest_config::goal() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.goal)
  return _internal_goal();
}
inline void questconfig_t_quest_config::set_goal(const std::string& value) {
  _internal_set_goal(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.goal)
}
inline std::string* questconfig_t_quest_config::mutable_goal() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.goal)
  return _internal_mutable_goal();
}
inline const std::string& questconfig_t_quest_config::_internal_goal() const {
  return goal_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_goal(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  goal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_goal(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  goal_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.goal)
}
inline void questconfig_t_quest_config::set_goal(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  goal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.goal)
}
inline void questconfig_t_quest_config::set_goal(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  goal_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.goal)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_goal() {
  _has_bits_[0] |= 0x00000008u;
  return goal_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_goal() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.goal)
  if (!_internal_has_goal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return goal_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_goal(std::string* goal) {
  if (goal != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  goal_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goal);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.goal)
}

// required string degreename = 11;
inline bool questconfig_t_quest_config::_internal_has_degreename() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_degreename() const {
  return _internal_has_degreename();
}
inline void questconfig_t_quest_config::clear_degreename() {
  degreename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& questconfig_t_quest_config::degreename() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.degreename)
  return _internal_degreename();
}
inline void questconfig_t_quest_config::set_degreename(const std::string& value) {
  _internal_set_degreename(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.degreename)
}
inline std::string* questconfig_t_quest_config::mutable_degreename() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.degreename)
  return _internal_mutable_degreename();
}
inline const std::string& questconfig_t_quest_config::_internal_degreename() const {
  return degreename_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_degreename(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  degreename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_degreename(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  degreename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.degreename)
}
inline void questconfig_t_quest_config::set_degreename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  degreename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.degreename)
}
inline void questconfig_t_quest_config::set_degreename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  degreename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.degreename)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_degreename() {
  _has_bits_[0] |= 0x00000010u;
  return degreename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_degreename() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.degreename)
  if (!_internal_has_degreename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return degreename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_degreename(std::string* degreename) {
  if (degreename != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  degreename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), degreename);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.degreename)
}

// required string award = 12;
inline bool questconfig_t_quest_config::_internal_has_award() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_award() const {
  return _internal_has_award();
}
inline void questconfig_t_quest_config::clear_award() {
  award_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& questconfig_t_quest_config::award() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.award)
  return _internal_award();
}
inline void questconfig_t_quest_config::set_award(const std::string& value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.award)
}
inline std::string* questconfig_t_quest_config::mutable_award() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.award)
  return _internal_mutable_award();
}
inline const std::string& questconfig_t_quest_config::_internal_award() const {
  return award_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_award(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_award(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  award_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.award)
}
inline void questconfig_t_quest_config::set_award(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.award)
}
inline void questconfig_t_quest_config::set_award(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.award)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_award() {
  _has_bits_[0] |= 0x00000020u;
  return award_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_award() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.award)
  if (!_internal_has_award()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return award_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_award(std::string* award) {
  if (award != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  award_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), award);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.award)
}

// required bool canabandon = 13;
inline bool questconfig_t_quest_config::_internal_has_canabandon() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_canabandon() const {
  return _internal_has_canabandon();
}
inline void questconfig_t_quest_config::clear_canabandon() {
  canabandon_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool questconfig_t_quest_config::_internal_canabandon() const {
  return canabandon_;
}
inline bool questconfig_t_quest_config::canabandon() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.canabandon)
  return _internal_canabandon();
}
inline void questconfig_t_quest_config::_internal_set_canabandon(bool value) {
  _has_bits_[0] |= 0x00400000u;
  canabandon_ = value;
}
inline void questconfig_t_quest_config::set_canabandon(bool value) {
  _internal_set_canabandon(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.canabandon)
}

// required string objects = 14;
inline bool questconfig_t_quest_config::_internal_has_objects() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_objects() const {
  return _internal_has_objects();
}
inline void questconfig_t_quest_config::clear_objects() {
  objects_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& questconfig_t_quest_config::objects() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.objects)
  return _internal_objects();
}
inline void questconfig_t_quest_config::set_objects(const std::string& value) {
  _internal_set_objects(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.objects)
}
inline std::string* questconfig_t_quest_config::mutable_objects() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.objects)
  return _internal_mutable_objects();
}
inline const std::string& questconfig_t_quest_config::_internal_objects() const {
  return objects_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_objects(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  objects_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_objects(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  objects_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.objects)
}
inline void questconfig_t_quest_config::set_objects(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  objects_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.objects)
}
inline void questconfig_t_quest_config::set_objects(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  objects_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.objects)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_objects() {
  _has_bits_[0] |= 0x00000040u;
  return objects_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_objects() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.objects)
  if (!_internal_has_objects()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return objects_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_objects(std::string* objects) {
  if (objects != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  objects_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objects);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.objects)
}

// required bool can_cycle = 15;
inline bool questconfig_t_quest_config::_internal_has_can_cycle() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_can_cycle() const {
  return _internal_has_can_cycle();
}
inline void questconfig_t_quest_config::clear_can_cycle() {
  can_cycle_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool questconfig_t_quest_config::_internal_can_cycle() const {
  return can_cycle_;
}
inline bool questconfig_t_quest_config::can_cycle() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.can_cycle)
  return _internal_can_cycle();
}
inline void questconfig_t_quest_config::_internal_set_can_cycle(bool value) {
  _has_bits_[0] |= 0x00800000u;
  can_cycle_ = value;
}
inline void questconfig_t_quest_config::set_can_cycle(bool value) {
  _internal_set_can_cycle(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.can_cycle)
}

// required uint32 pathfindstate = 16;
inline bool questconfig_t_quest_config::_internal_has_pathfindstate() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_pathfindstate() const {
  return _internal_has_pathfindstate();
}
inline void questconfig_t_quest_config::clear_pathfindstate() {
  pathfindstate_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_pathfindstate() const {
  return pathfindstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::pathfindstate() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.pathfindstate)
  return _internal_pathfindstate();
}
inline void questconfig_t_quest_config::_internal_set_pathfindstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  pathfindstate_ = value;
}
inline void questconfig_t_quest_config::set_pathfindstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pathfindstate(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.pathfindstate)
}

// required string pathwaydoing = 17;
inline bool questconfig_t_quest_config::_internal_has_pathwaydoing() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_pathwaydoing() const {
  return _internal_has_pathwaydoing();
}
inline void questconfig_t_quest_config::clear_pathwaydoing() {
  pathwaydoing_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& questconfig_t_quest_config::pathwaydoing() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.pathwaydoing)
  return _internal_pathwaydoing();
}
inline void questconfig_t_quest_config::set_pathwaydoing(const std::string& value) {
  _internal_set_pathwaydoing(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.pathwaydoing)
}
inline std::string* questconfig_t_quest_config::mutable_pathwaydoing() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.pathwaydoing)
  return _internal_mutable_pathwaydoing();
}
inline const std::string& questconfig_t_quest_config::_internal_pathwaydoing() const {
  return pathwaydoing_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_pathwaydoing(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  pathwaydoing_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_pathwaydoing(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  pathwaydoing_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.pathwaydoing)
}
inline void questconfig_t_quest_config::set_pathwaydoing(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  pathwaydoing_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.pathwaydoing)
}
inline void questconfig_t_quest_config::set_pathwaydoing(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  pathwaydoing_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.pathwaydoing)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_pathwaydoing() {
  _has_bits_[0] |= 0x00000080u;
  return pathwaydoing_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_pathwaydoing() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.pathwaydoing)
  if (!_internal_has_pathwaydoing()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return pathwaydoing_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_pathwaydoing(std::string* pathwaydoing) {
  if (pathwaydoing != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  pathwaydoing_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pathwaydoing);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.pathwaydoing)
}

// required string useobject = 18;
inline bool questconfig_t_quest_config::_internal_has_useobject() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_useobject() const {
  return _internal_has_useobject();
}
inline void questconfig_t_quest_config::clear_useobject() {
  useobject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& questconfig_t_quest_config::useobject() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.useobject)
  return _internal_useobject();
}
inline void questconfig_t_quest_config::set_useobject(const std::string& value) {
  _internal_set_useobject(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.useobject)
}
inline std::string* questconfig_t_quest_config::mutable_useobject() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.useobject)
  return _internal_mutable_useobject();
}
inline const std::string& questconfig_t_quest_config::_internal_useobject() const {
  return useobject_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_useobject(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  useobject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_useobject(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  useobject_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.useobject)
}
inline void questconfig_t_quest_config::set_useobject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  useobject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.useobject)
}
inline void questconfig_t_quest_config::set_useobject(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  useobject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.useobject)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_useobject() {
  _has_bits_[0] |= 0x00000100u;
  return useobject_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_useobject() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.useobject)
  if (!_internal_has_useobject()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return useobject_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_useobject(std::string* useobject) {
  if (useobject != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  useobject_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), useobject);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.useobject)
}

// required uint32 gatherid = 19;
inline bool questconfig_t_quest_config::_internal_has_gatherid() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_gatherid() const {
  return _internal_has_gatherid();
}
inline void questconfig_t_quest_config::clear_gatherid() {
  gatherid_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_gatherid() const {
  return gatherid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::gatherid() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.gatherid)
  return _internal_gatherid();
}
inline void questconfig_t_quest_config::_internal_set_gatherid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  gatherid_ = value;
}
inline void questconfig_t_quest_config::set_gatherid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gatherid(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.gatherid)
}

// required string pathwaydone = 20;
inline bool questconfig_t_quest_config::_internal_has_pathwaydone() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_pathwaydone() const {
  return _internal_has_pathwaydone();
}
inline void questconfig_t_quest_config::clear_pathwaydone() {
  pathwaydone_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& questconfig_t_quest_config::pathwaydone() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.pathwaydone)
  return _internal_pathwaydone();
}
inline void questconfig_t_quest_config::set_pathwaydone(const std::string& value) {
  _internal_set_pathwaydone(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.pathwaydone)
}
inline std::string* questconfig_t_quest_config::mutable_pathwaydone() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.pathwaydone)
  return _internal_mutable_pathwaydone();
}
inline const std::string& questconfig_t_quest_config::_internal_pathwaydone() const {
  return pathwaydone_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_pathwaydone(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  pathwaydone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_pathwaydone(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  pathwaydone_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.pathwaydone)
}
inline void questconfig_t_quest_config::set_pathwaydone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  pathwaydone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.pathwaydone)
}
inline void questconfig_t_quest_config::set_pathwaydone(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  pathwaydone_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.pathwaydone)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_pathwaydone() {
  _has_bits_[0] |= 0x00000200u;
  return pathwaydone_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_pathwaydone() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.pathwaydone)
  if (!_internal_has_pathwaydone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return pathwaydone_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_pathwaydone(std::string* pathwaydone) {
  if (pathwaydone != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  pathwaydone_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pathwaydone);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.pathwaydone)
}

// required string pathwaypre = 21;
inline bool questconfig_t_quest_config::_internal_has_pathwaypre() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_pathwaypre() const {
  return _internal_has_pathwaypre();
}
inline void questconfig_t_quest_config::clear_pathwaypre() {
  pathwaypre_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& questconfig_t_quest_config::pathwaypre() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.pathwaypre)
  return _internal_pathwaypre();
}
inline void questconfig_t_quest_config::set_pathwaypre(const std::string& value) {
  _internal_set_pathwaypre(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.pathwaypre)
}
inline std::string* questconfig_t_quest_config::mutable_pathwaypre() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.pathwaypre)
  return _internal_mutable_pathwaypre();
}
inline const std::string& questconfig_t_quest_config::_internal_pathwaypre() const {
  return pathwaypre_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_pathwaypre(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  pathwaypre_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_pathwaypre(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  pathwaypre_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.pathwaypre)
}
inline void questconfig_t_quest_config::set_pathwaypre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  pathwaypre_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.pathwaypre)
}
inline void questconfig_t_quest_config::set_pathwaypre(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  pathwaypre_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.pathwaypre)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_pathwaypre() {
  _has_bits_[0] |= 0x00000400u;
  return pathwaypre_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_pathwaypre() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.pathwaypre)
  if (!_internal_has_pathwaypre()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return pathwaypre_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_pathwaypre(std::string* pathwaypre) {
  if (pathwaypre != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  pathwaypre_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pathwaypre);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.pathwaypre)
}

// required string predesc = 22;
inline bool questconfig_t_quest_config::_internal_has_predesc() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_predesc() const {
  return _internal_has_predesc();
}
inline void questconfig_t_quest_config::clear_predesc() {
  predesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& questconfig_t_quest_config::predesc() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.predesc)
  return _internal_predesc();
}
inline void questconfig_t_quest_config::set_predesc(const std::string& value) {
  _internal_set_predesc(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.predesc)
}
inline std::string* questconfig_t_quest_config::mutable_predesc() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.predesc)
  return _internal_mutable_predesc();
}
inline const std::string& questconfig_t_quest_config::_internal_predesc() const {
  return predesc_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_predesc(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  predesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_predesc(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  predesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.predesc)
}
inline void questconfig_t_quest_config::set_predesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  predesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.predesc)
}
inline void questconfig_t_quest_config::set_predesc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  predesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.predesc)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_predesc() {
  _has_bits_[0] |= 0x00000800u;
  return predesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_predesc() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.predesc)
  if (!_internal_has_predesc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return predesc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_predesc(std::string* predesc) {
  if (predesc != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  predesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), predesc);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.predesc)
}

// required uint32 afterquestnpcid = 23;
inline bool questconfig_t_quest_config::_internal_has_afterquestnpcid() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_afterquestnpcid() const {
  return _internal_has_afterquestnpcid();
}
inline void questconfig_t_quest_config::clear_afterquestnpcid() {
  afterquestnpcid_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_afterquestnpcid() const {
  return afterquestnpcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::afterquestnpcid() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.afterquestnpcid)
  return _internal_afterquestnpcid();
}
inline void questconfig_t_quest_config::_internal_set_afterquestnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  afterquestnpcid_ = value;
}
inline void questconfig_t_quest_config::set_afterquestnpcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_afterquestnpcid(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.afterquestnpcid)
}

// required uint32 levelaward = 24;
inline bool questconfig_t_quest_config::_internal_has_levelaward() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_levelaward() const {
  return _internal_has_levelaward();
}
inline void questconfig_t_quest_config::clear_levelaward() {
  levelaward_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_levelaward() const {
  return levelaward_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::levelaward() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.levelaward)
  return _internal_levelaward();
}
inline void questconfig_t_quest_config::_internal_set_levelaward(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  levelaward_ = value;
}
inline void questconfig_t_quest_config::set_levelaward(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_levelaward(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.levelaward)
}

// required uint32 objaward = 25;
inline bool questconfig_t_quest_config::_internal_has_objaward() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_objaward() const {
  return _internal_has_objaward();
}
inline void questconfig_t_quest_config::clear_objaward() {
  objaward_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_objaward() const {
  return objaward_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::objaward() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.objaward)
  return _internal_objaward();
}
inline void questconfig_t_quest_config::_internal_set_objaward(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  objaward_ = value;
}
inline void questconfig_t_quest_config::set_objaward(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objaward(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.objaward)
}

// required uint32 show_copy_id = 26;
inline bool questconfig_t_quest_config::_internal_has_show_copy_id() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_show_copy_id() const {
  return _internal_has_show_copy_id();
}
inline void questconfig_t_quest_config::clear_show_copy_id() {
  show_copy_id_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_show_copy_id() const {
  return show_copy_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::show_copy_id() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.show_copy_id)
  return _internal_show_copy_id();
}
inline void questconfig_t_quest_config::_internal_set_show_copy_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  show_copy_id_ = value;
}
inline void questconfig_t_quest_config::set_show_copy_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_show_copy_id(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.show_copy_id)
}

// required uint32 show_common_map = 27;
inline bool questconfig_t_quest_config::_internal_has_show_common_map() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_show_common_map() const {
  return _internal_has_show_common_map();
}
inline void questconfig_t_quest_config::clear_show_common_map() {
  show_common_map_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_show_common_map() const {
  return show_common_map_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::show_common_map() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.show_common_map)
  return _internal_show_common_map();
}
inline void questconfig_t_quest_config::_internal_set_show_common_map(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  show_common_map_ = value;
}
inline void questconfig_t_quest_config::set_show_common_map(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_show_common_map(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.show_common_map)
}

// required uint32 lastsecs = 28;
inline bool questconfig_t_quest_config::_internal_has_lastsecs() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_lastsecs() const {
  return _internal_has_lastsecs();
}
inline void questconfig_t_quest_config::clear_lastsecs() {
  lastsecs_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_lastsecs() const {
  return lastsecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::lastsecs() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.lastsecs)
  return _internal_lastsecs();
}
inline void questconfig_t_quest_config::_internal_set_lastsecs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  lastsecs_ = value;
}
inline void questconfig_t_quest_config::set_lastsecs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lastsecs(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.lastsecs)
}

// required string degree = 29;
inline bool questconfig_t_quest_config::_internal_has_degree() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_degree() const {
  return _internal_has_degree();
}
inline void questconfig_t_quest_config::clear_degree() {
  degree_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& questconfig_t_quest_config::degree() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.degree)
  return _internal_degree();
}
inline void questconfig_t_quest_config::set_degree(const std::string& value) {
  _internal_set_degree(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.degree)
}
inline std::string* questconfig_t_quest_config::mutable_degree() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.degree)
  return _internal_mutable_degree();
}
inline const std::string& questconfig_t_quest_config::_internal_degree() const {
  return degree_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_degree(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  degree_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_degree(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  degree_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.degree)
}
inline void questconfig_t_quest_config::set_degree(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  degree_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.degree)
}
inline void questconfig_t_quest_config::set_degree(const char* value, size_t size) {
  _has_bits_[0] |= 0x00001000u;
  degree_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.degree)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_degree() {
  _has_bits_[0] |= 0x00001000u;
  return degree_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_degree() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.degree)
  if (!_internal_has_degree()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return degree_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_degree(std::string* degree) {
  if (degree != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  degree_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), degree);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.degree)
}

// required string commitdesc = 30;
inline bool questconfig_t_quest_config::_internal_has_commitdesc() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_commitdesc() const {
  return _internal_has_commitdesc();
}
inline void questconfig_t_quest_config::clear_commitdesc() {
  commitdesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& questconfig_t_quest_config::commitdesc() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.commitdesc)
  return _internal_commitdesc();
}
inline void questconfig_t_quest_config::set_commitdesc(const std::string& value) {
  _internal_set_commitdesc(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.commitdesc)
}
inline std::string* questconfig_t_quest_config::mutable_commitdesc() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.commitdesc)
  return _internal_mutable_commitdesc();
}
inline const std::string& questconfig_t_quest_config::_internal_commitdesc() const {
  return commitdesc_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_commitdesc(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  commitdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_commitdesc(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  commitdesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.commitdesc)
}
inline void questconfig_t_quest_config::set_commitdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  commitdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.commitdesc)
}
inline void questconfig_t_quest_config::set_commitdesc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00002000u;
  commitdesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.commitdesc)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_commitdesc() {
  _has_bits_[0] |= 0x00002000u;
  return commitdesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_commitdesc() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.commitdesc)
  if (!_internal_has_commitdesc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return commitdesc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_commitdesc(std::string* commitdesc) {
  if (commitdesc != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  commitdesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commitdesc);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.commitdesc)
}

// required string VisitNpcId = 31;
inline bool questconfig_t_quest_config::_internal_has_visitnpcid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_visitnpcid() const {
  return _internal_has_visitnpcid();
}
inline void questconfig_t_quest_config::clear_visitnpcid() {
  visitnpcid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& questconfig_t_quest_config::visitnpcid() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.VisitNpcId)
  return _internal_visitnpcid();
}
inline void questconfig_t_quest_config::set_visitnpcid(const std::string& value) {
  _internal_set_visitnpcid(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.VisitNpcId)
}
inline std::string* questconfig_t_quest_config::mutable_visitnpcid() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.VisitNpcId)
  return _internal_mutable_visitnpcid();
}
inline const std::string& questconfig_t_quest_config::_internal_visitnpcid() const {
  return visitnpcid_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_visitnpcid(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  visitnpcid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_visitnpcid(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  visitnpcid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.VisitNpcId)
}
inline void questconfig_t_quest_config::set_visitnpcid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  visitnpcid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.VisitNpcId)
}
inline void questconfig_t_quest_config::set_visitnpcid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00004000u;
  visitnpcid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.VisitNpcId)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_visitnpcid() {
  _has_bits_[0] |= 0x00004000u;
  return visitnpcid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_visitnpcid() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.VisitNpcId)
  if (!_internal_has_visitnpcid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return visitnpcid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_visitnpcid(std::string* visitnpcid) {
  if (visitnpcid != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  visitnpcid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), visitnpcid);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.VisitNpcId)
}

// required string prequestlimit = 32;
inline bool questconfig_t_quest_config::_internal_has_prequestlimit() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_prequestlimit() const {
  return _internal_has_prequestlimit();
}
inline void questconfig_t_quest_config::clear_prequestlimit() {
  prequestlimit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& questconfig_t_quest_config::prequestlimit() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.prequestlimit)
  return _internal_prequestlimit();
}
inline void questconfig_t_quest_config::set_prequestlimit(const std::string& value) {
  _internal_set_prequestlimit(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.prequestlimit)
}
inline std::string* questconfig_t_quest_config::mutable_prequestlimit() {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.t_quest_config.prequestlimit)
  return _internal_mutable_prequestlimit();
}
inline const std::string& questconfig_t_quest_config::_internal_prequestlimit() const {
  return prequestlimit_.GetNoArena();
}
inline void questconfig_t_quest_config::_internal_set_prequestlimit(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  prequestlimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void questconfig_t_quest_config::set_prequestlimit(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  prequestlimit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.questconfig.t_quest_config.prequestlimit)
}
inline void questconfig_t_quest_config::set_prequestlimit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  prequestlimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.questconfig.t_quest_config.prequestlimit)
}
inline void questconfig_t_quest_config::set_prequestlimit(const char* value, size_t size) {
  _has_bits_[0] |= 0x00008000u;
  prequestlimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.questconfig.t_quest_config.prequestlimit)
}
inline std::string* questconfig_t_quest_config::_internal_mutable_prequestlimit() {
  _has_bits_[0] |= 0x00008000u;
  return prequestlimit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* questconfig_t_quest_config::release_prequestlimit() {
  // @@protoc_insertion_point(field_release:pb.questconfig.t_quest_config.prequestlimit)
  if (!_internal_has_prequestlimit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return prequestlimit_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void questconfig_t_quest_config::set_allocated_prequestlimit(std::string* prequestlimit) {
  if (prequestlimit != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  prequestlimit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prequestlimit);
  // @@protoc_insertion_point(field_set_allocated:pb.questconfig.t_quest_config.prequestlimit)
}

// required uint32 can_share = 33;
inline bool questconfig_t_quest_config::_internal_has_can_share() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_can_share() const {
  return _internal_has_can_share();
}
inline void questconfig_t_quest_config::clear_can_share() {
  can_share_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_can_share() const {
  return can_share_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::can_share() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.can_share)
  return _internal_can_share();
}
inline void questconfig_t_quest_config::_internal_set_can_share(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  can_share_ = value;
}
inline void questconfig_t_quest_config::set_can_share(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_can_share(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.can_share)
}

// required uint32 auto_share = 34;
inline bool questconfig_t_quest_config::_internal_has_auto_share() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_auto_share() const {
  return _internal_has_auto_share();
}
inline void questconfig_t_quest_config::clear_auto_share() {
  auto_share_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_auto_share() const {
  return auto_share_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::auto_share() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.auto_share)
  return _internal_auto_share();
}
inline void questconfig_t_quest_config::_internal_set_auto_share(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  auto_share_ = value;
}
inline void questconfig_t_quest_config::set_auto_share(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_auto_share(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.auto_share)
}

// required uint32 timelimit = 35;
inline bool questconfig_t_quest_config::_internal_has_timelimit() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_timelimit() const {
  return _internal_has_timelimit();
}
inline void questconfig_t_quest_config::clear_timelimit() {
  timelimit_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_timelimit() const {
  return timelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::timelimit() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.timelimit)
  return _internal_timelimit();
}
inline void questconfig_t_quest_config::_internal_set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  timelimit_ = value;
}
inline void questconfig_t_quest_config::set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timelimit(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.timelimit)
}

// required uint32 if_ring = 36;
inline bool questconfig_t_quest_config::_internal_has_if_ring() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_if_ring() const {
  return _internal_has_if_ring();
}
inline void questconfig_t_quest_config::clear_if_ring() {
  if_ring_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_if_ring() const {
  return if_ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::if_ring() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.if_ring)
  return _internal_if_ring();
}
inline void questconfig_t_quest_config::_internal_set_if_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  if_ring_ = value;
}
inline void questconfig_t_quest_config::set_if_ring(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_if_ring(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.if_ring)
}

// required uint32 state_show = 37;
inline bool questconfig_t_quest_config::_internal_has_state_show() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool questconfig_t_quest_config::has_state_show() const {
  return _internal_has_state_show();
}
inline void questconfig_t_quest_config::clear_state_show() {
  state_show_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::_internal_state_show() const {
  return state_show_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 questconfig_t_quest_config::state_show() const {
  // @@protoc_insertion_point(field_get:pb.questconfig.t_quest_config.state_show)
  return _internal_state_show();
}
inline void questconfig_t_quest_config::_internal_set_state_show(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  state_show_ = value;
}
inline void questconfig_t_quest_config::set_state_show(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_state_show(value);
  // @@protoc_insertion_point(field_set:pb.questconfig.t_quest_config.state_show)
}

// -------------------------------------------------------------------

// questconfig

// repeated .pb.questconfig.t_quest_config datas = 1;
inline int questconfig::_internal_datas_size() const {
  return datas_.size();
}
inline int questconfig::datas_size() const {
  return _internal_datas_size();
}
inline void questconfig::clear_datas() {
  datas_.Clear();
}
inline ::pb::questconfig_t_quest_config* questconfig::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.questconfig.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::questconfig_t_quest_config >*
questconfig::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.questconfig.datas)
  return &datas_;
}
inline const ::pb::questconfig_t_quest_config& questconfig::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::questconfig_t_quest_config& questconfig::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.questconfig.datas)
  return _internal_datas(index);
}
inline ::pb::questconfig_t_quest_config* questconfig::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::questconfig_t_quest_config* questconfig::add_datas() {
  // @@protoc_insertion_point(field_add:pb.questconfig.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::questconfig_t_quest_config >&
questconfig::datas() const {
  // @@protoc_insertion_point(field_list:pb.questconfig.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_questconfig_2eproto
