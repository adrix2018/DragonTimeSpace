// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dnachip_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dnachip_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dnachip_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dnachip_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dnachip_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dnachip_5fconfig_2eproto;
namespace pb {
class dnachip_config;
class dnachip_configDefaultTypeInternal;
extern dnachip_configDefaultTypeInternal _dnachip_config_default_instance_;
class dnachip_config_t_dnachip_config;
class dnachip_config_t_dnachip_configDefaultTypeInternal;
extern dnachip_config_t_dnachip_configDefaultTypeInternal _dnachip_config_t_dnachip_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::dnachip_config* Arena::CreateMaybeMessage<::pb::dnachip_config>(Arena*);
template<> ::pb::dnachip_config_t_dnachip_config* Arena::CreateMaybeMessage<::pb::dnachip_config_t_dnachip_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class dnachip_config_t_dnachip_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.dnachip_config.t_dnachip_config) */ {
 public:
  dnachip_config_t_dnachip_config();
  virtual ~dnachip_config_t_dnachip_config();

  dnachip_config_t_dnachip_config(const dnachip_config_t_dnachip_config& from);
  dnachip_config_t_dnachip_config(dnachip_config_t_dnachip_config&& from) noexcept
    : dnachip_config_t_dnachip_config() {
    *this = ::std::move(from);
  }

  inline dnachip_config_t_dnachip_config& operator=(const dnachip_config_t_dnachip_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline dnachip_config_t_dnachip_config& operator=(dnachip_config_t_dnachip_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dnachip_config_t_dnachip_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dnachip_config_t_dnachip_config* internal_default_instance() {
    return reinterpret_cast<const dnachip_config_t_dnachip_config*>(
               &_dnachip_config_t_dnachip_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(dnachip_config_t_dnachip_config& a, dnachip_config_t_dnachip_config& b) {
    a.Swap(&b);
  }
  inline void Swap(dnachip_config_t_dnachip_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dnachip_config_t_dnachip_config* New() const final {
    return CreateMaybeMessage<dnachip_config_t_dnachip_config>(nullptr);
  }

  dnachip_config_t_dnachip_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dnachip_config_t_dnachip_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dnachip_config_t_dnachip_config& from);
  void MergeFrom(const dnachip_config_t_dnachip_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dnachip_config_t_dnachip_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.dnachip_config.t_dnachip_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dnachip_5fconfig_2eproto);
    return ::descriptor_table_dnachip_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChipnameFieldNumber = 3,
    kChipiconFieldNumber = 4,
    kChiptipsFieldNumber = 5,
    kPropertyFieldNumber = 8,
    kTbxidFieldNumber = 1,
    kChipidFieldNumber = 2,
    kLevelFieldNumber = 6,
    kTypeFieldNumber = 7,
    kGoldcostFieldNumber = 9,
  };
  // required string chipname = 3;
  bool has_chipname() const;
  private:
  bool _internal_has_chipname() const;
  public:
  void clear_chipname();
  const std::string& chipname() const;
  void set_chipname(const std::string& value);
  void set_chipname(std::string&& value);
  void set_chipname(const char* value);
  void set_chipname(const char* value, size_t size);
  std::string* mutable_chipname();
  std::string* release_chipname();
  void set_allocated_chipname(std::string* chipname);
  private:
  const std::string& _internal_chipname() const;
  void _internal_set_chipname(const std::string& value);
  std::string* _internal_mutable_chipname();
  public:

  // required string chipicon = 4;
  bool has_chipicon() const;
  private:
  bool _internal_has_chipicon() const;
  public:
  void clear_chipicon();
  const std::string& chipicon() const;
  void set_chipicon(const std::string& value);
  void set_chipicon(std::string&& value);
  void set_chipicon(const char* value);
  void set_chipicon(const char* value, size_t size);
  std::string* mutable_chipicon();
  std::string* release_chipicon();
  void set_allocated_chipicon(std::string* chipicon);
  private:
  const std::string& _internal_chipicon() const;
  void _internal_set_chipicon(const std::string& value);
  std::string* _internal_mutable_chipicon();
  public:

  // required string chiptips = 5;
  bool has_chiptips() const;
  private:
  bool _internal_has_chiptips() const;
  public:
  void clear_chiptips();
  const std::string& chiptips() const;
  void set_chiptips(const std::string& value);
  void set_chiptips(std::string&& value);
  void set_chiptips(const char* value);
  void set_chiptips(const char* value, size_t size);
  std::string* mutable_chiptips();
  std::string* release_chiptips();
  void set_allocated_chiptips(std::string* chiptips);
  private:
  const std::string& _internal_chiptips() const;
  void _internal_set_chiptips(const std::string& value);
  std::string* _internal_mutable_chiptips();
  public:

  // required string property = 8;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  void set_property(const std::string& value);
  void set_property(std::string&& value);
  void set_property(const char* value);
  void set_property(const char* value, size_t size);
  std::string* mutable_property();
  std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required uint64 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 chipid = 2 [default = 0];
  bool has_chipid() const;
  private:
  bool _internal_has_chipid() const;
  public:
  void clear_chipid();
  ::PROTOBUF_NAMESPACE_ID::uint64 chipid() const;
  void set_chipid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chipid() const;
  void _internal_set_chipid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 level = 6;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 goldcost = 9;
  bool has_goldcost() const;
  private:
  bool _internal_has_goldcost() const;
  public:
  void clear_goldcost();
  ::PROTOBUF_NAMESPACE_ID::uint32 goldcost() const;
  void set_goldcost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_goldcost() const;
  void _internal_set_goldcost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.dnachip_config.t_dnachip_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chipname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chipicon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chiptips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chipid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 goldcost_;
  friend struct ::TableStruct_dnachip_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class dnachip_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.dnachip_config) */ {
 public:
  dnachip_config();
  virtual ~dnachip_config();

  dnachip_config(const dnachip_config& from);
  dnachip_config(dnachip_config&& from) noexcept
    : dnachip_config() {
    *this = ::std::move(from);
  }

  inline dnachip_config& operator=(const dnachip_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline dnachip_config& operator=(dnachip_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dnachip_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dnachip_config* internal_default_instance() {
    return reinterpret_cast<const dnachip_config*>(
               &_dnachip_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(dnachip_config& a, dnachip_config& b) {
    a.Swap(&b);
  }
  inline void Swap(dnachip_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dnachip_config* New() const final {
    return CreateMaybeMessage<dnachip_config>(nullptr);
  }

  dnachip_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dnachip_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dnachip_config& from);
  void MergeFrom(const dnachip_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dnachip_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.dnachip_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dnachip_5fconfig_2eproto);
    return ::descriptor_table_dnachip_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef dnachip_config_t_dnachip_config t_dnachip_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.dnachip_config.t_dnachip_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::dnachip_config_t_dnachip_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::dnachip_config_t_dnachip_config >*
      mutable_datas();
  private:
  const ::pb::dnachip_config_t_dnachip_config& _internal_datas(int index) const;
  ::pb::dnachip_config_t_dnachip_config* _internal_add_datas();
  public:
  const ::pb::dnachip_config_t_dnachip_config& datas(int index) const;
  ::pb::dnachip_config_t_dnachip_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::dnachip_config_t_dnachip_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.dnachip_config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::dnachip_config_t_dnachip_config > datas_;
  friend struct ::TableStruct_dnachip_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// dnachip_config_t_dnachip_config

// required uint64 tbxid = 1 [default = 0];
inline bool dnachip_config_t_dnachip_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool dnachip_config_t_dnachip_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void dnachip_config_t_dnachip_config::clear_tbxid() {
  tbxid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dnachip_config_t_dnachip_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dnachip_config_t_dnachip_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.dnachip_config.t_dnachip_config.tbxid)
  return _internal_tbxid();
}
inline void dnachip_config_t_dnachip_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  tbxid_ = value;
}
inline void dnachip_config_t_dnachip_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.dnachip_config.t_dnachip_config.tbxid)
}

// required uint64 chipid = 2 [default = 0];
inline bool dnachip_config_t_dnachip_config::_internal_has_chipid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool dnachip_config_t_dnachip_config::has_chipid() const {
  return _internal_has_chipid();
}
inline void dnachip_config_t_dnachip_config::clear_chipid() {
  chipid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dnachip_config_t_dnachip_config::_internal_chipid() const {
  return chipid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 dnachip_config_t_dnachip_config::chipid() const {
  // @@protoc_insertion_point(field_get:pb.dnachip_config.t_dnachip_config.chipid)
  return _internal_chipid();
}
inline void dnachip_config_t_dnachip_config::_internal_set_chipid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  chipid_ = value;
}
inline void dnachip_config_t_dnachip_config::set_chipid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chipid(value);
  // @@protoc_insertion_point(field_set:pb.dnachip_config.t_dnachip_config.chipid)
}

// required string chipname = 3;
inline bool dnachip_config_t_dnachip_config::_internal_has_chipname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dnachip_config_t_dnachip_config::has_chipname() const {
  return _internal_has_chipname();
}
inline void dnachip_config_t_dnachip_config::clear_chipname() {
  chipname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& dnachip_config_t_dnachip_config::chipname() const {
  // @@protoc_insertion_point(field_get:pb.dnachip_config.t_dnachip_config.chipname)
  return _internal_chipname();
}
inline void dnachip_config_t_dnachip_config::set_chipname(const std::string& value) {
  _internal_set_chipname(value);
  // @@protoc_insertion_point(field_set:pb.dnachip_config.t_dnachip_config.chipname)
}
inline std::string* dnachip_config_t_dnachip_config::mutable_chipname() {
  // @@protoc_insertion_point(field_mutable:pb.dnachip_config.t_dnachip_config.chipname)
  return _internal_mutable_chipname();
}
inline const std::string& dnachip_config_t_dnachip_config::_internal_chipname() const {
  return chipname_.GetNoArena();
}
inline void dnachip_config_t_dnachip_config::_internal_set_chipname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  chipname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void dnachip_config_t_dnachip_config::set_chipname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  chipname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.dnachip_config.t_dnachip_config.chipname)
}
inline void dnachip_config_t_dnachip_config::set_chipname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  chipname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.dnachip_config.t_dnachip_config.chipname)
}
inline void dnachip_config_t_dnachip_config::set_chipname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  chipname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.dnachip_config.t_dnachip_config.chipname)
}
inline std::string* dnachip_config_t_dnachip_config::_internal_mutable_chipname() {
  _has_bits_[0] |= 0x00000001u;
  return chipname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* dnachip_config_t_dnachip_config::release_chipname() {
  // @@protoc_insertion_point(field_release:pb.dnachip_config.t_dnachip_config.chipname)
  if (!_internal_has_chipname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return chipname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void dnachip_config_t_dnachip_config::set_allocated_chipname(std::string* chipname) {
  if (chipname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  chipname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chipname);
  // @@protoc_insertion_point(field_set_allocated:pb.dnachip_config.t_dnachip_config.chipname)
}

// required string chipicon = 4;
inline bool dnachip_config_t_dnachip_config::_internal_has_chipicon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool dnachip_config_t_dnachip_config::has_chipicon() const {
  return _internal_has_chipicon();
}
inline void dnachip_config_t_dnachip_config::clear_chipicon() {
  chipicon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& dnachip_config_t_dnachip_config::chipicon() const {
  // @@protoc_insertion_point(field_get:pb.dnachip_config.t_dnachip_config.chipicon)
  return _internal_chipicon();
}
inline void dnachip_config_t_dnachip_config::set_chipicon(const std::string& value) {
  _internal_set_chipicon(value);
  // @@protoc_insertion_point(field_set:pb.dnachip_config.t_dnachip_config.chipicon)
}
inline std::string* dnachip_config_t_dnachip_config::mutable_chipicon() {
  // @@protoc_insertion_point(field_mutable:pb.dnachip_config.t_dnachip_config.chipicon)
  return _internal_mutable_chipicon();
}
inline const std::string& dnachip_config_t_dnachip_config::_internal_chipicon() const {
  return chipicon_.GetNoArena();
}
inline void dnachip_config_t_dnachip_config::_internal_set_chipicon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  chipicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void dnachip_config_t_dnachip_config::set_chipicon(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  chipicon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.dnachip_config.t_dnachip_config.chipicon)
}
inline void dnachip_config_t_dnachip_config::set_chipicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  chipicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.dnachip_config.t_dnachip_config.chipicon)
}
inline void dnachip_config_t_dnachip_config::set_chipicon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  chipicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.dnachip_config.t_dnachip_config.chipicon)
}
inline std::string* dnachip_config_t_dnachip_config::_internal_mutable_chipicon() {
  _has_bits_[0] |= 0x00000002u;
  return chipicon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* dnachip_config_t_dnachip_config::release_chipicon() {
  // @@protoc_insertion_point(field_release:pb.dnachip_config.t_dnachip_config.chipicon)
  if (!_internal_has_chipicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return chipicon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void dnachip_config_t_dnachip_config::set_allocated_chipicon(std::string* chipicon) {
  if (chipicon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chipicon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chipicon);
  // @@protoc_insertion_point(field_set_allocated:pb.dnachip_config.t_dnachip_config.chipicon)
}

// required string chiptips = 5;
inline bool dnachip_config_t_dnachip_config::_internal_has_chiptips() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool dnachip_config_t_dnachip_config::has_chiptips() const {
  return _internal_has_chiptips();
}
inline void dnachip_config_t_dnachip_config::clear_chiptips() {
  chiptips_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& dnachip_config_t_dnachip_config::chiptips() const {
  // @@protoc_insertion_point(field_get:pb.dnachip_config.t_dnachip_config.chiptips)
  return _internal_chiptips();
}
inline void dnachip_config_t_dnachip_config::set_chiptips(const std::string& value) {
  _internal_set_chiptips(value);
  // @@protoc_insertion_point(field_set:pb.dnachip_config.t_dnachip_config.chiptips)
}
inline std::string* dnachip_config_t_dnachip_config::mutable_chiptips() {
  // @@protoc_insertion_point(field_mutable:pb.dnachip_config.t_dnachip_config.chiptips)
  return _internal_mutable_chiptips();
}
inline const std::string& dnachip_config_t_dnachip_config::_internal_chiptips() const {
  return chiptips_.GetNoArena();
}
inline void dnachip_config_t_dnachip_config::_internal_set_chiptips(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  chiptips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void dnachip_config_t_dnachip_config::set_chiptips(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  chiptips_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.dnachip_config.t_dnachip_config.chiptips)
}
inline void dnachip_config_t_dnachip_config::set_chiptips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  chiptips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.dnachip_config.t_dnachip_config.chiptips)
}
inline void dnachip_config_t_dnachip_config::set_chiptips(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  chiptips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.dnachip_config.t_dnachip_config.chiptips)
}
inline std::string* dnachip_config_t_dnachip_config::_internal_mutable_chiptips() {
  _has_bits_[0] |= 0x00000004u;
  return chiptips_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* dnachip_config_t_dnachip_config::release_chiptips() {
  // @@protoc_insertion_point(field_release:pb.dnachip_config.t_dnachip_config.chiptips)
  if (!_internal_has_chiptips()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return chiptips_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void dnachip_config_t_dnachip_config::set_allocated_chiptips(std::string* chiptips) {
  if (chiptips != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  chiptips_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chiptips);
  // @@protoc_insertion_point(field_set_allocated:pb.dnachip_config.t_dnachip_config.chiptips)
}

// required uint32 level = 6;
inline bool dnachip_config_t_dnachip_config::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool dnachip_config_t_dnachip_config::has_level() const {
  return _internal_has_level();
}
inline void dnachip_config_t_dnachip_config::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dnachip_config_t_dnachip_config::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dnachip_config_t_dnachip_config::level() const {
  // @@protoc_insertion_point(field_get:pb.dnachip_config.t_dnachip_config.level)
  return _internal_level();
}
inline void dnachip_config_t_dnachip_config::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  level_ = value;
}
inline void dnachip_config_t_dnachip_config::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.dnachip_config.t_dnachip_config.level)
}

// required uint32 type = 7;
inline bool dnachip_config_t_dnachip_config::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool dnachip_config_t_dnachip_config::has_type() const {
  return _internal_has_type();
}
inline void dnachip_config_t_dnachip_config::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dnachip_config_t_dnachip_config::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dnachip_config_t_dnachip_config::type() const {
  // @@protoc_insertion_point(field_get:pb.dnachip_config.t_dnachip_config.type)
  return _internal_type();
}
inline void dnachip_config_t_dnachip_config::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void dnachip_config_t_dnachip_config::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.dnachip_config.t_dnachip_config.type)
}

// required string property = 8;
inline bool dnachip_config_t_dnachip_config::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool dnachip_config_t_dnachip_config::has_property() const {
  return _internal_has_property();
}
inline void dnachip_config_t_dnachip_config::clear_property() {
  property_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& dnachip_config_t_dnachip_config::property() const {
  // @@protoc_insertion_point(field_get:pb.dnachip_config.t_dnachip_config.property)
  return _internal_property();
}
inline void dnachip_config_t_dnachip_config::set_property(const std::string& value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:pb.dnachip_config.t_dnachip_config.property)
}
inline std::string* dnachip_config_t_dnachip_config::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pb.dnachip_config.t_dnachip_config.property)
  return _internal_mutable_property();
}
inline const std::string& dnachip_config_t_dnachip_config::_internal_property() const {
  return property_.GetNoArena();
}
inline void dnachip_config_t_dnachip_config::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  property_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void dnachip_config_t_dnachip_config::set_property(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  property_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.dnachip_config.t_dnachip_config.property)
}
inline void dnachip_config_t_dnachip_config::set_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  property_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.dnachip_config.t_dnachip_config.property)
}
inline void dnachip_config_t_dnachip_config::set_property(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  property_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.dnachip_config.t_dnachip_config.property)
}
inline std::string* dnachip_config_t_dnachip_config::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000008u;
  return property_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* dnachip_config_t_dnachip_config::release_property() {
  // @@protoc_insertion_point(field_release:pb.dnachip_config.t_dnachip_config.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return property_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void dnachip_config_t_dnachip_config::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  property_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property);
  // @@protoc_insertion_point(field_set_allocated:pb.dnachip_config.t_dnachip_config.property)
}

// required uint32 goldcost = 9;
inline bool dnachip_config_t_dnachip_config::_internal_has_goldcost() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool dnachip_config_t_dnachip_config::has_goldcost() const {
  return _internal_has_goldcost();
}
inline void dnachip_config_t_dnachip_config::clear_goldcost() {
  goldcost_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dnachip_config_t_dnachip_config::_internal_goldcost() const {
  return goldcost_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 dnachip_config_t_dnachip_config::goldcost() const {
  // @@protoc_insertion_point(field_get:pb.dnachip_config.t_dnachip_config.goldcost)
  return _internal_goldcost();
}
inline void dnachip_config_t_dnachip_config::_internal_set_goldcost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  goldcost_ = value;
}
inline void dnachip_config_t_dnachip_config::set_goldcost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_goldcost(value);
  // @@protoc_insertion_point(field_set:pb.dnachip_config.t_dnachip_config.goldcost)
}

// -------------------------------------------------------------------

// dnachip_config

// repeated .pb.dnachip_config.t_dnachip_config datas = 1;
inline int dnachip_config::_internal_datas_size() const {
  return datas_.size();
}
inline int dnachip_config::datas_size() const {
  return _internal_datas_size();
}
inline void dnachip_config::clear_datas() {
  datas_.Clear();
}
inline ::pb::dnachip_config_t_dnachip_config* dnachip_config::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.dnachip_config.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::dnachip_config_t_dnachip_config >*
dnachip_config::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.dnachip_config.datas)
  return &datas_;
}
inline const ::pb::dnachip_config_t_dnachip_config& dnachip_config::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::dnachip_config_t_dnachip_config& dnachip_config::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.dnachip_config.datas)
  return _internal_datas(index);
}
inline ::pb::dnachip_config_t_dnachip_config* dnachip_config::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::dnachip_config_t_dnachip_config* dnachip_config::add_datas() {
  // @@protoc_insertion_point(field_add:pb.dnachip_config.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::dnachip_config_t_dnachip_config >&
dnachip_config::datas() const {
  // @@protoc_insertion_point(field_list:pb.dnachip_config.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dnachip_5fconfig_2eproto
