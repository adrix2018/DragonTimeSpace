// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pathway.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pathway_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pathway_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pathway_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pathway_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pathway_2eproto;
namespace pb {
class pathway;
class pathwayDefaultTypeInternal;
extern pathwayDefaultTypeInternal _pathway_default_instance_;
class pathway_t_pathway_config;
class pathway_t_pathway_configDefaultTypeInternal;
extern pathway_t_pathway_configDefaultTypeInternal _pathway_t_pathway_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::pathway* Arena::CreateMaybeMessage<::pb::pathway>(Arena*);
template<> ::pb::pathway_t_pathway_config* Arena::CreateMaybeMessage<::pb::pathway_t_pathway_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class pathway_t_pathway_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.pathway.t_pathway_config) */ {
 public:
  pathway_t_pathway_config();
  virtual ~pathway_t_pathway_config();

  pathway_t_pathway_config(const pathway_t_pathway_config& from);
  pathway_t_pathway_config(pathway_t_pathway_config&& from) noexcept
    : pathway_t_pathway_config() {
    *this = ::std::move(from);
  }

  inline pathway_t_pathway_config& operator=(const pathway_t_pathway_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline pathway_t_pathway_config& operator=(pathway_t_pathway_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pathway_t_pathway_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pathway_t_pathway_config* internal_default_instance() {
    return reinterpret_cast<const pathway_t_pathway_config*>(
               &_pathway_t_pathway_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pathway_t_pathway_config& a, pathway_t_pathway_config& b) {
    a.Swap(&b);
  }
  inline void Swap(pathway_t_pathway_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pathway_t_pathway_config* New() const final {
    return CreateMaybeMessage<pathway_t_pathway_config>(nullptr);
  }

  pathway_t_pathway_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pathway_t_pathway_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pathway_t_pathway_config& from);
  void MergeFrom(const pathway_t_pathway_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pathway_t_pathway_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.pathway.t_pathway_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pathway_2eproto);
    return ::descriptor_table_pathway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kCoordinatesFieldNumber = 4,
    kMapnameFieldNumber = 5,
    kTbxidFieldNumber = 1,
    kPathwayidFieldNumber = 2,
    kMapidFieldNumber = 6,
    kNpcidFieldNumber = 7,
    kPropidFieldNumber = 8,
    kPathwaynullFieldNumber = 9,
    kIscopymapFieldNumber = 10,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string coordinates = 4;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const std::string& coordinates() const;
  void set_coordinates(const std::string& value);
  void set_coordinates(std::string&& value);
  void set_coordinates(const char* value);
  void set_coordinates(const char* value, size_t size);
  std::string* mutable_coordinates();
  std::string* release_coordinates();
  void set_allocated_coordinates(std::string* coordinates);
  private:
  const std::string& _internal_coordinates() const;
  void _internal_set_coordinates(const std::string& value);
  std::string* _internal_mutable_coordinates();
  public:

  // required string mapname = 5;
  bool has_mapname() const;
  private:
  bool _internal_has_mapname() const;
  public:
  void clear_mapname();
  const std::string& mapname() const;
  void set_mapname(const std::string& value);
  void set_mapname(std::string&& value);
  void set_mapname(const char* value);
  void set_mapname(const char* value, size_t size);
  std::string* mutable_mapname();
  std::string* release_mapname();
  void set_allocated_mapname(std::string* mapname);
  private:
  const std::string& _internal_mapname() const;
  void _internal_set_mapname(const std::string& value);
  std::string* _internal_mutable_mapname();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 pathwayid = 2 [default = 0];
  bool has_pathwayid() const;
  private:
  bool _internal_has_pathwayid() const;
  public:
  void clear_pathwayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pathwayid() const;
  void set_pathwayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pathwayid() const;
  void _internal_set_pathwayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 mapid = 6;
  bool has_mapid() const;
  private:
  bool _internal_has_mapid() const;
  public:
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 npcid = 7;
  bool has_npcid() const;
  private:
  bool _internal_has_npcid() const;
  public:
  void clear_npcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 npcid() const;
  void set_npcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_npcid() const;
  void _internal_set_npcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 propid = 8;
  bool has_propid() const;
  private:
  bool _internal_has_propid() const;
  public:
  void clear_propid();
  ::PROTOBUF_NAMESPACE_ID::uint32 propid() const;
  void set_propid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_propid() const;
  void _internal_set_propid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 pathwaynull = 9;
  bool has_pathwaynull() const;
  private:
  bool _internal_has_pathwaynull() const;
  public:
  void clear_pathwaynull();
  ::PROTOBUF_NAMESPACE_ID::uint32 pathwaynull() const;
  void set_pathwaynull(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pathwaynull() const;
  void _internal_set_pathwaynull(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 iscopymap = 10;
  bool has_iscopymap() const;
  private:
  bool _internal_has_iscopymap() const;
  public:
  void clear_iscopymap();
  ::PROTOBUF_NAMESPACE_ID::uint32 iscopymap() const;
  void set_iscopymap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iscopymap() const;
  void _internal_set_iscopymap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.pathway.t_pathway_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coordinates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pathwayid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 npcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 propid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pathwaynull_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iscopymap_;
  friend struct ::TableStruct_pathway_2eproto;
};
// -------------------------------------------------------------------

class pathway :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.pathway) */ {
 public:
  pathway();
  virtual ~pathway();

  pathway(const pathway& from);
  pathway(pathway&& from) noexcept
    : pathway() {
    *this = ::std::move(from);
  }

  inline pathway& operator=(const pathway& from) {
    CopyFrom(from);
    return *this;
  }
  inline pathway& operator=(pathway&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pathway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pathway* internal_default_instance() {
    return reinterpret_cast<const pathway*>(
               &_pathway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(pathway& a, pathway& b) {
    a.Swap(&b);
  }
  inline void Swap(pathway* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pathway* New() const final {
    return CreateMaybeMessage<pathway>(nullptr);
  }

  pathway* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pathway>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pathway& from);
  void MergeFrom(const pathway& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pathway* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.pathway";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pathway_2eproto);
    return ::descriptor_table_pathway_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef pathway_t_pathway_config t_pathway_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.pathway.t_pathway_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::pathway_t_pathway_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::pathway_t_pathway_config >*
      mutable_datas();
  private:
  const ::pb::pathway_t_pathway_config& _internal_datas(int index) const;
  ::pb::pathway_t_pathway_config* _internal_add_datas();
  public:
  const ::pb::pathway_t_pathway_config& datas(int index) const;
  ::pb::pathway_t_pathway_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::pathway_t_pathway_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.pathway)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::pathway_t_pathway_config > datas_;
  friend struct ::TableStruct_pathway_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pathway_t_pathway_config

// required uint32 tbxid = 1 [default = 0];
inline bool pathway_t_pathway_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool pathway_t_pathway_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void pathway_t_pathway_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.pathway.t_pathway_config.tbxid)
  return _internal_tbxid();
}
inline void pathway_t_pathway_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tbxid_ = value;
}
inline void pathway_t_pathway_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.pathway.t_pathway_config.tbxid)
}

// required uint32 pathwayid = 2 [default = 0];
inline bool pathway_t_pathway_config::_internal_has_pathwayid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool pathway_t_pathway_config::has_pathwayid() const {
  return _internal_has_pathwayid();
}
inline void pathway_t_pathway_config::clear_pathwayid() {
  pathwayid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::_internal_pathwayid() const {
  return pathwayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::pathwayid() const {
  // @@protoc_insertion_point(field_get:pb.pathway.t_pathway_config.pathwayid)
  return _internal_pathwayid();
}
inline void pathway_t_pathway_config::_internal_set_pathwayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  pathwayid_ = value;
}
inline void pathway_t_pathway_config::set_pathwayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pathwayid(value);
  // @@protoc_insertion_point(field_set:pb.pathway.t_pathway_config.pathwayid)
}

// required string name = 3;
inline bool pathway_t_pathway_config::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool pathway_t_pathway_config::has_name() const {
  return _internal_has_name();
}
inline void pathway_t_pathway_config::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& pathway_t_pathway_config::name() const {
  // @@protoc_insertion_point(field_get:pb.pathway.t_pathway_config.name)
  return _internal_name();
}
inline void pathway_t_pathway_config::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.pathway.t_pathway_config.name)
}
inline std::string* pathway_t_pathway_config::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.pathway.t_pathway_config.name)
  return _internal_mutable_name();
}
inline const std::string& pathway_t_pathway_config::_internal_name() const {
  return name_.GetNoArena();
}
inline void pathway_t_pathway_config::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void pathway_t_pathway_config::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.pathway.t_pathway_config.name)
}
inline void pathway_t_pathway_config::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.pathway.t_pathway_config.name)
}
inline void pathway_t_pathway_config::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.pathway.t_pathway_config.name)
}
inline std::string* pathway_t_pathway_config::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* pathway_t_pathway_config::release_name() {
  // @@protoc_insertion_point(field_release:pb.pathway.t_pathway_config.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void pathway_t_pathway_config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.pathway.t_pathway_config.name)
}

// required string coordinates = 4;
inline bool pathway_t_pathway_config::_internal_has_coordinates() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool pathway_t_pathway_config::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void pathway_t_pathway_config::clear_coordinates() {
  coordinates_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& pathway_t_pathway_config::coordinates() const {
  // @@protoc_insertion_point(field_get:pb.pathway.t_pathway_config.coordinates)
  return _internal_coordinates();
}
inline void pathway_t_pathway_config::set_coordinates(const std::string& value) {
  _internal_set_coordinates(value);
  // @@protoc_insertion_point(field_set:pb.pathway.t_pathway_config.coordinates)
}
inline std::string* pathway_t_pathway_config::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable:pb.pathway.t_pathway_config.coordinates)
  return _internal_mutable_coordinates();
}
inline const std::string& pathway_t_pathway_config::_internal_coordinates() const {
  return coordinates_.GetNoArena();
}
inline void pathway_t_pathway_config::_internal_set_coordinates(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  coordinates_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void pathway_t_pathway_config::set_coordinates(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  coordinates_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.pathway.t_pathway_config.coordinates)
}
inline void pathway_t_pathway_config::set_coordinates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  coordinates_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.pathway.t_pathway_config.coordinates)
}
inline void pathway_t_pathway_config::set_coordinates(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  coordinates_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.pathway.t_pathway_config.coordinates)
}
inline std::string* pathway_t_pathway_config::_internal_mutable_coordinates() {
  _has_bits_[0] |= 0x00000002u;
  return coordinates_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* pathway_t_pathway_config::release_coordinates() {
  // @@protoc_insertion_point(field_release:pb.pathway.t_pathway_config.coordinates)
  if (!_internal_has_coordinates()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return coordinates_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void pathway_t_pathway_config::set_allocated_coordinates(std::string* coordinates) {
  if (coordinates != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  coordinates_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coordinates);
  // @@protoc_insertion_point(field_set_allocated:pb.pathway.t_pathway_config.coordinates)
}

// required string mapname = 5;
inline bool pathway_t_pathway_config::_internal_has_mapname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool pathway_t_pathway_config::has_mapname() const {
  return _internal_has_mapname();
}
inline void pathway_t_pathway_config::clear_mapname() {
  mapname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& pathway_t_pathway_config::mapname() const {
  // @@protoc_insertion_point(field_get:pb.pathway.t_pathway_config.mapname)
  return _internal_mapname();
}
inline void pathway_t_pathway_config::set_mapname(const std::string& value) {
  _internal_set_mapname(value);
  // @@protoc_insertion_point(field_set:pb.pathway.t_pathway_config.mapname)
}
inline std::string* pathway_t_pathway_config::mutable_mapname() {
  // @@protoc_insertion_point(field_mutable:pb.pathway.t_pathway_config.mapname)
  return _internal_mutable_mapname();
}
inline const std::string& pathway_t_pathway_config::_internal_mapname() const {
  return mapname_.GetNoArena();
}
inline void pathway_t_pathway_config::_internal_set_mapname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  mapname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void pathway_t_pathway_config::set_mapname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  mapname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.pathway.t_pathway_config.mapname)
}
inline void pathway_t_pathway_config::set_mapname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  mapname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.pathway.t_pathway_config.mapname)
}
inline void pathway_t_pathway_config::set_mapname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  mapname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.pathway.t_pathway_config.mapname)
}
inline std::string* pathway_t_pathway_config::_internal_mutable_mapname() {
  _has_bits_[0] |= 0x00000004u;
  return mapname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* pathway_t_pathway_config::release_mapname() {
  // @@protoc_insertion_point(field_release:pb.pathway.t_pathway_config.mapname)
  if (!_internal_has_mapname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return mapname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void pathway_t_pathway_config::set_allocated_mapname(std::string* mapname) {
  if (mapname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mapname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapname);
  // @@protoc_insertion_point(field_set_allocated:pb.pathway.t_pathway_config.mapname)
}

// required uint32 mapid = 6;
inline bool pathway_t_pathway_config::_internal_has_mapid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool pathway_t_pathway_config::has_mapid() const {
  return _internal_has_mapid();
}
inline void pathway_t_pathway_config::clear_mapid() {
  mapid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::mapid() const {
  // @@protoc_insertion_point(field_get:pb.pathway.t_pathway_config.mapid)
  return _internal_mapid();
}
inline void pathway_t_pathway_config::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  mapid_ = value;
}
inline void pathway_t_pathway_config::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:pb.pathway.t_pathway_config.mapid)
}

// required uint32 npcid = 7;
inline bool pathway_t_pathway_config::_internal_has_npcid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool pathway_t_pathway_config::has_npcid() const {
  return _internal_has_npcid();
}
inline void pathway_t_pathway_config::clear_npcid() {
  npcid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::_internal_npcid() const {
  return npcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::npcid() const {
  // @@protoc_insertion_point(field_get:pb.pathway.t_pathway_config.npcid)
  return _internal_npcid();
}
inline void pathway_t_pathway_config::_internal_set_npcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  npcid_ = value;
}
inline void pathway_t_pathway_config::set_npcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_npcid(value);
  // @@protoc_insertion_point(field_set:pb.pathway.t_pathway_config.npcid)
}

// required uint32 propid = 8;
inline bool pathway_t_pathway_config::_internal_has_propid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool pathway_t_pathway_config::has_propid() const {
  return _internal_has_propid();
}
inline void pathway_t_pathway_config::clear_propid() {
  propid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::_internal_propid() const {
  return propid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::propid() const {
  // @@protoc_insertion_point(field_get:pb.pathway.t_pathway_config.propid)
  return _internal_propid();
}
inline void pathway_t_pathway_config::_internal_set_propid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  propid_ = value;
}
inline void pathway_t_pathway_config::set_propid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_propid(value);
  // @@protoc_insertion_point(field_set:pb.pathway.t_pathway_config.propid)
}

// required uint32 pathwaynull = 9;
inline bool pathway_t_pathway_config::_internal_has_pathwaynull() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool pathway_t_pathway_config::has_pathwaynull() const {
  return _internal_has_pathwaynull();
}
inline void pathway_t_pathway_config::clear_pathwaynull() {
  pathwaynull_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::_internal_pathwaynull() const {
  return pathwaynull_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::pathwaynull() const {
  // @@protoc_insertion_point(field_get:pb.pathway.t_pathway_config.pathwaynull)
  return _internal_pathwaynull();
}
inline void pathway_t_pathway_config::_internal_set_pathwaynull(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  pathwaynull_ = value;
}
inline void pathway_t_pathway_config::set_pathwaynull(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pathwaynull(value);
  // @@protoc_insertion_point(field_set:pb.pathway.t_pathway_config.pathwaynull)
}

// required uint32 iscopymap = 10;
inline bool pathway_t_pathway_config::_internal_has_iscopymap() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool pathway_t_pathway_config::has_iscopymap() const {
  return _internal_has_iscopymap();
}
inline void pathway_t_pathway_config::clear_iscopymap() {
  iscopymap_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::_internal_iscopymap() const {
  return iscopymap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pathway_t_pathway_config::iscopymap() const {
  // @@protoc_insertion_point(field_get:pb.pathway.t_pathway_config.iscopymap)
  return _internal_iscopymap();
}
inline void pathway_t_pathway_config::_internal_set_iscopymap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  iscopymap_ = value;
}
inline void pathway_t_pathway_config::set_iscopymap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iscopymap(value);
  // @@protoc_insertion_point(field_set:pb.pathway.t_pathway_config.iscopymap)
}

// -------------------------------------------------------------------

// pathway

// repeated .pb.pathway.t_pathway_config datas = 1;
inline int pathway::_internal_datas_size() const {
  return datas_.size();
}
inline int pathway::datas_size() const {
  return _internal_datas_size();
}
inline void pathway::clear_datas() {
  datas_.Clear();
}
inline ::pb::pathway_t_pathway_config* pathway::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.pathway.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::pathway_t_pathway_config >*
pathway::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.pathway.datas)
  return &datas_;
}
inline const ::pb::pathway_t_pathway_config& pathway::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::pathway_t_pathway_config& pathway::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.pathway.datas)
  return _internal_datas(index);
}
inline ::pb::pathway_t_pathway_config* pathway::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::pathway_t_pathway_config* pathway::add_datas() {
  // @@protoc_insertion_point(field_add:pb.pathway.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::pathway_t_pathway_config >&
pathway::datas() const {
  // @@protoc_insertion_point(field_list:pb.pathway.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pathway_2eproto
