// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loadingtips.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_loadingtips_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_loadingtips_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_loadingtips_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_loadingtips_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_loadingtips_2eproto;
namespace pb {
class loadingtips;
class loadingtipsDefaultTypeInternal;
extern loadingtipsDefaultTypeInternal _loadingtips_default_instance_;
class loadingtips_t_loadingtips;
class loadingtips_t_loadingtipsDefaultTypeInternal;
extern loadingtips_t_loadingtipsDefaultTypeInternal _loadingtips_t_loadingtips_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::loadingtips* Arena::CreateMaybeMessage<::pb::loadingtips>(Arena*);
template<> ::pb::loadingtips_t_loadingtips* Arena::CreateMaybeMessage<::pb::loadingtips_t_loadingtips>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class loadingtips_t_loadingtips :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.loadingtips.t_loadingtips) */ {
 public:
  loadingtips_t_loadingtips();
  virtual ~loadingtips_t_loadingtips();

  loadingtips_t_loadingtips(const loadingtips_t_loadingtips& from);
  loadingtips_t_loadingtips(loadingtips_t_loadingtips&& from) noexcept
    : loadingtips_t_loadingtips() {
    *this = ::std::move(from);
  }

  inline loadingtips_t_loadingtips& operator=(const loadingtips_t_loadingtips& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadingtips_t_loadingtips& operator=(loadingtips_t_loadingtips&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loadingtips_t_loadingtips& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loadingtips_t_loadingtips* internal_default_instance() {
    return reinterpret_cast<const loadingtips_t_loadingtips*>(
               &_loadingtips_t_loadingtips_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(loadingtips_t_loadingtips& a, loadingtips_t_loadingtips& b) {
    a.Swap(&b);
  }
  inline void Swap(loadingtips_t_loadingtips* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadingtips_t_loadingtips* New() const final {
    return CreateMaybeMessage<loadingtips_t_loadingtips>(nullptr);
  }

  loadingtips_t_loadingtips* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadingtips_t_loadingtips>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loadingtips_t_loadingtips& from);
  void MergeFrom(const loadingtips_t_loadingtips& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadingtips_t_loadingtips* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.loadingtips.t_loadingtips";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_loadingtips_2eproto);
    return ::descriptor_table_loadingtips_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipsFieldNumber = 5,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kMinLvFieldNumber = 3,
    kMaxLvFieldNumber = 4,
  };
  // required string tips = 5;
  bool has_tips() const;
  private:
  bool _internal_has_tips() const;
  public:
  void clear_tips();
  const std::string& tips() const;
  void set_tips(const std::string& value);
  void set_tips(std::string&& value);
  void set_tips(const char* value);
  void set_tips(const char* value, size_t size);
  std::string* mutable_tips();
  std::string* release_tips();
  void set_allocated_tips(std::string* tips);
  private:
  const std::string& _internal_tips() const;
  void _internal_set_tips(const std::string& value);
  std::string* _internal_mutable_tips();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 min_lv = 3;
  bool has_min_lv() const;
  private:
  bool _internal_has_min_lv() const;
  public:
  void clear_min_lv();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_lv() const;
  void set_min_lv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_lv() const;
  void _internal_set_min_lv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 max_lv = 4;
  bool has_max_lv() const;
  private:
  bool _internal_has_max_lv() const;
  public:
  void clear_max_lv();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_lv() const;
  void set_max_lv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_lv() const;
  void _internal_set_max_lv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.loadingtips.t_loadingtips)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tips_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_lv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_lv_;
  friend struct ::TableStruct_loadingtips_2eproto;
};
// -------------------------------------------------------------------

class loadingtips :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.loadingtips) */ {
 public:
  loadingtips();
  virtual ~loadingtips();

  loadingtips(const loadingtips& from);
  loadingtips(loadingtips&& from) noexcept
    : loadingtips() {
    *this = ::std::move(from);
  }

  inline loadingtips& operator=(const loadingtips& from) {
    CopyFrom(from);
    return *this;
  }
  inline loadingtips& operator=(loadingtips&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const loadingtips& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loadingtips* internal_default_instance() {
    return reinterpret_cast<const loadingtips*>(
               &_loadingtips_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(loadingtips& a, loadingtips& b) {
    a.Swap(&b);
  }
  inline void Swap(loadingtips* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline loadingtips* New() const final {
    return CreateMaybeMessage<loadingtips>(nullptr);
  }

  loadingtips* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<loadingtips>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const loadingtips& from);
  void MergeFrom(const loadingtips& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loadingtips* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.loadingtips";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_loadingtips_2eproto);
    return ::descriptor_table_loadingtips_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef loadingtips_t_loadingtips t_loadingtips;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.loadingtips.t_loadingtips datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::loadingtips_t_loadingtips* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::loadingtips_t_loadingtips >*
      mutable_datas();
  private:
  const ::pb::loadingtips_t_loadingtips& _internal_datas(int index) const;
  ::pb::loadingtips_t_loadingtips* _internal_add_datas();
  public:
  const ::pb::loadingtips_t_loadingtips& datas(int index) const;
  ::pb::loadingtips_t_loadingtips* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::loadingtips_t_loadingtips >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.loadingtips)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::loadingtips_t_loadingtips > datas_;
  friend struct ::TableStruct_loadingtips_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// loadingtips_t_loadingtips

// required uint32 tbxid = 1 [default = 0];
inline bool loadingtips_t_loadingtips::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool loadingtips_t_loadingtips::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void loadingtips_t_loadingtips::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 loadingtips_t_loadingtips::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 loadingtips_t_loadingtips::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.loadingtips.t_loadingtips.tbxid)
  return _internal_tbxid();
}
inline void loadingtips_t_loadingtips::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tbxid_ = value;
}
inline void loadingtips_t_loadingtips::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.loadingtips.t_loadingtips.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool loadingtips_t_loadingtips::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool loadingtips_t_loadingtips::has_id() const {
  return _internal_has_id();
}
inline void loadingtips_t_loadingtips::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 loadingtips_t_loadingtips::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 loadingtips_t_loadingtips::id() const {
  // @@protoc_insertion_point(field_get:pb.loadingtips.t_loadingtips.id)
  return _internal_id();
}
inline void loadingtips_t_loadingtips::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void loadingtips_t_loadingtips::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.loadingtips.t_loadingtips.id)
}

// required uint32 min_lv = 3;
inline bool loadingtips_t_loadingtips::_internal_has_min_lv() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool loadingtips_t_loadingtips::has_min_lv() const {
  return _internal_has_min_lv();
}
inline void loadingtips_t_loadingtips::clear_min_lv() {
  min_lv_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 loadingtips_t_loadingtips::_internal_min_lv() const {
  return min_lv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 loadingtips_t_loadingtips::min_lv() const {
  // @@protoc_insertion_point(field_get:pb.loadingtips.t_loadingtips.min_lv)
  return _internal_min_lv();
}
inline void loadingtips_t_loadingtips::_internal_set_min_lv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  min_lv_ = value;
}
inline void loadingtips_t_loadingtips::set_min_lv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_lv(value);
  // @@protoc_insertion_point(field_set:pb.loadingtips.t_loadingtips.min_lv)
}

// required uint32 max_lv = 4;
inline bool loadingtips_t_loadingtips::_internal_has_max_lv() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool loadingtips_t_loadingtips::has_max_lv() const {
  return _internal_has_max_lv();
}
inline void loadingtips_t_loadingtips::clear_max_lv() {
  max_lv_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 loadingtips_t_loadingtips::_internal_max_lv() const {
  return max_lv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 loadingtips_t_loadingtips::max_lv() const {
  // @@protoc_insertion_point(field_get:pb.loadingtips.t_loadingtips.max_lv)
  return _internal_max_lv();
}
inline void loadingtips_t_loadingtips::_internal_set_max_lv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_lv_ = value;
}
inline void loadingtips_t_loadingtips::set_max_lv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_lv(value);
  // @@protoc_insertion_point(field_set:pb.loadingtips.t_loadingtips.max_lv)
}

// required string tips = 5;
inline bool loadingtips_t_loadingtips::_internal_has_tips() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool loadingtips_t_loadingtips::has_tips() const {
  return _internal_has_tips();
}
inline void loadingtips_t_loadingtips::clear_tips() {
  tips_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& loadingtips_t_loadingtips::tips() const {
  // @@protoc_insertion_point(field_get:pb.loadingtips.t_loadingtips.tips)
  return _internal_tips();
}
inline void loadingtips_t_loadingtips::set_tips(const std::string& value) {
  _internal_set_tips(value);
  // @@protoc_insertion_point(field_set:pb.loadingtips.t_loadingtips.tips)
}
inline std::string* loadingtips_t_loadingtips::mutable_tips() {
  // @@protoc_insertion_point(field_mutable:pb.loadingtips.t_loadingtips.tips)
  return _internal_mutable_tips();
}
inline const std::string& loadingtips_t_loadingtips::_internal_tips() const {
  return tips_.GetNoArena();
}
inline void loadingtips_t_loadingtips::_internal_set_tips(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void loadingtips_t_loadingtips::set_tips(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tips_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.loadingtips.t_loadingtips.tips)
}
inline void loadingtips_t_loadingtips::set_tips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.loadingtips.t_loadingtips.tips)
}
inline void loadingtips_t_loadingtips::set_tips(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.loadingtips.t_loadingtips.tips)
}
inline std::string* loadingtips_t_loadingtips::_internal_mutable_tips() {
  _has_bits_[0] |= 0x00000001u;
  return tips_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* loadingtips_t_loadingtips::release_tips() {
  // @@protoc_insertion_point(field_release:pb.loadingtips.t_loadingtips.tips)
  if (!_internal_has_tips()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tips_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void loadingtips_t_loadingtips::set_allocated_tips(std::string* tips) {
  if (tips != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tips_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tips);
  // @@protoc_insertion_point(field_set_allocated:pb.loadingtips.t_loadingtips.tips)
}

// -------------------------------------------------------------------

// loadingtips

// repeated .pb.loadingtips.t_loadingtips datas = 1;
inline int loadingtips::_internal_datas_size() const {
  return datas_.size();
}
inline int loadingtips::datas_size() const {
  return _internal_datas_size();
}
inline void loadingtips::clear_datas() {
  datas_.Clear();
}
inline ::pb::loadingtips_t_loadingtips* loadingtips::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.loadingtips.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::loadingtips_t_loadingtips >*
loadingtips::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.loadingtips.datas)
  return &datas_;
}
inline const ::pb::loadingtips_t_loadingtips& loadingtips::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::loadingtips_t_loadingtips& loadingtips::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.loadingtips.datas)
  return _internal_datas(index);
}
inline ::pb::loadingtips_t_loadingtips* loadingtips::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::loadingtips_t_loadingtips* loadingtips::add_datas() {
  // @@protoc_insertion_point(field_add:pb.loadingtips.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::loadingtips_t_loadingtips >&
loadingtips::datas() const {
  // @@protoc_insertion_point(field_list:pb.loadingtips.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_loadingtips_2eproto
