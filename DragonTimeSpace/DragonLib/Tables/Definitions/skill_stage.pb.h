// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill_stage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skill_5fstage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skill_5fstage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skill_5fstage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skill_5fstage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skill_5fstage_2eproto;
namespace pb {
class skill_stage;
class skill_stageDefaultTypeInternal;
extern skill_stageDefaultTypeInternal _skill_stage_default_instance_;
class skill_stage_t_skill_stage_config;
class skill_stage_t_skill_stage_configDefaultTypeInternal;
extern skill_stage_t_skill_stage_configDefaultTypeInternal _skill_stage_t_skill_stage_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::skill_stage* Arena::CreateMaybeMessage<::pb::skill_stage>(Arena*);
template<> ::pb::skill_stage_t_skill_stage_config* Arena::CreateMaybeMessage<::pb::skill_stage_t_skill_stage_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class skill_stage_t_skill_stage_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.skill_stage.t_skill_stage_config) */ {
 public:
  skill_stage_t_skill_stage_config();
  virtual ~skill_stage_t_skill_stage_config();

  skill_stage_t_skill_stage_config(const skill_stage_t_skill_stage_config& from);
  skill_stage_t_skill_stage_config(skill_stage_t_skill_stage_config&& from) noexcept
    : skill_stage_t_skill_stage_config() {
    *this = ::std::move(from);
  }

  inline skill_stage_t_skill_stage_config& operator=(const skill_stage_t_skill_stage_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline skill_stage_t_skill_stage_config& operator=(skill_stage_t_skill_stage_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const skill_stage_t_skill_stage_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const skill_stage_t_skill_stage_config* internal_default_instance() {
    return reinterpret_cast<const skill_stage_t_skill_stage_config*>(
               &_skill_stage_t_skill_stage_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(skill_stage_t_skill_stage_config& a, skill_stage_t_skill_stage_config& b) {
    a.Swap(&b);
  }
  inline void Swap(skill_stage_t_skill_stage_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline skill_stage_t_skill_stage_config* New() const final {
    return CreateMaybeMessage<skill_stage_t_skill_stage_config>(nullptr);
  }

  skill_stage_t_skill_stage_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<skill_stage_t_skill_stage_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const skill_stage_t_skill_stage_config& from);
  void MergeFrom(const skill_stage_t_skill_stage_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(skill_stage_t_skill_stage_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.skill_stage.t_skill_stage_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skill_5fstage_2eproto);
    return ::descriptor_table_skill_5fstage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipNameFieldNumber = 4,
    kMoveDisFieldNumber = 7,
    kMoveeffectFieldNumber = 8,
    kSightTypeFieldNumber = 14,
    kSkillPortraitFieldNumber = 16,
    kAttackWarnFieldNumber = 18,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kSkillidFieldNumber = 3,
    kActionIDFieldNumber = 5,
    kEffectIdFieldNumber = 6,
    kPoseTimeFieldNumber = 9,
    kCanCancelPreFistFieldNumber = 10,
    kCanCancelCloseFistFieldNumber = 11,
    kMoveCancelCloseFistFieldNumber = 12,
    kNeedFaceTargetFieldNumber = 13,
    kSkillSpeedFieldNumber = 15,
    kCheckfailFieldNumber = 17,
  };
  // required string ClipName = 4;
  bool has_clipname() const;
  private:
  bool _internal_has_clipname() const;
  public:
  void clear_clipname();
  const std::string& clipname() const;
  void set_clipname(const std::string& value);
  void set_clipname(std::string&& value);
  void set_clipname(const char* value);
  void set_clipname(const char* value, size_t size);
  std::string* mutable_clipname();
  std::string* release_clipname();
  void set_allocated_clipname(std::string* clipname);
  private:
  const std::string& _internal_clipname() const;
  void _internal_set_clipname(const std::string& value);
  std::string* _internal_mutable_clipname();
  public:

  // required string MoveDis = 7;
  bool has_movedis() const;
  private:
  bool _internal_has_movedis() const;
  public:
  void clear_movedis();
  const std::string& movedis() const;
  void set_movedis(const std::string& value);
  void set_movedis(std::string&& value);
  void set_movedis(const char* value);
  void set_movedis(const char* value, size_t size);
  std::string* mutable_movedis();
  std::string* release_movedis();
  void set_allocated_movedis(std::string* movedis);
  private:
  const std::string& _internal_movedis() const;
  void _internal_set_movedis(const std::string& value);
  std::string* _internal_mutable_movedis();
  public:

  // required string Moveeffect = 8;
  bool has_moveeffect() const;
  private:
  bool _internal_has_moveeffect() const;
  public:
  void clear_moveeffect();
  const std::string& moveeffect() const;
  void set_moveeffect(const std::string& value);
  void set_moveeffect(std::string&& value);
  void set_moveeffect(const char* value);
  void set_moveeffect(const char* value, size_t size);
  std::string* mutable_moveeffect();
  std::string* release_moveeffect();
  void set_allocated_moveeffect(std::string* moveeffect);
  private:
  const std::string& _internal_moveeffect() const;
  void _internal_set_moveeffect(const std::string& value);
  std::string* _internal_mutable_moveeffect();
  public:

  // required string SightType = 14;
  bool has_sighttype() const;
  private:
  bool _internal_has_sighttype() const;
  public:
  void clear_sighttype();
  const std::string& sighttype() const;
  void set_sighttype(const std::string& value);
  void set_sighttype(std::string&& value);
  void set_sighttype(const char* value);
  void set_sighttype(const char* value, size_t size);
  std::string* mutable_sighttype();
  std::string* release_sighttype();
  void set_allocated_sighttype(std::string* sighttype);
  private:
  const std::string& _internal_sighttype() const;
  void _internal_set_sighttype(const std::string& value);
  std::string* _internal_mutable_sighttype();
  public:

  // required string SkillPortrait = 16;
  bool has_skillportrait() const;
  private:
  bool _internal_has_skillportrait() const;
  public:
  void clear_skillportrait();
  const std::string& skillportrait() const;
  void set_skillportrait(const std::string& value);
  void set_skillportrait(std::string&& value);
  void set_skillportrait(const char* value);
  void set_skillportrait(const char* value, size_t size);
  std::string* mutable_skillportrait();
  std::string* release_skillportrait();
  void set_allocated_skillportrait(std::string* skillportrait);
  private:
  const std::string& _internal_skillportrait() const;
  void _internal_set_skillportrait(const std::string& value);
  std::string* _internal_mutable_skillportrait();
  public:

  // required string AttackWarn = 18;
  bool has_attackwarn() const;
  private:
  bool _internal_has_attackwarn() const;
  public:
  void clear_attackwarn();
  const std::string& attackwarn() const;
  void set_attackwarn(const std::string& value);
  void set_attackwarn(std::string&& value);
  void set_attackwarn(const char* value);
  void set_attackwarn(const char* value, size_t size);
  std::string* mutable_attackwarn();
  std::string* release_attackwarn();
  void set_allocated_attackwarn(std::string* attackwarn);
  private:
  const std::string& _internal_attackwarn() const;
  void _internal_set_attackwarn(const std::string& value);
  std::string* _internal_mutable_attackwarn();
  public:

  // required uint64 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 skillid = 3;
  bool has_skillid() const;
  private:
  bool _internal_has_skillid() const;
  public:
  void clear_skillid();
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid() const;
  void set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skillid() const;
  void _internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ActionID = 5;
  bool has_actionid() const;
  private:
  bool _internal_has_actionid() const;
  public:
  void clear_actionid();
  ::PROTOBUF_NAMESPACE_ID::uint32 actionid() const;
  void set_actionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_actionid() const;
  void _internal_set_actionid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 EffectId = 6;
  bool has_effectid() const;
  private:
  bool _internal_has_effectid() const;
  public:
  void clear_effectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 effectid() const;
  void set_effectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_effectid() const;
  void _internal_set_effectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float PoseTime = 9;
  bool has_posetime() const;
  private:
  bool _internal_has_posetime() const;
  public:
  void clear_posetime();
  float posetime() const;
  void set_posetime(float value);
  private:
  float _internal_posetime() const;
  void _internal_set_posetime(float value);
  public:

  // required bool CanCancelPreFist = 10;
  bool has_cancancelprefist() const;
  private:
  bool _internal_has_cancancelprefist() const;
  public:
  void clear_cancancelprefist();
  bool cancancelprefist() const;
  void set_cancancelprefist(bool value);
  private:
  bool _internal_cancancelprefist() const;
  void _internal_set_cancancelprefist(bool value);
  public:

  // required bool CanCancelCloseFist = 11;
  bool has_cancancelclosefist() const;
  private:
  bool _internal_has_cancancelclosefist() const;
  public:
  void clear_cancancelclosefist();
  bool cancancelclosefist() const;
  void set_cancancelclosefist(bool value);
  private:
  bool _internal_cancancelclosefist() const;
  void _internal_set_cancancelclosefist(bool value);
  public:

  // required bool MoveCancelCloseFist = 12;
  bool has_movecancelclosefist() const;
  private:
  bool _internal_has_movecancelclosefist() const;
  public:
  void clear_movecancelclosefist();
  bool movecancelclosefist() const;
  void set_movecancelclosefist(bool value);
  private:
  bool _internal_movecancelclosefist() const;
  void _internal_set_movecancelclosefist(bool value);
  public:

  // required bool NeedFaceTarget = 13;
  bool has_needfacetarget() const;
  private:
  bool _internal_has_needfacetarget() const;
  public:
  void clear_needfacetarget();
  bool needfacetarget() const;
  void set_needfacetarget(bool value);
  private:
  bool _internal_needfacetarget() const;
  void _internal_set_needfacetarget(bool value);
  public:

  // required uint32 SkillSpeed = 15;
  bool has_skillspeed() const;
  private:
  bool _internal_has_skillspeed() const;
  public:
  void clear_skillspeed();
  ::PROTOBUF_NAMESPACE_ID::uint32 skillspeed() const;
  void set_skillspeed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skillspeed() const;
  void _internal_set_skillspeed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 Checkfail = 17;
  bool has_checkfail() const;
  private:
  bool _internal_has_checkfail() const;
  public:
  void clear_checkfail();
  ::PROTOBUF_NAMESPACE_ID::uint32 checkfail() const;
  void set_checkfail(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_checkfail() const;
  void _internal_set_checkfail(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.skill_stage.t_skill_stage_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clipname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr movedis_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr moveeffect_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sighttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skillportrait_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attackwarn_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 actionid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 effectid_;
  float posetime_;
  bool cancancelprefist_;
  bool cancancelclosefist_;
  bool movecancelclosefist_;
  bool needfacetarget_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skillspeed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 checkfail_;
  friend struct ::TableStruct_skill_5fstage_2eproto;
};
// -------------------------------------------------------------------

class skill_stage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.skill_stage) */ {
 public:
  skill_stage();
  virtual ~skill_stage();

  skill_stage(const skill_stage& from);
  skill_stage(skill_stage&& from) noexcept
    : skill_stage() {
    *this = ::std::move(from);
  }

  inline skill_stage& operator=(const skill_stage& from) {
    CopyFrom(from);
    return *this;
  }
  inline skill_stage& operator=(skill_stage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const skill_stage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const skill_stage* internal_default_instance() {
    return reinterpret_cast<const skill_stage*>(
               &_skill_stage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(skill_stage& a, skill_stage& b) {
    a.Swap(&b);
  }
  inline void Swap(skill_stage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline skill_stage* New() const final {
    return CreateMaybeMessage<skill_stage>(nullptr);
  }

  skill_stage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<skill_stage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const skill_stage& from);
  void MergeFrom(const skill_stage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(skill_stage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.skill_stage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skill_5fstage_2eproto);
    return ::descriptor_table_skill_5fstage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef skill_stage_t_skill_stage_config t_skill_stage_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.skill_stage.t_skill_stage_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::skill_stage_t_skill_stage_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_stage_t_skill_stage_config >*
      mutable_datas();
  private:
  const ::pb::skill_stage_t_skill_stage_config& _internal_datas(int index) const;
  ::pb::skill_stage_t_skill_stage_config* _internal_add_datas();
  public:
  const ::pb::skill_stage_t_skill_stage_config& datas(int index) const;
  ::pb::skill_stage_t_skill_stage_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_stage_t_skill_stage_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.skill_stage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_stage_t_skill_stage_config > datas_;
  friend struct ::TableStruct_skill_5fstage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// skill_stage_t_skill_stage_config

// required uint64 tbxid = 1 [default = 0];
inline bool skill_stage_t_skill_stage_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void skill_stage_t_skill_stage_config::clear_tbxid() {
  tbxid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 skill_stage_t_skill_stage_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 skill_stage_t_skill_stage_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.tbxid)
  return _internal_tbxid();
}
inline void skill_stage_t_skill_stage_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  tbxid_ = value;
}
inline void skill_stage_t_skill_stage_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.tbxid)
}

// required uint64 id = 2 [default = 0];
inline bool skill_stage_t_skill_stage_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_id() const {
  return _internal_has_id();
}
inline void skill_stage_t_skill_stage_config::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 skill_stage_t_skill_stage_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 skill_stage_t_skill_stage_config::id() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.id)
  return _internal_id();
}
inline void skill_stage_t_skill_stage_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
}
inline void skill_stage_t_skill_stage_config::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.id)
}

// required uint32 skillid = 3;
inline bool skill_stage_t_skill_stage_config::_internal_has_skillid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_skillid() const {
  return _internal_has_skillid();
}
inline void skill_stage_t_skill_stage_config::clear_skillid() {
  skillid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_stage_t_skill_stage_config::_internal_skillid() const {
  return skillid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_stage_t_skill_stage_config::skillid() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.skillid)
  return _internal_skillid();
}
inline void skill_stage_t_skill_stage_config::_internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  skillid_ = value;
}
inline void skill_stage_t_skill_stage_config::set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.skillid)
}

// required string ClipName = 4;
inline bool skill_stage_t_skill_stage_config::_internal_has_clipname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_clipname() const {
  return _internal_has_clipname();
}
inline void skill_stage_t_skill_stage_config::clear_clipname() {
  clipname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& skill_stage_t_skill_stage_config::clipname() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.ClipName)
  return _internal_clipname();
}
inline void skill_stage_t_skill_stage_config::set_clipname(const std::string& value) {
  _internal_set_clipname(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.ClipName)
}
inline std::string* skill_stage_t_skill_stage_config::mutable_clipname() {
  // @@protoc_insertion_point(field_mutable:pb.skill_stage.t_skill_stage_config.ClipName)
  return _internal_mutable_clipname();
}
inline const std::string& skill_stage_t_skill_stage_config::_internal_clipname() const {
  return clipname_.GetNoArena();
}
inline void skill_stage_t_skill_stage_config::_internal_set_clipname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  clipname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_stage_t_skill_stage_config::set_clipname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  clipname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_stage.t_skill_stage_config.ClipName)
}
inline void skill_stage_t_skill_stage_config::set_clipname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  clipname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_stage.t_skill_stage_config.ClipName)
}
inline void skill_stage_t_skill_stage_config::set_clipname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  clipname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_stage.t_skill_stage_config.ClipName)
}
inline std::string* skill_stage_t_skill_stage_config::_internal_mutable_clipname() {
  _has_bits_[0] |= 0x00000001u;
  return clipname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_stage_t_skill_stage_config::release_clipname() {
  // @@protoc_insertion_point(field_release:pb.skill_stage.t_skill_stage_config.ClipName)
  if (!_internal_has_clipname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return clipname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_stage_t_skill_stage_config::set_allocated_clipname(std::string* clipname) {
  if (clipname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clipname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clipname);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_stage.t_skill_stage_config.ClipName)
}

// required uint32 ActionID = 5;
inline bool skill_stage_t_skill_stage_config::_internal_has_actionid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_actionid() const {
  return _internal_has_actionid();
}
inline void skill_stage_t_skill_stage_config::clear_actionid() {
  actionid_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_stage_t_skill_stage_config::_internal_actionid() const {
  return actionid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_stage_t_skill_stage_config::actionid() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.ActionID)
  return _internal_actionid();
}
inline void skill_stage_t_skill_stage_config::_internal_set_actionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  actionid_ = value;
}
inline void skill_stage_t_skill_stage_config::set_actionid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_actionid(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.ActionID)
}

// required uint32 EffectId = 6;
inline bool skill_stage_t_skill_stage_config::_internal_has_effectid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_effectid() const {
  return _internal_has_effectid();
}
inline void skill_stage_t_skill_stage_config::clear_effectid() {
  effectid_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_stage_t_skill_stage_config::_internal_effectid() const {
  return effectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_stage_t_skill_stage_config::effectid() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.EffectId)
  return _internal_effectid();
}
inline void skill_stage_t_skill_stage_config::_internal_set_effectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  effectid_ = value;
}
inline void skill_stage_t_skill_stage_config::set_effectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_effectid(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.EffectId)
}

// required string MoveDis = 7;
inline bool skill_stage_t_skill_stage_config::_internal_has_movedis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_movedis() const {
  return _internal_has_movedis();
}
inline void skill_stage_t_skill_stage_config::clear_movedis() {
  movedis_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& skill_stage_t_skill_stage_config::movedis() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.MoveDis)
  return _internal_movedis();
}
inline void skill_stage_t_skill_stage_config::set_movedis(const std::string& value) {
  _internal_set_movedis(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.MoveDis)
}
inline std::string* skill_stage_t_skill_stage_config::mutable_movedis() {
  // @@protoc_insertion_point(field_mutable:pb.skill_stage.t_skill_stage_config.MoveDis)
  return _internal_mutable_movedis();
}
inline const std::string& skill_stage_t_skill_stage_config::_internal_movedis() const {
  return movedis_.GetNoArena();
}
inline void skill_stage_t_skill_stage_config::_internal_set_movedis(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  movedis_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_stage_t_skill_stage_config::set_movedis(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  movedis_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_stage.t_skill_stage_config.MoveDis)
}
inline void skill_stage_t_skill_stage_config::set_movedis(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  movedis_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_stage.t_skill_stage_config.MoveDis)
}
inline void skill_stage_t_skill_stage_config::set_movedis(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  movedis_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_stage.t_skill_stage_config.MoveDis)
}
inline std::string* skill_stage_t_skill_stage_config::_internal_mutable_movedis() {
  _has_bits_[0] |= 0x00000002u;
  return movedis_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_stage_t_skill_stage_config::release_movedis() {
  // @@protoc_insertion_point(field_release:pb.skill_stage.t_skill_stage_config.MoveDis)
  if (!_internal_has_movedis()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return movedis_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_stage_t_skill_stage_config::set_allocated_movedis(std::string* movedis) {
  if (movedis != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  movedis_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), movedis);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_stage.t_skill_stage_config.MoveDis)
}

// required string Moveeffect = 8;
inline bool skill_stage_t_skill_stage_config::_internal_has_moveeffect() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_moveeffect() const {
  return _internal_has_moveeffect();
}
inline void skill_stage_t_skill_stage_config::clear_moveeffect() {
  moveeffect_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& skill_stage_t_skill_stage_config::moveeffect() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.Moveeffect)
  return _internal_moveeffect();
}
inline void skill_stage_t_skill_stage_config::set_moveeffect(const std::string& value) {
  _internal_set_moveeffect(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.Moveeffect)
}
inline std::string* skill_stage_t_skill_stage_config::mutable_moveeffect() {
  // @@protoc_insertion_point(field_mutable:pb.skill_stage.t_skill_stage_config.Moveeffect)
  return _internal_mutable_moveeffect();
}
inline const std::string& skill_stage_t_skill_stage_config::_internal_moveeffect() const {
  return moveeffect_.GetNoArena();
}
inline void skill_stage_t_skill_stage_config::_internal_set_moveeffect(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  moveeffect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_stage_t_skill_stage_config::set_moveeffect(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  moveeffect_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_stage.t_skill_stage_config.Moveeffect)
}
inline void skill_stage_t_skill_stage_config::set_moveeffect(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  moveeffect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_stage.t_skill_stage_config.Moveeffect)
}
inline void skill_stage_t_skill_stage_config::set_moveeffect(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  moveeffect_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_stage.t_skill_stage_config.Moveeffect)
}
inline std::string* skill_stage_t_skill_stage_config::_internal_mutable_moveeffect() {
  _has_bits_[0] |= 0x00000004u;
  return moveeffect_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_stage_t_skill_stage_config::release_moveeffect() {
  // @@protoc_insertion_point(field_release:pb.skill_stage.t_skill_stage_config.Moveeffect)
  if (!_internal_has_moveeffect()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return moveeffect_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_stage_t_skill_stage_config::set_allocated_moveeffect(std::string* moveeffect) {
  if (moveeffect != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  moveeffect_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), moveeffect);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_stage.t_skill_stage_config.Moveeffect)
}

// required float PoseTime = 9;
inline bool skill_stage_t_skill_stage_config::_internal_has_posetime() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_posetime() const {
  return _internal_has_posetime();
}
inline void skill_stage_t_skill_stage_config::clear_posetime() {
  posetime_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float skill_stage_t_skill_stage_config::_internal_posetime() const {
  return posetime_;
}
inline float skill_stage_t_skill_stage_config::posetime() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.PoseTime)
  return _internal_posetime();
}
inline void skill_stage_t_skill_stage_config::_internal_set_posetime(float value) {
  _has_bits_[0] |= 0x00000800u;
  posetime_ = value;
}
inline void skill_stage_t_skill_stage_config::set_posetime(float value) {
  _internal_set_posetime(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.PoseTime)
}

// required bool CanCancelPreFist = 10;
inline bool skill_stage_t_skill_stage_config::_internal_has_cancancelprefist() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_cancancelprefist() const {
  return _internal_has_cancancelprefist();
}
inline void skill_stage_t_skill_stage_config::clear_cancancelprefist() {
  cancancelprefist_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool skill_stage_t_skill_stage_config::_internal_cancancelprefist() const {
  return cancancelprefist_;
}
inline bool skill_stage_t_skill_stage_config::cancancelprefist() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.CanCancelPreFist)
  return _internal_cancancelprefist();
}
inline void skill_stage_t_skill_stage_config::_internal_set_cancancelprefist(bool value) {
  _has_bits_[0] |= 0x00001000u;
  cancancelprefist_ = value;
}
inline void skill_stage_t_skill_stage_config::set_cancancelprefist(bool value) {
  _internal_set_cancancelprefist(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.CanCancelPreFist)
}

// required bool CanCancelCloseFist = 11;
inline bool skill_stage_t_skill_stage_config::_internal_has_cancancelclosefist() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_cancancelclosefist() const {
  return _internal_has_cancancelclosefist();
}
inline void skill_stage_t_skill_stage_config::clear_cancancelclosefist() {
  cancancelclosefist_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool skill_stage_t_skill_stage_config::_internal_cancancelclosefist() const {
  return cancancelclosefist_;
}
inline bool skill_stage_t_skill_stage_config::cancancelclosefist() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.CanCancelCloseFist)
  return _internal_cancancelclosefist();
}
inline void skill_stage_t_skill_stage_config::_internal_set_cancancelclosefist(bool value) {
  _has_bits_[0] |= 0x00002000u;
  cancancelclosefist_ = value;
}
inline void skill_stage_t_skill_stage_config::set_cancancelclosefist(bool value) {
  _internal_set_cancancelclosefist(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.CanCancelCloseFist)
}

// required bool MoveCancelCloseFist = 12;
inline bool skill_stage_t_skill_stage_config::_internal_has_movecancelclosefist() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_movecancelclosefist() const {
  return _internal_has_movecancelclosefist();
}
inline void skill_stage_t_skill_stage_config::clear_movecancelclosefist() {
  movecancelclosefist_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool skill_stage_t_skill_stage_config::_internal_movecancelclosefist() const {
  return movecancelclosefist_;
}
inline bool skill_stage_t_skill_stage_config::movecancelclosefist() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.MoveCancelCloseFist)
  return _internal_movecancelclosefist();
}
inline void skill_stage_t_skill_stage_config::_internal_set_movecancelclosefist(bool value) {
  _has_bits_[0] |= 0x00004000u;
  movecancelclosefist_ = value;
}
inline void skill_stage_t_skill_stage_config::set_movecancelclosefist(bool value) {
  _internal_set_movecancelclosefist(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.MoveCancelCloseFist)
}

// required bool NeedFaceTarget = 13;
inline bool skill_stage_t_skill_stage_config::_internal_has_needfacetarget() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_needfacetarget() const {
  return _internal_has_needfacetarget();
}
inline void skill_stage_t_skill_stage_config::clear_needfacetarget() {
  needfacetarget_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool skill_stage_t_skill_stage_config::_internal_needfacetarget() const {
  return needfacetarget_;
}
inline bool skill_stage_t_skill_stage_config::needfacetarget() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.NeedFaceTarget)
  return _internal_needfacetarget();
}
inline void skill_stage_t_skill_stage_config::_internal_set_needfacetarget(bool value) {
  _has_bits_[0] |= 0x00008000u;
  needfacetarget_ = value;
}
inline void skill_stage_t_skill_stage_config::set_needfacetarget(bool value) {
  _internal_set_needfacetarget(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.NeedFaceTarget)
}

// required string SightType = 14;
inline bool skill_stage_t_skill_stage_config::_internal_has_sighttype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_sighttype() const {
  return _internal_has_sighttype();
}
inline void skill_stage_t_skill_stage_config::clear_sighttype() {
  sighttype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& skill_stage_t_skill_stage_config::sighttype() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.SightType)
  return _internal_sighttype();
}
inline void skill_stage_t_skill_stage_config::set_sighttype(const std::string& value) {
  _internal_set_sighttype(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.SightType)
}
inline std::string* skill_stage_t_skill_stage_config::mutable_sighttype() {
  // @@protoc_insertion_point(field_mutable:pb.skill_stage.t_skill_stage_config.SightType)
  return _internal_mutable_sighttype();
}
inline const std::string& skill_stage_t_skill_stage_config::_internal_sighttype() const {
  return sighttype_.GetNoArena();
}
inline void skill_stage_t_skill_stage_config::_internal_set_sighttype(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  sighttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_stage_t_skill_stage_config::set_sighttype(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  sighttype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_stage.t_skill_stage_config.SightType)
}
inline void skill_stage_t_skill_stage_config::set_sighttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  sighttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_stage.t_skill_stage_config.SightType)
}
inline void skill_stage_t_skill_stage_config::set_sighttype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  sighttype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_stage.t_skill_stage_config.SightType)
}
inline std::string* skill_stage_t_skill_stage_config::_internal_mutable_sighttype() {
  _has_bits_[0] |= 0x00000008u;
  return sighttype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_stage_t_skill_stage_config::release_sighttype() {
  // @@protoc_insertion_point(field_release:pb.skill_stage.t_skill_stage_config.SightType)
  if (!_internal_has_sighttype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return sighttype_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_stage_t_skill_stage_config::set_allocated_sighttype(std::string* sighttype) {
  if (sighttype != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sighttype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sighttype);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_stage.t_skill_stage_config.SightType)
}

// required uint32 SkillSpeed = 15;
inline bool skill_stage_t_skill_stage_config::_internal_has_skillspeed() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_skillspeed() const {
  return _internal_has_skillspeed();
}
inline void skill_stage_t_skill_stage_config::clear_skillspeed() {
  skillspeed_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_stage_t_skill_stage_config::_internal_skillspeed() const {
  return skillspeed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_stage_t_skill_stage_config::skillspeed() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.SkillSpeed)
  return _internal_skillspeed();
}
inline void skill_stage_t_skill_stage_config::_internal_set_skillspeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  skillspeed_ = value;
}
inline void skill_stage_t_skill_stage_config::set_skillspeed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skillspeed(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.SkillSpeed)
}

// required string SkillPortrait = 16;
inline bool skill_stage_t_skill_stage_config::_internal_has_skillportrait() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_skillportrait() const {
  return _internal_has_skillportrait();
}
inline void skill_stage_t_skill_stage_config::clear_skillportrait() {
  skillportrait_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& skill_stage_t_skill_stage_config::skillportrait() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.SkillPortrait)
  return _internal_skillportrait();
}
inline void skill_stage_t_skill_stage_config::set_skillportrait(const std::string& value) {
  _internal_set_skillportrait(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.SkillPortrait)
}
inline std::string* skill_stage_t_skill_stage_config::mutable_skillportrait() {
  // @@protoc_insertion_point(field_mutable:pb.skill_stage.t_skill_stage_config.SkillPortrait)
  return _internal_mutable_skillportrait();
}
inline const std::string& skill_stage_t_skill_stage_config::_internal_skillportrait() const {
  return skillportrait_.GetNoArena();
}
inline void skill_stage_t_skill_stage_config::_internal_set_skillportrait(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  skillportrait_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_stage_t_skill_stage_config::set_skillportrait(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  skillportrait_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_stage.t_skill_stage_config.SkillPortrait)
}
inline void skill_stage_t_skill_stage_config::set_skillportrait(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  skillportrait_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_stage.t_skill_stage_config.SkillPortrait)
}
inline void skill_stage_t_skill_stage_config::set_skillportrait(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  skillportrait_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_stage.t_skill_stage_config.SkillPortrait)
}
inline std::string* skill_stage_t_skill_stage_config::_internal_mutable_skillportrait() {
  _has_bits_[0] |= 0x00000010u;
  return skillportrait_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_stage_t_skill_stage_config::release_skillportrait() {
  // @@protoc_insertion_point(field_release:pb.skill_stage.t_skill_stage_config.SkillPortrait)
  if (!_internal_has_skillportrait()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return skillportrait_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_stage_t_skill_stage_config::set_allocated_skillportrait(std::string* skillportrait) {
  if (skillportrait != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  skillportrait_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skillportrait);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_stage.t_skill_stage_config.SkillPortrait)
}

// required uint32 Checkfail = 17;
inline bool skill_stage_t_skill_stage_config::_internal_has_checkfail() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_checkfail() const {
  return _internal_has_checkfail();
}
inline void skill_stage_t_skill_stage_config::clear_checkfail() {
  checkfail_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_stage_t_skill_stage_config::_internal_checkfail() const {
  return checkfail_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_stage_t_skill_stage_config::checkfail() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.Checkfail)
  return _internal_checkfail();
}
inline void skill_stage_t_skill_stage_config::_internal_set_checkfail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  checkfail_ = value;
}
inline void skill_stage_t_skill_stage_config::set_checkfail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_checkfail(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.Checkfail)
}

// required string AttackWarn = 18;
inline bool skill_stage_t_skill_stage_config::_internal_has_attackwarn() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool skill_stage_t_skill_stage_config::has_attackwarn() const {
  return _internal_has_attackwarn();
}
inline void skill_stage_t_skill_stage_config::clear_attackwarn() {
  attackwarn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& skill_stage_t_skill_stage_config::attackwarn() const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.t_skill_stage_config.AttackWarn)
  return _internal_attackwarn();
}
inline void skill_stage_t_skill_stage_config::set_attackwarn(const std::string& value) {
  _internal_set_attackwarn(value);
  // @@protoc_insertion_point(field_set:pb.skill_stage.t_skill_stage_config.AttackWarn)
}
inline std::string* skill_stage_t_skill_stage_config::mutable_attackwarn() {
  // @@protoc_insertion_point(field_mutable:pb.skill_stage.t_skill_stage_config.AttackWarn)
  return _internal_mutable_attackwarn();
}
inline const std::string& skill_stage_t_skill_stage_config::_internal_attackwarn() const {
  return attackwarn_.GetNoArena();
}
inline void skill_stage_t_skill_stage_config::_internal_set_attackwarn(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  attackwarn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_stage_t_skill_stage_config::set_attackwarn(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  attackwarn_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_stage.t_skill_stage_config.AttackWarn)
}
inline void skill_stage_t_skill_stage_config::set_attackwarn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  attackwarn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_stage.t_skill_stage_config.AttackWarn)
}
inline void skill_stage_t_skill_stage_config::set_attackwarn(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  attackwarn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_stage.t_skill_stage_config.AttackWarn)
}
inline std::string* skill_stage_t_skill_stage_config::_internal_mutable_attackwarn() {
  _has_bits_[0] |= 0x00000020u;
  return attackwarn_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_stage_t_skill_stage_config::release_attackwarn() {
  // @@protoc_insertion_point(field_release:pb.skill_stage.t_skill_stage_config.AttackWarn)
  if (!_internal_has_attackwarn()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return attackwarn_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_stage_t_skill_stage_config::set_allocated_attackwarn(std::string* attackwarn) {
  if (attackwarn != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  attackwarn_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attackwarn);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_stage.t_skill_stage_config.AttackWarn)
}

// -------------------------------------------------------------------

// skill_stage

// repeated .pb.skill_stage.t_skill_stage_config datas = 1;
inline int skill_stage::_internal_datas_size() const {
  return datas_.size();
}
inline int skill_stage::datas_size() const {
  return _internal_datas_size();
}
inline void skill_stage::clear_datas() {
  datas_.Clear();
}
inline ::pb::skill_stage_t_skill_stage_config* skill_stage::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.skill_stage.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_stage_t_skill_stage_config >*
skill_stage::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.skill_stage.datas)
  return &datas_;
}
inline const ::pb::skill_stage_t_skill_stage_config& skill_stage::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::skill_stage_t_skill_stage_config& skill_stage::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.skill_stage.datas)
  return _internal_datas(index);
}
inline ::pb::skill_stage_t_skill_stage_config* skill_stage::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::skill_stage_t_skill_stage_config* skill_stage::add_datas() {
  // @@protoc_insertion_point(field_add:pb.skill_stage.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_stage_t_skill_stage_config >&
skill_stage::datas() const {
  // @@protoc_insertion_point(field_list:pb.skill_stage.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skill_5fstage_2eproto
