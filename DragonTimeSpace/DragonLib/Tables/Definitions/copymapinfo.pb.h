// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: copymapinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_copymapinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_copymapinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_copymapinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_copymapinfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_copymapinfo_2eproto;
namespace pb {
class copymapinfo;
class copymapinfoDefaultTypeInternal;
extern copymapinfoDefaultTypeInternal _copymapinfo_default_instance_;
class copymapinfo_t_copymap;
class copymapinfo_t_copymapDefaultTypeInternal;
extern copymapinfo_t_copymapDefaultTypeInternal _copymapinfo_t_copymap_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::copymapinfo* Arena::CreateMaybeMessage<::pb::copymapinfo>(Arena*);
template<> ::pb::copymapinfo_t_copymap* Arena::CreateMaybeMessage<::pb::copymapinfo_t_copymap>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class copymapinfo_t_copymap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.copymapinfo.t_copymap) */ {
 public:
  copymapinfo_t_copymap();
  virtual ~copymapinfo_t_copymap();

  copymapinfo_t_copymap(const copymapinfo_t_copymap& from);
  copymapinfo_t_copymap(copymapinfo_t_copymap&& from) noexcept
    : copymapinfo_t_copymap() {
    *this = ::std::move(from);
  }

  inline copymapinfo_t_copymap& operator=(const copymapinfo_t_copymap& from) {
    CopyFrom(from);
    return *this;
  }
  inline copymapinfo_t_copymap& operator=(copymapinfo_t_copymap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const copymapinfo_t_copymap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const copymapinfo_t_copymap* internal_default_instance() {
    return reinterpret_cast<const copymapinfo_t_copymap*>(
               &_copymapinfo_t_copymap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(copymapinfo_t_copymap& a, copymapinfo_t_copymap& b) {
    a.Swap(&b);
  }
  inline void Swap(copymapinfo_t_copymap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline copymapinfo_t_copymap* New() const final {
    return CreateMaybeMessage<copymapinfo_t_copymap>(nullptr);
  }

  copymapinfo_t_copymap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<copymapinfo_t_copymap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const copymapinfo_t_copymap& from);
  void MergeFrom(const copymapinfo_t_copymap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(copymapinfo_t_copymap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.copymapinfo.t_copymap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymapinfo_2eproto);
    return ::descriptor_table_copymapinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIDFieldNumber = 4,
    kCopyblockFieldNumber = 5,
    kMappathFieldNumber = 6,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kMapidFieldNumber = 3,
    kShowinviteFieldNumber = 7,
  };
  // required string TaskID = 4;
  bool has_taskid() const;
  private:
  bool _internal_has_taskid() const;
  public:
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // required string copyblock = 5;
  bool has_copyblock() const;
  private:
  bool _internal_has_copyblock() const;
  public:
  void clear_copyblock();
  const std::string& copyblock() const;
  void set_copyblock(const std::string& value);
  void set_copyblock(std::string&& value);
  void set_copyblock(const char* value);
  void set_copyblock(const char* value, size_t size);
  std::string* mutable_copyblock();
  std::string* release_copyblock();
  void set_allocated_copyblock(std::string* copyblock);
  private:
  const std::string& _internal_copyblock() const;
  void _internal_set_copyblock(const std::string& value);
  std::string* _internal_mutable_copyblock();
  public:

  // required string mappath = 6;
  bool has_mappath() const;
  private:
  bool _internal_has_mappath() const;
  public:
  void clear_mappath();
  const std::string& mappath() const;
  void set_mappath(const std::string& value);
  void set_mappath(std::string&& value);
  void set_mappath(const char* value);
  void set_mappath(const char* value, size_t size);
  std::string* mutable_mappath();
  std::string* release_mappath();
  void set_allocated_mappath(std::string* mappath);
  private:
  const std::string& _internal_mappath() const;
  void _internal_set_mappath(const std::string& value);
  std::string* _internal_mutable_mappath();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 mapid = 3;
  bool has_mapid() const;
  private:
  bool _internal_has_mapid() const;
  public:
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 showinvite = 7;
  bool has_showinvite() const;
  private:
  bool _internal_has_showinvite() const;
  public:
  void clear_showinvite();
  ::PROTOBUF_NAMESPACE_ID::uint32 showinvite() const;
  void set_showinvite(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_showinvite() const;
  void _internal_set_showinvite(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.copymapinfo.t_copymap)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr copyblock_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mappath_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 showinvite_;
  friend struct ::TableStruct_copymapinfo_2eproto;
};
// -------------------------------------------------------------------

class copymapinfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.copymapinfo) */ {
 public:
  copymapinfo();
  virtual ~copymapinfo();

  copymapinfo(const copymapinfo& from);
  copymapinfo(copymapinfo&& from) noexcept
    : copymapinfo() {
    *this = ::std::move(from);
  }

  inline copymapinfo& operator=(const copymapinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline copymapinfo& operator=(copymapinfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const copymapinfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const copymapinfo* internal_default_instance() {
    return reinterpret_cast<const copymapinfo*>(
               &_copymapinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(copymapinfo& a, copymapinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(copymapinfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline copymapinfo* New() const final {
    return CreateMaybeMessage<copymapinfo>(nullptr);
  }

  copymapinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<copymapinfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const copymapinfo& from);
  void MergeFrom(const copymapinfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(copymapinfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.copymapinfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymapinfo_2eproto);
    return ::descriptor_table_copymapinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef copymapinfo_t_copymap t_copymap;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.copymapinfo.t_copymap datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::copymapinfo_t_copymap* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::copymapinfo_t_copymap >*
      mutable_datas();
  private:
  const ::pb::copymapinfo_t_copymap& _internal_datas(int index) const;
  ::pb::copymapinfo_t_copymap* _internal_add_datas();
  public:
  const ::pb::copymapinfo_t_copymap& datas(int index) const;
  ::pb::copymapinfo_t_copymap* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::copymapinfo_t_copymap >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.copymapinfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::copymapinfo_t_copymap > datas_;
  friend struct ::TableStruct_copymapinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// copymapinfo_t_copymap

// required uint32 tbxid = 1 [default = 0];
inline bool copymapinfo_t_copymap::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool copymapinfo_t_copymap::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void copymapinfo_t_copymap::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapinfo_t_copymap::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapinfo_t_copymap::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.copymapinfo.t_copymap.tbxid)
  return _internal_tbxid();
}
inline void copymapinfo_t_copymap::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tbxid_ = value;
}
inline void copymapinfo_t_copymap::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.copymapinfo.t_copymap.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool copymapinfo_t_copymap::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool copymapinfo_t_copymap::has_id() const {
  return _internal_has_id();
}
inline void copymapinfo_t_copymap::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapinfo_t_copymap::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapinfo_t_copymap::id() const {
  // @@protoc_insertion_point(field_get:pb.copymapinfo.t_copymap.id)
  return _internal_id();
}
inline void copymapinfo_t_copymap::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void copymapinfo_t_copymap::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.copymapinfo.t_copymap.id)
}

// required uint32 mapid = 3;
inline bool copymapinfo_t_copymap::_internal_has_mapid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool copymapinfo_t_copymap::has_mapid() const {
  return _internal_has_mapid();
}
inline void copymapinfo_t_copymap::clear_mapid() {
  mapid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapinfo_t_copymap::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapinfo_t_copymap::mapid() const {
  // @@protoc_insertion_point(field_get:pb.copymapinfo.t_copymap.mapid)
  return _internal_mapid();
}
inline void copymapinfo_t_copymap::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  mapid_ = value;
}
inline void copymapinfo_t_copymap::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:pb.copymapinfo.t_copymap.mapid)
}

// required string TaskID = 4;
inline bool copymapinfo_t_copymap::_internal_has_taskid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool copymapinfo_t_copymap::has_taskid() const {
  return _internal_has_taskid();
}
inline void copymapinfo_t_copymap::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& copymapinfo_t_copymap::taskid() const {
  // @@protoc_insertion_point(field_get:pb.copymapinfo.t_copymap.TaskID)
  return _internal_taskid();
}
inline void copymapinfo_t_copymap::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:pb.copymapinfo.t_copymap.TaskID)
}
inline std::string* copymapinfo_t_copymap::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:pb.copymapinfo.t_copymap.TaskID)
  return _internal_mutable_taskid();
}
inline const std::string& copymapinfo_t_copymap::_internal_taskid() const {
  return taskid_.GetNoArena();
}
inline void copymapinfo_t_copymap::_internal_set_taskid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void copymapinfo_t_copymap::set_taskid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  taskid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.copymapinfo.t_copymap.TaskID)
}
inline void copymapinfo_t_copymap::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.copymapinfo.t_copymap.TaskID)
}
inline void copymapinfo_t_copymap::set_taskid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  taskid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.copymapinfo.t_copymap.TaskID)
}
inline std::string* copymapinfo_t_copymap::_internal_mutable_taskid() {
  _has_bits_[0] |= 0x00000001u;
  return taskid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* copymapinfo_t_copymap::release_taskid() {
  // @@protoc_insertion_point(field_release:pb.copymapinfo.t_copymap.TaskID)
  if (!_internal_has_taskid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return taskid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void copymapinfo_t_copymap::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  taskid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:pb.copymapinfo.t_copymap.TaskID)
}

// required string copyblock = 5;
inline bool copymapinfo_t_copymap::_internal_has_copyblock() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool copymapinfo_t_copymap::has_copyblock() const {
  return _internal_has_copyblock();
}
inline void copymapinfo_t_copymap::clear_copyblock() {
  copyblock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& copymapinfo_t_copymap::copyblock() const {
  // @@protoc_insertion_point(field_get:pb.copymapinfo.t_copymap.copyblock)
  return _internal_copyblock();
}
inline void copymapinfo_t_copymap::set_copyblock(const std::string& value) {
  _internal_set_copyblock(value);
  // @@protoc_insertion_point(field_set:pb.copymapinfo.t_copymap.copyblock)
}
inline std::string* copymapinfo_t_copymap::mutable_copyblock() {
  // @@protoc_insertion_point(field_mutable:pb.copymapinfo.t_copymap.copyblock)
  return _internal_mutable_copyblock();
}
inline const std::string& copymapinfo_t_copymap::_internal_copyblock() const {
  return copyblock_.GetNoArena();
}
inline void copymapinfo_t_copymap::_internal_set_copyblock(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  copyblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void copymapinfo_t_copymap::set_copyblock(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  copyblock_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.copymapinfo.t_copymap.copyblock)
}
inline void copymapinfo_t_copymap::set_copyblock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  copyblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.copymapinfo.t_copymap.copyblock)
}
inline void copymapinfo_t_copymap::set_copyblock(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  copyblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.copymapinfo.t_copymap.copyblock)
}
inline std::string* copymapinfo_t_copymap::_internal_mutable_copyblock() {
  _has_bits_[0] |= 0x00000002u;
  return copyblock_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* copymapinfo_t_copymap::release_copyblock() {
  // @@protoc_insertion_point(field_release:pb.copymapinfo.t_copymap.copyblock)
  if (!_internal_has_copyblock()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return copyblock_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void copymapinfo_t_copymap::set_allocated_copyblock(std::string* copyblock) {
  if (copyblock != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  copyblock_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), copyblock);
  // @@protoc_insertion_point(field_set_allocated:pb.copymapinfo.t_copymap.copyblock)
}

// required string mappath = 6;
inline bool copymapinfo_t_copymap::_internal_has_mappath() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool copymapinfo_t_copymap::has_mappath() const {
  return _internal_has_mappath();
}
inline void copymapinfo_t_copymap::clear_mappath() {
  mappath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& copymapinfo_t_copymap::mappath() const {
  // @@protoc_insertion_point(field_get:pb.copymapinfo.t_copymap.mappath)
  return _internal_mappath();
}
inline void copymapinfo_t_copymap::set_mappath(const std::string& value) {
  _internal_set_mappath(value);
  // @@protoc_insertion_point(field_set:pb.copymapinfo.t_copymap.mappath)
}
inline std::string* copymapinfo_t_copymap::mutable_mappath() {
  // @@protoc_insertion_point(field_mutable:pb.copymapinfo.t_copymap.mappath)
  return _internal_mutable_mappath();
}
inline const std::string& copymapinfo_t_copymap::_internal_mappath() const {
  return mappath_.GetNoArena();
}
inline void copymapinfo_t_copymap::_internal_set_mappath(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  mappath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void copymapinfo_t_copymap::set_mappath(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  mappath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.copymapinfo.t_copymap.mappath)
}
inline void copymapinfo_t_copymap::set_mappath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  mappath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.copymapinfo.t_copymap.mappath)
}
inline void copymapinfo_t_copymap::set_mappath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  mappath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.copymapinfo.t_copymap.mappath)
}
inline std::string* copymapinfo_t_copymap::_internal_mutable_mappath() {
  _has_bits_[0] |= 0x00000004u;
  return mappath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* copymapinfo_t_copymap::release_mappath() {
  // @@protoc_insertion_point(field_release:pb.copymapinfo.t_copymap.mappath)
  if (!_internal_has_mappath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return mappath_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void copymapinfo_t_copymap::set_allocated_mappath(std::string* mappath) {
  if (mappath != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mappath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mappath);
  // @@protoc_insertion_point(field_set_allocated:pb.copymapinfo.t_copymap.mappath)
}

// required uint32 showinvite = 7;
inline bool copymapinfo_t_copymap::_internal_has_showinvite() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool copymapinfo_t_copymap::has_showinvite() const {
  return _internal_has_showinvite();
}
inline void copymapinfo_t_copymap::clear_showinvite() {
  showinvite_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapinfo_t_copymap::_internal_showinvite() const {
  return showinvite_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapinfo_t_copymap::showinvite() const {
  // @@protoc_insertion_point(field_get:pb.copymapinfo.t_copymap.showinvite)
  return _internal_showinvite();
}
inline void copymapinfo_t_copymap::_internal_set_showinvite(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  showinvite_ = value;
}
inline void copymapinfo_t_copymap::set_showinvite(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_showinvite(value);
  // @@protoc_insertion_point(field_set:pb.copymapinfo.t_copymap.showinvite)
}

// -------------------------------------------------------------------

// copymapinfo

// repeated .pb.copymapinfo.t_copymap datas = 1;
inline int copymapinfo::_internal_datas_size() const {
  return datas_.size();
}
inline int copymapinfo::datas_size() const {
  return _internal_datas_size();
}
inline void copymapinfo::clear_datas() {
  datas_.Clear();
}
inline ::pb::copymapinfo_t_copymap* copymapinfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.copymapinfo.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::copymapinfo_t_copymap >*
copymapinfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.copymapinfo.datas)
  return &datas_;
}
inline const ::pb::copymapinfo_t_copymap& copymapinfo::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::copymapinfo_t_copymap& copymapinfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.copymapinfo.datas)
  return _internal_datas(index);
}
inline ::pb::copymapinfo_t_copymap* copymapinfo::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::copymapinfo_t_copymap* copymapinfo::add_datas() {
  // @@protoc_insertion_point(field_add:pb.copymapinfo.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::copymapinfo_t_copymap >&
copymapinfo::datas() const {
  // @@protoc_insertion_point(field_list:pb.copymapinfo.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_copymapinfo_2eproto
