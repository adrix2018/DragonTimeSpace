// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: namepool.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_namepool_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_namepool_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_namepool_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_namepool_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_namepool_2eproto;
namespace pb {
class namepool;
class namepoolDefaultTypeInternal;
extern namepoolDefaultTypeInternal _namepool_default_instance_;
class namepool_t_namepool_config;
class namepool_t_namepool_configDefaultTypeInternal;
extern namepool_t_namepool_configDefaultTypeInternal _namepool_t_namepool_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::namepool* Arena::CreateMaybeMessage<::pb::namepool>(Arena*);
template<> ::pb::namepool_t_namepool_config* Arena::CreateMaybeMessage<::pb::namepool_t_namepool_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class namepool_t_namepool_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.namepool.t_namepool_config) */ {
 public:
  namepool_t_namepool_config();
  virtual ~namepool_t_namepool_config();

  namepool_t_namepool_config(const namepool_t_namepool_config& from);
  namepool_t_namepool_config(namepool_t_namepool_config&& from) noexcept
    : namepool_t_namepool_config() {
    *this = ::std::move(from);
  }

  inline namepool_t_namepool_config& operator=(const namepool_t_namepool_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline namepool_t_namepool_config& operator=(namepool_t_namepool_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const namepool_t_namepool_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const namepool_t_namepool_config* internal_default_instance() {
    return reinterpret_cast<const namepool_t_namepool_config*>(
               &_namepool_t_namepool_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(namepool_t_namepool_config& a, namepool_t_namepool_config& b) {
    a.Swap(&b);
  }
  inline void Swap(namepool_t_namepool_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline namepool_t_namepool_config* New() const final {
    return CreateMaybeMessage<namepool_t_namepool_config>(nullptr);
  }

  namepool_t_namepool_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<namepool_t_namepool_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const namepool_t_namepool_config& from);
  void MergeFrom(const namepool_t_namepool_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(namepool_t_namepool_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.namepool.t_namepool_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_namepool_2eproto);
    return ::descriptor_table_namepool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstnameFieldNumber = 3,
    kEnmalenameFieldNumber = 4,
    kEnfemalenameFieldNumber = 5,
    kCnmalenameFieldNumber = 6,
    kCnfemalenameFieldNumber = 7,
    kAdjectiveFieldNumber = 8,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // required string firstname = 3;
  bool has_firstname() const;
  private:
  bool _internal_has_firstname() const;
  public:
  void clear_firstname();
  const std::string& firstname() const;
  void set_firstname(const std::string& value);
  void set_firstname(std::string&& value);
  void set_firstname(const char* value);
  void set_firstname(const char* value, size_t size);
  std::string* mutable_firstname();
  std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // required string enmalename = 4;
  bool has_enmalename() const;
  private:
  bool _internal_has_enmalename() const;
  public:
  void clear_enmalename();
  const std::string& enmalename() const;
  void set_enmalename(const std::string& value);
  void set_enmalename(std::string&& value);
  void set_enmalename(const char* value);
  void set_enmalename(const char* value, size_t size);
  std::string* mutable_enmalename();
  std::string* release_enmalename();
  void set_allocated_enmalename(std::string* enmalename);
  private:
  const std::string& _internal_enmalename() const;
  void _internal_set_enmalename(const std::string& value);
  std::string* _internal_mutable_enmalename();
  public:

  // required string enfemalename = 5;
  bool has_enfemalename() const;
  private:
  bool _internal_has_enfemalename() const;
  public:
  void clear_enfemalename();
  const std::string& enfemalename() const;
  void set_enfemalename(const std::string& value);
  void set_enfemalename(std::string&& value);
  void set_enfemalename(const char* value);
  void set_enfemalename(const char* value, size_t size);
  std::string* mutable_enfemalename();
  std::string* release_enfemalename();
  void set_allocated_enfemalename(std::string* enfemalename);
  private:
  const std::string& _internal_enfemalename() const;
  void _internal_set_enfemalename(const std::string& value);
  std::string* _internal_mutable_enfemalename();
  public:

  // required string cnmalename = 6;
  bool has_cnmalename() const;
  private:
  bool _internal_has_cnmalename() const;
  public:
  void clear_cnmalename();
  const std::string& cnmalename() const;
  void set_cnmalename(const std::string& value);
  void set_cnmalename(std::string&& value);
  void set_cnmalename(const char* value);
  void set_cnmalename(const char* value, size_t size);
  std::string* mutable_cnmalename();
  std::string* release_cnmalename();
  void set_allocated_cnmalename(std::string* cnmalename);
  private:
  const std::string& _internal_cnmalename() const;
  void _internal_set_cnmalename(const std::string& value);
  std::string* _internal_mutable_cnmalename();
  public:

  // required string cnfemalename = 7;
  bool has_cnfemalename() const;
  private:
  bool _internal_has_cnfemalename() const;
  public:
  void clear_cnfemalename();
  const std::string& cnfemalename() const;
  void set_cnfemalename(const std::string& value);
  void set_cnfemalename(std::string&& value);
  void set_cnfemalename(const char* value);
  void set_cnfemalename(const char* value, size_t size);
  std::string* mutable_cnfemalename();
  std::string* release_cnfemalename();
  void set_allocated_cnfemalename(std::string* cnfemalename);
  private:
  const std::string& _internal_cnfemalename() const;
  void _internal_set_cnfemalename(const std::string& value);
  std::string* _internal_mutable_cnfemalename();
  public:

  // required string adjective = 8;
  bool has_adjective() const;
  private:
  bool _internal_has_adjective() const;
  public:
  void clear_adjective();
  const std::string& adjective() const;
  void set_adjective(const std::string& value);
  void set_adjective(std::string&& value);
  void set_adjective(const char* value);
  void set_adjective(const char* value, size_t size);
  std::string* mutable_adjective();
  std::string* release_adjective();
  void set_allocated_adjective(std::string* adjective);
  private:
  const std::string& _internal_adjective() const;
  void _internal_set_adjective(const std::string& value);
  std::string* _internal_mutable_adjective();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.namepool.t_namepool_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enmalename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enfemalename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cnmalename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cnfemalename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr adjective_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_namepool_2eproto;
};
// -------------------------------------------------------------------

class namepool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.namepool) */ {
 public:
  namepool();
  virtual ~namepool();

  namepool(const namepool& from);
  namepool(namepool&& from) noexcept
    : namepool() {
    *this = ::std::move(from);
  }

  inline namepool& operator=(const namepool& from) {
    CopyFrom(from);
    return *this;
  }
  inline namepool& operator=(namepool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const namepool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const namepool* internal_default_instance() {
    return reinterpret_cast<const namepool*>(
               &_namepool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(namepool& a, namepool& b) {
    a.Swap(&b);
  }
  inline void Swap(namepool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline namepool* New() const final {
    return CreateMaybeMessage<namepool>(nullptr);
  }

  namepool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<namepool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const namepool& from);
  void MergeFrom(const namepool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(namepool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.namepool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_namepool_2eproto);
    return ::descriptor_table_namepool_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef namepool_t_namepool_config t_namepool_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.namepool.t_namepool_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::namepool_t_namepool_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::namepool_t_namepool_config >*
      mutable_datas();
  private:
  const ::pb::namepool_t_namepool_config& _internal_datas(int index) const;
  ::pb::namepool_t_namepool_config* _internal_add_datas();
  public:
  const ::pb::namepool_t_namepool_config& datas(int index) const;
  ::pb::namepool_t_namepool_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::namepool_t_namepool_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.namepool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::namepool_t_namepool_config > datas_;
  friend struct ::TableStruct_namepool_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// namepool_t_namepool_config

// required uint32 tbxid = 1 [default = 0];
inline bool namepool_t_namepool_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool namepool_t_namepool_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void namepool_t_namepool_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 namepool_t_namepool_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 namepool_t_namepool_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.namepool.t_namepool_config.tbxid)
  return _internal_tbxid();
}
inline void namepool_t_namepool_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  tbxid_ = value;
}
inline void namepool_t_namepool_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.namepool.t_namepool_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool namepool_t_namepool_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool namepool_t_namepool_config::has_id() const {
  return _internal_has_id();
}
inline void namepool_t_namepool_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 namepool_t_namepool_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 namepool_t_namepool_config::id() const {
  // @@protoc_insertion_point(field_get:pb.namepool.t_namepool_config.id)
  return _internal_id();
}
inline void namepool_t_namepool_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
}
inline void namepool_t_namepool_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.namepool.t_namepool_config.id)
}

// required string firstname = 3;
inline bool namepool_t_namepool_config::_internal_has_firstname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool namepool_t_namepool_config::has_firstname() const {
  return _internal_has_firstname();
}
inline void namepool_t_namepool_config::clear_firstname() {
  firstname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& namepool_t_namepool_config::firstname() const {
  // @@protoc_insertion_point(field_get:pb.namepool.t_namepool_config.firstname)
  return _internal_firstname();
}
inline void namepool_t_namepool_config::set_firstname(const std::string& value) {
  _internal_set_firstname(value);
  // @@protoc_insertion_point(field_set:pb.namepool.t_namepool_config.firstname)
}
inline std::string* namepool_t_namepool_config::mutable_firstname() {
  // @@protoc_insertion_point(field_mutable:pb.namepool.t_namepool_config.firstname)
  return _internal_mutable_firstname();
}
inline const std::string& namepool_t_namepool_config::_internal_firstname() const {
  return firstname_.GetNoArena();
}
inline void namepool_t_namepool_config::_internal_set_firstname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  firstname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void namepool_t_namepool_config::set_firstname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  firstname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.namepool.t_namepool_config.firstname)
}
inline void namepool_t_namepool_config::set_firstname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  firstname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.namepool.t_namepool_config.firstname)
}
inline void namepool_t_namepool_config::set_firstname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  firstname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.namepool.t_namepool_config.firstname)
}
inline std::string* namepool_t_namepool_config::_internal_mutable_firstname() {
  _has_bits_[0] |= 0x00000001u;
  return firstname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* namepool_t_namepool_config::release_firstname() {
  // @@protoc_insertion_point(field_release:pb.namepool.t_namepool_config.firstname)
  if (!_internal_has_firstname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return firstname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void namepool_t_namepool_config::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  firstname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firstname);
  // @@protoc_insertion_point(field_set_allocated:pb.namepool.t_namepool_config.firstname)
}

// required string enmalename = 4;
inline bool namepool_t_namepool_config::_internal_has_enmalename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool namepool_t_namepool_config::has_enmalename() const {
  return _internal_has_enmalename();
}
inline void namepool_t_namepool_config::clear_enmalename() {
  enmalename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& namepool_t_namepool_config::enmalename() const {
  // @@protoc_insertion_point(field_get:pb.namepool.t_namepool_config.enmalename)
  return _internal_enmalename();
}
inline void namepool_t_namepool_config::set_enmalename(const std::string& value) {
  _internal_set_enmalename(value);
  // @@protoc_insertion_point(field_set:pb.namepool.t_namepool_config.enmalename)
}
inline std::string* namepool_t_namepool_config::mutable_enmalename() {
  // @@protoc_insertion_point(field_mutable:pb.namepool.t_namepool_config.enmalename)
  return _internal_mutable_enmalename();
}
inline const std::string& namepool_t_namepool_config::_internal_enmalename() const {
  return enmalename_.GetNoArena();
}
inline void namepool_t_namepool_config::_internal_set_enmalename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  enmalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void namepool_t_namepool_config::set_enmalename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  enmalename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.namepool.t_namepool_config.enmalename)
}
inline void namepool_t_namepool_config::set_enmalename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  enmalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.namepool.t_namepool_config.enmalename)
}
inline void namepool_t_namepool_config::set_enmalename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  enmalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.namepool.t_namepool_config.enmalename)
}
inline std::string* namepool_t_namepool_config::_internal_mutable_enmalename() {
  _has_bits_[0] |= 0x00000002u;
  return enmalename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* namepool_t_namepool_config::release_enmalename() {
  // @@protoc_insertion_point(field_release:pb.namepool.t_namepool_config.enmalename)
  if (!_internal_has_enmalename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return enmalename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void namepool_t_namepool_config::set_allocated_enmalename(std::string* enmalename) {
  if (enmalename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enmalename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enmalename);
  // @@protoc_insertion_point(field_set_allocated:pb.namepool.t_namepool_config.enmalename)
}

// required string enfemalename = 5;
inline bool namepool_t_namepool_config::_internal_has_enfemalename() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool namepool_t_namepool_config::has_enfemalename() const {
  return _internal_has_enfemalename();
}
inline void namepool_t_namepool_config::clear_enfemalename() {
  enfemalename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& namepool_t_namepool_config::enfemalename() const {
  // @@protoc_insertion_point(field_get:pb.namepool.t_namepool_config.enfemalename)
  return _internal_enfemalename();
}
inline void namepool_t_namepool_config::set_enfemalename(const std::string& value) {
  _internal_set_enfemalename(value);
  // @@protoc_insertion_point(field_set:pb.namepool.t_namepool_config.enfemalename)
}
inline std::string* namepool_t_namepool_config::mutable_enfemalename() {
  // @@protoc_insertion_point(field_mutable:pb.namepool.t_namepool_config.enfemalename)
  return _internal_mutable_enfemalename();
}
inline const std::string& namepool_t_namepool_config::_internal_enfemalename() const {
  return enfemalename_.GetNoArena();
}
inline void namepool_t_namepool_config::_internal_set_enfemalename(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  enfemalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void namepool_t_namepool_config::set_enfemalename(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  enfemalename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.namepool.t_namepool_config.enfemalename)
}
inline void namepool_t_namepool_config::set_enfemalename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  enfemalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.namepool.t_namepool_config.enfemalename)
}
inline void namepool_t_namepool_config::set_enfemalename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  enfemalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.namepool.t_namepool_config.enfemalename)
}
inline std::string* namepool_t_namepool_config::_internal_mutable_enfemalename() {
  _has_bits_[0] |= 0x00000004u;
  return enfemalename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* namepool_t_namepool_config::release_enfemalename() {
  // @@protoc_insertion_point(field_release:pb.namepool.t_namepool_config.enfemalename)
  if (!_internal_has_enfemalename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return enfemalename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void namepool_t_namepool_config::set_allocated_enfemalename(std::string* enfemalename) {
  if (enfemalename != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  enfemalename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enfemalename);
  // @@protoc_insertion_point(field_set_allocated:pb.namepool.t_namepool_config.enfemalename)
}

// required string cnmalename = 6;
inline bool namepool_t_namepool_config::_internal_has_cnmalename() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool namepool_t_namepool_config::has_cnmalename() const {
  return _internal_has_cnmalename();
}
inline void namepool_t_namepool_config::clear_cnmalename() {
  cnmalename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& namepool_t_namepool_config::cnmalename() const {
  // @@protoc_insertion_point(field_get:pb.namepool.t_namepool_config.cnmalename)
  return _internal_cnmalename();
}
inline void namepool_t_namepool_config::set_cnmalename(const std::string& value) {
  _internal_set_cnmalename(value);
  // @@protoc_insertion_point(field_set:pb.namepool.t_namepool_config.cnmalename)
}
inline std::string* namepool_t_namepool_config::mutable_cnmalename() {
  // @@protoc_insertion_point(field_mutable:pb.namepool.t_namepool_config.cnmalename)
  return _internal_mutable_cnmalename();
}
inline const std::string& namepool_t_namepool_config::_internal_cnmalename() const {
  return cnmalename_.GetNoArena();
}
inline void namepool_t_namepool_config::_internal_set_cnmalename(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  cnmalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void namepool_t_namepool_config::set_cnmalename(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  cnmalename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.namepool.t_namepool_config.cnmalename)
}
inline void namepool_t_namepool_config::set_cnmalename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  cnmalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.namepool.t_namepool_config.cnmalename)
}
inline void namepool_t_namepool_config::set_cnmalename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  cnmalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.namepool.t_namepool_config.cnmalename)
}
inline std::string* namepool_t_namepool_config::_internal_mutable_cnmalename() {
  _has_bits_[0] |= 0x00000008u;
  return cnmalename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* namepool_t_namepool_config::release_cnmalename() {
  // @@protoc_insertion_point(field_release:pb.namepool.t_namepool_config.cnmalename)
  if (!_internal_has_cnmalename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return cnmalename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void namepool_t_namepool_config::set_allocated_cnmalename(std::string* cnmalename) {
  if (cnmalename != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cnmalename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cnmalename);
  // @@protoc_insertion_point(field_set_allocated:pb.namepool.t_namepool_config.cnmalename)
}

// required string cnfemalename = 7;
inline bool namepool_t_namepool_config::_internal_has_cnfemalename() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool namepool_t_namepool_config::has_cnfemalename() const {
  return _internal_has_cnfemalename();
}
inline void namepool_t_namepool_config::clear_cnfemalename() {
  cnfemalename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& namepool_t_namepool_config::cnfemalename() const {
  // @@protoc_insertion_point(field_get:pb.namepool.t_namepool_config.cnfemalename)
  return _internal_cnfemalename();
}
inline void namepool_t_namepool_config::set_cnfemalename(const std::string& value) {
  _internal_set_cnfemalename(value);
  // @@protoc_insertion_point(field_set:pb.namepool.t_namepool_config.cnfemalename)
}
inline std::string* namepool_t_namepool_config::mutable_cnfemalename() {
  // @@protoc_insertion_point(field_mutable:pb.namepool.t_namepool_config.cnfemalename)
  return _internal_mutable_cnfemalename();
}
inline const std::string& namepool_t_namepool_config::_internal_cnfemalename() const {
  return cnfemalename_.GetNoArena();
}
inline void namepool_t_namepool_config::_internal_set_cnfemalename(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  cnfemalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void namepool_t_namepool_config::set_cnfemalename(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  cnfemalename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.namepool.t_namepool_config.cnfemalename)
}
inline void namepool_t_namepool_config::set_cnfemalename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  cnfemalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.namepool.t_namepool_config.cnfemalename)
}
inline void namepool_t_namepool_config::set_cnfemalename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  cnfemalename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.namepool.t_namepool_config.cnfemalename)
}
inline std::string* namepool_t_namepool_config::_internal_mutable_cnfemalename() {
  _has_bits_[0] |= 0x00000010u;
  return cnfemalename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* namepool_t_namepool_config::release_cnfemalename() {
  // @@protoc_insertion_point(field_release:pb.namepool.t_namepool_config.cnfemalename)
  if (!_internal_has_cnfemalename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return cnfemalename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void namepool_t_namepool_config::set_allocated_cnfemalename(std::string* cnfemalename) {
  if (cnfemalename != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cnfemalename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cnfemalename);
  // @@protoc_insertion_point(field_set_allocated:pb.namepool.t_namepool_config.cnfemalename)
}

// required string adjective = 8;
inline bool namepool_t_namepool_config::_internal_has_adjective() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool namepool_t_namepool_config::has_adjective() const {
  return _internal_has_adjective();
}
inline void namepool_t_namepool_config::clear_adjective() {
  adjective_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& namepool_t_namepool_config::adjective() const {
  // @@protoc_insertion_point(field_get:pb.namepool.t_namepool_config.adjective)
  return _internal_adjective();
}
inline void namepool_t_namepool_config::set_adjective(const std::string& value) {
  _internal_set_adjective(value);
  // @@protoc_insertion_point(field_set:pb.namepool.t_namepool_config.adjective)
}
inline std::string* namepool_t_namepool_config::mutable_adjective() {
  // @@protoc_insertion_point(field_mutable:pb.namepool.t_namepool_config.adjective)
  return _internal_mutable_adjective();
}
inline const std::string& namepool_t_namepool_config::_internal_adjective() const {
  return adjective_.GetNoArena();
}
inline void namepool_t_namepool_config::_internal_set_adjective(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  adjective_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void namepool_t_namepool_config::set_adjective(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  adjective_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.namepool.t_namepool_config.adjective)
}
inline void namepool_t_namepool_config::set_adjective(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  adjective_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.namepool.t_namepool_config.adjective)
}
inline void namepool_t_namepool_config::set_adjective(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  adjective_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.namepool.t_namepool_config.adjective)
}
inline std::string* namepool_t_namepool_config::_internal_mutable_adjective() {
  _has_bits_[0] |= 0x00000020u;
  return adjective_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* namepool_t_namepool_config::release_adjective() {
  // @@protoc_insertion_point(field_release:pb.namepool.t_namepool_config.adjective)
  if (!_internal_has_adjective()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return adjective_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void namepool_t_namepool_config::set_allocated_adjective(std::string* adjective) {
  if (adjective != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  adjective_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), adjective);
  // @@protoc_insertion_point(field_set_allocated:pb.namepool.t_namepool_config.adjective)
}

// -------------------------------------------------------------------

// namepool

// repeated .pb.namepool.t_namepool_config datas = 1;
inline int namepool::_internal_datas_size() const {
  return datas_.size();
}
inline int namepool::datas_size() const {
  return _internal_datas_size();
}
inline void namepool::clear_datas() {
  datas_.Clear();
}
inline ::pb::namepool_t_namepool_config* namepool::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.namepool.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::namepool_t_namepool_config >*
namepool::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.namepool.datas)
  return &datas_;
}
inline const ::pb::namepool_t_namepool_config& namepool::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::namepool_t_namepool_config& namepool::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.namepool.datas)
  return _internal_datas(index);
}
inline ::pb::namepool_t_namepool_config* namepool::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::namepool_t_namepool_config* namepool::add_datas() {
  // @@protoc_insertion_point(field_add:pb.namepool.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::namepool_t_namepool_config >&
namepool::datas() const {
  // @@protoc_insertion_point(field_list:pb.namepool.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_namepool_2eproto
