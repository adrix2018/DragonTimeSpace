// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: copymapmaster.proto

#include "copymapmaster.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_copymapmaster_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_copymapmaster_t_copymap_master_copymapmaster_2eproto;
namespace pb {
class copymapmaster_t_copymap_masterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<copymapmaster_t_copymap_master> _instance;
} _copymapmaster_t_copymap_master_default_instance_;
class copymapmasterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<copymapmaster> _instance;
} _copymapmaster_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_copymapmaster_copymapmaster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_copymapmaster_default_instance_;
    new (ptr) ::pb::copymapmaster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::copymapmaster::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_copymapmaster_copymapmaster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_copymapmaster_copymapmaster_2eproto}, {
      &scc_info_copymapmaster_t_copymap_master_copymapmaster_2eproto.base,}};

static void InitDefaultsscc_info_copymapmaster_t_copymap_master_copymapmaster_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_copymapmaster_t_copymap_master_default_instance_;
    new (ptr) ::pb::copymapmaster_t_copymap_master();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::copymapmaster_t_copymap_master::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_copymapmaster_t_copymap_master_copymapmaster_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_copymapmaster_t_copymap_master_copymapmaster_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_copymapmaster_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_copymapmaster_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_copymapmaster_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_copymapmaster_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, id_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, name_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, daytimelimit_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, min_need_player_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, award_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, overmap_type_ui_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, desc_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, bossdiecameramove_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, type_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, first_award_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, recommand_fight_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, teammode_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, assist_npc_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, autoenter_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, chatchannel_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, daytimesuclimit_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, explvllimit_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster_t_copymap_master, originonly_),
  7,
  8,
  0,
  9,
  10,
  1,
  2,
  3,
  4,
  11,
  5,
  12,
  13,
  6,
  14,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::copymapmaster, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(::pb::copymapmaster_t_copymap_master)},
  { 43, 49, sizeof(::pb::copymapmaster)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_copymapmaster_t_copymap_master_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_copymapmaster_default_instance_),
};

const char descriptor_table_protodef_copymapmaster_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023copymapmaster.proto\022\002pb\"\322\003\n\rcopymapmas"
  "ter\0221\n\005datas\030\001 \003(\0132\".pb.copymapmaster.t_"
  "copymap_master\032\215\003\n\020t_copymap_master\022\020\n\005t"
  "bxid\030\001 \002(\r:\0010\022\r\n\002id\030\002 \002(\r:\0010\022\014\n\004name\030\003 \002"
  "(\t\022\024\n\014daytimelimit\030\004 \002(\r\022\027\n\017min_need_pla"
  "yer\030\005 \002(\r\022\r\n\005award\030\006 \002(\t\022\027\n\017overmap_type"
  "_ui\030\007 \002(\t\022\014\n\004desc\030\010 \002(\t\022\031\n\021bossdiecamera"
  "move\030\t \002(\t\022\014\n\004type\030\n \002(\r\022\023\n\013first_award\030"
  "\013 \002(\t\022\027\n\017recommand_fight\030\014 \002(\r\022\020\n\010teammo"
  "de\030\r \002(\r\022\022\n\nassist_npc\030\016 \002(\t\022\021\n\tAutoente"
  "r\030\017 \002(\010\022\023\n\013chatchannel\030\020 \002(\r\022\027\n\017daytimes"
  "uclimit\030\021 \002(\r\022\023\n\013explvllimit\030\022 \002(\r\022\022\n\nor"
  "iginonly\030\023 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_copymapmaster_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_copymapmaster_2eproto_sccs[2] = {
  &scc_info_copymapmaster_copymapmaster_2eproto.base,
  &scc_info_copymapmaster_t_copymap_master_copymapmaster_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_copymapmaster_2eproto_once;
static bool descriptor_table_copymapmaster_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_copymapmaster_2eproto = {
  &descriptor_table_copymapmaster_2eproto_initialized, descriptor_table_protodef_copymapmaster_2eproto, "copymapmaster.proto", 494,
  &descriptor_table_copymapmaster_2eproto_once, descriptor_table_copymapmaster_2eproto_sccs, descriptor_table_copymapmaster_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_copymapmaster_2eproto::offsets,
  file_level_metadata_copymapmaster_2eproto, 2, file_level_enum_descriptors_copymapmaster_2eproto, file_level_service_descriptors_copymapmaster_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_copymapmaster_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_copymapmaster_2eproto)), true);
namespace pb {

// ===================================================================

void copymapmaster_t_copymap_master::InitAsDefaultInstance() {
}
class copymapmaster_t_copymap_master::_Internal {
 public:
  using HasBits = decltype(std::declval<copymapmaster_t_copymap_master>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_daytimelimit(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_min_need_player(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_award(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overmap_type_ui(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bossdiecameramove(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_first_award(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_recommand_fight(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_teammode(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_assist_npc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_autoenter(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_chatchannel(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_daytimesuclimit(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_explvllimit(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_originonly(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

copymapmaster_t_copymap_master::copymapmaster_t_copymap_master()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.copymapmaster.t_copymap_master)
}
copymapmaster_t_copymap_master::copymapmaster_t_copymap_master(const copymapmaster_t_copymap_master& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  award_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_award()) {
    award_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.award_);
  }
  overmap_type_ui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_overmap_type_ui()) {
    overmap_type_ui_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.overmap_type_ui_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  bossdiecameramove_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bossdiecameramove()) {
    bossdiecameramove_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bossdiecameramove_);
  }
  first_award_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_first_award()) {
    first_award_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_award_);
  }
  assist_npc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_assist_npc()) {
    assist_npc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assist_npc_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&originonly_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(originonly_));
  // @@protoc_insertion_point(copy_constructor:pb.copymapmaster.t_copymap_master)
}

void copymapmaster_t_copymap_master::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_copymapmaster_t_copymap_master_copymapmaster_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  award_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overmap_type_ui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bossdiecameramove_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_award_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assist_npc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&originonly_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(originonly_));
}

copymapmaster_t_copymap_master::~copymapmaster_t_copymap_master() {
  // @@protoc_insertion_point(destructor:pb.copymapmaster.t_copymap_master)
  SharedDtor();
}

void copymapmaster_t_copymap_master::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  award_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overmap_type_ui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bossdiecameramove_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_award_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assist_npc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void copymapmaster_t_copymap_master::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const copymapmaster_t_copymap_master& copymapmaster_t_copymap_master::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_copymapmaster_t_copymap_master_copymapmaster_2eproto.base);
  return *internal_default_instance();
}


void copymapmaster_t_copymap_master::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.copymapmaster.t_copymap_master)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      award_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      overmap_type_ui_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      desc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      bossdiecameramove_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      first_award_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      assist_npc_.ClearNonDefaultToEmptyNoArena();
    }
  }
  tbxid_ = 0u;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chatchannel_) -
        reinterpret_cast<char*>(&id_)) + sizeof(chatchannel_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&daytimesuclimit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&originonly_) -
        reinterpret_cast<char*>(&daytimesuclimit_)) + sizeof(originonly_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* copymapmaster_t_copymap_master::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&has_bits);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.copymapmaster.t_copymap_master.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 daytimelimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_daytimelimit(&has_bits);
          daytimelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 min_need_player = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_min_need_player(&has_bits);
          min_need_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string award = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_award();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.copymapmaster.t_copymap_master.award");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string overmap_type_ui = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_overmap_type_ui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.copymapmaster.t_copymap_master.overmap_type_ui");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.copymapmaster.t_copymap_master.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string bossdiecameramove = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_bossdiecameramove();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.copymapmaster.t_copymap_master.bossdiecameramove");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string first_award = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_first_award();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.copymapmaster.t_copymap_master.first_award");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 recommand_fight = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_recommand_fight(&has_bits);
          recommand_fight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 teammode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_teammode(&has_bits);
          teammode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string assist_npc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_assist_npc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.copymapmaster.t_copymap_master.assist_npc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool Autoenter = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_autoenter(&has_bits);
          autoenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 chatchannel = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_chatchannel(&has_bits);
          chatchannel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 daytimesuclimit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_daytimesuclimit(&has_bits);
          daytimesuclimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 explvllimit = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_explvllimit(&has_bits);
          explvllimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 originonly = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_originonly(&has_bits);
          originonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* copymapmaster_t_copymap_master::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.copymapmaster.t_copymap_master)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.copymapmaster.t_copymap_master.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // required uint32 daytimelimit = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_daytimelimit(), target);
  }

  // required uint32 min_need_player = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_min_need_player(), target);
  }

  // required string award = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_award().data(), static_cast<int>(this->_internal_award().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.copymapmaster.t_copymap_master.award");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_award(), target);
  }

  // required string overmap_type_ui = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_overmap_type_ui().data(), static_cast<int>(this->_internal_overmap_type_ui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.copymapmaster.t_copymap_master.overmap_type_ui");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_overmap_type_ui(), target);
  }

  // required string desc = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.copymapmaster.t_copymap_master.desc");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_desc(), target);
  }

  // required string bossdiecameramove = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bossdiecameramove().data(), static_cast<int>(this->_internal_bossdiecameramove().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.copymapmaster.t_copymap_master.bossdiecameramove");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_bossdiecameramove(), target);
  }

  // required uint32 type = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_type(), target);
  }

  // required string first_award = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_first_award().data(), static_cast<int>(this->_internal_first_award().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.copymapmaster.t_copymap_master.first_award");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_first_award(), target);
  }

  // required uint32 recommand_fight = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_recommand_fight(), target);
  }

  // required uint32 teammode = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_teammode(), target);
  }

  // required string assist_npc = 14;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_assist_npc().data(), static_cast<int>(this->_internal_assist_npc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.copymapmaster.t_copymap_master.assist_npc");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_assist_npc(), target);
  }

  // required bool Autoenter = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_autoenter(), target);
  }

  // required uint32 chatchannel = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_chatchannel(), target);
  }

  // required uint32 daytimesuclimit = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_daytimesuclimit(), target);
  }

  // required uint32 explvllimit = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_explvllimit(), target);
  }

  // required uint32 originonly = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_originonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.copymapmaster.t_copymap_master)
  return target;
}

size_t copymapmaster_t_copymap_master::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.copymapmaster.t_copymap_master)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_award()) {
    // required string award = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_award());
  }

  if (_internal_has_overmap_type_ui()) {
    // required string overmap_type_ui = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_overmap_type_ui());
  }

  if (_internal_has_desc()) {
    // required string desc = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  if (_internal_has_bossdiecameramove()) {
    // required string bossdiecameramove = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bossdiecameramove());
  }

  if (_internal_has_first_award()) {
    // required string first_award = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_award());
  }

  if (_internal_has_assist_npc()) {
    // required string assist_npc = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assist_npc());
  }

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_daytimelimit()) {
    // required uint32 daytimelimit = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_daytimelimit());
  }

  if (_internal_has_min_need_player()) {
    // required uint32 min_need_player = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_need_player());
  }

  if (_internal_has_type()) {
    // required uint32 type = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_recommand_fight()) {
    // required uint32 recommand_fight = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recommand_fight());
  }

  if (_internal_has_teammode()) {
    // required uint32 teammode = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teammode());
  }

  if (_internal_has_autoenter()) {
    // required bool Autoenter = 15;
    total_size += 1 + 1;
  }

  if (_internal_has_chatchannel()) {
    // required uint32 chatchannel = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chatchannel());
  }

  if (_internal_has_daytimesuclimit()) {
    // required uint32 daytimesuclimit = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_daytimesuclimit());
  }

  if (_internal_has_explvllimit()) {
    // required uint32 explvllimit = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_explvllimit());
  }

  if (_internal_has_originonly()) {
    // required uint32 originonly = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_originonly());
  }

  return total_size;
}
size_t copymapmaster_t_copymap_master::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.copymapmaster.t_copymap_master)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0007ffff) ^ 0x0007ffff) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string award = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_award());

    // required string overmap_type_ui = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_overmap_type_ui());

    // required string desc = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());

    // required string bossdiecameramove = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bossdiecameramove());

    // required string first_award = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_award());

    // required string assist_npc = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assist_npc());

    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 daytimelimit = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_daytimelimit());

    // required uint32 min_need_player = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_need_player());

    // required uint32 type = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 recommand_fight = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recommand_fight());

    // required uint32 teammode = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teammode());

    // required bool Autoenter = 15;
    total_size += 1 + 1;

    // required uint32 chatchannel = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_chatchannel());

    // required uint32 daytimesuclimit = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_daytimesuclimit());

    // required uint32 explvllimit = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_explvllimit());

    // required uint32 originonly = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_originonly());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void copymapmaster_t_copymap_master::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.copymapmaster.t_copymap_master)
  GOOGLE_DCHECK_NE(&from, this);
  const copymapmaster_t_copymap_master* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<copymapmaster_t_copymap_master>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.copymapmaster.t_copymap_master)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.copymapmaster.t_copymap_master)
    MergeFrom(*source);
  }
}

void copymapmaster_t_copymap_master::MergeFrom(const copymapmaster_t_copymap_master& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.copymapmaster.t_copymap_master)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      award_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.award_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      overmap_type_ui_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.overmap_type_ui_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      bossdiecameramove_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bossdiecameramove_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      first_award_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_award_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      assist_npc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assist_npc_);
    }
    if (cached_has_bits & 0x00000080u) {
      tbxid_ = from.tbxid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      daytimelimit_ = from.daytimelimit_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_need_player_ = from.min_need_player_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00001000u) {
      recommand_fight_ = from.recommand_fight_;
    }
    if (cached_has_bits & 0x00002000u) {
      teammode_ = from.teammode_;
    }
    if (cached_has_bits & 0x00004000u) {
      autoenter_ = from.autoenter_;
    }
    if (cached_has_bits & 0x00008000u) {
      chatchannel_ = from.chatchannel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      daytimesuclimit_ = from.daytimesuclimit_;
    }
    if (cached_has_bits & 0x00020000u) {
      explvllimit_ = from.explvllimit_;
    }
    if (cached_has_bits & 0x00040000u) {
      originonly_ = from.originonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void copymapmaster_t_copymap_master::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.copymapmaster.t_copymap_master)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void copymapmaster_t_copymap_master::CopyFrom(const copymapmaster_t_copymap_master& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.copymapmaster.t_copymap_master)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool copymapmaster_t_copymap_master::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;
  return true;
}

void copymapmaster_t_copymap_master::InternalSwap(copymapmaster_t_copymap_master* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  award_.Swap(&other->award_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  overmap_type_ui_.Swap(&other->overmap_type_ui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bossdiecameramove_.Swap(&other->bossdiecameramove_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_award_.Swap(&other->first_award_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  assist_npc_.Swap(&other->assist_npc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(daytimelimit_, other->daytimelimit_);
  swap(min_need_player_, other->min_need_player_);
  swap(type_, other->type_);
  swap(recommand_fight_, other->recommand_fight_);
  swap(teammode_, other->teammode_);
  swap(autoenter_, other->autoenter_);
  swap(chatchannel_, other->chatchannel_);
  swap(daytimesuclimit_, other->daytimesuclimit_);
  swap(explvllimit_, other->explvllimit_);
  swap(originonly_, other->originonly_);
}

::PROTOBUF_NAMESPACE_ID::Metadata copymapmaster_t_copymap_master::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void copymapmaster::InitAsDefaultInstance() {
}
class copymapmaster::_Internal {
 public:
  using HasBits = decltype(std::declval<copymapmaster>()._has_bits_);
};

copymapmaster::copymapmaster()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.copymapmaster)
}
copymapmaster::copymapmaster(const copymapmaster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.copymapmaster)
}

void copymapmaster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_copymapmaster_copymapmaster_2eproto.base);
}

copymapmaster::~copymapmaster() {
  // @@protoc_insertion_point(destructor:pb.copymapmaster)
  SharedDtor();
}

void copymapmaster::SharedDtor() {
}

void copymapmaster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const copymapmaster& copymapmaster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_copymapmaster_copymapmaster_2eproto.base);
  return *internal_default_instance();
}


void copymapmaster::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.copymapmaster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* copymapmaster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.copymapmaster.t_copymap_master datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* copymapmaster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.copymapmaster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.copymapmaster.t_copymap_master datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.copymapmaster)
  return target;
}

size_t copymapmaster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.copymapmaster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.copymapmaster.t_copymap_master datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void copymapmaster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.copymapmaster)
  GOOGLE_DCHECK_NE(&from, this);
  const copymapmaster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<copymapmaster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.copymapmaster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.copymapmaster)
    MergeFrom(*source);
  }
}

void copymapmaster::MergeFrom(const copymapmaster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.copymapmaster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void copymapmaster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.copymapmaster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void copymapmaster::CopyFrom(const copymapmaster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.copymapmaster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool copymapmaster::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void copymapmaster::InternalSwap(copymapmaster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata copymapmaster::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::copymapmaster_t_copymap_master* Arena::CreateMaybeMessage< ::pb::copymapmaster_t_copymap_master >(Arena* arena) {
  return Arena::CreateInternal< ::pb::copymapmaster_t_copymap_master >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::copymapmaster* Arena::CreateMaybeMessage< ::pb::copymapmaster >(Arena* arena) {
  return Arena::CreateInternal< ::pb::copymapmaster >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
