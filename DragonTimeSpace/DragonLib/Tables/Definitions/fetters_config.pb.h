// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fetters_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fetters_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fetters_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fetters_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fetters_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fetters_5fconfig_2eproto;
namespace pb {
class fetters_config;
class fetters_configDefaultTypeInternal;
extern fetters_configDefaultTypeInternal _fetters_config_default_instance_;
class fetters_config_t_fetters;
class fetters_config_t_fettersDefaultTypeInternal;
extern fetters_config_t_fettersDefaultTypeInternal _fetters_config_t_fetters_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::fetters_config* Arena::CreateMaybeMessage<::pb::fetters_config>(Arena*);
template<> ::pb::fetters_config_t_fetters* Arena::CreateMaybeMessage<::pb::fetters_config_t_fetters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class fetters_config_t_fetters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.fetters_config.t_fetters) */ {
 public:
  fetters_config_t_fetters();
  virtual ~fetters_config_t_fetters();

  fetters_config_t_fetters(const fetters_config_t_fetters& from);
  fetters_config_t_fetters(fetters_config_t_fetters&& from) noexcept
    : fetters_config_t_fetters() {
    *this = ::std::move(from);
  }

  inline fetters_config_t_fetters& operator=(const fetters_config_t_fetters& from) {
    CopyFrom(from);
    return *this;
  }
  inline fetters_config_t_fetters& operator=(fetters_config_t_fetters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fetters_config_t_fetters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fetters_config_t_fetters* internal_default_instance() {
    return reinterpret_cast<const fetters_config_t_fetters*>(
               &_fetters_config_t_fetters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(fetters_config_t_fetters& a, fetters_config_t_fetters& b) {
    a.Swap(&b);
  }
  inline void Swap(fetters_config_t_fetters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fetters_config_t_fetters* New() const final {
    return CreateMaybeMessage<fetters_config_t_fetters>(nullptr);
  }

  fetters_config_t_fetters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fetters_config_t_fetters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fetters_config_t_fetters& from);
  void MergeFrom(const fetters_config_t_fetters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fetters_config_t_fetters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.fetters_config.t_fetters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fetters_5fconfig_2eproto);
    return ::descriptor_table_fetters_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuetypeFieldNumber = 3,
    kAddvalueFieldNumber = 4,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // required string valuetype = 3;
  bool has_valuetype() const;
  private:
  bool _internal_has_valuetype() const;
  public:
  void clear_valuetype();
  const std::string& valuetype() const;
  void set_valuetype(const std::string& value);
  void set_valuetype(std::string&& value);
  void set_valuetype(const char* value);
  void set_valuetype(const char* value, size_t size);
  std::string* mutable_valuetype();
  std::string* release_valuetype();
  void set_allocated_valuetype(std::string* valuetype);
  private:
  const std::string& _internal_valuetype() const;
  void _internal_set_valuetype(const std::string& value);
  std::string* _internal_mutable_valuetype();
  public:

  // required string addvalue = 4;
  bool has_addvalue() const;
  private:
  bool _internal_has_addvalue() const;
  public:
  void clear_addvalue();
  const std::string& addvalue() const;
  void set_addvalue(const std::string& value);
  void set_addvalue(std::string&& value);
  void set_addvalue(const char* value);
  void set_addvalue(const char* value, size_t size);
  std::string* mutable_addvalue();
  std::string* release_addvalue();
  void set_allocated_addvalue(std::string* addvalue);
  private:
  const std::string& _internal_addvalue() const;
  void _internal_set_addvalue(const std::string& value);
  std::string* _internal_mutable_addvalue();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.fetters_config.t_fetters)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valuetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_fetters_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class fetters_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.fetters_config) */ {
 public:
  fetters_config();
  virtual ~fetters_config();

  fetters_config(const fetters_config& from);
  fetters_config(fetters_config&& from) noexcept
    : fetters_config() {
    *this = ::std::move(from);
  }

  inline fetters_config& operator=(const fetters_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline fetters_config& operator=(fetters_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fetters_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fetters_config* internal_default_instance() {
    return reinterpret_cast<const fetters_config*>(
               &_fetters_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(fetters_config& a, fetters_config& b) {
    a.Swap(&b);
  }
  inline void Swap(fetters_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fetters_config* New() const final {
    return CreateMaybeMessage<fetters_config>(nullptr);
  }

  fetters_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fetters_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fetters_config& from);
  void MergeFrom(const fetters_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fetters_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.fetters_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fetters_5fconfig_2eproto);
    return ::descriptor_table_fetters_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef fetters_config_t_fetters t_fetters;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.fetters_config.t_fetters datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::fetters_config_t_fetters* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::fetters_config_t_fetters >*
      mutable_datas();
  private:
  const ::pb::fetters_config_t_fetters& _internal_datas(int index) const;
  ::pb::fetters_config_t_fetters* _internal_add_datas();
  public:
  const ::pb::fetters_config_t_fetters& datas(int index) const;
  ::pb::fetters_config_t_fetters* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::fetters_config_t_fetters >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.fetters_config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::fetters_config_t_fetters > datas_;
  friend struct ::TableStruct_fetters_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// fetters_config_t_fetters

// required uint32 tbxid = 1 [default = 0];
inline bool fetters_config_t_fetters::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool fetters_config_t_fetters::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void fetters_config_t_fetters::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fetters_config_t_fetters::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fetters_config_t_fetters::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.fetters_config.t_fetters.tbxid)
  return _internal_tbxid();
}
inline void fetters_config_t_fetters::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tbxid_ = value;
}
inline void fetters_config_t_fetters::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.fetters_config.t_fetters.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool fetters_config_t_fetters::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool fetters_config_t_fetters::has_id() const {
  return _internal_has_id();
}
inline void fetters_config_t_fetters::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fetters_config_t_fetters::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fetters_config_t_fetters::id() const {
  // @@protoc_insertion_point(field_get:pb.fetters_config.t_fetters.id)
  return _internal_id();
}
inline void fetters_config_t_fetters::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void fetters_config_t_fetters::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.fetters_config.t_fetters.id)
}

// required string valuetype = 3;
inline bool fetters_config_t_fetters::_internal_has_valuetype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool fetters_config_t_fetters::has_valuetype() const {
  return _internal_has_valuetype();
}
inline void fetters_config_t_fetters::clear_valuetype() {
  valuetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& fetters_config_t_fetters::valuetype() const {
  // @@protoc_insertion_point(field_get:pb.fetters_config.t_fetters.valuetype)
  return _internal_valuetype();
}
inline void fetters_config_t_fetters::set_valuetype(const std::string& value) {
  _internal_set_valuetype(value);
  // @@protoc_insertion_point(field_set:pb.fetters_config.t_fetters.valuetype)
}
inline std::string* fetters_config_t_fetters::mutable_valuetype() {
  // @@protoc_insertion_point(field_mutable:pb.fetters_config.t_fetters.valuetype)
  return _internal_mutable_valuetype();
}
inline const std::string& fetters_config_t_fetters::_internal_valuetype() const {
  return valuetype_.GetNoArena();
}
inline void fetters_config_t_fetters::_internal_set_valuetype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  valuetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void fetters_config_t_fetters::set_valuetype(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  valuetype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.fetters_config.t_fetters.valuetype)
}
inline void fetters_config_t_fetters::set_valuetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  valuetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.fetters_config.t_fetters.valuetype)
}
inline void fetters_config_t_fetters::set_valuetype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  valuetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.fetters_config.t_fetters.valuetype)
}
inline std::string* fetters_config_t_fetters::_internal_mutable_valuetype() {
  _has_bits_[0] |= 0x00000001u;
  return valuetype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* fetters_config_t_fetters::release_valuetype() {
  // @@protoc_insertion_point(field_release:pb.fetters_config.t_fetters.valuetype)
  if (!_internal_has_valuetype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return valuetype_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void fetters_config_t_fetters::set_allocated_valuetype(std::string* valuetype) {
  if (valuetype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  valuetype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), valuetype);
  // @@protoc_insertion_point(field_set_allocated:pb.fetters_config.t_fetters.valuetype)
}

// required string addvalue = 4;
inline bool fetters_config_t_fetters::_internal_has_addvalue() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool fetters_config_t_fetters::has_addvalue() const {
  return _internal_has_addvalue();
}
inline void fetters_config_t_fetters::clear_addvalue() {
  addvalue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& fetters_config_t_fetters::addvalue() const {
  // @@protoc_insertion_point(field_get:pb.fetters_config.t_fetters.addvalue)
  return _internal_addvalue();
}
inline void fetters_config_t_fetters::set_addvalue(const std::string& value) {
  _internal_set_addvalue(value);
  // @@protoc_insertion_point(field_set:pb.fetters_config.t_fetters.addvalue)
}
inline std::string* fetters_config_t_fetters::mutable_addvalue() {
  // @@protoc_insertion_point(field_mutable:pb.fetters_config.t_fetters.addvalue)
  return _internal_mutable_addvalue();
}
inline const std::string& fetters_config_t_fetters::_internal_addvalue() const {
  return addvalue_.GetNoArena();
}
inline void fetters_config_t_fetters::_internal_set_addvalue(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  addvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void fetters_config_t_fetters::set_addvalue(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  addvalue_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.fetters_config.t_fetters.addvalue)
}
inline void fetters_config_t_fetters::set_addvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  addvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.fetters_config.t_fetters.addvalue)
}
inline void fetters_config_t_fetters::set_addvalue(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  addvalue_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.fetters_config.t_fetters.addvalue)
}
inline std::string* fetters_config_t_fetters::_internal_mutable_addvalue() {
  _has_bits_[0] |= 0x00000002u;
  return addvalue_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* fetters_config_t_fetters::release_addvalue() {
  // @@protoc_insertion_point(field_release:pb.fetters_config.t_fetters.addvalue)
  if (!_internal_has_addvalue()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return addvalue_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void fetters_config_t_fetters::set_allocated_addvalue(std::string* addvalue) {
  if (addvalue != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  addvalue_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addvalue);
  // @@protoc_insertion_point(field_set_allocated:pb.fetters_config.t_fetters.addvalue)
}

// -------------------------------------------------------------------

// fetters_config

// repeated .pb.fetters_config.t_fetters datas = 1;
inline int fetters_config::_internal_datas_size() const {
  return datas_.size();
}
inline int fetters_config::datas_size() const {
  return _internal_datas_size();
}
inline void fetters_config::clear_datas() {
  datas_.Clear();
}
inline ::pb::fetters_config_t_fetters* fetters_config::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.fetters_config.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::fetters_config_t_fetters >*
fetters_config::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.fetters_config.datas)
  return &datas_;
}
inline const ::pb::fetters_config_t_fetters& fetters_config::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::fetters_config_t_fetters& fetters_config::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.fetters_config.datas)
  return _internal_datas(index);
}
inline ::pb::fetters_config_t_fetters* fetters_config::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::fetters_config_t_fetters* fetters_config::add_datas() {
  // @@protoc_insertion_point(field_add:pb.fetters_config.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::fetters_config_t_fetters >&
fetters_config::datas() const {
  // @@protoc_insertion_point(field_list:pb.fetters_config.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fetters_5fconfig_2eproto
