// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_level_config.proto

#include "player_level_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_player_5flevel_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_player_level_config_t_player_level_config_player_5flevel_5fconfig_2eproto;
namespace pb {
class player_level_config_t_player_level_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<player_level_config_t_player_level_config> _instance;
} _player_level_config_t_player_level_config_default_instance_;
class player_level_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<player_level_config> _instance;
} _player_level_config_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_player_level_config_player_5flevel_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_player_level_config_default_instance_;
    new (ptr) ::pb::player_level_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::player_level_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_player_level_config_player_5flevel_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_player_level_config_player_5flevel_5fconfig_2eproto}, {
      &scc_info_player_level_config_t_player_level_config_player_5flevel_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_player_level_config_t_player_level_config_player_5flevel_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_player_level_config_t_player_level_config_default_instance_;
    new (ptr) ::pb::player_level_config_t_player_level_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::player_level_config_t_player_level_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_player_level_config_t_player_level_config_player_5flevel_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_player_level_config_t_player_level_config_player_5flevel_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_player_5flevel_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_player_5flevel_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_player_5flevel_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_player_5flevel_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, id_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, exp_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, phy_power_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, hero_bag_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, leadership_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, buddy_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, phy_power_award_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, item_bag_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, fairy_air_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, morale_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, equip_bag_limit_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config_t_player_level_config, buy_silver_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::player_level_config, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::pb::player_level_config_t_player_level_config)},
  { 31, 37, sizeof(::pb::player_level_config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_player_level_config_t_player_level_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_player_level_config_default_instance_),
};

const char descriptor_table_protodef_player_5flevel_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031player_level_config.proto\022\002pb\"\202\003\n\023play"
  "er_level_config\022<\n\005datas\030\001 \003(\0132-.pb.play"
  "er_level_config.t_player_level_config\032\254\002"
  "\n\025t_player_level_config\022\020\n\005tbxid\030\001 \002(\r:\001"
  "0\022\r\n\002id\030\002 \002(\r:\0010\022\013\n\003exp\030\003 \002(\r\022\027\n\017phy_pow"
  "er_limit\030\004 \002(\r\022\026\n\016hero_bag_limit\030\005 \002(\r\022\030"
  "\n\020leadership_limit\030\006 \002(\r\022\023\n\013buddy_limit\030"
  "\007 \002(\r\022\027\n\017phy_power_award\030\010 \002(\r\022\026\n\016item_b"
  "ag_limit\030\t \002(\r\022\027\n\017fairy_air_limit\030\n \002(\r\022"
  "\016\n\006morale\030\013 \002(\r\022\027\n\017equip_bag_limit\030\014 \002(\r"
  "\022\022\n\nbuy_silver\030\r \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_player_5flevel_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_player_5flevel_5fconfig_2eproto_sccs[2] = {
  &scc_info_player_level_config_player_5flevel_5fconfig_2eproto.base,
  &scc_info_player_level_config_t_player_level_config_player_5flevel_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_player_5flevel_5fconfig_2eproto_once;
static bool descriptor_table_player_5flevel_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_player_5flevel_5fconfig_2eproto = {
  &descriptor_table_player_5flevel_5fconfig_2eproto_initialized, descriptor_table_protodef_player_5flevel_5fconfig_2eproto, "player_level_config.proto", 420,
  &descriptor_table_player_5flevel_5fconfig_2eproto_once, descriptor_table_player_5flevel_5fconfig_2eproto_sccs, descriptor_table_player_5flevel_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_player_5flevel_5fconfig_2eproto::offsets,
  file_level_metadata_player_5flevel_5fconfig_2eproto, 2, file_level_enum_descriptors_player_5flevel_5fconfig_2eproto, file_level_service_descriptors_player_5flevel_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_player_5flevel_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_player_5flevel_5fconfig_2eproto)), true);
namespace pb {

// ===================================================================

void player_level_config_t_player_level_config::InitAsDefaultInstance() {
}
class player_level_config_t_player_level_config::_Internal {
 public:
  using HasBits = decltype(std::declval<player_level_config_t_player_level_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phy_power_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hero_bag_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_leadership_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_buddy_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_phy_power_award(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_item_bag_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_fairy_air_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_morale(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_equip_bag_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_buy_silver(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

player_level_config_t_player_level_config::player_level_config_t_player_level_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.player_level_config.t_player_level_config)
}
player_level_config_t_player_level_config::player_level_config_t_player_level_config(const player_level_config_t_player_level_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&buy_silver_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(buy_silver_));
  // @@protoc_insertion_point(copy_constructor:pb.player_level_config.t_player_level_config)
}

void player_level_config_t_player_level_config::SharedCtor() {
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buy_silver_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(buy_silver_));
}

player_level_config_t_player_level_config::~player_level_config_t_player_level_config() {
  // @@protoc_insertion_point(destructor:pb.player_level_config.t_player_level_config)
  SharedDtor();
}

void player_level_config_t_player_level_config::SharedDtor() {
}

void player_level_config_t_player_level_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const player_level_config_t_player_level_config& player_level_config_t_player_level_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_player_level_config_t_player_level_config_player_5flevel_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void player_level_config_t_player_level_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.player_level_config.t_player_level_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phy_power_award_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(phy_power_award_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&item_bag_limit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buy_silver_) -
        reinterpret_cast<char*>(&item_bag_limit_)) + sizeof(buy_silver_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* player_level_config_t_player_level_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&has_bits);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 exp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 phy_power_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_phy_power_limit(&has_bits);
          phy_power_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hero_bag_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hero_bag_limit(&has_bits);
          hero_bag_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 leadership_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_leadership_limit(&has_bits);
          leadership_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 buddy_limit = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_buddy_limit(&has_bits);
          buddy_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 phy_power_award = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_phy_power_award(&has_bits);
          phy_power_award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 item_bag_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_item_bag_limit(&has_bits);
          item_bag_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fairy_air_limit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_fairy_air_limit(&has_bits);
          fairy_air_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 morale = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_morale(&has_bits);
          morale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 equip_bag_limit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_equip_bag_limit(&has_bits);
          equip_bag_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 buy_silver = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_buy_silver(&has_bits);
          buy_silver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* player_level_config_t_player_level_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.player_level_config.t_player_level_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required uint32 exp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_exp(), target);
  }

  // required uint32 phy_power_limit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_phy_power_limit(), target);
  }

  // required uint32 hero_bag_limit = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_bag_limit(), target);
  }

  // required uint32 leadership_limit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_leadership_limit(), target);
  }

  // required uint32 buddy_limit = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_buddy_limit(), target);
  }

  // required uint32 phy_power_award = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_phy_power_award(), target);
  }

  // required uint32 item_bag_limit = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_item_bag_limit(), target);
  }

  // required uint32 fairy_air_limit = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_fairy_air_limit(), target);
  }

  // required uint32 morale = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_morale(), target);
  }

  // required uint32 equip_bag_limit = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_equip_bag_limit(), target);
  }

  // required uint32 buy_silver = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_buy_silver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.player_level_config.t_player_level_config)
  return target;
}

size_t player_level_config_t_player_level_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.player_level_config.t_player_level_config)
  size_t total_size = 0;

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_exp()) {
    // required uint32 exp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp());
  }

  if (_internal_has_phy_power_limit()) {
    // required uint32 phy_power_limit = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_phy_power_limit());
  }

  if (_internal_has_hero_bag_limit()) {
    // required uint32 hero_bag_limit = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hero_bag_limit());
  }

  if (_internal_has_leadership_limit()) {
    // required uint32 leadership_limit = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leadership_limit());
  }

  if (_internal_has_buddy_limit()) {
    // required uint32 buddy_limit = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buddy_limit());
  }

  if (_internal_has_phy_power_award()) {
    // required uint32 phy_power_award = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_phy_power_award());
  }

  if (_internal_has_item_bag_limit()) {
    // required uint32 item_bag_limit = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_bag_limit());
  }

  if (_internal_has_fairy_air_limit()) {
    // required uint32 fairy_air_limit = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fairy_air_limit());
  }

  if (_internal_has_morale()) {
    // required uint32 morale = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_morale());
  }

  if (_internal_has_equip_bag_limit()) {
    // required uint32 equip_bag_limit = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_equip_bag_limit());
  }

  if (_internal_has_buy_silver()) {
    // required uint32 buy_silver = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buy_silver());
  }

  return total_size;
}
size_t player_level_config_t_player_level_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.player_level_config.t_player_level_config)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 exp = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp());

    // required uint32 phy_power_limit = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_phy_power_limit());

    // required uint32 hero_bag_limit = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hero_bag_limit());

    // required uint32 leadership_limit = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leadership_limit());

    // required uint32 buddy_limit = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buddy_limit());

    // required uint32 phy_power_award = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_phy_power_award());

    // required uint32 item_bag_limit = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item_bag_limit());

    // required uint32 fairy_air_limit = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fairy_air_limit());

    // required uint32 morale = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_morale());

    // required uint32 equip_bag_limit = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_equip_bag_limit());

    // required uint32 buy_silver = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_buy_silver());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void player_level_config_t_player_level_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.player_level_config.t_player_level_config)
  GOOGLE_DCHECK_NE(&from, this);
  const player_level_config_t_player_level_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<player_level_config_t_player_level_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.player_level_config.t_player_level_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.player_level_config.t_player_level_config)
    MergeFrom(*source);
  }
}

void player_level_config_t_player_level_config::MergeFrom(const player_level_config_t_player_level_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.player_level_config.t_player_level_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000008u) {
      phy_power_limit_ = from.phy_power_limit_;
    }
    if (cached_has_bits & 0x00000010u) {
      hero_bag_limit_ = from.hero_bag_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      leadership_limit_ = from.leadership_limit_;
    }
    if (cached_has_bits & 0x00000040u) {
      buddy_limit_ = from.buddy_limit_;
    }
    if (cached_has_bits & 0x00000080u) {
      phy_power_award_ = from.phy_power_award_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      item_bag_limit_ = from.item_bag_limit_;
    }
    if (cached_has_bits & 0x00000200u) {
      fairy_air_limit_ = from.fairy_air_limit_;
    }
    if (cached_has_bits & 0x00000400u) {
      morale_ = from.morale_;
    }
    if (cached_has_bits & 0x00000800u) {
      equip_bag_limit_ = from.equip_bag_limit_;
    }
    if (cached_has_bits & 0x00001000u) {
      buy_silver_ = from.buy_silver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void player_level_config_t_player_level_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.player_level_config.t_player_level_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_level_config_t_player_level_config::CopyFrom(const player_level_config_t_player_level_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.player_level_config.t_player_level_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_level_config_t_player_level_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void player_level_config_t_player_level_config::InternalSwap(player_level_config_t_player_level_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(exp_, other->exp_);
  swap(phy_power_limit_, other->phy_power_limit_);
  swap(hero_bag_limit_, other->hero_bag_limit_);
  swap(leadership_limit_, other->leadership_limit_);
  swap(buddy_limit_, other->buddy_limit_);
  swap(phy_power_award_, other->phy_power_award_);
  swap(item_bag_limit_, other->item_bag_limit_);
  swap(fairy_air_limit_, other->fairy_air_limit_);
  swap(morale_, other->morale_);
  swap(equip_bag_limit_, other->equip_bag_limit_);
  swap(buy_silver_, other->buy_silver_);
}

::PROTOBUF_NAMESPACE_ID::Metadata player_level_config_t_player_level_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void player_level_config::InitAsDefaultInstance() {
}
class player_level_config::_Internal {
 public:
  using HasBits = decltype(std::declval<player_level_config>()._has_bits_);
};

player_level_config::player_level_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.player_level_config)
}
player_level_config::player_level_config(const player_level_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.player_level_config)
}

void player_level_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_player_level_config_player_5flevel_5fconfig_2eproto.base);
}

player_level_config::~player_level_config() {
  // @@protoc_insertion_point(destructor:pb.player_level_config)
  SharedDtor();
}

void player_level_config::SharedDtor() {
}

void player_level_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const player_level_config& player_level_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_player_level_config_player_5flevel_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void player_level_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.player_level_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* player_level_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.player_level_config.t_player_level_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* player_level_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.player_level_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.player_level_config.t_player_level_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.player_level_config)
  return target;
}

size_t player_level_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.player_level_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.player_level_config.t_player_level_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void player_level_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.player_level_config)
  GOOGLE_DCHECK_NE(&from, this);
  const player_level_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<player_level_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.player_level_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.player_level_config)
    MergeFrom(*source);
  }
}

void player_level_config::MergeFrom(const player_level_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.player_level_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void player_level_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.player_level_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_level_config::CopyFrom(const player_level_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.player_level_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_level_config::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void player_level_config::InternalSwap(player_level_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata player_level_config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::player_level_config_t_player_level_config* Arena::CreateMaybeMessage< ::pb::player_level_config_t_player_level_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::player_level_config_t_player_level_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::player_level_config* Arena::CreateMaybeMessage< ::pb::player_level_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::player_level_config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
