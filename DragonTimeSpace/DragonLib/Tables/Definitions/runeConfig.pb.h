// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runeConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_runeConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_runeConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_runeConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_runeConfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_runeConfig_2eproto;
namespace pb {
class runeConfig;
class runeConfigDefaultTypeInternal;
extern runeConfigDefaultTypeInternal _runeConfig_default_instance_;
class runeConfig_t_rune_config;
class runeConfig_t_rune_configDefaultTypeInternal;
extern runeConfig_t_rune_configDefaultTypeInternal _runeConfig_t_rune_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::runeConfig* Arena::CreateMaybeMessage<::pb::runeConfig>(Arena*);
template<> ::pb::runeConfig_t_rune_config* Arena::CreateMaybeMessage<::pb::runeConfig_t_rune_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class runeConfig_t_rune_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.runeConfig.t_rune_config) */ {
 public:
  runeConfig_t_rune_config();
  virtual ~runeConfig_t_rune_config();

  runeConfig_t_rune_config(const runeConfig_t_rune_config& from);
  runeConfig_t_rune_config(runeConfig_t_rune_config&& from) noexcept
    : runeConfig_t_rune_config() {
    *this = ::std::move(from);
  }

  inline runeConfig_t_rune_config& operator=(const runeConfig_t_rune_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline runeConfig_t_rune_config& operator=(runeConfig_t_rune_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const runeConfig_t_rune_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const runeConfig_t_rune_config* internal_default_instance() {
    return reinterpret_cast<const runeConfig_t_rune_config*>(
               &_runeConfig_t_rune_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(runeConfig_t_rune_config& a, runeConfig_t_rune_config& b) {
    a.Swap(&b);
  }
  inline void Swap(runeConfig_t_rune_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline runeConfig_t_rune_config* New() const final {
    return CreateMaybeMessage<runeConfig_t_rune_config>(nullptr);
  }

  runeConfig_t_rune_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<runeConfig_t_rune_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const runeConfig_t_rune_config& from);
  void MergeFrom(const runeConfig_t_rune_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(runeConfig_t_rune_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.runeConfig.t_rune_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runeConfig_2eproto);
    return ::descriptor_table_runeConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPropertyFieldNumber = 6,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kLevelFieldNumber = 4,
    kExpFieldNumber = 5,
    kTypeFieldNumber = 7,
    kQualitycoeFieldNumber = 8,
    kQualityFieldNumber = 9,
    kCombinetypeFieldNumber = 10,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string property = 6;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  void set_property(const std::string& value);
  void set_property(std::string&& value);
  void set_property(const char* value);
  void set_property(const char* value, size_t size);
  std::string* mutable_property();
  std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 level = 4;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 exp = 5;
  bool has_exp() const;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 qualitycoe = 8;
  bool has_qualitycoe() const;
  private:
  bool _internal_has_qualitycoe() const;
  public:
  void clear_qualitycoe();
  ::PROTOBUF_NAMESPACE_ID::uint32 qualitycoe() const;
  void set_qualitycoe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qualitycoe() const;
  void _internal_set_qualitycoe(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 quality = 9;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  ::PROTOBUF_NAMESPACE_ID::uint32 quality() const;
  void set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quality() const;
  void _internal_set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 combinetype = 10;
  bool has_combinetype() const;
  private:
  bool _internal_has_combinetype() const;
  public:
  void clear_combinetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 combinetype() const;
  void set_combinetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_combinetype() const;
  void _internal_set_combinetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.runeConfig.t_rune_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 qualitycoe_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_;
  ::PROTOBUF_NAMESPACE_ID::uint32 combinetype_;
  friend struct ::TableStruct_runeConfig_2eproto;
};
// -------------------------------------------------------------------

class runeConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.runeConfig) */ {
 public:
  runeConfig();
  virtual ~runeConfig();

  runeConfig(const runeConfig& from);
  runeConfig(runeConfig&& from) noexcept
    : runeConfig() {
    *this = ::std::move(from);
  }

  inline runeConfig& operator=(const runeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline runeConfig& operator=(runeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const runeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const runeConfig* internal_default_instance() {
    return reinterpret_cast<const runeConfig*>(
               &_runeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(runeConfig& a, runeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(runeConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline runeConfig* New() const final {
    return CreateMaybeMessage<runeConfig>(nullptr);
  }

  runeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<runeConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const runeConfig& from);
  void MergeFrom(const runeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(runeConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.runeConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_runeConfig_2eproto);
    return ::descriptor_table_runeConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef runeConfig_t_rune_config t_rune_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.runeConfig.t_rune_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::runeConfig_t_rune_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::runeConfig_t_rune_config >*
      mutable_datas();
  private:
  const ::pb::runeConfig_t_rune_config& _internal_datas(int index) const;
  ::pb::runeConfig_t_rune_config* _internal_add_datas();
  public:
  const ::pb::runeConfig_t_rune_config& datas(int index) const;
  ::pb::runeConfig_t_rune_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::runeConfig_t_rune_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.runeConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::runeConfig_t_rune_config > datas_;
  friend struct ::TableStruct_runeConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// runeConfig_t_rune_config

// required uint32 tbxid = 1 [default = 0];
inline bool runeConfig_t_rune_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool runeConfig_t_rune_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void runeConfig_t_rune_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.t_rune_config.tbxid)
  return _internal_tbxid();
}
inline void runeConfig_t_rune_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tbxid_ = value;
}
inline void runeConfig_t_rune_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.runeConfig.t_rune_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool runeConfig_t_rune_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool runeConfig_t_rune_config::has_id() const {
  return _internal_has_id();
}
inline void runeConfig_t_rune_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::id() const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.t_rune_config.id)
  return _internal_id();
}
inline void runeConfig_t_rune_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void runeConfig_t_rune_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.runeConfig.t_rune_config.id)
}

// required string name = 3;
inline bool runeConfig_t_rune_config::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool runeConfig_t_rune_config::has_name() const {
  return _internal_has_name();
}
inline void runeConfig_t_rune_config::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& runeConfig_t_rune_config::name() const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.t_rune_config.name)
  return _internal_name();
}
inline void runeConfig_t_rune_config::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.runeConfig.t_rune_config.name)
}
inline std::string* runeConfig_t_rune_config::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.runeConfig.t_rune_config.name)
  return _internal_mutable_name();
}
inline const std::string& runeConfig_t_rune_config::_internal_name() const {
  return name_.GetNoArena();
}
inline void runeConfig_t_rune_config::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void runeConfig_t_rune_config::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.runeConfig.t_rune_config.name)
}
inline void runeConfig_t_rune_config::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.runeConfig.t_rune_config.name)
}
inline void runeConfig_t_rune_config::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.runeConfig.t_rune_config.name)
}
inline std::string* runeConfig_t_rune_config::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* runeConfig_t_rune_config::release_name() {
  // @@protoc_insertion_point(field_release:pb.runeConfig.t_rune_config.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void runeConfig_t_rune_config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.runeConfig.t_rune_config.name)
}

// required uint32 level = 4;
inline bool runeConfig_t_rune_config::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool runeConfig_t_rune_config::has_level() const {
  return _internal_has_level();
}
inline void runeConfig_t_rune_config::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::level() const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.t_rune_config.level)
  return _internal_level();
}
inline void runeConfig_t_rune_config::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  level_ = value;
}
inline void runeConfig_t_rune_config::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.runeConfig.t_rune_config.level)
}

// required uint32 exp = 5;
inline bool runeConfig_t_rune_config::_internal_has_exp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool runeConfig_t_rune_config::has_exp() const {
  return _internal_has_exp();
}
inline void runeConfig_t_rune_config::clear_exp() {
  exp_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::exp() const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.t_rune_config.exp)
  return _internal_exp();
}
inline void runeConfig_t_rune_config::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  exp_ = value;
}
inline void runeConfig_t_rune_config::set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:pb.runeConfig.t_rune_config.exp)
}

// required string property = 6;
inline bool runeConfig_t_rune_config::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool runeConfig_t_rune_config::has_property() const {
  return _internal_has_property();
}
inline void runeConfig_t_rune_config::clear_property() {
  property_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& runeConfig_t_rune_config::property() const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.t_rune_config.property)
  return _internal_property();
}
inline void runeConfig_t_rune_config::set_property(const std::string& value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:pb.runeConfig.t_rune_config.property)
}
inline std::string* runeConfig_t_rune_config::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pb.runeConfig.t_rune_config.property)
  return _internal_mutable_property();
}
inline const std::string& runeConfig_t_rune_config::_internal_property() const {
  return property_.GetNoArena();
}
inline void runeConfig_t_rune_config::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  property_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void runeConfig_t_rune_config::set_property(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  property_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.runeConfig.t_rune_config.property)
}
inline void runeConfig_t_rune_config::set_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  property_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.runeConfig.t_rune_config.property)
}
inline void runeConfig_t_rune_config::set_property(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  property_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.runeConfig.t_rune_config.property)
}
inline std::string* runeConfig_t_rune_config::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000002u;
  return property_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* runeConfig_t_rune_config::release_property() {
  // @@protoc_insertion_point(field_release:pb.runeConfig.t_rune_config.property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return property_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void runeConfig_t_rune_config::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  property_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property);
  // @@protoc_insertion_point(field_set_allocated:pb.runeConfig.t_rune_config.property)
}

// required uint32 type = 7;
inline bool runeConfig_t_rune_config::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool runeConfig_t_rune_config::has_type() const {
  return _internal_has_type();
}
inline void runeConfig_t_rune_config::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::type() const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.t_rune_config.type)
  return _internal_type();
}
inline void runeConfig_t_rune_config::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void runeConfig_t_rune_config::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.runeConfig.t_rune_config.type)
}

// required uint32 qualitycoe = 8;
inline bool runeConfig_t_rune_config::_internal_has_qualitycoe() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool runeConfig_t_rune_config::has_qualitycoe() const {
  return _internal_has_qualitycoe();
}
inline void runeConfig_t_rune_config::clear_qualitycoe() {
  qualitycoe_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::_internal_qualitycoe() const {
  return qualitycoe_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::qualitycoe() const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.t_rune_config.qualitycoe)
  return _internal_qualitycoe();
}
inline void runeConfig_t_rune_config::_internal_set_qualitycoe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  qualitycoe_ = value;
}
inline void runeConfig_t_rune_config::set_qualitycoe(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_qualitycoe(value);
  // @@protoc_insertion_point(field_set:pb.runeConfig.t_rune_config.qualitycoe)
}

// required uint32 quality = 9;
inline bool runeConfig_t_rune_config::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool runeConfig_t_rune_config::has_quality() const {
  return _internal_has_quality();
}
inline void runeConfig_t_rune_config::clear_quality() {
  quality_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::_internal_quality() const {
  return quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::quality() const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.t_rune_config.quality)
  return _internal_quality();
}
inline void runeConfig_t_rune_config::_internal_set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  quality_ = value;
}
inline void runeConfig_t_rune_config::set_quality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:pb.runeConfig.t_rune_config.quality)
}

// required uint32 combinetype = 10;
inline bool runeConfig_t_rune_config::_internal_has_combinetype() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool runeConfig_t_rune_config::has_combinetype() const {
  return _internal_has_combinetype();
}
inline void runeConfig_t_rune_config::clear_combinetype() {
  combinetype_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::_internal_combinetype() const {
  return combinetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 runeConfig_t_rune_config::combinetype() const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.t_rune_config.combinetype)
  return _internal_combinetype();
}
inline void runeConfig_t_rune_config::_internal_set_combinetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  combinetype_ = value;
}
inline void runeConfig_t_rune_config::set_combinetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_combinetype(value);
  // @@protoc_insertion_point(field_set:pb.runeConfig.t_rune_config.combinetype)
}

// -------------------------------------------------------------------

// runeConfig

// repeated .pb.runeConfig.t_rune_config datas = 1;
inline int runeConfig::_internal_datas_size() const {
  return datas_.size();
}
inline int runeConfig::datas_size() const {
  return _internal_datas_size();
}
inline void runeConfig::clear_datas() {
  datas_.Clear();
}
inline ::pb::runeConfig_t_rune_config* runeConfig::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.runeConfig.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::runeConfig_t_rune_config >*
runeConfig::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.runeConfig.datas)
  return &datas_;
}
inline const ::pb::runeConfig_t_rune_config& runeConfig::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::runeConfig_t_rune_config& runeConfig::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.runeConfig.datas)
  return _internal_datas(index);
}
inline ::pb::runeConfig_t_rune_config* runeConfig::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::runeConfig_t_rune_config* runeConfig::add_datas() {
  // @@protoc_insertion_point(field_add:pb.runeConfig.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::runeConfig_t_rune_config >&
runeConfig::datas() const {
  // @@protoc_insertion_point(field_list:pb.runeConfig.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_runeConfig_2eproto
