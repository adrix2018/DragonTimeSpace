// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: growtarget_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_growtarget_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_growtarget_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_growtarget_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_growtarget_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_growtarget_5fconfig_2eproto;
namespace pb {
class growtarget_config;
class growtarget_configDefaultTypeInternal;
extern growtarget_configDefaultTypeInternal _growtarget_config_default_instance_;
class growtarget_config_t_growtarget_config;
class growtarget_config_t_growtarget_configDefaultTypeInternal;
extern growtarget_config_t_growtarget_configDefaultTypeInternal _growtarget_config_t_growtarget_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::growtarget_config* Arena::CreateMaybeMessage<::pb::growtarget_config>(Arena*);
template<> ::pb::growtarget_config_t_growtarget_config* Arena::CreateMaybeMessage<::pb::growtarget_config_t_growtarget_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class growtarget_config_t_growtarget_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.growtarget_config.t_growtarget_config) */ {
 public:
  growtarget_config_t_growtarget_config();
  virtual ~growtarget_config_t_growtarget_config();

  growtarget_config_t_growtarget_config(const growtarget_config_t_growtarget_config& from);
  growtarget_config_t_growtarget_config(growtarget_config_t_growtarget_config&& from) noexcept
    : growtarget_config_t_growtarget_config() {
    *this = ::std::move(from);
  }

  inline growtarget_config_t_growtarget_config& operator=(const growtarget_config_t_growtarget_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline growtarget_config_t_growtarget_config& operator=(growtarget_config_t_growtarget_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const growtarget_config_t_growtarget_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const growtarget_config_t_growtarget_config* internal_default_instance() {
    return reinterpret_cast<const growtarget_config_t_growtarget_config*>(
               &_growtarget_config_t_growtarget_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(growtarget_config_t_growtarget_config& a, growtarget_config_t_growtarget_config& b) {
    a.Swap(&b);
  }
  inline void Swap(growtarget_config_t_growtarget_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline growtarget_config_t_growtarget_config* New() const final {
    return CreateMaybeMessage<growtarget_config_t_growtarget_config>(nullptr);
  }

  growtarget_config_t_growtarget_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<growtarget_config_t_growtarget_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const growtarget_config_t_growtarget_config& from);
  void MergeFrom(const growtarget_config_t_growtarget_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(growtarget_config_t_growtarget_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.growtarget_config.t_growtarget_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_growtarget_5fconfig_2eproto);
    return ::descriptor_table_growtarget_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargettypeFieldNumber = 3,
    kTargetdesFieldNumber = 4,
    kRewardFieldNumber = 5,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // required string targettype = 3;
  bool has_targettype() const;
  private:
  bool _internal_has_targettype() const;
  public:
  void clear_targettype();
  const std::string& targettype() const;
  void set_targettype(const std::string& value);
  void set_targettype(std::string&& value);
  void set_targettype(const char* value);
  void set_targettype(const char* value, size_t size);
  std::string* mutable_targettype();
  std::string* release_targettype();
  void set_allocated_targettype(std::string* targettype);
  private:
  const std::string& _internal_targettype() const;
  void _internal_set_targettype(const std::string& value);
  std::string* _internal_mutable_targettype();
  public:

  // required string targetdes = 4;
  bool has_targetdes() const;
  private:
  bool _internal_has_targetdes() const;
  public:
  void clear_targetdes();
  const std::string& targetdes() const;
  void set_targetdes(const std::string& value);
  void set_targetdes(std::string&& value);
  void set_targetdes(const char* value);
  void set_targetdes(const char* value, size_t size);
  std::string* mutable_targetdes();
  std::string* release_targetdes();
  void set_allocated_targetdes(std::string* targetdes);
  private:
  const std::string& _internal_targetdes() const;
  void _internal_set_targetdes(const std::string& value);
  std::string* _internal_mutable_targetdes();
  public:

  // required string reward = 5;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const std::string& reward() const;
  void set_reward(const std::string& value);
  void set_reward(std::string&& value);
  void set_reward(const char* value);
  void set_reward(const char* value, size_t size);
  std::string* mutable_reward();
  std::string* release_reward();
  void set_allocated_reward(std::string* reward);
  private:
  const std::string& _internal_reward() const;
  void _internal_set_reward(const std::string& value);
  std::string* _internal_mutable_reward();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.growtarget_config.t_growtarget_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targettype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetdes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_growtarget_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class growtarget_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.growtarget_config) */ {
 public:
  growtarget_config();
  virtual ~growtarget_config();

  growtarget_config(const growtarget_config& from);
  growtarget_config(growtarget_config&& from) noexcept
    : growtarget_config() {
    *this = ::std::move(from);
  }

  inline growtarget_config& operator=(const growtarget_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline growtarget_config& operator=(growtarget_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const growtarget_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const growtarget_config* internal_default_instance() {
    return reinterpret_cast<const growtarget_config*>(
               &_growtarget_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(growtarget_config& a, growtarget_config& b) {
    a.Swap(&b);
  }
  inline void Swap(growtarget_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline growtarget_config* New() const final {
    return CreateMaybeMessage<growtarget_config>(nullptr);
  }

  growtarget_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<growtarget_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const growtarget_config& from);
  void MergeFrom(const growtarget_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(growtarget_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.growtarget_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_growtarget_5fconfig_2eproto);
    return ::descriptor_table_growtarget_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef growtarget_config_t_growtarget_config t_growtarget_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.growtarget_config.t_growtarget_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::growtarget_config_t_growtarget_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::growtarget_config_t_growtarget_config >*
      mutable_datas();
  private:
  const ::pb::growtarget_config_t_growtarget_config& _internal_datas(int index) const;
  ::pb::growtarget_config_t_growtarget_config* _internal_add_datas();
  public:
  const ::pb::growtarget_config_t_growtarget_config& datas(int index) const;
  ::pb::growtarget_config_t_growtarget_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::growtarget_config_t_growtarget_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.growtarget_config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::growtarget_config_t_growtarget_config > datas_;
  friend struct ::TableStruct_growtarget_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// growtarget_config_t_growtarget_config

// required uint32 tbxid = 1 [default = 0];
inline bool growtarget_config_t_growtarget_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool growtarget_config_t_growtarget_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void growtarget_config_t_growtarget_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 growtarget_config_t_growtarget_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 growtarget_config_t_growtarget_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.growtarget_config.t_growtarget_config.tbxid)
  return _internal_tbxid();
}
inline void growtarget_config_t_growtarget_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tbxid_ = value;
}
inline void growtarget_config_t_growtarget_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.growtarget_config.t_growtarget_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool growtarget_config_t_growtarget_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool growtarget_config_t_growtarget_config::has_id() const {
  return _internal_has_id();
}
inline void growtarget_config_t_growtarget_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 growtarget_config_t_growtarget_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 growtarget_config_t_growtarget_config::id() const {
  // @@protoc_insertion_point(field_get:pb.growtarget_config.t_growtarget_config.id)
  return _internal_id();
}
inline void growtarget_config_t_growtarget_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void growtarget_config_t_growtarget_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.growtarget_config.t_growtarget_config.id)
}

// required string targettype = 3;
inline bool growtarget_config_t_growtarget_config::_internal_has_targettype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool growtarget_config_t_growtarget_config::has_targettype() const {
  return _internal_has_targettype();
}
inline void growtarget_config_t_growtarget_config::clear_targettype() {
  targettype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& growtarget_config_t_growtarget_config::targettype() const {
  // @@protoc_insertion_point(field_get:pb.growtarget_config.t_growtarget_config.targettype)
  return _internal_targettype();
}
inline void growtarget_config_t_growtarget_config::set_targettype(const std::string& value) {
  _internal_set_targettype(value);
  // @@protoc_insertion_point(field_set:pb.growtarget_config.t_growtarget_config.targettype)
}
inline std::string* growtarget_config_t_growtarget_config::mutable_targettype() {
  // @@protoc_insertion_point(field_mutable:pb.growtarget_config.t_growtarget_config.targettype)
  return _internal_mutable_targettype();
}
inline const std::string& growtarget_config_t_growtarget_config::_internal_targettype() const {
  return targettype_.GetNoArena();
}
inline void growtarget_config_t_growtarget_config::_internal_set_targettype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  targettype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void growtarget_config_t_growtarget_config::set_targettype(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  targettype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.growtarget_config.t_growtarget_config.targettype)
}
inline void growtarget_config_t_growtarget_config::set_targettype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  targettype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.growtarget_config.t_growtarget_config.targettype)
}
inline void growtarget_config_t_growtarget_config::set_targettype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  targettype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.growtarget_config.t_growtarget_config.targettype)
}
inline std::string* growtarget_config_t_growtarget_config::_internal_mutable_targettype() {
  _has_bits_[0] |= 0x00000001u;
  return targettype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* growtarget_config_t_growtarget_config::release_targettype() {
  // @@protoc_insertion_point(field_release:pb.growtarget_config.t_growtarget_config.targettype)
  if (!_internal_has_targettype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return targettype_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void growtarget_config_t_growtarget_config::set_allocated_targettype(std::string* targettype) {
  if (targettype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  targettype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targettype);
  // @@protoc_insertion_point(field_set_allocated:pb.growtarget_config.t_growtarget_config.targettype)
}

// required string targetdes = 4;
inline bool growtarget_config_t_growtarget_config::_internal_has_targetdes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool growtarget_config_t_growtarget_config::has_targetdes() const {
  return _internal_has_targetdes();
}
inline void growtarget_config_t_growtarget_config::clear_targetdes() {
  targetdes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& growtarget_config_t_growtarget_config::targetdes() const {
  // @@protoc_insertion_point(field_get:pb.growtarget_config.t_growtarget_config.targetdes)
  return _internal_targetdes();
}
inline void growtarget_config_t_growtarget_config::set_targetdes(const std::string& value) {
  _internal_set_targetdes(value);
  // @@protoc_insertion_point(field_set:pb.growtarget_config.t_growtarget_config.targetdes)
}
inline std::string* growtarget_config_t_growtarget_config::mutable_targetdes() {
  // @@protoc_insertion_point(field_mutable:pb.growtarget_config.t_growtarget_config.targetdes)
  return _internal_mutable_targetdes();
}
inline const std::string& growtarget_config_t_growtarget_config::_internal_targetdes() const {
  return targetdes_.GetNoArena();
}
inline void growtarget_config_t_growtarget_config::_internal_set_targetdes(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  targetdes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void growtarget_config_t_growtarget_config::set_targetdes(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  targetdes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.growtarget_config.t_growtarget_config.targetdes)
}
inline void growtarget_config_t_growtarget_config::set_targetdes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  targetdes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.growtarget_config.t_growtarget_config.targetdes)
}
inline void growtarget_config_t_growtarget_config::set_targetdes(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  targetdes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.growtarget_config.t_growtarget_config.targetdes)
}
inline std::string* growtarget_config_t_growtarget_config::_internal_mutable_targetdes() {
  _has_bits_[0] |= 0x00000002u;
  return targetdes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* growtarget_config_t_growtarget_config::release_targetdes() {
  // @@protoc_insertion_point(field_release:pb.growtarget_config.t_growtarget_config.targetdes)
  if (!_internal_has_targetdes()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return targetdes_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void growtarget_config_t_growtarget_config::set_allocated_targetdes(std::string* targetdes) {
  if (targetdes != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  targetdes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetdes);
  // @@protoc_insertion_point(field_set_allocated:pb.growtarget_config.t_growtarget_config.targetdes)
}

// required string reward = 5;
inline bool growtarget_config_t_growtarget_config::_internal_has_reward() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool growtarget_config_t_growtarget_config::has_reward() const {
  return _internal_has_reward();
}
inline void growtarget_config_t_growtarget_config::clear_reward() {
  reward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& growtarget_config_t_growtarget_config::reward() const {
  // @@protoc_insertion_point(field_get:pb.growtarget_config.t_growtarget_config.reward)
  return _internal_reward();
}
inline void growtarget_config_t_growtarget_config::set_reward(const std::string& value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:pb.growtarget_config.t_growtarget_config.reward)
}
inline std::string* growtarget_config_t_growtarget_config::mutable_reward() {
  // @@protoc_insertion_point(field_mutable:pb.growtarget_config.t_growtarget_config.reward)
  return _internal_mutable_reward();
}
inline const std::string& growtarget_config_t_growtarget_config::_internal_reward() const {
  return reward_.GetNoArena();
}
inline void growtarget_config_t_growtarget_config::_internal_set_reward(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void growtarget_config_t_growtarget_config::set_reward(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  reward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.growtarget_config.t_growtarget_config.reward)
}
inline void growtarget_config_t_growtarget_config::set_reward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.growtarget_config.t_growtarget_config.reward)
}
inline void growtarget_config_t_growtarget_config::set_reward(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.growtarget_config.t_growtarget_config.reward)
}
inline std::string* growtarget_config_t_growtarget_config::_internal_mutable_reward() {
  _has_bits_[0] |= 0x00000004u;
  return reward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* growtarget_config_t_growtarget_config::release_reward() {
  // @@protoc_insertion_point(field_release:pb.growtarget_config.t_growtarget_config.reward)
  if (!_internal_has_reward()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return reward_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void growtarget_config_t_growtarget_config::set_allocated_reward(std::string* reward) {
  if (reward != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  reward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward);
  // @@protoc_insertion_point(field_set_allocated:pb.growtarget_config.t_growtarget_config.reward)
}

// -------------------------------------------------------------------

// growtarget_config

// repeated .pb.growtarget_config.t_growtarget_config datas = 1;
inline int growtarget_config::_internal_datas_size() const {
  return datas_.size();
}
inline int growtarget_config::datas_size() const {
  return _internal_datas_size();
}
inline void growtarget_config::clear_datas() {
  datas_.Clear();
}
inline ::pb::growtarget_config_t_growtarget_config* growtarget_config::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.growtarget_config.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::growtarget_config_t_growtarget_config >*
growtarget_config::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.growtarget_config.datas)
  return &datas_;
}
inline const ::pb::growtarget_config_t_growtarget_config& growtarget_config::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::growtarget_config_t_growtarget_config& growtarget_config::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.growtarget_config.datas)
  return _internal_datas(index);
}
inline ::pb::growtarget_config_t_growtarget_config* growtarget_config::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::growtarget_config_t_growtarget_config* growtarget_config::add_datas() {
  // @@protoc_insertion_point(field_add:pb.growtarget_config.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::growtarget_config_t_growtarget_config >&
growtarget_config::datas() const {
  // @@protoc_insertion_point(field_list:pb.growtarget_config.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_growtarget_5fconfig_2eproto
