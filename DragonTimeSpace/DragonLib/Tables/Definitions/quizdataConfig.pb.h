// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quizdataConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_quizdataConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_quizdataConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_quizdataConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_quizdataConfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_quizdataConfig_2eproto;
namespace pb {
class quizdataConfig;
class quizdataConfigDefaultTypeInternal;
extern quizdataConfigDefaultTypeInternal _quizdataConfig_default_instance_;
class quizdataConfig_t_quizdata_config;
class quizdataConfig_t_quizdata_configDefaultTypeInternal;
extern quizdataConfig_t_quizdata_configDefaultTypeInternal _quizdataConfig_t_quizdata_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::quizdataConfig* Arena::CreateMaybeMessage<::pb::quizdataConfig>(Arena*);
template<> ::pb::quizdataConfig_t_quizdata_config* Arena::CreateMaybeMessage<::pb::quizdataConfig_t_quizdata_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class quizdataConfig_t_quizdata_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.quizdataConfig.t_quizdata_config) */ {
 public:
  quizdataConfig_t_quizdata_config();
  virtual ~quizdataConfig_t_quizdata_config();

  quizdataConfig_t_quizdata_config(const quizdataConfig_t_quizdata_config& from);
  quizdataConfig_t_quizdata_config(quizdataConfig_t_quizdata_config&& from) noexcept
    : quizdataConfig_t_quizdata_config() {
    *this = ::std::move(from);
  }

  inline quizdataConfig_t_quizdata_config& operator=(const quizdataConfig_t_quizdata_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline quizdataConfig_t_quizdata_config& operator=(quizdataConfig_t_quizdata_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const quizdataConfig_t_quizdata_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const quizdataConfig_t_quizdata_config* internal_default_instance() {
    return reinterpret_cast<const quizdataConfig_t_quizdata_config*>(
               &_quizdataConfig_t_quizdata_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(quizdataConfig_t_quizdata_config& a, quizdataConfig_t_quizdata_config& b) {
    a.Swap(&b);
  }
  inline void Swap(quizdataConfig_t_quizdata_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline quizdataConfig_t_quizdata_config* New() const final {
    return CreateMaybeMessage<quizdataConfig_t_quizdata_config>(nullptr);
  }

  quizdataConfig_t_quizdata_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<quizdataConfig_t_quizdata_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const quizdataConfig_t_quizdata_config& from);
  void MergeFrom(const quizdataConfig_t_quizdata_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(quizdataConfig_t_quizdata_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.quizdataConfig.t_quizdata_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_quizdataConfig_2eproto);
    return ::descriptor_table_quizdataConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kTypeFieldNumber = 4,
    kAnswer1FieldNumber = 5,
    kAnswer2FieldNumber = 6,
    kAnswer3FieldNumber = 7,
    kAnswer4FieldNumber = 8,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // required string content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // required string type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required string answer1 = 5;
  bool has_answer1() const;
  private:
  bool _internal_has_answer1() const;
  public:
  void clear_answer1();
  const std::string& answer1() const;
  void set_answer1(const std::string& value);
  void set_answer1(std::string&& value);
  void set_answer1(const char* value);
  void set_answer1(const char* value, size_t size);
  std::string* mutable_answer1();
  std::string* release_answer1();
  void set_allocated_answer1(std::string* answer1);
  private:
  const std::string& _internal_answer1() const;
  void _internal_set_answer1(const std::string& value);
  std::string* _internal_mutable_answer1();
  public:

  // required string answer2 = 6;
  bool has_answer2() const;
  private:
  bool _internal_has_answer2() const;
  public:
  void clear_answer2();
  const std::string& answer2() const;
  void set_answer2(const std::string& value);
  void set_answer2(std::string&& value);
  void set_answer2(const char* value);
  void set_answer2(const char* value, size_t size);
  std::string* mutable_answer2();
  std::string* release_answer2();
  void set_allocated_answer2(std::string* answer2);
  private:
  const std::string& _internal_answer2() const;
  void _internal_set_answer2(const std::string& value);
  std::string* _internal_mutable_answer2();
  public:

  // required string answer3 = 7;
  bool has_answer3() const;
  private:
  bool _internal_has_answer3() const;
  public:
  void clear_answer3();
  const std::string& answer3() const;
  void set_answer3(const std::string& value);
  void set_answer3(std::string&& value);
  void set_answer3(const char* value);
  void set_answer3(const char* value, size_t size);
  std::string* mutable_answer3();
  std::string* release_answer3();
  void set_allocated_answer3(std::string* answer3);
  private:
  const std::string& _internal_answer3() const;
  void _internal_set_answer3(const std::string& value);
  std::string* _internal_mutable_answer3();
  public:

  // required string answer4 = 8;
  bool has_answer4() const;
  private:
  bool _internal_has_answer4() const;
  public:
  void clear_answer4();
  const std::string& answer4() const;
  void set_answer4(const std::string& value);
  void set_answer4(std::string&& value);
  void set_answer4(const char* value);
  void set_answer4(const char* value, size_t size);
  std::string* mutable_answer4();
  std::string* release_answer4();
  void set_allocated_answer4(std::string* answer4);
  private:
  const std::string& _internal_answer4() const;
  void _internal_set_answer4(const std::string& value);
  std::string* _internal_mutable_answer4();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.quizdataConfig.t_quizdata_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_quizdataConfig_2eproto;
};
// -------------------------------------------------------------------

class quizdataConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.quizdataConfig) */ {
 public:
  quizdataConfig();
  virtual ~quizdataConfig();

  quizdataConfig(const quizdataConfig& from);
  quizdataConfig(quizdataConfig&& from) noexcept
    : quizdataConfig() {
    *this = ::std::move(from);
  }

  inline quizdataConfig& operator=(const quizdataConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline quizdataConfig& operator=(quizdataConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const quizdataConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const quizdataConfig* internal_default_instance() {
    return reinterpret_cast<const quizdataConfig*>(
               &_quizdataConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(quizdataConfig& a, quizdataConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(quizdataConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline quizdataConfig* New() const final {
    return CreateMaybeMessage<quizdataConfig>(nullptr);
  }

  quizdataConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<quizdataConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const quizdataConfig& from);
  void MergeFrom(const quizdataConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(quizdataConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.quizdataConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_quizdataConfig_2eproto);
    return ::descriptor_table_quizdataConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef quizdataConfig_t_quizdata_config t_quizdata_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.quizdataConfig.t_quizdata_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::quizdataConfig_t_quizdata_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::quizdataConfig_t_quizdata_config >*
      mutable_datas();
  private:
  const ::pb::quizdataConfig_t_quizdata_config& _internal_datas(int index) const;
  ::pb::quizdataConfig_t_quizdata_config* _internal_add_datas();
  public:
  const ::pb::quizdataConfig_t_quizdata_config& datas(int index) const;
  ::pb::quizdataConfig_t_quizdata_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::quizdataConfig_t_quizdata_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.quizdataConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::quizdataConfig_t_quizdata_config > datas_;
  friend struct ::TableStruct_quizdataConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// quizdataConfig_t_quizdata_config

// required uint32 tbxid = 1 [default = 0];
inline bool quizdataConfig_t_quizdata_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool quizdataConfig_t_quizdata_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void quizdataConfig_t_quizdata_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quizdataConfig_t_quizdata_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quizdataConfig_t_quizdata_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.quizdataConfig.t_quizdata_config.tbxid)
  return _internal_tbxid();
}
inline void quizdataConfig_t_quizdata_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  tbxid_ = value;
}
inline void quizdataConfig_t_quizdata_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.quizdataConfig.t_quizdata_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool quizdataConfig_t_quizdata_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool quizdataConfig_t_quizdata_config::has_id() const {
  return _internal_has_id();
}
inline void quizdataConfig_t_quizdata_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quizdataConfig_t_quizdata_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quizdataConfig_t_quizdata_config::id() const {
  // @@protoc_insertion_point(field_get:pb.quizdataConfig.t_quizdata_config.id)
  return _internal_id();
}
inline void quizdataConfig_t_quizdata_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
}
inline void quizdataConfig_t_quizdata_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.quizdataConfig.t_quizdata_config.id)
}

// required string content = 3;
inline bool quizdataConfig_t_quizdata_config::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool quizdataConfig_t_quizdata_config::has_content() const {
  return _internal_has_content();
}
inline void quizdataConfig_t_quizdata_config::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& quizdataConfig_t_quizdata_config::content() const {
  // @@protoc_insertion_point(field_get:pb.quizdataConfig.t_quizdata_config.content)
  return _internal_content();
}
inline void quizdataConfig_t_quizdata_config::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:pb.quizdataConfig.t_quizdata_config.content)
}
inline std::string* quizdataConfig_t_quizdata_config::mutable_content() {
  // @@protoc_insertion_point(field_mutable:pb.quizdataConfig.t_quizdata_config.content)
  return _internal_mutable_content();
}
inline const std::string& quizdataConfig_t_quizdata_config::_internal_content() const {
  return content_.GetNoArena();
}
inline void quizdataConfig_t_quizdata_config::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void quizdataConfig_t_quizdata_config::set_content(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.quizdataConfig.t_quizdata_config.content)
}
inline void quizdataConfig_t_quizdata_config::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.quizdataConfig.t_quizdata_config.content)
}
inline void quizdataConfig_t_quizdata_config::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.quizdataConfig.t_quizdata_config.content)
}
inline std::string* quizdataConfig_t_quizdata_config::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* quizdataConfig_t_quizdata_config::release_content() {
  // @@protoc_insertion_point(field_release:pb.quizdataConfig.t_quizdata_config.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void quizdataConfig_t_quizdata_config::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pb.quizdataConfig.t_quizdata_config.content)
}

// required string type = 4;
inline bool quizdataConfig_t_quizdata_config::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool quizdataConfig_t_quizdata_config::has_type() const {
  return _internal_has_type();
}
inline void quizdataConfig_t_quizdata_config::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& quizdataConfig_t_quizdata_config::type() const {
  // @@protoc_insertion_point(field_get:pb.quizdataConfig.t_quizdata_config.type)
  return _internal_type();
}
inline void quizdataConfig_t_quizdata_config::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.quizdataConfig.t_quizdata_config.type)
}
inline std::string* quizdataConfig_t_quizdata_config::mutable_type() {
  // @@protoc_insertion_point(field_mutable:pb.quizdataConfig.t_quizdata_config.type)
  return _internal_mutable_type();
}
inline const std::string& quizdataConfig_t_quizdata_config::_internal_type() const {
  return type_.GetNoArena();
}
inline void quizdataConfig_t_quizdata_config::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void quizdataConfig_t_quizdata_config::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.quizdataConfig.t_quizdata_config.type)
}
inline void quizdataConfig_t_quizdata_config::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.quizdataConfig.t_quizdata_config.type)
}
inline void quizdataConfig_t_quizdata_config::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.quizdataConfig.t_quizdata_config.type)
}
inline std::string* quizdataConfig_t_quizdata_config::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* quizdataConfig_t_quizdata_config::release_type() {
  // @@protoc_insertion_point(field_release:pb.quizdataConfig.t_quizdata_config.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void quizdataConfig_t_quizdata_config::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:pb.quizdataConfig.t_quizdata_config.type)
}

// required string answer1 = 5;
inline bool quizdataConfig_t_quizdata_config::_internal_has_answer1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool quizdataConfig_t_quizdata_config::has_answer1() const {
  return _internal_has_answer1();
}
inline void quizdataConfig_t_quizdata_config::clear_answer1() {
  answer1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& quizdataConfig_t_quizdata_config::answer1() const {
  // @@protoc_insertion_point(field_get:pb.quizdataConfig.t_quizdata_config.answer1)
  return _internal_answer1();
}
inline void quizdataConfig_t_quizdata_config::set_answer1(const std::string& value) {
  _internal_set_answer1(value);
  // @@protoc_insertion_point(field_set:pb.quizdataConfig.t_quizdata_config.answer1)
}
inline std::string* quizdataConfig_t_quizdata_config::mutable_answer1() {
  // @@protoc_insertion_point(field_mutable:pb.quizdataConfig.t_quizdata_config.answer1)
  return _internal_mutable_answer1();
}
inline const std::string& quizdataConfig_t_quizdata_config::_internal_answer1() const {
  return answer1_.GetNoArena();
}
inline void quizdataConfig_t_quizdata_config::_internal_set_answer1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  answer1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void quizdataConfig_t_quizdata_config::set_answer1(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  answer1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.quizdataConfig.t_quizdata_config.answer1)
}
inline void quizdataConfig_t_quizdata_config::set_answer1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  answer1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.quizdataConfig.t_quizdata_config.answer1)
}
inline void quizdataConfig_t_quizdata_config::set_answer1(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  answer1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.quizdataConfig.t_quizdata_config.answer1)
}
inline std::string* quizdataConfig_t_quizdata_config::_internal_mutable_answer1() {
  _has_bits_[0] |= 0x00000004u;
  return answer1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* quizdataConfig_t_quizdata_config::release_answer1() {
  // @@protoc_insertion_point(field_release:pb.quizdataConfig.t_quizdata_config.answer1)
  if (!_internal_has_answer1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return answer1_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void quizdataConfig_t_quizdata_config::set_allocated_answer1(std::string* answer1) {
  if (answer1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  answer1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer1);
  // @@protoc_insertion_point(field_set_allocated:pb.quizdataConfig.t_quizdata_config.answer1)
}

// required string answer2 = 6;
inline bool quizdataConfig_t_quizdata_config::_internal_has_answer2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool quizdataConfig_t_quizdata_config::has_answer2() const {
  return _internal_has_answer2();
}
inline void quizdataConfig_t_quizdata_config::clear_answer2() {
  answer2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& quizdataConfig_t_quizdata_config::answer2() const {
  // @@protoc_insertion_point(field_get:pb.quizdataConfig.t_quizdata_config.answer2)
  return _internal_answer2();
}
inline void quizdataConfig_t_quizdata_config::set_answer2(const std::string& value) {
  _internal_set_answer2(value);
  // @@protoc_insertion_point(field_set:pb.quizdataConfig.t_quizdata_config.answer2)
}
inline std::string* quizdataConfig_t_quizdata_config::mutable_answer2() {
  // @@protoc_insertion_point(field_mutable:pb.quizdataConfig.t_quizdata_config.answer2)
  return _internal_mutable_answer2();
}
inline const std::string& quizdataConfig_t_quizdata_config::_internal_answer2() const {
  return answer2_.GetNoArena();
}
inline void quizdataConfig_t_quizdata_config::_internal_set_answer2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  answer2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void quizdataConfig_t_quizdata_config::set_answer2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  answer2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.quizdataConfig.t_quizdata_config.answer2)
}
inline void quizdataConfig_t_quizdata_config::set_answer2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  answer2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.quizdataConfig.t_quizdata_config.answer2)
}
inline void quizdataConfig_t_quizdata_config::set_answer2(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  answer2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.quizdataConfig.t_quizdata_config.answer2)
}
inline std::string* quizdataConfig_t_quizdata_config::_internal_mutable_answer2() {
  _has_bits_[0] |= 0x00000008u;
  return answer2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* quizdataConfig_t_quizdata_config::release_answer2() {
  // @@protoc_insertion_point(field_release:pb.quizdataConfig.t_quizdata_config.answer2)
  if (!_internal_has_answer2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return answer2_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void quizdataConfig_t_quizdata_config::set_allocated_answer2(std::string* answer2) {
  if (answer2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  answer2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer2);
  // @@protoc_insertion_point(field_set_allocated:pb.quizdataConfig.t_quizdata_config.answer2)
}

// required string answer3 = 7;
inline bool quizdataConfig_t_quizdata_config::_internal_has_answer3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool quizdataConfig_t_quizdata_config::has_answer3() const {
  return _internal_has_answer3();
}
inline void quizdataConfig_t_quizdata_config::clear_answer3() {
  answer3_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& quizdataConfig_t_quizdata_config::answer3() const {
  // @@protoc_insertion_point(field_get:pb.quizdataConfig.t_quizdata_config.answer3)
  return _internal_answer3();
}
inline void quizdataConfig_t_quizdata_config::set_answer3(const std::string& value) {
  _internal_set_answer3(value);
  // @@protoc_insertion_point(field_set:pb.quizdataConfig.t_quizdata_config.answer3)
}
inline std::string* quizdataConfig_t_quizdata_config::mutable_answer3() {
  // @@protoc_insertion_point(field_mutable:pb.quizdataConfig.t_quizdata_config.answer3)
  return _internal_mutable_answer3();
}
inline const std::string& quizdataConfig_t_quizdata_config::_internal_answer3() const {
  return answer3_.GetNoArena();
}
inline void quizdataConfig_t_quizdata_config::_internal_set_answer3(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  answer3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void quizdataConfig_t_quizdata_config::set_answer3(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  answer3_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.quizdataConfig.t_quizdata_config.answer3)
}
inline void quizdataConfig_t_quizdata_config::set_answer3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  answer3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.quizdataConfig.t_quizdata_config.answer3)
}
inline void quizdataConfig_t_quizdata_config::set_answer3(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  answer3_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.quizdataConfig.t_quizdata_config.answer3)
}
inline std::string* quizdataConfig_t_quizdata_config::_internal_mutable_answer3() {
  _has_bits_[0] |= 0x00000010u;
  return answer3_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* quizdataConfig_t_quizdata_config::release_answer3() {
  // @@protoc_insertion_point(field_release:pb.quizdataConfig.t_quizdata_config.answer3)
  if (!_internal_has_answer3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return answer3_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void quizdataConfig_t_quizdata_config::set_allocated_answer3(std::string* answer3) {
  if (answer3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  answer3_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer3);
  // @@protoc_insertion_point(field_set_allocated:pb.quizdataConfig.t_quizdata_config.answer3)
}

// required string answer4 = 8;
inline bool quizdataConfig_t_quizdata_config::_internal_has_answer4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool quizdataConfig_t_quizdata_config::has_answer4() const {
  return _internal_has_answer4();
}
inline void quizdataConfig_t_quizdata_config::clear_answer4() {
  answer4_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& quizdataConfig_t_quizdata_config::answer4() const {
  // @@protoc_insertion_point(field_get:pb.quizdataConfig.t_quizdata_config.answer4)
  return _internal_answer4();
}
inline void quizdataConfig_t_quizdata_config::set_answer4(const std::string& value) {
  _internal_set_answer4(value);
  // @@protoc_insertion_point(field_set:pb.quizdataConfig.t_quizdata_config.answer4)
}
inline std::string* quizdataConfig_t_quizdata_config::mutable_answer4() {
  // @@protoc_insertion_point(field_mutable:pb.quizdataConfig.t_quizdata_config.answer4)
  return _internal_mutable_answer4();
}
inline const std::string& quizdataConfig_t_quizdata_config::_internal_answer4() const {
  return answer4_.GetNoArena();
}
inline void quizdataConfig_t_quizdata_config::_internal_set_answer4(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  answer4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void quizdataConfig_t_quizdata_config::set_answer4(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  answer4_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.quizdataConfig.t_quizdata_config.answer4)
}
inline void quizdataConfig_t_quizdata_config::set_answer4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  answer4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.quizdataConfig.t_quizdata_config.answer4)
}
inline void quizdataConfig_t_quizdata_config::set_answer4(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  answer4_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.quizdataConfig.t_quizdata_config.answer4)
}
inline std::string* quizdataConfig_t_quizdata_config::_internal_mutable_answer4() {
  _has_bits_[0] |= 0x00000020u;
  return answer4_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* quizdataConfig_t_quizdata_config::release_answer4() {
  // @@protoc_insertion_point(field_release:pb.quizdataConfig.t_quizdata_config.answer4)
  if (!_internal_has_answer4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return answer4_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void quizdataConfig_t_quizdata_config::set_allocated_answer4(std::string* answer4) {
  if (answer4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  answer4_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer4);
  // @@protoc_insertion_point(field_set_allocated:pb.quizdataConfig.t_quizdata_config.answer4)
}

// -------------------------------------------------------------------

// quizdataConfig

// repeated .pb.quizdataConfig.t_quizdata_config datas = 1;
inline int quizdataConfig::_internal_datas_size() const {
  return datas_.size();
}
inline int quizdataConfig::datas_size() const {
  return _internal_datas_size();
}
inline void quizdataConfig::clear_datas() {
  datas_.Clear();
}
inline ::pb::quizdataConfig_t_quizdata_config* quizdataConfig::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.quizdataConfig.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::quizdataConfig_t_quizdata_config >*
quizdataConfig::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.quizdataConfig.datas)
  return &datas_;
}
inline const ::pb::quizdataConfig_t_quizdata_config& quizdataConfig::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::quizdataConfig_t_quizdata_config& quizdataConfig::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.quizdataConfig.datas)
  return _internal_datas(index);
}
inline ::pb::quizdataConfig_t_quizdata_config* quizdataConfig::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::quizdataConfig_t_quizdata_config* quizdataConfig::add_datas() {
  // @@protoc_insertion_point(field_add:pb.quizdataConfig.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::quizdataConfig_t_quizdata_config >&
quizdataConfig::datas() const {
  // @@protoc_insertion_point(field_list:pb.quizdataConfig.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_quizdataConfig_2eproto
