// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle_config.proto

#include "battle_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_battle_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_battle_config_t_battle_config_battle_5fconfig_2eproto;
namespace pb {
class battle_config_t_battle_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<battle_config_t_battle_config> _instance;
} _battle_config_t_battle_config_default_instance_;
class battle_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<battle_config> _instance;
} _battle_config_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_battle_config_battle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_battle_config_default_instance_;
    new (ptr) ::pb::battle_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::battle_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_battle_config_battle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_battle_config_battle_5fconfig_2eproto}, {
      &scc_info_battle_config_t_battle_config_battle_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_battle_config_t_battle_config_battle_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_battle_config_t_battle_config_default_instance_;
    new (ptr) ::pb::battle_config_t_battle_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::battle_config_t_battle_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_battle_config_t_battle_config_battle_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_battle_config_t_battle_config_battle_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_battle_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_battle_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_battle_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_battle_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, id_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, name_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, copymasterid_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, desc_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, matchinglevel_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, teamdiffer_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, unilateralnum_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, expandtime_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, expandlevel_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, expanddegree_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, entertime_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, readytime_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, modelscore_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, combattime_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, enabled_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, extendvalue_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, win_reward_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, lose_reward_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, daily_reward_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, daily_reward_display_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config_t_battle_config, win_reward_display_),
  7,
  8,
  0,
  9,
  1,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::pb::battle_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::battle_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::battle_config, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, sizeof(::pb::battle_config_t_battle_config)},
  { 49, 55, sizeof(::pb::battle_config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_battle_config_t_battle_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_battle_config_default_instance_),
};

const char descriptor_table_protodef_battle_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023battle_config.proto\022\002pb\"\226\004\n\rbattle_con"
  "fig\0220\n\005datas\030\001 \003(\0132!.pb.battle_config.t_"
  "battle_config\032\322\003\n\017t_battle_config\022\020\n\005tbx"
  "id\030\001 \002(\r:\0010\022\r\n\002id\030\002 \002(\r:\0010\022\014\n\004name\030\003 \002(\t"
  "\022\024\n\014copymasterid\030\004 \002(\r\022\014\n\004desc\030\005 \002(\t\022\025\n\r"
  "matchinglevel\030\006 \002(\r\022\022\n\nteamdiffer\030\007 \002(\r\022"
  "\025\n\runilateralnum\030\010 \002(\r\022\022\n\nexpandtime\030\t \002"
  "(\005\022\023\n\013expandlevel\030\n \002(\005\022\024\n\014expanddegree\030"
  "\013 \002(\005\022\021\n\tentertime\030\014 \002(\005\022\021\n\treadytime\030\r "
  "\002(\005\022\022\n\nmodelscore\030\016 \002(\005\022\022\n\ncombattime\030\017 "
  "\002(\005\022\017\n\007enabled\030\020 \002(\005\022\023\n\013extendvalue\030\021 \002("
  "\005\022\022\n\nwin_reward\030\022 \002(\t\022\023\n\013lose_reward\030\023 \002"
  "(\t\022\024\n\014daily_reward\030\024 \002(\t\022\034\n\024daily_reward"
  "_display\030\025 \002(\t\022\032\n\022win_reward_display\030\026 \002"
  "(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_battle_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_battle_5fconfig_2eproto_sccs[2] = {
  &scc_info_battle_config_battle_5fconfig_2eproto.base,
  &scc_info_battle_config_t_battle_config_battle_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_battle_5fconfig_2eproto_once;
static bool descriptor_table_battle_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battle_5fconfig_2eproto = {
  &descriptor_table_battle_5fconfig_2eproto_initialized, descriptor_table_protodef_battle_5fconfig_2eproto, "battle_config.proto", 562,
  &descriptor_table_battle_5fconfig_2eproto_once, descriptor_table_battle_5fconfig_2eproto_sccs, descriptor_table_battle_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_battle_5fconfig_2eproto::offsets,
  file_level_metadata_battle_5fconfig_2eproto, 2, file_level_enum_descriptors_battle_5fconfig_2eproto, file_level_service_descriptors_battle_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_battle_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_battle_5fconfig_2eproto)), true);
namespace pb {

// ===================================================================

void battle_config_t_battle_config::InitAsDefaultInstance() {
}
class battle_config_t_battle_config::_Internal {
 public:
  using HasBits = decltype(std::declval<battle_config_t_battle_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_copymasterid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_matchinglevel(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_teamdiffer(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_unilateralnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_expandtime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_expandlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_expanddegree(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_entertime(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_readytime(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_modelscore(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_combattime(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_extendvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_win_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lose_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_daily_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_daily_reward_display(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_win_reward_display(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

battle_config_t_battle_config::battle_config_t_battle_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.battle_config.t_battle_config)
}
battle_config_t_battle_config::battle_config_t_battle_config(const battle_config_t_battle_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  win_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_win_reward()) {
    win_reward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.win_reward_);
  }
  lose_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lose_reward()) {
    lose_reward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lose_reward_);
  }
  daily_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_daily_reward()) {
    daily_reward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.daily_reward_);
  }
  daily_reward_display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_daily_reward_display()) {
    daily_reward_display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.daily_reward_display_);
  }
  win_reward_display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_win_reward_display()) {
    win_reward_display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.win_reward_display_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&extendvalue_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(extendvalue_));
  // @@protoc_insertion_point(copy_constructor:pb.battle_config.t_battle_config)
}

void battle_config_t_battle_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_battle_config_t_battle_config_battle_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  win_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lose_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daily_reward_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daily_reward_display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  win_reward_display_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extendvalue_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(extendvalue_));
}

battle_config_t_battle_config::~battle_config_t_battle_config() {
  // @@protoc_insertion_point(destructor:pb.battle_config.t_battle_config)
  SharedDtor();
}

void battle_config_t_battle_config::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  win_reward_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lose_reward_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daily_reward_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  daily_reward_display_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  win_reward_display_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void battle_config_t_battle_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const battle_config_t_battle_config& battle_config_t_battle_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_battle_config_t_battle_config_battle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void battle_config_t_battle_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.battle_config.t_battle_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      win_reward_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      lose_reward_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      daily_reward_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      daily_reward_display_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      win_reward_display_.ClearNonDefaultToEmptyNoArena();
    }
  }
  tbxid_ = 0u;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&expanddegree_) -
        reinterpret_cast<char*>(&id_)) + sizeof(expanddegree_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&entertime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extendvalue_) -
        reinterpret_cast<char*>(&entertime_)) + sizeof(extendvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* battle_config_t_battle_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&has_bits);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.battle_config.t_battle_config.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 copymasterid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_copymasterid(&has_bits);
          copymasterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.battle_config.t_battle_config.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 matchinglevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_matchinglevel(&has_bits);
          matchinglevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 teamdiffer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_teamdiffer(&has_bits);
          teamdiffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 unilateralnum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_unilateralnum(&has_bits);
          unilateralnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 expandtime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_expandtime(&has_bits);
          expandtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 expandlevel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_expandlevel(&has_bits);
          expandlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 expanddegree = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_expanddegree(&has_bits);
          expanddegree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 entertime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_entertime(&has_bits);
          entertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 readytime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_readytime(&has_bits);
          readytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 modelscore = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_modelscore(&has_bits);
          modelscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 combattime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_combattime(&has_bits);
          combattime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 enabled = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_enabled(&has_bits);
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 extendvalue = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_extendvalue(&has_bits);
          extendvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string win_reward = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_win_reward();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.battle_config.t_battle_config.win_reward");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string lose_reward = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_lose_reward();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.battle_config.t_battle_config.lose_reward");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string daily_reward = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_daily_reward();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.battle_config.t_battle_config.daily_reward");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string daily_reward_display = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_daily_reward_display();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.battle_config.t_battle_config.daily_reward_display");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string win_reward_display = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_win_reward_display();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.battle_config.t_battle_config.win_reward_display");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* battle_config_t_battle_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.battle_config.t_battle_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.battle_config.t_battle_config.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // required uint32 copymasterid = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_copymasterid(), target);
  }

  // required string desc = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.battle_config.t_battle_config.desc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_desc(), target);
  }

  // required uint32 matchinglevel = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_matchinglevel(), target);
  }

  // required uint32 teamdiffer = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_teamdiffer(), target);
  }

  // required uint32 unilateralnum = 8;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_unilateralnum(), target);
  }

  // required int32 expandtime = 9;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_expandtime(), target);
  }

  // required int32 expandlevel = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_expandlevel(), target);
  }

  // required int32 expanddegree = 11;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_expanddegree(), target);
  }

  // required int32 entertime = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_entertime(), target);
  }

  // required int32 readytime = 13;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_readytime(), target);
  }

  // required int32 modelscore = 14;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_modelscore(), target);
  }

  // required int32 combattime = 15;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_combattime(), target);
  }

  // required int32 enabled = 16;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_enabled(), target);
  }

  // required int32 extendvalue = 17;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_extendvalue(), target);
  }

  // required string win_reward = 18;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_win_reward().data(), static_cast<int>(this->_internal_win_reward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.battle_config.t_battle_config.win_reward");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_win_reward(), target);
  }

  // required string lose_reward = 19;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lose_reward().data(), static_cast<int>(this->_internal_lose_reward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.battle_config.t_battle_config.lose_reward");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_lose_reward(), target);
  }

  // required string daily_reward = 20;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_daily_reward().data(), static_cast<int>(this->_internal_daily_reward().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.battle_config.t_battle_config.daily_reward");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_daily_reward(), target);
  }

  // required string daily_reward_display = 21;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_daily_reward_display().data(), static_cast<int>(this->_internal_daily_reward_display().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.battle_config.t_battle_config.daily_reward_display");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_daily_reward_display(), target);
  }

  // required string win_reward_display = 22;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_win_reward_display().data(), static_cast<int>(this->_internal_win_reward_display().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.battle_config.t_battle_config.win_reward_display");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_win_reward_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.battle_config.t_battle_config)
  return target;
}

size_t battle_config_t_battle_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.battle_config.t_battle_config)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_desc()) {
    // required string desc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  if (_internal_has_win_reward()) {
    // required string win_reward = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_win_reward());
  }

  if (_internal_has_lose_reward()) {
    // required string lose_reward = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lose_reward());
  }

  if (_internal_has_daily_reward()) {
    // required string daily_reward = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_daily_reward());
  }

  if (_internal_has_daily_reward_display()) {
    // required string daily_reward_display = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_daily_reward_display());
  }

  if (_internal_has_win_reward_display()) {
    // required string win_reward_display = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_win_reward_display());
  }

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_copymasterid()) {
    // required uint32 copymasterid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_copymasterid());
  }

  if (_internal_has_matchinglevel()) {
    // required uint32 matchinglevel = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_matchinglevel());
  }

  if (_internal_has_teamdiffer()) {
    // required uint32 teamdiffer = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teamdiffer());
  }

  if (_internal_has_unilateralnum()) {
    // required uint32 unilateralnum = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unilateralnum());
  }

  if (_internal_has_expandtime()) {
    // required int32 expandtime = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expandtime());
  }

  if (_internal_has_expandlevel()) {
    // required int32 expandlevel = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expandlevel());
  }

  if (_internal_has_expanddegree()) {
    // required int32 expanddegree = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expanddegree());
  }

  if (_internal_has_entertime()) {
    // required int32 entertime = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entertime());
  }

  if (_internal_has_readytime()) {
    // required int32 readytime = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_readytime());
  }

  if (_internal_has_modelscore()) {
    // required int32 modelscore = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modelscore());
  }

  if (_internal_has_combattime()) {
    // required int32 combattime = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_combattime());
  }

  if (_internal_has_enabled()) {
    // required int32 enabled = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enabled());
  }

  if (_internal_has_extendvalue()) {
    // required int32 extendvalue = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extendvalue());
  }

  return total_size;
}
size_t battle_config_t_battle_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.battle_config.t_battle_config)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x003fffff) ^ 0x003fffff) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string desc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());

    // required string win_reward = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_win_reward());

    // required string lose_reward = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lose_reward());

    // required string daily_reward = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_daily_reward());

    // required string daily_reward_display = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_daily_reward_display());

    // required string win_reward_display = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_win_reward_display());

    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 copymasterid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_copymasterid());

    // required uint32 matchinglevel = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_matchinglevel());

    // required uint32 teamdiffer = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teamdiffer());

    // required uint32 unilateralnum = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unilateralnum());

    // required int32 expandtime = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expandtime());

    // required int32 expandlevel = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expandlevel());

    // required int32 expanddegree = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expanddegree());

    // required int32 entertime = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_entertime());

    // required int32 readytime = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_readytime());

    // required int32 modelscore = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_modelscore());

    // required int32 combattime = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_combattime());

    // required int32 enabled = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enabled());

    // required int32 extendvalue = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extendvalue());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void battle_config_t_battle_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.battle_config.t_battle_config)
  GOOGLE_DCHECK_NE(&from, this);
  const battle_config_t_battle_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<battle_config_t_battle_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.battle_config.t_battle_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.battle_config.t_battle_config)
    MergeFrom(*source);
  }
}

void battle_config_t_battle_config::MergeFrom(const battle_config_t_battle_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.battle_config.t_battle_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      win_reward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.win_reward_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      lose_reward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lose_reward_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      daily_reward_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.daily_reward_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      daily_reward_display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.daily_reward_display_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      win_reward_display_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.win_reward_display_);
    }
    if (cached_has_bits & 0x00000080u) {
      tbxid_ = from.tbxid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000200u) {
      copymasterid_ = from.copymasterid_;
    }
    if (cached_has_bits & 0x00000400u) {
      matchinglevel_ = from.matchinglevel_;
    }
    if (cached_has_bits & 0x00000800u) {
      teamdiffer_ = from.teamdiffer_;
    }
    if (cached_has_bits & 0x00001000u) {
      unilateralnum_ = from.unilateralnum_;
    }
    if (cached_has_bits & 0x00002000u) {
      expandtime_ = from.expandtime_;
    }
    if (cached_has_bits & 0x00004000u) {
      expandlevel_ = from.expandlevel_;
    }
    if (cached_has_bits & 0x00008000u) {
      expanddegree_ = from.expanddegree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      entertime_ = from.entertime_;
    }
    if (cached_has_bits & 0x00020000u) {
      readytime_ = from.readytime_;
    }
    if (cached_has_bits & 0x00040000u) {
      modelscore_ = from.modelscore_;
    }
    if (cached_has_bits & 0x00080000u) {
      combattime_ = from.combattime_;
    }
    if (cached_has_bits & 0x00100000u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00200000u) {
      extendvalue_ = from.extendvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void battle_config_t_battle_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.battle_config.t_battle_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_config_t_battle_config::CopyFrom(const battle_config_t_battle_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.battle_config.t_battle_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_config_t_battle_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;
  return true;
}

void battle_config_t_battle_config::InternalSwap(battle_config_t_battle_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  win_reward_.Swap(&other->win_reward_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lose_reward_.Swap(&other->lose_reward_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  daily_reward_.Swap(&other->daily_reward_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  daily_reward_display_.Swap(&other->daily_reward_display_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  win_reward_display_.Swap(&other->win_reward_display_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(copymasterid_, other->copymasterid_);
  swap(matchinglevel_, other->matchinglevel_);
  swap(teamdiffer_, other->teamdiffer_);
  swap(unilateralnum_, other->unilateralnum_);
  swap(expandtime_, other->expandtime_);
  swap(expandlevel_, other->expandlevel_);
  swap(expanddegree_, other->expanddegree_);
  swap(entertime_, other->entertime_);
  swap(readytime_, other->readytime_);
  swap(modelscore_, other->modelscore_);
  swap(combattime_, other->combattime_);
  swap(enabled_, other->enabled_);
  swap(extendvalue_, other->extendvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata battle_config_t_battle_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void battle_config::InitAsDefaultInstance() {
}
class battle_config::_Internal {
 public:
  using HasBits = decltype(std::declval<battle_config>()._has_bits_);
};

battle_config::battle_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.battle_config)
}
battle_config::battle_config(const battle_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.battle_config)
}

void battle_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_battle_config_battle_5fconfig_2eproto.base);
}

battle_config::~battle_config() {
  // @@protoc_insertion_point(destructor:pb.battle_config)
  SharedDtor();
}

void battle_config::SharedDtor() {
}

void battle_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const battle_config& battle_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_battle_config_battle_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void battle_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.battle_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* battle_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.battle_config.t_battle_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* battle_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.battle_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.battle_config.t_battle_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.battle_config)
  return target;
}

size_t battle_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.battle_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.battle_config.t_battle_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void battle_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.battle_config)
  GOOGLE_DCHECK_NE(&from, this);
  const battle_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<battle_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.battle_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.battle_config)
    MergeFrom(*source);
  }
}

void battle_config::MergeFrom(const battle_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.battle_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void battle_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.battle_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_config::CopyFrom(const battle_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.battle_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_config::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void battle_config::InternalSwap(battle_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata battle_config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::battle_config_t_battle_config* Arena::CreateMaybeMessage< ::pb::battle_config_t_battle_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::battle_config_t_battle_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::battle_config* Arena::CreateMaybeMessage< ::pb::battle_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::battle_config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
