// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rankpk_level.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rankpk_5flevel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rankpk_5flevel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rankpk_5flevel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rankpk_5flevel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rankpk_5flevel_2eproto;
namespace pb {
class rankpk_level;
class rankpk_levelDefaultTypeInternal;
extern rankpk_levelDefaultTypeInternal _rankpk_level_default_instance_;
class rankpk_level_t_rankpk_level;
class rankpk_level_t_rankpk_levelDefaultTypeInternal;
extern rankpk_level_t_rankpk_levelDefaultTypeInternal _rankpk_level_t_rankpk_level_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::rankpk_level* Arena::CreateMaybeMessage<::pb::rankpk_level>(Arena*);
template<> ::pb::rankpk_level_t_rankpk_level* Arena::CreateMaybeMessage<::pb::rankpk_level_t_rankpk_level>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class rankpk_level_t_rankpk_level :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.rankpk_level.t_rankpk_level) */ {
 public:
  rankpk_level_t_rankpk_level();
  virtual ~rankpk_level_t_rankpk_level();

  rankpk_level_t_rankpk_level(const rankpk_level_t_rankpk_level& from);
  rankpk_level_t_rankpk_level(rankpk_level_t_rankpk_level&& from) noexcept
    : rankpk_level_t_rankpk_level() {
    *this = ::std::move(from);
  }

  inline rankpk_level_t_rankpk_level& operator=(const rankpk_level_t_rankpk_level& from) {
    CopyFrom(from);
    return *this;
  }
  inline rankpk_level_t_rankpk_level& operator=(rankpk_level_t_rankpk_level&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rankpk_level_t_rankpk_level& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rankpk_level_t_rankpk_level* internal_default_instance() {
    return reinterpret_cast<const rankpk_level_t_rankpk_level*>(
               &_rankpk_level_t_rankpk_level_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(rankpk_level_t_rankpk_level& a, rankpk_level_t_rankpk_level& b) {
    a.Swap(&b);
  }
  inline void Swap(rankpk_level_t_rankpk_level* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rankpk_level_t_rankpk_level* New() const final {
    return CreateMaybeMessage<rankpk_level_t_rankpk_level>(nullptr);
  }

  rankpk_level_t_rankpk_level* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rankpk_level_t_rankpk_level>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rankpk_level_t_rankpk_level& from);
  void MergeFrom(const rankpk_level_t_rankpk_level& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rankpk_level_t_rankpk_level* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.rankpk_level.t_rankpk_level";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rankpk_5flevel_2eproto);
    return ::descriptor_table_rankpk_5flevel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kIconFieldNumber = 5,
    kIconSmallFieldNumber = 6,
    kRankAwardsFieldNumber = 7,
    kHistroyRankRewardFieldNumber = 8,
    kSeasonRewardFieldNumber = 10,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kMaxStarFieldNumber = 4,
    kContinueWinRewardStarFieldNumber = 9,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string icon = 5;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // required string icon_small = 6;
  bool has_icon_small() const;
  private:
  bool _internal_has_icon_small() const;
  public:
  void clear_icon_small();
  const std::string& icon_small() const;
  void set_icon_small(const std::string& value);
  void set_icon_small(std::string&& value);
  void set_icon_small(const char* value);
  void set_icon_small(const char* value, size_t size);
  std::string* mutable_icon_small();
  std::string* release_icon_small();
  void set_allocated_icon_small(std::string* icon_small);
  private:
  const std::string& _internal_icon_small() const;
  void _internal_set_icon_small(const std::string& value);
  std::string* _internal_mutable_icon_small();
  public:

  // required string rank_awards = 7;
  bool has_rank_awards() const;
  private:
  bool _internal_has_rank_awards() const;
  public:
  void clear_rank_awards();
  const std::string& rank_awards() const;
  void set_rank_awards(const std::string& value);
  void set_rank_awards(std::string&& value);
  void set_rank_awards(const char* value);
  void set_rank_awards(const char* value, size_t size);
  std::string* mutable_rank_awards();
  std::string* release_rank_awards();
  void set_allocated_rank_awards(std::string* rank_awards);
  private:
  const std::string& _internal_rank_awards() const;
  void _internal_set_rank_awards(const std::string& value);
  std::string* _internal_mutable_rank_awards();
  public:

  // required string histroy_rank_reward = 8;
  bool has_histroy_rank_reward() const;
  private:
  bool _internal_has_histroy_rank_reward() const;
  public:
  void clear_histroy_rank_reward();
  const std::string& histroy_rank_reward() const;
  void set_histroy_rank_reward(const std::string& value);
  void set_histroy_rank_reward(std::string&& value);
  void set_histroy_rank_reward(const char* value);
  void set_histroy_rank_reward(const char* value, size_t size);
  std::string* mutable_histroy_rank_reward();
  std::string* release_histroy_rank_reward();
  void set_allocated_histroy_rank_reward(std::string* histroy_rank_reward);
  private:
  const std::string& _internal_histroy_rank_reward() const;
  void _internal_set_histroy_rank_reward(const std::string& value);
  std::string* _internal_mutable_histroy_rank_reward();
  public:

  // required string season_reward = 10;
  bool has_season_reward() const;
  private:
  bool _internal_has_season_reward() const;
  public:
  void clear_season_reward();
  const std::string& season_reward() const;
  void set_season_reward(const std::string& value);
  void set_season_reward(std::string&& value);
  void set_season_reward(const char* value);
  void set_season_reward(const char* value, size_t size);
  std::string* mutable_season_reward();
  std::string* release_season_reward();
  void set_allocated_season_reward(std::string* season_reward);
  private:
  const std::string& _internal_season_reward() const;
  void _internal_set_season_reward(const std::string& value);
  std::string* _internal_mutable_season_reward();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 max_star = 4;
  bool has_max_star() const;
  private:
  bool _internal_has_max_star() const;
  public:
  void clear_max_star();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_star() const;
  void set_max_star(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_star() const;
  void _internal_set_max_star(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 continue_win_reward_star = 9;
  bool has_continue_win_reward_star() const;
  private:
  bool _internal_has_continue_win_reward_star() const;
  public:
  void clear_continue_win_reward_star();
  ::PROTOBUF_NAMESPACE_ID::uint32 continue_win_reward_star() const;
  void set_continue_win_reward_star(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_continue_win_reward_star() const;
  void _internal_set_continue_win_reward_star(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.rankpk_level.t_rankpk_level)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_small_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rank_awards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr histroy_rank_reward_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr season_reward_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_star_;
  ::PROTOBUF_NAMESPACE_ID::uint32 continue_win_reward_star_;
  friend struct ::TableStruct_rankpk_5flevel_2eproto;
};
// -------------------------------------------------------------------

class rankpk_level :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.rankpk_level) */ {
 public:
  rankpk_level();
  virtual ~rankpk_level();

  rankpk_level(const rankpk_level& from);
  rankpk_level(rankpk_level&& from) noexcept
    : rankpk_level() {
    *this = ::std::move(from);
  }

  inline rankpk_level& operator=(const rankpk_level& from) {
    CopyFrom(from);
    return *this;
  }
  inline rankpk_level& operator=(rankpk_level&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rankpk_level& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rankpk_level* internal_default_instance() {
    return reinterpret_cast<const rankpk_level*>(
               &_rankpk_level_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(rankpk_level& a, rankpk_level& b) {
    a.Swap(&b);
  }
  inline void Swap(rankpk_level* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rankpk_level* New() const final {
    return CreateMaybeMessage<rankpk_level>(nullptr);
  }

  rankpk_level* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rankpk_level>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rankpk_level& from);
  void MergeFrom(const rankpk_level& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rankpk_level* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.rankpk_level";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rankpk_5flevel_2eproto);
    return ::descriptor_table_rankpk_5flevel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef rankpk_level_t_rankpk_level t_rankpk_level;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.rankpk_level.t_rankpk_level datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::rankpk_level_t_rankpk_level* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::rankpk_level_t_rankpk_level >*
      mutable_datas();
  private:
  const ::pb::rankpk_level_t_rankpk_level& _internal_datas(int index) const;
  ::pb::rankpk_level_t_rankpk_level* _internal_add_datas();
  public:
  const ::pb::rankpk_level_t_rankpk_level& datas(int index) const;
  ::pb::rankpk_level_t_rankpk_level* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::rankpk_level_t_rankpk_level >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.rankpk_level)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::rankpk_level_t_rankpk_level > datas_;
  friend struct ::TableStruct_rankpk_5flevel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// rankpk_level_t_rankpk_level

// required uint32 tbxid = 1 [default = 0];
inline bool rankpk_level_t_rankpk_level::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool rankpk_level_t_rankpk_level::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void rankpk_level_t_rankpk_level::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rankpk_level_t_rankpk_level::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rankpk_level_t_rankpk_level::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.t_rankpk_level.tbxid)
  return _internal_tbxid();
}
inline void rankpk_level_t_rankpk_level::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  tbxid_ = value;
}
inline void rankpk_level_t_rankpk_level::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.rankpk_level.t_rankpk_level.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool rankpk_level_t_rankpk_level::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool rankpk_level_t_rankpk_level::has_id() const {
  return _internal_has_id();
}
inline void rankpk_level_t_rankpk_level::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rankpk_level_t_rankpk_level::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rankpk_level_t_rankpk_level::id() const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.t_rankpk_level.id)
  return _internal_id();
}
inline void rankpk_level_t_rankpk_level::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
}
inline void rankpk_level_t_rankpk_level::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.rankpk_level.t_rankpk_level.id)
}

// required string name = 3;
inline bool rankpk_level_t_rankpk_level::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool rankpk_level_t_rankpk_level::has_name() const {
  return _internal_has_name();
}
inline void rankpk_level_t_rankpk_level::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& rankpk_level_t_rankpk_level::name() const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.t_rankpk_level.name)
  return _internal_name();
}
inline void rankpk_level_t_rankpk_level::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.rankpk_level.t_rankpk_level.name)
}
inline std::string* rankpk_level_t_rankpk_level::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.rankpk_level.t_rankpk_level.name)
  return _internal_mutable_name();
}
inline const std::string& rankpk_level_t_rankpk_level::_internal_name() const {
  return name_.GetNoArena();
}
inline void rankpk_level_t_rankpk_level::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rankpk_level_t_rankpk_level::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.rankpk_level.t_rankpk_level.name)
}
inline void rankpk_level_t_rankpk_level::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.rankpk_level.t_rankpk_level.name)
}
inline void rankpk_level_t_rankpk_level::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.rankpk_level.t_rankpk_level.name)
}
inline std::string* rankpk_level_t_rankpk_level::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rankpk_level_t_rankpk_level::release_name() {
  // @@protoc_insertion_point(field_release:pb.rankpk_level.t_rankpk_level.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rankpk_level_t_rankpk_level::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.rankpk_level.t_rankpk_level.name)
}

// required uint32 max_star = 4;
inline bool rankpk_level_t_rankpk_level::_internal_has_max_star() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool rankpk_level_t_rankpk_level::has_max_star() const {
  return _internal_has_max_star();
}
inline void rankpk_level_t_rankpk_level::clear_max_star() {
  max_star_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rankpk_level_t_rankpk_level::_internal_max_star() const {
  return max_star_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rankpk_level_t_rankpk_level::max_star() const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.t_rankpk_level.max_star)
  return _internal_max_star();
}
inline void rankpk_level_t_rankpk_level::_internal_set_max_star(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  max_star_ = value;
}
inline void rankpk_level_t_rankpk_level::set_max_star(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_star(value);
  // @@protoc_insertion_point(field_set:pb.rankpk_level.t_rankpk_level.max_star)
}

// required string icon = 5;
inline bool rankpk_level_t_rankpk_level::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool rankpk_level_t_rankpk_level::has_icon() const {
  return _internal_has_icon();
}
inline void rankpk_level_t_rankpk_level::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& rankpk_level_t_rankpk_level::icon() const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.t_rankpk_level.icon)
  return _internal_icon();
}
inline void rankpk_level_t_rankpk_level::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:pb.rankpk_level.t_rankpk_level.icon)
}
inline std::string* rankpk_level_t_rankpk_level::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:pb.rankpk_level.t_rankpk_level.icon)
  return _internal_mutable_icon();
}
inline const std::string& rankpk_level_t_rankpk_level::_internal_icon() const {
  return icon_.GetNoArena();
}
inline void rankpk_level_t_rankpk_level::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rankpk_level_t_rankpk_level::set_icon(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.rankpk_level.t_rankpk_level.icon)
}
inline void rankpk_level_t_rankpk_level::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.rankpk_level.t_rankpk_level.icon)
}
inline void rankpk_level_t_rankpk_level::set_icon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.rankpk_level.t_rankpk_level.icon)
}
inline std::string* rankpk_level_t_rankpk_level::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000002u;
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rankpk_level_t_rankpk_level::release_icon() {
  // @@protoc_insertion_point(field_release:pb.rankpk_level.t_rankpk_level.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return icon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rankpk_level_t_rankpk_level::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:pb.rankpk_level.t_rankpk_level.icon)
}

// required string icon_small = 6;
inline bool rankpk_level_t_rankpk_level::_internal_has_icon_small() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool rankpk_level_t_rankpk_level::has_icon_small() const {
  return _internal_has_icon_small();
}
inline void rankpk_level_t_rankpk_level::clear_icon_small() {
  icon_small_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& rankpk_level_t_rankpk_level::icon_small() const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.t_rankpk_level.icon_small)
  return _internal_icon_small();
}
inline void rankpk_level_t_rankpk_level::set_icon_small(const std::string& value) {
  _internal_set_icon_small(value);
  // @@protoc_insertion_point(field_set:pb.rankpk_level.t_rankpk_level.icon_small)
}
inline std::string* rankpk_level_t_rankpk_level::mutable_icon_small() {
  // @@protoc_insertion_point(field_mutable:pb.rankpk_level.t_rankpk_level.icon_small)
  return _internal_mutable_icon_small();
}
inline const std::string& rankpk_level_t_rankpk_level::_internal_icon_small() const {
  return icon_small_.GetNoArena();
}
inline void rankpk_level_t_rankpk_level::_internal_set_icon_small(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_small_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rankpk_level_t_rankpk_level::set_icon_small(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_small_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.rankpk_level.t_rankpk_level.icon_small)
}
inline void rankpk_level_t_rankpk_level::set_icon_small(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  icon_small_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.rankpk_level.t_rankpk_level.icon_small)
}
inline void rankpk_level_t_rankpk_level::set_icon_small(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  icon_small_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.rankpk_level.t_rankpk_level.icon_small)
}
inline std::string* rankpk_level_t_rankpk_level::_internal_mutable_icon_small() {
  _has_bits_[0] |= 0x00000004u;
  return icon_small_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rankpk_level_t_rankpk_level::release_icon_small() {
  // @@protoc_insertion_point(field_release:pb.rankpk_level.t_rankpk_level.icon_small)
  if (!_internal_has_icon_small()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return icon_small_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rankpk_level_t_rankpk_level::set_allocated_icon_small(std::string* icon_small) {
  if (icon_small != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_small_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon_small);
  // @@protoc_insertion_point(field_set_allocated:pb.rankpk_level.t_rankpk_level.icon_small)
}

// required string rank_awards = 7;
inline bool rankpk_level_t_rankpk_level::_internal_has_rank_awards() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool rankpk_level_t_rankpk_level::has_rank_awards() const {
  return _internal_has_rank_awards();
}
inline void rankpk_level_t_rankpk_level::clear_rank_awards() {
  rank_awards_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& rankpk_level_t_rankpk_level::rank_awards() const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.t_rankpk_level.rank_awards)
  return _internal_rank_awards();
}
inline void rankpk_level_t_rankpk_level::set_rank_awards(const std::string& value) {
  _internal_set_rank_awards(value);
  // @@protoc_insertion_point(field_set:pb.rankpk_level.t_rankpk_level.rank_awards)
}
inline std::string* rankpk_level_t_rankpk_level::mutable_rank_awards() {
  // @@protoc_insertion_point(field_mutable:pb.rankpk_level.t_rankpk_level.rank_awards)
  return _internal_mutable_rank_awards();
}
inline const std::string& rankpk_level_t_rankpk_level::_internal_rank_awards() const {
  return rank_awards_.GetNoArena();
}
inline void rankpk_level_t_rankpk_level::_internal_set_rank_awards(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  rank_awards_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rankpk_level_t_rankpk_level::set_rank_awards(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  rank_awards_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.rankpk_level.t_rankpk_level.rank_awards)
}
inline void rankpk_level_t_rankpk_level::set_rank_awards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  rank_awards_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.rankpk_level.t_rankpk_level.rank_awards)
}
inline void rankpk_level_t_rankpk_level::set_rank_awards(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  rank_awards_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.rankpk_level.t_rankpk_level.rank_awards)
}
inline std::string* rankpk_level_t_rankpk_level::_internal_mutable_rank_awards() {
  _has_bits_[0] |= 0x00000008u;
  return rank_awards_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rankpk_level_t_rankpk_level::release_rank_awards() {
  // @@protoc_insertion_point(field_release:pb.rankpk_level.t_rankpk_level.rank_awards)
  if (!_internal_has_rank_awards()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return rank_awards_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rankpk_level_t_rankpk_level::set_allocated_rank_awards(std::string* rank_awards) {
  if (rank_awards != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  rank_awards_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rank_awards);
  // @@protoc_insertion_point(field_set_allocated:pb.rankpk_level.t_rankpk_level.rank_awards)
}

// required string histroy_rank_reward = 8;
inline bool rankpk_level_t_rankpk_level::_internal_has_histroy_rank_reward() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool rankpk_level_t_rankpk_level::has_histroy_rank_reward() const {
  return _internal_has_histroy_rank_reward();
}
inline void rankpk_level_t_rankpk_level::clear_histroy_rank_reward() {
  histroy_rank_reward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& rankpk_level_t_rankpk_level::histroy_rank_reward() const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.t_rankpk_level.histroy_rank_reward)
  return _internal_histroy_rank_reward();
}
inline void rankpk_level_t_rankpk_level::set_histroy_rank_reward(const std::string& value) {
  _internal_set_histroy_rank_reward(value);
  // @@protoc_insertion_point(field_set:pb.rankpk_level.t_rankpk_level.histroy_rank_reward)
}
inline std::string* rankpk_level_t_rankpk_level::mutable_histroy_rank_reward() {
  // @@protoc_insertion_point(field_mutable:pb.rankpk_level.t_rankpk_level.histroy_rank_reward)
  return _internal_mutable_histroy_rank_reward();
}
inline const std::string& rankpk_level_t_rankpk_level::_internal_histroy_rank_reward() const {
  return histroy_rank_reward_.GetNoArena();
}
inline void rankpk_level_t_rankpk_level::_internal_set_histroy_rank_reward(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  histroy_rank_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rankpk_level_t_rankpk_level::set_histroy_rank_reward(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  histroy_rank_reward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.rankpk_level.t_rankpk_level.histroy_rank_reward)
}
inline void rankpk_level_t_rankpk_level::set_histroy_rank_reward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  histroy_rank_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.rankpk_level.t_rankpk_level.histroy_rank_reward)
}
inline void rankpk_level_t_rankpk_level::set_histroy_rank_reward(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  histroy_rank_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.rankpk_level.t_rankpk_level.histroy_rank_reward)
}
inline std::string* rankpk_level_t_rankpk_level::_internal_mutable_histroy_rank_reward() {
  _has_bits_[0] |= 0x00000010u;
  return histroy_rank_reward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rankpk_level_t_rankpk_level::release_histroy_rank_reward() {
  // @@protoc_insertion_point(field_release:pb.rankpk_level.t_rankpk_level.histroy_rank_reward)
  if (!_internal_has_histroy_rank_reward()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return histroy_rank_reward_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rankpk_level_t_rankpk_level::set_allocated_histroy_rank_reward(std::string* histroy_rank_reward) {
  if (histroy_rank_reward != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  histroy_rank_reward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), histroy_rank_reward);
  // @@protoc_insertion_point(field_set_allocated:pb.rankpk_level.t_rankpk_level.histroy_rank_reward)
}

// required uint32 continue_win_reward_star = 9;
inline bool rankpk_level_t_rankpk_level::_internal_has_continue_win_reward_star() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool rankpk_level_t_rankpk_level::has_continue_win_reward_star() const {
  return _internal_has_continue_win_reward_star();
}
inline void rankpk_level_t_rankpk_level::clear_continue_win_reward_star() {
  continue_win_reward_star_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rankpk_level_t_rankpk_level::_internal_continue_win_reward_star() const {
  return continue_win_reward_star_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 rankpk_level_t_rankpk_level::continue_win_reward_star() const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.t_rankpk_level.continue_win_reward_star)
  return _internal_continue_win_reward_star();
}
inline void rankpk_level_t_rankpk_level::_internal_set_continue_win_reward_star(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  continue_win_reward_star_ = value;
}
inline void rankpk_level_t_rankpk_level::set_continue_win_reward_star(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_continue_win_reward_star(value);
  // @@protoc_insertion_point(field_set:pb.rankpk_level.t_rankpk_level.continue_win_reward_star)
}

// required string season_reward = 10;
inline bool rankpk_level_t_rankpk_level::_internal_has_season_reward() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool rankpk_level_t_rankpk_level::has_season_reward() const {
  return _internal_has_season_reward();
}
inline void rankpk_level_t_rankpk_level::clear_season_reward() {
  season_reward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& rankpk_level_t_rankpk_level::season_reward() const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.t_rankpk_level.season_reward)
  return _internal_season_reward();
}
inline void rankpk_level_t_rankpk_level::set_season_reward(const std::string& value) {
  _internal_set_season_reward(value);
  // @@protoc_insertion_point(field_set:pb.rankpk_level.t_rankpk_level.season_reward)
}
inline std::string* rankpk_level_t_rankpk_level::mutable_season_reward() {
  // @@protoc_insertion_point(field_mutable:pb.rankpk_level.t_rankpk_level.season_reward)
  return _internal_mutable_season_reward();
}
inline const std::string& rankpk_level_t_rankpk_level::_internal_season_reward() const {
  return season_reward_.GetNoArena();
}
inline void rankpk_level_t_rankpk_level::_internal_set_season_reward(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  season_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void rankpk_level_t_rankpk_level::set_season_reward(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  season_reward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.rankpk_level.t_rankpk_level.season_reward)
}
inline void rankpk_level_t_rankpk_level::set_season_reward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  season_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.rankpk_level.t_rankpk_level.season_reward)
}
inline void rankpk_level_t_rankpk_level::set_season_reward(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  season_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.rankpk_level.t_rankpk_level.season_reward)
}
inline std::string* rankpk_level_t_rankpk_level::_internal_mutable_season_reward() {
  _has_bits_[0] |= 0x00000020u;
  return season_reward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* rankpk_level_t_rankpk_level::release_season_reward() {
  // @@protoc_insertion_point(field_release:pb.rankpk_level.t_rankpk_level.season_reward)
  if (!_internal_has_season_reward()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return season_reward_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void rankpk_level_t_rankpk_level::set_allocated_season_reward(std::string* season_reward) {
  if (season_reward != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  season_reward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), season_reward);
  // @@protoc_insertion_point(field_set_allocated:pb.rankpk_level.t_rankpk_level.season_reward)
}

// -------------------------------------------------------------------

// rankpk_level

// repeated .pb.rankpk_level.t_rankpk_level datas = 1;
inline int rankpk_level::_internal_datas_size() const {
  return datas_.size();
}
inline int rankpk_level::datas_size() const {
  return _internal_datas_size();
}
inline void rankpk_level::clear_datas() {
  datas_.Clear();
}
inline ::pb::rankpk_level_t_rankpk_level* rankpk_level::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.rankpk_level.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::rankpk_level_t_rankpk_level >*
rankpk_level::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.rankpk_level.datas)
  return &datas_;
}
inline const ::pb::rankpk_level_t_rankpk_level& rankpk_level::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::rankpk_level_t_rankpk_level& rankpk_level::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.rankpk_level.datas)
  return _internal_datas(index);
}
inline ::pb::rankpk_level_t_rankpk_level* rankpk_level::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::rankpk_level_t_rankpk_level* rankpk_level::add_datas() {
  // @@protoc_insertion_point(field_add:pb.rankpk_level.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::rankpk_level_t_rankpk_level >&
rankpk_level::datas() const {
  // @@protoc_insertion_point(field_list:pb.rankpk_level.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rankpk_5flevel_2eproto
