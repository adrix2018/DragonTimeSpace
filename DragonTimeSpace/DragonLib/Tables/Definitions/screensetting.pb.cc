// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: screensetting.proto

#include "screensetting.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_screensetting_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_screensetting_t_screensetting_config_screensetting_2eproto;
namespace pb {
class screensetting_t_screensetting_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<screensetting_t_screensetting_config> _instance;
} _screensetting_t_screensetting_config_default_instance_;
class screensettingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<screensetting> _instance;
} _screensetting_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_screensetting_screensetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_screensetting_default_instance_;
    new (ptr) ::pb::screensetting();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::screensetting::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_screensetting_screensetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_screensetting_screensetting_2eproto}, {
      &scc_info_screensetting_t_screensetting_config_screensetting_2eproto.base,}};

static void InitDefaultsscc_info_screensetting_t_screensetting_config_screensetting_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_screensetting_t_screensetting_config_default_instance_;
    new (ptr) ::pb::screensetting_t_screensetting_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::screensetting_t_screensetting_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_screensetting_t_screensetting_config_screensetting_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_screensetting_t_screensetting_config_screensetting_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_screensetting_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_screensetting_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_screensetting_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_screensetting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, id_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, type_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, floodlight_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, shadow_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, dop_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, halo_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, antialiasing_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, sceneobjpriority_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, sceneeffect_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, uiclosescene_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting_t_screensetting_config, cameradis_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::pb::screensetting, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::screensetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::screensetting, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::pb::screensetting_t_screensetting_config)},
  { 29, 35, sizeof(::pb::screensetting)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_screensetting_t_screensetting_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_screensetting_default_instance_),
};

const char descriptor_table_protodef_screensetting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023screensetting.proto\022\002pb\"\277\002\n\rscreensett"
  "ing\0227\n\005datas\030\001 \003(\0132(.pb.screensetting.t_"
  "screensetting_config\032\364\001\n\026t_screensetting"
  "_config\022\020\n\005tbxid\030\001 \002(\r:\0010\022\r\n\002id\030\002 \002(\r:\0010"
  "\022\014\n\004type\030\003 \002(\r\022\022\n\nfloodlight\030\004 \002(\010\022\016\n\006sh"
  "adow\030\005 \002(\010\022\013\n\003dop\030\006 \002(\010\022\014\n\004halo\030\007 \002(\010\022\024\n"
  "\014antialiasing\030\010 \002(\010\022\030\n\020sceneobjpriority\030"
  "\t \002(\r\022\023\n\013sceneeffect\030\n \002(\010\022\024\n\014uiclosesce"
  "ne\030\013 \002(\010\022\021\n\tcameradis\030\014 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_screensetting_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_screensetting_2eproto_sccs[2] = {
  &scc_info_screensetting_screensetting_2eproto.base,
  &scc_info_screensetting_t_screensetting_config_screensetting_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_screensetting_2eproto_once;
static bool descriptor_table_screensetting_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_screensetting_2eproto = {
  &descriptor_table_screensetting_2eproto_initialized, descriptor_table_protodef_screensetting_2eproto, "screensetting.proto", 347,
  &descriptor_table_screensetting_2eproto_once, descriptor_table_screensetting_2eproto_sccs, descriptor_table_screensetting_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_screensetting_2eproto::offsets,
  file_level_metadata_screensetting_2eproto, 2, file_level_enum_descriptors_screensetting_2eproto, file_level_service_descriptors_screensetting_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_screensetting_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_screensetting_2eproto)), true);
namespace pb {

// ===================================================================

void screensetting_t_screensetting_config::InitAsDefaultInstance() {
}
class screensetting_t_screensetting_config::_Internal {
 public:
  using HasBits = decltype(std::declval<screensetting_t_screensetting_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_floodlight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dop(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_halo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_antialiasing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sceneobjpriority(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sceneeffect(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_uiclosescene(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cameradis(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

screensetting_t_screensetting_config::screensetting_t_screensetting_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.screensetting.t_screensetting_config)
}
screensetting_t_screensetting_config::screensetting_t_screensetting_config(const screensetting_t_screensetting_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cameradis_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(cameradis_));
  // @@protoc_insertion_point(copy_constructor:pb.screensetting.t_screensetting_config)
}

void screensetting_t_screensetting_config::SharedCtor() {
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cameradis_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(cameradis_));
}

screensetting_t_screensetting_config::~screensetting_t_screensetting_config() {
  // @@protoc_insertion_point(destructor:pb.screensetting.t_screensetting_config)
  SharedDtor();
}

void screensetting_t_screensetting_config::SharedDtor() {
}

void screensetting_t_screensetting_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const screensetting_t_screensetting_config& screensetting_t_screensetting_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_screensetting_t_screensetting_config_screensetting_2eproto.base);
  return *internal_default_instance();
}


void screensetting_t_screensetting_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.screensetting.t_screensetting_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sceneobjpriority_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(sceneobjpriority_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&antialiasing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cameradis_) -
        reinterpret_cast<char*>(&antialiasing_)) + sizeof(cameradis_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* screensetting_t_screensetting_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&has_bits);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool floodlight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_floodlight(&has_bits);
          floodlight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool shadow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_shadow(&has_bits);
          shadow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool dop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dop(&has_bits);
          dop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool halo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_halo(&has_bits);
          halo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool antialiasing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_antialiasing(&has_bits);
          antialiasing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 sceneobjpriority = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_sceneobjpriority(&has_bits);
          sceneobjpriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool sceneeffect = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_sceneeffect(&has_bits);
          sceneeffect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool uiclosescene = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_uiclosescene(&has_bits);
          uiclosescene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cameradis = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cameradis(&has_bits);
          cameradis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* screensetting_t_screensetting_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.screensetting.t_screensetting_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // required bool floodlight = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_floodlight(), target);
  }

  // required bool shadow = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_shadow(), target);
  }

  // required bool dop = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_dop(), target);
  }

  // required bool halo = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_halo(), target);
  }

  // required bool antialiasing = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_antialiasing(), target);
  }

  // required uint32 sceneobjpriority = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sceneobjpriority(), target);
  }

  // required bool sceneeffect = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_sceneeffect(), target);
  }

  // required bool uiclosescene = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_uiclosescene(), target);
  }

  // required uint32 cameradis = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_cameradis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.screensetting.t_screensetting_config)
  return target;
}

size_t screensetting_t_screensetting_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.screensetting.t_screensetting_config)
  size_t total_size = 0;

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_type()) {
    // required uint32 type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_floodlight()) {
    // required bool floodlight = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_shadow()) {
    // required bool shadow = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_dop()) {
    // required bool dop = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_halo()) {
    // required bool halo = 7;
    total_size += 1 + 1;
  }

  if (_internal_has_sceneobjpriority()) {
    // required uint32 sceneobjpriority = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sceneobjpriority());
  }

  if (_internal_has_antialiasing()) {
    // required bool antialiasing = 8;
    total_size += 1 + 1;
  }

  if (_internal_has_sceneeffect()) {
    // required bool sceneeffect = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_uiclosescene()) {
    // required bool uiclosescene = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_cameradis()) {
    // required uint32 cameradis = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cameradis());
  }

  return total_size;
}
size_t screensetting_t_screensetting_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.screensetting.t_screensetting_config)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required bool floodlight = 4;
    total_size += 1 + 1;

    // required bool shadow = 5;
    total_size += 1 + 1;

    // required bool dop = 6;
    total_size += 1 + 1;

    // required bool halo = 7;
    total_size += 1 + 1;

    // required uint32 sceneobjpriority = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sceneobjpriority());

    // required bool antialiasing = 8;
    total_size += 1 + 1;

    // required bool sceneeffect = 10;
    total_size += 1 + 1;

    // required bool uiclosescene = 11;
    total_size += 1 + 1;

    // required uint32 cameradis = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cameradis());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void screensetting_t_screensetting_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.screensetting.t_screensetting_config)
  GOOGLE_DCHECK_NE(&from, this);
  const screensetting_t_screensetting_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<screensetting_t_screensetting_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.screensetting.t_screensetting_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.screensetting.t_screensetting_config)
    MergeFrom(*source);
  }
}

void screensetting_t_screensetting_config::MergeFrom(const screensetting_t_screensetting_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.screensetting.t_screensetting_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      floodlight_ = from.floodlight_;
    }
    if (cached_has_bits & 0x00000010u) {
      shadow_ = from.shadow_;
    }
    if (cached_has_bits & 0x00000020u) {
      dop_ = from.dop_;
    }
    if (cached_has_bits & 0x00000040u) {
      halo_ = from.halo_;
    }
    if (cached_has_bits & 0x00000080u) {
      sceneobjpriority_ = from.sceneobjpriority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      antialiasing_ = from.antialiasing_;
    }
    if (cached_has_bits & 0x00000200u) {
      sceneeffect_ = from.sceneeffect_;
    }
    if (cached_has_bits & 0x00000400u) {
      uiclosescene_ = from.uiclosescene_;
    }
    if (cached_has_bits & 0x00000800u) {
      cameradis_ = from.cameradis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void screensetting_t_screensetting_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.screensetting.t_screensetting_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void screensetting_t_screensetting_config::CopyFrom(const screensetting_t_screensetting_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.screensetting.t_screensetting_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool screensetting_t_screensetting_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void screensetting_t_screensetting_config::InternalSwap(screensetting_t_screensetting_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(floodlight_, other->floodlight_);
  swap(shadow_, other->shadow_);
  swap(dop_, other->dop_);
  swap(halo_, other->halo_);
  swap(sceneobjpriority_, other->sceneobjpriority_);
  swap(antialiasing_, other->antialiasing_);
  swap(sceneeffect_, other->sceneeffect_);
  swap(uiclosescene_, other->uiclosescene_);
  swap(cameradis_, other->cameradis_);
}

::PROTOBUF_NAMESPACE_ID::Metadata screensetting_t_screensetting_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void screensetting::InitAsDefaultInstance() {
}
class screensetting::_Internal {
 public:
  using HasBits = decltype(std::declval<screensetting>()._has_bits_);
};

screensetting::screensetting()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.screensetting)
}
screensetting::screensetting(const screensetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.screensetting)
}

void screensetting::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_screensetting_screensetting_2eproto.base);
}

screensetting::~screensetting() {
  // @@protoc_insertion_point(destructor:pb.screensetting)
  SharedDtor();
}

void screensetting::SharedDtor() {
}

void screensetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const screensetting& screensetting::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_screensetting_screensetting_2eproto.base);
  return *internal_default_instance();
}


void screensetting::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.screensetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* screensetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.screensetting.t_screensetting_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* screensetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.screensetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.screensetting.t_screensetting_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.screensetting)
  return target;
}

size_t screensetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.screensetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.screensetting.t_screensetting_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void screensetting::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.screensetting)
  GOOGLE_DCHECK_NE(&from, this);
  const screensetting* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<screensetting>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.screensetting)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.screensetting)
    MergeFrom(*source);
  }
}

void screensetting::MergeFrom(const screensetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.screensetting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void screensetting::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.screensetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void screensetting::CopyFrom(const screensetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.screensetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool screensetting::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void screensetting::InternalSwap(screensetting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata screensetting::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::screensetting_t_screensetting_config* Arena::CreateMaybeMessage< ::pb::screensetting_t_screensetting_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::screensetting_t_screensetting_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::screensetting* Arena::CreateMaybeMessage< ::pb::screensetting >(Arena* arena) {
  return Arena::CreateInternal< ::pb::screensetting >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
