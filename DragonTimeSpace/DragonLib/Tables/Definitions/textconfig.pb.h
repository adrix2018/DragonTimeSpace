// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: textconfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_textconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_textconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_textconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_textconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_textconfig_2eproto;
namespace pb {
class textconfig;
class textconfigDefaultTypeInternal;
extern textconfigDefaultTypeInternal _textconfig_default_instance_;
class textconfig_t_text_config;
class textconfig_t_text_configDefaultTypeInternal;
extern textconfig_t_text_configDefaultTypeInternal _textconfig_t_text_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::textconfig* Arena::CreateMaybeMessage<::pb::textconfig>(Arena*);
template<> ::pb::textconfig_t_text_config* Arena::CreateMaybeMessage<::pb::textconfig_t_text_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class textconfig_t_text_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.textconfig.t_text_config) */ {
 public:
  textconfig_t_text_config();
  virtual ~textconfig_t_text_config();

  textconfig_t_text_config(const textconfig_t_text_config& from);
  textconfig_t_text_config(textconfig_t_text_config&& from) noexcept
    : textconfig_t_text_config() {
    *this = ::std::move(from);
  }

  inline textconfig_t_text_config& operator=(const textconfig_t_text_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline textconfig_t_text_config& operator=(textconfig_t_text_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const textconfig_t_text_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const textconfig_t_text_config* internal_default_instance() {
    return reinterpret_cast<const textconfig_t_text_config*>(
               &_textconfig_t_text_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(textconfig_t_text_config& a, textconfig_t_text_config& b) {
    a.Swap(&b);
  }
  inline void Swap(textconfig_t_text_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline textconfig_t_text_config* New() const final {
    return CreateMaybeMessage<textconfig_t_text_config>(nullptr);
  }

  textconfig_t_text_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<textconfig_t_text_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const textconfig_t_text_config& from);
  void MergeFrom(const textconfig_t_text_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(textconfig_t_text_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.textconfig.t_text_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_textconfig_2eproto);
    return ::descriptor_table_textconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanneltextFieldNumber = 7,
    kNoticeFieldNumber = 8,
    kTipsFieldNumber = 9,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kTexttypeFieldNumber = 3,
    kChanneltypeFieldNumber = 4,
    kShowtypeFieldNumber = 5,
    kShowchatFieldNumber = 6,
    kRightsysFieldNumber = 10,
    kShowtimeFieldNumber = 11,
  };
  // required string channeltext = 7;
  bool has_channeltext() const;
  private:
  bool _internal_has_channeltext() const;
  public:
  void clear_channeltext();
  const std::string& channeltext() const;
  void set_channeltext(const std::string& value);
  void set_channeltext(std::string&& value);
  void set_channeltext(const char* value);
  void set_channeltext(const char* value, size_t size);
  std::string* mutable_channeltext();
  std::string* release_channeltext();
  void set_allocated_channeltext(std::string* channeltext);
  private:
  const std::string& _internal_channeltext() const;
  void _internal_set_channeltext(const std::string& value);
  std::string* _internal_mutable_channeltext();
  public:

  // required string notice = 8;
  bool has_notice() const;
  private:
  bool _internal_has_notice() const;
  public:
  void clear_notice();
  const std::string& notice() const;
  void set_notice(const std::string& value);
  void set_notice(std::string&& value);
  void set_notice(const char* value);
  void set_notice(const char* value, size_t size);
  std::string* mutable_notice();
  std::string* release_notice();
  void set_allocated_notice(std::string* notice);
  private:
  const std::string& _internal_notice() const;
  void _internal_set_notice(const std::string& value);
  std::string* _internal_mutable_notice();
  public:

  // required string tips = 9;
  bool has_tips() const;
  private:
  bool _internal_has_tips() const;
  public:
  void clear_tips();
  const std::string& tips() const;
  void set_tips(const std::string& value);
  void set_tips(std::string&& value);
  void set_tips(const char* value);
  void set_tips(const char* value, size_t size);
  std::string* mutable_tips();
  std::string* release_tips();
  void set_allocated_tips(std::string* tips);
  private:
  const std::string& _internal_tips() const;
  void _internal_set_tips(const std::string& value);
  std::string* _internal_mutable_tips();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 texttype = 3;
  bool has_texttype() const;
  private:
  bool _internal_has_texttype() const;
  public:
  void clear_texttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 texttype() const;
  void set_texttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_texttype() const;
  void _internal_set_texttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 channeltype = 4;
  bool has_channeltype() const;
  private:
  bool _internal_has_channeltype() const;
  public:
  void clear_channeltype();
  ::PROTOBUF_NAMESPACE_ID::uint32 channeltype() const;
  void set_channeltype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channeltype() const;
  void _internal_set_channeltype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 showtype = 5;
  bool has_showtype() const;
  private:
  bool _internal_has_showtype() const;
  public:
  void clear_showtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 showtype() const;
  void set_showtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_showtype() const;
  void _internal_set_showtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 showchat = 6;
  bool has_showchat() const;
  private:
  bool _internal_has_showchat() const;
  public:
  void clear_showchat();
  ::PROTOBUF_NAMESPACE_ID::uint32 showchat() const;
  void set_showchat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_showchat() const;
  void _internal_set_showchat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 rightsys = 10;
  bool has_rightsys() const;
  private:
  bool _internal_has_rightsys() const;
  public:
  void clear_rightsys();
  ::PROTOBUF_NAMESPACE_ID::uint32 rightsys() const;
  void set_rightsys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rightsys() const;
  void _internal_set_rightsys(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 showtime = 11;
  bool has_showtime() const;
  private:
  bool _internal_has_showtime() const;
  public:
  void clear_showtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 showtime() const;
  void set_showtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_showtime() const;
  void _internal_set_showtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.textconfig.t_text_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channeltext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notice_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tips_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 texttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channeltype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 showtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 showchat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rightsys_;
  ::PROTOBUF_NAMESPACE_ID::uint32 showtime_;
  friend struct ::TableStruct_textconfig_2eproto;
};
// -------------------------------------------------------------------

class textconfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.textconfig) */ {
 public:
  textconfig();
  virtual ~textconfig();

  textconfig(const textconfig& from);
  textconfig(textconfig&& from) noexcept
    : textconfig() {
    *this = ::std::move(from);
  }

  inline textconfig& operator=(const textconfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline textconfig& operator=(textconfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const textconfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const textconfig* internal_default_instance() {
    return reinterpret_cast<const textconfig*>(
               &_textconfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(textconfig& a, textconfig& b) {
    a.Swap(&b);
  }
  inline void Swap(textconfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline textconfig* New() const final {
    return CreateMaybeMessage<textconfig>(nullptr);
  }

  textconfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<textconfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const textconfig& from);
  void MergeFrom(const textconfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(textconfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.textconfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_textconfig_2eproto);
    return ::descriptor_table_textconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef textconfig_t_text_config t_text_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.textconfig.t_text_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::textconfig_t_text_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::textconfig_t_text_config >*
      mutable_datas();
  private:
  const ::pb::textconfig_t_text_config& _internal_datas(int index) const;
  ::pb::textconfig_t_text_config* _internal_add_datas();
  public:
  const ::pb::textconfig_t_text_config& datas(int index) const;
  ::pb::textconfig_t_text_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::textconfig_t_text_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.textconfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::textconfig_t_text_config > datas_;
  friend struct ::TableStruct_textconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// textconfig_t_text_config

// required uint32 tbxid = 1 [default = 0];
inline bool textconfig_t_text_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void textconfig_t_text_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.tbxid)
  return _internal_tbxid();
}
inline void textconfig_t_text_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tbxid_ = value;
}
inline void textconfig_t_text_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool textconfig_t_text_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_id() const {
  return _internal_has_id();
}
inline void textconfig_t_text_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::id() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.id)
  return _internal_id();
}
inline void textconfig_t_text_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void textconfig_t_text_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.id)
}

// required uint32 texttype = 3;
inline bool textconfig_t_text_config::_internal_has_texttype() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_texttype() const {
  return _internal_has_texttype();
}
inline void textconfig_t_text_config::clear_texttype() {
  texttype_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::_internal_texttype() const {
  return texttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::texttype() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.texttype)
  return _internal_texttype();
}
inline void textconfig_t_text_config::_internal_set_texttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  texttype_ = value;
}
inline void textconfig_t_text_config::set_texttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_texttype(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.texttype)
}

// required uint32 channeltype = 4;
inline bool textconfig_t_text_config::_internal_has_channeltype() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_channeltype() const {
  return _internal_has_channeltype();
}
inline void textconfig_t_text_config::clear_channeltype() {
  channeltype_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::_internal_channeltype() const {
  return channeltype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::channeltype() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.channeltype)
  return _internal_channeltype();
}
inline void textconfig_t_text_config::_internal_set_channeltype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  channeltype_ = value;
}
inline void textconfig_t_text_config::set_channeltype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channeltype(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.channeltype)
}

// required uint32 showtype = 5;
inline bool textconfig_t_text_config::_internal_has_showtype() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_showtype() const {
  return _internal_has_showtype();
}
inline void textconfig_t_text_config::clear_showtype() {
  showtype_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::_internal_showtype() const {
  return showtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::showtype() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.showtype)
  return _internal_showtype();
}
inline void textconfig_t_text_config::_internal_set_showtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  showtype_ = value;
}
inline void textconfig_t_text_config::set_showtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_showtype(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.showtype)
}

// required uint32 showchat = 6;
inline bool textconfig_t_text_config::_internal_has_showchat() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_showchat() const {
  return _internal_has_showchat();
}
inline void textconfig_t_text_config::clear_showchat() {
  showchat_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::_internal_showchat() const {
  return showchat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::showchat() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.showchat)
  return _internal_showchat();
}
inline void textconfig_t_text_config::_internal_set_showchat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  showchat_ = value;
}
inline void textconfig_t_text_config::set_showchat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_showchat(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.showchat)
}

// required string channeltext = 7;
inline bool textconfig_t_text_config::_internal_has_channeltext() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_channeltext() const {
  return _internal_has_channeltext();
}
inline void textconfig_t_text_config::clear_channeltext() {
  channeltext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& textconfig_t_text_config::channeltext() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.channeltext)
  return _internal_channeltext();
}
inline void textconfig_t_text_config::set_channeltext(const std::string& value) {
  _internal_set_channeltext(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.channeltext)
}
inline std::string* textconfig_t_text_config::mutable_channeltext() {
  // @@protoc_insertion_point(field_mutable:pb.textconfig.t_text_config.channeltext)
  return _internal_mutable_channeltext();
}
inline const std::string& textconfig_t_text_config::_internal_channeltext() const {
  return channeltext_.GetNoArena();
}
inline void textconfig_t_text_config::_internal_set_channeltext(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  channeltext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void textconfig_t_text_config::set_channeltext(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  channeltext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.textconfig.t_text_config.channeltext)
}
inline void textconfig_t_text_config::set_channeltext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  channeltext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.textconfig.t_text_config.channeltext)
}
inline void textconfig_t_text_config::set_channeltext(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  channeltext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.textconfig.t_text_config.channeltext)
}
inline std::string* textconfig_t_text_config::_internal_mutable_channeltext() {
  _has_bits_[0] |= 0x00000001u;
  return channeltext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* textconfig_t_text_config::release_channeltext() {
  // @@protoc_insertion_point(field_release:pb.textconfig.t_text_config.channeltext)
  if (!_internal_has_channeltext()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return channeltext_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void textconfig_t_text_config::set_allocated_channeltext(std::string* channeltext) {
  if (channeltext != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  channeltext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channeltext);
  // @@protoc_insertion_point(field_set_allocated:pb.textconfig.t_text_config.channeltext)
}

// required string notice = 8;
inline bool textconfig_t_text_config::_internal_has_notice() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_notice() const {
  return _internal_has_notice();
}
inline void textconfig_t_text_config::clear_notice() {
  notice_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& textconfig_t_text_config::notice() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.notice)
  return _internal_notice();
}
inline void textconfig_t_text_config::set_notice(const std::string& value) {
  _internal_set_notice(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.notice)
}
inline std::string* textconfig_t_text_config::mutable_notice() {
  // @@protoc_insertion_point(field_mutable:pb.textconfig.t_text_config.notice)
  return _internal_mutable_notice();
}
inline const std::string& textconfig_t_text_config::_internal_notice() const {
  return notice_.GetNoArena();
}
inline void textconfig_t_text_config::_internal_set_notice(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  notice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void textconfig_t_text_config::set_notice(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  notice_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.textconfig.t_text_config.notice)
}
inline void textconfig_t_text_config::set_notice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  notice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.textconfig.t_text_config.notice)
}
inline void textconfig_t_text_config::set_notice(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  notice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.textconfig.t_text_config.notice)
}
inline std::string* textconfig_t_text_config::_internal_mutable_notice() {
  _has_bits_[0] |= 0x00000002u;
  return notice_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* textconfig_t_text_config::release_notice() {
  // @@protoc_insertion_point(field_release:pb.textconfig.t_text_config.notice)
  if (!_internal_has_notice()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return notice_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void textconfig_t_text_config::set_allocated_notice(std::string* notice) {
  if (notice != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  notice_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notice);
  // @@protoc_insertion_point(field_set_allocated:pb.textconfig.t_text_config.notice)
}

// required string tips = 9;
inline bool textconfig_t_text_config::_internal_has_tips() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_tips() const {
  return _internal_has_tips();
}
inline void textconfig_t_text_config::clear_tips() {
  tips_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& textconfig_t_text_config::tips() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.tips)
  return _internal_tips();
}
inline void textconfig_t_text_config::set_tips(const std::string& value) {
  _internal_set_tips(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.tips)
}
inline std::string* textconfig_t_text_config::mutable_tips() {
  // @@protoc_insertion_point(field_mutable:pb.textconfig.t_text_config.tips)
  return _internal_mutable_tips();
}
inline const std::string& textconfig_t_text_config::_internal_tips() const {
  return tips_.GetNoArena();
}
inline void textconfig_t_text_config::_internal_set_tips(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void textconfig_t_text_config::set_tips(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  tips_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.textconfig.t_text_config.tips)
}
inline void textconfig_t_text_config::set_tips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.textconfig.t_text_config.tips)
}
inline void textconfig_t_text_config::set_tips(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  tips_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.textconfig.t_text_config.tips)
}
inline std::string* textconfig_t_text_config::_internal_mutable_tips() {
  _has_bits_[0] |= 0x00000004u;
  return tips_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* textconfig_t_text_config::release_tips() {
  // @@protoc_insertion_point(field_release:pb.textconfig.t_text_config.tips)
  if (!_internal_has_tips()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return tips_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void textconfig_t_text_config::set_allocated_tips(std::string* tips) {
  if (tips != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tips_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tips);
  // @@protoc_insertion_point(field_set_allocated:pb.textconfig.t_text_config.tips)
}

// required uint32 rightsys = 10;
inline bool textconfig_t_text_config::_internal_has_rightsys() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_rightsys() const {
  return _internal_has_rightsys();
}
inline void textconfig_t_text_config::clear_rightsys() {
  rightsys_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::_internal_rightsys() const {
  return rightsys_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::rightsys() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.rightsys)
  return _internal_rightsys();
}
inline void textconfig_t_text_config::_internal_set_rightsys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  rightsys_ = value;
}
inline void textconfig_t_text_config::set_rightsys(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rightsys(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.rightsys)
}

// required uint32 showtime = 11;
inline bool textconfig_t_text_config::_internal_has_showtime() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool textconfig_t_text_config::has_showtime() const {
  return _internal_has_showtime();
}
inline void textconfig_t_text_config::clear_showtime() {
  showtime_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::_internal_showtime() const {
  return showtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 textconfig_t_text_config::showtime() const {
  // @@protoc_insertion_point(field_get:pb.textconfig.t_text_config.showtime)
  return _internal_showtime();
}
inline void textconfig_t_text_config::_internal_set_showtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  showtime_ = value;
}
inline void textconfig_t_text_config::set_showtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_showtime(value);
  // @@protoc_insertion_point(field_set:pb.textconfig.t_text_config.showtime)
}

// -------------------------------------------------------------------

// textconfig

// repeated .pb.textconfig.t_text_config datas = 1;
inline int textconfig::_internal_datas_size() const {
  return datas_.size();
}
inline int textconfig::datas_size() const {
  return _internal_datas_size();
}
inline void textconfig::clear_datas() {
  datas_.Clear();
}
inline ::pb::textconfig_t_text_config* textconfig::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.textconfig.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::textconfig_t_text_config >*
textconfig::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.textconfig.datas)
  return &datas_;
}
inline const ::pb::textconfig_t_text_config& textconfig::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::textconfig_t_text_config& textconfig::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.textconfig.datas)
  return _internal_datas(index);
}
inline ::pb::textconfig_t_text_config* textconfig::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::textconfig_t_text_config* textconfig::add_datas() {
  // @@protoc_insertion_point(field_add:pb.textconfig.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::textconfig_t_text_config >&
textconfig::datas() const {
  // @@protoc_insertion_point(field_list:pb.textconfig.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_textconfig_2eproto
