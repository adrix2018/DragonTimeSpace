// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attribute_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_attribute_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_attribute_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_attribute_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_attribute_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_attribute_5fconfig_2eproto;
namespace pb {
class attribute_config;
class attribute_configDefaultTypeInternal;
extern attribute_configDefaultTypeInternal _attribute_config_default_instance_;
class attribute_config_t_attribute_config;
class attribute_config_t_attribute_configDefaultTypeInternal;
extern attribute_config_t_attribute_configDefaultTypeInternal _attribute_config_t_attribute_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::attribute_config* Arena::CreateMaybeMessage<::pb::attribute_config>(Arena*);
template<> ::pb::attribute_config_t_attribute_config* Arena::CreateMaybeMessage<::pb::attribute_config_t_attribute_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class attribute_config_t_attribute_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.attribute_config.t_attribute_config) */ {
 public:
  attribute_config_t_attribute_config();
  virtual ~attribute_config_t_attribute_config();

  attribute_config_t_attribute_config(const attribute_config_t_attribute_config& from);
  attribute_config_t_attribute_config(attribute_config_t_attribute_config&& from) noexcept
    : attribute_config_t_attribute_config() {
    *this = ::std::move(from);
  }

  inline attribute_config_t_attribute_config& operator=(const attribute_config_t_attribute_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline attribute_config_t_attribute_config& operator=(attribute_config_t_attribute_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const attribute_config_t_attribute_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const attribute_config_t_attribute_config* internal_default_instance() {
    return reinterpret_cast<const attribute_config_t_attribute_config*>(
               &_attribute_config_t_attribute_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(attribute_config_t_attribute_config& a, attribute_config_t_attribute_config& b) {
    a.Swap(&b);
  }
  inline void Swap(attribute_config_t_attribute_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline attribute_config_t_attribute_config* New() const final {
    return CreateMaybeMessage<attribute_config_t_attribute_config>(nullptr);
  }

  attribute_config_t_attribute_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<attribute_config_t_attribute_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const attribute_config_t_attribute_config& from);
  void MergeFrom(const attribute_config_t_attribute_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(attribute_config_t_attribute_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.attribute_config.t_attribute_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_5fconfig_2eproto);
    return ::descriptor_table_attribute_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeFieldNumber = 3,
    kNameFieldNumber = 4,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kCuiFieldNumber = 5,
    kTypeFieldNumber = 6,
  };
  // required string attribute = 3;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const std::string& attribute() const;
  void set_attribute(const std::string& value);
  void set_attribute(std::string&& value);
  void set_attribute(const char* value);
  void set_attribute(const char* value, size_t size);
  std::string* mutable_attribute();
  std::string* release_attribute();
  void set_allocated_attribute(std::string* attribute);
  private:
  const std::string& _internal_attribute() const;
  void _internal_set_attribute(const std::string& value);
  std::string* _internal_mutable_attribute();
  public:

  // required string name = 4;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 cui = 5;
  bool has_cui() const;
  private:
  bool _internal_has_cui() const;
  public:
  void clear_cui();
  ::PROTOBUF_NAMESPACE_ID::uint32 cui() const;
  void set_cui(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cui() const;
  void _internal_set_cui(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.attribute_config.t_attribute_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cui_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_attribute_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class attribute_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.attribute_config) */ {
 public:
  attribute_config();
  virtual ~attribute_config();

  attribute_config(const attribute_config& from);
  attribute_config(attribute_config&& from) noexcept
    : attribute_config() {
    *this = ::std::move(from);
  }

  inline attribute_config& operator=(const attribute_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline attribute_config& operator=(attribute_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const attribute_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const attribute_config* internal_default_instance() {
    return reinterpret_cast<const attribute_config*>(
               &_attribute_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(attribute_config& a, attribute_config& b) {
    a.Swap(&b);
  }
  inline void Swap(attribute_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline attribute_config* New() const final {
    return CreateMaybeMessage<attribute_config>(nullptr);
  }

  attribute_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<attribute_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const attribute_config& from);
  void MergeFrom(const attribute_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(attribute_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.attribute_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_attribute_5fconfig_2eproto);
    return ::descriptor_table_attribute_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef attribute_config_t_attribute_config t_attribute_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.attribute_config.t_attribute_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::attribute_config_t_attribute_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::attribute_config_t_attribute_config >*
      mutable_datas();
  private:
  const ::pb::attribute_config_t_attribute_config& _internal_datas(int index) const;
  ::pb::attribute_config_t_attribute_config* _internal_add_datas();
  public:
  const ::pb::attribute_config_t_attribute_config& datas(int index) const;
  ::pb::attribute_config_t_attribute_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::attribute_config_t_attribute_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.attribute_config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::attribute_config_t_attribute_config > datas_;
  friend struct ::TableStruct_attribute_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// attribute_config_t_attribute_config

// required uint32 tbxid = 1 [default = 0];
inline bool attribute_config_t_attribute_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool attribute_config_t_attribute_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void attribute_config_t_attribute_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 attribute_config_t_attribute_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 attribute_config_t_attribute_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.attribute_config.t_attribute_config.tbxid)
  return _internal_tbxid();
}
inline void attribute_config_t_attribute_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tbxid_ = value;
}
inline void attribute_config_t_attribute_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.attribute_config.t_attribute_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool attribute_config_t_attribute_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool attribute_config_t_attribute_config::has_id() const {
  return _internal_has_id();
}
inline void attribute_config_t_attribute_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 attribute_config_t_attribute_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 attribute_config_t_attribute_config::id() const {
  // @@protoc_insertion_point(field_get:pb.attribute_config.t_attribute_config.id)
  return _internal_id();
}
inline void attribute_config_t_attribute_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void attribute_config_t_attribute_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.attribute_config.t_attribute_config.id)
}

// required string attribute = 3;
inline bool attribute_config_t_attribute_config::_internal_has_attribute() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool attribute_config_t_attribute_config::has_attribute() const {
  return _internal_has_attribute();
}
inline void attribute_config_t_attribute_config::clear_attribute() {
  attribute_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& attribute_config_t_attribute_config::attribute() const {
  // @@protoc_insertion_point(field_get:pb.attribute_config.t_attribute_config.attribute)
  return _internal_attribute();
}
inline void attribute_config_t_attribute_config::set_attribute(const std::string& value) {
  _internal_set_attribute(value);
  // @@protoc_insertion_point(field_set:pb.attribute_config.t_attribute_config.attribute)
}
inline std::string* attribute_config_t_attribute_config::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable:pb.attribute_config.t_attribute_config.attribute)
  return _internal_mutable_attribute();
}
inline const std::string& attribute_config_t_attribute_config::_internal_attribute() const {
  return attribute_.GetNoArena();
}
inline void attribute_config_t_attribute_config::_internal_set_attribute(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  attribute_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void attribute_config_t_attribute_config::set_attribute(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  attribute_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.attribute_config.t_attribute_config.attribute)
}
inline void attribute_config_t_attribute_config::set_attribute(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  attribute_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.attribute_config.t_attribute_config.attribute)
}
inline void attribute_config_t_attribute_config::set_attribute(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  attribute_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.attribute_config.t_attribute_config.attribute)
}
inline std::string* attribute_config_t_attribute_config::_internal_mutable_attribute() {
  _has_bits_[0] |= 0x00000001u;
  return attribute_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* attribute_config_t_attribute_config::release_attribute() {
  // @@protoc_insertion_point(field_release:pb.attribute_config.t_attribute_config.attribute)
  if (!_internal_has_attribute()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return attribute_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void attribute_config_t_attribute_config::set_allocated_attribute(std::string* attribute) {
  if (attribute != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  attribute_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attribute);
  // @@protoc_insertion_point(field_set_allocated:pb.attribute_config.t_attribute_config.attribute)
}

// required string name = 4;
inline bool attribute_config_t_attribute_config::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool attribute_config_t_attribute_config::has_name() const {
  return _internal_has_name();
}
inline void attribute_config_t_attribute_config::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& attribute_config_t_attribute_config::name() const {
  // @@protoc_insertion_point(field_get:pb.attribute_config.t_attribute_config.name)
  return _internal_name();
}
inline void attribute_config_t_attribute_config::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.attribute_config.t_attribute_config.name)
}
inline std::string* attribute_config_t_attribute_config::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.attribute_config.t_attribute_config.name)
  return _internal_mutable_name();
}
inline const std::string& attribute_config_t_attribute_config::_internal_name() const {
  return name_.GetNoArena();
}
inline void attribute_config_t_attribute_config::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void attribute_config_t_attribute_config::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.attribute_config.t_attribute_config.name)
}
inline void attribute_config_t_attribute_config::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.attribute_config.t_attribute_config.name)
}
inline void attribute_config_t_attribute_config::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.attribute_config.t_attribute_config.name)
}
inline std::string* attribute_config_t_attribute_config::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* attribute_config_t_attribute_config::release_name() {
  // @@protoc_insertion_point(field_release:pb.attribute_config.t_attribute_config.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void attribute_config_t_attribute_config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.attribute_config.t_attribute_config.name)
}

// required uint32 cui = 5;
inline bool attribute_config_t_attribute_config::_internal_has_cui() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool attribute_config_t_attribute_config::has_cui() const {
  return _internal_has_cui();
}
inline void attribute_config_t_attribute_config::clear_cui() {
  cui_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 attribute_config_t_attribute_config::_internal_cui() const {
  return cui_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 attribute_config_t_attribute_config::cui() const {
  // @@protoc_insertion_point(field_get:pb.attribute_config.t_attribute_config.cui)
  return _internal_cui();
}
inline void attribute_config_t_attribute_config::_internal_set_cui(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  cui_ = value;
}
inline void attribute_config_t_attribute_config::set_cui(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cui(value);
  // @@protoc_insertion_point(field_set:pb.attribute_config.t_attribute_config.cui)
}

// required uint32 type = 6;
inline bool attribute_config_t_attribute_config::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool attribute_config_t_attribute_config::has_type() const {
  return _internal_has_type();
}
inline void attribute_config_t_attribute_config::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 attribute_config_t_attribute_config::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 attribute_config_t_attribute_config::type() const {
  // @@protoc_insertion_point(field_get:pb.attribute_config.t_attribute_config.type)
  return _internal_type();
}
inline void attribute_config_t_attribute_config::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void attribute_config_t_attribute_config::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.attribute_config.t_attribute_config.type)
}

// -------------------------------------------------------------------

// attribute_config

// repeated .pb.attribute_config.t_attribute_config datas = 1;
inline int attribute_config::_internal_datas_size() const {
  return datas_.size();
}
inline int attribute_config::datas_size() const {
  return _internal_datas_size();
}
inline void attribute_config::clear_datas() {
  datas_.Clear();
}
inline ::pb::attribute_config_t_attribute_config* attribute_config::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.attribute_config.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::attribute_config_t_attribute_config >*
attribute_config::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.attribute_config.datas)
  return &datas_;
}
inline const ::pb::attribute_config_t_attribute_config& attribute_config::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::attribute_config_t_attribute_config& attribute_config::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.attribute_config.datas)
  return _internal_datas(index);
}
inline ::pb::attribute_config_t_attribute_config* attribute_config::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::attribute_config_t_attribute_config* attribute_config::add_datas() {
  // @@protoc_insertion_point(field_add:pb.attribute_config.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::attribute_config_t_attribute_config >&
attribute_config::datas() const {
  // @@protoc_insertion_point(field_list:pb.attribute_config.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_attribute_5fconfig_2eproto
