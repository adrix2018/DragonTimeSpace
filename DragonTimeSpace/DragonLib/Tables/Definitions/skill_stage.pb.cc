// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill_stage.proto

#include "skill_stage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_skill_5fstage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_skill_stage_t_skill_stage_config_skill_5fstage_2eproto;
namespace pb {
class skill_stage_t_skill_stage_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<skill_stage_t_skill_stage_config> _instance;
} _skill_stage_t_skill_stage_config_default_instance_;
class skill_stageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<skill_stage> _instance;
} _skill_stage_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_skill_stage_skill_5fstage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_skill_stage_default_instance_;
    new (ptr) ::pb::skill_stage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::skill_stage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_skill_stage_skill_5fstage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_skill_stage_skill_5fstage_2eproto}, {
      &scc_info_skill_stage_t_skill_stage_config_skill_5fstage_2eproto.base,}};

static void InitDefaultsscc_info_skill_stage_t_skill_stage_config_skill_5fstage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_skill_stage_t_skill_stage_config_default_instance_;
    new (ptr) ::pb::skill_stage_t_skill_stage_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::skill_stage_t_skill_stage_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_skill_stage_t_skill_stage_config_skill_5fstage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_skill_stage_t_skill_stage_config_skill_5fstage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_skill_5fstage_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_skill_5fstage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_skill_5fstage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_skill_5fstage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, id_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, skillid_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, clipname_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, actionid_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, effectid_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, movedis_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, moveeffect_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, posetime_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, cancancelprefist_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, cancancelclosefist_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, movecancelclosefist_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, needfacetarget_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, sighttype_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, skillspeed_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, skillportrait_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, checkfail_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage_t_skill_stage_config, attackwarn_),
  6,
  7,
  8,
  0,
  9,
  10,
  1,
  2,
  11,
  12,
  13,
  14,
  15,
  3,
  16,
  4,
  17,
  5,
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::skill_stage, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, sizeof(::pb::skill_stage_t_skill_stage_config)},
  { 41, 47, sizeof(::pb::skill_stage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_skill_stage_t_skill_stage_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_skill_stage_default_instance_),
};

const char descriptor_table_protodef_skill_5fstage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021skill_stage.proto\022\002pb\"\312\003\n\013skill_stage\022"
  "3\n\005datas\030\001 \003(\0132$.pb.skill_stage.t_skill_"
  "stage_config\032\205\003\n\024t_skill_stage_config\022\020\n"
  "\005tbxid\030\001 \002(\004:\0010\022\r\n\002id\030\002 \002(\004:\0010\022\017\n\007skilli"
  "d\030\003 \002(\r\022\020\n\010ClipName\030\004 \002(\t\022\020\n\010ActionID\030\005 "
  "\002(\r\022\020\n\010EffectId\030\006 \002(\r\022\017\n\007MoveDis\030\007 \002(\t\022\022"
  "\n\nMoveeffect\030\010 \002(\t\022\020\n\010PoseTime\030\t \002(\002\022\030\n\020"
  "CanCancelPreFist\030\n \002(\010\022\032\n\022CanCancelClose"
  "Fist\030\013 \002(\010\022\033\n\023MoveCancelCloseFist\030\014 \002(\010\022"
  "\026\n\016NeedFaceTarget\030\r \002(\010\022\021\n\tSightType\030\016 \002"
  "(\t\022\022\n\nSkillSpeed\030\017 \002(\r\022\025\n\rSkillPortrait\030"
  "\020 \002(\t\022\021\n\tCheckfail\030\021 \002(\r\022\022\n\nAttackWarn\030\022"
  " \002(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_skill_5fstage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_skill_5fstage_2eproto_sccs[2] = {
  &scc_info_skill_stage_skill_5fstage_2eproto.base,
  &scc_info_skill_stage_t_skill_stage_config_skill_5fstage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_skill_5fstage_2eproto_once;
static bool descriptor_table_skill_5fstage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skill_5fstage_2eproto = {
  &descriptor_table_skill_5fstage_2eproto_initialized, descriptor_table_protodef_skill_5fstage_2eproto, "skill_stage.proto", 484,
  &descriptor_table_skill_5fstage_2eproto_once, descriptor_table_skill_5fstage_2eproto_sccs, descriptor_table_skill_5fstage_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_skill_5fstage_2eproto::offsets,
  file_level_metadata_skill_5fstage_2eproto, 2, file_level_enum_descriptors_skill_5fstage_2eproto, file_level_service_descriptors_skill_5fstage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_skill_5fstage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_skill_5fstage_2eproto)), true);
namespace pb {

// ===================================================================

void skill_stage_t_skill_stage_config::InitAsDefaultInstance() {
}
class skill_stage_t_skill_stage_config::_Internal {
 public:
  using HasBits = decltype(std::declval<skill_stage_t_skill_stage_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_skillid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_clipname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_actionid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_effectid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_movedis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_moveeffect(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_posetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cancancelprefist(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cancancelclosefist(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_movecancelclosefist(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_needfacetarget(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sighttype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skillspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_skillportrait(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_checkfail(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_attackwarn(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

skill_stage_t_skill_stage_config::skill_stage_t_skill_stage_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.skill_stage.t_skill_stage_config)
}
skill_stage_t_skill_stage_config::skill_stage_t_skill_stage_config(const skill_stage_t_skill_stage_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clipname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_clipname()) {
    clipname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clipname_);
  }
  movedis_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_movedis()) {
    movedis_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.movedis_);
  }
  moveeffect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_moveeffect()) {
    moveeffect_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.moveeffect_);
  }
  sighttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sighttype()) {
    sighttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sighttype_);
  }
  skillportrait_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_skillportrait()) {
    skillportrait_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skillportrait_);
  }
  attackwarn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_attackwarn()) {
    attackwarn_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attackwarn_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&checkfail_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(checkfail_));
  // @@protoc_insertion_point(copy_constructor:pb.skill_stage.t_skill_stage_config)
}

void skill_stage_t_skill_stage_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_skill_stage_t_skill_stage_config_skill_5fstage_2eproto.base);
  clipname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  movedis_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  moveeffect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sighttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skillportrait_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attackwarn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checkfail_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(checkfail_));
}

skill_stage_t_skill_stage_config::~skill_stage_t_skill_stage_config() {
  // @@protoc_insertion_point(destructor:pb.skill_stage.t_skill_stage_config)
  SharedDtor();
}

void skill_stage_t_skill_stage_config::SharedDtor() {
  clipname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  movedis_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  moveeffect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sighttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skillportrait_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attackwarn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void skill_stage_t_skill_stage_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const skill_stage_t_skill_stage_config& skill_stage_t_skill_stage_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_skill_stage_t_skill_stage_config_skill_5fstage_2eproto.base);
  return *internal_default_instance();
}


void skill_stage_t_skill_stage_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.skill_stage.t_skill_stage_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      clipname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      movedis_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      moveeffect_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      sighttype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      skillportrait_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      attackwarn_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&skillid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needfacetarget_) -
        reinterpret_cast<char*>(&skillid_)) + sizeof(needfacetarget_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&skillspeed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&checkfail_) -
        reinterpret_cast<char*>(&skillspeed_)) + sizeof(checkfail_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* skill_stage_t_skill_stage_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&has_bits);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 skillid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_skillid(&has_bits);
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ClipName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clipname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_stage.t_skill_stage_config.ClipName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 ActionID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_actionid(&has_bits);
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 EffectId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_effectid(&has_bits);
          effectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string MoveDis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_movedis();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_stage.t_skill_stage_config.MoveDis");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string Moveeffect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_moveeffect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_stage.t_skill_stage_config.Moveeffect");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float PoseTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_posetime(&has_bits);
          posetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool CanCancelPreFist = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cancancelprefist(&has_bits);
          cancancelprefist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool CanCancelCloseFist = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_cancancelclosefist(&has_bits);
          cancancelclosefist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool MoveCancelCloseFist = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_movecancelclosefist(&has_bits);
          movecancelclosefist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool NeedFaceTarget = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_needfacetarget(&has_bits);
          needfacetarget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SightType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_sighttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_stage.t_skill_stage_config.SightType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 SkillSpeed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_skillspeed(&has_bits);
          skillspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string SkillPortrait = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_skillportrait();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_stage.t_skill_stage_config.SkillPortrait");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 Checkfail = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_checkfail(&has_bits);
          checkfail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string AttackWarn = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_attackwarn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.skill_stage.t_skill_stage_config.AttackWarn");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* skill_stage_t_skill_stage_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.skill_stage.t_skill_stage_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint64 id = 2 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // required uint32 skillid = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skillid(), target);
  }

  // required string ClipName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_clipname().data(), static_cast<int>(this->_internal_clipname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_stage.t_skill_stage_config.ClipName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clipname(), target);
  }

  // required uint32 ActionID = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_actionid(), target);
  }

  // required uint32 EffectId = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_effectid(), target);
  }

  // required string MoveDis = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_movedis().data(), static_cast<int>(this->_internal_movedis().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_stage.t_skill_stage_config.MoveDis");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_movedis(), target);
  }

  // required string Moveeffect = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_moveeffect().data(), static_cast<int>(this->_internal_moveeffect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_stage.t_skill_stage_config.Moveeffect");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_moveeffect(), target);
  }

  // required float PoseTime = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_posetime(), target);
  }

  // required bool CanCancelPreFist = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_cancancelprefist(), target);
  }

  // required bool CanCancelCloseFist = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_cancancelclosefist(), target);
  }

  // required bool MoveCancelCloseFist = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_movecancelclosefist(), target);
  }

  // required bool NeedFaceTarget = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_needfacetarget(), target);
  }

  // required string SightType = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sighttype().data(), static_cast<int>(this->_internal_sighttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_stage.t_skill_stage_config.SightType");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_sighttype(), target);
  }

  // required uint32 SkillSpeed = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_skillspeed(), target);
  }

  // required string SkillPortrait = 16;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_skillportrait().data(), static_cast<int>(this->_internal_skillportrait().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_stage.t_skill_stage_config.SkillPortrait");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_skillportrait(), target);
  }

  // required uint32 Checkfail = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_checkfail(), target);
  }

  // required string AttackWarn = 18;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attackwarn().data(), static_cast<int>(this->_internal_attackwarn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.skill_stage.t_skill_stage_config.AttackWarn");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_attackwarn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.skill_stage.t_skill_stage_config)
  return target;
}

size_t skill_stage_t_skill_stage_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.skill_stage.t_skill_stage_config)
  size_t total_size = 0;

  if (_internal_has_clipname()) {
    // required string ClipName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clipname());
  }

  if (_internal_has_movedis()) {
    // required string MoveDis = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_movedis());
  }

  if (_internal_has_moveeffect()) {
    // required string Moveeffect = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_moveeffect());
  }

  if (_internal_has_sighttype()) {
    // required string SightType = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sighttype());
  }

  if (_internal_has_skillportrait()) {
    // required string SkillPortrait = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skillportrait());
  }

  if (_internal_has_attackwarn()) {
    // required string AttackWarn = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attackwarn());
  }

  if (_internal_has_tbxid()) {
    // required uint64 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint64 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (_internal_has_skillid()) {
    // required uint32 skillid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skillid());
  }

  if (_internal_has_actionid()) {
    // required uint32 ActionID = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_actionid());
  }

  if (_internal_has_effectid()) {
    // required uint32 EffectId = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_effectid());
  }

  if (_internal_has_posetime()) {
    // required float PoseTime = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_cancancelprefist()) {
    // required bool CanCancelPreFist = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_cancancelclosefist()) {
    // required bool CanCancelCloseFist = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_movecancelclosefist()) {
    // required bool MoveCancelCloseFist = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_needfacetarget()) {
    // required bool NeedFaceTarget = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_skillspeed()) {
    // required uint32 SkillSpeed = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skillspeed());
  }

  if (_internal_has_checkfail()) {
    // required uint32 Checkfail = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_checkfail());
  }

  return total_size;
}
size_t skill_stage_t_skill_stage_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.skill_stage.t_skill_stage_config)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0003ffff) ^ 0x0003ffff) == 0) {  // All required fields are present.
    // required string ClipName = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clipname());

    // required string MoveDis = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_movedis());

    // required string Moveeffect = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_moveeffect());

    // required string SightType = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sighttype());

    // required string SkillPortrait = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skillportrait());

    // required string AttackWarn = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attackwarn());

    // required uint64 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tbxid());

    // required uint64 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());

    // required uint32 skillid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skillid());

    // required uint32 ActionID = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_actionid());

    // required uint32 EffectId = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_effectid());

    // required float PoseTime = 9;
    total_size += 1 + 4;

    // required bool CanCancelPreFist = 10;
    total_size += 1 + 1;

    // required bool CanCancelCloseFist = 11;
    total_size += 1 + 1;

    // required bool MoveCancelCloseFist = 12;
    total_size += 1 + 1;

    // required bool NeedFaceTarget = 13;
    total_size += 1 + 1;

    // required uint32 SkillSpeed = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_skillspeed());

    // required uint32 Checkfail = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_checkfail());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void skill_stage_t_skill_stage_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.skill_stage.t_skill_stage_config)
  GOOGLE_DCHECK_NE(&from, this);
  const skill_stage_t_skill_stage_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<skill_stage_t_skill_stage_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.skill_stage.t_skill_stage_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.skill_stage.t_skill_stage_config)
    MergeFrom(*source);
  }
}

void skill_stage_t_skill_stage_config::MergeFrom(const skill_stage_t_skill_stage_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.skill_stage.t_skill_stage_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      clipname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clipname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      movedis_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.movedis_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      moveeffect_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.moveeffect_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      sighttype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sighttype_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      skillportrait_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skillportrait_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      attackwarn_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attackwarn_);
    }
    if (cached_has_bits & 0x00000040u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000200u) {
      actionid_ = from.actionid_;
    }
    if (cached_has_bits & 0x00000400u) {
      effectid_ = from.effectid_;
    }
    if (cached_has_bits & 0x00000800u) {
      posetime_ = from.posetime_;
    }
    if (cached_has_bits & 0x00001000u) {
      cancancelprefist_ = from.cancancelprefist_;
    }
    if (cached_has_bits & 0x00002000u) {
      cancancelclosefist_ = from.cancancelclosefist_;
    }
    if (cached_has_bits & 0x00004000u) {
      movecancelclosefist_ = from.movecancelclosefist_;
    }
    if (cached_has_bits & 0x00008000u) {
      needfacetarget_ = from.needfacetarget_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      skillspeed_ = from.skillspeed_;
    }
    if (cached_has_bits & 0x00020000u) {
      checkfail_ = from.checkfail_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void skill_stage_t_skill_stage_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.skill_stage.t_skill_stage_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_stage_t_skill_stage_config::CopyFrom(const skill_stage_t_skill_stage_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.skill_stage.t_skill_stage_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_stage_t_skill_stage_config::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;
  return true;
}

void skill_stage_t_skill_stage_config::InternalSwap(skill_stage_t_skill_stage_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  clipname_.Swap(&other->clipname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  movedis_.Swap(&other->movedis_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  moveeffect_.Swap(&other->moveeffect_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sighttype_.Swap(&other->sighttype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skillportrait_.Swap(&other->skillportrait_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attackwarn_.Swap(&other->attackwarn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(skillid_, other->skillid_);
  swap(actionid_, other->actionid_);
  swap(effectid_, other->effectid_);
  swap(posetime_, other->posetime_);
  swap(cancancelprefist_, other->cancancelprefist_);
  swap(cancancelclosefist_, other->cancancelclosefist_);
  swap(movecancelclosefist_, other->movecancelclosefist_);
  swap(needfacetarget_, other->needfacetarget_);
  swap(skillspeed_, other->skillspeed_);
  swap(checkfail_, other->checkfail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata skill_stage_t_skill_stage_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void skill_stage::InitAsDefaultInstance() {
}
class skill_stage::_Internal {
 public:
  using HasBits = decltype(std::declval<skill_stage>()._has_bits_);
};

skill_stage::skill_stage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.skill_stage)
}
skill_stage::skill_stage(const skill_stage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.skill_stage)
}

void skill_stage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_skill_stage_skill_5fstage_2eproto.base);
}

skill_stage::~skill_stage() {
  // @@protoc_insertion_point(destructor:pb.skill_stage)
  SharedDtor();
}

void skill_stage::SharedDtor() {
}

void skill_stage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const skill_stage& skill_stage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_skill_stage_skill_5fstage_2eproto.base);
  return *internal_default_instance();
}


void skill_stage::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.skill_stage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* skill_stage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.skill_stage.t_skill_stage_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* skill_stage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.skill_stage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.skill_stage.t_skill_stage_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.skill_stage)
  return target;
}

size_t skill_stage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.skill_stage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.skill_stage.t_skill_stage_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void skill_stage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.skill_stage)
  GOOGLE_DCHECK_NE(&from, this);
  const skill_stage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<skill_stage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.skill_stage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.skill_stage)
    MergeFrom(*source);
  }
}

void skill_stage::MergeFrom(const skill_stage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.skill_stage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void skill_stage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.skill_stage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skill_stage::CopyFrom(const skill_stage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.skill_stage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skill_stage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void skill_stage::InternalSwap(skill_stage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata skill_stage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::skill_stage_t_skill_stage_config* Arena::CreateMaybeMessage< ::pb::skill_stage_t_skill_stage_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::skill_stage_t_skill_stage_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::skill_stage* Arena::CreateMaybeMessage< ::pb::skill_stage >(Arena* arena) {
  return Arena::CreateInternal< ::pb::skill_stage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
