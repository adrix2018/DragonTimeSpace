// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avatar_config.proto

#include "avatar_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_avatar_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_avatar_config_t_avatar_config_avatar_5fconfig_2eproto;
namespace pb {
class avatar_config_t_avatar_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<avatar_config_t_avatar_config> _instance;
} _avatar_config_t_avatar_config_default_instance_;
class avatar_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<avatar_config> _instance;
} _avatar_config_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_avatar_config_avatar_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_avatar_config_default_instance_;
    new (ptr) ::pb::avatar_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::avatar_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_avatar_config_avatar_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_avatar_config_avatar_5fconfig_2eproto}, {
      &scc_info_avatar_config_t_avatar_config_avatar_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_avatar_config_t_avatar_config_avatar_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_avatar_config_t_avatar_config_default_instance_;
    new (ptr) ::pb::avatar_config_t_avatar_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::avatar_config_t_avatar_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_avatar_config_t_avatar_config_avatar_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_avatar_config_t_avatar_config_avatar_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_avatar_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_avatar_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_avatar_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_avatar_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, id_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, name_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, desc_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, unlockdesc_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, type_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, unlockitem_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, unlockevolution_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, icon_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, animatorcontroller_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, hair_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, head_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, body_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, effect_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, pdam_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, mdam_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, pdef_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, mdef_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, maxhp_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, bang_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, bangextradamage_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, toughness_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, toughnessreducedamage_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, block_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, blockreducedamage_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, penetrate_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, penetrateextradamage_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, accurate_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, accurateextradamage_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, hold_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, holdreducedamage_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, deflect_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, deflectreducedamage_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, hit_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config_t_avatar_config, miss_),
  6,
  7,
  0,
  1,
  2,
  8,
  9,
  10,
  3,
  4,
  11,
  12,
  13,
  5,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::avatar_config, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 40, sizeof(::pb::avatar_config_t_avatar_config)},
  { 75, 81, sizeof(::pb::avatar_config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_avatar_config_t_avatar_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_avatar_config_default_instance_),
};

const char descriptor_table_protodef_avatar_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023avatar_config.proto\022\002pb\"\340\005\n\ravatar_con"
  "fig\0220\n\005datas\030\001 \003(\0132!.pb.avatar_config.t_"
  "avatar_config\032\234\005\n\017t_avatar_config\022\020\n\005tbx"
  "id\030\001 \002(\r:\0010\022\r\n\002id\030\002 \002(\r:\0010\022\014\n\004name\030\003 \002(\t"
  "\022\014\n\004desc\030\004 \002(\t\022\022\n\nunlockdesc\030\005 \002(\t\022\014\n\004ty"
  "pe\030\006 \002(\r\022\022\n\nunlockitem\030\007 \002(\r\022\027\n\017unlockev"
  "olution\030\010 \002(\r\022\014\n\004icon\030\t \002(\t\022\032\n\022animatorc"
  "ontroller\030\n \002(\t\022\014\n\004hair\030\013 \002(\r\022\014\n\004head\030\014 "
  "\002(\r\022\014\n\004body\030\r \002(\r\022\016\n\006effect\030\016 \002(\t\022\014\n\004pda"
  "m\030\017 \002(\r\022\014\n\004mdam\030\020 \002(\r\022\014\n\004pdef\030\021 \002(\r\022\014\n\004m"
  "def\030\022 \002(\r\022\r\n\005maxhp\030\023 \002(\r\022\014\n\004bang\030\024 \002(\r\022\027"
  "\n\017bangextradamage\030\025 \002(\r\022\021\n\ttoughness\030\026 \002"
  "(\r\022\035\n\025toughnessreducedamage\030\027 \002(\r\022\r\n\005blo"
  "ck\030\030 \002(\r\022\031\n\021blockreducedamage\030\031 \002(\r\022\021\n\tp"
  "enetrate\030\032 \002(\r\022\034\n\024penetrateextradamage\030\033"
  " \002(\r\022\020\n\010accurate\030\034 \002(\r\022\033\n\023accurateextrad"
  "amage\030\035 \002(\r\022\014\n\004hold\030\036 \002(\r\022\030\n\020holdreduced"
  "amage\030\037 \002(\r\022\017\n\007deflect\030  \002(\r\022\033\n\023deflectr"
  "educedamage\030! \002(\r\022\013\n\003hit\030\" \002(\r\022\014\n\004miss\030#"
  " \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_avatar_5fconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_avatar_5fconfig_2eproto_sccs[2] = {
  &scc_info_avatar_config_avatar_5fconfig_2eproto.base,
  &scc_info_avatar_config_t_avatar_config_avatar_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_avatar_5fconfig_2eproto_once;
static bool descriptor_table_avatar_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avatar_5fconfig_2eproto = {
  &descriptor_table_avatar_5fconfig_2eproto_initialized, descriptor_table_protodef_avatar_5fconfig_2eproto, "avatar_config.proto", 764,
  &descriptor_table_avatar_5fconfig_2eproto_once, descriptor_table_avatar_5fconfig_2eproto_sccs, descriptor_table_avatar_5fconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_avatar_5fconfig_2eproto::offsets,
  file_level_metadata_avatar_5fconfig_2eproto, 2, file_level_enum_descriptors_avatar_5fconfig_2eproto, file_level_service_descriptors_avatar_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_avatar_5fconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_avatar_5fconfig_2eproto)), true);
namespace pb {

// ===================================================================

void avatar_config_t_avatar_config::InitAsDefaultInstance() {
}
class avatar_config_t_avatar_config::_Internal {
 public:
  using HasBits = decltype(std::declval<avatar_config_t_avatar_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unlockdesc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_unlockitem(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_unlockevolution(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_animatorcontroller(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hair(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_head(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_effect(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pdam(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mdam(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_pdef(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_mdef(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_bang(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_bangextradamage(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_toughness(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_toughnessreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_blockreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_penetrate(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_penetrateextradamage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_accurate(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_accurateextradamage(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_hold(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_holdreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_deflect(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_deflectreducedamage(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_hit(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_miss(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

avatar_config_t_avatar_config::avatar_config_t_avatar_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.avatar_config.t_avatar_config)
}
avatar_config_t_avatar_config::avatar_config_t_avatar_config(const avatar_config_t_avatar_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  unlockdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unlockdesc()) {
    unlockdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unlockdesc_);
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon()) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  animatorcontroller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_animatorcontroller()) {
    animatorcontroller_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.animatorcontroller_);
  }
  effect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_effect()) {
    effect_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effect_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&miss_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(miss_));
  // @@protoc_insertion_point(copy_constructor:pb.avatar_config.t_avatar_config)
}

void avatar_config_t_avatar_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_avatar_config_t_avatar_config_avatar_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unlockdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  animatorcontroller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miss_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(miss_));
}

avatar_config_t_avatar_config::~avatar_config_t_avatar_config() {
  // @@protoc_insertion_point(destructor:pb.avatar_config.t_avatar_config)
  SharedDtor();
}

void avatar_config_t_avatar_config::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unlockdesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  animatorcontroller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void avatar_config_t_avatar_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const avatar_config_t_avatar_config& avatar_config_t_avatar_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_avatar_config_t_avatar_config_avatar_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void avatar_config_t_avatar_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.avatar_config.t_avatar_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      unlockdesc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      icon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      animatorcontroller_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      effect_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mdam_) -
        reinterpret_cast<char*>(&type_)) + sizeof(mdam_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&pdef_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_) -
        reinterpret_cast<char*>(&pdef_)) + sizeof(block_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&blockreducedamage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deflect_) -
        reinterpret_cast<char*>(&blockreducedamage_)) + sizeof(deflect_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&deflectreducedamage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&miss_) -
        reinterpret_cast<char*>(&deflectreducedamage_)) + sizeof(miss_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* avatar_config_t_avatar_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&_has_bits_);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&_has_bits_);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.avatar_config.t_avatar_config.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.avatar_config.t_avatar_config.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string unlockdesc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_unlockdesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.avatar_config.t_avatar_config.unlockdesc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_type(&_has_bits_);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 unlockitem = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_unlockitem(&_has_bits_);
          unlockitem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 unlockevolution = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_unlockevolution(&_has_bits_);
          unlockevolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string icon = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.avatar_config.t_avatar_config.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string animatorcontroller = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_animatorcontroller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.avatar_config.t_avatar_config.animatorcontroller");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hair = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_hair(&_has_bits_);
          hair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 head = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_head(&_has_bits_);
          head_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 body = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_body(&_has_bits_);
          body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string effect = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_effect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.avatar_config.t_avatar_config.effect");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pdam = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_pdam(&_has_bits_);
          pdam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mdam = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_mdam(&_has_bits_);
          mdam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pdef = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_pdef(&_has_bits_);
          pdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mdef = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_mdef(&_has_bits_);
          mdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxhp = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_maxhp(&_has_bits_);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bang = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_bang(&_has_bits_);
          bang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bangextradamage = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_bangextradamage(&_has_bits_);
          bangextradamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 toughness = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_toughness(&_has_bits_);
          toughness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 toughnessreducedamage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_toughnessreducedamage(&_has_bits_);
          toughnessreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 block = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_block(&_has_bits_);
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 blockreducedamage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_blockreducedamage(&_has_bits_);
          blockreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 penetrate = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_penetrate(&_has_bits_);
          penetrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 penetrateextradamage = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_penetrateextradamage(&_has_bits_);
          penetrateextradamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 accurate = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_accurate(&_has_bits_);
          accurate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 accurateextradamage = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_accurateextradamage(&_has_bits_);
          accurateextradamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hold = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_hold(&_has_bits_);
          hold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 holdreducedamage = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_holdreducedamage(&_has_bits_);
          holdreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deflect = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_deflect(&_has_bits_);
          deflect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deflectreducedamage = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_deflectreducedamage(&_has_bits_);
          deflectreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hit = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hit(&_has_bits_);
          hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 miss = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_miss(&_has_bits_);
          miss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* avatar_config_t_avatar_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.avatar_config.t_avatar_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.avatar_config.t_avatar_config.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // required string desc = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.avatar_config.t_avatar_config.desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc(), target);
  }

  // required string unlockdesc = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unlockdesc().data(), static_cast<int>(this->_internal_unlockdesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.avatar_config.t_avatar_config.unlockdesc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_unlockdesc(), target);
  }

  // required uint32 type = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_type(), target);
  }

  // required uint32 unlockitem = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_unlockitem(), target);
  }

  // required uint32 unlockevolution = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_unlockevolution(), target);
  }

  // required string icon = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.avatar_config.t_avatar_config.icon");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_icon(), target);
  }

  // required string animatorcontroller = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_animatorcontroller().data(), static_cast<int>(this->_internal_animatorcontroller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.avatar_config.t_avatar_config.animatorcontroller");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_animatorcontroller(), target);
  }

  // required uint32 hair = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_hair(), target);
  }

  // required uint32 head = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_head(), target);
  }

  // required uint32 body = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_body(), target);
  }

  // required string effect = 14;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_effect().data(), static_cast<int>(this->_internal_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.avatar_config.t_avatar_config.effect");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_effect(), target);
  }

  // required uint32 pdam = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_pdam(), target);
  }

  // required uint32 mdam = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_mdam(), target);
  }

  // required uint32 pdef = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_pdef(), target);
  }

  // required uint32 mdef = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_mdef(), target);
  }

  // required uint32 maxhp = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_maxhp(), target);
  }

  // required uint32 bang = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_bang(), target);
  }

  // required uint32 bangextradamage = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_bangextradamage(), target);
  }

  // required uint32 toughness = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_toughness(), target);
  }

  // required uint32 toughnessreducedamage = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_toughnessreducedamage(), target);
  }

  // required uint32 block = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_block(), target);
  }

  // required uint32 blockreducedamage = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_blockreducedamage(), target);
  }

  // required uint32 penetrate = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_penetrate(), target);
  }

  // required uint32 penetrateextradamage = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_penetrateextradamage(), target);
  }

  // required uint32 accurate = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_accurate(), target);
  }

  // required uint32 accurateextradamage = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_accurateextradamage(), target);
  }

  // required uint32 hold = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_hold(), target);
  }

  // required uint32 holdreducedamage = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_holdreducedamage(), target);
  }

  // required uint32 deflect = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_deflect(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 deflectreducedamage = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_deflectreducedamage(), target);
  }

  // required uint32 hit = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_hit(), target);
  }

  // required uint32 miss = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_miss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.avatar_config.t_avatar_config)
  return target;
}

size_t avatar_config_t_avatar_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.avatar_config.t_avatar_config)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_desc()) {
    // required string desc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  if (_internal_has_unlockdesc()) {
    // required string unlockdesc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unlockdesc());
  }

  if (_internal_has_icon()) {
    // required string icon = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  if (_internal_has_animatorcontroller()) {
    // required string animatorcontroller = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animatorcontroller());
  }

  if (_internal_has_effect()) {
    // required string effect = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effect());
  }

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_type()) {
    // required uint32 type = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_unlockitem()) {
    // required uint32 unlockitem = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unlockitem());
  }

  if (_internal_has_unlockevolution()) {
    // required uint32 unlockevolution = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unlockevolution());
  }

  if (_internal_has_hair()) {
    // required uint32 hair = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hair());
  }

  if (_internal_has_head()) {
    // required uint32 head = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_head());
  }

  if (_internal_has_body()) {
    // required uint32 body = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_body());
  }

  if (_internal_has_pdam()) {
    // required uint32 pdam = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdam());
  }

  if (_internal_has_mdam()) {
    // required uint32 mdam = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdam());
  }

  if (_internal_has_pdef()) {
    // required uint32 pdef = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdef());
  }

  if (_internal_has_mdef()) {
    // required uint32 mdef = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdef());
  }

  if (_internal_has_maxhp()) {
    // required uint32 maxhp = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxhp());
  }

  if (_internal_has_bang()) {
    // required uint32 bang = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bang());
  }

  if (_internal_has_bangextradamage()) {
    // required uint32 bangextradamage = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bangextradamage());
  }

  if (_internal_has_toughness()) {
    // required uint32 toughness = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_toughness());
  }

  if (_internal_has_toughnessreducedamage()) {
    // required uint32 toughnessreducedamage = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_toughnessreducedamage());
  }

  if (_internal_has_block()) {
    // required uint32 block = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block());
  }

  if (_internal_has_blockreducedamage()) {
    // required uint32 blockreducedamage = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blockreducedamage());
  }

  if (_internal_has_penetrate()) {
    // required uint32 penetrate = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_penetrate());
  }

  if (_internal_has_penetrateextradamage()) {
    // required uint32 penetrateextradamage = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_penetrateextradamage());
  }

  if (_internal_has_accurate()) {
    // required uint32 accurate = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accurate());
  }

  if (_internal_has_accurateextradamage()) {
    // required uint32 accurateextradamage = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accurateextradamage());
  }

  if (_internal_has_hold()) {
    // required uint32 hold = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hold());
  }

  if (_internal_has_holdreducedamage()) {
    // required uint32 holdreducedamage = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_holdreducedamage());
  }

  if (_internal_has_deflect()) {
    // required uint32 deflect = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deflect());
  }

  if (_internal_has_deflectreducedamage()) {
    // required uint32 deflectreducedamage = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deflectreducedamage());
  }

  if (_internal_has_hit()) {
    // required uint32 hit = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hit());
  }

  if (_internal_has_miss()) {
    // required uint32 miss = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_miss());
  }

  return total_size;
}
size_t avatar_config_t_avatar_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.avatar_config.t_avatar_config)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_has_bits_[1] & 0x00000007) ^ 0x00000007)) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string desc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());

    // required string unlockdesc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unlockdesc());

    // required string icon = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());

    // required string animatorcontroller = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animatorcontroller());

    // required string effect = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effect());

    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 type = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 unlockitem = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unlockitem());

    // required uint32 unlockevolution = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unlockevolution());

    // required uint32 hair = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hair());

    // required uint32 head = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_head());

    // required uint32 body = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_body());

    // required uint32 pdam = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdam());

    // required uint32 mdam = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdam());

    // required uint32 pdef = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdef());

    // required uint32 mdef = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdef());

    // required uint32 maxhp = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxhp());

    // required uint32 bang = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bang());

    // required uint32 bangextradamage = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bangextradamage());

    // required uint32 toughness = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_toughness());

    // required uint32 toughnessreducedamage = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_toughnessreducedamage());

    // required uint32 block = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block());

    // required uint32 blockreducedamage = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blockreducedamage());

    // required uint32 penetrate = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_penetrate());

    // required uint32 penetrateextradamage = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_penetrateextradamage());

    // required uint32 accurate = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accurate());

    // required uint32 accurateextradamage = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accurateextradamage());

    // required uint32 hold = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hold());

    // required uint32 holdreducedamage = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_holdreducedamage());

    // required uint32 deflect = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deflect());

    // required uint32 deflectreducedamage = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deflectreducedamage());

    // required uint32 hit = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hit());

    // required uint32 miss = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_miss());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void avatar_config_t_avatar_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.avatar_config.t_avatar_config)
  GOOGLE_DCHECK_NE(&from, this);
  const avatar_config_t_avatar_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<avatar_config_t_avatar_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.avatar_config.t_avatar_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.avatar_config.t_avatar_config)
    MergeFrom(*source);
  }
}

void avatar_config_t_avatar_config::MergeFrom(const avatar_config_t_avatar_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.avatar_config.t_avatar_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      unlockdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unlockdesc_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      animatorcontroller_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.animatorcontroller_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      effect_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effect_);
    }
    if (cached_has_bits & 0x00000040u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      unlockitem_ = from.unlockitem_;
    }
    if (cached_has_bits & 0x00000400u) {
      unlockevolution_ = from.unlockevolution_;
    }
    if (cached_has_bits & 0x00000800u) {
      hair_ = from.hair_;
    }
    if (cached_has_bits & 0x00001000u) {
      head_ = from.head_;
    }
    if (cached_has_bits & 0x00002000u) {
      body_ = from.body_;
    }
    if (cached_has_bits & 0x00004000u) {
      pdam_ = from.pdam_;
    }
    if (cached_has_bits & 0x00008000u) {
      mdam_ = from.mdam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      pdef_ = from.pdef_;
    }
    if (cached_has_bits & 0x00020000u) {
      mdef_ = from.mdef_;
    }
    if (cached_has_bits & 0x00040000u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00080000u) {
      bang_ = from.bang_;
    }
    if (cached_has_bits & 0x00100000u) {
      bangextradamage_ = from.bangextradamage_;
    }
    if (cached_has_bits & 0x00200000u) {
      toughness_ = from.toughness_;
    }
    if (cached_has_bits & 0x00400000u) {
      toughnessreducedamage_ = from.toughnessreducedamage_;
    }
    if (cached_has_bits & 0x00800000u) {
      block_ = from.block_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      blockreducedamage_ = from.blockreducedamage_;
    }
    if (cached_has_bits & 0x02000000u) {
      penetrate_ = from.penetrate_;
    }
    if (cached_has_bits & 0x04000000u) {
      penetrateextradamage_ = from.penetrateextradamage_;
    }
    if (cached_has_bits & 0x08000000u) {
      accurate_ = from.accurate_;
    }
    if (cached_has_bits & 0x10000000u) {
      accurateextradamage_ = from.accurateextradamage_;
    }
    if (cached_has_bits & 0x20000000u) {
      hold_ = from.hold_;
    }
    if (cached_has_bits & 0x40000000u) {
      holdreducedamage_ = from.holdreducedamage_;
    }
    if (cached_has_bits & 0x80000000u) {
      deflect_ = from.deflect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      deflectreducedamage_ = from.deflectreducedamage_;
    }
    if (cached_has_bits & 0x00000002u) {
      hit_ = from.hit_;
    }
    if (cached_has_bits & 0x00000004u) {
      miss_ = from.miss_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void avatar_config_t_avatar_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.avatar_config.t_avatar_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avatar_config_t_avatar_config::CopyFrom(const avatar_config_t_avatar_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.avatar_config.t_avatar_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avatar_config_t_avatar_config::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00000007) != 0x00000007) return false;
  return true;
}

void avatar_config_t_avatar_config::InternalSwap(avatar_config_t_avatar_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unlockdesc_.Swap(&other->unlockdesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  animatorcontroller_.Swap(&other->animatorcontroller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  effect_.Swap(&other->effect_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(unlockitem_, other->unlockitem_);
  swap(unlockevolution_, other->unlockevolution_);
  swap(hair_, other->hair_);
  swap(head_, other->head_);
  swap(body_, other->body_);
  swap(pdam_, other->pdam_);
  swap(mdam_, other->mdam_);
  swap(pdef_, other->pdef_);
  swap(mdef_, other->mdef_);
  swap(maxhp_, other->maxhp_);
  swap(bang_, other->bang_);
  swap(bangextradamage_, other->bangextradamage_);
  swap(toughness_, other->toughness_);
  swap(toughnessreducedamage_, other->toughnessreducedamage_);
  swap(block_, other->block_);
  swap(blockreducedamage_, other->blockreducedamage_);
  swap(penetrate_, other->penetrate_);
  swap(penetrateextradamage_, other->penetrateextradamage_);
  swap(accurate_, other->accurate_);
  swap(accurateextradamage_, other->accurateextradamage_);
  swap(hold_, other->hold_);
  swap(holdreducedamage_, other->holdreducedamage_);
  swap(deflect_, other->deflect_);
  swap(deflectreducedamage_, other->deflectreducedamage_);
  swap(hit_, other->hit_);
  swap(miss_, other->miss_);
}

::PROTOBUF_NAMESPACE_ID::Metadata avatar_config_t_avatar_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void avatar_config::InitAsDefaultInstance() {
}
class avatar_config::_Internal {
 public:
  using HasBits = decltype(std::declval<avatar_config>()._has_bits_);
};

avatar_config::avatar_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.avatar_config)
}
avatar_config::avatar_config(const avatar_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.avatar_config)
}

void avatar_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_avatar_config_avatar_5fconfig_2eproto.base);
}

avatar_config::~avatar_config() {
  // @@protoc_insertion_point(destructor:pb.avatar_config)
  SharedDtor();
}

void avatar_config::SharedDtor() {
}

void avatar_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const avatar_config& avatar_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_avatar_config_avatar_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void avatar_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.avatar_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* avatar_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.avatar_config.t_avatar_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* avatar_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.avatar_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.avatar_config.t_avatar_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.avatar_config)
  return target;
}

size_t avatar_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.avatar_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.avatar_config.t_avatar_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void avatar_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.avatar_config)
  GOOGLE_DCHECK_NE(&from, this);
  const avatar_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<avatar_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.avatar_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.avatar_config)
    MergeFrom(*source);
  }
}

void avatar_config::MergeFrom(const avatar_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.avatar_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void avatar_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.avatar_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avatar_config::CopyFrom(const avatar_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.avatar_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avatar_config::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void avatar_config::InternalSwap(avatar_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata avatar_config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::avatar_config_t_avatar_config* Arena::CreateMaybeMessage< ::pb::avatar_config_t_avatar_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::avatar_config_t_avatar_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::avatar_config* Arena::CreateMaybeMessage< ::pb::avatar_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::avatar_config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
