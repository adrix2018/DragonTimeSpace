// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_battle_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_battle_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_battle_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_battle_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battle_5fconfig_2eproto;
namespace pb {
class battle_config;
class battle_configDefaultTypeInternal;
extern battle_configDefaultTypeInternal _battle_config_default_instance_;
class battle_config_t_battle_config;
class battle_config_t_battle_configDefaultTypeInternal;
extern battle_config_t_battle_configDefaultTypeInternal _battle_config_t_battle_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::battle_config* Arena::CreateMaybeMessage<::pb::battle_config>(Arena*);
template<> ::pb::battle_config_t_battle_config* Arena::CreateMaybeMessage<::pb::battle_config_t_battle_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class battle_config_t_battle_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.battle_config.t_battle_config) */ {
 public:
  battle_config_t_battle_config();
  virtual ~battle_config_t_battle_config();

  battle_config_t_battle_config(const battle_config_t_battle_config& from);
  battle_config_t_battle_config(battle_config_t_battle_config&& from) noexcept
    : battle_config_t_battle_config() {
    *this = ::std::move(from);
  }

  inline battle_config_t_battle_config& operator=(const battle_config_t_battle_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline battle_config_t_battle_config& operator=(battle_config_t_battle_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const battle_config_t_battle_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const battle_config_t_battle_config* internal_default_instance() {
    return reinterpret_cast<const battle_config_t_battle_config*>(
               &_battle_config_t_battle_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(battle_config_t_battle_config& a, battle_config_t_battle_config& b) {
    a.Swap(&b);
  }
  inline void Swap(battle_config_t_battle_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline battle_config_t_battle_config* New() const final {
    return CreateMaybeMessage<battle_config_t_battle_config>(nullptr);
  }

  battle_config_t_battle_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<battle_config_t_battle_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const battle_config_t_battle_config& from);
  void MergeFrom(const battle_config_t_battle_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(battle_config_t_battle_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.battle_config.t_battle_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_5fconfig_2eproto);
    return ::descriptor_table_battle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kDescFieldNumber = 5,
    kWinRewardFieldNumber = 18,
    kLoseRewardFieldNumber = 19,
    kDailyRewardFieldNumber = 20,
    kDailyRewardDisplayFieldNumber = 21,
    kWinRewardDisplayFieldNumber = 22,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kCopymasteridFieldNumber = 4,
    kMatchinglevelFieldNumber = 6,
    kTeamdifferFieldNumber = 7,
    kUnilateralnumFieldNumber = 8,
    kExpandtimeFieldNumber = 9,
    kExpandlevelFieldNumber = 10,
    kExpanddegreeFieldNumber = 11,
    kEntertimeFieldNumber = 12,
    kReadytimeFieldNumber = 13,
    kModelscoreFieldNumber = 14,
    kCombattimeFieldNumber = 15,
    kEnabledFieldNumber = 16,
    kExtendvalueFieldNumber = 17,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string desc = 5;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // required string win_reward = 18;
  bool has_win_reward() const;
  private:
  bool _internal_has_win_reward() const;
  public:
  void clear_win_reward();
  const std::string& win_reward() const;
  void set_win_reward(const std::string& value);
  void set_win_reward(std::string&& value);
  void set_win_reward(const char* value);
  void set_win_reward(const char* value, size_t size);
  std::string* mutable_win_reward();
  std::string* release_win_reward();
  void set_allocated_win_reward(std::string* win_reward);
  private:
  const std::string& _internal_win_reward() const;
  void _internal_set_win_reward(const std::string& value);
  std::string* _internal_mutable_win_reward();
  public:

  // required string lose_reward = 19;
  bool has_lose_reward() const;
  private:
  bool _internal_has_lose_reward() const;
  public:
  void clear_lose_reward();
  const std::string& lose_reward() const;
  void set_lose_reward(const std::string& value);
  void set_lose_reward(std::string&& value);
  void set_lose_reward(const char* value);
  void set_lose_reward(const char* value, size_t size);
  std::string* mutable_lose_reward();
  std::string* release_lose_reward();
  void set_allocated_lose_reward(std::string* lose_reward);
  private:
  const std::string& _internal_lose_reward() const;
  void _internal_set_lose_reward(const std::string& value);
  std::string* _internal_mutable_lose_reward();
  public:

  // required string daily_reward = 20;
  bool has_daily_reward() const;
  private:
  bool _internal_has_daily_reward() const;
  public:
  void clear_daily_reward();
  const std::string& daily_reward() const;
  void set_daily_reward(const std::string& value);
  void set_daily_reward(std::string&& value);
  void set_daily_reward(const char* value);
  void set_daily_reward(const char* value, size_t size);
  std::string* mutable_daily_reward();
  std::string* release_daily_reward();
  void set_allocated_daily_reward(std::string* daily_reward);
  private:
  const std::string& _internal_daily_reward() const;
  void _internal_set_daily_reward(const std::string& value);
  std::string* _internal_mutable_daily_reward();
  public:

  // required string daily_reward_display = 21;
  bool has_daily_reward_display() const;
  private:
  bool _internal_has_daily_reward_display() const;
  public:
  void clear_daily_reward_display();
  const std::string& daily_reward_display() const;
  void set_daily_reward_display(const std::string& value);
  void set_daily_reward_display(std::string&& value);
  void set_daily_reward_display(const char* value);
  void set_daily_reward_display(const char* value, size_t size);
  std::string* mutable_daily_reward_display();
  std::string* release_daily_reward_display();
  void set_allocated_daily_reward_display(std::string* daily_reward_display);
  private:
  const std::string& _internal_daily_reward_display() const;
  void _internal_set_daily_reward_display(const std::string& value);
  std::string* _internal_mutable_daily_reward_display();
  public:

  // required string win_reward_display = 22;
  bool has_win_reward_display() const;
  private:
  bool _internal_has_win_reward_display() const;
  public:
  void clear_win_reward_display();
  const std::string& win_reward_display() const;
  void set_win_reward_display(const std::string& value);
  void set_win_reward_display(std::string&& value);
  void set_win_reward_display(const char* value);
  void set_win_reward_display(const char* value, size_t size);
  std::string* mutable_win_reward_display();
  std::string* release_win_reward_display();
  void set_allocated_win_reward_display(std::string* win_reward_display);
  private:
  const std::string& _internal_win_reward_display() const;
  void _internal_set_win_reward_display(const std::string& value);
  std::string* _internal_mutable_win_reward_display();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 copymasterid = 4;
  bool has_copymasterid() const;
  private:
  bool _internal_has_copymasterid() const;
  public:
  void clear_copymasterid();
  ::PROTOBUF_NAMESPACE_ID::uint32 copymasterid() const;
  void set_copymasterid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_copymasterid() const;
  void _internal_set_copymasterid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 matchinglevel = 6;
  bool has_matchinglevel() const;
  private:
  bool _internal_has_matchinglevel() const;
  public:
  void clear_matchinglevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 matchinglevel() const;
  void set_matchinglevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matchinglevel() const;
  void _internal_set_matchinglevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 teamdiffer = 7;
  bool has_teamdiffer() const;
  private:
  bool _internal_has_teamdiffer() const;
  public:
  void clear_teamdiffer();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamdiffer() const;
  void set_teamdiffer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamdiffer() const;
  void _internal_set_teamdiffer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 unilateralnum = 8;
  bool has_unilateralnum() const;
  private:
  bool _internal_has_unilateralnum() const;
  public:
  void clear_unilateralnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 unilateralnum() const;
  void set_unilateralnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unilateralnum() const;
  void _internal_set_unilateralnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 expandtime = 9;
  bool has_expandtime() const;
  private:
  bool _internal_has_expandtime() const;
  public:
  void clear_expandtime();
  ::PROTOBUF_NAMESPACE_ID::int32 expandtime() const;
  void set_expandtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expandtime() const;
  void _internal_set_expandtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 expandlevel = 10;
  bool has_expandlevel() const;
  private:
  bool _internal_has_expandlevel() const;
  public:
  void clear_expandlevel();
  ::PROTOBUF_NAMESPACE_ID::int32 expandlevel() const;
  void set_expandlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expandlevel() const;
  void _internal_set_expandlevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 expanddegree = 11;
  bool has_expanddegree() const;
  private:
  bool _internal_has_expanddegree() const;
  public:
  void clear_expanddegree();
  ::PROTOBUF_NAMESPACE_ID::int32 expanddegree() const;
  void set_expanddegree(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expanddegree() const;
  void _internal_set_expanddegree(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 entertime = 12;
  bool has_entertime() const;
  private:
  bool _internal_has_entertime() const;
  public:
  void clear_entertime();
  ::PROTOBUF_NAMESPACE_ID::int32 entertime() const;
  void set_entertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_entertime() const;
  void _internal_set_entertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 readytime = 13;
  bool has_readytime() const;
  private:
  bool _internal_has_readytime() const;
  public:
  void clear_readytime();
  ::PROTOBUF_NAMESPACE_ID::int32 readytime() const;
  void set_readytime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_readytime() const;
  void _internal_set_readytime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 modelscore = 14;
  bool has_modelscore() const;
  private:
  bool _internal_has_modelscore() const;
  public:
  void clear_modelscore();
  ::PROTOBUF_NAMESPACE_ID::int32 modelscore() const;
  void set_modelscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modelscore() const;
  void _internal_set_modelscore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 combattime = 15;
  bool has_combattime() const;
  private:
  bool _internal_has_combattime() const;
  public:
  void clear_combattime();
  ::PROTOBUF_NAMESPACE_ID::int32 combattime() const;
  void set_combattime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_combattime() const;
  void _internal_set_combattime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 enabled = 16;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  ::PROTOBUF_NAMESPACE_ID::int32 enabled() const;
  void set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enabled() const;
  void _internal_set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 extendvalue = 17;
  bool has_extendvalue() const;
  private:
  bool _internal_has_extendvalue() const;
  public:
  void clear_extendvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 extendvalue() const;
  void set_extendvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extendvalue() const;
  void _internal_set_extendvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.battle_config.t_battle_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr win_reward_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lose_reward_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr daily_reward_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr daily_reward_display_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr win_reward_display_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 copymasterid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matchinglevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamdiffer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unilateralnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 expandtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 expandlevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 expanddegree_;
  ::PROTOBUF_NAMESPACE_ID::int32 entertime_;
  ::PROTOBUF_NAMESPACE_ID::int32 readytime_;
  ::PROTOBUF_NAMESPACE_ID::int32 modelscore_;
  ::PROTOBUF_NAMESPACE_ID::int32 combattime_;
  ::PROTOBUF_NAMESPACE_ID::int32 enabled_;
  ::PROTOBUF_NAMESPACE_ID::int32 extendvalue_;
  friend struct ::TableStruct_battle_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class battle_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.battle_config) */ {
 public:
  battle_config();
  virtual ~battle_config();

  battle_config(const battle_config& from);
  battle_config(battle_config&& from) noexcept
    : battle_config() {
    *this = ::std::move(from);
  }

  inline battle_config& operator=(const battle_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline battle_config& operator=(battle_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const battle_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const battle_config* internal_default_instance() {
    return reinterpret_cast<const battle_config*>(
               &_battle_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(battle_config& a, battle_config& b) {
    a.Swap(&b);
  }
  inline void Swap(battle_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline battle_config* New() const final {
    return CreateMaybeMessage<battle_config>(nullptr);
  }

  battle_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<battle_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const battle_config& from);
  void MergeFrom(const battle_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(battle_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.battle_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battle_5fconfig_2eproto);
    return ::descriptor_table_battle_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef battle_config_t_battle_config t_battle_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.battle_config.t_battle_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::battle_config_t_battle_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::battle_config_t_battle_config >*
      mutable_datas();
  private:
  const ::pb::battle_config_t_battle_config& _internal_datas(int index) const;
  ::pb::battle_config_t_battle_config* _internal_add_datas();
  public:
  const ::pb::battle_config_t_battle_config& datas(int index) const;
  ::pb::battle_config_t_battle_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::battle_config_t_battle_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.battle_config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::battle_config_t_battle_config > datas_;
  friend struct ::TableStruct_battle_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// battle_config_t_battle_config

// required uint32 tbxid = 1 [default = 0];
inline bool battle_config_t_battle_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void battle_config_t_battle_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.tbxid)
  return _internal_tbxid();
}
inline void battle_config_t_battle_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  tbxid_ = value;
}
inline void battle_config_t_battle_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool battle_config_t_battle_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_id() const {
  return _internal_has_id();
}
inline void battle_config_t_battle_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::id() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.id)
  return _internal_id();
}
inline void battle_config_t_battle_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  id_ = value;
}
inline void battle_config_t_battle_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.id)
}

// required string name = 3;
inline bool battle_config_t_battle_config::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_name() const {
  return _internal_has_name();
}
inline void battle_config_t_battle_config::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& battle_config_t_battle_config::name() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.name)
  return _internal_name();
}
inline void battle_config_t_battle_config::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.name)
}
inline std::string* battle_config_t_battle_config::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.battle_config.t_battle_config.name)
  return _internal_mutable_name();
}
inline const std::string& battle_config_t_battle_config::_internal_name() const {
  return name_.GetNoArena();
}
inline void battle_config_t_battle_config::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void battle_config_t_battle_config::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.battle_config.t_battle_config.name)
}
inline void battle_config_t_battle_config::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.battle_config.t_battle_config.name)
}
inline void battle_config_t_battle_config::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.battle_config.t_battle_config.name)
}
inline std::string* battle_config_t_battle_config::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* battle_config_t_battle_config::release_name() {
  // @@protoc_insertion_point(field_release:pb.battle_config.t_battle_config.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void battle_config_t_battle_config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.battle_config.t_battle_config.name)
}

// required uint32 copymasterid = 4;
inline bool battle_config_t_battle_config::_internal_has_copymasterid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_copymasterid() const {
  return _internal_has_copymasterid();
}
inline void battle_config_t_battle_config::clear_copymasterid() {
  copymasterid_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::_internal_copymasterid() const {
  return copymasterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::copymasterid() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.copymasterid)
  return _internal_copymasterid();
}
inline void battle_config_t_battle_config::_internal_set_copymasterid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  copymasterid_ = value;
}
inline void battle_config_t_battle_config::set_copymasterid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_copymasterid(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.copymasterid)
}

// required string desc = 5;
inline bool battle_config_t_battle_config::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_desc() const {
  return _internal_has_desc();
}
inline void battle_config_t_battle_config::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& battle_config_t_battle_config::desc() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.desc)
  return _internal_desc();
}
inline void battle_config_t_battle_config::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.desc)
}
inline std::string* battle_config_t_battle_config::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:pb.battle_config.t_battle_config.desc)
  return _internal_mutable_desc();
}
inline const std::string& battle_config_t_battle_config::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void battle_config_t_battle_config::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void battle_config_t_battle_config::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.battle_config.t_battle_config.desc)
}
inline void battle_config_t_battle_config::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.battle_config.t_battle_config.desc)
}
inline void battle_config_t_battle_config::set_desc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.battle_config.t_battle_config.desc)
}
inline std::string* battle_config_t_battle_config::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000002u;
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* battle_config_t_battle_config::release_desc() {
  // @@protoc_insertion_point(field_release:pb.battle_config.t_battle_config.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return desc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void battle_config_t_battle_config::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.battle_config.t_battle_config.desc)
}

// required uint32 matchinglevel = 6;
inline bool battle_config_t_battle_config::_internal_has_matchinglevel() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_matchinglevel() const {
  return _internal_has_matchinglevel();
}
inline void battle_config_t_battle_config::clear_matchinglevel() {
  matchinglevel_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::_internal_matchinglevel() const {
  return matchinglevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::matchinglevel() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.matchinglevel)
  return _internal_matchinglevel();
}
inline void battle_config_t_battle_config::_internal_set_matchinglevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  matchinglevel_ = value;
}
inline void battle_config_t_battle_config::set_matchinglevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matchinglevel(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.matchinglevel)
}

// required uint32 teamdiffer = 7;
inline bool battle_config_t_battle_config::_internal_has_teamdiffer() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_teamdiffer() const {
  return _internal_has_teamdiffer();
}
inline void battle_config_t_battle_config::clear_teamdiffer() {
  teamdiffer_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::_internal_teamdiffer() const {
  return teamdiffer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::teamdiffer() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.teamdiffer)
  return _internal_teamdiffer();
}
inline void battle_config_t_battle_config::_internal_set_teamdiffer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  teamdiffer_ = value;
}
inline void battle_config_t_battle_config::set_teamdiffer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamdiffer(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.teamdiffer)
}

// required uint32 unilateralnum = 8;
inline bool battle_config_t_battle_config::_internal_has_unilateralnum() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_unilateralnum() const {
  return _internal_has_unilateralnum();
}
inline void battle_config_t_battle_config::clear_unilateralnum() {
  unilateralnum_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::_internal_unilateralnum() const {
  return unilateralnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 battle_config_t_battle_config::unilateralnum() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.unilateralnum)
  return _internal_unilateralnum();
}
inline void battle_config_t_battle_config::_internal_set_unilateralnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  unilateralnum_ = value;
}
inline void battle_config_t_battle_config::set_unilateralnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unilateralnum(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.unilateralnum)
}

// required int32 expandtime = 9;
inline bool battle_config_t_battle_config::_internal_has_expandtime() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_expandtime() const {
  return _internal_has_expandtime();
}
inline void battle_config_t_battle_config::clear_expandtime() {
  expandtime_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::_internal_expandtime() const {
  return expandtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::expandtime() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.expandtime)
  return _internal_expandtime();
}
inline void battle_config_t_battle_config::_internal_set_expandtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  expandtime_ = value;
}
inline void battle_config_t_battle_config::set_expandtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expandtime(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.expandtime)
}

// required int32 expandlevel = 10;
inline bool battle_config_t_battle_config::_internal_has_expandlevel() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_expandlevel() const {
  return _internal_has_expandlevel();
}
inline void battle_config_t_battle_config::clear_expandlevel() {
  expandlevel_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::_internal_expandlevel() const {
  return expandlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::expandlevel() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.expandlevel)
  return _internal_expandlevel();
}
inline void battle_config_t_battle_config::_internal_set_expandlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  expandlevel_ = value;
}
inline void battle_config_t_battle_config::set_expandlevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expandlevel(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.expandlevel)
}

// required int32 expanddegree = 11;
inline bool battle_config_t_battle_config::_internal_has_expanddegree() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_expanddegree() const {
  return _internal_has_expanddegree();
}
inline void battle_config_t_battle_config::clear_expanddegree() {
  expanddegree_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::_internal_expanddegree() const {
  return expanddegree_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::expanddegree() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.expanddegree)
  return _internal_expanddegree();
}
inline void battle_config_t_battle_config::_internal_set_expanddegree(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  expanddegree_ = value;
}
inline void battle_config_t_battle_config::set_expanddegree(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expanddegree(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.expanddegree)
}

// required int32 entertime = 12;
inline bool battle_config_t_battle_config::_internal_has_entertime() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_entertime() const {
  return _internal_has_entertime();
}
inline void battle_config_t_battle_config::clear_entertime() {
  entertime_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::_internal_entertime() const {
  return entertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::entertime() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.entertime)
  return _internal_entertime();
}
inline void battle_config_t_battle_config::_internal_set_entertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  entertime_ = value;
}
inline void battle_config_t_battle_config::set_entertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_entertime(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.entertime)
}

// required int32 readytime = 13;
inline bool battle_config_t_battle_config::_internal_has_readytime() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_readytime() const {
  return _internal_has_readytime();
}
inline void battle_config_t_battle_config::clear_readytime() {
  readytime_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::_internal_readytime() const {
  return readytime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::readytime() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.readytime)
  return _internal_readytime();
}
inline void battle_config_t_battle_config::_internal_set_readytime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  readytime_ = value;
}
inline void battle_config_t_battle_config::set_readytime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_readytime(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.readytime)
}

// required int32 modelscore = 14;
inline bool battle_config_t_battle_config::_internal_has_modelscore() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_modelscore() const {
  return _internal_has_modelscore();
}
inline void battle_config_t_battle_config::clear_modelscore() {
  modelscore_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::_internal_modelscore() const {
  return modelscore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::modelscore() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.modelscore)
  return _internal_modelscore();
}
inline void battle_config_t_battle_config::_internal_set_modelscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  modelscore_ = value;
}
inline void battle_config_t_battle_config::set_modelscore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modelscore(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.modelscore)
}

// required int32 combattime = 15;
inline bool battle_config_t_battle_config::_internal_has_combattime() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_combattime() const {
  return _internal_has_combattime();
}
inline void battle_config_t_battle_config::clear_combattime() {
  combattime_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::_internal_combattime() const {
  return combattime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::combattime() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.combattime)
  return _internal_combattime();
}
inline void battle_config_t_battle_config::_internal_set_combattime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  combattime_ = value;
}
inline void battle_config_t_battle_config::set_combattime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_combattime(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.combattime)
}

// required int32 enabled = 16;
inline bool battle_config_t_battle_config::_internal_has_enabled() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_enabled() const {
  return _internal_has_enabled();
}
inline void battle_config_t_battle_config::clear_enabled() {
  enabled_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::_internal_enabled() const {
  return enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::enabled() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.enabled)
  return _internal_enabled();
}
inline void battle_config_t_battle_config::_internal_set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  enabled_ = value;
}
inline void battle_config_t_battle_config::set_enabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.enabled)
}

// required int32 extendvalue = 17;
inline bool battle_config_t_battle_config::_internal_has_extendvalue() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_extendvalue() const {
  return _internal_has_extendvalue();
}
inline void battle_config_t_battle_config::clear_extendvalue() {
  extendvalue_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::_internal_extendvalue() const {
  return extendvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 battle_config_t_battle_config::extendvalue() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.extendvalue)
  return _internal_extendvalue();
}
inline void battle_config_t_battle_config::_internal_set_extendvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  extendvalue_ = value;
}
inline void battle_config_t_battle_config::set_extendvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extendvalue(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.extendvalue)
}

// required string win_reward = 18;
inline bool battle_config_t_battle_config::_internal_has_win_reward() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_win_reward() const {
  return _internal_has_win_reward();
}
inline void battle_config_t_battle_config::clear_win_reward() {
  win_reward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& battle_config_t_battle_config::win_reward() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.win_reward)
  return _internal_win_reward();
}
inline void battle_config_t_battle_config::set_win_reward(const std::string& value) {
  _internal_set_win_reward(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.win_reward)
}
inline std::string* battle_config_t_battle_config::mutable_win_reward() {
  // @@protoc_insertion_point(field_mutable:pb.battle_config.t_battle_config.win_reward)
  return _internal_mutable_win_reward();
}
inline const std::string& battle_config_t_battle_config::_internal_win_reward() const {
  return win_reward_.GetNoArena();
}
inline void battle_config_t_battle_config::_internal_set_win_reward(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  win_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void battle_config_t_battle_config::set_win_reward(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  win_reward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.battle_config.t_battle_config.win_reward)
}
inline void battle_config_t_battle_config::set_win_reward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  win_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.battle_config.t_battle_config.win_reward)
}
inline void battle_config_t_battle_config::set_win_reward(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  win_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.battle_config.t_battle_config.win_reward)
}
inline std::string* battle_config_t_battle_config::_internal_mutable_win_reward() {
  _has_bits_[0] |= 0x00000004u;
  return win_reward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* battle_config_t_battle_config::release_win_reward() {
  // @@protoc_insertion_point(field_release:pb.battle_config.t_battle_config.win_reward)
  if (!_internal_has_win_reward()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return win_reward_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void battle_config_t_battle_config::set_allocated_win_reward(std::string* win_reward) {
  if (win_reward != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  win_reward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), win_reward);
  // @@protoc_insertion_point(field_set_allocated:pb.battle_config.t_battle_config.win_reward)
}

// required string lose_reward = 19;
inline bool battle_config_t_battle_config::_internal_has_lose_reward() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_lose_reward() const {
  return _internal_has_lose_reward();
}
inline void battle_config_t_battle_config::clear_lose_reward() {
  lose_reward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& battle_config_t_battle_config::lose_reward() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.lose_reward)
  return _internal_lose_reward();
}
inline void battle_config_t_battle_config::set_lose_reward(const std::string& value) {
  _internal_set_lose_reward(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.lose_reward)
}
inline std::string* battle_config_t_battle_config::mutable_lose_reward() {
  // @@protoc_insertion_point(field_mutable:pb.battle_config.t_battle_config.lose_reward)
  return _internal_mutable_lose_reward();
}
inline const std::string& battle_config_t_battle_config::_internal_lose_reward() const {
  return lose_reward_.GetNoArena();
}
inline void battle_config_t_battle_config::_internal_set_lose_reward(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  lose_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void battle_config_t_battle_config::set_lose_reward(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  lose_reward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.battle_config.t_battle_config.lose_reward)
}
inline void battle_config_t_battle_config::set_lose_reward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  lose_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.battle_config.t_battle_config.lose_reward)
}
inline void battle_config_t_battle_config::set_lose_reward(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  lose_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.battle_config.t_battle_config.lose_reward)
}
inline std::string* battle_config_t_battle_config::_internal_mutable_lose_reward() {
  _has_bits_[0] |= 0x00000008u;
  return lose_reward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* battle_config_t_battle_config::release_lose_reward() {
  // @@protoc_insertion_point(field_release:pb.battle_config.t_battle_config.lose_reward)
  if (!_internal_has_lose_reward()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return lose_reward_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void battle_config_t_battle_config::set_allocated_lose_reward(std::string* lose_reward) {
  if (lose_reward != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lose_reward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lose_reward);
  // @@protoc_insertion_point(field_set_allocated:pb.battle_config.t_battle_config.lose_reward)
}

// required string daily_reward = 20;
inline bool battle_config_t_battle_config::_internal_has_daily_reward() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_daily_reward() const {
  return _internal_has_daily_reward();
}
inline void battle_config_t_battle_config::clear_daily_reward() {
  daily_reward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& battle_config_t_battle_config::daily_reward() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.daily_reward)
  return _internal_daily_reward();
}
inline void battle_config_t_battle_config::set_daily_reward(const std::string& value) {
  _internal_set_daily_reward(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.daily_reward)
}
inline std::string* battle_config_t_battle_config::mutable_daily_reward() {
  // @@protoc_insertion_point(field_mutable:pb.battle_config.t_battle_config.daily_reward)
  return _internal_mutable_daily_reward();
}
inline const std::string& battle_config_t_battle_config::_internal_daily_reward() const {
  return daily_reward_.GetNoArena();
}
inline void battle_config_t_battle_config::_internal_set_daily_reward(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  daily_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void battle_config_t_battle_config::set_daily_reward(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  daily_reward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.battle_config.t_battle_config.daily_reward)
}
inline void battle_config_t_battle_config::set_daily_reward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  daily_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.battle_config.t_battle_config.daily_reward)
}
inline void battle_config_t_battle_config::set_daily_reward(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  daily_reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.battle_config.t_battle_config.daily_reward)
}
inline std::string* battle_config_t_battle_config::_internal_mutable_daily_reward() {
  _has_bits_[0] |= 0x00000010u;
  return daily_reward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* battle_config_t_battle_config::release_daily_reward() {
  // @@protoc_insertion_point(field_release:pb.battle_config.t_battle_config.daily_reward)
  if (!_internal_has_daily_reward()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return daily_reward_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void battle_config_t_battle_config::set_allocated_daily_reward(std::string* daily_reward) {
  if (daily_reward != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  daily_reward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), daily_reward);
  // @@protoc_insertion_point(field_set_allocated:pb.battle_config.t_battle_config.daily_reward)
}

// required string daily_reward_display = 21;
inline bool battle_config_t_battle_config::_internal_has_daily_reward_display() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_daily_reward_display() const {
  return _internal_has_daily_reward_display();
}
inline void battle_config_t_battle_config::clear_daily_reward_display() {
  daily_reward_display_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& battle_config_t_battle_config::daily_reward_display() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.daily_reward_display)
  return _internal_daily_reward_display();
}
inline void battle_config_t_battle_config::set_daily_reward_display(const std::string& value) {
  _internal_set_daily_reward_display(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.daily_reward_display)
}
inline std::string* battle_config_t_battle_config::mutable_daily_reward_display() {
  // @@protoc_insertion_point(field_mutable:pb.battle_config.t_battle_config.daily_reward_display)
  return _internal_mutable_daily_reward_display();
}
inline const std::string& battle_config_t_battle_config::_internal_daily_reward_display() const {
  return daily_reward_display_.GetNoArena();
}
inline void battle_config_t_battle_config::_internal_set_daily_reward_display(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  daily_reward_display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void battle_config_t_battle_config::set_daily_reward_display(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  daily_reward_display_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.battle_config.t_battle_config.daily_reward_display)
}
inline void battle_config_t_battle_config::set_daily_reward_display(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  daily_reward_display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.battle_config.t_battle_config.daily_reward_display)
}
inline void battle_config_t_battle_config::set_daily_reward_display(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  daily_reward_display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.battle_config.t_battle_config.daily_reward_display)
}
inline std::string* battle_config_t_battle_config::_internal_mutable_daily_reward_display() {
  _has_bits_[0] |= 0x00000020u;
  return daily_reward_display_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* battle_config_t_battle_config::release_daily_reward_display() {
  // @@protoc_insertion_point(field_release:pb.battle_config.t_battle_config.daily_reward_display)
  if (!_internal_has_daily_reward_display()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return daily_reward_display_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void battle_config_t_battle_config::set_allocated_daily_reward_display(std::string* daily_reward_display) {
  if (daily_reward_display != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  daily_reward_display_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), daily_reward_display);
  // @@protoc_insertion_point(field_set_allocated:pb.battle_config.t_battle_config.daily_reward_display)
}

// required string win_reward_display = 22;
inline bool battle_config_t_battle_config::_internal_has_win_reward_display() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool battle_config_t_battle_config::has_win_reward_display() const {
  return _internal_has_win_reward_display();
}
inline void battle_config_t_battle_config::clear_win_reward_display() {
  win_reward_display_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& battle_config_t_battle_config::win_reward_display() const {
  // @@protoc_insertion_point(field_get:pb.battle_config.t_battle_config.win_reward_display)
  return _internal_win_reward_display();
}
inline void battle_config_t_battle_config::set_win_reward_display(const std::string& value) {
  _internal_set_win_reward_display(value);
  // @@protoc_insertion_point(field_set:pb.battle_config.t_battle_config.win_reward_display)
}
inline std::string* battle_config_t_battle_config::mutable_win_reward_display() {
  // @@protoc_insertion_point(field_mutable:pb.battle_config.t_battle_config.win_reward_display)
  return _internal_mutable_win_reward_display();
}
inline const std::string& battle_config_t_battle_config::_internal_win_reward_display() const {
  return win_reward_display_.GetNoArena();
}
inline void battle_config_t_battle_config::_internal_set_win_reward_display(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  win_reward_display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void battle_config_t_battle_config::set_win_reward_display(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  win_reward_display_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.battle_config.t_battle_config.win_reward_display)
}
inline void battle_config_t_battle_config::set_win_reward_display(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  win_reward_display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.battle_config.t_battle_config.win_reward_display)
}
inline void battle_config_t_battle_config::set_win_reward_display(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  win_reward_display_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.battle_config.t_battle_config.win_reward_display)
}
inline std::string* battle_config_t_battle_config::_internal_mutable_win_reward_display() {
  _has_bits_[0] |= 0x00000040u;
  return win_reward_display_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* battle_config_t_battle_config::release_win_reward_display() {
  // @@protoc_insertion_point(field_release:pb.battle_config.t_battle_config.win_reward_display)
  if (!_internal_has_win_reward_display()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return win_reward_display_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void battle_config_t_battle_config::set_allocated_win_reward_display(std::string* win_reward_display) {
  if (win_reward_display != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  win_reward_display_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), win_reward_display);
  // @@protoc_insertion_point(field_set_allocated:pb.battle_config.t_battle_config.win_reward_display)
}

// -------------------------------------------------------------------

// battle_config

// repeated .pb.battle_config.t_battle_config datas = 1;
inline int battle_config::_internal_datas_size() const {
  return datas_.size();
}
inline int battle_config::datas_size() const {
  return _internal_datas_size();
}
inline void battle_config::clear_datas() {
  datas_.Clear();
}
inline ::pb::battle_config_t_battle_config* battle_config::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.battle_config.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::battle_config_t_battle_config >*
battle_config::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.battle_config.datas)
  return &datas_;
}
inline const ::pb::battle_config_t_battle_config& battle_config::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::battle_config_t_battle_config& battle_config::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.battle_config.datas)
  return _internal_datas(index);
}
inline ::pb::battle_config_t_battle_config* battle_config::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::battle_config_t_battle_config* battle_config::add_datas() {
  // @@protoc_insertion_point(field_add:pb.battle_config.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::battle_config_t_battle_config >&
battle_config::datas() const {
  // @@protoc_insertion_point(field_list:pb.battle_config.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_battle_5fconfig_2eproto
