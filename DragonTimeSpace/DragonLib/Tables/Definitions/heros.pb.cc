// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: heros.proto

#include "heros.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_heros_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_heros_t_hero_config_heros_2eproto;
namespace pb {
class heros_t_hero_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<heros_t_hero_config> _instance;
} _heros_t_hero_config_default_instance_;
class herosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<heros> _instance;
} _heros_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_heros_heros_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_heros_default_instance_;
    new (ptr) ::pb::heros();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::heros::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_heros_heros_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_heros_heros_2eproto}, {
      &scc_info_heros_t_hero_config_heros_2eproto.base,}};

static void InitDefaultsscc_info_heros_t_hero_config_heros_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_heros_t_hero_config_default_instance_;
    new (ptr) ::pb::heros_t_hero_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::heros_t_hero_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_heros_t_hero_config_heros_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_heros_t_hero_config_heros_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_heros_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_heros_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_heros_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_heros_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, id_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, type_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, typeicon_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, desc_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, evolution_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, primecard_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, maxcard_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, activeskill_1_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, activeskill_2_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, activeskill_3_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, activeskill_4_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, normalskill_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, passiveskill_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, skill_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, repeatget_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, herochara_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, trick_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, modelact_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, maxhp_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, pdamage_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, mdamage_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, pdefence_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, mdefence_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, bang_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, toughness_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, block_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, penetrate_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, hit_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, miss_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, getherodesc_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, getheropathway_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, fetters_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, recommandprice_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, addmpcfg_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, maxstar_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, heroname_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, isshow_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, accurate_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, deflect_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, avatar_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, newavatar_),
  PROTOBUF_FIELD_OFFSET(::pb::heros_t_hero_config, exskill_),
  16,
  17,
  18,
  0,
  1,
  2,
  3,
  4,
  19,
  20,
  21,
  22,
  23,
  24,
  5,
  6,
  7,
  8,
  9,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  10,
  36,
  11,
  12,
  37,
  38,
  13,
  39,
  40,
  41,
  14,
  42,
  15,
  PROTOBUF_FIELD_OFFSET(::pb::heros, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::heros, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::heros, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 48, sizeof(::pb::heros_t_hero_config)},
  { 91, 97, sizeof(::pb::heros)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_heros_t_hero_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_heros_default_instance_),
};

const char descriptor_table_protodef_heros_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013heros.proto\022\002pb\"\311\006\n\005heros\022&\n\005datas\030\001 \003"
  "(\0132\027.pb.heros.t_hero_config\032\227\006\n\rt_hero_c"
  "onfig\022\020\n\005tbxid\030\001 \002(\r:\0010\022\r\n\002id\030\002 \002(\r:\0010\022\014"
  "\n\004type\030\003 \002(\r\022\020\n\010typeicon\030\004 \002(\t\022\014\n\004desc\030\005"
  " \002(\t\022\021\n\tevolution\030\006 \002(\t\022\021\n\tprimecard\030\007 \002"
  "(\t\022\017\n\007maxcard\030\010 \002(\t\022\025\n\ractiveskill_1\030\t \002"
  "(\r\022\025\n\ractiveskill_2\030\n \002(\r\022\025\n\ractiveskill"
  "_3\030\013 \002(\r\022\025\n\ractiveskill_4\030\014 \002(\r\022\023\n\013norma"
  "lskill\030\r \002(\r\022\024\n\014passiveskill\030\016 \002(\r\022\r\n\005sk"
  "ill\030\017 \002(\t\022\021\n\trepeatget\030\020 \002(\t\022\021\n\therochar"
  "a\030\021 \002(\t\022\r\n\005trick\030\022 \002(\t\022\020\n\010modelact\030\023 \002(\t"
  "\022\r\n\005maxhp\030\024 \002(\r\022\017\n\007pdamage\030\025 \002(\r\022\017\n\007mdam"
  "age\030\026 \002(\r\022\020\n\010pdefence\030\027 \002(\r\022\020\n\010mdefence\030"
  "\030 \002(\r\022\014\n\004bang\030\031 \002(\r\022\021\n\ttoughness\030\032 \002(\r\022\r"
  "\n\005block\030\033 \002(\r\022\021\n\tpenetrate\030\034 \002(\r\022\013\n\003hit\030"
  "\035 \002(\r\022\014\n\004miss\030\036 \002(\r\022\023\n\013getherodesc\030\037 \002(\t"
  "\022\026\n\016getheropathway\030  \002(\r\022\017\n\007fetters\030! \002("
  "\t\022\026\n\016recommandprice\030\" \002(\t\022\020\n\010addmpcfg\030# "
  "\002(\r\022\017\n\007maxstar\030$ \002(\r\022\020\n\010heroname\030% \002(\t\022\016"
  "\n\006isshow\030& \002(\r\022\020\n\010accurate\030\' \002(\r\022\017\n\007defl"
  "ect\030( \002(\r\022\016\n\006avatar\030) \002(\t\022\021\n\tnewavatar\030*"
  " \002(\r\022\017\n\007exskill\030+ \002(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_heros_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_heros_2eproto_sccs[2] = {
  &scc_info_heros_heros_2eproto.base,
  &scc_info_heros_t_hero_config_heros_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_heros_2eproto_once;
static bool descriptor_table_heros_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_heros_2eproto = {
  &descriptor_table_heros_2eproto_initialized, descriptor_table_protodef_heros_2eproto, "heros.proto", 861,
  &descriptor_table_heros_2eproto_once, descriptor_table_heros_2eproto_sccs, descriptor_table_heros_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_heros_2eproto::offsets,
  file_level_metadata_heros_2eproto, 2, file_level_enum_descriptors_heros_2eproto, file_level_service_descriptors_heros_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_heros_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_heros_2eproto)), true);
namespace pb {

// ===================================================================

void heros_t_hero_config::InitAsDefaultInstance() {
}
class heros_t_hero_config::_Internal {
 public:
  using HasBits = decltype(std::declval<heros_t_hero_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_typeicon(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_evolution(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_primecard(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxcard(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_activeskill_1(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_activeskill_2(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_activeskill_3(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_activeskill_4(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_normalskill(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_passiveskill(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_skill(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_repeatget(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_herochara(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trick(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_modelact(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pdamage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_mdamage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_pdefence(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_mdefence(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_bang(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_toughness(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_penetrate(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_hit(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_miss(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_getherodesc(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_getheropathway(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_fetters(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_recommandprice(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_addmpcfg(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_maxstar(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_heroname(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_isshow(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_accurate(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_deflect(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_newavatar(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_exskill(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

heros_t_hero_config::heros_t_hero_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.heros.t_hero_config)
}
heros_t_hero_config::heros_t_hero_config(const heros_t_hero_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  typeicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_typeicon()) {
    typeicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.typeicon_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  evolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_evolution()) {
    evolution_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.evolution_);
  }
  primecard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_primecard()) {
    primecard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primecard_);
  }
  maxcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_maxcard()) {
    maxcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maxcard_);
  }
  skill_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_skill()) {
    skill_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skill_);
  }
  repeatget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_repeatget()) {
    repeatget_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repeatget_);
  }
  herochara_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herochara()) {
    herochara_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herochara_);
  }
  trick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trick()) {
    trick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trick_);
  }
  modelact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modelact()) {
    modelact_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelact_);
  }
  getherodesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_getherodesc()) {
    getherodesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.getherodesc_);
  }
  fetters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_fetters()) {
    fetters_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fetters_);
  }
  recommandprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_recommandprice()) {
    recommandprice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recommandprice_);
  }
  heroname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_heroname()) {
    heroname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.heroname_);
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_avatar()) {
    avatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  exskill_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exskill()) {
    exskill_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exskill_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newavatar_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(newavatar_));
  // @@protoc_insertion_point(copy_constructor:pb.heros.t_hero_config)
}

void heros_t_hero_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_heros_t_hero_config_heros_2eproto.base);
  typeicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primecard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxcard_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skill_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repeatget_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  herochara_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelact_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  getherodesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fetters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recommandprice_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heroname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exskill_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newavatar_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(newavatar_));
}

heros_t_hero_config::~heros_t_hero_config() {
  // @@protoc_insertion_point(destructor:pb.heros.t_hero_config)
  SharedDtor();
}

void heros_t_hero_config::SharedDtor() {
  typeicon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  evolution_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primecard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxcard_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  skill_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  repeatget_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  herochara_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelact_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  getherodesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fetters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recommandprice_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heroname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exskill_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void heros_t_hero_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const heros_t_hero_config& heros_t_hero_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_heros_t_hero_config_heros_2eproto.base);
  return *internal_default_instance();
}


void heros_t_hero_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.heros.t_hero_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      typeicon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      evolution_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      primecard_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      maxcard_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      skill_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      repeatget_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      herochara_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      trick_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      modelact_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      getherodesc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      fetters_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      recommandprice_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      heroname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      avatar_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00008000u) {
      exskill_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&normalskill_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(normalskill_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&passiveskill_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&toughness_) -
        reinterpret_cast<char*>(&passiveskill_)) + sizeof(toughness_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&block_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isshow_) -
        reinterpret_cast<char*>(&block_)) + sizeof(isshow_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&accurate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newavatar_) -
        reinterpret_cast<char*>(&accurate_)) + sizeof(newavatar_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* heros_t_hero_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&_has_bits_);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&_has_bits_);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&_has_bits_);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string typeicon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_typeicon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.typeicon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string evolution = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_evolution();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.evolution");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string primecard = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_primecard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.primecard");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string maxcard = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_maxcard();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.maxcard");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 activeskill_1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_activeskill_1(&_has_bits_);
          activeskill_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 activeskill_2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_activeskill_2(&_has_bits_);
          activeskill_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 activeskill_3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_activeskill_3(&_has_bits_);
          activeskill_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 activeskill_4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_activeskill_4(&_has_bits_);
          activeskill_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 normalskill = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_normalskill(&_has_bits_);
          normalskill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 passiveskill = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_passiveskill(&_has_bits_);
          passiveskill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string skill = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_skill();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.skill");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string repeatget = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_repeatget();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.repeatget");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string herochara = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_herochara();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.herochara");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string trick = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_trick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.trick");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string modelact = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_modelact();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.modelact");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxhp = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_maxhp(&_has_bits_);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pdamage = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_pdamage(&_has_bits_);
          pdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mdamage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_mdamage(&_has_bits_);
          mdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pdefence = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_pdefence(&_has_bits_);
          pdefence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mdefence = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_mdefence(&_has_bits_);
          mdefence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bang = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_bang(&_has_bits_);
          bang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 toughness = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_toughness(&_has_bits_);
          toughness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 block = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_block(&_has_bits_);
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 penetrate = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_penetrate(&_has_bits_);
          penetrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hit = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_hit(&_has_bits_);
          hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 miss = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_miss(&_has_bits_);
          miss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string getherodesc = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_getherodesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.getherodesc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 getheropathway = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_getheropathway(&_has_bits_);
          getheropathway_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string fetters = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fetters();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.fetters");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string recommandprice = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_recommandprice();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.recommandprice");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 addmpcfg = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_addmpcfg(&_has_bits_);
          addmpcfg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxstar = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_maxstar(&_has_bits_);
          maxstar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string heroname = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_heroname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.heroname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 isshow = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_isshow(&_has_bits_);
          isshow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 accurate = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_accurate(&_has_bits_);
          accurate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deflect = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_deflect(&_has_bits_);
          deflect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string avatar = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.avatar");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 newavatar = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_newavatar(&_has_bits_);
          newavatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string exskill = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_exskill();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.heros.t_hero_config.exskill");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* heros_t_hero_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.heros.t_hero_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required uint32 type = 3;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // required string typeicon = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_typeicon().data(), static_cast<int>(this->_internal_typeicon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.typeicon");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_typeicon(), target);
  }

  // required string desc = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.desc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_desc(), target);
  }

  // required string evolution = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_evolution().data(), static_cast<int>(this->_internal_evolution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.evolution");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_evolution(), target);
  }

  // required string primecard = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_primecard().data(), static_cast<int>(this->_internal_primecard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.primecard");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_primecard(), target);
  }

  // required string maxcard = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_maxcard().data(), static_cast<int>(this->_internal_maxcard().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.maxcard");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_maxcard(), target);
  }

  // required uint32 activeskill_1 = 9;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_activeskill_1(), target);
  }

  // required uint32 activeskill_2 = 10;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_activeskill_2(), target);
  }

  // required uint32 activeskill_3 = 11;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_activeskill_3(), target);
  }

  // required uint32 activeskill_4 = 12;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_activeskill_4(), target);
  }

  // required uint32 normalskill = 13;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_normalskill(), target);
  }

  // required uint32 passiveskill = 14;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_passiveskill(), target);
  }

  // required string skill = 15;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_skill().data(), static_cast<int>(this->_internal_skill().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.skill");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_skill(), target);
  }

  // required string repeatget = 16;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_repeatget().data(), static_cast<int>(this->_internal_repeatget().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.repeatget");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_repeatget(), target);
  }

  // required string herochara = 17;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herochara().data(), static_cast<int>(this->_internal_herochara().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.herochara");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_herochara(), target);
  }

  // required string trick = 18;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trick().data(), static_cast<int>(this->_internal_trick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.trick");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_trick(), target);
  }

  // required string modelact = 19;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modelact().data(), static_cast<int>(this->_internal_modelact().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.modelact");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_modelact(), target);
  }

  // required uint32 maxhp = 20;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_maxhp(), target);
  }

  // required uint32 pdamage = 21;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_pdamage(), target);
  }

  // required uint32 mdamage = 22;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_mdamage(), target);
  }

  // required uint32 pdefence = 23;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_pdefence(), target);
  }

  // required uint32 mdefence = 24;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_mdefence(), target);
  }

  // required uint32 bang = 25;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_bang(), target);
  }

  // required uint32 toughness = 26;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_toughness(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 block = 27;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_block(), target);
  }

  // required uint32 penetrate = 28;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_penetrate(), target);
  }

  // required uint32 hit = 29;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_hit(), target);
  }

  // required uint32 miss = 30;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_miss(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string getherodesc = 31;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_getherodesc().data(), static_cast<int>(this->_internal_getherodesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.getherodesc");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_getherodesc(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 getheropathway = 32;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_getheropathway(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string fetters = 33;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_fetters().data(), static_cast<int>(this->_internal_fetters().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.fetters");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_fetters(), target);
  }

  // required string recommandprice = 34;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_recommandprice().data(), static_cast<int>(this->_internal_recommandprice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.recommandprice");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_recommandprice(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 addmpcfg = 35;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_addmpcfg(), target);
  }

  // required uint32 maxstar = 36;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_maxstar(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string heroname = 37;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_heroname().data(), static_cast<int>(this->_internal_heroname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.heroname");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_heroname(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 isshow = 38;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_isshow(), target);
  }

  // required uint32 accurate = 39;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_accurate(), target);
  }

  // required uint32 deflect = 40;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_deflect(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string avatar = 41;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_avatar().data(), static_cast<int>(this->_internal_avatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.avatar");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_avatar(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 newavatar = 42;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_newavatar(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string exskill = 43;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_exskill().data(), static_cast<int>(this->_internal_exskill().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.heros.t_hero_config.exskill");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_exskill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.heros.t_hero_config)
  return target;
}

size_t heros_t_hero_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.heros.t_hero_config)
  size_t total_size = 0;

  if (_internal_has_typeicon()) {
    // required string typeicon = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_typeicon());
  }

  if (_internal_has_desc()) {
    // required string desc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  if (_internal_has_evolution()) {
    // required string evolution = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_evolution());
  }

  if (_internal_has_primecard()) {
    // required string primecard = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primecard());
  }

  if (_internal_has_maxcard()) {
    // required string maxcard = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maxcard());
  }

  if (_internal_has_skill()) {
    // required string skill = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skill());
  }

  if (_internal_has_repeatget()) {
    // required string repeatget = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repeatget());
  }

  if (_internal_has_herochara()) {
    // required string herochara = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_herochara());
  }

  if (_internal_has_trick()) {
    // required string trick = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trick());
  }

  if (_internal_has_modelact()) {
    // required string modelact = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelact());
  }

  if (_internal_has_getherodesc()) {
    // required string getherodesc = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_getherodesc());
  }

  if (_internal_has_fetters()) {
    // required string fetters = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fetters());
  }

  if (_internal_has_recommandprice()) {
    // required string recommandprice = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recommandprice());
  }

  if (_internal_has_heroname()) {
    // required string heroname = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heroname());
  }

  if (_internal_has_avatar()) {
    // required string avatar = 41;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());
  }

  if (_internal_has_exskill()) {
    // required string exskill = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exskill());
  }

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_type()) {
    // required uint32 type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_activeskill_1()) {
    // required uint32 activeskill_1 = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activeskill_1());
  }

  if (_internal_has_activeskill_2()) {
    // required uint32 activeskill_2 = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activeskill_2());
  }

  if (_internal_has_activeskill_3()) {
    // required uint32 activeskill_3 = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activeskill_3());
  }

  if (_internal_has_activeskill_4()) {
    // required uint32 activeskill_4 = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activeskill_4());
  }

  if (_internal_has_normalskill()) {
    // required uint32 normalskill = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_normalskill());
  }

  if (_internal_has_passiveskill()) {
    // required uint32 passiveskill = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_passiveskill());
  }

  if (_internal_has_maxhp()) {
    // required uint32 maxhp = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxhp());
  }

  if (_internal_has_pdamage()) {
    // required uint32 pdamage = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdamage());
  }

  if (_internal_has_mdamage()) {
    // required uint32 mdamage = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdamage());
  }

  if (_internal_has_pdefence()) {
    // required uint32 pdefence = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdefence());
  }

  if (_internal_has_mdefence()) {
    // required uint32 mdefence = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdefence());
  }

  if (_internal_has_bang()) {
    // required uint32 bang = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bang());
  }

  if (_internal_has_toughness()) {
    // required uint32 toughness = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_toughness());
  }

  if (_internal_has_block()) {
    // required uint32 block = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block());
  }

  if (_internal_has_penetrate()) {
    // required uint32 penetrate = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_penetrate());
  }

  if (_internal_has_hit()) {
    // required uint32 hit = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hit());
  }

  if (_internal_has_miss()) {
    // required uint32 miss = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_miss());
  }

  if (_internal_has_getheropathway()) {
    // required uint32 getheropathway = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_getheropathway());
  }

  if (_internal_has_addmpcfg()) {
    // required uint32 addmpcfg = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addmpcfg());
  }

  if (_internal_has_maxstar()) {
    // required uint32 maxstar = 36;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxstar());
  }

  if (_internal_has_isshow()) {
    // required uint32 isshow = 38;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_isshow());
  }

  if (_internal_has_accurate()) {
    // required uint32 accurate = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accurate());
  }

  if (_internal_has_deflect()) {
    // required uint32 deflect = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deflect());
  }

  if (_internal_has_newavatar()) {
    // required uint32 newavatar = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newavatar());
  }

  return total_size;
}
size_t heros_t_hero_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.heros.t_hero_config)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_has_bits_[1] & 0x000007ff) ^ 0x000007ff)) == 0) {  // All required fields are present.
    // required string typeicon = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_typeicon());

    // required string desc = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());

    // required string evolution = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_evolution());

    // required string primecard = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primecard());

    // required string maxcard = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maxcard());

    // required string skill = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skill());

    // required string repeatget = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repeatget());

    // required string herochara = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_herochara());

    // required string trick = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trick());

    // required string modelact = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelact());

    // required string getherodesc = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_getherodesc());

    // required string fetters = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fetters());

    // required string recommandprice = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recommandprice());

    // required string heroname = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heroname());

    // required string avatar = 41;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatar());

    // required string exskill = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exskill());

    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 activeskill_1 = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activeskill_1());

    // required uint32 activeskill_2 = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activeskill_2());

    // required uint32 activeskill_3 = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activeskill_3());

    // required uint32 activeskill_4 = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activeskill_4());

    // required uint32 normalskill = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_normalskill());

    // required uint32 passiveskill = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_passiveskill());

    // required uint32 maxhp = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxhp());

    // required uint32 pdamage = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdamage());

    // required uint32 mdamage = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdamage());

    // required uint32 pdefence = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdefence());

    // required uint32 mdefence = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdefence());

    // required uint32 bang = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bang());

    // required uint32 toughness = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_toughness());

    // required uint32 block = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block());

    // required uint32 penetrate = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_penetrate());

    // required uint32 hit = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hit());

    // required uint32 miss = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_miss());

    // required uint32 getheropathway = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_getheropathway());

    // required uint32 addmpcfg = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addmpcfg());

    // required uint32 maxstar = 36;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxstar());

    // required uint32 isshow = 38;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_isshow());

    // required uint32 accurate = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accurate());

    // required uint32 deflect = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deflect());

    // required uint32 newavatar = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_newavatar());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void heros_t_hero_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.heros.t_hero_config)
  GOOGLE_DCHECK_NE(&from, this);
  const heros_t_hero_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<heros_t_hero_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.heros.t_hero_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.heros.t_hero_config)
    MergeFrom(*source);
  }
}

void heros_t_hero_config::MergeFrom(const heros_t_hero_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.heros.t_hero_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      typeicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.typeicon_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      evolution_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.evolution_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      primecard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.primecard_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      maxcard_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.maxcard_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      skill_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skill_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      repeatget_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.repeatget_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      herochara_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herochara_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      trick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trick_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      modelact_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelact_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      getherodesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.getherodesc_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      fetters_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fetters_);
    }
    if (cached_has_bits & 0x00001000u) {
      _has_bits_[0] |= 0x00001000u;
      recommandprice_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.recommandprice_);
    }
    if (cached_has_bits & 0x00002000u) {
      _has_bits_[0] |= 0x00002000u;
      heroname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.heroname_);
    }
    if (cached_has_bits & 0x00004000u) {
      _has_bits_[0] |= 0x00004000u;
      avatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatar_);
    }
    if (cached_has_bits & 0x00008000u) {
      _has_bits_[0] |= 0x00008000u;
      exskill_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exskill_);
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00020000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00040000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00080000u) {
      activeskill_1_ = from.activeskill_1_;
    }
    if (cached_has_bits & 0x00100000u) {
      activeskill_2_ = from.activeskill_2_;
    }
    if (cached_has_bits & 0x00200000u) {
      activeskill_3_ = from.activeskill_3_;
    }
    if (cached_has_bits & 0x00400000u) {
      activeskill_4_ = from.activeskill_4_;
    }
    if (cached_has_bits & 0x00800000u) {
      normalskill_ = from.normalskill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      passiveskill_ = from.passiveskill_;
    }
    if (cached_has_bits & 0x02000000u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x04000000u) {
      pdamage_ = from.pdamage_;
    }
    if (cached_has_bits & 0x08000000u) {
      mdamage_ = from.mdamage_;
    }
    if (cached_has_bits & 0x10000000u) {
      pdefence_ = from.pdefence_;
    }
    if (cached_has_bits & 0x20000000u) {
      mdefence_ = from.mdefence_;
    }
    if (cached_has_bits & 0x40000000u) {
      bang_ = from.bang_;
    }
    if (cached_has_bits & 0x80000000u) {
      toughness_ = from.toughness_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      block_ = from.block_;
    }
    if (cached_has_bits & 0x00000002u) {
      penetrate_ = from.penetrate_;
    }
    if (cached_has_bits & 0x00000004u) {
      hit_ = from.hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      miss_ = from.miss_;
    }
    if (cached_has_bits & 0x00000010u) {
      getheropathway_ = from.getheropathway_;
    }
    if (cached_has_bits & 0x00000020u) {
      addmpcfg_ = from.addmpcfg_;
    }
    if (cached_has_bits & 0x00000040u) {
      maxstar_ = from.maxstar_;
    }
    if (cached_has_bits & 0x00000080u) {
      isshow_ = from.isshow_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      accurate_ = from.accurate_;
    }
    if (cached_has_bits & 0x00000200u) {
      deflect_ = from.deflect_;
    }
    if (cached_has_bits & 0x00000400u) {
      newavatar_ = from.newavatar_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void heros_t_hero_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.heros.t_hero_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heros_t_hero_config::CopyFrom(const heros_t_hero_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.heros.t_hero_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heros_t_hero_config::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void heros_t_hero_config::InternalSwap(heros_t_hero_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  typeicon_.Swap(&other->typeicon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  evolution_.Swap(&other->evolution_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  primecard_.Swap(&other->primecard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  maxcard_.Swap(&other->maxcard_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  skill_.Swap(&other->skill_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  repeatget_.Swap(&other->repeatget_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  herochara_.Swap(&other->herochara_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trick_.Swap(&other->trick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modelact_.Swap(&other->modelact_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  getherodesc_.Swap(&other->getherodesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fetters_.Swap(&other->fetters_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recommandprice_.Swap(&other->recommandprice_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  heroname_.Swap(&other->heroname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exskill_.Swap(&other->exskill_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(activeskill_1_, other->activeskill_1_);
  swap(activeskill_2_, other->activeskill_2_);
  swap(activeskill_3_, other->activeskill_3_);
  swap(activeskill_4_, other->activeskill_4_);
  swap(normalskill_, other->normalskill_);
  swap(passiveskill_, other->passiveskill_);
  swap(maxhp_, other->maxhp_);
  swap(pdamage_, other->pdamage_);
  swap(mdamage_, other->mdamage_);
  swap(pdefence_, other->pdefence_);
  swap(mdefence_, other->mdefence_);
  swap(bang_, other->bang_);
  swap(toughness_, other->toughness_);
  swap(block_, other->block_);
  swap(penetrate_, other->penetrate_);
  swap(hit_, other->hit_);
  swap(miss_, other->miss_);
  swap(getheropathway_, other->getheropathway_);
  swap(addmpcfg_, other->addmpcfg_);
  swap(maxstar_, other->maxstar_);
  swap(isshow_, other->isshow_);
  swap(accurate_, other->accurate_);
  swap(deflect_, other->deflect_);
  swap(newavatar_, other->newavatar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata heros_t_hero_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void heros::InitAsDefaultInstance() {
}
class heros::_Internal {
 public:
  using HasBits = decltype(std::declval<heros>()._has_bits_);
};

heros::heros()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.heros)
}
heros::heros(const heros& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.heros)
}

void heros::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_heros_heros_2eproto.base);
}

heros::~heros() {
  // @@protoc_insertion_point(destructor:pb.heros)
  SharedDtor();
}

void heros::SharedDtor() {
}

void heros::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const heros& heros::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_heros_heros_2eproto.base);
  return *internal_default_instance();
}


void heros::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.heros)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* heros::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.heros.t_hero_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* heros::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.heros)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.heros.t_hero_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.heros)
  return target;
}

size_t heros::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.heros)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.heros.t_hero_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void heros::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.heros)
  GOOGLE_DCHECK_NE(&from, this);
  const heros* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<heros>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.heros)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.heros)
    MergeFrom(*source);
  }
}

void heros::MergeFrom(const heros& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.heros)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void heros::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.heros)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heros::CopyFrom(const heros& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.heros)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heros::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void heros::InternalSwap(heros* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata heros::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::heros_t_hero_config* Arena::CreateMaybeMessage< ::pb::heros_t_hero_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::heros_t_hero_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::heros* Arena::CreateMaybeMessage< ::pb::heros >(Arena* arena) {
  return Arena::CreateInternal< ::pb::heros >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
