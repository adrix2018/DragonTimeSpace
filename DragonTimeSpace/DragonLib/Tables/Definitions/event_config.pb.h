// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_event_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_event_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_event_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_event_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_event_5fconfig_2eproto;
namespace pb {
class event_config;
class event_configDefaultTypeInternal;
extern event_configDefaultTypeInternal _event_config_default_instance_;
class event_config_t_event_config;
class event_config_t_event_configDefaultTypeInternal;
extern event_config_t_event_configDefaultTypeInternal _event_config_t_event_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::event_config* Arena::CreateMaybeMessage<::pb::event_config>(Arena*);
template<> ::pb::event_config_t_event_config* Arena::CreateMaybeMessage<::pb::event_config_t_event_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class event_config_t_event_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.event_config.t_event_config) */ {
 public:
  event_config_t_event_config();
  virtual ~event_config_t_event_config();

  event_config_t_event_config(const event_config_t_event_config& from);
  event_config_t_event_config(event_config_t_event_config&& from) noexcept
    : event_config_t_event_config() {
    *this = ::std::move(from);
  }

  inline event_config_t_event_config& operator=(const event_config_t_event_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline event_config_t_event_config& operator=(event_config_t_event_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const event_config_t_event_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const event_config_t_event_config* internal_default_instance() {
    return reinterpret_cast<const event_config_t_event_config*>(
               &_event_config_t_event_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(event_config_t_event_config& a, event_config_t_event_config& b) {
    a.Swap(&b);
  }
  inline void Swap(event_config_t_event_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline event_config_t_event_config* New() const final {
    return CreateMaybeMessage<event_config_t_event_config>(nullptr);
  }

  event_config_t_event_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<event_config_t_event_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const event_config_t_event_config& from);
  void MergeFrom(const event_config_t_event_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(event_config_t_event_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.event_config.t_event_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_event_5fconfig_2eproto);
    return ::descriptor_table_event_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kDescFieldNumber = 8,
    kTimeFieldNumber = 9,
    kFormFieldNumber = 10,
    kLimitFieldNumber = 11,
    kRewardFieldNumber = 12,
    kQuestgroupFieldNumber = 14,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 4,
    kTimelimitFieldNumber = 5,
    kPeractiveFieldNumber = 6,
    kLevelFieldNumber = 7,
    kPathwayFieldNumber = 13,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string desc = 8;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // required string time = 9;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // required string form = 10;
  bool has_form() const;
  private:
  bool _internal_has_form() const;
  public:
  void clear_form();
  const std::string& form() const;
  void set_form(const std::string& value);
  void set_form(std::string&& value);
  void set_form(const char* value);
  void set_form(const char* value, size_t size);
  std::string* mutable_form();
  std::string* release_form();
  void set_allocated_form(std::string* form);
  private:
  const std::string& _internal_form() const;
  void _internal_set_form(const std::string& value);
  std::string* _internal_mutable_form();
  public:

  // required string limit = 11;
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  const std::string& limit() const;
  void set_limit(const std::string& value);
  void set_limit(std::string&& value);
  void set_limit(const char* value);
  void set_limit(const char* value, size_t size);
  std::string* mutable_limit();
  std::string* release_limit();
  void set_allocated_limit(std::string* limit);
  private:
  const std::string& _internal_limit() const;
  void _internal_set_limit(const std::string& value);
  std::string* _internal_mutable_limit();
  public:

  // required string reward = 12;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const std::string& reward() const;
  void set_reward(const std::string& value);
  void set_reward(std::string&& value);
  void set_reward(const char* value);
  void set_reward(const char* value, size_t size);
  std::string* mutable_reward();
  std::string* release_reward();
  void set_allocated_reward(std::string* reward);
  private:
  const std::string& _internal_reward() const;
  void _internal_set_reward(const std::string& value);
  std::string* _internal_mutable_reward();
  public:

  // required string questgroup = 14;
  bool has_questgroup() const;
  private:
  bool _internal_has_questgroup() const;
  public:
  void clear_questgroup();
  const std::string& questgroup() const;
  void set_questgroup(const std::string& value);
  void set_questgroup(std::string&& value);
  void set_questgroup(const char* value);
  void set_questgroup(const char* value, size_t size);
  std::string* mutable_questgroup();
  std::string* release_questgroup();
  void set_allocated_questgroup(std::string* questgroup);
  private:
  const std::string& _internal_questgroup() const;
  void _internal_set_questgroup(const std::string& value);
  std::string* _internal_mutable_questgroup();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 timelimit = 5;
  bool has_timelimit() const;
  private:
  bool _internal_has_timelimit() const;
  public:
  void clear_timelimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 timelimit() const;
  void set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timelimit() const;
  void _internal_set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 peractive = 6;
  bool has_peractive() const;
  private:
  bool _internal_has_peractive() const;
  public:
  void clear_peractive();
  ::PROTOBUF_NAMESPACE_ID::uint32 peractive() const;
  void set_peractive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_peractive() const;
  void _internal_set_peractive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 level = 7;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 pathway = 13;
  bool has_pathway() const;
  private:
  bool _internal_has_pathway() const;
  public:
  void clear_pathway();
  ::PROTOBUF_NAMESPACE_ID::uint32 pathway() const;
  void set_pathway(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pathway() const;
  void _internal_set_pathway(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.event_config.t_event_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr form_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr limit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr questgroup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timelimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peractive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pathway_;
  friend struct ::TableStruct_event_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class event_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.event_config) */ {
 public:
  event_config();
  virtual ~event_config();

  event_config(const event_config& from);
  event_config(event_config&& from) noexcept
    : event_config() {
    *this = ::std::move(from);
  }

  inline event_config& operator=(const event_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline event_config& operator=(event_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const event_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const event_config* internal_default_instance() {
    return reinterpret_cast<const event_config*>(
               &_event_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(event_config& a, event_config& b) {
    a.Swap(&b);
  }
  inline void Swap(event_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline event_config* New() const final {
    return CreateMaybeMessage<event_config>(nullptr);
  }

  event_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<event_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const event_config& from);
  void MergeFrom(const event_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(event_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.event_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_event_5fconfig_2eproto);
    return ::descriptor_table_event_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef event_config_t_event_config t_event_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.event_config.t_event_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::event_config_t_event_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::event_config_t_event_config >*
      mutable_datas();
  private:
  const ::pb::event_config_t_event_config& _internal_datas(int index) const;
  ::pb::event_config_t_event_config* _internal_add_datas();
  public:
  const ::pb::event_config_t_event_config& datas(int index) const;
  ::pb::event_config_t_event_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::event_config_t_event_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.event_config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::event_config_t_event_config > datas_;
  friend struct ::TableStruct_event_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// event_config_t_event_config

// required uint32 tbxid = 1 [default = 0];
inline bool event_config_t_event_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void event_config_t_event_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.tbxid)
  return _internal_tbxid();
}
inline void event_config_t_event_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  tbxid_ = value;
}
inline void event_config_t_event_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool event_config_t_event_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_id() const {
  return _internal_has_id();
}
inline void event_config_t_event_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::id() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.id)
  return _internal_id();
}
inline void event_config_t_event_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  id_ = value;
}
inline void event_config_t_event_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.id)
}

// required string name = 3;
inline bool event_config_t_event_config::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_name() const {
  return _internal_has_name();
}
inline void event_config_t_event_config::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& event_config_t_event_config::name() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.name)
  return _internal_name();
}
inline void event_config_t_event_config::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.name)
}
inline std::string* event_config_t_event_config::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.event_config.t_event_config.name)
  return _internal_mutable_name();
}
inline const std::string& event_config_t_event_config::_internal_name() const {
  return name_.GetNoArena();
}
inline void event_config_t_event_config::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void event_config_t_event_config::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.event_config.t_event_config.name)
}
inline void event_config_t_event_config::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.event_config.t_event_config.name)
}
inline void event_config_t_event_config::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.event_config.t_event_config.name)
}
inline std::string* event_config_t_event_config::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* event_config_t_event_config::release_name() {
  // @@protoc_insertion_point(field_release:pb.event_config.t_event_config.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void event_config_t_event_config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.event_config.t_event_config.name)
}

// required uint32 type = 4;
inline bool event_config_t_event_config::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_type() const {
  return _internal_has_type();
}
inline void event_config_t_event_config::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::type() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.type)
  return _internal_type();
}
inline void event_config_t_event_config::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  type_ = value;
}
inline void event_config_t_event_config::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.type)
}

// required uint32 timelimit = 5;
inline bool event_config_t_event_config::_internal_has_timelimit() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_timelimit() const {
  return _internal_has_timelimit();
}
inline void event_config_t_event_config::clear_timelimit() {
  timelimit_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::_internal_timelimit() const {
  return timelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::timelimit() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.timelimit)
  return _internal_timelimit();
}
inline void event_config_t_event_config::_internal_set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  timelimit_ = value;
}
inline void event_config_t_event_config::set_timelimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timelimit(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.timelimit)
}

// required uint32 peractive = 6;
inline bool event_config_t_event_config::_internal_has_peractive() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_peractive() const {
  return _internal_has_peractive();
}
inline void event_config_t_event_config::clear_peractive() {
  peractive_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::_internal_peractive() const {
  return peractive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::peractive() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.peractive)
  return _internal_peractive();
}
inline void event_config_t_event_config::_internal_set_peractive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  peractive_ = value;
}
inline void event_config_t_event_config::set_peractive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_peractive(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.peractive)
}

// required uint32 level = 7;
inline bool event_config_t_event_config::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_level() const {
  return _internal_has_level();
}
inline void event_config_t_event_config::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::level() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.level)
  return _internal_level();
}
inline void event_config_t_event_config::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  level_ = value;
}
inline void event_config_t_event_config::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.level)
}

// required string desc = 8;
inline bool event_config_t_event_config::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_desc() const {
  return _internal_has_desc();
}
inline void event_config_t_event_config::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& event_config_t_event_config::desc() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.desc)
  return _internal_desc();
}
inline void event_config_t_event_config::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.desc)
}
inline std::string* event_config_t_event_config::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:pb.event_config.t_event_config.desc)
  return _internal_mutable_desc();
}
inline const std::string& event_config_t_event_config::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void event_config_t_event_config::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void event_config_t_event_config::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.event_config.t_event_config.desc)
}
inline void event_config_t_event_config::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.event_config.t_event_config.desc)
}
inline void event_config_t_event_config::set_desc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.event_config.t_event_config.desc)
}
inline std::string* event_config_t_event_config::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000002u;
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* event_config_t_event_config::release_desc() {
  // @@protoc_insertion_point(field_release:pb.event_config.t_event_config.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return desc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void event_config_t_event_config::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.event_config.t_event_config.desc)
}

// required string time = 9;
inline bool event_config_t_event_config::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_time() const {
  return _internal_has_time();
}
inline void event_config_t_event_config::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& event_config_t_event_config::time() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.time)
  return _internal_time();
}
inline void event_config_t_event_config::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.time)
}
inline std::string* event_config_t_event_config::mutable_time() {
  // @@protoc_insertion_point(field_mutable:pb.event_config.t_event_config.time)
  return _internal_mutable_time();
}
inline const std::string& event_config_t_event_config::_internal_time() const {
  return time_.GetNoArena();
}
inline void event_config_t_event_config::_internal_set_time(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void event_config_t_event_config::set_time(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.event_config.t_event_config.time)
}
inline void event_config_t_event_config::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.event_config.t_event_config.time)
}
inline void event_config_t_event_config::set_time(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.event_config.t_event_config.time)
}
inline std::string* event_config_t_event_config::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000004u;
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* event_config_t_event_config::release_time() {
  // @@protoc_insertion_point(field_release:pb.event_config.t_event_config.time)
  if (!_internal_has_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return time_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void event_config_t_event_config::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:pb.event_config.t_event_config.time)
}

// required string form = 10;
inline bool event_config_t_event_config::_internal_has_form() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_form() const {
  return _internal_has_form();
}
inline void event_config_t_event_config::clear_form() {
  form_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& event_config_t_event_config::form() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.form)
  return _internal_form();
}
inline void event_config_t_event_config::set_form(const std::string& value) {
  _internal_set_form(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.form)
}
inline std::string* event_config_t_event_config::mutable_form() {
  // @@protoc_insertion_point(field_mutable:pb.event_config.t_event_config.form)
  return _internal_mutable_form();
}
inline const std::string& event_config_t_event_config::_internal_form() const {
  return form_.GetNoArena();
}
inline void event_config_t_event_config::_internal_set_form(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  form_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void event_config_t_event_config::set_form(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  form_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.event_config.t_event_config.form)
}
inline void event_config_t_event_config::set_form(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  form_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.event_config.t_event_config.form)
}
inline void event_config_t_event_config::set_form(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  form_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.event_config.t_event_config.form)
}
inline std::string* event_config_t_event_config::_internal_mutable_form() {
  _has_bits_[0] |= 0x00000008u;
  return form_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* event_config_t_event_config::release_form() {
  // @@protoc_insertion_point(field_release:pb.event_config.t_event_config.form)
  if (!_internal_has_form()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return form_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void event_config_t_event_config::set_allocated_form(std::string* form) {
  if (form != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  form_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), form);
  // @@protoc_insertion_point(field_set_allocated:pb.event_config.t_event_config.form)
}

// required string limit = 11;
inline bool event_config_t_event_config::_internal_has_limit() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_limit() const {
  return _internal_has_limit();
}
inline void event_config_t_event_config::clear_limit() {
  limit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& event_config_t_event_config::limit() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.limit)
  return _internal_limit();
}
inline void event_config_t_event_config::set_limit(const std::string& value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.limit)
}
inline std::string* event_config_t_event_config::mutable_limit() {
  // @@protoc_insertion_point(field_mutable:pb.event_config.t_event_config.limit)
  return _internal_mutable_limit();
}
inline const std::string& event_config_t_event_config::_internal_limit() const {
  return limit_.GetNoArena();
}
inline void event_config_t_event_config::_internal_set_limit(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  limit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void event_config_t_event_config::set_limit(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  limit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.event_config.t_event_config.limit)
}
inline void event_config_t_event_config::set_limit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  limit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.event_config.t_event_config.limit)
}
inline void event_config_t_event_config::set_limit(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  limit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.event_config.t_event_config.limit)
}
inline std::string* event_config_t_event_config::_internal_mutable_limit() {
  _has_bits_[0] |= 0x00000010u;
  return limit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* event_config_t_event_config::release_limit() {
  // @@protoc_insertion_point(field_release:pb.event_config.t_event_config.limit)
  if (!_internal_has_limit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return limit_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void event_config_t_event_config::set_allocated_limit(std::string* limit) {
  if (limit != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  limit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), limit);
  // @@protoc_insertion_point(field_set_allocated:pb.event_config.t_event_config.limit)
}

// required string reward = 12;
inline bool event_config_t_event_config::_internal_has_reward() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_reward() const {
  return _internal_has_reward();
}
inline void event_config_t_event_config::clear_reward() {
  reward_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& event_config_t_event_config::reward() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.reward)
  return _internal_reward();
}
inline void event_config_t_event_config::set_reward(const std::string& value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.reward)
}
inline std::string* event_config_t_event_config::mutable_reward() {
  // @@protoc_insertion_point(field_mutable:pb.event_config.t_event_config.reward)
  return _internal_mutable_reward();
}
inline const std::string& event_config_t_event_config::_internal_reward() const {
  return reward_.GetNoArena();
}
inline void event_config_t_event_config::_internal_set_reward(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void event_config_t_event_config::set_reward(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  reward_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.event_config.t_event_config.reward)
}
inline void event_config_t_event_config::set_reward(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.event_config.t_event_config.reward)
}
inline void event_config_t_event_config::set_reward(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  reward_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.event_config.t_event_config.reward)
}
inline std::string* event_config_t_event_config::_internal_mutable_reward() {
  _has_bits_[0] |= 0x00000020u;
  return reward_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* event_config_t_event_config::release_reward() {
  // @@protoc_insertion_point(field_release:pb.event_config.t_event_config.reward)
  if (!_internal_has_reward()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return reward_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void event_config_t_event_config::set_allocated_reward(std::string* reward) {
  if (reward != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  reward_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward);
  // @@protoc_insertion_point(field_set_allocated:pb.event_config.t_event_config.reward)
}

// required uint32 pathway = 13;
inline bool event_config_t_event_config::_internal_has_pathway() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_pathway() const {
  return _internal_has_pathway();
}
inline void event_config_t_event_config::clear_pathway() {
  pathway_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::_internal_pathway() const {
  return pathway_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 event_config_t_event_config::pathway() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.pathway)
  return _internal_pathway();
}
inline void event_config_t_event_config::_internal_set_pathway(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  pathway_ = value;
}
inline void event_config_t_event_config::set_pathway(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pathway(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.pathway)
}

// required string questgroup = 14;
inline bool event_config_t_event_config::_internal_has_questgroup() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool event_config_t_event_config::has_questgroup() const {
  return _internal_has_questgroup();
}
inline void event_config_t_event_config::clear_questgroup() {
  questgroup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& event_config_t_event_config::questgroup() const {
  // @@protoc_insertion_point(field_get:pb.event_config.t_event_config.questgroup)
  return _internal_questgroup();
}
inline void event_config_t_event_config::set_questgroup(const std::string& value) {
  _internal_set_questgroup(value);
  // @@protoc_insertion_point(field_set:pb.event_config.t_event_config.questgroup)
}
inline std::string* event_config_t_event_config::mutable_questgroup() {
  // @@protoc_insertion_point(field_mutable:pb.event_config.t_event_config.questgroup)
  return _internal_mutable_questgroup();
}
inline const std::string& event_config_t_event_config::_internal_questgroup() const {
  return questgroup_.GetNoArena();
}
inline void event_config_t_event_config::_internal_set_questgroup(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  questgroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void event_config_t_event_config::set_questgroup(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  questgroup_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.event_config.t_event_config.questgroup)
}
inline void event_config_t_event_config::set_questgroup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  questgroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.event_config.t_event_config.questgroup)
}
inline void event_config_t_event_config::set_questgroup(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  questgroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.event_config.t_event_config.questgroup)
}
inline std::string* event_config_t_event_config::_internal_mutable_questgroup() {
  _has_bits_[0] |= 0x00000040u;
  return questgroup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* event_config_t_event_config::release_questgroup() {
  // @@protoc_insertion_point(field_release:pb.event_config.t_event_config.questgroup)
  if (!_internal_has_questgroup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return questgroup_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void event_config_t_event_config::set_allocated_questgroup(std::string* questgroup) {
  if (questgroup != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  questgroup_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), questgroup);
  // @@protoc_insertion_point(field_set_allocated:pb.event_config.t_event_config.questgroup)
}

// -------------------------------------------------------------------

// event_config

// repeated .pb.event_config.t_event_config datas = 1;
inline int event_config::_internal_datas_size() const {
  return datas_.size();
}
inline int event_config::datas_size() const {
  return _internal_datas_size();
}
inline void event_config::clear_datas() {
  datas_.Clear();
}
inline ::pb::event_config_t_event_config* event_config::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.event_config.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::event_config_t_event_config >*
event_config::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.event_config.datas)
  return &datas_;
}
inline const ::pb::event_config_t_event_config& event_config::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::event_config_t_event_config& event_config::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.event_config.datas)
  return _internal_datas(index);
}
inline ::pb::event_config_t_event_config* event_config::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::event_config_t_event_config* event_config::add_datas() {
  // @@protoc_insertion_point(field_add:pb.event_config.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::event_config_t_event_config >&
event_config::datas() const {
  // @@protoc_insertion_point(field_list:pb.event_config.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_event_5fconfig_2eproto
