// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: copymapmaster.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_copymapmaster_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_copymapmaster_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_copymapmaster_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_copymapmaster_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_copymapmaster_2eproto;
namespace pb {
class copymapmaster;
class copymapmasterDefaultTypeInternal;
extern copymapmasterDefaultTypeInternal _copymapmaster_default_instance_;
class copymapmaster_t_copymap_master;
class copymapmaster_t_copymap_masterDefaultTypeInternal;
extern copymapmaster_t_copymap_masterDefaultTypeInternal _copymapmaster_t_copymap_master_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::copymapmaster* Arena::CreateMaybeMessage<::pb::copymapmaster>(Arena*);
template<> ::pb::copymapmaster_t_copymap_master* Arena::CreateMaybeMessage<::pb::copymapmaster_t_copymap_master>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class copymapmaster_t_copymap_master :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.copymapmaster.t_copymap_master) */ {
 public:
  copymapmaster_t_copymap_master();
  virtual ~copymapmaster_t_copymap_master();

  copymapmaster_t_copymap_master(const copymapmaster_t_copymap_master& from);
  copymapmaster_t_copymap_master(copymapmaster_t_copymap_master&& from) noexcept
    : copymapmaster_t_copymap_master() {
    *this = ::std::move(from);
  }

  inline copymapmaster_t_copymap_master& operator=(const copymapmaster_t_copymap_master& from) {
    CopyFrom(from);
    return *this;
  }
  inline copymapmaster_t_copymap_master& operator=(copymapmaster_t_copymap_master&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const copymapmaster_t_copymap_master& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const copymapmaster_t_copymap_master* internal_default_instance() {
    return reinterpret_cast<const copymapmaster_t_copymap_master*>(
               &_copymapmaster_t_copymap_master_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(copymapmaster_t_copymap_master& a, copymapmaster_t_copymap_master& b) {
    a.Swap(&b);
  }
  inline void Swap(copymapmaster_t_copymap_master* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline copymapmaster_t_copymap_master* New() const final {
    return CreateMaybeMessage<copymapmaster_t_copymap_master>(nullptr);
  }

  copymapmaster_t_copymap_master* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<copymapmaster_t_copymap_master>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const copymapmaster_t_copymap_master& from);
  void MergeFrom(const copymapmaster_t_copymap_master& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(copymapmaster_t_copymap_master* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.copymapmaster.t_copymap_master";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymapmaster_2eproto);
    return ::descriptor_table_copymapmaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kAwardFieldNumber = 6,
    kOvermapTypeUiFieldNumber = 7,
    kDescFieldNumber = 8,
    kBossdiecameramoveFieldNumber = 9,
    kFirstAwardFieldNumber = 11,
    kAssistNpcFieldNumber = 14,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kDaytimelimitFieldNumber = 4,
    kMinNeedPlayerFieldNumber = 5,
    kTypeFieldNumber = 10,
    kRecommandFightFieldNumber = 12,
    kTeammodeFieldNumber = 13,
    kAutoenterFieldNumber = 15,
    kChatchannelFieldNumber = 16,
    kDaytimesuclimitFieldNumber = 17,
    kExplvllimitFieldNumber = 18,
    kOriginonlyFieldNumber = 19,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string award = 6;
  bool has_award() const;
  private:
  bool _internal_has_award() const;
  public:
  void clear_award();
  const std::string& award() const;
  void set_award(const std::string& value);
  void set_award(std::string&& value);
  void set_award(const char* value);
  void set_award(const char* value, size_t size);
  std::string* mutable_award();
  std::string* release_award();
  void set_allocated_award(std::string* award);
  private:
  const std::string& _internal_award() const;
  void _internal_set_award(const std::string& value);
  std::string* _internal_mutable_award();
  public:

  // required string overmap_type_ui = 7;
  bool has_overmap_type_ui() const;
  private:
  bool _internal_has_overmap_type_ui() const;
  public:
  void clear_overmap_type_ui();
  const std::string& overmap_type_ui() const;
  void set_overmap_type_ui(const std::string& value);
  void set_overmap_type_ui(std::string&& value);
  void set_overmap_type_ui(const char* value);
  void set_overmap_type_ui(const char* value, size_t size);
  std::string* mutable_overmap_type_ui();
  std::string* release_overmap_type_ui();
  void set_allocated_overmap_type_ui(std::string* overmap_type_ui);
  private:
  const std::string& _internal_overmap_type_ui() const;
  void _internal_set_overmap_type_ui(const std::string& value);
  std::string* _internal_mutable_overmap_type_ui();
  public:

  // required string desc = 8;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // required string bossdiecameramove = 9;
  bool has_bossdiecameramove() const;
  private:
  bool _internal_has_bossdiecameramove() const;
  public:
  void clear_bossdiecameramove();
  const std::string& bossdiecameramove() const;
  void set_bossdiecameramove(const std::string& value);
  void set_bossdiecameramove(std::string&& value);
  void set_bossdiecameramove(const char* value);
  void set_bossdiecameramove(const char* value, size_t size);
  std::string* mutable_bossdiecameramove();
  std::string* release_bossdiecameramove();
  void set_allocated_bossdiecameramove(std::string* bossdiecameramove);
  private:
  const std::string& _internal_bossdiecameramove() const;
  void _internal_set_bossdiecameramove(const std::string& value);
  std::string* _internal_mutable_bossdiecameramove();
  public:

  // required string first_award = 11;
  bool has_first_award() const;
  private:
  bool _internal_has_first_award() const;
  public:
  void clear_first_award();
  const std::string& first_award() const;
  void set_first_award(const std::string& value);
  void set_first_award(std::string&& value);
  void set_first_award(const char* value);
  void set_first_award(const char* value, size_t size);
  std::string* mutable_first_award();
  std::string* release_first_award();
  void set_allocated_first_award(std::string* first_award);
  private:
  const std::string& _internal_first_award() const;
  void _internal_set_first_award(const std::string& value);
  std::string* _internal_mutable_first_award();
  public:

  // required string assist_npc = 14;
  bool has_assist_npc() const;
  private:
  bool _internal_has_assist_npc() const;
  public:
  void clear_assist_npc();
  const std::string& assist_npc() const;
  void set_assist_npc(const std::string& value);
  void set_assist_npc(std::string&& value);
  void set_assist_npc(const char* value);
  void set_assist_npc(const char* value, size_t size);
  std::string* mutable_assist_npc();
  std::string* release_assist_npc();
  void set_allocated_assist_npc(std::string* assist_npc);
  private:
  const std::string& _internal_assist_npc() const;
  void _internal_set_assist_npc(const std::string& value);
  std::string* _internal_mutable_assist_npc();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 daytimelimit = 4;
  bool has_daytimelimit() const;
  private:
  bool _internal_has_daytimelimit() const;
  public:
  void clear_daytimelimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 daytimelimit() const;
  void set_daytimelimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_daytimelimit() const;
  void _internal_set_daytimelimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 min_need_player = 5;
  bool has_min_need_player() const;
  private:
  bool _internal_has_min_need_player() const;
  public:
  void clear_min_need_player();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_need_player() const;
  void set_min_need_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_need_player() const;
  void _internal_set_min_need_player(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 10;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 recommand_fight = 12;
  bool has_recommand_fight() const;
  private:
  bool _internal_has_recommand_fight() const;
  public:
  void clear_recommand_fight();
  ::PROTOBUF_NAMESPACE_ID::uint32 recommand_fight() const;
  void set_recommand_fight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recommand_fight() const;
  void _internal_set_recommand_fight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 teammode = 13;
  bool has_teammode() const;
  private:
  bool _internal_has_teammode() const;
  public:
  void clear_teammode();
  ::PROTOBUF_NAMESPACE_ID::uint32 teammode() const;
  void set_teammode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teammode() const;
  void _internal_set_teammode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool Autoenter = 15;
  bool has_autoenter() const;
  private:
  bool _internal_has_autoenter() const;
  public:
  void clear_autoenter();
  bool autoenter() const;
  void set_autoenter(bool value);
  private:
  bool _internal_autoenter() const;
  void _internal_set_autoenter(bool value);
  public:

  // required uint32 chatchannel = 16;
  bool has_chatchannel() const;
  private:
  bool _internal_has_chatchannel() const;
  public:
  void clear_chatchannel();
  ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel() const;
  void set_chatchannel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chatchannel() const;
  void _internal_set_chatchannel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 daytimesuclimit = 17;
  bool has_daytimesuclimit() const;
  private:
  bool _internal_has_daytimesuclimit() const;
  public:
  void clear_daytimesuclimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 daytimesuclimit() const;
  void set_daytimesuclimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_daytimesuclimit() const;
  void _internal_set_daytimesuclimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 explvllimit = 18;
  bool has_explvllimit() const;
  private:
  bool _internal_has_explvllimit() const;
  public:
  void clear_explvllimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 explvllimit() const;
  void set_explvllimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_explvllimit() const;
  void _internal_set_explvllimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 originonly = 19;
  bool has_originonly() const;
  private:
  bool _internal_has_originonly() const;
  public:
  void clear_originonly();
  ::PROTOBUF_NAMESPACE_ID::uint32 originonly() const;
  void set_originonly(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_originonly() const;
  void _internal_set_originonly(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.copymapmaster.t_copymap_master)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr award_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overmap_type_ui_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bossdiecameramove_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_award_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assist_npc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 daytimelimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_need_player_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recommand_fight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teammode_;
  bool autoenter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 daytimesuclimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 explvllimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 originonly_;
  friend struct ::TableStruct_copymapmaster_2eproto;
};
// -------------------------------------------------------------------

class copymapmaster :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.copymapmaster) */ {
 public:
  copymapmaster();
  virtual ~copymapmaster();

  copymapmaster(const copymapmaster& from);
  copymapmaster(copymapmaster&& from) noexcept
    : copymapmaster() {
    *this = ::std::move(from);
  }

  inline copymapmaster& operator=(const copymapmaster& from) {
    CopyFrom(from);
    return *this;
  }
  inline copymapmaster& operator=(copymapmaster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const copymapmaster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const copymapmaster* internal_default_instance() {
    return reinterpret_cast<const copymapmaster*>(
               &_copymapmaster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(copymapmaster& a, copymapmaster& b) {
    a.Swap(&b);
  }
  inline void Swap(copymapmaster* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline copymapmaster* New() const final {
    return CreateMaybeMessage<copymapmaster>(nullptr);
  }

  copymapmaster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<copymapmaster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const copymapmaster& from);
  void MergeFrom(const copymapmaster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(copymapmaster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.copymapmaster";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_copymapmaster_2eproto);
    return ::descriptor_table_copymapmaster_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef copymapmaster_t_copymap_master t_copymap_master;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.copymapmaster.t_copymap_master datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::copymapmaster_t_copymap_master* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::copymapmaster_t_copymap_master >*
      mutable_datas();
  private:
  const ::pb::copymapmaster_t_copymap_master& _internal_datas(int index) const;
  ::pb::copymapmaster_t_copymap_master* _internal_add_datas();
  public:
  const ::pb::copymapmaster_t_copymap_master& datas(int index) const;
  ::pb::copymapmaster_t_copymap_master* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::copymapmaster_t_copymap_master >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.copymapmaster)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::copymapmaster_t_copymap_master > datas_;
  friend struct ::TableStruct_copymapmaster_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// copymapmaster_t_copymap_master

// required uint32 tbxid = 1 [default = 0];
inline bool copymapmaster_t_copymap_master::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void copymapmaster_t_copymap_master::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.tbxid)
  return _internal_tbxid();
}
inline void copymapmaster_t_copymap_master::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  tbxid_ = value;
}
inline void copymapmaster_t_copymap_master::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool copymapmaster_t_copymap_master::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_id() const {
  return _internal_has_id();
}
inline void copymapmaster_t_copymap_master::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::id() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.id)
  return _internal_id();
}
inline void copymapmaster_t_copymap_master::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  id_ = value;
}
inline void copymapmaster_t_copymap_master::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.id)
}

// required string name = 3;
inline bool copymapmaster_t_copymap_master::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_name() const {
  return _internal_has_name();
}
inline void copymapmaster_t_copymap_master::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& copymapmaster_t_copymap_master::name() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.name)
  return _internal_name();
}
inline void copymapmaster_t_copymap_master::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.name)
}
inline std::string* copymapmaster_t_copymap_master::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.copymapmaster.t_copymap_master.name)
  return _internal_mutable_name();
}
inline const std::string& copymapmaster_t_copymap_master::_internal_name() const {
  return name_.GetNoArena();
}
inline void copymapmaster_t_copymap_master::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void copymapmaster_t_copymap_master::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.copymapmaster.t_copymap_master.name)
}
inline void copymapmaster_t_copymap_master::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.copymapmaster.t_copymap_master.name)
}
inline void copymapmaster_t_copymap_master::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.copymapmaster.t_copymap_master.name)
}
inline std::string* copymapmaster_t_copymap_master::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* copymapmaster_t_copymap_master::release_name() {
  // @@protoc_insertion_point(field_release:pb.copymapmaster.t_copymap_master.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void copymapmaster_t_copymap_master::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.copymapmaster.t_copymap_master.name)
}

// required uint32 daytimelimit = 4;
inline bool copymapmaster_t_copymap_master::_internal_has_daytimelimit() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_daytimelimit() const {
  return _internal_has_daytimelimit();
}
inline void copymapmaster_t_copymap_master::clear_daytimelimit() {
  daytimelimit_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_daytimelimit() const {
  return daytimelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::daytimelimit() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.daytimelimit)
  return _internal_daytimelimit();
}
inline void copymapmaster_t_copymap_master::_internal_set_daytimelimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  daytimelimit_ = value;
}
inline void copymapmaster_t_copymap_master::set_daytimelimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_daytimelimit(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.daytimelimit)
}

// required uint32 min_need_player = 5;
inline bool copymapmaster_t_copymap_master::_internal_has_min_need_player() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_min_need_player() const {
  return _internal_has_min_need_player();
}
inline void copymapmaster_t_copymap_master::clear_min_need_player() {
  min_need_player_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_min_need_player() const {
  return min_need_player_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::min_need_player() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.min_need_player)
  return _internal_min_need_player();
}
inline void copymapmaster_t_copymap_master::_internal_set_min_need_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  min_need_player_ = value;
}
inline void copymapmaster_t_copymap_master::set_min_need_player(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_need_player(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.min_need_player)
}

// required string award = 6;
inline bool copymapmaster_t_copymap_master::_internal_has_award() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_award() const {
  return _internal_has_award();
}
inline void copymapmaster_t_copymap_master::clear_award() {
  award_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& copymapmaster_t_copymap_master::award() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.award)
  return _internal_award();
}
inline void copymapmaster_t_copymap_master::set_award(const std::string& value) {
  _internal_set_award(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.award)
}
inline std::string* copymapmaster_t_copymap_master::mutable_award() {
  // @@protoc_insertion_point(field_mutable:pb.copymapmaster.t_copymap_master.award)
  return _internal_mutable_award();
}
inline const std::string& copymapmaster_t_copymap_master::_internal_award() const {
  return award_.GetNoArena();
}
inline void copymapmaster_t_copymap_master::_internal_set_award(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void copymapmaster_t_copymap_master::set_award(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  award_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.copymapmaster.t_copymap_master.award)
}
inline void copymapmaster_t_copymap_master::set_award(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.copymapmaster.t_copymap_master.award)
}
inline void copymapmaster_t_copymap_master::set_award(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.copymapmaster.t_copymap_master.award)
}
inline std::string* copymapmaster_t_copymap_master::_internal_mutable_award() {
  _has_bits_[0] |= 0x00000002u;
  return award_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* copymapmaster_t_copymap_master::release_award() {
  // @@protoc_insertion_point(field_release:pb.copymapmaster.t_copymap_master.award)
  if (!_internal_has_award()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return award_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void copymapmaster_t_copymap_master::set_allocated_award(std::string* award) {
  if (award != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  award_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), award);
  // @@protoc_insertion_point(field_set_allocated:pb.copymapmaster.t_copymap_master.award)
}

// required string overmap_type_ui = 7;
inline bool copymapmaster_t_copymap_master::_internal_has_overmap_type_ui() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_overmap_type_ui() const {
  return _internal_has_overmap_type_ui();
}
inline void copymapmaster_t_copymap_master::clear_overmap_type_ui() {
  overmap_type_ui_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& copymapmaster_t_copymap_master::overmap_type_ui() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.overmap_type_ui)
  return _internal_overmap_type_ui();
}
inline void copymapmaster_t_copymap_master::set_overmap_type_ui(const std::string& value) {
  _internal_set_overmap_type_ui(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.overmap_type_ui)
}
inline std::string* copymapmaster_t_copymap_master::mutable_overmap_type_ui() {
  // @@protoc_insertion_point(field_mutable:pb.copymapmaster.t_copymap_master.overmap_type_ui)
  return _internal_mutable_overmap_type_ui();
}
inline const std::string& copymapmaster_t_copymap_master::_internal_overmap_type_ui() const {
  return overmap_type_ui_.GetNoArena();
}
inline void copymapmaster_t_copymap_master::_internal_set_overmap_type_ui(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  overmap_type_ui_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void copymapmaster_t_copymap_master::set_overmap_type_ui(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  overmap_type_ui_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.copymapmaster.t_copymap_master.overmap_type_ui)
}
inline void copymapmaster_t_copymap_master::set_overmap_type_ui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  overmap_type_ui_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.copymapmaster.t_copymap_master.overmap_type_ui)
}
inline void copymapmaster_t_copymap_master::set_overmap_type_ui(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  overmap_type_ui_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.copymapmaster.t_copymap_master.overmap_type_ui)
}
inline std::string* copymapmaster_t_copymap_master::_internal_mutable_overmap_type_ui() {
  _has_bits_[0] |= 0x00000004u;
  return overmap_type_ui_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* copymapmaster_t_copymap_master::release_overmap_type_ui() {
  // @@protoc_insertion_point(field_release:pb.copymapmaster.t_copymap_master.overmap_type_ui)
  if (!_internal_has_overmap_type_ui()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return overmap_type_ui_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void copymapmaster_t_copymap_master::set_allocated_overmap_type_ui(std::string* overmap_type_ui) {
  if (overmap_type_ui != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  overmap_type_ui_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), overmap_type_ui);
  // @@protoc_insertion_point(field_set_allocated:pb.copymapmaster.t_copymap_master.overmap_type_ui)
}

// required string desc = 8;
inline bool copymapmaster_t_copymap_master::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_desc() const {
  return _internal_has_desc();
}
inline void copymapmaster_t_copymap_master::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& copymapmaster_t_copymap_master::desc() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.desc)
  return _internal_desc();
}
inline void copymapmaster_t_copymap_master::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.desc)
}
inline std::string* copymapmaster_t_copymap_master::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:pb.copymapmaster.t_copymap_master.desc)
  return _internal_mutable_desc();
}
inline const std::string& copymapmaster_t_copymap_master::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void copymapmaster_t_copymap_master::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void copymapmaster_t_copymap_master::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.copymapmaster.t_copymap_master.desc)
}
inline void copymapmaster_t_copymap_master::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.copymapmaster.t_copymap_master.desc)
}
inline void copymapmaster_t_copymap_master::set_desc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.copymapmaster.t_copymap_master.desc)
}
inline std::string* copymapmaster_t_copymap_master::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000008u;
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* copymapmaster_t_copymap_master::release_desc() {
  // @@protoc_insertion_point(field_release:pb.copymapmaster.t_copymap_master.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return desc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void copymapmaster_t_copymap_master::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.copymapmaster.t_copymap_master.desc)
}

// required string bossdiecameramove = 9;
inline bool copymapmaster_t_copymap_master::_internal_has_bossdiecameramove() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_bossdiecameramove() const {
  return _internal_has_bossdiecameramove();
}
inline void copymapmaster_t_copymap_master::clear_bossdiecameramove() {
  bossdiecameramove_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& copymapmaster_t_copymap_master::bossdiecameramove() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.bossdiecameramove)
  return _internal_bossdiecameramove();
}
inline void copymapmaster_t_copymap_master::set_bossdiecameramove(const std::string& value) {
  _internal_set_bossdiecameramove(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.bossdiecameramove)
}
inline std::string* copymapmaster_t_copymap_master::mutable_bossdiecameramove() {
  // @@protoc_insertion_point(field_mutable:pb.copymapmaster.t_copymap_master.bossdiecameramove)
  return _internal_mutable_bossdiecameramove();
}
inline const std::string& copymapmaster_t_copymap_master::_internal_bossdiecameramove() const {
  return bossdiecameramove_.GetNoArena();
}
inline void copymapmaster_t_copymap_master::_internal_set_bossdiecameramove(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  bossdiecameramove_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void copymapmaster_t_copymap_master::set_bossdiecameramove(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  bossdiecameramove_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.copymapmaster.t_copymap_master.bossdiecameramove)
}
inline void copymapmaster_t_copymap_master::set_bossdiecameramove(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  bossdiecameramove_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.copymapmaster.t_copymap_master.bossdiecameramove)
}
inline void copymapmaster_t_copymap_master::set_bossdiecameramove(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  bossdiecameramove_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.copymapmaster.t_copymap_master.bossdiecameramove)
}
inline std::string* copymapmaster_t_copymap_master::_internal_mutable_bossdiecameramove() {
  _has_bits_[0] |= 0x00000010u;
  return bossdiecameramove_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* copymapmaster_t_copymap_master::release_bossdiecameramove() {
  // @@protoc_insertion_point(field_release:pb.copymapmaster.t_copymap_master.bossdiecameramove)
  if (!_internal_has_bossdiecameramove()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return bossdiecameramove_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void copymapmaster_t_copymap_master::set_allocated_bossdiecameramove(std::string* bossdiecameramove) {
  if (bossdiecameramove != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  bossdiecameramove_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bossdiecameramove);
  // @@protoc_insertion_point(field_set_allocated:pb.copymapmaster.t_copymap_master.bossdiecameramove)
}

// required uint32 type = 10;
inline bool copymapmaster_t_copymap_master::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_type() const {
  return _internal_has_type();
}
inline void copymapmaster_t_copymap_master::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::type() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.type)
  return _internal_type();
}
inline void copymapmaster_t_copymap_master::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  type_ = value;
}
inline void copymapmaster_t_copymap_master::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.type)
}

// required string first_award = 11;
inline bool copymapmaster_t_copymap_master::_internal_has_first_award() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_first_award() const {
  return _internal_has_first_award();
}
inline void copymapmaster_t_copymap_master::clear_first_award() {
  first_award_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& copymapmaster_t_copymap_master::first_award() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.first_award)
  return _internal_first_award();
}
inline void copymapmaster_t_copymap_master::set_first_award(const std::string& value) {
  _internal_set_first_award(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.first_award)
}
inline std::string* copymapmaster_t_copymap_master::mutable_first_award() {
  // @@protoc_insertion_point(field_mutable:pb.copymapmaster.t_copymap_master.first_award)
  return _internal_mutable_first_award();
}
inline const std::string& copymapmaster_t_copymap_master::_internal_first_award() const {
  return first_award_.GetNoArena();
}
inline void copymapmaster_t_copymap_master::_internal_set_first_award(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  first_award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void copymapmaster_t_copymap_master::set_first_award(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  first_award_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.copymapmaster.t_copymap_master.first_award)
}
inline void copymapmaster_t_copymap_master::set_first_award(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  first_award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.copymapmaster.t_copymap_master.first_award)
}
inline void copymapmaster_t_copymap_master::set_first_award(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  first_award_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.copymapmaster.t_copymap_master.first_award)
}
inline std::string* copymapmaster_t_copymap_master::_internal_mutable_first_award() {
  _has_bits_[0] |= 0x00000020u;
  return first_award_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* copymapmaster_t_copymap_master::release_first_award() {
  // @@protoc_insertion_point(field_release:pb.copymapmaster.t_copymap_master.first_award)
  if (!_internal_has_first_award()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return first_award_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void copymapmaster_t_copymap_master::set_allocated_first_award(std::string* first_award) {
  if (first_award != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  first_award_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_award);
  // @@protoc_insertion_point(field_set_allocated:pb.copymapmaster.t_copymap_master.first_award)
}

// required uint32 recommand_fight = 12;
inline bool copymapmaster_t_copymap_master::_internal_has_recommand_fight() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_recommand_fight() const {
  return _internal_has_recommand_fight();
}
inline void copymapmaster_t_copymap_master::clear_recommand_fight() {
  recommand_fight_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_recommand_fight() const {
  return recommand_fight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::recommand_fight() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.recommand_fight)
  return _internal_recommand_fight();
}
inline void copymapmaster_t_copymap_master::_internal_set_recommand_fight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  recommand_fight_ = value;
}
inline void copymapmaster_t_copymap_master::set_recommand_fight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recommand_fight(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.recommand_fight)
}

// required uint32 teammode = 13;
inline bool copymapmaster_t_copymap_master::_internal_has_teammode() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_teammode() const {
  return _internal_has_teammode();
}
inline void copymapmaster_t_copymap_master::clear_teammode() {
  teammode_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_teammode() const {
  return teammode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::teammode() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.teammode)
  return _internal_teammode();
}
inline void copymapmaster_t_copymap_master::_internal_set_teammode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  teammode_ = value;
}
inline void copymapmaster_t_copymap_master::set_teammode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teammode(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.teammode)
}

// required string assist_npc = 14;
inline bool copymapmaster_t_copymap_master::_internal_has_assist_npc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_assist_npc() const {
  return _internal_has_assist_npc();
}
inline void copymapmaster_t_copymap_master::clear_assist_npc() {
  assist_npc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& copymapmaster_t_copymap_master::assist_npc() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.assist_npc)
  return _internal_assist_npc();
}
inline void copymapmaster_t_copymap_master::set_assist_npc(const std::string& value) {
  _internal_set_assist_npc(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.assist_npc)
}
inline std::string* copymapmaster_t_copymap_master::mutable_assist_npc() {
  // @@protoc_insertion_point(field_mutable:pb.copymapmaster.t_copymap_master.assist_npc)
  return _internal_mutable_assist_npc();
}
inline const std::string& copymapmaster_t_copymap_master::_internal_assist_npc() const {
  return assist_npc_.GetNoArena();
}
inline void copymapmaster_t_copymap_master::_internal_set_assist_npc(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  assist_npc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void copymapmaster_t_copymap_master::set_assist_npc(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  assist_npc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.copymapmaster.t_copymap_master.assist_npc)
}
inline void copymapmaster_t_copymap_master::set_assist_npc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  assist_npc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.copymapmaster.t_copymap_master.assist_npc)
}
inline void copymapmaster_t_copymap_master::set_assist_npc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  assist_npc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.copymapmaster.t_copymap_master.assist_npc)
}
inline std::string* copymapmaster_t_copymap_master::_internal_mutable_assist_npc() {
  _has_bits_[0] |= 0x00000040u;
  return assist_npc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* copymapmaster_t_copymap_master::release_assist_npc() {
  // @@protoc_insertion_point(field_release:pb.copymapmaster.t_copymap_master.assist_npc)
  if (!_internal_has_assist_npc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return assist_npc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void copymapmaster_t_copymap_master::set_allocated_assist_npc(std::string* assist_npc) {
  if (assist_npc != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  assist_npc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assist_npc);
  // @@protoc_insertion_point(field_set_allocated:pb.copymapmaster.t_copymap_master.assist_npc)
}

// required bool Autoenter = 15;
inline bool copymapmaster_t_copymap_master::_internal_has_autoenter() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_autoenter() const {
  return _internal_has_autoenter();
}
inline void copymapmaster_t_copymap_master::clear_autoenter() {
  autoenter_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool copymapmaster_t_copymap_master::_internal_autoenter() const {
  return autoenter_;
}
inline bool copymapmaster_t_copymap_master::autoenter() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.Autoenter)
  return _internal_autoenter();
}
inline void copymapmaster_t_copymap_master::_internal_set_autoenter(bool value) {
  _has_bits_[0] |= 0x00004000u;
  autoenter_ = value;
}
inline void copymapmaster_t_copymap_master::set_autoenter(bool value) {
  _internal_set_autoenter(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.Autoenter)
}

// required uint32 chatchannel = 16;
inline bool copymapmaster_t_copymap_master::_internal_has_chatchannel() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_chatchannel() const {
  return _internal_has_chatchannel();
}
inline void copymapmaster_t_copymap_master::clear_chatchannel() {
  chatchannel_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_chatchannel() const {
  return chatchannel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::chatchannel() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.chatchannel)
  return _internal_chatchannel();
}
inline void copymapmaster_t_copymap_master::_internal_set_chatchannel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  chatchannel_ = value;
}
inline void copymapmaster_t_copymap_master::set_chatchannel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chatchannel(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.chatchannel)
}

// required uint32 daytimesuclimit = 17;
inline bool copymapmaster_t_copymap_master::_internal_has_daytimesuclimit() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_daytimesuclimit() const {
  return _internal_has_daytimesuclimit();
}
inline void copymapmaster_t_copymap_master::clear_daytimesuclimit() {
  daytimesuclimit_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_daytimesuclimit() const {
  return daytimesuclimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::daytimesuclimit() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.daytimesuclimit)
  return _internal_daytimesuclimit();
}
inline void copymapmaster_t_copymap_master::_internal_set_daytimesuclimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  daytimesuclimit_ = value;
}
inline void copymapmaster_t_copymap_master::set_daytimesuclimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_daytimesuclimit(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.daytimesuclimit)
}

// required uint32 explvllimit = 18;
inline bool copymapmaster_t_copymap_master::_internal_has_explvllimit() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_explvllimit() const {
  return _internal_has_explvllimit();
}
inline void copymapmaster_t_copymap_master::clear_explvllimit() {
  explvllimit_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_explvllimit() const {
  return explvllimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::explvllimit() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.explvllimit)
  return _internal_explvllimit();
}
inline void copymapmaster_t_copymap_master::_internal_set_explvllimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  explvllimit_ = value;
}
inline void copymapmaster_t_copymap_master::set_explvllimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_explvllimit(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.explvllimit)
}

// required uint32 originonly = 19;
inline bool copymapmaster_t_copymap_master::_internal_has_originonly() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool copymapmaster_t_copymap_master::has_originonly() const {
  return _internal_has_originonly();
}
inline void copymapmaster_t_copymap_master::clear_originonly() {
  originonly_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::_internal_originonly() const {
  return originonly_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 copymapmaster_t_copymap_master::originonly() const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.t_copymap_master.originonly)
  return _internal_originonly();
}
inline void copymapmaster_t_copymap_master::_internal_set_originonly(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  originonly_ = value;
}
inline void copymapmaster_t_copymap_master::set_originonly(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_originonly(value);
  // @@protoc_insertion_point(field_set:pb.copymapmaster.t_copymap_master.originonly)
}

// -------------------------------------------------------------------

// copymapmaster

// repeated .pb.copymapmaster.t_copymap_master datas = 1;
inline int copymapmaster::_internal_datas_size() const {
  return datas_.size();
}
inline int copymapmaster::datas_size() const {
  return _internal_datas_size();
}
inline void copymapmaster::clear_datas() {
  datas_.Clear();
}
inline ::pb::copymapmaster_t_copymap_master* copymapmaster::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.copymapmaster.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::copymapmaster_t_copymap_master >*
copymapmaster::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.copymapmaster.datas)
  return &datas_;
}
inline const ::pb::copymapmaster_t_copymap_master& copymapmaster::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::copymapmaster_t_copymap_master& copymapmaster::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.copymapmaster.datas)
  return _internal_datas(index);
}
inline ::pb::copymapmaster_t_copymap_master* copymapmaster::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::copymapmaster_t_copymap_master* copymapmaster::add_datas() {
  // @@protoc_insertion_point(field_add:pb.copymapmaster.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::copymapmaster_t_copymap_master >&
copymapmaster::datas() const {
  // @@protoc_insertion_point(field_list:pb.copymapmaster.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_copymapmaster_2eproto
