// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entanglement_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_entanglement_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_entanglement_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_entanglement_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_entanglement_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_entanglement_5fconfig_2eproto;
namespace pb {
class entanglement_config;
class entanglement_configDefaultTypeInternal;
extern entanglement_configDefaultTypeInternal _entanglement_config_default_instance_;
class entanglement_config_t_entanglement_config;
class entanglement_config_t_entanglement_configDefaultTypeInternal;
extern entanglement_config_t_entanglement_configDefaultTypeInternal _entanglement_config_t_entanglement_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::entanglement_config* Arena::CreateMaybeMessage<::pb::entanglement_config>(Arena*);
template<> ::pb::entanglement_config_t_entanglement_config* Arena::CreateMaybeMessage<::pb::entanglement_config_t_entanglement_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class entanglement_config_t_entanglement_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.entanglement_config.t_entanglement_config) */ {
 public:
  entanglement_config_t_entanglement_config();
  virtual ~entanglement_config_t_entanglement_config();

  entanglement_config_t_entanglement_config(const entanglement_config_t_entanglement_config& from);
  entanglement_config_t_entanglement_config(entanglement_config_t_entanglement_config&& from) noexcept
    : entanglement_config_t_entanglement_config() {
    *this = ::std::move(from);
  }

  inline entanglement_config_t_entanglement_config& operator=(const entanglement_config_t_entanglement_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline entanglement_config_t_entanglement_config& operator=(entanglement_config_t_entanglement_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const entanglement_config_t_entanglement_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const entanglement_config_t_entanglement_config* internal_default_instance() {
    return reinterpret_cast<const entanglement_config_t_entanglement_config*>(
               &_entanglement_config_t_entanglement_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(entanglement_config_t_entanglement_config& a, entanglement_config_t_entanglement_config& b) {
    a.Swap(&b);
  }
  inline void Swap(entanglement_config_t_entanglement_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline entanglement_config_t_entanglement_config* New() const final {
    return CreateMaybeMessage<entanglement_config_t_entanglement_config>(nullptr);
  }

  entanglement_config_t_entanglement_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<entanglement_config_t_entanglement_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const entanglement_config_t_entanglement_config& from);
  void MergeFrom(const entanglement_config_t_entanglement_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(entanglement_config_t_entanglement_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.entanglement_config.t_entanglement_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entanglement_5fconfig_2eproto);
    return ::descriptor_table_entanglement_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kDescribeFieldNumber = 4,
    kHeroFieldNumber = 5,
    kPropertyFieldNumber = 6,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // required string Name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string Describe = 4;
  bool has_describe() const;
  private:
  bool _internal_has_describe() const;
  public:
  void clear_describe();
  const std::string& describe() const;
  void set_describe(const std::string& value);
  void set_describe(std::string&& value);
  void set_describe(const char* value);
  void set_describe(const char* value, size_t size);
  std::string* mutable_describe();
  std::string* release_describe();
  void set_allocated_describe(std::string* describe);
  private:
  const std::string& _internal_describe() const;
  void _internal_set_describe(const std::string& value);
  std::string* _internal_mutable_describe();
  public:

  // required string Hero = 5;
  bool has_hero() const;
  private:
  bool _internal_has_hero() const;
  public:
  void clear_hero();
  const std::string& hero() const;
  void set_hero(const std::string& value);
  void set_hero(std::string&& value);
  void set_hero(const char* value);
  void set_hero(const char* value, size_t size);
  std::string* mutable_hero();
  std::string* release_hero();
  void set_allocated_hero(std::string* hero);
  private:
  const std::string& _internal_hero() const;
  void _internal_set_hero(const std::string& value);
  std::string* _internal_mutable_hero();
  public:

  // required string Property = 6;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const std::string& property() const;
  void set_property(const std::string& value);
  void set_property(std::string&& value);
  void set_property(const char* value);
  void set_property(const char* value, size_t size);
  std::string* mutable_property();
  std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.entanglement_config.t_entanglement_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr describe_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hero_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_entanglement_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class entanglement_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.entanglement_config) */ {
 public:
  entanglement_config();
  virtual ~entanglement_config();

  entanglement_config(const entanglement_config& from);
  entanglement_config(entanglement_config&& from) noexcept
    : entanglement_config() {
    *this = ::std::move(from);
  }

  inline entanglement_config& operator=(const entanglement_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline entanglement_config& operator=(entanglement_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const entanglement_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const entanglement_config* internal_default_instance() {
    return reinterpret_cast<const entanglement_config*>(
               &_entanglement_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(entanglement_config& a, entanglement_config& b) {
    a.Swap(&b);
  }
  inline void Swap(entanglement_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline entanglement_config* New() const final {
    return CreateMaybeMessage<entanglement_config>(nullptr);
  }

  entanglement_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<entanglement_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const entanglement_config& from);
  void MergeFrom(const entanglement_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(entanglement_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.entanglement_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_entanglement_5fconfig_2eproto);
    return ::descriptor_table_entanglement_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef entanglement_config_t_entanglement_config t_entanglement_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.entanglement_config.t_entanglement_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::entanglement_config_t_entanglement_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::entanglement_config_t_entanglement_config >*
      mutable_datas();
  private:
  const ::pb::entanglement_config_t_entanglement_config& _internal_datas(int index) const;
  ::pb::entanglement_config_t_entanglement_config* _internal_add_datas();
  public:
  const ::pb::entanglement_config_t_entanglement_config& datas(int index) const;
  ::pb::entanglement_config_t_entanglement_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::entanglement_config_t_entanglement_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.entanglement_config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::entanglement_config_t_entanglement_config > datas_;
  friend struct ::TableStruct_entanglement_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// entanglement_config_t_entanglement_config

// required uint32 tbxid = 1 [default = 0];
inline bool entanglement_config_t_entanglement_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool entanglement_config_t_entanglement_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void entanglement_config_t_entanglement_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 entanglement_config_t_entanglement_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 entanglement_config_t_entanglement_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.entanglement_config.t_entanglement_config.tbxid)
  return _internal_tbxid();
}
inline void entanglement_config_t_entanglement_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tbxid_ = value;
}
inline void entanglement_config_t_entanglement_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.entanglement_config.t_entanglement_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool entanglement_config_t_entanglement_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool entanglement_config_t_entanglement_config::has_id() const {
  return _internal_has_id();
}
inline void entanglement_config_t_entanglement_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 entanglement_config_t_entanglement_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 entanglement_config_t_entanglement_config::id() const {
  // @@protoc_insertion_point(field_get:pb.entanglement_config.t_entanglement_config.id)
  return _internal_id();
}
inline void entanglement_config_t_entanglement_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
}
inline void entanglement_config_t_entanglement_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.entanglement_config.t_entanglement_config.id)
}

// required string Name = 3;
inline bool entanglement_config_t_entanglement_config::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool entanglement_config_t_entanglement_config::has_name() const {
  return _internal_has_name();
}
inline void entanglement_config_t_entanglement_config::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& entanglement_config_t_entanglement_config::name() const {
  // @@protoc_insertion_point(field_get:pb.entanglement_config.t_entanglement_config.Name)
  return _internal_name();
}
inline void entanglement_config_t_entanglement_config::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.entanglement_config.t_entanglement_config.Name)
}
inline std::string* entanglement_config_t_entanglement_config::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.entanglement_config.t_entanglement_config.Name)
  return _internal_mutable_name();
}
inline const std::string& entanglement_config_t_entanglement_config::_internal_name() const {
  return name_.GetNoArena();
}
inline void entanglement_config_t_entanglement_config::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void entanglement_config_t_entanglement_config::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.entanglement_config.t_entanglement_config.Name)
}
inline void entanglement_config_t_entanglement_config::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.entanglement_config.t_entanglement_config.Name)
}
inline void entanglement_config_t_entanglement_config::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.entanglement_config.t_entanglement_config.Name)
}
inline std::string* entanglement_config_t_entanglement_config::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* entanglement_config_t_entanglement_config::release_name() {
  // @@protoc_insertion_point(field_release:pb.entanglement_config.t_entanglement_config.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void entanglement_config_t_entanglement_config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.entanglement_config.t_entanglement_config.Name)
}

// required string Describe = 4;
inline bool entanglement_config_t_entanglement_config::_internal_has_describe() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool entanglement_config_t_entanglement_config::has_describe() const {
  return _internal_has_describe();
}
inline void entanglement_config_t_entanglement_config::clear_describe() {
  describe_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& entanglement_config_t_entanglement_config::describe() const {
  // @@protoc_insertion_point(field_get:pb.entanglement_config.t_entanglement_config.Describe)
  return _internal_describe();
}
inline void entanglement_config_t_entanglement_config::set_describe(const std::string& value) {
  _internal_set_describe(value);
  // @@protoc_insertion_point(field_set:pb.entanglement_config.t_entanglement_config.Describe)
}
inline std::string* entanglement_config_t_entanglement_config::mutable_describe() {
  // @@protoc_insertion_point(field_mutable:pb.entanglement_config.t_entanglement_config.Describe)
  return _internal_mutable_describe();
}
inline const std::string& entanglement_config_t_entanglement_config::_internal_describe() const {
  return describe_.GetNoArena();
}
inline void entanglement_config_t_entanglement_config::_internal_set_describe(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  describe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void entanglement_config_t_entanglement_config::set_describe(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  describe_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.entanglement_config.t_entanglement_config.Describe)
}
inline void entanglement_config_t_entanglement_config::set_describe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  describe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.entanglement_config.t_entanglement_config.Describe)
}
inline void entanglement_config_t_entanglement_config::set_describe(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  describe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.entanglement_config.t_entanglement_config.Describe)
}
inline std::string* entanglement_config_t_entanglement_config::_internal_mutable_describe() {
  _has_bits_[0] |= 0x00000002u;
  return describe_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* entanglement_config_t_entanglement_config::release_describe() {
  // @@protoc_insertion_point(field_release:pb.entanglement_config.t_entanglement_config.Describe)
  if (!_internal_has_describe()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return describe_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void entanglement_config_t_entanglement_config::set_allocated_describe(std::string* describe) {
  if (describe != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  describe_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), describe);
  // @@protoc_insertion_point(field_set_allocated:pb.entanglement_config.t_entanglement_config.Describe)
}

// required string Hero = 5;
inline bool entanglement_config_t_entanglement_config::_internal_has_hero() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool entanglement_config_t_entanglement_config::has_hero() const {
  return _internal_has_hero();
}
inline void entanglement_config_t_entanglement_config::clear_hero() {
  hero_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& entanglement_config_t_entanglement_config::hero() const {
  // @@protoc_insertion_point(field_get:pb.entanglement_config.t_entanglement_config.Hero)
  return _internal_hero();
}
inline void entanglement_config_t_entanglement_config::set_hero(const std::string& value) {
  _internal_set_hero(value);
  // @@protoc_insertion_point(field_set:pb.entanglement_config.t_entanglement_config.Hero)
}
inline std::string* entanglement_config_t_entanglement_config::mutable_hero() {
  // @@protoc_insertion_point(field_mutable:pb.entanglement_config.t_entanglement_config.Hero)
  return _internal_mutable_hero();
}
inline const std::string& entanglement_config_t_entanglement_config::_internal_hero() const {
  return hero_.GetNoArena();
}
inline void entanglement_config_t_entanglement_config::_internal_set_hero(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  hero_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void entanglement_config_t_entanglement_config::set_hero(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  hero_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.entanglement_config.t_entanglement_config.Hero)
}
inline void entanglement_config_t_entanglement_config::set_hero(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  hero_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.entanglement_config.t_entanglement_config.Hero)
}
inline void entanglement_config_t_entanglement_config::set_hero(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  hero_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.entanglement_config.t_entanglement_config.Hero)
}
inline std::string* entanglement_config_t_entanglement_config::_internal_mutable_hero() {
  _has_bits_[0] |= 0x00000004u;
  return hero_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* entanglement_config_t_entanglement_config::release_hero() {
  // @@protoc_insertion_point(field_release:pb.entanglement_config.t_entanglement_config.Hero)
  if (!_internal_has_hero()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return hero_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void entanglement_config_t_entanglement_config::set_allocated_hero(std::string* hero) {
  if (hero != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hero_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hero);
  // @@protoc_insertion_point(field_set_allocated:pb.entanglement_config.t_entanglement_config.Hero)
}

// required string Property = 6;
inline bool entanglement_config_t_entanglement_config::_internal_has_property() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool entanglement_config_t_entanglement_config::has_property() const {
  return _internal_has_property();
}
inline void entanglement_config_t_entanglement_config::clear_property() {
  property_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& entanglement_config_t_entanglement_config::property() const {
  // @@protoc_insertion_point(field_get:pb.entanglement_config.t_entanglement_config.Property)
  return _internal_property();
}
inline void entanglement_config_t_entanglement_config::set_property(const std::string& value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:pb.entanglement_config.t_entanglement_config.Property)
}
inline std::string* entanglement_config_t_entanglement_config::mutable_property() {
  // @@protoc_insertion_point(field_mutable:pb.entanglement_config.t_entanglement_config.Property)
  return _internal_mutable_property();
}
inline const std::string& entanglement_config_t_entanglement_config::_internal_property() const {
  return property_.GetNoArena();
}
inline void entanglement_config_t_entanglement_config::_internal_set_property(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  property_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void entanglement_config_t_entanglement_config::set_property(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  property_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.entanglement_config.t_entanglement_config.Property)
}
inline void entanglement_config_t_entanglement_config::set_property(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  property_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.entanglement_config.t_entanglement_config.Property)
}
inline void entanglement_config_t_entanglement_config::set_property(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  property_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.entanglement_config.t_entanglement_config.Property)
}
inline std::string* entanglement_config_t_entanglement_config::_internal_mutable_property() {
  _has_bits_[0] |= 0x00000008u;
  return property_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* entanglement_config_t_entanglement_config::release_property() {
  // @@protoc_insertion_point(field_release:pb.entanglement_config.t_entanglement_config.Property)
  if (!_internal_has_property()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return property_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void entanglement_config_t_entanglement_config::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  property_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property);
  // @@protoc_insertion_point(field_set_allocated:pb.entanglement_config.t_entanglement_config.Property)
}

// -------------------------------------------------------------------

// entanglement_config

// repeated .pb.entanglement_config.t_entanglement_config datas = 1;
inline int entanglement_config::_internal_datas_size() const {
  return datas_.size();
}
inline int entanglement_config::datas_size() const {
  return _internal_datas_size();
}
inline void entanglement_config::clear_datas() {
  datas_.Clear();
}
inline ::pb::entanglement_config_t_entanglement_config* entanglement_config::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.entanglement_config.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::entanglement_config_t_entanglement_config >*
entanglement_config::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.entanglement_config.datas)
  return &datas_;
}
inline const ::pb::entanglement_config_t_entanglement_config& entanglement_config::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::entanglement_config_t_entanglement_config& entanglement_config::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.entanglement_config.datas)
  return _internal_datas(index);
}
inline ::pb::entanglement_config_t_entanglement_config* entanglement_config::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::entanglement_config_t_entanglement_config* entanglement_config::add_datas() {
  // @@protoc_insertion_point(field_add:pb.entanglement_config.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::entanglement_config_t_entanglement_config >&
entanglement_config::datas() const {
  // @@protoc_insertion_point(field_list:pb.entanglement_config.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_entanglement_5fconfig_2eproto
