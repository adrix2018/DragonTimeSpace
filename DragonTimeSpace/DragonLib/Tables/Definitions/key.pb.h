// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_key_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_key_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_key_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_key_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_key_2eproto;
namespace pb {
class key;
class keyDefaultTypeInternal;
extern keyDefaultTypeInternal _key_default_instance_;
class key_t_key;
class key_t_keyDefaultTypeInternal;
extern key_t_keyDefaultTypeInternal _key_t_key_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::key* Arena::CreateMaybeMessage<::pb::key>(Arena*);
template<> ::pb::key_t_key* Arena::CreateMaybeMessage<::pb::key_t_key>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class key_t_key :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.key.t_key) */ {
 public:
  key_t_key();
  virtual ~key_t_key();

  key_t_key(const key_t_key& from);
  key_t_key(key_t_key&& from) noexcept
    : key_t_key() {
    *this = ::std::move(from);
  }

  inline key_t_key& operator=(const key_t_key& from) {
    CopyFrom(from);
    return *this;
  }
  inline key_t_key& operator=(key_t_key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const key_t_key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const key_t_key* internal_default_instance() {
    return reinterpret_cast<const key_t_key*>(
               &_key_t_key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(key_t_key& a, key_t_key& b) {
    a.Swap(&b);
  }
  inline void Swap(key_t_key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline key_t_key* New() const final {
    return CreateMaybeMessage<key_t_key>(nullptr);
  }

  key_t_key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<key_t_key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const key_t_key& from);
  void MergeFrom(const key_t_key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(key_t_key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.key.t_key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_key_2eproto);
    return ::descriptor_table_key_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShownameFieldNumber = 4,
    kFunnameFieldNumber = 5,
    kKeycodeFieldNumber = 6,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kKeytriggertypeFieldNumber = 7,
  };
  // required string showname = 4;
  bool has_showname() const;
  private:
  bool _internal_has_showname() const;
  public:
  void clear_showname();
  const std::string& showname() const;
  void set_showname(const std::string& value);
  void set_showname(std::string&& value);
  void set_showname(const char* value);
  void set_showname(const char* value, size_t size);
  std::string* mutable_showname();
  std::string* release_showname();
  void set_allocated_showname(std::string* showname);
  private:
  const std::string& _internal_showname() const;
  void _internal_set_showname(const std::string& value);
  std::string* _internal_mutable_showname();
  public:

  // required string funname = 5;
  bool has_funname() const;
  private:
  bool _internal_has_funname() const;
  public:
  void clear_funname();
  const std::string& funname() const;
  void set_funname(const std::string& value);
  void set_funname(std::string&& value);
  void set_funname(const char* value);
  void set_funname(const char* value, size_t size);
  std::string* mutable_funname();
  std::string* release_funname();
  void set_allocated_funname(std::string* funname);
  private:
  const std::string& _internal_funname() const;
  void _internal_set_funname(const std::string& value);
  std::string* _internal_mutable_funname();
  public:

  // required string keycode = 6;
  bool has_keycode() const;
  private:
  bool _internal_has_keycode() const;
  public:
  void clear_keycode();
  const std::string& keycode() const;
  void set_keycode(const std::string& value);
  void set_keycode(std::string&& value);
  void set_keycode(const char* value);
  void set_keycode(const char* value, size_t size);
  std::string* mutable_keycode();
  std::string* release_keycode();
  void set_allocated_keycode(std::string* keycode);
  private:
  const std::string& _internal_keycode() const;
  void _internal_set_keycode(const std::string& value);
  std::string* _internal_mutable_keycode();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 keytriggertype = 7;
  bool has_keytriggertype() const;
  private:
  bool _internal_has_keytriggertype() const;
  public:
  void clear_keytriggertype();
  ::PROTOBUF_NAMESPACE_ID::uint32 keytriggertype() const;
  void set_keytriggertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keytriggertype() const;
  void _internal_set_keytriggertype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.key.t_key)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr showname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keycode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keytriggertype_;
  friend struct ::TableStruct_key_2eproto;
};
// -------------------------------------------------------------------

class key :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.key) */ {
 public:
  key();
  virtual ~key();

  key(const key& from);
  key(key&& from) noexcept
    : key() {
    *this = ::std::move(from);
  }

  inline key& operator=(const key& from) {
    CopyFrom(from);
    return *this;
  }
  inline key& operator=(key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const key* internal_default_instance() {
    return reinterpret_cast<const key*>(
               &_key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(key& a, key& b) {
    a.Swap(&b);
  }
  inline void Swap(key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline key* New() const final {
    return CreateMaybeMessage<key>(nullptr);
  }

  key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const key& from);
  void MergeFrom(const key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_key_2eproto);
    return ::descriptor_table_key_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef key_t_key t_key;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.key.t_key datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::key_t_key* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::key_t_key >*
      mutable_datas();
  private:
  const ::pb::key_t_key& _internal_datas(int index) const;
  ::pb::key_t_key* _internal_add_datas();
  public:
  const ::pb::key_t_key& datas(int index) const;
  ::pb::key_t_key* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::key_t_key >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.key)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::key_t_key > datas_;
  friend struct ::TableStruct_key_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// key_t_key

// required uint32 tbxid = 1 [default = 0];
inline bool key_t_key::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool key_t_key::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void key_t_key::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 key_t_key::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 key_t_key::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.key.t_key.tbxid)
  return _internal_tbxid();
}
inline void key_t_key::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tbxid_ = value;
}
inline void key_t_key::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.key.t_key.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool key_t_key::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool key_t_key::has_id() const {
  return _internal_has_id();
}
inline void key_t_key::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 key_t_key::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 key_t_key::id() const {
  // @@protoc_insertion_point(field_get:pb.key.t_key.id)
  return _internal_id();
}
inline void key_t_key::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void key_t_key::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.key.t_key.id)
}

// required uint32 type = 3;
inline bool key_t_key::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool key_t_key::has_type() const {
  return _internal_has_type();
}
inline void key_t_key::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 key_t_key::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 key_t_key::type() const {
  // @@protoc_insertion_point(field_get:pb.key.t_key.type)
  return _internal_type();
}
inline void key_t_key::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void key_t_key::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.key.t_key.type)
}

// required string showname = 4;
inline bool key_t_key::_internal_has_showname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool key_t_key::has_showname() const {
  return _internal_has_showname();
}
inline void key_t_key::clear_showname() {
  showname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& key_t_key::showname() const {
  // @@protoc_insertion_point(field_get:pb.key.t_key.showname)
  return _internal_showname();
}
inline void key_t_key::set_showname(const std::string& value) {
  _internal_set_showname(value);
  // @@protoc_insertion_point(field_set:pb.key.t_key.showname)
}
inline std::string* key_t_key::mutable_showname() {
  // @@protoc_insertion_point(field_mutable:pb.key.t_key.showname)
  return _internal_mutable_showname();
}
inline const std::string& key_t_key::_internal_showname() const {
  return showname_.GetNoArena();
}
inline void key_t_key::_internal_set_showname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  showname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void key_t_key::set_showname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  showname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.key.t_key.showname)
}
inline void key_t_key::set_showname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  showname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.key.t_key.showname)
}
inline void key_t_key::set_showname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  showname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.key.t_key.showname)
}
inline std::string* key_t_key::_internal_mutable_showname() {
  _has_bits_[0] |= 0x00000001u;
  return showname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* key_t_key::release_showname() {
  // @@protoc_insertion_point(field_release:pb.key.t_key.showname)
  if (!_internal_has_showname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return showname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void key_t_key::set_allocated_showname(std::string* showname) {
  if (showname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  showname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), showname);
  // @@protoc_insertion_point(field_set_allocated:pb.key.t_key.showname)
}

// required string funname = 5;
inline bool key_t_key::_internal_has_funname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool key_t_key::has_funname() const {
  return _internal_has_funname();
}
inline void key_t_key::clear_funname() {
  funname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& key_t_key::funname() const {
  // @@protoc_insertion_point(field_get:pb.key.t_key.funname)
  return _internal_funname();
}
inline void key_t_key::set_funname(const std::string& value) {
  _internal_set_funname(value);
  // @@protoc_insertion_point(field_set:pb.key.t_key.funname)
}
inline std::string* key_t_key::mutable_funname() {
  // @@protoc_insertion_point(field_mutable:pb.key.t_key.funname)
  return _internal_mutable_funname();
}
inline const std::string& key_t_key::_internal_funname() const {
  return funname_.GetNoArena();
}
inline void key_t_key::_internal_set_funname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  funname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void key_t_key::set_funname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  funname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.key.t_key.funname)
}
inline void key_t_key::set_funname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  funname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.key.t_key.funname)
}
inline void key_t_key::set_funname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  funname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.key.t_key.funname)
}
inline std::string* key_t_key::_internal_mutable_funname() {
  _has_bits_[0] |= 0x00000002u;
  return funname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* key_t_key::release_funname() {
  // @@protoc_insertion_point(field_release:pb.key.t_key.funname)
  if (!_internal_has_funname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return funname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void key_t_key::set_allocated_funname(std::string* funname) {
  if (funname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  funname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), funname);
  // @@protoc_insertion_point(field_set_allocated:pb.key.t_key.funname)
}

// required string keycode = 6;
inline bool key_t_key::_internal_has_keycode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool key_t_key::has_keycode() const {
  return _internal_has_keycode();
}
inline void key_t_key::clear_keycode() {
  keycode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& key_t_key::keycode() const {
  // @@protoc_insertion_point(field_get:pb.key.t_key.keycode)
  return _internal_keycode();
}
inline void key_t_key::set_keycode(const std::string& value) {
  _internal_set_keycode(value);
  // @@protoc_insertion_point(field_set:pb.key.t_key.keycode)
}
inline std::string* key_t_key::mutable_keycode() {
  // @@protoc_insertion_point(field_mutable:pb.key.t_key.keycode)
  return _internal_mutable_keycode();
}
inline const std::string& key_t_key::_internal_keycode() const {
  return keycode_.GetNoArena();
}
inline void key_t_key::_internal_set_keycode(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  keycode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void key_t_key::set_keycode(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  keycode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.key.t_key.keycode)
}
inline void key_t_key::set_keycode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  keycode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.key.t_key.keycode)
}
inline void key_t_key::set_keycode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  keycode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.key.t_key.keycode)
}
inline std::string* key_t_key::_internal_mutable_keycode() {
  _has_bits_[0] |= 0x00000004u;
  return keycode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* key_t_key::release_keycode() {
  // @@protoc_insertion_point(field_release:pb.key.t_key.keycode)
  if (!_internal_has_keycode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return keycode_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void key_t_key::set_allocated_keycode(std::string* keycode) {
  if (keycode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  keycode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keycode);
  // @@protoc_insertion_point(field_set_allocated:pb.key.t_key.keycode)
}

// required uint32 keytriggertype = 7;
inline bool key_t_key::_internal_has_keytriggertype() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool key_t_key::has_keytriggertype() const {
  return _internal_has_keytriggertype();
}
inline void key_t_key::clear_keytriggertype() {
  keytriggertype_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 key_t_key::_internal_keytriggertype() const {
  return keytriggertype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 key_t_key::keytriggertype() const {
  // @@protoc_insertion_point(field_get:pb.key.t_key.keytriggertype)
  return _internal_keytriggertype();
}
inline void key_t_key::_internal_set_keytriggertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  keytriggertype_ = value;
}
inline void key_t_key::set_keytriggertype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keytriggertype(value);
  // @@protoc_insertion_point(field_set:pb.key.t_key.keytriggertype)
}

// -------------------------------------------------------------------

// key

// repeated .pb.key.t_key datas = 1;
inline int key::_internal_datas_size() const {
  return datas_.size();
}
inline int key::datas_size() const {
  return _internal_datas_size();
}
inline void key::clear_datas() {
  datas_.Clear();
}
inline ::pb::key_t_key* key::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.key.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::key_t_key >*
key::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.key.datas)
  return &datas_;
}
inline const ::pb::key_t_key& key::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::key_t_key& key::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.key.datas)
  return _internal_datas(index);
}
inline ::pb::key_t_key* key::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::key_t_key* key::add_datas() {
  // @@protoc_insertion_point(field_add:pb.key.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::key_t_key >&
key::datas() const {
  // @@protoc_insertion_point(field_list:pb.key.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_key_2eproto
