// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carddata_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_carddata_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_carddata_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_carddata_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_carddata_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_carddata_5fconfig_2eproto;
namespace pb {
class carddata_config;
class carddata_configDefaultTypeInternal;
extern carddata_configDefaultTypeInternal _carddata_config_default_instance_;
class carddata_config_t_carddata_config;
class carddata_config_t_carddata_configDefaultTypeInternal;
extern carddata_config_t_carddata_configDefaultTypeInternal _carddata_config_t_carddata_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::carddata_config* Arena::CreateMaybeMessage<::pb::carddata_config>(Arena*);
template<> ::pb::carddata_config_t_carddata_config* Arena::CreateMaybeMessage<::pb::carddata_config_t_carddata_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class carddata_config_t_carddata_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.carddata_config.t_carddata_config) */ {
 public:
  carddata_config_t_carddata_config();
  virtual ~carddata_config_t_carddata_config();

  carddata_config_t_carddata_config(const carddata_config_t_carddata_config& from);
  carddata_config_t_carddata_config(carddata_config_t_carddata_config&& from) noexcept
    : carddata_config_t_carddata_config() {
    *this = ::std::move(from);
  }

  inline carddata_config_t_carddata_config& operator=(const carddata_config_t_carddata_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline carddata_config_t_carddata_config& operator=(carddata_config_t_carddata_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const carddata_config_t_carddata_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const carddata_config_t_carddata_config* internal_default_instance() {
    return reinterpret_cast<const carddata_config_t_carddata_config*>(
               &_carddata_config_t_carddata_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(carddata_config_t_carddata_config& a, carddata_config_t_carddata_config& b) {
    a.Swap(&b);
  }
  inline void Swap(carddata_config_t_carddata_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline carddata_config_t_carddata_config* New() const final {
    return CreateMaybeMessage<carddata_config_t_carddata_config>(nullptr);
  }

  carddata_config_t_carddata_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<carddata_config_t_carddata_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const carddata_config_t_carddata_config& from);
  void MergeFrom(const carddata_config_t_carddata_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(carddata_config_t_carddata_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.carddata_config.t_carddata_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_carddata_5fconfig_2eproto);
    return ::descriptor_table_carddata_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandskillgroupFieldNumber = 10,
    kRandskillnumFieldNumber = 11,
    kRandtriggergroupFieldNumber = 12,
    kRandtriggernumFieldNumber = 13,
    kRandeffectgroupFieldNumber = 14,
    kRandeffectnumFieldNumber = 15,
    kTbxidFieldNumber = 1,
    kCardidFieldNumber = 2,
    kCardtypeFieldNumber = 3,
    kCardgroupFieldNumber = 4,
    kCardstarFieldNumber = 5,
    kDecomposidFieldNumber = 6,
    kFixedeffectid1FieldNumber = 7,
    kFixedeffectid2FieldNumber = 8,
    kFixedeffectid3FieldNumber = 9,
    kMaxdurableFieldNumber = 16,
  };
  // required string randskillgroup = 10;
  bool has_randskillgroup() const;
  private:
  bool _internal_has_randskillgroup() const;
  public:
  void clear_randskillgroup();
  const std::string& randskillgroup() const;
  void set_randskillgroup(const std::string& value);
  void set_randskillgroup(std::string&& value);
  void set_randskillgroup(const char* value);
  void set_randskillgroup(const char* value, size_t size);
  std::string* mutable_randskillgroup();
  std::string* release_randskillgroup();
  void set_allocated_randskillgroup(std::string* randskillgroup);
  private:
  const std::string& _internal_randskillgroup() const;
  void _internal_set_randskillgroup(const std::string& value);
  std::string* _internal_mutable_randskillgroup();
  public:

  // required string randskillnum = 11;
  bool has_randskillnum() const;
  private:
  bool _internal_has_randskillnum() const;
  public:
  void clear_randskillnum();
  const std::string& randskillnum() const;
  void set_randskillnum(const std::string& value);
  void set_randskillnum(std::string&& value);
  void set_randskillnum(const char* value);
  void set_randskillnum(const char* value, size_t size);
  std::string* mutable_randskillnum();
  std::string* release_randskillnum();
  void set_allocated_randskillnum(std::string* randskillnum);
  private:
  const std::string& _internal_randskillnum() const;
  void _internal_set_randskillnum(const std::string& value);
  std::string* _internal_mutable_randskillnum();
  public:

  // required string randtriggergroup = 12;
  bool has_randtriggergroup() const;
  private:
  bool _internal_has_randtriggergroup() const;
  public:
  void clear_randtriggergroup();
  const std::string& randtriggergroup() const;
  void set_randtriggergroup(const std::string& value);
  void set_randtriggergroup(std::string&& value);
  void set_randtriggergroup(const char* value);
  void set_randtriggergroup(const char* value, size_t size);
  std::string* mutable_randtriggergroup();
  std::string* release_randtriggergroup();
  void set_allocated_randtriggergroup(std::string* randtriggergroup);
  private:
  const std::string& _internal_randtriggergroup() const;
  void _internal_set_randtriggergroup(const std::string& value);
  std::string* _internal_mutable_randtriggergroup();
  public:

  // required string randtriggernum = 13;
  bool has_randtriggernum() const;
  private:
  bool _internal_has_randtriggernum() const;
  public:
  void clear_randtriggernum();
  const std::string& randtriggernum() const;
  void set_randtriggernum(const std::string& value);
  void set_randtriggernum(std::string&& value);
  void set_randtriggernum(const char* value);
  void set_randtriggernum(const char* value, size_t size);
  std::string* mutable_randtriggernum();
  std::string* release_randtriggernum();
  void set_allocated_randtriggernum(std::string* randtriggernum);
  private:
  const std::string& _internal_randtriggernum() const;
  void _internal_set_randtriggernum(const std::string& value);
  std::string* _internal_mutable_randtriggernum();
  public:

  // required string randeffectgroup = 14;
  bool has_randeffectgroup() const;
  private:
  bool _internal_has_randeffectgroup() const;
  public:
  void clear_randeffectgroup();
  const std::string& randeffectgroup() const;
  void set_randeffectgroup(const std::string& value);
  void set_randeffectgroup(std::string&& value);
  void set_randeffectgroup(const char* value);
  void set_randeffectgroup(const char* value, size_t size);
  std::string* mutable_randeffectgroup();
  std::string* release_randeffectgroup();
  void set_allocated_randeffectgroup(std::string* randeffectgroup);
  private:
  const std::string& _internal_randeffectgroup() const;
  void _internal_set_randeffectgroup(const std::string& value);
  std::string* _internal_mutable_randeffectgroup();
  public:

  // required string randeffectnum = 15;
  bool has_randeffectnum() const;
  private:
  bool _internal_has_randeffectnum() const;
  public:
  void clear_randeffectnum();
  const std::string& randeffectnum() const;
  void set_randeffectnum(const std::string& value);
  void set_randeffectnum(std::string&& value);
  void set_randeffectnum(const char* value);
  void set_randeffectnum(const char* value, size_t size);
  std::string* mutable_randeffectnum();
  std::string* release_randeffectnum();
  void set_allocated_randeffectnum(std::string* randeffectnum);
  private:
  const std::string& _internal_randeffectnum() const;
  void _internal_set_randeffectnum(const std::string& value);
  std::string* _internal_mutable_randeffectnum();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 cardid = 2 [default = 0];
  bool has_cardid() const;
  private:
  bool _internal_has_cardid() const;
  public:
  void clear_cardid();
  ::PROTOBUF_NAMESPACE_ID::uint32 cardid() const;
  void set_cardid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cardid() const;
  void _internal_set_cardid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 cardtype = 3;
  bool has_cardtype() const;
  private:
  bool _internal_has_cardtype() const;
  public:
  void clear_cardtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 cardtype() const;
  void set_cardtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cardtype() const;
  void _internal_set_cardtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 cardgroup = 4;
  bool has_cardgroup() const;
  private:
  bool _internal_has_cardgroup() const;
  public:
  void clear_cardgroup();
  ::PROTOBUF_NAMESPACE_ID::uint32 cardgroup() const;
  void set_cardgroup(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cardgroup() const;
  void _internal_set_cardgroup(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 cardstar = 5;
  bool has_cardstar() const;
  private:
  bool _internal_has_cardstar() const;
  public:
  void clear_cardstar();
  ::PROTOBUF_NAMESPACE_ID::uint32 cardstar() const;
  void set_cardstar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cardstar() const;
  void _internal_set_cardstar(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 decomposid = 6;
  bool has_decomposid() const;
  private:
  bool _internal_has_decomposid() const;
  public:
  void clear_decomposid();
  ::PROTOBUF_NAMESPACE_ID::uint32 decomposid() const;
  void set_decomposid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_decomposid() const;
  void _internal_set_decomposid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 fixedeffectid1 = 7;
  bool has_fixedeffectid1() const;
  private:
  bool _internal_has_fixedeffectid1() const;
  public:
  void clear_fixedeffectid1();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixedeffectid1() const;
  void set_fixedeffectid1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixedeffectid1() const;
  void _internal_set_fixedeffectid1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 fixedeffectid2 = 8;
  bool has_fixedeffectid2() const;
  private:
  bool _internal_has_fixedeffectid2() const;
  public:
  void clear_fixedeffectid2();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixedeffectid2() const;
  void set_fixedeffectid2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixedeffectid2() const;
  void _internal_set_fixedeffectid2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 fixedeffectid3 = 9;
  bool has_fixedeffectid3() const;
  private:
  bool _internal_has_fixedeffectid3() const;
  public:
  void clear_fixedeffectid3();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixedeffectid3() const;
  void set_fixedeffectid3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixedeffectid3() const;
  void _internal_set_fixedeffectid3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 maxdurable = 16;
  bool has_maxdurable() const;
  private:
  bool _internal_has_maxdurable() const;
  public:
  void clear_maxdurable();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxdurable() const;
  void set_maxdurable(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxdurable() const;
  void _internal_set_maxdurable(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.carddata_config.t_carddata_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randskillgroup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randskillnum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randtriggergroup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randtriggernum_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randeffectgroup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randeffectnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cardid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cardtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cardgroup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cardstar_;
  ::PROTOBUF_NAMESPACE_ID::uint32 decomposid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixedeffectid1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixedeffectid2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixedeffectid3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxdurable_;
  friend struct ::TableStruct_carddata_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class carddata_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.carddata_config) */ {
 public:
  carddata_config();
  virtual ~carddata_config();

  carddata_config(const carddata_config& from);
  carddata_config(carddata_config&& from) noexcept
    : carddata_config() {
    *this = ::std::move(from);
  }

  inline carddata_config& operator=(const carddata_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline carddata_config& operator=(carddata_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const carddata_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const carddata_config* internal_default_instance() {
    return reinterpret_cast<const carddata_config*>(
               &_carddata_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(carddata_config& a, carddata_config& b) {
    a.Swap(&b);
  }
  inline void Swap(carddata_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline carddata_config* New() const final {
    return CreateMaybeMessage<carddata_config>(nullptr);
  }

  carddata_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<carddata_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const carddata_config& from);
  void MergeFrom(const carddata_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(carddata_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.carddata_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_carddata_5fconfig_2eproto);
    return ::descriptor_table_carddata_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef carddata_config_t_carddata_config t_carddata_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.carddata_config.t_carddata_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::carddata_config_t_carddata_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::carddata_config_t_carddata_config >*
      mutable_datas();
  private:
  const ::pb::carddata_config_t_carddata_config& _internal_datas(int index) const;
  ::pb::carddata_config_t_carddata_config* _internal_add_datas();
  public:
  const ::pb::carddata_config_t_carddata_config& datas(int index) const;
  ::pb::carddata_config_t_carddata_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::carddata_config_t_carddata_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.carddata_config)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::carddata_config_t_carddata_config > datas_;
  friend struct ::TableStruct_carddata_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// carddata_config_t_carddata_config

// required uint32 tbxid = 1 [default = 0];
inline bool carddata_config_t_carddata_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void carddata_config_t_carddata_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.tbxid)
  return _internal_tbxid();
}
inline void carddata_config_t_carddata_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  tbxid_ = value;
}
inline void carddata_config_t_carddata_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.tbxid)
}

// required uint32 cardid = 2 [default = 0];
inline bool carddata_config_t_carddata_config::_internal_has_cardid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_cardid() const {
  return _internal_has_cardid();
}
inline void carddata_config_t_carddata_config::clear_cardid() {
  cardid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::_internal_cardid() const {
  return cardid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::cardid() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.cardid)
  return _internal_cardid();
}
inline void carddata_config_t_carddata_config::_internal_set_cardid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  cardid_ = value;
}
inline void carddata_config_t_carddata_config::set_cardid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cardid(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.cardid)
}

// required uint32 cardtype = 3;
inline bool carddata_config_t_carddata_config::_internal_has_cardtype() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_cardtype() const {
  return _internal_has_cardtype();
}
inline void carddata_config_t_carddata_config::clear_cardtype() {
  cardtype_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::_internal_cardtype() const {
  return cardtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::cardtype() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.cardtype)
  return _internal_cardtype();
}
inline void carddata_config_t_carddata_config::_internal_set_cardtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  cardtype_ = value;
}
inline void carddata_config_t_carddata_config::set_cardtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cardtype(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.cardtype)
}

// required uint32 cardgroup = 4;
inline bool carddata_config_t_carddata_config::_internal_has_cardgroup() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_cardgroup() const {
  return _internal_has_cardgroup();
}
inline void carddata_config_t_carddata_config::clear_cardgroup() {
  cardgroup_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::_internal_cardgroup() const {
  return cardgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::cardgroup() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.cardgroup)
  return _internal_cardgroup();
}
inline void carddata_config_t_carddata_config::_internal_set_cardgroup(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  cardgroup_ = value;
}
inline void carddata_config_t_carddata_config::set_cardgroup(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cardgroup(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.cardgroup)
}

// required uint32 cardstar = 5;
inline bool carddata_config_t_carddata_config::_internal_has_cardstar() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_cardstar() const {
  return _internal_has_cardstar();
}
inline void carddata_config_t_carddata_config::clear_cardstar() {
  cardstar_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::_internal_cardstar() const {
  return cardstar_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::cardstar() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.cardstar)
  return _internal_cardstar();
}
inline void carddata_config_t_carddata_config::_internal_set_cardstar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  cardstar_ = value;
}
inline void carddata_config_t_carddata_config::set_cardstar(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cardstar(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.cardstar)
}

// required uint32 decomposid = 6;
inline bool carddata_config_t_carddata_config::_internal_has_decomposid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_decomposid() const {
  return _internal_has_decomposid();
}
inline void carddata_config_t_carddata_config::clear_decomposid() {
  decomposid_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::_internal_decomposid() const {
  return decomposid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::decomposid() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.decomposid)
  return _internal_decomposid();
}
inline void carddata_config_t_carddata_config::_internal_set_decomposid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  decomposid_ = value;
}
inline void carddata_config_t_carddata_config::set_decomposid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_decomposid(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.decomposid)
}

// required uint32 fixedeffectid1 = 7;
inline bool carddata_config_t_carddata_config::_internal_has_fixedeffectid1() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_fixedeffectid1() const {
  return _internal_has_fixedeffectid1();
}
inline void carddata_config_t_carddata_config::clear_fixedeffectid1() {
  fixedeffectid1_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::_internal_fixedeffectid1() const {
  return fixedeffectid1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::fixedeffectid1() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.fixedeffectid1)
  return _internal_fixedeffectid1();
}
inline void carddata_config_t_carddata_config::_internal_set_fixedeffectid1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  fixedeffectid1_ = value;
}
inline void carddata_config_t_carddata_config::set_fixedeffectid1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixedeffectid1(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.fixedeffectid1)
}

// required uint32 fixedeffectid2 = 8;
inline bool carddata_config_t_carddata_config::_internal_has_fixedeffectid2() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_fixedeffectid2() const {
  return _internal_has_fixedeffectid2();
}
inline void carddata_config_t_carddata_config::clear_fixedeffectid2() {
  fixedeffectid2_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::_internal_fixedeffectid2() const {
  return fixedeffectid2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::fixedeffectid2() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.fixedeffectid2)
  return _internal_fixedeffectid2();
}
inline void carddata_config_t_carddata_config::_internal_set_fixedeffectid2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  fixedeffectid2_ = value;
}
inline void carddata_config_t_carddata_config::set_fixedeffectid2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixedeffectid2(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.fixedeffectid2)
}

// required uint32 fixedeffectid3 = 9;
inline bool carddata_config_t_carddata_config::_internal_has_fixedeffectid3() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_fixedeffectid3() const {
  return _internal_has_fixedeffectid3();
}
inline void carddata_config_t_carddata_config::clear_fixedeffectid3() {
  fixedeffectid3_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::_internal_fixedeffectid3() const {
  return fixedeffectid3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::fixedeffectid3() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.fixedeffectid3)
  return _internal_fixedeffectid3();
}
inline void carddata_config_t_carddata_config::_internal_set_fixedeffectid3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  fixedeffectid3_ = value;
}
inline void carddata_config_t_carddata_config::set_fixedeffectid3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixedeffectid3(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.fixedeffectid3)
}

// required string randskillgroup = 10;
inline bool carddata_config_t_carddata_config::_internal_has_randskillgroup() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_randskillgroup() const {
  return _internal_has_randskillgroup();
}
inline void carddata_config_t_carddata_config::clear_randskillgroup() {
  randskillgroup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& carddata_config_t_carddata_config::randskillgroup() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.randskillgroup)
  return _internal_randskillgroup();
}
inline void carddata_config_t_carddata_config::set_randskillgroup(const std::string& value) {
  _internal_set_randskillgroup(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.randskillgroup)
}
inline std::string* carddata_config_t_carddata_config::mutable_randskillgroup() {
  // @@protoc_insertion_point(field_mutable:pb.carddata_config.t_carddata_config.randskillgroup)
  return _internal_mutable_randskillgroup();
}
inline const std::string& carddata_config_t_carddata_config::_internal_randskillgroup() const {
  return randskillgroup_.GetNoArena();
}
inline void carddata_config_t_carddata_config::_internal_set_randskillgroup(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  randskillgroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void carddata_config_t_carddata_config::set_randskillgroup(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  randskillgroup_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.carddata_config.t_carddata_config.randskillgroup)
}
inline void carddata_config_t_carddata_config::set_randskillgroup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  randskillgroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.carddata_config.t_carddata_config.randskillgroup)
}
inline void carddata_config_t_carddata_config::set_randskillgroup(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  randskillgroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.carddata_config.t_carddata_config.randskillgroup)
}
inline std::string* carddata_config_t_carddata_config::_internal_mutable_randskillgroup() {
  _has_bits_[0] |= 0x00000001u;
  return randskillgroup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* carddata_config_t_carddata_config::release_randskillgroup() {
  // @@protoc_insertion_point(field_release:pb.carddata_config.t_carddata_config.randskillgroup)
  if (!_internal_has_randskillgroup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return randskillgroup_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void carddata_config_t_carddata_config::set_allocated_randskillgroup(std::string* randskillgroup) {
  if (randskillgroup != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  randskillgroup_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), randskillgroup);
  // @@protoc_insertion_point(field_set_allocated:pb.carddata_config.t_carddata_config.randskillgroup)
}

// required string randskillnum = 11;
inline bool carddata_config_t_carddata_config::_internal_has_randskillnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_randskillnum() const {
  return _internal_has_randskillnum();
}
inline void carddata_config_t_carddata_config::clear_randskillnum() {
  randskillnum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& carddata_config_t_carddata_config::randskillnum() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.randskillnum)
  return _internal_randskillnum();
}
inline void carddata_config_t_carddata_config::set_randskillnum(const std::string& value) {
  _internal_set_randskillnum(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.randskillnum)
}
inline std::string* carddata_config_t_carddata_config::mutable_randskillnum() {
  // @@protoc_insertion_point(field_mutable:pb.carddata_config.t_carddata_config.randskillnum)
  return _internal_mutable_randskillnum();
}
inline const std::string& carddata_config_t_carddata_config::_internal_randskillnum() const {
  return randskillnum_.GetNoArena();
}
inline void carddata_config_t_carddata_config::_internal_set_randskillnum(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  randskillnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void carddata_config_t_carddata_config::set_randskillnum(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  randskillnum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.carddata_config.t_carddata_config.randskillnum)
}
inline void carddata_config_t_carddata_config::set_randskillnum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  randskillnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.carddata_config.t_carddata_config.randskillnum)
}
inline void carddata_config_t_carddata_config::set_randskillnum(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  randskillnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.carddata_config.t_carddata_config.randskillnum)
}
inline std::string* carddata_config_t_carddata_config::_internal_mutable_randskillnum() {
  _has_bits_[0] |= 0x00000002u;
  return randskillnum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* carddata_config_t_carddata_config::release_randskillnum() {
  // @@protoc_insertion_point(field_release:pb.carddata_config.t_carddata_config.randskillnum)
  if (!_internal_has_randskillnum()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return randskillnum_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void carddata_config_t_carddata_config::set_allocated_randskillnum(std::string* randskillnum) {
  if (randskillnum != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  randskillnum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), randskillnum);
  // @@protoc_insertion_point(field_set_allocated:pb.carddata_config.t_carddata_config.randskillnum)
}

// required string randtriggergroup = 12;
inline bool carddata_config_t_carddata_config::_internal_has_randtriggergroup() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_randtriggergroup() const {
  return _internal_has_randtriggergroup();
}
inline void carddata_config_t_carddata_config::clear_randtriggergroup() {
  randtriggergroup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& carddata_config_t_carddata_config::randtriggergroup() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.randtriggergroup)
  return _internal_randtriggergroup();
}
inline void carddata_config_t_carddata_config::set_randtriggergroup(const std::string& value) {
  _internal_set_randtriggergroup(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.randtriggergroup)
}
inline std::string* carddata_config_t_carddata_config::mutable_randtriggergroup() {
  // @@protoc_insertion_point(field_mutable:pb.carddata_config.t_carddata_config.randtriggergroup)
  return _internal_mutable_randtriggergroup();
}
inline const std::string& carddata_config_t_carddata_config::_internal_randtriggergroup() const {
  return randtriggergroup_.GetNoArena();
}
inline void carddata_config_t_carddata_config::_internal_set_randtriggergroup(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  randtriggergroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void carddata_config_t_carddata_config::set_randtriggergroup(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  randtriggergroup_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.carddata_config.t_carddata_config.randtriggergroup)
}
inline void carddata_config_t_carddata_config::set_randtriggergroup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  randtriggergroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.carddata_config.t_carddata_config.randtriggergroup)
}
inline void carddata_config_t_carddata_config::set_randtriggergroup(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  randtriggergroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.carddata_config.t_carddata_config.randtriggergroup)
}
inline std::string* carddata_config_t_carddata_config::_internal_mutable_randtriggergroup() {
  _has_bits_[0] |= 0x00000004u;
  return randtriggergroup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* carddata_config_t_carddata_config::release_randtriggergroup() {
  // @@protoc_insertion_point(field_release:pb.carddata_config.t_carddata_config.randtriggergroup)
  if (!_internal_has_randtriggergroup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return randtriggergroup_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void carddata_config_t_carddata_config::set_allocated_randtriggergroup(std::string* randtriggergroup) {
  if (randtriggergroup != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  randtriggergroup_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), randtriggergroup);
  // @@protoc_insertion_point(field_set_allocated:pb.carddata_config.t_carddata_config.randtriggergroup)
}

// required string randtriggernum = 13;
inline bool carddata_config_t_carddata_config::_internal_has_randtriggernum() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_randtriggernum() const {
  return _internal_has_randtriggernum();
}
inline void carddata_config_t_carddata_config::clear_randtriggernum() {
  randtriggernum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& carddata_config_t_carddata_config::randtriggernum() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.randtriggernum)
  return _internal_randtriggernum();
}
inline void carddata_config_t_carddata_config::set_randtriggernum(const std::string& value) {
  _internal_set_randtriggernum(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.randtriggernum)
}
inline std::string* carddata_config_t_carddata_config::mutable_randtriggernum() {
  // @@protoc_insertion_point(field_mutable:pb.carddata_config.t_carddata_config.randtriggernum)
  return _internal_mutable_randtriggernum();
}
inline const std::string& carddata_config_t_carddata_config::_internal_randtriggernum() const {
  return randtriggernum_.GetNoArena();
}
inline void carddata_config_t_carddata_config::_internal_set_randtriggernum(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  randtriggernum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void carddata_config_t_carddata_config::set_randtriggernum(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  randtriggernum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.carddata_config.t_carddata_config.randtriggernum)
}
inline void carddata_config_t_carddata_config::set_randtriggernum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  randtriggernum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.carddata_config.t_carddata_config.randtriggernum)
}
inline void carddata_config_t_carddata_config::set_randtriggernum(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  randtriggernum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.carddata_config.t_carddata_config.randtriggernum)
}
inline std::string* carddata_config_t_carddata_config::_internal_mutable_randtriggernum() {
  _has_bits_[0] |= 0x00000008u;
  return randtriggernum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* carddata_config_t_carddata_config::release_randtriggernum() {
  // @@protoc_insertion_point(field_release:pb.carddata_config.t_carddata_config.randtriggernum)
  if (!_internal_has_randtriggernum()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return randtriggernum_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void carddata_config_t_carddata_config::set_allocated_randtriggernum(std::string* randtriggernum) {
  if (randtriggernum != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  randtriggernum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), randtriggernum);
  // @@protoc_insertion_point(field_set_allocated:pb.carddata_config.t_carddata_config.randtriggernum)
}

// required string randeffectgroup = 14;
inline bool carddata_config_t_carddata_config::_internal_has_randeffectgroup() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_randeffectgroup() const {
  return _internal_has_randeffectgroup();
}
inline void carddata_config_t_carddata_config::clear_randeffectgroup() {
  randeffectgroup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& carddata_config_t_carddata_config::randeffectgroup() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.randeffectgroup)
  return _internal_randeffectgroup();
}
inline void carddata_config_t_carddata_config::set_randeffectgroup(const std::string& value) {
  _internal_set_randeffectgroup(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.randeffectgroup)
}
inline std::string* carddata_config_t_carddata_config::mutable_randeffectgroup() {
  // @@protoc_insertion_point(field_mutable:pb.carddata_config.t_carddata_config.randeffectgroup)
  return _internal_mutable_randeffectgroup();
}
inline const std::string& carddata_config_t_carddata_config::_internal_randeffectgroup() const {
  return randeffectgroup_.GetNoArena();
}
inline void carddata_config_t_carddata_config::_internal_set_randeffectgroup(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  randeffectgroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void carddata_config_t_carddata_config::set_randeffectgroup(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  randeffectgroup_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.carddata_config.t_carddata_config.randeffectgroup)
}
inline void carddata_config_t_carddata_config::set_randeffectgroup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  randeffectgroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.carddata_config.t_carddata_config.randeffectgroup)
}
inline void carddata_config_t_carddata_config::set_randeffectgroup(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  randeffectgroup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.carddata_config.t_carddata_config.randeffectgroup)
}
inline std::string* carddata_config_t_carddata_config::_internal_mutable_randeffectgroup() {
  _has_bits_[0] |= 0x00000010u;
  return randeffectgroup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* carddata_config_t_carddata_config::release_randeffectgroup() {
  // @@protoc_insertion_point(field_release:pb.carddata_config.t_carddata_config.randeffectgroup)
  if (!_internal_has_randeffectgroup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return randeffectgroup_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void carddata_config_t_carddata_config::set_allocated_randeffectgroup(std::string* randeffectgroup) {
  if (randeffectgroup != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  randeffectgroup_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), randeffectgroup);
  // @@protoc_insertion_point(field_set_allocated:pb.carddata_config.t_carddata_config.randeffectgroup)
}

// required string randeffectnum = 15;
inline bool carddata_config_t_carddata_config::_internal_has_randeffectnum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_randeffectnum() const {
  return _internal_has_randeffectnum();
}
inline void carddata_config_t_carddata_config::clear_randeffectnum() {
  randeffectnum_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& carddata_config_t_carddata_config::randeffectnum() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.randeffectnum)
  return _internal_randeffectnum();
}
inline void carddata_config_t_carddata_config::set_randeffectnum(const std::string& value) {
  _internal_set_randeffectnum(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.randeffectnum)
}
inline std::string* carddata_config_t_carddata_config::mutable_randeffectnum() {
  // @@protoc_insertion_point(field_mutable:pb.carddata_config.t_carddata_config.randeffectnum)
  return _internal_mutable_randeffectnum();
}
inline const std::string& carddata_config_t_carddata_config::_internal_randeffectnum() const {
  return randeffectnum_.GetNoArena();
}
inline void carddata_config_t_carddata_config::_internal_set_randeffectnum(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  randeffectnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void carddata_config_t_carddata_config::set_randeffectnum(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  randeffectnum_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.carddata_config.t_carddata_config.randeffectnum)
}
inline void carddata_config_t_carddata_config::set_randeffectnum(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  randeffectnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.carddata_config.t_carddata_config.randeffectnum)
}
inline void carddata_config_t_carddata_config::set_randeffectnum(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  randeffectnum_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.carddata_config.t_carddata_config.randeffectnum)
}
inline std::string* carddata_config_t_carddata_config::_internal_mutable_randeffectnum() {
  _has_bits_[0] |= 0x00000020u;
  return randeffectnum_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* carddata_config_t_carddata_config::release_randeffectnum() {
  // @@protoc_insertion_point(field_release:pb.carddata_config.t_carddata_config.randeffectnum)
  if (!_internal_has_randeffectnum()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return randeffectnum_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void carddata_config_t_carddata_config::set_allocated_randeffectnum(std::string* randeffectnum) {
  if (randeffectnum != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  randeffectnum_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), randeffectnum);
  // @@protoc_insertion_point(field_set_allocated:pb.carddata_config.t_carddata_config.randeffectnum)
}

// required uint32 maxdurable = 16;
inline bool carddata_config_t_carddata_config::_internal_has_maxdurable() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool carddata_config_t_carddata_config::has_maxdurable() const {
  return _internal_has_maxdurable();
}
inline void carddata_config_t_carddata_config::clear_maxdurable() {
  maxdurable_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::_internal_maxdurable() const {
  return maxdurable_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 carddata_config_t_carddata_config::maxdurable() const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.t_carddata_config.maxdurable)
  return _internal_maxdurable();
}
inline void carddata_config_t_carddata_config::_internal_set_maxdurable(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  maxdurable_ = value;
}
inline void carddata_config_t_carddata_config::set_maxdurable(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxdurable(value);
  // @@protoc_insertion_point(field_set:pb.carddata_config.t_carddata_config.maxdurable)
}

// -------------------------------------------------------------------

// carddata_config

// repeated .pb.carddata_config.t_carddata_config datas = 1;
inline int carddata_config::_internal_datas_size() const {
  return datas_.size();
}
inline int carddata_config::datas_size() const {
  return _internal_datas_size();
}
inline void carddata_config::clear_datas() {
  datas_.Clear();
}
inline ::pb::carddata_config_t_carddata_config* carddata_config::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.carddata_config.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::carddata_config_t_carddata_config >*
carddata_config::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.carddata_config.datas)
  return &datas_;
}
inline const ::pb::carddata_config_t_carddata_config& carddata_config::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::carddata_config_t_carddata_config& carddata_config::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.carddata_config.datas)
  return _internal_datas(index);
}
inline ::pb::carddata_config_t_carddata_config* carddata_config::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::carddata_config_t_carddata_config* carddata_config::add_datas() {
  // @@protoc_insertion_point(field_add:pb.carddata_config.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::carddata_config_t_carddata_config >&
carddata_config::datas() const {
  // @@protoc_insertion_point(field_list:pb.carddata_config.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_carddata_5fconfig_2eproto
