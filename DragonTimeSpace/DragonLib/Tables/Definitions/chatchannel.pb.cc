// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatchannel.proto

#include "chatchannel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chatchannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chatchannel_t_chatchannel_chatchannel_2eproto;
namespace pb {
class chatchannel_t_chatchannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<chatchannel_t_chatchannel> _instance;
} _chatchannel_t_chatchannel_default_instance_;
class chatchannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<chatchannel> _instance;
} _chatchannel_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_chatchannel_chatchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_chatchannel_default_instance_;
    new (ptr) ::pb::chatchannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::chatchannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_chatchannel_chatchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_chatchannel_chatchannel_2eproto}, {
      &scc_info_chatchannel_t_chatchannel_chatchannel_2eproto.base,}};

static void InitDefaultsscc_info_chatchannel_t_chatchannel_chatchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_chatchannel_t_chatchannel_default_instance_;
    new (ptr) ::pb::chatchannel_t_chatchannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::chatchannel_t_chatchannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chatchannel_t_chatchannel_chatchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_chatchannel_t_chatchannel_chatchannel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chatchannel_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chatchannel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chatchannel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chatchannel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, id_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, name_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, name_short_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, levellimit_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, cdrate_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, cost_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, wordlimit_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, cachedount_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, namestyle_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel_t_chatchannel, contentstyle_),
  5,
  6,
  0,
  1,
  7,
  8,
  2,
  9,
  10,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::chatchannel, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::pb::chatchannel_t_chatchannel)},
  { 27, 33, sizeof(::pb::chatchannel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_chatchannel_t_chatchannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_chatchannel_default_instance_),
};

const char descriptor_table_protodef_chatchannel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021chatchannel.proto\022\002pb\"\222\002\n\013chatchannel\022"
  ",\n\005datas\030\001 \003(\0132\035.pb.chatchannel.t_chatch"
  "annel\032\324\001\n\rt_chatchannel\022\020\n\005tbxid\030\001 \002(\r:\001"
  "0\022\r\n\002id\030\002 \002(\r:\0010\022\014\n\004name\030\003 \002(\t\022\022\n\nname_s"
  "hort\030\004 \002(\t\022\022\n\nlevellimit\030\005 \002(\r\022\016\n\006cdrate"
  "\030\006 \002(\r\022\014\n\004cost\030\007 \002(\t\022\021\n\twordlimit\030\010 \002(\r\022"
  "\022\n\ncachedount\030\t \002(\r\022\021\n\tnamestyle\030\n \002(\t\022\024"
  "\n\014contentstyle\030\013 \002(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chatchannel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chatchannel_2eproto_sccs[2] = {
  &scc_info_chatchannel_chatchannel_2eproto.base,
  &scc_info_chatchannel_t_chatchannel_chatchannel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chatchannel_2eproto_once;
static bool descriptor_table_chatchannel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chatchannel_2eproto = {
  &descriptor_table_chatchannel_2eproto_initialized, descriptor_table_protodef_chatchannel_2eproto, "chatchannel.proto", 300,
  &descriptor_table_chatchannel_2eproto_once, descriptor_table_chatchannel_2eproto_sccs, descriptor_table_chatchannel_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_chatchannel_2eproto::offsets,
  file_level_metadata_chatchannel_2eproto, 2, file_level_enum_descriptors_chatchannel_2eproto, file_level_service_descriptors_chatchannel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chatchannel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chatchannel_2eproto)), true);
namespace pb {

// ===================================================================

void chatchannel_t_chatchannel::InitAsDefaultInstance() {
}
class chatchannel_t_chatchannel::_Internal {
 public:
  using HasBits = decltype(std::declval<chatchannel_t_chatchannel>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_short(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_levellimit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cdrate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wordlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cachedount(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_namestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contentstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

chatchannel_t_chatchannel::chatchannel_t_chatchannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.chatchannel.t_chatchannel)
}
chatchannel_t_chatchannel::chatchannel_t_chatchannel(const chatchannel_t_chatchannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  name_short_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_short()) {
    name_short_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_short_);
  }
  cost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cost()) {
    cost_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cost_);
  }
  namestyle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_namestyle()) {
    namestyle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.namestyle_);
  }
  contentstyle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_contentstyle()) {
    contentstyle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contentstyle_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cachedount_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(cachedount_));
  // @@protoc_insertion_point(copy_constructor:pb.chatchannel.t_chatchannel)
}

void chatchannel_t_chatchannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_chatchannel_t_chatchannel_chatchannel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_short_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namestyle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contentstyle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cachedount_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(cachedount_));
}

chatchannel_t_chatchannel::~chatchannel_t_chatchannel() {
  // @@protoc_insertion_point(destructor:pb.chatchannel.t_chatchannel)
  SharedDtor();
}

void chatchannel_t_chatchannel::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_short_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cost_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namestyle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contentstyle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void chatchannel_t_chatchannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const chatchannel_t_chatchannel& chatchannel_t_chatchannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_chatchannel_t_chatchannel_chatchannel_2eproto.base);
  return *internal_default_instance();
}


void chatchannel_t_chatchannel::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.chatchannel.t_chatchannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_short_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      cost_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      namestyle_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      contentstyle_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&levellimit_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(levellimit_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&cdrate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cachedount_) -
        reinterpret_cast<char*>(&cdrate_)) + sizeof(cachedount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* chatchannel_t_chatchannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&has_bits);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.chatchannel.t_chatchannel.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name_short = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name_short();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.chatchannel.t_chatchannel.name_short");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 levellimit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_levellimit(&has_bits);
          levellimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cdrate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cdrate(&has_bits);
          cdrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string cost = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_cost();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.chatchannel.t_chatchannel.cost");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 wordlimit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_wordlimit(&has_bits);
          wordlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cachedount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_cachedount(&has_bits);
          cachedount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string namestyle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_namestyle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.chatchannel.t_chatchannel.namestyle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string contentstyle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_contentstyle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.chatchannel.t_chatchannel.contentstyle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* chatchannel_t_chatchannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.chatchannel.t_chatchannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.chatchannel.t_chatchannel.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // required string name_short = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_short().data(), static_cast<int>(this->_internal_name_short().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.chatchannel.t_chatchannel.name_short");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name_short(), target);
  }

  // required uint32 levellimit = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_levellimit(), target);
  }

  // required uint32 cdrate = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cdrate(), target);
  }

  // required string cost = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cost().data(), static_cast<int>(this->_internal_cost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.chatchannel.t_chatchannel.cost");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_cost(), target);
  }

  // required uint32 wordlimit = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_wordlimit(), target);
  }

  // required uint32 cachedount = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cachedount(), target);
  }

  // required string namestyle = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_namestyle().data(), static_cast<int>(this->_internal_namestyle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.chatchannel.t_chatchannel.namestyle");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_namestyle(), target);
  }

  // required string contentstyle = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_contentstyle().data(), static_cast<int>(this->_internal_contentstyle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.chatchannel.t_chatchannel.contentstyle");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_contentstyle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.chatchannel.t_chatchannel)
  return target;
}

size_t chatchannel_t_chatchannel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.chatchannel.t_chatchannel)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_name_short()) {
    // required string name_short = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_short());
  }

  if (_internal_has_cost()) {
    // required string cost = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cost());
  }

  if (_internal_has_namestyle()) {
    // required string namestyle = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namestyle());
  }

  if (_internal_has_contentstyle()) {
    // required string contentstyle = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contentstyle());
  }

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_levellimit()) {
    // required uint32 levellimit = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levellimit());
  }

  if (_internal_has_cdrate()) {
    // required uint32 cdrate = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cdrate());
  }

  if (_internal_has_wordlimit()) {
    // required uint32 wordlimit = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wordlimit());
  }

  if (_internal_has_cachedount()) {
    // required uint32 cachedount = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cachedount());
  }

  return total_size;
}
size_t chatchannel_t_chatchannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.chatchannel.t_chatchannel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string name_short = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_short());

    // required string cost = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cost());

    // required string namestyle = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namestyle());

    // required string contentstyle = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contentstyle());

    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 levellimit = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levellimit());

    // required uint32 cdrate = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cdrate());

    // required uint32 wordlimit = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wordlimit());

    // required uint32 cachedount = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cachedount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void chatchannel_t_chatchannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.chatchannel.t_chatchannel)
  GOOGLE_DCHECK_NE(&from, this);
  const chatchannel_t_chatchannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<chatchannel_t_chatchannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.chatchannel.t_chatchannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.chatchannel.t_chatchannel)
    MergeFrom(*source);
  }
}

void chatchannel_t_chatchannel::MergeFrom(const chatchannel_t_chatchannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.chatchannel.t_chatchannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_short_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_short_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      cost_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cost_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      namestyle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.namestyle_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      contentstyle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contentstyle_);
    }
    if (cached_has_bits & 0x00000020u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      levellimit_ = from.levellimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      cdrate_ = from.cdrate_;
    }
    if (cached_has_bits & 0x00000200u) {
      wordlimit_ = from.wordlimit_;
    }
    if (cached_has_bits & 0x00000400u) {
      cachedount_ = from.cachedount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void chatchannel_t_chatchannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.chatchannel.t_chatchannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatchannel_t_chatchannel::CopyFrom(const chatchannel_t_chatchannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.chatchannel.t_chatchannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatchannel_t_chatchannel::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  return true;
}

void chatchannel_t_chatchannel::InternalSwap(chatchannel_t_chatchannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_short_.Swap(&other->name_short_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cost_.Swap(&other->cost_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  namestyle_.Swap(&other->namestyle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contentstyle_.Swap(&other->contentstyle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(levellimit_, other->levellimit_);
  swap(cdrate_, other->cdrate_);
  swap(wordlimit_, other->wordlimit_);
  swap(cachedount_, other->cachedount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata chatchannel_t_chatchannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void chatchannel::InitAsDefaultInstance() {
}
class chatchannel::_Internal {
 public:
  using HasBits = decltype(std::declval<chatchannel>()._has_bits_);
};

chatchannel::chatchannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.chatchannel)
}
chatchannel::chatchannel(const chatchannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.chatchannel)
}

void chatchannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_chatchannel_chatchannel_2eproto.base);
}

chatchannel::~chatchannel() {
  // @@protoc_insertion_point(destructor:pb.chatchannel)
  SharedDtor();
}

void chatchannel::SharedDtor() {
}

void chatchannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const chatchannel& chatchannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_chatchannel_chatchannel_2eproto.base);
  return *internal_default_instance();
}


void chatchannel::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.chatchannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* chatchannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.chatchannel.t_chatchannel datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* chatchannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.chatchannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.chatchannel.t_chatchannel datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.chatchannel)
  return target;
}

size_t chatchannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.chatchannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.chatchannel.t_chatchannel datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void chatchannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.chatchannel)
  GOOGLE_DCHECK_NE(&from, this);
  const chatchannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<chatchannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.chatchannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.chatchannel)
    MergeFrom(*source);
  }
}

void chatchannel::MergeFrom(const chatchannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.chatchannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void chatchannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.chatchannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void chatchannel::CopyFrom(const chatchannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.chatchannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool chatchannel::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void chatchannel::InternalSwap(chatchannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata chatchannel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::chatchannel_t_chatchannel* Arena::CreateMaybeMessage< ::pb::chatchannel_t_chatchannel >(Arena* arena) {
  return Arena::CreateInternal< ::pb::chatchannel_t_chatchannel >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::chatchannel* Arena::CreateMaybeMessage< ::pb::chatchannel >(Arena* arena) {
  return Arena::CreateInternal< ::pb::chatchannel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
