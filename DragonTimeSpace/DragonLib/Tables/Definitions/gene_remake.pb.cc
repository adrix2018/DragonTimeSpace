// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gene_remake.proto

#include "gene_remake.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_gene_5fremake_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_gene_remake_t_gene_remake_gene_5fremake_2eproto;
namespace pb {
class gene_remake_t_gene_remakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<gene_remake_t_gene_remake> _instance;
} _gene_remake_t_gene_remake_default_instance_;
class gene_remakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<gene_remake> _instance;
} _gene_remake_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_gene_remake_gene_5fremake_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_gene_remake_default_instance_;
    new (ptr) ::pb::gene_remake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::gene_remake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_gene_remake_gene_5fremake_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_gene_remake_gene_5fremake_2eproto}, {
      &scc_info_gene_remake_t_gene_remake_gene_5fremake_2eproto.base,}};

static void InitDefaultsscc_info_gene_remake_t_gene_remake_gene_5fremake_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_gene_remake_t_gene_remake_default_instance_;
    new (ptr) ::pb::gene_remake_t_gene_remake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::gene_remake_t_gene_remake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_gene_remake_t_gene_remake_gene_5fremake_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_gene_remake_t_gene_remake_gene_5fremake_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gene_5fremake_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_gene_5fremake_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gene_5fremake_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gene_5fremake_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, id_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, type_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, level_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, maxexp_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, user_levellimit_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, stage_count_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, cost_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, addexp_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, patt_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, matt_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, pdefence_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, mdefence_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, maxhp_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, star_attribute_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake_t_gene_remake, consume_),
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  0,
  10,
  11,
  12,
  13,
  14,
  15,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::gene_remake, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::pb::gene_remake_t_gene_remake)},
  { 37, 43, sizeof(::pb::gene_remake)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_gene_remake_t_gene_remake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_gene_remake_default_instance_),
};

const char descriptor_table_protodef_gene_5fremake_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021gene_remake.proto\022\002pb\"\337\002\n\013gene_remake\022"
  ",\n\005datas\030\001 \003(\0132\035.pb.gene_remake.t_gene_r"
  "emake\032\241\002\n\rt_gene_remake\022\020\n\005tbxid\030\001 \002(\r:\001"
  "0\022\r\n\002id\030\002 \002(\r:\0010\022\014\n\004type\030\003 \002(\r\022\r\n\005level\030"
  "\004 \002(\r\022\016\n\006maxexp\030\005 \002(\r\022\027\n\017user_levellimit"
  "\030\006 \002(\r\022\023\n\013stage_count\030\007 \002(\r\022\014\n\004cost\030\010 \002("
  "\t\022\016\n\006addexp\030\t \002(\r\022\014\n\004patt\030\n \002(\r\022\014\n\004matt\030"
  "\013 \002(\r\022\020\n\010pdefence\030\014 \002(\r\022\020\n\010mdefence\030\r \002("
  "\r\022\r\n\005maxhp\030\016 \002(\r\022\026\n\016star_attribute\030\017 \002(\t"
  "\022\017\n\007consume\030\020 \002(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gene_5fremake_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_gene_5fremake_2eproto_sccs[2] = {
  &scc_info_gene_remake_gene_5fremake_2eproto.base,
  &scc_info_gene_remake_t_gene_remake_gene_5fremake_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gene_5fremake_2eproto_once;
static bool descriptor_table_gene_5fremake_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gene_5fremake_2eproto = {
  &descriptor_table_gene_5fremake_2eproto_initialized, descriptor_table_protodef_gene_5fremake_2eproto, "gene_remake.proto", 377,
  &descriptor_table_gene_5fremake_2eproto_once, descriptor_table_gene_5fremake_2eproto_sccs, descriptor_table_gene_5fremake_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_gene_5fremake_2eproto::offsets,
  file_level_metadata_gene_5fremake_2eproto, 2, file_level_enum_descriptors_gene_5fremake_2eproto, file_level_service_descriptors_gene_5fremake_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_gene_5fremake_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_gene_5fremake_2eproto)), true);
namespace pb {

// ===================================================================

void gene_remake_t_gene_remake::InitAsDefaultInstance() {
}
class gene_remake_t_gene_remake::_Internal {
 public:
  using HasBits = decltype(std::declval<gene_remake_t_gene_remake>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_maxexp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user_levellimit(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_stage_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_addexp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_patt(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_matt(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_pdefence(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mdefence(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_star_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_consume(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

gene_remake_t_gene_remake::gene_remake_t_gene_remake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.gene_remake.t_gene_remake)
}
gene_remake_t_gene_remake::gene_remake_t_gene_remake(const gene_remake_t_gene_remake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_cost()) {
    cost_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cost_);
  }
  star_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_star_attribute()) {
    star_attribute_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.star_attribute_);
  }
  consume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_consume()) {
    consume_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.consume_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxhp_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(maxhp_));
  // @@protoc_insertion_point(copy_constructor:pb.gene_remake.t_gene_remake)
}

void gene_remake_t_gene_remake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_gene_remake_t_gene_remake_gene_5fremake_2eproto.base);
  cost_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  star_attribute_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxhp_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(maxhp_));
}

gene_remake_t_gene_remake::~gene_remake_t_gene_remake() {
  // @@protoc_insertion_point(destructor:pb.gene_remake.t_gene_remake)
  SharedDtor();
}

void gene_remake_t_gene_remake::SharedDtor() {
  cost_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  star_attribute_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consume_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void gene_remake_t_gene_remake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const gene_remake_t_gene_remake& gene_remake_t_gene_remake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_gene_remake_t_gene_remake_gene_5fremake_2eproto.base);
  return *internal_default_instance();
}


void gene_remake_t_gene_remake::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.gene_remake.t_gene_remake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cost_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      star_attribute_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      consume_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxexp_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(maxexp_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&user_levellimit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxhp_) -
        reinterpret_cast<char*>(&user_levellimit_)) + sizeof(maxhp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* gene_remake_t_gene_remake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&has_bits);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxexp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_maxexp(&has_bits);
          maxexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 user_levellimit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_user_levellimit(&has_bits);
          user_levellimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stage_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_stage_count(&has_bits);
          stage_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string cost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_cost();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.gene_remake.t_gene_remake.cost");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 addexp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_addexp(&has_bits);
          addexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 patt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_patt(&has_bits);
          patt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 matt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_matt(&has_bits);
          matt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pdefence = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_pdefence(&has_bits);
          pdefence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mdefence = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_mdefence(&has_bits);
          mdefence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxhp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string star_attribute = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_star_attribute();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.gene_remake.t_gene_remake.star_attribute");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string consume = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_consume();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.gene_remake.t_gene_remake.consume");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gene_remake_t_gene_remake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.gene_remake.t_gene_remake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required uint32 type = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // required uint32 level = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // required uint32 maxexp = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxexp(), target);
  }

  // required uint32 user_levellimit = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_user_levellimit(), target);
  }

  // required uint32 stage_count = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stage_count(), target);
  }

  // required string cost = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_cost().data(), static_cast<int>(this->_internal_cost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.gene_remake.t_gene_remake.cost");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_cost(), target);
  }

  // required uint32 addexp = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_addexp(), target);
  }

  // required uint32 patt = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_patt(), target);
  }

  // required uint32 matt = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_matt(), target);
  }

  // required uint32 pdefence = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_pdefence(), target);
  }

  // required uint32 mdefence = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_mdefence(), target);
  }

  // required uint32 maxhp = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_maxhp(), target);
  }

  // required string star_attribute = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_star_attribute().data(), static_cast<int>(this->_internal_star_attribute().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.gene_remake.t_gene_remake.star_attribute");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_star_attribute(), target);
  }

  // required string consume = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_consume().data(), static_cast<int>(this->_internal_consume().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.gene_remake.t_gene_remake.consume");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_consume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.gene_remake.t_gene_remake)
  return target;
}

size_t gene_remake_t_gene_remake::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.gene_remake.t_gene_remake)
  size_t total_size = 0;

  if (_internal_has_cost()) {
    // required string cost = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cost());
  }

  if (_internal_has_star_attribute()) {
    // required string star_attribute = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_star_attribute());
  }

  if (_internal_has_consume()) {
    // required string consume = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consume());
  }

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_type()) {
    // required uint32 type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_level()) {
    // required uint32 level = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (_internal_has_maxexp()) {
    // required uint32 maxexp = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxexp());
  }

  if (_internal_has_user_levellimit()) {
    // required uint32 user_levellimit = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_levellimit());
  }

  if (_internal_has_stage_count()) {
    // required uint32 stage_count = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stage_count());
  }

  if (_internal_has_addexp()) {
    // required uint32 addexp = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addexp());
  }

  if (_internal_has_patt()) {
    // required uint32 patt = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_patt());
  }

  if (_internal_has_matt()) {
    // required uint32 matt = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_matt());
  }

  if (_internal_has_pdefence()) {
    // required uint32 pdefence = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdefence());
  }

  if (_internal_has_mdefence()) {
    // required uint32 mdefence = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdefence());
  }

  if (_internal_has_maxhp()) {
    // required uint32 maxhp = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxhp());
  }

  return total_size;
}
size_t gene_remake_t_gene_remake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.gene_remake.t_gene_remake)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000ffff) ^ 0x0000ffff) == 0) {  // All required fields are present.
    // required string cost = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cost());

    // required string star_attribute = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_star_attribute());

    // required string consume = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consume());

    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required uint32 level = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());

    // required uint32 maxexp = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxexp());

    // required uint32 user_levellimit = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_levellimit());

    // required uint32 stage_count = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stage_count());

    // required uint32 addexp = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_addexp());

    // required uint32 patt = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_patt());

    // required uint32 matt = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_matt());

    // required uint32 pdefence = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdefence());

    // required uint32 mdefence = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdefence());

    // required uint32 maxhp = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxhp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gene_remake_t_gene_remake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.gene_remake.t_gene_remake)
  GOOGLE_DCHECK_NE(&from, this);
  const gene_remake_t_gene_remake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gene_remake_t_gene_remake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.gene_remake.t_gene_remake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.gene_remake.t_gene_remake)
    MergeFrom(*source);
  }
}

void gene_remake_t_gene_remake::MergeFrom(const gene_remake_t_gene_remake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.gene_remake.t_gene_remake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cost_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cost_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      star_attribute_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.star_attribute_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      consume_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.consume_);
    }
    if (cached_has_bits & 0x00000008u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000080u) {
      maxexp_ = from.maxexp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      user_levellimit_ = from.user_levellimit_;
    }
    if (cached_has_bits & 0x00000200u) {
      stage_count_ = from.stage_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      addexp_ = from.addexp_;
    }
    if (cached_has_bits & 0x00000800u) {
      patt_ = from.patt_;
    }
    if (cached_has_bits & 0x00001000u) {
      matt_ = from.matt_;
    }
    if (cached_has_bits & 0x00002000u) {
      pdefence_ = from.pdefence_;
    }
    if (cached_has_bits & 0x00004000u) {
      mdefence_ = from.mdefence_;
    }
    if (cached_has_bits & 0x00008000u) {
      maxhp_ = from.maxhp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gene_remake_t_gene_remake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.gene_remake.t_gene_remake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gene_remake_t_gene_remake::CopyFrom(const gene_remake_t_gene_remake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.gene_remake.t_gene_remake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gene_remake_t_gene_remake::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;
  return true;
}

void gene_remake_t_gene_remake::InternalSwap(gene_remake_t_gene_remake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cost_.Swap(&other->cost_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  star_attribute_.Swap(&other->star_attribute_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  consume_.Swap(&other->consume_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(level_, other->level_);
  swap(maxexp_, other->maxexp_);
  swap(user_levellimit_, other->user_levellimit_);
  swap(stage_count_, other->stage_count_);
  swap(addexp_, other->addexp_);
  swap(patt_, other->patt_);
  swap(matt_, other->matt_);
  swap(pdefence_, other->pdefence_);
  swap(mdefence_, other->mdefence_);
  swap(maxhp_, other->maxhp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gene_remake_t_gene_remake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void gene_remake::InitAsDefaultInstance() {
}
class gene_remake::_Internal {
 public:
  using HasBits = decltype(std::declval<gene_remake>()._has_bits_);
};

gene_remake::gene_remake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.gene_remake)
}
gene_remake::gene_remake(const gene_remake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.gene_remake)
}

void gene_remake::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_gene_remake_gene_5fremake_2eproto.base);
}

gene_remake::~gene_remake() {
  // @@protoc_insertion_point(destructor:pb.gene_remake)
  SharedDtor();
}

void gene_remake::SharedDtor() {
}

void gene_remake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const gene_remake& gene_remake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_gene_remake_gene_5fremake_2eproto.base);
  return *internal_default_instance();
}


void gene_remake::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.gene_remake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* gene_remake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.gene_remake.t_gene_remake datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* gene_remake::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.gene_remake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.gene_remake.t_gene_remake datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.gene_remake)
  return target;
}

size_t gene_remake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.gene_remake)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.gene_remake.t_gene_remake datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gene_remake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.gene_remake)
  GOOGLE_DCHECK_NE(&from, this);
  const gene_remake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gene_remake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.gene_remake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.gene_remake)
    MergeFrom(*source);
  }
}

void gene_remake::MergeFrom(const gene_remake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.gene_remake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void gene_remake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.gene_remake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gene_remake::CopyFrom(const gene_remake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.gene_remake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gene_remake::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void gene_remake::InternalSwap(gene_remake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gene_remake::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::gene_remake_t_gene_remake* Arena::CreateMaybeMessage< ::pb::gene_remake_t_gene_remake >(Arena* arena) {
  return Arena::CreateInternal< ::pb::gene_remake_t_gene_remake >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::gene_remake* Arena::CreateMaybeMessage< ::pb::gene_remake >(Arena* arena) {
  return Arena::CreateInternal< ::pb::gene_remake >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
