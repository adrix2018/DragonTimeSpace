// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relation_tbx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_relation_5ftbx_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_relation_5ftbx_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_relation_5ftbx_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_relation_5ftbx_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_relation_5ftbx_2eproto;
namespace pb {
class relation_tbx;
class relation_tbxDefaultTypeInternal;
extern relation_tbxDefaultTypeInternal _relation_tbx_default_instance_;
class relation_tbx_t_relation;
class relation_tbx_t_relationDefaultTypeInternal;
extern relation_tbx_t_relationDefaultTypeInternal _relation_tbx_t_relation_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::relation_tbx* Arena::CreateMaybeMessage<::pb::relation_tbx>(Arena*);
template<> ::pb::relation_tbx_t_relation* Arena::CreateMaybeMessage<::pb::relation_tbx_t_relation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class relation_tbx_t_relation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.relation_tbx.t_relation) */ {
 public:
  relation_tbx_t_relation();
  virtual ~relation_tbx_t_relation();

  relation_tbx_t_relation(const relation_tbx_t_relation& from);
  relation_tbx_t_relation(relation_tbx_t_relation&& from) noexcept
    : relation_tbx_t_relation() {
    *this = ::std::move(from);
  }

  inline relation_tbx_t_relation& operator=(const relation_tbx_t_relation& from) {
    CopyFrom(from);
    return *this;
  }
  inline relation_tbx_t_relation& operator=(relation_tbx_t_relation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const relation_tbx_t_relation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const relation_tbx_t_relation* internal_default_instance() {
    return reinterpret_cast<const relation_tbx_t_relation*>(
               &_relation_tbx_t_relation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(relation_tbx_t_relation& a, relation_tbx_t_relation& b) {
    a.Swap(&b);
  }
  inline void Swap(relation_tbx_t_relation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline relation_tbx_t_relation* New() const final {
    return CreateMaybeMessage<relation_tbx_t_relation>(nullptr);
  }

  relation_tbx_t_relation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<relation_tbx_t_relation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const relation_tbx_t_relation& from);
  void MergeFrom(const relation_tbx_t_relation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relation_tbx_t_relation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.relation_tbx.t_relation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_5ftbx_2eproto);
    return ::descriptor_table_relation_5ftbx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangelimitFieldNumber = 8,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kValuetypeFieldNumber = 3,
    kAddvalueFieldNumber = 4,
    kSubvalueFieldNumber = 5,
    kDaytimesFieldNumber = 6,
    kLasttimeFieldNumber = 7,
  };
  // required string rangelimit = 8;
  bool has_rangelimit() const;
  private:
  bool _internal_has_rangelimit() const;
  public:
  void clear_rangelimit();
  const std::string& rangelimit() const;
  void set_rangelimit(const std::string& value);
  void set_rangelimit(std::string&& value);
  void set_rangelimit(const char* value);
  void set_rangelimit(const char* value, size_t size);
  std::string* mutable_rangelimit();
  std::string* release_rangelimit();
  void set_allocated_rangelimit(std::string* rangelimit);
  private:
  const std::string& _internal_rangelimit() const;
  void _internal_set_rangelimit(const std::string& value);
  std::string* _internal_mutable_rangelimit();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 valuetype = 3;
  bool has_valuetype() const;
  private:
  bool _internal_has_valuetype() const;
  public:
  void clear_valuetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 valuetype() const;
  void set_valuetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_valuetype() const;
  void _internal_set_valuetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 addvalue = 4;
  bool has_addvalue() const;
  private:
  bool _internal_has_addvalue() const;
  public:
  void clear_addvalue();
  ::PROTOBUF_NAMESPACE_ID::uint32 addvalue() const;
  void set_addvalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_addvalue() const;
  void _internal_set_addvalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 subvalue = 5;
  bool has_subvalue() const;
  private:
  bool _internal_has_subvalue() const;
  public:
  void clear_subvalue();
  ::PROTOBUF_NAMESPACE_ID::uint32 subvalue() const;
  void set_subvalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subvalue() const;
  void _internal_set_subvalue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 daytimes = 6;
  bool has_daytimes() const;
  private:
  bool _internal_has_daytimes() const;
  public:
  void clear_daytimes();
  ::PROTOBUF_NAMESPACE_ID::uint32 daytimes() const;
  void set_daytimes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_daytimes() const;
  void _internal_set_daytimes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 lasttime = 7;
  bool has_lasttime() const;
  private:
  bool _internal_has_lasttime() const;
  public:
  void clear_lasttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 lasttime() const;
  void set_lasttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lasttime() const;
  void _internal_set_lasttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.relation_tbx.t_relation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rangelimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 valuetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 addvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 daytimes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lasttime_;
  friend struct ::TableStruct_relation_5ftbx_2eproto;
};
// -------------------------------------------------------------------

class relation_tbx :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.relation_tbx) */ {
 public:
  relation_tbx();
  virtual ~relation_tbx();

  relation_tbx(const relation_tbx& from);
  relation_tbx(relation_tbx&& from) noexcept
    : relation_tbx() {
    *this = ::std::move(from);
  }

  inline relation_tbx& operator=(const relation_tbx& from) {
    CopyFrom(from);
    return *this;
  }
  inline relation_tbx& operator=(relation_tbx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const relation_tbx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const relation_tbx* internal_default_instance() {
    return reinterpret_cast<const relation_tbx*>(
               &_relation_tbx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(relation_tbx& a, relation_tbx& b) {
    a.Swap(&b);
  }
  inline void Swap(relation_tbx* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline relation_tbx* New() const final {
    return CreateMaybeMessage<relation_tbx>(nullptr);
  }

  relation_tbx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<relation_tbx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const relation_tbx& from);
  void MergeFrom(const relation_tbx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(relation_tbx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.relation_tbx";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_relation_5ftbx_2eproto);
    return ::descriptor_table_relation_5ftbx_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef relation_tbx_t_relation t_relation;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.relation_tbx.t_relation datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::relation_tbx_t_relation* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::relation_tbx_t_relation >*
      mutable_datas();
  private:
  const ::pb::relation_tbx_t_relation& _internal_datas(int index) const;
  ::pb::relation_tbx_t_relation* _internal_add_datas();
  public:
  const ::pb::relation_tbx_t_relation& datas(int index) const;
  ::pb::relation_tbx_t_relation* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::relation_tbx_t_relation >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.relation_tbx)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::relation_tbx_t_relation > datas_;
  friend struct ::TableStruct_relation_5ftbx_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// relation_tbx_t_relation

// required uint32 tbxid = 1 [default = 0];
inline bool relation_tbx_t_relation::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool relation_tbx_t_relation::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void relation_tbx_t_relation::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.relation_tbx.t_relation.tbxid)
  return _internal_tbxid();
}
inline void relation_tbx_t_relation::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tbxid_ = value;
}
inline void relation_tbx_t_relation::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.relation_tbx.t_relation.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool relation_tbx_t_relation::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool relation_tbx_t_relation::has_id() const {
  return _internal_has_id();
}
inline void relation_tbx_t_relation::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::id() const {
  // @@protoc_insertion_point(field_get:pb.relation_tbx.t_relation.id)
  return _internal_id();
}
inline void relation_tbx_t_relation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void relation_tbx_t_relation::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.relation_tbx.t_relation.id)
}

// required uint32 valuetype = 3;
inline bool relation_tbx_t_relation::_internal_has_valuetype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool relation_tbx_t_relation::has_valuetype() const {
  return _internal_has_valuetype();
}
inline void relation_tbx_t_relation::clear_valuetype() {
  valuetype_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::_internal_valuetype() const {
  return valuetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::valuetype() const {
  // @@protoc_insertion_point(field_get:pb.relation_tbx.t_relation.valuetype)
  return _internal_valuetype();
}
inline void relation_tbx_t_relation::_internal_set_valuetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  valuetype_ = value;
}
inline void relation_tbx_t_relation::set_valuetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_valuetype(value);
  // @@protoc_insertion_point(field_set:pb.relation_tbx.t_relation.valuetype)
}

// required uint32 addvalue = 4;
inline bool relation_tbx_t_relation::_internal_has_addvalue() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool relation_tbx_t_relation::has_addvalue() const {
  return _internal_has_addvalue();
}
inline void relation_tbx_t_relation::clear_addvalue() {
  addvalue_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::_internal_addvalue() const {
  return addvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::addvalue() const {
  // @@protoc_insertion_point(field_get:pb.relation_tbx.t_relation.addvalue)
  return _internal_addvalue();
}
inline void relation_tbx_t_relation::_internal_set_addvalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  addvalue_ = value;
}
inline void relation_tbx_t_relation::set_addvalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_addvalue(value);
  // @@protoc_insertion_point(field_set:pb.relation_tbx.t_relation.addvalue)
}

// required uint32 subvalue = 5;
inline bool relation_tbx_t_relation::_internal_has_subvalue() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool relation_tbx_t_relation::has_subvalue() const {
  return _internal_has_subvalue();
}
inline void relation_tbx_t_relation::clear_subvalue() {
  subvalue_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::_internal_subvalue() const {
  return subvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::subvalue() const {
  // @@protoc_insertion_point(field_get:pb.relation_tbx.t_relation.subvalue)
  return _internal_subvalue();
}
inline void relation_tbx_t_relation::_internal_set_subvalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  subvalue_ = value;
}
inline void relation_tbx_t_relation::set_subvalue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subvalue(value);
  // @@protoc_insertion_point(field_set:pb.relation_tbx.t_relation.subvalue)
}

// required uint32 daytimes = 6;
inline bool relation_tbx_t_relation::_internal_has_daytimes() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool relation_tbx_t_relation::has_daytimes() const {
  return _internal_has_daytimes();
}
inline void relation_tbx_t_relation::clear_daytimes() {
  daytimes_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::_internal_daytimes() const {
  return daytimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::daytimes() const {
  // @@protoc_insertion_point(field_get:pb.relation_tbx.t_relation.daytimes)
  return _internal_daytimes();
}
inline void relation_tbx_t_relation::_internal_set_daytimes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  daytimes_ = value;
}
inline void relation_tbx_t_relation::set_daytimes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_daytimes(value);
  // @@protoc_insertion_point(field_set:pb.relation_tbx.t_relation.daytimes)
}

// required uint32 lasttime = 7;
inline bool relation_tbx_t_relation::_internal_has_lasttime() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool relation_tbx_t_relation::has_lasttime() const {
  return _internal_has_lasttime();
}
inline void relation_tbx_t_relation::clear_lasttime() {
  lasttime_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::_internal_lasttime() const {
  return lasttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 relation_tbx_t_relation::lasttime() const {
  // @@protoc_insertion_point(field_get:pb.relation_tbx.t_relation.lasttime)
  return _internal_lasttime();
}
inline void relation_tbx_t_relation::_internal_set_lasttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  lasttime_ = value;
}
inline void relation_tbx_t_relation::set_lasttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lasttime(value);
  // @@protoc_insertion_point(field_set:pb.relation_tbx.t_relation.lasttime)
}

// required string rangelimit = 8;
inline bool relation_tbx_t_relation::_internal_has_rangelimit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool relation_tbx_t_relation::has_rangelimit() const {
  return _internal_has_rangelimit();
}
inline void relation_tbx_t_relation::clear_rangelimit() {
  rangelimit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& relation_tbx_t_relation::rangelimit() const {
  // @@protoc_insertion_point(field_get:pb.relation_tbx.t_relation.rangelimit)
  return _internal_rangelimit();
}
inline void relation_tbx_t_relation::set_rangelimit(const std::string& value) {
  _internal_set_rangelimit(value);
  // @@protoc_insertion_point(field_set:pb.relation_tbx.t_relation.rangelimit)
}
inline std::string* relation_tbx_t_relation::mutable_rangelimit() {
  // @@protoc_insertion_point(field_mutable:pb.relation_tbx.t_relation.rangelimit)
  return _internal_mutable_rangelimit();
}
inline const std::string& relation_tbx_t_relation::_internal_rangelimit() const {
  return rangelimit_.GetNoArena();
}
inline void relation_tbx_t_relation::_internal_set_rangelimit(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rangelimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void relation_tbx_t_relation::set_rangelimit(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rangelimit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.relation_tbx.t_relation.rangelimit)
}
inline void relation_tbx_t_relation::set_rangelimit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rangelimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.relation_tbx.t_relation.rangelimit)
}
inline void relation_tbx_t_relation::set_rangelimit(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rangelimit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.relation_tbx.t_relation.rangelimit)
}
inline std::string* relation_tbx_t_relation::_internal_mutable_rangelimit() {
  _has_bits_[0] |= 0x00000001u;
  return rangelimit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* relation_tbx_t_relation::release_rangelimit() {
  // @@protoc_insertion_point(field_release:pb.relation_tbx.t_relation.rangelimit)
  if (!_internal_has_rangelimit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rangelimit_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void relation_tbx_t_relation::set_allocated_rangelimit(std::string* rangelimit) {
  if (rangelimit != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rangelimit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rangelimit);
  // @@protoc_insertion_point(field_set_allocated:pb.relation_tbx.t_relation.rangelimit)
}

// -------------------------------------------------------------------

// relation_tbx

// repeated .pb.relation_tbx.t_relation datas = 1;
inline int relation_tbx::_internal_datas_size() const {
  return datas_.size();
}
inline int relation_tbx::datas_size() const {
  return _internal_datas_size();
}
inline void relation_tbx::clear_datas() {
  datas_.Clear();
}
inline ::pb::relation_tbx_t_relation* relation_tbx::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.relation_tbx.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::relation_tbx_t_relation >*
relation_tbx::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.relation_tbx.datas)
  return &datas_;
}
inline const ::pb::relation_tbx_t_relation& relation_tbx::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::relation_tbx_t_relation& relation_tbx::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.relation_tbx.datas)
  return _internal_datas(index);
}
inline ::pb::relation_tbx_t_relation* relation_tbx::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::relation_tbx_t_relation* relation_tbx::add_datas() {
  // @@protoc_insertion_point(field_add:pb.relation_tbx.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::relation_tbx_t_relation >&
relation_tbx::datas() const {
  // @@protoc_insertion_point(field_list:pb.relation_tbx.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_relation_5ftbx_2eproto
