// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatchannel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chatchannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chatchannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chatchannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chatchannel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chatchannel_2eproto;
namespace pb {
class chatchannel;
class chatchannelDefaultTypeInternal;
extern chatchannelDefaultTypeInternal _chatchannel_default_instance_;
class chatchannel_t_chatchannel;
class chatchannel_t_chatchannelDefaultTypeInternal;
extern chatchannel_t_chatchannelDefaultTypeInternal _chatchannel_t_chatchannel_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::chatchannel* Arena::CreateMaybeMessage<::pb::chatchannel>(Arena*);
template<> ::pb::chatchannel_t_chatchannel* Arena::CreateMaybeMessage<::pb::chatchannel_t_chatchannel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class chatchannel_t_chatchannel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.chatchannel.t_chatchannel) */ {
 public:
  chatchannel_t_chatchannel();
  virtual ~chatchannel_t_chatchannel();

  chatchannel_t_chatchannel(const chatchannel_t_chatchannel& from);
  chatchannel_t_chatchannel(chatchannel_t_chatchannel&& from) noexcept
    : chatchannel_t_chatchannel() {
    *this = ::std::move(from);
  }

  inline chatchannel_t_chatchannel& operator=(const chatchannel_t_chatchannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatchannel_t_chatchannel& operator=(chatchannel_t_chatchannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chatchannel_t_chatchannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chatchannel_t_chatchannel* internal_default_instance() {
    return reinterpret_cast<const chatchannel_t_chatchannel*>(
               &_chatchannel_t_chatchannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(chatchannel_t_chatchannel& a, chatchannel_t_chatchannel& b) {
    a.Swap(&b);
  }
  inline void Swap(chatchannel_t_chatchannel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chatchannel_t_chatchannel* New() const final {
    return CreateMaybeMessage<chatchannel_t_chatchannel>(nullptr);
  }

  chatchannel_t_chatchannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chatchannel_t_chatchannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chatchannel_t_chatchannel& from);
  void MergeFrom(const chatchannel_t_chatchannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatchannel_t_chatchannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.chatchannel.t_chatchannel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chatchannel_2eproto);
    return ::descriptor_table_chatchannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kNameShortFieldNumber = 4,
    kCostFieldNumber = 7,
    kNamestyleFieldNumber = 10,
    kContentstyleFieldNumber = 11,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kLevellimitFieldNumber = 5,
    kCdrateFieldNumber = 6,
    kWordlimitFieldNumber = 8,
    kCachedountFieldNumber = 9,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string name_short = 4;
  bool has_name_short() const;
  private:
  bool _internal_has_name_short() const;
  public:
  void clear_name_short();
  const std::string& name_short() const;
  void set_name_short(const std::string& value);
  void set_name_short(std::string&& value);
  void set_name_short(const char* value);
  void set_name_short(const char* value, size_t size);
  std::string* mutable_name_short();
  std::string* release_name_short();
  void set_allocated_name_short(std::string* name_short);
  private:
  const std::string& _internal_name_short() const;
  void _internal_set_name_short(const std::string& value);
  std::string* _internal_mutable_name_short();
  public:

  // required string cost = 7;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const std::string& cost() const;
  void set_cost(const std::string& value);
  void set_cost(std::string&& value);
  void set_cost(const char* value);
  void set_cost(const char* value, size_t size);
  std::string* mutable_cost();
  std::string* release_cost();
  void set_allocated_cost(std::string* cost);
  private:
  const std::string& _internal_cost() const;
  void _internal_set_cost(const std::string& value);
  std::string* _internal_mutable_cost();
  public:

  // required string namestyle = 10;
  bool has_namestyle() const;
  private:
  bool _internal_has_namestyle() const;
  public:
  void clear_namestyle();
  const std::string& namestyle() const;
  void set_namestyle(const std::string& value);
  void set_namestyle(std::string&& value);
  void set_namestyle(const char* value);
  void set_namestyle(const char* value, size_t size);
  std::string* mutable_namestyle();
  std::string* release_namestyle();
  void set_allocated_namestyle(std::string* namestyle);
  private:
  const std::string& _internal_namestyle() const;
  void _internal_set_namestyle(const std::string& value);
  std::string* _internal_mutable_namestyle();
  public:

  // required string contentstyle = 11;
  bool has_contentstyle() const;
  private:
  bool _internal_has_contentstyle() const;
  public:
  void clear_contentstyle();
  const std::string& contentstyle() const;
  void set_contentstyle(const std::string& value);
  void set_contentstyle(std::string&& value);
  void set_contentstyle(const char* value);
  void set_contentstyle(const char* value, size_t size);
  std::string* mutable_contentstyle();
  std::string* release_contentstyle();
  void set_allocated_contentstyle(std::string* contentstyle);
  private:
  const std::string& _internal_contentstyle() const;
  void _internal_set_contentstyle(const std::string& value);
  std::string* _internal_mutable_contentstyle();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 levellimit = 5;
  bool has_levellimit() const;
  private:
  bool _internal_has_levellimit() const;
  public:
  void clear_levellimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 levellimit() const;
  void set_levellimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_levellimit() const;
  void _internal_set_levellimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 cdrate = 6;
  bool has_cdrate() const;
  private:
  bool _internal_has_cdrate() const;
  public:
  void clear_cdrate();
  ::PROTOBUF_NAMESPACE_ID::uint32 cdrate() const;
  void set_cdrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cdrate() const;
  void _internal_set_cdrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 wordlimit = 8;
  bool has_wordlimit() const;
  private:
  bool _internal_has_wordlimit() const;
  public:
  void clear_wordlimit();
  ::PROTOBUF_NAMESPACE_ID::uint32 wordlimit() const;
  void set_wordlimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wordlimit() const;
  void _internal_set_wordlimit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 cachedount = 9;
  bool has_cachedount() const;
  private:
  bool _internal_has_cachedount() const;
  public:
  void clear_cachedount();
  ::PROTOBUF_NAMESPACE_ID::uint32 cachedount() const;
  void set_cachedount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cachedount() const;
  void _internal_set_cachedount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.chatchannel.t_chatchannel)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_short_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cost_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namestyle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contentstyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 levellimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cdrate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wordlimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cachedount_;
  friend struct ::TableStruct_chatchannel_2eproto;
};
// -------------------------------------------------------------------

class chatchannel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.chatchannel) */ {
 public:
  chatchannel();
  virtual ~chatchannel();

  chatchannel(const chatchannel& from);
  chatchannel(chatchannel&& from) noexcept
    : chatchannel() {
    *this = ::std::move(from);
  }

  inline chatchannel& operator=(const chatchannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline chatchannel& operator=(chatchannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chatchannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chatchannel* internal_default_instance() {
    return reinterpret_cast<const chatchannel*>(
               &_chatchannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(chatchannel& a, chatchannel& b) {
    a.Swap(&b);
  }
  inline void Swap(chatchannel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chatchannel* New() const final {
    return CreateMaybeMessage<chatchannel>(nullptr);
  }

  chatchannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chatchannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chatchannel& from);
  void MergeFrom(const chatchannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chatchannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.chatchannel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chatchannel_2eproto);
    return ::descriptor_table_chatchannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef chatchannel_t_chatchannel t_chatchannel;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.chatchannel.t_chatchannel datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::chatchannel_t_chatchannel* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::chatchannel_t_chatchannel >*
      mutable_datas();
  private:
  const ::pb::chatchannel_t_chatchannel& _internal_datas(int index) const;
  ::pb::chatchannel_t_chatchannel* _internal_add_datas();
  public:
  const ::pb::chatchannel_t_chatchannel& datas(int index) const;
  ::pb::chatchannel_t_chatchannel* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::chatchannel_t_chatchannel >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.chatchannel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::chatchannel_t_chatchannel > datas_;
  friend struct ::TableStruct_chatchannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// chatchannel_t_chatchannel

// required uint32 tbxid = 1 [default = 0];
inline bool chatchannel_t_chatchannel::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void chatchannel_t_chatchannel::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.tbxid)
  return _internal_tbxid();
}
inline void chatchannel_t_chatchannel::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tbxid_ = value;
}
inline void chatchannel_t_chatchannel::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool chatchannel_t_chatchannel::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_id() const {
  return _internal_has_id();
}
inline void chatchannel_t_chatchannel::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::id() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.id)
  return _internal_id();
}
inline void chatchannel_t_chatchannel::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  id_ = value;
}
inline void chatchannel_t_chatchannel::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.id)
}

// required string name = 3;
inline bool chatchannel_t_chatchannel::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_name() const {
  return _internal_has_name();
}
inline void chatchannel_t_chatchannel::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& chatchannel_t_chatchannel::name() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.name)
  return _internal_name();
}
inline void chatchannel_t_chatchannel::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.name)
}
inline std::string* chatchannel_t_chatchannel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.chatchannel.t_chatchannel.name)
  return _internal_mutable_name();
}
inline const std::string& chatchannel_t_chatchannel::_internal_name() const {
  return name_.GetNoArena();
}
inline void chatchannel_t_chatchannel::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void chatchannel_t_chatchannel::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.chatchannel.t_chatchannel.name)
}
inline void chatchannel_t_chatchannel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.chatchannel.t_chatchannel.name)
}
inline void chatchannel_t_chatchannel::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.chatchannel.t_chatchannel.name)
}
inline std::string* chatchannel_t_chatchannel::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatchannel_t_chatchannel::release_name() {
  // @@protoc_insertion_point(field_release:pb.chatchannel.t_chatchannel.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatchannel_t_chatchannel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.chatchannel.t_chatchannel.name)
}

// required string name_short = 4;
inline bool chatchannel_t_chatchannel::_internal_has_name_short() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_name_short() const {
  return _internal_has_name_short();
}
inline void chatchannel_t_chatchannel::clear_name_short() {
  name_short_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& chatchannel_t_chatchannel::name_short() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.name_short)
  return _internal_name_short();
}
inline void chatchannel_t_chatchannel::set_name_short(const std::string& value) {
  _internal_set_name_short(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.name_short)
}
inline std::string* chatchannel_t_chatchannel::mutable_name_short() {
  // @@protoc_insertion_point(field_mutable:pb.chatchannel.t_chatchannel.name_short)
  return _internal_mutable_name_short();
}
inline const std::string& chatchannel_t_chatchannel::_internal_name_short() const {
  return name_short_.GetNoArena();
}
inline void chatchannel_t_chatchannel::_internal_set_name_short(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_short_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void chatchannel_t_chatchannel::set_name_short(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_short_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.chatchannel.t_chatchannel.name_short)
}
inline void chatchannel_t_chatchannel::set_name_short(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_short_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.chatchannel.t_chatchannel.name_short)
}
inline void chatchannel_t_chatchannel::set_name_short(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_short_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.chatchannel.t_chatchannel.name_short)
}
inline std::string* chatchannel_t_chatchannel::_internal_mutable_name_short() {
  _has_bits_[0] |= 0x00000002u;
  return name_short_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatchannel_t_chatchannel::release_name_short() {
  // @@protoc_insertion_point(field_release:pb.chatchannel.t_chatchannel.name_short)
  if (!_internal_has_name_short()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_short_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatchannel_t_chatchannel::set_allocated_name_short(std::string* name_short) {
  if (name_short != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_short_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_short);
  // @@protoc_insertion_point(field_set_allocated:pb.chatchannel.t_chatchannel.name_short)
}

// required uint32 levellimit = 5;
inline bool chatchannel_t_chatchannel::_internal_has_levellimit() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_levellimit() const {
  return _internal_has_levellimit();
}
inline void chatchannel_t_chatchannel::clear_levellimit() {
  levellimit_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::_internal_levellimit() const {
  return levellimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::levellimit() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.levellimit)
  return _internal_levellimit();
}
inline void chatchannel_t_chatchannel::_internal_set_levellimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  levellimit_ = value;
}
inline void chatchannel_t_chatchannel::set_levellimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_levellimit(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.levellimit)
}

// required uint32 cdrate = 6;
inline bool chatchannel_t_chatchannel::_internal_has_cdrate() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_cdrate() const {
  return _internal_has_cdrate();
}
inline void chatchannel_t_chatchannel::clear_cdrate() {
  cdrate_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::_internal_cdrate() const {
  return cdrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::cdrate() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.cdrate)
  return _internal_cdrate();
}
inline void chatchannel_t_chatchannel::_internal_set_cdrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  cdrate_ = value;
}
inline void chatchannel_t_chatchannel::set_cdrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cdrate(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.cdrate)
}

// required string cost = 7;
inline bool chatchannel_t_chatchannel::_internal_has_cost() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_cost() const {
  return _internal_has_cost();
}
inline void chatchannel_t_chatchannel::clear_cost() {
  cost_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& chatchannel_t_chatchannel::cost() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.cost)
  return _internal_cost();
}
inline void chatchannel_t_chatchannel::set_cost(const std::string& value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.cost)
}
inline std::string* chatchannel_t_chatchannel::mutable_cost() {
  // @@protoc_insertion_point(field_mutable:pb.chatchannel.t_chatchannel.cost)
  return _internal_mutable_cost();
}
inline const std::string& chatchannel_t_chatchannel::_internal_cost() const {
  return cost_.GetNoArena();
}
inline void chatchannel_t_chatchannel::_internal_set_cost(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void chatchannel_t_chatchannel::set_cost(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cost_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.chatchannel.t_chatchannel.cost)
}
inline void chatchannel_t_chatchannel::set_cost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.chatchannel.t_chatchannel.cost)
}
inline void chatchannel_t_chatchannel::set_cost(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.chatchannel.t_chatchannel.cost)
}
inline std::string* chatchannel_t_chatchannel::_internal_mutable_cost() {
  _has_bits_[0] |= 0x00000004u;
  return cost_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatchannel_t_chatchannel::release_cost() {
  // @@protoc_insertion_point(field_release:pb.chatchannel.t_chatchannel.cost)
  if (!_internal_has_cost()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cost_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatchannel_t_chatchannel::set_allocated_cost(std::string* cost) {
  if (cost != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cost_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cost);
  // @@protoc_insertion_point(field_set_allocated:pb.chatchannel.t_chatchannel.cost)
}

// required uint32 wordlimit = 8;
inline bool chatchannel_t_chatchannel::_internal_has_wordlimit() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_wordlimit() const {
  return _internal_has_wordlimit();
}
inline void chatchannel_t_chatchannel::clear_wordlimit() {
  wordlimit_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::_internal_wordlimit() const {
  return wordlimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::wordlimit() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.wordlimit)
  return _internal_wordlimit();
}
inline void chatchannel_t_chatchannel::_internal_set_wordlimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  wordlimit_ = value;
}
inline void chatchannel_t_chatchannel::set_wordlimit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wordlimit(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.wordlimit)
}

// required uint32 cachedount = 9;
inline bool chatchannel_t_chatchannel::_internal_has_cachedount() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_cachedount() const {
  return _internal_has_cachedount();
}
inline void chatchannel_t_chatchannel::clear_cachedount() {
  cachedount_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::_internal_cachedount() const {
  return cachedount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 chatchannel_t_chatchannel::cachedount() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.cachedount)
  return _internal_cachedount();
}
inline void chatchannel_t_chatchannel::_internal_set_cachedount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  cachedount_ = value;
}
inline void chatchannel_t_chatchannel::set_cachedount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cachedount(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.cachedount)
}

// required string namestyle = 10;
inline bool chatchannel_t_chatchannel::_internal_has_namestyle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_namestyle() const {
  return _internal_has_namestyle();
}
inline void chatchannel_t_chatchannel::clear_namestyle() {
  namestyle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& chatchannel_t_chatchannel::namestyle() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.namestyle)
  return _internal_namestyle();
}
inline void chatchannel_t_chatchannel::set_namestyle(const std::string& value) {
  _internal_set_namestyle(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.namestyle)
}
inline std::string* chatchannel_t_chatchannel::mutable_namestyle() {
  // @@protoc_insertion_point(field_mutable:pb.chatchannel.t_chatchannel.namestyle)
  return _internal_mutable_namestyle();
}
inline const std::string& chatchannel_t_chatchannel::_internal_namestyle() const {
  return namestyle_.GetNoArena();
}
inline void chatchannel_t_chatchannel::_internal_set_namestyle(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  namestyle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void chatchannel_t_chatchannel::set_namestyle(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  namestyle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.chatchannel.t_chatchannel.namestyle)
}
inline void chatchannel_t_chatchannel::set_namestyle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  namestyle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.chatchannel.t_chatchannel.namestyle)
}
inline void chatchannel_t_chatchannel::set_namestyle(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  namestyle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.chatchannel.t_chatchannel.namestyle)
}
inline std::string* chatchannel_t_chatchannel::_internal_mutable_namestyle() {
  _has_bits_[0] |= 0x00000008u;
  return namestyle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatchannel_t_chatchannel::release_namestyle() {
  // @@protoc_insertion_point(field_release:pb.chatchannel.t_chatchannel.namestyle)
  if (!_internal_has_namestyle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return namestyle_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatchannel_t_chatchannel::set_allocated_namestyle(std::string* namestyle) {
  if (namestyle != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  namestyle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namestyle);
  // @@protoc_insertion_point(field_set_allocated:pb.chatchannel.t_chatchannel.namestyle)
}

// required string contentstyle = 11;
inline bool chatchannel_t_chatchannel::_internal_has_contentstyle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool chatchannel_t_chatchannel::has_contentstyle() const {
  return _internal_has_contentstyle();
}
inline void chatchannel_t_chatchannel::clear_contentstyle() {
  contentstyle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& chatchannel_t_chatchannel::contentstyle() const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.t_chatchannel.contentstyle)
  return _internal_contentstyle();
}
inline void chatchannel_t_chatchannel::set_contentstyle(const std::string& value) {
  _internal_set_contentstyle(value);
  // @@protoc_insertion_point(field_set:pb.chatchannel.t_chatchannel.contentstyle)
}
inline std::string* chatchannel_t_chatchannel::mutable_contentstyle() {
  // @@protoc_insertion_point(field_mutable:pb.chatchannel.t_chatchannel.contentstyle)
  return _internal_mutable_contentstyle();
}
inline const std::string& chatchannel_t_chatchannel::_internal_contentstyle() const {
  return contentstyle_.GetNoArena();
}
inline void chatchannel_t_chatchannel::_internal_set_contentstyle(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  contentstyle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void chatchannel_t_chatchannel::set_contentstyle(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  contentstyle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.chatchannel.t_chatchannel.contentstyle)
}
inline void chatchannel_t_chatchannel::set_contentstyle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  contentstyle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.chatchannel.t_chatchannel.contentstyle)
}
inline void chatchannel_t_chatchannel::set_contentstyle(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  contentstyle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.chatchannel.t_chatchannel.contentstyle)
}
inline std::string* chatchannel_t_chatchannel::_internal_mutable_contentstyle() {
  _has_bits_[0] |= 0x00000010u;
  return contentstyle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* chatchannel_t_chatchannel::release_contentstyle() {
  // @@protoc_insertion_point(field_release:pb.chatchannel.t_chatchannel.contentstyle)
  if (!_internal_has_contentstyle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return contentstyle_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void chatchannel_t_chatchannel::set_allocated_contentstyle(std::string* contentstyle) {
  if (contentstyle != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  contentstyle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contentstyle);
  // @@protoc_insertion_point(field_set_allocated:pb.chatchannel.t_chatchannel.contentstyle)
}

// -------------------------------------------------------------------

// chatchannel

// repeated .pb.chatchannel.t_chatchannel datas = 1;
inline int chatchannel::_internal_datas_size() const {
  return datas_.size();
}
inline int chatchannel::datas_size() const {
  return _internal_datas_size();
}
inline void chatchannel::clear_datas() {
  datas_.Clear();
}
inline ::pb::chatchannel_t_chatchannel* chatchannel::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.chatchannel.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::chatchannel_t_chatchannel >*
chatchannel::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.chatchannel.datas)
  return &datas_;
}
inline const ::pb::chatchannel_t_chatchannel& chatchannel::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::chatchannel_t_chatchannel& chatchannel::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.chatchannel.datas)
  return _internal_datas(index);
}
inline ::pb::chatchannel_t_chatchannel* chatchannel::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::chatchannel_t_chatchannel* chatchannel::add_datas() {
  // @@protoc_insertion_point(field_add:pb.chatchannel.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::chatchannel_t_chatchannel >&
chatchannel::datas() const {
  // @@protoc_insertion_point(field_list:pb.chatchannel.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chatchannel_2eproto
