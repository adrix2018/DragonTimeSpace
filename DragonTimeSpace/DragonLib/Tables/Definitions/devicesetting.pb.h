// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devicesetting.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_devicesetting_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_devicesetting_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_devicesetting_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_devicesetting_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_devicesetting_2eproto;
namespace pb {
class devicesetting;
class devicesettingDefaultTypeInternal;
extern devicesettingDefaultTypeInternal _devicesetting_default_instance_;
class devicesetting_t_devicesetting_config;
class devicesetting_t_devicesetting_configDefaultTypeInternal;
extern devicesetting_t_devicesetting_configDefaultTypeInternal _devicesetting_t_devicesetting_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::devicesetting* Arena::CreateMaybeMessage<::pb::devicesetting>(Arena*);
template<> ::pb::devicesetting_t_devicesetting_config* Arena::CreateMaybeMessage<::pb::devicesetting_t_devicesetting_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class devicesetting_t_devicesetting_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.devicesetting.t_devicesetting_config) */ {
 public:
  devicesetting_t_devicesetting_config();
  virtual ~devicesetting_t_devicesetting_config();

  devicesetting_t_devicesetting_config(const devicesetting_t_devicesetting_config& from);
  devicesetting_t_devicesetting_config(devicesetting_t_devicesetting_config&& from) noexcept
    : devicesetting_t_devicesetting_config() {
    *this = ::std::move(from);
  }

  inline devicesetting_t_devicesetting_config& operator=(const devicesetting_t_devicesetting_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline devicesetting_t_devicesetting_config& operator=(devicesetting_t_devicesetting_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const devicesetting_t_devicesetting_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const devicesetting_t_devicesetting_config* internal_default_instance() {
    return reinterpret_cast<const devicesetting_t_devicesetting_config*>(
               &_devicesetting_t_devicesetting_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(devicesetting_t_devicesetting_config& a, devicesetting_t_devicesetting_config& b) {
    a.Swap(&b);
  }
  inline void Swap(devicesetting_t_devicesetting_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline devicesetting_t_devicesetting_config* New() const final {
    return CreateMaybeMessage<devicesetting_t_devicesetting_config>(nullptr);
  }

  devicesetting_t_devicesetting_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<devicesetting_t_devicesetting_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const devicesetting_t_devicesetting_config& from);
  void MergeFrom(const devicesetting_t_devicesetting_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(devicesetting_t_devicesetting_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.devicesetting.t_devicesetting_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicesetting_2eproto);
    return ::descriptor_table_devicesetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 4,
    kFloodlightFieldNumber = 5,
    kShadowFieldNumber = 6,
    kDopFieldNumber = 7,
    kHaloFieldNumber = 8,
    kSceneobjpriorityFieldNumber = 10,
    kAntialiasingFieldNumber = 9,
    kSceneeffectFieldNumber = 11,
    kUiclosesceneFieldNumber = 12,
    kCameradisFieldNumber = 13,
    kMaxtypeFieldNumber = 14,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool floodlight = 5;
  bool has_floodlight() const;
  private:
  bool _internal_has_floodlight() const;
  public:
  void clear_floodlight();
  bool floodlight() const;
  void set_floodlight(bool value);
  private:
  bool _internal_floodlight() const;
  void _internal_set_floodlight(bool value);
  public:

  // required bool shadow = 6;
  bool has_shadow() const;
  private:
  bool _internal_has_shadow() const;
  public:
  void clear_shadow();
  bool shadow() const;
  void set_shadow(bool value);
  private:
  bool _internal_shadow() const;
  void _internal_set_shadow(bool value);
  public:

  // required bool dop = 7;
  bool has_dop() const;
  private:
  bool _internal_has_dop() const;
  public:
  void clear_dop();
  bool dop() const;
  void set_dop(bool value);
  private:
  bool _internal_dop() const;
  void _internal_set_dop(bool value);
  public:

  // required bool halo = 8;
  bool has_halo() const;
  private:
  bool _internal_has_halo() const;
  public:
  void clear_halo();
  bool halo() const;
  void set_halo(bool value);
  private:
  bool _internal_halo() const;
  void _internal_set_halo(bool value);
  public:

  // required uint32 sceneobjpriority = 10;
  bool has_sceneobjpriority() const;
  private:
  bool _internal_has_sceneobjpriority() const;
  public:
  void clear_sceneobjpriority();
  ::PROTOBUF_NAMESPACE_ID::uint32 sceneobjpriority() const;
  void set_sceneobjpriority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sceneobjpriority() const;
  void _internal_set_sceneobjpriority(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool antialiasing = 9;
  bool has_antialiasing() const;
  private:
  bool _internal_has_antialiasing() const;
  public:
  void clear_antialiasing();
  bool antialiasing() const;
  void set_antialiasing(bool value);
  private:
  bool _internal_antialiasing() const;
  void _internal_set_antialiasing(bool value);
  public:

  // required bool sceneeffect = 11;
  bool has_sceneeffect() const;
  private:
  bool _internal_has_sceneeffect() const;
  public:
  void clear_sceneeffect();
  bool sceneeffect() const;
  void set_sceneeffect(bool value);
  private:
  bool _internal_sceneeffect() const;
  void _internal_set_sceneeffect(bool value);
  public:

  // required bool uiclosescene = 12;
  bool has_uiclosescene() const;
  private:
  bool _internal_has_uiclosescene() const;
  public:
  void clear_uiclosescene();
  bool uiclosescene() const;
  void set_uiclosescene(bool value);
  private:
  bool _internal_uiclosescene() const;
  void _internal_set_uiclosescene(bool value);
  public:

  // required uint32 cameradis = 13;
  bool has_cameradis() const;
  private:
  bool _internal_has_cameradis() const;
  public:
  void clear_cameradis();
  ::PROTOBUF_NAMESPACE_ID::uint32 cameradis() const;
  void set_cameradis(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cameradis() const;
  void _internal_set_cameradis(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 maxtype = 14;
  bool has_maxtype() const;
  private:
  bool _internal_has_maxtype() const;
  public:
  void clear_maxtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxtype() const;
  void set_maxtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxtype() const;
  void _internal_set_maxtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.devicesetting.t_devicesetting_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  bool floodlight_;
  bool shadow_;
  bool dop_;
  bool halo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sceneobjpriority_;
  bool antialiasing_;
  bool sceneeffect_;
  bool uiclosescene_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cameradis_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxtype_;
  friend struct ::TableStruct_devicesetting_2eproto;
};
// -------------------------------------------------------------------

class devicesetting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.devicesetting) */ {
 public:
  devicesetting();
  virtual ~devicesetting();

  devicesetting(const devicesetting& from);
  devicesetting(devicesetting&& from) noexcept
    : devicesetting() {
    *this = ::std::move(from);
  }

  inline devicesetting& operator=(const devicesetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline devicesetting& operator=(devicesetting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const devicesetting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const devicesetting* internal_default_instance() {
    return reinterpret_cast<const devicesetting*>(
               &_devicesetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(devicesetting& a, devicesetting& b) {
    a.Swap(&b);
  }
  inline void Swap(devicesetting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline devicesetting* New() const final {
    return CreateMaybeMessage<devicesetting>(nullptr);
  }

  devicesetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<devicesetting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const devicesetting& from);
  void MergeFrom(const devicesetting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(devicesetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.devicesetting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_devicesetting_2eproto);
    return ::descriptor_table_devicesetting_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef devicesetting_t_devicesetting_config t_devicesetting_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.devicesetting.t_devicesetting_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::devicesetting_t_devicesetting_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::devicesetting_t_devicesetting_config >*
      mutable_datas();
  private:
  const ::pb::devicesetting_t_devicesetting_config& _internal_datas(int index) const;
  ::pb::devicesetting_t_devicesetting_config* _internal_add_datas();
  public:
  const ::pb::devicesetting_t_devicesetting_config& datas(int index) const;
  ::pb::devicesetting_t_devicesetting_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::devicesetting_t_devicesetting_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.devicesetting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::devicesetting_t_devicesetting_config > datas_;
  friend struct ::TableStruct_devicesetting_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// devicesetting_t_devicesetting_config

// required uint32 tbxid = 1 [default = 0];
inline bool devicesetting_t_devicesetting_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void devicesetting_t_devicesetting_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.tbxid)
  return _internal_tbxid();
}
inline void devicesetting_t_devicesetting_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tbxid_ = value;
}
inline void devicesetting_t_devicesetting_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool devicesetting_t_devicesetting_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_id() const {
  return _internal_has_id();
}
inline void devicesetting_t_devicesetting_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::id() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.id)
  return _internal_id();
}
inline void devicesetting_t_devicesetting_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void devicesetting_t_devicesetting_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.id)
}

// required string name = 3;
inline bool devicesetting_t_devicesetting_config::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_name() const {
  return _internal_has_name();
}
inline void devicesetting_t_devicesetting_config::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& devicesetting_t_devicesetting_config::name() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.name)
  return _internal_name();
}
inline void devicesetting_t_devicesetting_config::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.name)
}
inline std::string* devicesetting_t_devicesetting_config::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.devicesetting.t_devicesetting_config.name)
  return _internal_mutable_name();
}
inline const std::string& devicesetting_t_devicesetting_config::_internal_name() const {
  return name_.GetNoArena();
}
inline void devicesetting_t_devicesetting_config::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void devicesetting_t_devicesetting_config::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.devicesetting.t_devicesetting_config.name)
}
inline void devicesetting_t_devicesetting_config::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.devicesetting.t_devicesetting_config.name)
}
inline void devicesetting_t_devicesetting_config::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.devicesetting.t_devicesetting_config.name)
}
inline std::string* devicesetting_t_devicesetting_config::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* devicesetting_t_devicesetting_config::release_name() {
  // @@protoc_insertion_point(field_release:pb.devicesetting.t_devicesetting_config.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void devicesetting_t_devicesetting_config::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.devicesetting.t_devicesetting_config.name)
}

// required uint32 type = 4;
inline bool devicesetting_t_devicesetting_config::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_type() const {
  return _internal_has_type();
}
inline void devicesetting_t_devicesetting_config::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::type() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.type)
  return _internal_type();
}
inline void devicesetting_t_devicesetting_config::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void devicesetting_t_devicesetting_config::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.type)
}

// required bool floodlight = 5;
inline bool devicesetting_t_devicesetting_config::_internal_has_floodlight() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_floodlight() const {
  return _internal_has_floodlight();
}
inline void devicesetting_t_devicesetting_config::clear_floodlight() {
  floodlight_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool devicesetting_t_devicesetting_config::_internal_floodlight() const {
  return floodlight_;
}
inline bool devicesetting_t_devicesetting_config::floodlight() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.floodlight)
  return _internal_floodlight();
}
inline void devicesetting_t_devicesetting_config::_internal_set_floodlight(bool value) {
  _has_bits_[0] |= 0x00000010u;
  floodlight_ = value;
}
inline void devicesetting_t_devicesetting_config::set_floodlight(bool value) {
  _internal_set_floodlight(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.floodlight)
}

// required bool shadow = 6;
inline bool devicesetting_t_devicesetting_config::_internal_has_shadow() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_shadow() const {
  return _internal_has_shadow();
}
inline void devicesetting_t_devicesetting_config::clear_shadow() {
  shadow_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool devicesetting_t_devicesetting_config::_internal_shadow() const {
  return shadow_;
}
inline bool devicesetting_t_devicesetting_config::shadow() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.shadow)
  return _internal_shadow();
}
inline void devicesetting_t_devicesetting_config::_internal_set_shadow(bool value) {
  _has_bits_[0] |= 0x00000020u;
  shadow_ = value;
}
inline void devicesetting_t_devicesetting_config::set_shadow(bool value) {
  _internal_set_shadow(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.shadow)
}

// required bool dop = 7;
inline bool devicesetting_t_devicesetting_config::_internal_has_dop() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_dop() const {
  return _internal_has_dop();
}
inline void devicesetting_t_devicesetting_config::clear_dop() {
  dop_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool devicesetting_t_devicesetting_config::_internal_dop() const {
  return dop_;
}
inline bool devicesetting_t_devicesetting_config::dop() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.dop)
  return _internal_dop();
}
inline void devicesetting_t_devicesetting_config::_internal_set_dop(bool value) {
  _has_bits_[0] |= 0x00000040u;
  dop_ = value;
}
inline void devicesetting_t_devicesetting_config::set_dop(bool value) {
  _internal_set_dop(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.dop)
}

// required bool halo = 8;
inline bool devicesetting_t_devicesetting_config::_internal_has_halo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_halo() const {
  return _internal_has_halo();
}
inline void devicesetting_t_devicesetting_config::clear_halo() {
  halo_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool devicesetting_t_devicesetting_config::_internal_halo() const {
  return halo_;
}
inline bool devicesetting_t_devicesetting_config::halo() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.halo)
  return _internal_halo();
}
inline void devicesetting_t_devicesetting_config::_internal_set_halo(bool value) {
  _has_bits_[0] |= 0x00000080u;
  halo_ = value;
}
inline void devicesetting_t_devicesetting_config::set_halo(bool value) {
  _internal_set_halo(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.halo)
}

// required bool antialiasing = 9;
inline bool devicesetting_t_devicesetting_config::_internal_has_antialiasing() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_antialiasing() const {
  return _internal_has_antialiasing();
}
inline void devicesetting_t_devicesetting_config::clear_antialiasing() {
  antialiasing_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool devicesetting_t_devicesetting_config::_internal_antialiasing() const {
  return antialiasing_;
}
inline bool devicesetting_t_devicesetting_config::antialiasing() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.antialiasing)
  return _internal_antialiasing();
}
inline void devicesetting_t_devicesetting_config::_internal_set_antialiasing(bool value) {
  _has_bits_[0] |= 0x00000200u;
  antialiasing_ = value;
}
inline void devicesetting_t_devicesetting_config::set_antialiasing(bool value) {
  _internal_set_antialiasing(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.antialiasing)
}

// required uint32 sceneobjpriority = 10;
inline bool devicesetting_t_devicesetting_config::_internal_has_sceneobjpriority() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_sceneobjpriority() const {
  return _internal_has_sceneobjpriority();
}
inline void devicesetting_t_devicesetting_config::clear_sceneobjpriority() {
  sceneobjpriority_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::_internal_sceneobjpriority() const {
  return sceneobjpriority_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::sceneobjpriority() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.sceneobjpriority)
  return _internal_sceneobjpriority();
}
inline void devicesetting_t_devicesetting_config::_internal_set_sceneobjpriority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  sceneobjpriority_ = value;
}
inline void devicesetting_t_devicesetting_config::set_sceneobjpriority(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sceneobjpriority(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.sceneobjpriority)
}

// required bool sceneeffect = 11;
inline bool devicesetting_t_devicesetting_config::_internal_has_sceneeffect() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_sceneeffect() const {
  return _internal_has_sceneeffect();
}
inline void devicesetting_t_devicesetting_config::clear_sceneeffect() {
  sceneeffect_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool devicesetting_t_devicesetting_config::_internal_sceneeffect() const {
  return sceneeffect_;
}
inline bool devicesetting_t_devicesetting_config::sceneeffect() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.sceneeffect)
  return _internal_sceneeffect();
}
inline void devicesetting_t_devicesetting_config::_internal_set_sceneeffect(bool value) {
  _has_bits_[0] |= 0x00000400u;
  sceneeffect_ = value;
}
inline void devicesetting_t_devicesetting_config::set_sceneeffect(bool value) {
  _internal_set_sceneeffect(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.sceneeffect)
}

// required bool uiclosescene = 12;
inline bool devicesetting_t_devicesetting_config::_internal_has_uiclosescene() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_uiclosescene() const {
  return _internal_has_uiclosescene();
}
inline void devicesetting_t_devicesetting_config::clear_uiclosescene() {
  uiclosescene_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool devicesetting_t_devicesetting_config::_internal_uiclosescene() const {
  return uiclosescene_;
}
inline bool devicesetting_t_devicesetting_config::uiclosescene() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.uiclosescene)
  return _internal_uiclosescene();
}
inline void devicesetting_t_devicesetting_config::_internal_set_uiclosescene(bool value) {
  _has_bits_[0] |= 0x00000800u;
  uiclosescene_ = value;
}
inline void devicesetting_t_devicesetting_config::set_uiclosescene(bool value) {
  _internal_set_uiclosescene(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.uiclosescene)
}

// required uint32 cameradis = 13;
inline bool devicesetting_t_devicesetting_config::_internal_has_cameradis() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_cameradis() const {
  return _internal_has_cameradis();
}
inline void devicesetting_t_devicesetting_config::clear_cameradis() {
  cameradis_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::_internal_cameradis() const {
  return cameradis_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::cameradis() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.cameradis)
  return _internal_cameradis();
}
inline void devicesetting_t_devicesetting_config::_internal_set_cameradis(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  cameradis_ = value;
}
inline void devicesetting_t_devicesetting_config::set_cameradis(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cameradis(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.cameradis)
}

// required uint32 maxtype = 14;
inline bool devicesetting_t_devicesetting_config::_internal_has_maxtype() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool devicesetting_t_devicesetting_config::has_maxtype() const {
  return _internal_has_maxtype();
}
inline void devicesetting_t_devicesetting_config::clear_maxtype() {
  maxtype_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::_internal_maxtype() const {
  return maxtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 devicesetting_t_devicesetting_config::maxtype() const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.t_devicesetting_config.maxtype)
  return _internal_maxtype();
}
inline void devicesetting_t_devicesetting_config::_internal_set_maxtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  maxtype_ = value;
}
inline void devicesetting_t_devicesetting_config::set_maxtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxtype(value);
  // @@protoc_insertion_point(field_set:pb.devicesetting.t_devicesetting_config.maxtype)
}

// -------------------------------------------------------------------

// devicesetting

// repeated .pb.devicesetting.t_devicesetting_config datas = 1;
inline int devicesetting::_internal_datas_size() const {
  return datas_.size();
}
inline int devicesetting::datas_size() const {
  return _internal_datas_size();
}
inline void devicesetting::clear_datas() {
  datas_.Clear();
}
inline ::pb::devicesetting_t_devicesetting_config* devicesetting::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.devicesetting.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::devicesetting_t_devicesetting_config >*
devicesetting::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.devicesetting.datas)
  return &datas_;
}
inline const ::pb::devicesetting_t_devicesetting_config& devicesetting::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::devicesetting_t_devicesetting_config& devicesetting::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.devicesetting.datas)
  return _internal_datas(index);
}
inline ::pb::devicesetting_t_devicesetting_config* devicesetting::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::devicesetting_t_devicesetting_config* devicesetting::add_datas() {
  // @@protoc_insertion_point(field_add:pb.devicesetting.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::devicesetting_t_devicesetting_config >&
devicesetting::datas() const {
  // @@protoc_insertion_point(field_list:pb.devicesetting.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_devicesetting_2eproto
