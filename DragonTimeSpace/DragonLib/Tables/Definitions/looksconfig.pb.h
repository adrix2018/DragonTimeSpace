// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: looksconfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_looksconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_looksconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_looksconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_looksconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_looksconfig_2eproto;
namespace pb {
class looksconfig;
class looksconfigDefaultTypeInternal;
extern looksconfigDefaultTypeInternal _looksconfig_default_instance_;
class looksconfig_t_looks_config;
class looksconfig_t_looks_configDefaultTypeInternal;
extern looksconfig_t_looks_configDefaultTypeInternal _looksconfig_t_looks_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::looksconfig* Arena::CreateMaybeMessage<::pb::looksconfig>(Arena*);
template<> ::pb::looksconfig_t_looks_config* Arena::CreateMaybeMessage<::pb::looksconfig_t_looks_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class looksconfig_t_looks_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.looksconfig.t_looks_config) */ {
 public:
  looksconfig_t_looks_config();
  virtual ~looksconfig_t_looks_config();

  looksconfig_t_looks_config(const looksconfig_t_looks_config& from);
  looksconfig_t_looks_config(looksconfig_t_looks_config&& from) noexcept
    : looksconfig_t_looks_config() {
    *this = ::std::move(from);
  }

  inline looksconfig_t_looks_config& operator=(const looksconfig_t_looks_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline looksconfig_t_looks_config& operator=(looksconfig_t_looks_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const looksconfig_t_looks_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const looksconfig_t_looks_config* internal_default_instance() {
    return reinterpret_cast<const looksconfig_t_looks_config*>(
               &_looksconfig_t_looks_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(looksconfig_t_looks_config& a, looksconfig_t_looks_config& b) {
    a.Swap(&b);
  }
  inline void Swap(looksconfig_t_looks_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline looksconfig_t_looks_config* New() const final {
    return CreateMaybeMessage<looksconfig_t_looks_config>(nullptr);
  }

  looksconfig_t_looks_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<looksconfig_t_looks_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const looksconfig_t_looks_config& from);
  void MergeFrom(const looksconfig_t_looks_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(looksconfig_t_looks_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.looksconfig.t_looks_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_looksconfig_2eproto);
    return ::descriptor_table_looksconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcefileFieldNumber = 4,
    kResourceFieldNumber = 5,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // required string resourcefile = 4;
  bool has_resourcefile() const;
  private:
  bool _internal_has_resourcefile() const;
  public:
  void clear_resourcefile();
  const std::string& resourcefile() const;
  void set_resourcefile(const std::string& value);
  void set_resourcefile(std::string&& value);
  void set_resourcefile(const char* value);
  void set_resourcefile(const char* value, size_t size);
  std::string* mutable_resourcefile();
  std::string* release_resourcefile();
  void set_allocated_resourcefile(std::string* resourcefile);
  private:
  const std::string& _internal_resourcefile() const;
  void _internal_set_resourcefile(const std::string& value);
  std::string* _internal_mutable_resourcefile();
  public:

  // required string resource = 5;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.looksconfig.t_looks_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourcefile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_looksconfig_2eproto;
};
// -------------------------------------------------------------------

class looksconfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.looksconfig) */ {
 public:
  looksconfig();
  virtual ~looksconfig();

  looksconfig(const looksconfig& from);
  looksconfig(looksconfig&& from) noexcept
    : looksconfig() {
    *this = ::std::move(from);
  }

  inline looksconfig& operator=(const looksconfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline looksconfig& operator=(looksconfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const looksconfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const looksconfig* internal_default_instance() {
    return reinterpret_cast<const looksconfig*>(
               &_looksconfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(looksconfig& a, looksconfig& b) {
    a.Swap(&b);
  }
  inline void Swap(looksconfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline looksconfig* New() const final {
    return CreateMaybeMessage<looksconfig>(nullptr);
  }

  looksconfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<looksconfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const looksconfig& from);
  void MergeFrom(const looksconfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(looksconfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.looksconfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_looksconfig_2eproto);
    return ::descriptor_table_looksconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef looksconfig_t_looks_config t_looks_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.looksconfig.t_looks_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::looksconfig_t_looks_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::looksconfig_t_looks_config >*
      mutable_datas();
  private:
  const ::pb::looksconfig_t_looks_config& _internal_datas(int index) const;
  ::pb::looksconfig_t_looks_config* _internal_add_datas();
  public:
  const ::pb::looksconfig_t_looks_config& datas(int index) const;
  ::pb::looksconfig_t_looks_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::looksconfig_t_looks_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.looksconfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::looksconfig_t_looks_config > datas_;
  friend struct ::TableStruct_looksconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// looksconfig_t_looks_config

// required uint32 tbxid = 1 [default = 0];
inline bool looksconfig_t_looks_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool looksconfig_t_looks_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void looksconfig_t_looks_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 looksconfig_t_looks_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 looksconfig_t_looks_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.looksconfig.t_looks_config.tbxid)
  return _internal_tbxid();
}
inline void looksconfig_t_looks_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tbxid_ = value;
}
inline void looksconfig_t_looks_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.looksconfig.t_looks_config.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool looksconfig_t_looks_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool looksconfig_t_looks_config::has_id() const {
  return _internal_has_id();
}
inline void looksconfig_t_looks_config::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 looksconfig_t_looks_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 looksconfig_t_looks_config::id() const {
  // @@protoc_insertion_point(field_get:pb.looksconfig.t_looks_config.id)
  return _internal_id();
}
inline void looksconfig_t_looks_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void looksconfig_t_looks_config::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.looksconfig.t_looks_config.id)
}

// required uint32 type = 3;
inline bool looksconfig_t_looks_config::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool looksconfig_t_looks_config::has_type() const {
  return _internal_has_type();
}
inline void looksconfig_t_looks_config::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 looksconfig_t_looks_config::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 looksconfig_t_looks_config::type() const {
  // @@protoc_insertion_point(field_get:pb.looksconfig.t_looks_config.type)
  return _internal_type();
}
inline void looksconfig_t_looks_config::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void looksconfig_t_looks_config::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pb.looksconfig.t_looks_config.type)
}

// required string resourcefile = 4;
inline bool looksconfig_t_looks_config::_internal_has_resourcefile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool looksconfig_t_looks_config::has_resourcefile() const {
  return _internal_has_resourcefile();
}
inline void looksconfig_t_looks_config::clear_resourcefile() {
  resourcefile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& looksconfig_t_looks_config::resourcefile() const {
  // @@protoc_insertion_point(field_get:pb.looksconfig.t_looks_config.resourcefile)
  return _internal_resourcefile();
}
inline void looksconfig_t_looks_config::set_resourcefile(const std::string& value) {
  _internal_set_resourcefile(value);
  // @@protoc_insertion_point(field_set:pb.looksconfig.t_looks_config.resourcefile)
}
inline std::string* looksconfig_t_looks_config::mutable_resourcefile() {
  // @@protoc_insertion_point(field_mutable:pb.looksconfig.t_looks_config.resourcefile)
  return _internal_mutable_resourcefile();
}
inline const std::string& looksconfig_t_looks_config::_internal_resourcefile() const {
  return resourcefile_.GetNoArena();
}
inline void looksconfig_t_looks_config::_internal_set_resourcefile(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  resourcefile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void looksconfig_t_looks_config::set_resourcefile(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  resourcefile_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.looksconfig.t_looks_config.resourcefile)
}
inline void looksconfig_t_looks_config::set_resourcefile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  resourcefile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.looksconfig.t_looks_config.resourcefile)
}
inline void looksconfig_t_looks_config::set_resourcefile(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  resourcefile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.looksconfig.t_looks_config.resourcefile)
}
inline std::string* looksconfig_t_looks_config::_internal_mutable_resourcefile() {
  _has_bits_[0] |= 0x00000001u;
  return resourcefile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* looksconfig_t_looks_config::release_resourcefile() {
  // @@protoc_insertion_point(field_release:pb.looksconfig.t_looks_config.resourcefile)
  if (!_internal_has_resourcefile()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return resourcefile_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void looksconfig_t_looks_config::set_allocated_resourcefile(std::string* resourcefile) {
  if (resourcefile != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  resourcefile_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resourcefile);
  // @@protoc_insertion_point(field_set_allocated:pb.looksconfig.t_looks_config.resourcefile)
}

// required string resource = 5;
inline bool looksconfig_t_looks_config::_internal_has_resource() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool looksconfig_t_looks_config::has_resource() const {
  return _internal_has_resource();
}
inline void looksconfig_t_looks_config::clear_resource() {
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& looksconfig_t_looks_config::resource() const {
  // @@protoc_insertion_point(field_get:pb.looksconfig.t_looks_config.resource)
  return _internal_resource();
}
inline void looksconfig_t_looks_config::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:pb.looksconfig.t_looks_config.resource)
}
inline std::string* looksconfig_t_looks_config::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:pb.looksconfig.t_looks_config.resource)
  return _internal_mutable_resource();
}
inline const std::string& looksconfig_t_looks_config::_internal_resource() const {
  return resource_.GetNoArena();
}
inline void looksconfig_t_looks_config::_internal_set_resource(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void looksconfig_t_looks_config::set_resource(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  resource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.looksconfig.t_looks_config.resource)
}
inline void looksconfig_t_looks_config::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.looksconfig.t_looks_config.resource)
}
inline void looksconfig_t_looks_config::set_resource(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.looksconfig.t_looks_config.resource)
}
inline std::string* looksconfig_t_looks_config::_internal_mutable_resource() {
  _has_bits_[0] |= 0x00000002u;
  return resource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* looksconfig_t_looks_config::release_resource() {
  // @@protoc_insertion_point(field_release:pb.looksconfig.t_looks_config.resource)
  if (!_internal_has_resource()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return resource_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void looksconfig_t_looks_config::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  resource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:pb.looksconfig.t_looks_config.resource)
}

// -------------------------------------------------------------------

// looksconfig

// repeated .pb.looksconfig.t_looks_config datas = 1;
inline int looksconfig::_internal_datas_size() const {
  return datas_.size();
}
inline int looksconfig::datas_size() const {
  return _internal_datas_size();
}
inline void looksconfig::clear_datas() {
  datas_.Clear();
}
inline ::pb::looksconfig_t_looks_config* looksconfig::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.looksconfig.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::looksconfig_t_looks_config >*
looksconfig::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.looksconfig.datas)
  return &datas_;
}
inline const ::pb::looksconfig_t_looks_config& looksconfig::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::looksconfig_t_looks_config& looksconfig::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.looksconfig.datas)
  return _internal_datas(index);
}
inline ::pb::looksconfig_t_looks_config* looksconfig::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::looksconfig_t_looks_config* looksconfig::add_datas() {
  // @@protoc_insertion_point(field_add:pb.looksconfig.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::looksconfig_t_looks_config >&
looksconfig::datas() const {
  // @@protoc_insertion_point(field_list:pb.looksconfig.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_looksconfig_2eproto
