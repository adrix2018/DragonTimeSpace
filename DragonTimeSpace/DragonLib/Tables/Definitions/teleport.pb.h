// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teleport.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_teleport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_teleport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_teleport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_teleport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_teleport_2eproto;
namespace pb {
class teleport;
class teleportDefaultTypeInternal;
extern teleportDefaultTypeInternal _teleport_default_instance_;
class teleport_t_teleport;
class teleport_t_teleportDefaultTypeInternal;
extern teleport_t_teleportDefaultTypeInternal _teleport_t_teleport_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::teleport* Arena::CreateMaybeMessage<::pb::teleport>(Arena*);
template<> ::pb::teleport_t_teleport* Arena::CreateMaybeMessage<::pb::teleport_t_teleport>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class teleport_t_teleport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.teleport.t_teleport) */ {
 public:
  teleport_t_teleport();
  virtual ~teleport_t_teleport();

  teleport_t_teleport(const teleport_t_teleport& from);
  teleport_t_teleport(teleport_t_teleport&& from) noexcept
    : teleport_t_teleport() {
    *this = ::std::move(from);
  }

  inline teleport_t_teleport& operator=(const teleport_t_teleport& from) {
    CopyFrom(from);
    return *this;
  }
  inline teleport_t_teleport& operator=(teleport_t_teleport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const teleport_t_teleport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const teleport_t_teleport* internal_default_instance() {
    return reinterpret_cast<const teleport_t_teleport*>(
               &_teleport_t_teleport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(teleport_t_teleport& a, teleport_t_teleport& b) {
    a.Swap(&b);
  }
  inline void Swap(teleport_t_teleport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline teleport_t_teleport* New() const final {
    return CreateMaybeMessage<teleport_t_teleport>(nullptr);
  }

  teleport_t_teleport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<teleport_t_teleport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const teleport_t_teleport& from);
  void MergeFrom(const teleport_t_teleport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(teleport_t_teleport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.teleport.t_teleport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_teleport_2eproto);
    return ::descriptor_table_teleport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescFieldNumber = 4,
    kCoordinateFieldNumber = 6,
    kCostFieldNumber = 7,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kNpcidFieldNumber = 3,
    kMapidFieldNumber = 5,
  };
  // required string Desc = 4;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // required string coordinate = 6;
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const std::string& coordinate() const;
  void set_coordinate(const std::string& value);
  void set_coordinate(std::string&& value);
  void set_coordinate(const char* value);
  void set_coordinate(const char* value, size_t size);
  std::string* mutable_coordinate();
  std::string* release_coordinate();
  void set_allocated_coordinate(std::string* coordinate);
  private:
  const std::string& _internal_coordinate() const;
  void _internal_set_coordinate(const std::string& value);
  std::string* _internal_mutable_coordinate();
  public:

  // required string cost = 7;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const std::string& cost() const;
  void set_cost(const std::string& value);
  void set_cost(std::string&& value);
  void set_cost(const char* value);
  void set_cost(const char* value, size_t size);
  std::string* mutable_cost();
  std::string* release_cost();
  void set_allocated_cost(std::string* cost);
  private:
  const std::string& _internal_cost() const;
  void _internal_set_cost(const std::string& value);
  std::string* _internal_mutable_cost();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 npcid = 3;
  bool has_npcid() const;
  private:
  bool _internal_has_npcid() const;
  public:
  void clear_npcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 npcid() const;
  void set_npcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_npcid() const;
  void _internal_set_npcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 mapid = 5;
  bool has_mapid() const;
  private:
  bool _internal_has_mapid() const;
  public:
  void clear_mapid();
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid() const;
  void set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mapid() const;
  void _internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.teleport.t_teleport)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coordinate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 npcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mapid_;
  friend struct ::TableStruct_teleport_2eproto;
};
// -------------------------------------------------------------------

class teleport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.teleport) */ {
 public:
  teleport();
  virtual ~teleport();

  teleport(const teleport& from);
  teleport(teleport&& from) noexcept
    : teleport() {
    *this = ::std::move(from);
  }

  inline teleport& operator=(const teleport& from) {
    CopyFrom(from);
    return *this;
  }
  inline teleport& operator=(teleport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const teleport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const teleport* internal_default_instance() {
    return reinterpret_cast<const teleport*>(
               &_teleport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(teleport& a, teleport& b) {
    a.Swap(&b);
  }
  inline void Swap(teleport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline teleport* New() const final {
    return CreateMaybeMessage<teleport>(nullptr);
  }

  teleport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<teleport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const teleport& from);
  void MergeFrom(const teleport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(teleport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.teleport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_teleport_2eproto);
    return ::descriptor_table_teleport_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef teleport_t_teleport t_teleport;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.teleport.t_teleport datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::teleport_t_teleport* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::teleport_t_teleport >*
      mutable_datas();
  private:
  const ::pb::teleport_t_teleport& _internal_datas(int index) const;
  ::pb::teleport_t_teleport* _internal_add_datas();
  public:
  const ::pb::teleport_t_teleport& datas(int index) const;
  ::pb::teleport_t_teleport* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::teleport_t_teleport >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.teleport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::teleport_t_teleport > datas_;
  friend struct ::TableStruct_teleport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// teleport_t_teleport

// required uint32 tbxid = 1 [default = 0];
inline bool teleport_t_teleport::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool teleport_t_teleport::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void teleport_t_teleport::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teleport_t_teleport::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teleport_t_teleport::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.teleport.t_teleport.tbxid)
  return _internal_tbxid();
}
inline void teleport_t_teleport::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tbxid_ = value;
}
inline void teleport_t_teleport::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.teleport.t_teleport.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool teleport_t_teleport::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool teleport_t_teleport::has_id() const {
  return _internal_has_id();
}
inline void teleport_t_teleport::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teleport_t_teleport::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teleport_t_teleport::id() const {
  // @@protoc_insertion_point(field_get:pb.teleport.t_teleport.id)
  return _internal_id();
}
inline void teleport_t_teleport::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void teleport_t_teleport::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.teleport.t_teleport.id)
}

// required uint32 npcid = 3;
inline bool teleport_t_teleport::_internal_has_npcid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool teleport_t_teleport::has_npcid() const {
  return _internal_has_npcid();
}
inline void teleport_t_teleport::clear_npcid() {
  npcid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teleport_t_teleport::_internal_npcid() const {
  return npcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teleport_t_teleport::npcid() const {
  // @@protoc_insertion_point(field_get:pb.teleport.t_teleport.npcid)
  return _internal_npcid();
}
inline void teleport_t_teleport::_internal_set_npcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  npcid_ = value;
}
inline void teleport_t_teleport::set_npcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_npcid(value);
  // @@protoc_insertion_point(field_set:pb.teleport.t_teleport.npcid)
}

// required string Desc = 4;
inline bool teleport_t_teleport::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool teleport_t_teleport::has_desc() const {
  return _internal_has_desc();
}
inline void teleport_t_teleport::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& teleport_t_teleport::desc() const {
  // @@protoc_insertion_point(field_get:pb.teleport.t_teleport.Desc)
  return _internal_desc();
}
inline void teleport_t_teleport::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:pb.teleport.t_teleport.Desc)
}
inline std::string* teleport_t_teleport::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:pb.teleport.t_teleport.Desc)
  return _internal_mutable_desc();
}
inline const std::string& teleport_t_teleport::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void teleport_t_teleport::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void teleport_t_teleport::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.teleport.t_teleport.Desc)
}
inline void teleport_t_teleport::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.teleport.t_teleport.Desc)
}
inline void teleport_t_teleport::set_desc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.teleport.t_teleport.Desc)
}
inline std::string* teleport_t_teleport::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000001u;
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* teleport_t_teleport::release_desc() {
  // @@protoc_insertion_point(field_release:pb.teleport.t_teleport.Desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return desc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void teleport_t_teleport::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.teleport.t_teleport.Desc)
}

// required uint32 mapid = 5;
inline bool teleport_t_teleport::_internal_has_mapid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool teleport_t_teleport::has_mapid() const {
  return _internal_has_mapid();
}
inline void teleport_t_teleport::clear_mapid() {
  mapid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teleport_t_teleport::_internal_mapid() const {
  return mapid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teleport_t_teleport::mapid() const {
  // @@protoc_insertion_point(field_get:pb.teleport.t_teleport.mapid)
  return _internal_mapid();
}
inline void teleport_t_teleport::_internal_set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  mapid_ = value;
}
inline void teleport_t_teleport::set_mapid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mapid(value);
  // @@protoc_insertion_point(field_set:pb.teleport.t_teleport.mapid)
}

// required string coordinate = 6;
inline bool teleport_t_teleport::_internal_has_coordinate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool teleport_t_teleport::has_coordinate() const {
  return _internal_has_coordinate();
}
inline void teleport_t_teleport::clear_coordinate() {
  coordinate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& teleport_t_teleport::coordinate() const {
  // @@protoc_insertion_point(field_get:pb.teleport.t_teleport.coordinate)
  return _internal_coordinate();
}
inline void teleport_t_teleport::set_coordinate(const std::string& value) {
  _internal_set_coordinate(value);
  // @@protoc_insertion_point(field_set:pb.teleport.t_teleport.coordinate)
}
inline std::string* teleport_t_teleport::mutable_coordinate() {
  // @@protoc_insertion_point(field_mutable:pb.teleport.t_teleport.coordinate)
  return _internal_mutable_coordinate();
}
inline const std::string& teleport_t_teleport::_internal_coordinate() const {
  return coordinate_.GetNoArena();
}
inline void teleport_t_teleport::_internal_set_coordinate(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  coordinate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void teleport_t_teleport::set_coordinate(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  coordinate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.teleport.t_teleport.coordinate)
}
inline void teleport_t_teleport::set_coordinate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  coordinate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.teleport.t_teleport.coordinate)
}
inline void teleport_t_teleport::set_coordinate(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  coordinate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.teleport.t_teleport.coordinate)
}
inline std::string* teleport_t_teleport::_internal_mutable_coordinate() {
  _has_bits_[0] |= 0x00000002u;
  return coordinate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* teleport_t_teleport::release_coordinate() {
  // @@protoc_insertion_point(field_release:pb.teleport.t_teleport.coordinate)
  if (!_internal_has_coordinate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return coordinate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void teleport_t_teleport::set_allocated_coordinate(std::string* coordinate) {
  if (coordinate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  coordinate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coordinate);
  // @@protoc_insertion_point(field_set_allocated:pb.teleport.t_teleport.coordinate)
}

// required string cost = 7;
inline bool teleport_t_teleport::_internal_has_cost() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool teleport_t_teleport::has_cost() const {
  return _internal_has_cost();
}
inline void teleport_t_teleport::clear_cost() {
  cost_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& teleport_t_teleport::cost() const {
  // @@protoc_insertion_point(field_get:pb.teleport.t_teleport.cost)
  return _internal_cost();
}
inline void teleport_t_teleport::set_cost(const std::string& value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:pb.teleport.t_teleport.cost)
}
inline std::string* teleport_t_teleport::mutable_cost() {
  // @@protoc_insertion_point(field_mutable:pb.teleport.t_teleport.cost)
  return _internal_mutable_cost();
}
inline const std::string& teleport_t_teleport::_internal_cost() const {
  return cost_.GetNoArena();
}
inline void teleport_t_teleport::_internal_set_cost(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void teleport_t_teleport::set_cost(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cost_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.teleport.t_teleport.cost)
}
inline void teleport_t_teleport::set_cost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.teleport.t_teleport.cost)
}
inline void teleport_t_teleport::set_cost(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.teleport.t_teleport.cost)
}
inline std::string* teleport_t_teleport::_internal_mutable_cost() {
  _has_bits_[0] |= 0x00000004u;
  return cost_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* teleport_t_teleport::release_cost() {
  // @@protoc_insertion_point(field_release:pb.teleport.t_teleport.cost)
  if (!_internal_has_cost()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cost_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void teleport_t_teleport::set_allocated_cost(std::string* cost) {
  if (cost != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cost_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cost);
  // @@protoc_insertion_point(field_set_allocated:pb.teleport.t_teleport.cost)
}

// -------------------------------------------------------------------

// teleport

// repeated .pb.teleport.t_teleport datas = 1;
inline int teleport::_internal_datas_size() const {
  return datas_.size();
}
inline int teleport::datas_size() const {
  return _internal_datas_size();
}
inline void teleport::clear_datas() {
  datas_.Clear();
}
inline ::pb::teleport_t_teleport* teleport::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.teleport.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::teleport_t_teleport >*
teleport::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.teleport.datas)
  return &datas_;
}
inline const ::pb::teleport_t_teleport& teleport::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::teleport_t_teleport& teleport::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.teleport.datas)
  return _internal_datas(index);
}
inline ::pb::teleport_t_teleport* teleport::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::teleport_t_teleport* teleport::add_datas() {
  // @@protoc_insertion_point(field_add:pb.teleport.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::teleport_t_teleport >&
teleport::datas() const {
  // @@protoc_insertion_point(field_list:pb.teleport.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_teleport_2eproto
