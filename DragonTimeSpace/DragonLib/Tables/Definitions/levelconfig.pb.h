// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: levelconfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_levelconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_levelconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_levelconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_levelconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_levelconfig_2eproto;
namespace pb {
class levelconfig;
class levelconfigDefaultTypeInternal;
extern levelconfigDefaultTypeInternal _levelconfig_default_instance_;
class levelconfig_t_level_config;
class levelconfig_t_level_configDefaultTypeInternal;
extern levelconfig_t_level_configDefaultTypeInternal _levelconfig_t_level_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::levelconfig* Arena::CreateMaybeMessage<::pb::levelconfig>(Arena*);
template<> ::pb::levelconfig_t_level_config* Arena::CreateMaybeMessage<::pb::levelconfig_t_level_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class levelconfig_t_level_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.levelconfig.t_level_config) */ {
 public:
  levelconfig_t_level_config();
  virtual ~levelconfig_t_level_config();

  levelconfig_t_level_config(const levelconfig_t_level_config& from);
  levelconfig_t_level_config(levelconfig_t_level_config&& from) noexcept
    : levelconfig_t_level_config() {
    *this = ::std::move(from);
  }

  inline levelconfig_t_level_config& operator=(const levelconfig_t_level_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline levelconfig_t_level_config& operator=(levelconfig_t_level_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const levelconfig_t_level_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const levelconfig_t_level_config* internal_default_instance() {
    return reinterpret_cast<const levelconfig_t_level_config*>(
               &_levelconfig_t_level_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(levelconfig_t_level_config& a, levelconfig_t_level_config& b) {
    a.Swap(&b);
  }
  inline void Swap(levelconfig_t_level_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline levelconfig_t_level_config* New() const final {
    return CreateMaybeMessage<levelconfig_t_level_config>(nullptr);
  }

  levelconfig_t_level_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<levelconfig_t_level_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const levelconfig_t_level_config& from);
  void MergeFrom(const levelconfig_t_level_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(levelconfig_t_level_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.levelconfig.t_level_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_levelconfig_2eproto);
    return ::descriptor_table_levelconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnlockskillFieldNumber = 5,
    kGuildDailyRewardsFieldNumber = 8,
    kGuildDailyLeaderRewardsFieldNumber = 9,
    kTbxidFieldNumber = 1,
    kLevelFieldNumber = 2,
    kLevelupexpFieldNumber = 3,
    kDelProtectTimeFieldNumber = 4,
    kGuildLevelupExpFieldNumber = 6,
    kGuildLevelupSalaryFieldNumber = 7,
    kGuildDailyMaintainFundFieldNumber = 10,
    kGuildMemberLimitFieldNumber = 11,
  };
  // required string unlockskill = 5;
  bool has_unlockskill() const;
  private:
  bool _internal_has_unlockskill() const;
  public:
  void clear_unlockskill();
  const std::string& unlockskill() const;
  void set_unlockskill(const std::string& value);
  void set_unlockskill(std::string&& value);
  void set_unlockskill(const char* value);
  void set_unlockskill(const char* value, size_t size);
  std::string* mutable_unlockskill();
  std::string* release_unlockskill();
  void set_allocated_unlockskill(std::string* unlockskill);
  private:
  const std::string& _internal_unlockskill() const;
  void _internal_set_unlockskill(const std::string& value);
  std::string* _internal_mutable_unlockskill();
  public:

  // required string guild_daily_rewards = 8;
  bool has_guild_daily_rewards() const;
  private:
  bool _internal_has_guild_daily_rewards() const;
  public:
  void clear_guild_daily_rewards();
  const std::string& guild_daily_rewards() const;
  void set_guild_daily_rewards(const std::string& value);
  void set_guild_daily_rewards(std::string&& value);
  void set_guild_daily_rewards(const char* value);
  void set_guild_daily_rewards(const char* value, size_t size);
  std::string* mutable_guild_daily_rewards();
  std::string* release_guild_daily_rewards();
  void set_allocated_guild_daily_rewards(std::string* guild_daily_rewards);
  private:
  const std::string& _internal_guild_daily_rewards() const;
  void _internal_set_guild_daily_rewards(const std::string& value);
  std::string* _internal_mutable_guild_daily_rewards();
  public:

  // required string guild_daily_leader_rewards = 9;
  bool has_guild_daily_leader_rewards() const;
  private:
  bool _internal_has_guild_daily_leader_rewards() const;
  public:
  void clear_guild_daily_leader_rewards();
  const std::string& guild_daily_leader_rewards() const;
  void set_guild_daily_leader_rewards(const std::string& value);
  void set_guild_daily_leader_rewards(std::string&& value);
  void set_guild_daily_leader_rewards(const char* value);
  void set_guild_daily_leader_rewards(const char* value, size_t size);
  std::string* mutable_guild_daily_leader_rewards();
  std::string* release_guild_daily_leader_rewards();
  void set_allocated_guild_daily_leader_rewards(std::string* guild_daily_leader_rewards);
  private:
  const std::string& _internal_guild_daily_leader_rewards() const;
  void _internal_set_guild_daily_leader_rewards(const std::string& value);
  std::string* _internal_mutable_guild_daily_leader_rewards();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 level = 2 [default = 0];
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 levelupexp = 3;
  bool has_levelupexp() const;
  private:
  bool _internal_has_levelupexp() const;
  public:
  void clear_levelupexp();
  ::PROTOBUF_NAMESPACE_ID::uint32 levelupexp() const;
  void set_levelupexp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_levelupexp() const;
  void _internal_set_levelupexp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 del_protect_time = 4;
  bool has_del_protect_time() const;
  private:
  bool _internal_has_del_protect_time() const;
  public:
  void clear_del_protect_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 del_protect_time() const;
  void set_del_protect_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_del_protect_time() const;
  void _internal_set_del_protect_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 guild_levelup_exp = 6;
  bool has_guild_levelup_exp() const;
  private:
  bool _internal_has_guild_levelup_exp() const;
  public:
  void clear_guild_levelup_exp();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_levelup_exp() const;
  void set_guild_levelup_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_levelup_exp() const;
  void _internal_set_guild_levelup_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 guild_levelup_salary = 7;
  bool has_guild_levelup_salary() const;
  private:
  bool _internal_has_guild_levelup_salary() const;
  public:
  void clear_guild_levelup_salary();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_levelup_salary() const;
  void set_guild_levelup_salary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_levelup_salary() const;
  void _internal_set_guild_levelup_salary(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 guild_daily_maintain_fund = 10;
  bool has_guild_daily_maintain_fund() const;
  private:
  bool _internal_has_guild_daily_maintain_fund() const;
  public:
  void clear_guild_daily_maintain_fund();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_daily_maintain_fund() const;
  void set_guild_daily_maintain_fund(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_daily_maintain_fund() const;
  void _internal_set_guild_daily_maintain_fund(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 guild_member_limit = 11;
  bool has_guild_member_limit() const;
  private:
  bool _internal_has_guild_member_limit() const;
  public:
  void clear_guild_member_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_member_limit() const;
  void set_guild_member_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_guild_member_limit() const;
  void _internal_set_guild_member_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.levelconfig.t_level_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unlockskill_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_daily_rewards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_daily_leader_rewards_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 levelupexp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 del_protect_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_levelup_exp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_levelup_salary_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_daily_maintain_fund_;
  ::PROTOBUF_NAMESPACE_ID::uint32 guild_member_limit_;
  friend struct ::TableStruct_levelconfig_2eproto;
};
// -------------------------------------------------------------------

class levelconfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.levelconfig) */ {
 public:
  levelconfig();
  virtual ~levelconfig();

  levelconfig(const levelconfig& from);
  levelconfig(levelconfig&& from) noexcept
    : levelconfig() {
    *this = ::std::move(from);
  }

  inline levelconfig& operator=(const levelconfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline levelconfig& operator=(levelconfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const levelconfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const levelconfig* internal_default_instance() {
    return reinterpret_cast<const levelconfig*>(
               &_levelconfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(levelconfig& a, levelconfig& b) {
    a.Swap(&b);
  }
  inline void Swap(levelconfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline levelconfig* New() const final {
    return CreateMaybeMessage<levelconfig>(nullptr);
  }

  levelconfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<levelconfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const levelconfig& from);
  void MergeFrom(const levelconfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(levelconfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.levelconfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_levelconfig_2eproto);
    return ::descriptor_table_levelconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef levelconfig_t_level_config t_level_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.levelconfig.t_level_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::levelconfig_t_level_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::levelconfig_t_level_config >*
      mutable_datas();
  private:
  const ::pb::levelconfig_t_level_config& _internal_datas(int index) const;
  ::pb::levelconfig_t_level_config* _internal_add_datas();
  public:
  const ::pb::levelconfig_t_level_config& datas(int index) const;
  ::pb::levelconfig_t_level_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::levelconfig_t_level_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.levelconfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::levelconfig_t_level_config > datas_;
  friend struct ::TableStruct_levelconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// levelconfig_t_level_config

// required uint32 tbxid = 1 [default = 0];
inline bool levelconfig_t_level_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void levelconfig_t_level_config::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.tbxid)
  return _internal_tbxid();
}
inline void levelconfig_t_level_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tbxid_ = value;
}
inline void levelconfig_t_level_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.tbxid)
}

// required uint32 level = 2 [default = 0];
inline bool levelconfig_t_level_config::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_level() const {
  return _internal_has_level();
}
inline void levelconfig_t_level_config::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::level() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.level)
  return _internal_level();
}
inline void levelconfig_t_level_config::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  level_ = value;
}
inline void levelconfig_t_level_config::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.level)
}

// required uint32 levelupexp = 3;
inline bool levelconfig_t_level_config::_internal_has_levelupexp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_levelupexp() const {
  return _internal_has_levelupexp();
}
inline void levelconfig_t_level_config::clear_levelupexp() {
  levelupexp_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::_internal_levelupexp() const {
  return levelupexp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::levelupexp() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.levelupexp)
  return _internal_levelupexp();
}
inline void levelconfig_t_level_config::_internal_set_levelupexp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  levelupexp_ = value;
}
inline void levelconfig_t_level_config::set_levelupexp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_levelupexp(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.levelupexp)
}

// required uint32 del_protect_time = 4;
inline bool levelconfig_t_level_config::_internal_has_del_protect_time() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_del_protect_time() const {
  return _internal_has_del_protect_time();
}
inline void levelconfig_t_level_config::clear_del_protect_time() {
  del_protect_time_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::_internal_del_protect_time() const {
  return del_protect_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::del_protect_time() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.del_protect_time)
  return _internal_del_protect_time();
}
inline void levelconfig_t_level_config::_internal_set_del_protect_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  del_protect_time_ = value;
}
inline void levelconfig_t_level_config::set_del_protect_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_del_protect_time(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.del_protect_time)
}

// required string unlockskill = 5;
inline bool levelconfig_t_level_config::_internal_has_unlockskill() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_unlockskill() const {
  return _internal_has_unlockskill();
}
inline void levelconfig_t_level_config::clear_unlockskill() {
  unlockskill_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& levelconfig_t_level_config::unlockskill() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.unlockskill)
  return _internal_unlockskill();
}
inline void levelconfig_t_level_config::set_unlockskill(const std::string& value) {
  _internal_set_unlockskill(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.unlockskill)
}
inline std::string* levelconfig_t_level_config::mutable_unlockskill() {
  // @@protoc_insertion_point(field_mutable:pb.levelconfig.t_level_config.unlockskill)
  return _internal_mutable_unlockskill();
}
inline const std::string& levelconfig_t_level_config::_internal_unlockskill() const {
  return unlockskill_.GetNoArena();
}
inline void levelconfig_t_level_config::_internal_set_unlockskill(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  unlockskill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void levelconfig_t_level_config::set_unlockskill(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  unlockskill_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.levelconfig.t_level_config.unlockskill)
}
inline void levelconfig_t_level_config::set_unlockskill(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  unlockskill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.levelconfig.t_level_config.unlockskill)
}
inline void levelconfig_t_level_config::set_unlockskill(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  unlockskill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.levelconfig.t_level_config.unlockskill)
}
inline std::string* levelconfig_t_level_config::_internal_mutable_unlockskill() {
  _has_bits_[0] |= 0x00000001u;
  return unlockskill_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* levelconfig_t_level_config::release_unlockskill() {
  // @@protoc_insertion_point(field_release:pb.levelconfig.t_level_config.unlockskill)
  if (!_internal_has_unlockskill()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return unlockskill_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void levelconfig_t_level_config::set_allocated_unlockskill(std::string* unlockskill) {
  if (unlockskill != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  unlockskill_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unlockskill);
  // @@protoc_insertion_point(field_set_allocated:pb.levelconfig.t_level_config.unlockskill)
}

// required uint32 guild_levelup_exp = 6;
inline bool levelconfig_t_level_config::_internal_has_guild_levelup_exp() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_guild_levelup_exp() const {
  return _internal_has_guild_levelup_exp();
}
inline void levelconfig_t_level_config::clear_guild_levelup_exp() {
  guild_levelup_exp_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::_internal_guild_levelup_exp() const {
  return guild_levelup_exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::guild_levelup_exp() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.guild_levelup_exp)
  return _internal_guild_levelup_exp();
}
inline void levelconfig_t_level_config::_internal_set_guild_levelup_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  guild_levelup_exp_ = value;
}
inline void levelconfig_t_level_config::set_guild_levelup_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_levelup_exp(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.guild_levelup_exp)
}

// required uint32 guild_levelup_salary = 7;
inline bool levelconfig_t_level_config::_internal_has_guild_levelup_salary() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_guild_levelup_salary() const {
  return _internal_has_guild_levelup_salary();
}
inline void levelconfig_t_level_config::clear_guild_levelup_salary() {
  guild_levelup_salary_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::_internal_guild_levelup_salary() const {
  return guild_levelup_salary_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::guild_levelup_salary() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.guild_levelup_salary)
  return _internal_guild_levelup_salary();
}
inline void levelconfig_t_level_config::_internal_set_guild_levelup_salary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  guild_levelup_salary_ = value;
}
inline void levelconfig_t_level_config::set_guild_levelup_salary(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_levelup_salary(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.guild_levelup_salary)
}

// required string guild_daily_rewards = 8;
inline bool levelconfig_t_level_config::_internal_has_guild_daily_rewards() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_guild_daily_rewards() const {
  return _internal_has_guild_daily_rewards();
}
inline void levelconfig_t_level_config::clear_guild_daily_rewards() {
  guild_daily_rewards_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& levelconfig_t_level_config::guild_daily_rewards() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.guild_daily_rewards)
  return _internal_guild_daily_rewards();
}
inline void levelconfig_t_level_config::set_guild_daily_rewards(const std::string& value) {
  _internal_set_guild_daily_rewards(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.guild_daily_rewards)
}
inline std::string* levelconfig_t_level_config::mutable_guild_daily_rewards() {
  // @@protoc_insertion_point(field_mutable:pb.levelconfig.t_level_config.guild_daily_rewards)
  return _internal_mutable_guild_daily_rewards();
}
inline const std::string& levelconfig_t_level_config::_internal_guild_daily_rewards() const {
  return guild_daily_rewards_.GetNoArena();
}
inline void levelconfig_t_level_config::_internal_set_guild_daily_rewards(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  guild_daily_rewards_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void levelconfig_t_level_config::set_guild_daily_rewards(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  guild_daily_rewards_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.levelconfig.t_level_config.guild_daily_rewards)
}
inline void levelconfig_t_level_config::set_guild_daily_rewards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  guild_daily_rewards_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.levelconfig.t_level_config.guild_daily_rewards)
}
inline void levelconfig_t_level_config::set_guild_daily_rewards(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  guild_daily_rewards_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.levelconfig.t_level_config.guild_daily_rewards)
}
inline std::string* levelconfig_t_level_config::_internal_mutable_guild_daily_rewards() {
  _has_bits_[0] |= 0x00000002u;
  return guild_daily_rewards_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* levelconfig_t_level_config::release_guild_daily_rewards() {
  // @@protoc_insertion_point(field_release:pb.levelconfig.t_level_config.guild_daily_rewards)
  if (!_internal_has_guild_daily_rewards()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return guild_daily_rewards_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void levelconfig_t_level_config::set_allocated_guild_daily_rewards(std::string* guild_daily_rewards) {
  if (guild_daily_rewards != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  guild_daily_rewards_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guild_daily_rewards);
  // @@protoc_insertion_point(field_set_allocated:pb.levelconfig.t_level_config.guild_daily_rewards)
}

// required string guild_daily_leader_rewards = 9;
inline bool levelconfig_t_level_config::_internal_has_guild_daily_leader_rewards() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_guild_daily_leader_rewards() const {
  return _internal_has_guild_daily_leader_rewards();
}
inline void levelconfig_t_level_config::clear_guild_daily_leader_rewards() {
  guild_daily_leader_rewards_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& levelconfig_t_level_config::guild_daily_leader_rewards() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.guild_daily_leader_rewards)
  return _internal_guild_daily_leader_rewards();
}
inline void levelconfig_t_level_config::set_guild_daily_leader_rewards(const std::string& value) {
  _internal_set_guild_daily_leader_rewards(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.guild_daily_leader_rewards)
}
inline std::string* levelconfig_t_level_config::mutable_guild_daily_leader_rewards() {
  // @@protoc_insertion_point(field_mutable:pb.levelconfig.t_level_config.guild_daily_leader_rewards)
  return _internal_mutable_guild_daily_leader_rewards();
}
inline const std::string& levelconfig_t_level_config::_internal_guild_daily_leader_rewards() const {
  return guild_daily_leader_rewards_.GetNoArena();
}
inline void levelconfig_t_level_config::_internal_set_guild_daily_leader_rewards(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  guild_daily_leader_rewards_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void levelconfig_t_level_config::set_guild_daily_leader_rewards(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  guild_daily_leader_rewards_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.levelconfig.t_level_config.guild_daily_leader_rewards)
}
inline void levelconfig_t_level_config::set_guild_daily_leader_rewards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  guild_daily_leader_rewards_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.levelconfig.t_level_config.guild_daily_leader_rewards)
}
inline void levelconfig_t_level_config::set_guild_daily_leader_rewards(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  guild_daily_leader_rewards_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.levelconfig.t_level_config.guild_daily_leader_rewards)
}
inline std::string* levelconfig_t_level_config::_internal_mutable_guild_daily_leader_rewards() {
  _has_bits_[0] |= 0x00000004u;
  return guild_daily_leader_rewards_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* levelconfig_t_level_config::release_guild_daily_leader_rewards() {
  // @@protoc_insertion_point(field_release:pb.levelconfig.t_level_config.guild_daily_leader_rewards)
  if (!_internal_has_guild_daily_leader_rewards()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return guild_daily_leader_rewards_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void levelconfig_t_level_config::set_allocated_guild_daily_leader_rewards(std::string* guild_daily_leader_rewards) {
  if (guild_daily_leader_rewards != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  guild_daily_leader_rewards_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guild_daily_leader_rewards);
  // @@protoc_insertion_point(field_set_allocated:pb.levelconfig.t_level_config.guild_daily_leader_rewards)
}

// required uint32 guild_daily_maintain_fund = 10;
inline bool levelconfig_t_level_config::_internal_has_guild_daily_maintain_fund() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_guild_daily_maintain_fund() const {
  return _internal_has_guild_daily_maintain_fund();
}
inline void levelconfig_t_level_config::clear_guild_daily_maintain_fund() {
  guild_daily_maintain_fund_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::_internal_guild_daily_maintain_fund() const {
  return guild_daily_maintain_fund_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::guild_daily_maintain_fund() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.guild_daily_maintain_fund)
  return _internal_guild_daily_maintain_fund();
}
inline void levelconfig_t_level_config::_internal_set_guild_daily_maintain_fund(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  guild_daily_maintain_fund_ = value;
}
inline void levelconfig_t_level_config::set_guild_daily_maintain_fund(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_daily_maintain_fund(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.guild_daily_maintain_fund)
}

// required uint32 guild_member_limit = 11;
inline bool levelconfig_t_level_config::_internal_has_guild_member_limit() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool levelconfig_t_level_config::has_guild_member_limit() const {
  return _internal_has_guild_member_limit();
}
inline void levelconfig_t_level_config::clear_guild_member_limit() {
  guild_member_limit_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::_internal_guild_member_limit() const {
  return guild_member_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 levelconfig_t_level_config::guild_member_limit() const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.t_level_config.guild_member_limit)
  return _internal_guild_member_limit();
}
inline void levelconfig_t_level_config::_internal_set_guild_member_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  guild_member_limit_ = value;
}
inline void levelconfig_t_level_config::set_guild_member_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_guild_member_limit(value);
  // @@protoc_insertion_point(field_set:pb.levelconfig.t_level_config.guild_member_limit)
}

// -------------------------------------------------------------------

// levelconfig

// repeated .pb.levelconfig.t_level_config datas = 1;
inline int levelconfig::_internal_datas_size() const {
  return datas_.size();
}
inline int levelconfig::datas_size() const {
  return _internal_datas_size();
}
inline void levelconfig::clear_datas() {
  datas_.Clear();
}
inline ::pb::levelconfig_t_level_config* levelconfig::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.levelconfig.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::levelconfig_t_level_config >*
levelconfig::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.levelconfig.datas)
  return &datas_;
}
inline const ::pb::levelconfig_t_level_config& levelconfig::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::levelconfig_t_level_config& levelconfig::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.levelconfig.datas)
  return _internal_datas(index);
}
inline ::pb::levelconfig_t_level_config* levelconfig::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::levelconfig_t_level_config* levelconfig::add_datas() {
  // @@protoc_insertion_point(field_add:pb.levelconfig.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::levelconfig_t_level_config >&
levelconfig::datas() const {
  // @@protoc_insertion_point(field_list:pb.levelconfig.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_levelconfig_2eproto
