// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manufacture.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_manufacture_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_manufacture_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_manufacture_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_manufacture_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_manufacture_2eproto;
namespace pb {
class manufacture;
class manufactureDefaultTypeInternal;
extern manufactureDefaultTypeInternal _manufacture_default_instance_;
class manufacture_t_manufacture;
class manufacture_t_manufactureDefaultTypeInternal;
extern manufacture_t_manufactureDefaultTypeInternal _manufacture_t_manufacture_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::manufacture* Arena::CreateMaybeMessage<::pb::manufacture>(Arena*);
template<> ::pb::manufacture_t_manufacture* Arena::CreateMaybeMessage<::pb::manufacture_t_manufacture>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class manufacture_t_manufacture :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.manufacture.t_manufacture) */ {
 public:
  manufacture_t_manufacture();
  virtual ~manufacture_t_manufacture();

  manufacture_t_manufacture(const manufacture_t_manufacture& from);
  manufacture_t_manufacture(manufacture_t_manufacture&& from) noexcept
    : manufacture_t_manufacture() {
    *this = ::std::move(from);
  }

  inline manufacture_t_manufacture& operator=(const manufacture_t_manufacture& from) {
    CopyFrom(from);
    return *this;
  }
  inline manufacture_t_manufacture& operator=(manufacture_t_manufacture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const manufacture_t_manufacture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const manufacture_t_manufacture* internal_default_instance() {
    return reinterpret_cast<const manufacture_t_manufacture*>(
               &_manufacture_t_manufacture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(manufacture_t_manufacture& a, manufacture_t_manufacture& b) {
    a.Swap(&b);
  }
  inline void Swap(manufacture_t_manufacture* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline manufacture_t_manufacture* New() const final {
    return CreateMaybeMessage<manufacture_t_manufacture>(nullptr);
  }

  manufacture_t_manufacture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<manufacture_t_manufacture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const manufacture_t_manufacture& from);
  void MergeFrom(const manufacture_t_manufacture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(manufacture_t_manufacture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.manufacture.t_manufacture";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_manufacture_2eproto);
    return ::descriptor_table_manufacture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kMaterialFieldNumber = 5,
    kCurrencyFieldNumber = 8,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kIngredientFieldNumber = 4,
    kGeneratedFieldNumber = 6,
    kDefItemFieldNumber = 7,
    kVatalityFieldNumber = 9,
  };
  // required string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string material = 5;
  bool has_material() const;
  private:
  bool _internal_has_material() const;
  public:
  void clear_material();
  const std::string& material() const;
  void set_material(const std::string& value);
  void set_material(std::string&& value);
  void set_material(const char* value);
  void set_material(const char* value, size_t size);
  std::string* mutable_material();
  std::string* release_material();
  void set_allocated_material(std::string* material);
  private:
  const std::string& _internal_material() const;
  void _internal_set_material(const std::string& value);
  std::string* _internal_mutable_material();
  public:

  // required string currency = 8;
  bool has_currency() const;
  private:
  bool _internal_has_currency() const;
  public:
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 ingredient = 4;
  bool has_ingredient() const;
  private:
  bool _internal_has_ingredient() const;
  public:
  void clear_ingredient();
  ::PROTOBUF_NAMESPACE_ID::uint32 ingredient() const;
  void set_ingredient(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ingredient() const;
  void _internal_set_ingredient(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 generated = 6;
  bool has_generated() const;
  private:
  bool _internal_has_generated() const;
  public:
  void clear_generated();
  ::PROTOBUF_NAMESPACE_ID::uint32 generated() const;
  void set_generated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_generated() const;
  void _internal_set_generated(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 def_item = 7;
  bool has_def_item() const;
  private:
  bool _internal_has_def_item() const;
  public:
  void clear_def_item();
  ::PROTOBUF_NAMESPACE_ID::uint32 def_item() const;
  void set_def_item(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_def_item() const;
  void _internal_set_def_item(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 vatality = 9;
  bool has_vatality() const;
  private:
  bool _internal_has_vatality() const;
  public:
  void clear_vatality();
  ::PROTOBUF_NAMESPACE_ID::uint32 vatality() const;
  void set_vatality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vatality() const;
  void _internal_set_vatality(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.manufacture.t_manufacture)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr material_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ingredient_;
  ::PROTOBUF_NAMESPACE_ID::uint32 generated_;
  ::PROTOBUF_NAMESPACE_ID::uint32 def_item_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vatality_;
  friend struct ::TableStruct_manufacture_2eproto;
};
// -------------------------------------------------------------------

class manufacture :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.manufacture) */ {
 public:
  manufacture();
  virtual ~manufacture();

  manufacture(const manufacture& from);
  manufacture(manufacture&& from) noexcept
    : manufacture() {
    *this = ::std::move(from);
  }

  inline manufacture& operator=(const manufacture& from) {
    CopyFrom(from);
    return *this;
  }
  inline manufacture& operator=(manufacture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const manufacture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const manufacture* internal_default_instance() {
    return reinterpret_cast<const manufacture*>(
               &_manufacture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(manufacture& a, manufacture& b) {
    a.Swap(&b);
  }
  inline void Swap(manufacture* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline manufacture* New() const final {
    return CreateMaybeMessage<manufacture>(nullptr);
  }

  manufacture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<manufacture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const manufacture& from);
  void MergeFrom(const manufacture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(manufacture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.manufacture";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_manufacture_2eproto);
    return ::descriptor_table_manufacture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef manufacture_t_manufacture t_manufacture;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.manufacture.t_manufacture datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::manufacture_t_manufacture* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::manufacture_t_manufacture >*
      mutable_datas();
  private:
  const ::pb::manufacture_t_manufacture& _internal_datas(int index) const;
  ::pb::manufacture_t_manufacture* _internal_add_datas();
  public:
  const ::pb::manufacture_t_manufacture& datas(int index) const;
  ::pb::manufacture_t_manufacture* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::manufacture_t_manufacture >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.manufacture)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::manufacture_t_manufacture > datas_;
  friend struct ::TableStruct_manufacture_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// manufacture_t_manufacture

// required uint32 tbxid = 1 [default = 0];
inline bool manufacture_t_manufacture::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool manufacture_t_manufacture::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void manufacture_t_manufacture::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.manufacture.t_manufacture.tbxid)
  return _internal_tbxid();
}
inline void manufacture_t_manufacture::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tbxid_ = value;
}
inline void manufacture_t_manufacture::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.manufacture.t_manufacture.tbxid)
}

// required uint32 id = 2 [default = 0];
inline bool manufacture_t_manufacture::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool manufacture_t_manufacture::has_id() const {
  return _internal_has_id();
}
inline void manufacture_t_manufacture::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::id() const {
  // @@protoc_insertion_point(field_get:pb.manufacture.t_manufacture.id)
  return _internal_id();
}
inline void manufacture_t_manufacture::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void manufacture_t_manufacture::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.manufacture.t_manufacture.id)
}

// required string name = 3;
inline bool manufacture_t_manufacture::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool manufacture_t_manufacture::has_name() const {
  return _internal_has_name();
}
inline void manufacture_t_manufacture::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& manufacture_t_manufacture::name() const {
  // @@protoc_insertion_point(field_get:pb.manufacture.t_manufacture.name)
  return _internal_name();
}
inline void manufacture_t_manufacture::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:pb.manufacture.t_manufacture.name)
}
inline std::string* manufacture_t_manufacture::mutable_name() {
  // @@protoc_insertion_point(field_mutable:pb.manufacture.t_manufacture.name)
  return _internal_mutable_name();
}
inline const std::string& manufacture_t_manufacture::_internal_name() const {
  return name_.GetNoArena();
}
inline void manufacture_t_manufacture::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void manufacture_t_manufacture::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.manufacture.t_manufacture.name)
}
inline void manufacture_t_manufacture::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.manufacture.t_manufacture.name)
}
inline void manufacture_t_manufacture::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.manufacture.t_manufacture.name)
}
inline std::string* manufacture_t_manufacture::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* manufacture_t_manufacture::release_name() {
  // @@protoc_insertion_point(field_release:pb.manufacture.t_manufacture.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void manufacture_t_manufacture::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:pb.manufacture.t_manufacture.name)
}

// required uint32 ingredient = 4;
inline bool manufacture_t_manufacture::_internal_has_ingredient() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool manufacture_t_manufacture::has_ingredient() const {
  return _internal_has_ingredient();
}
inline void manufacture_t_manufacture::clear_ingredient() {
  ingredient_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::_internal_ingredient() const {
  return ingredient_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::ingredient() const {
  // @@protoc_insertion_point(field_get:pb.manufacture.t_manufacture.ingredient)
  return _internal_ingredient();
}
inline void manufacture_t_manufacture::_internal_set_ingredient(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  ingredient_ = value;
}
inline void manufacture_t_manufacture::set_ingredient(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ingredient(value);
  // @@protoc_insertion_point(field_set:pb.manufacture.t_manufacture.ingredient)
}

// required string material = 5;
inline bool manufacture_t_manufacture::_internal_has_material() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool manufacture_t_manufacture::has_material() const {
  return _internal_has_material();
}
inline void manufacture_t_manufacture::clear_material() {
  material_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& manufacture_t_manufacture::material() const {
  // @@protoc_insertion_point(field_get:pb.manufacture.t_manufacture.material)
  return _internal_material();
}
inline void manufacture_t_manufacture::set_material(const std::string& value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:pb.manufacture.t_manufacture.material)
}
inline std::string* manufacture_t_manufacture::mutable_material() {
  // @@protoc_insertion_point(field_mutable:pb.manufacture.t_manufacture.material)
  return _internal_mutable_material();
}
inline const std::string& manufacture_t_manufacture::_internal_material() const {
  return material_.GetNoArena();
}
inline void manufacture_t_manufacture::_internal_set_material(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void manufacture_t_manufacture::set_material(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  material_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.manufacture.t_manufacture.material)
}
inline void manufacture_t_manufacture::set_material(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.manufacture.t_manufacture.material)
}
inline void manufacture_t_manufacture::set_material(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  material_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.manufacture.t_manufacture.material)
}
inline std::string* manufacture_t_manufacture::_internal_mutable_material() {
  _has_bits_[0] |= 0x00000002u;
  return material_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* manufacture_t_manufacture::release_material() {
  // @@protoc_insertion_point(field_release:pb.manufacture.t_manufacture.material)
  if (!_internal_has_material()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return material_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void manufacture_t_manufacture::set_allocated_material(std::string* material) {
  if (material != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  material_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), material);
  // @@protoc_insertion_point(field_set_allocated:pb.manufacture.t_manufacture.material)
}

// required uint32 generated = 6;
inline bool manufacture_t_manufacture::_internal_has_generated() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool manufacture_t_manufacture::has_generated() const {
  return _internal_has_generated();
}
inline void manufacture_t_manufacture::clear_generated() {
  generated_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::_internal_generated() const {
  return generated_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::generated() const {
  // @@protoc_insertion_point(field_get:pb.manufacture.t_manufacture.generated)
  return _internal_generated();
}
inline void manufacture_t_manufacture::_internal_set_generated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  generated_ = value;
}
inline void manufacture_t_manufacture::set_generated(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_generated(value);
  // @@protoc_insertion_point(field_set:pb.manufacture.t_manufacture.generated)
}

// required uint32 def_item = 7;
inline bool manufacture_t_manufacture::_internal_has_def_item() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool manufacture_t_manufacture::has_def_item() const {
  return _internal_has_def_item();
}
inline void manufacture_t_manufacture::clear_def_item() {
  def_item_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::_internal_def_item() const {
  return def_item_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::def_item() const {
  // @@protoc_insertion_point(field_get:pb.manufacture.t_manufacture.def_item)
  return _internal_def_item();
}
inline void manufacture_t_manufacture::_internal_set_def_item(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  def_item_ = value;
}
inline void manufacture_t_manufacture::set_def_item(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_def_item(value);
  // @@protoc_insertion_point(field_set:pb.manufacture.t_manufacture.def_item)
}

// required string currency = 8;
inline bool manufacture_t_manufacture::_internal_has_currency() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool manufacture_t_manufacture::has_currency() const {
  return _internal_has_currency();
}
inline void manufacture_t_manufacture::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& manufacture_t_manufacture::currency() const {
  // @@protoc_insertion_point(field_get:pb.manufacture.t_manufacture.currency)
  return _internal_currency();
}
inline void manufacture_t_manufacture::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:pb.manufacture.t_manufacture.currency)
}
inline std::string* manufacture_t_manufacture::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:pb.manufacture.t_manufacture.currency)
  return _internal_mutable_currency();
}
inline const std::string& manufacture_t_manufacture::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void manufacture_t_manufacture::_internal_set_currency(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void manufacture_t_manufacture::set_currency(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.manufacture.t_manufacture.currency)
}
inline void manufacture_t_manufacture::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.manufacture.t_manufacture.currency)
}
inline void manufacture_t_manufacture::set_currency(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.manufacture.t_manufacture.currency)
}
inline std::string* manufacture_t_manufacture::_internal_mutable_currency() {
  _has_bits_[0] |= 0x00000004u;
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* manufacture_t_manufacture::release_currency() {
  // @@protoc_insertion_point(field_release:pb.manufacture.t_manufacture.currency)
  if (!_internal_has_currency()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return currency_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void manufacture_t_manufacture::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:pb.manufacture.t_manufacture.currency)
}

// required uint32 vatality = 9;
inline bool manufacture_t_manufacture::_internal_has_vatality() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool manufacture_t_manufacture::has_vatality() const {
  return _internal_has_vatality();
}
inline void manufacture_t_manufacture::clear_vatality() {
  vatality_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::_internal_vatality() const {
  return vatality_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 manufacture_t_manufacture::vatality() const {
  // @@protoc_insertion_point(field_get:pb.manufacture.t_manufacture.vatality)
  return _internal_vatality();
}
inline void manufacture_t_manufacture::_internal_set_vatality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  vatality_ = value;
}
inline void manufacture_t_manufacture::set_vatality(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vatality(value);
  // @@protoc_insertion_point(field_set:pb.manufacture.t_manufacture.vatality)
}

// -------------------------------------------------------------------

// manufacture

// repeated .pb.manufacture.t_manufacture datas = 1;
inline int manufacture::_internal_datas_size() const {
  return datas_.size();
}
inline int manufacture::datas_size() const {
  return _internal_datas_size();
}
inline void manufacture::clear_datas() {
  datas_.Clear();
}
inline ::pb::manufacture_t_manufacture* manufacture::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.manufacture.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::manufacture_t_manufacture >*
manufacture::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.manufacture.datas)
  return &datas_;
}
inline const ::pb::manufacture_t_manufacture& manufacture::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::manufacture_t_manufacture& manufacture::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.manufacture.datas)
  return _internal_datas(index);
}
inline ::pb::manufacture_t_manufacture* manufacture::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::manufacture_t_manufacture* manufacture::add_datas() {
  // @@protoc_insertion_point(field_add:pb.manufacture.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::manufacture_t_manufacture >&
manufacture::datas() const {
  // @@protoc_insertion_point(field_list:pb.manufacture.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_manufacture_2eproto
