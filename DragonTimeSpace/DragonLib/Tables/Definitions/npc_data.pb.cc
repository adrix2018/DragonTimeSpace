// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npc_data.proto

#include "npc_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_npc_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_npc_data_t_npc_config_npc_5fdata_2eproto;
namespace pb {
class npc_data_t_npc_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<npc_data_t_npc_config> _instance;
} _npc_data_t_npc_config_default_instance_;
class npc_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<npc_data> _instance;
} _npc_data_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_npc_data_npc_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_npc_data_default_instance_;
    new (ptr) ::pb::npc_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::npc_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_npc_data_npc_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_npc_data_npc_5fdata_2eproto}, {
      &scc_info_npc_data_t_npc_config_npc_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_npc_data_t_npc_config_npc_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_npc_data_t_npc_config_default_instance_;
    new (ptr) ::pb::npc_data_t_npc_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::npc_data_t_npc_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_npc_data_t_npc_config_npc_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_npc_data_t_npc_config_npc_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_npc_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_npc_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_npc_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_npc_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, id_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, name_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, kind_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, level_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, distance_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, animatorcontroller_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, model_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, uimodelsize_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, uimodelrotation_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, visiticon_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, visitbtn_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, countryid_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, mapinfo_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, show_map_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, not_show_name_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, borntime_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, bornaction_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, borneffect_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, not_beselect_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, taskid_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, show_shadow_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, bodysize_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, hplayer_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, volume_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, appparentvolume_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, heropainting_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, herostate_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, pdamage_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, mdamage_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, pdefence_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, mdefence_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, maxhp_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, maxmp_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, bang_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, bangextradam_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, toughness_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, toughness_reducedam_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, block_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, block_reduce_dam_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, penetrate_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, penetrate_extra_dam_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, accurate_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, accurate_extra_dam_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, hold_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, hold_reduce_dam_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, deflect_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, deflect_reduce_dam_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, realdam_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, real_reduce_dam_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, hit_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, miss_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, firemastery_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, icemastery_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, lightningmastery_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, brightmastery_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, darkmastery_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, fireresist_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, iceresist_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, lightningresist_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, brightresist_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, darkresist_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, firepen_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, icepen_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, lightningpen_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, brightpen_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, darkpen_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, blowint_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, knockint_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, floatint_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, superhitint_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, blowresist_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, knockresist_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, floatresist_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, superhitresist_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, blowdectime_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, knockdectime_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, floatdectime_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, superhitdectime_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, stiffaddtime_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, stiffdectime_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, icon_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, bigicon_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, uiicon_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, modelsize_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, show_conditions_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, hide_conditions_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, effect_appearance_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, bipbind_excursion_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, modelposfor3dicon_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, hatred_distance_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, guardregion_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, visitfollow_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, lookat_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, modelcon4cha_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, modelcon4hero_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, modelcon4guide_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, capsulecollider_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data_t_npc_config, function_),
  24,
  25,
  0,
  26,
  27,
  28,
  1,
  2,
  3,
  29,
  4,
  5,
  30,
  31,
  32,
  33,
  34,
  35,
  6,
  36,
  7,
  37,
  38,
  39,
  40,
  41,
  8,
  9,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  95,
  96,
  97,
  98,
  19,
  20,
  21,
  22,
  23,
  PROTOBUF_FIELD_OFFSET(::pb::npc_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::npc_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::npc_data, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 104, sizeof(::pb::npc_data_t_npc_config)},
  { 203, 209, sizeof(::pb::npc_data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_npc_data_t_npc_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_npc_data_default_instance_),
};

const char descriptor_table_protodef_npc_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016npc_data.proto\022\002pb\"\222\020\n\010npc_data\022(\n\005dat"
  "as\030\001 \003(\0132\031.pb.npc_data.t_npc_config\032\333\017\n\014"
  "t_npc_config\022\020\n\005tbxid\030\001 \002(\r:\0010\022\r\n\002id\030\002 \002"
  "(\r:\0010\022\014\n\004name\030\003 \002(\t\022\014\n\004kind\030\004 \002(\r\022\r\n\005lev"
  "el\030\005 \002(\r\022\020\n\010distance\030\006 \002(\r\022\032\n\022animatorco"
  "ntroller\030\007 \002(\t\022\r\n\005model\030\010 \002(\t\022\023\n\013uimodel"
  "size\030\t \002(\t\022\027\n\017uimodelrotation\030\n \002(\r\022\021\n\tv"
  "isiticon\030\013 \002(\t\022\020\n\010visitbtn\030\014 \002(\t\022\021\n\tcoun"
  "tryid\030\r \002(\r\022\017\n\007mapinfo\030\016 \002(\r\022\020\n\010show_map"
  "\030\017 \002(\r\022\025\n\rnot_show_name\030\020 \002(\r\022\020\n\010borntim"
  "e\030\021 \002(\r\022\022\n\nbornaction\030\022 \002(\r\022\022\n\nborneffec"
  "t\030\023 \002(\t\022\024\n\014not_beselect\030\024 \002(\010\022\016\n\006taskid\030"
  "\025 \002(\t\022\023\n\013show_shadow\030\026 \002(\r\022\020\n\010bodysize\030\027"
  " \002(\r\022\017\n\007hplayer\030\030 \002(\r\022\016\n\006volume\030\031 \002(\r\022\027\n"
  "\017appparentvolume\030\032 \002(\r\022\024\n\014heropainting\030\033"
  " \002(\t\022\021\n\therostate\030\034 \002(\t\022\017\n\007pdamage\030\035 \002(\r"
  "\022\017\n\007mdamage\030\036 \002(\r\022\020\n\010pdefence\030\037 \002(\r\022\020\n\010m"
  "defence\030  \002(\r\022\r\n\005maxhp\030! \002(\r\022\r\n\005maxmp\030\" "
  "\002(\r\022\014\n\004bang\030# \002(\r\022\024\n\014bangextradam\030$ \002(\r\022"
  "\021\n\ttoughness\030% \002(\r\022\033\n\023toughness_reduceda"
  "m\030& \002(\r\022\r\n\005block\030\' \002(\r\022\030\n\020block_reduce_d"
  "am\030( \002(\r\022\021\n\tpenetrate\030) \002(\r\022\033\n\023penetrate"
  "_extra_dam\030* \002(\r\022\020\n\010accurate\030+ \002(\r\022\032\n\022ac"
  "curate_extra_dam\030, \002(\r\022\014\n\004hold\030- \002(\r\022\027\n\017"
  "hold_reduce_dam\030. \002(\r\022\017\n\007deflect\030/ \002(\r\022\032"
  "\n\022deflect_reduce_dam\0300 \002(\r\022\017\n\007realdam\0301 "
  "\002(\r\022\027\n\017real_reduce_dam\0302 \002(\r\022\013\n\003hit\0303 \002("
  "\r\022\014\n\004miss\0304 \002(\r\022\023\n\013firemastery\0305 \002(\r\022\022\n\n"
  "icemastery\0306 \002(\r\022\030\n\020lightningmastery\0307 \002"
  "(\r\022\025\n\rbrightmastery\0308 \002(\r\022\023\n\013darkmastery"
  "\0309 \002(\r\022\022\n\nfireresist\030: \002(\r\022\021\n\ticeresist\030"
  "; \002(\r\022\027\n\017lightningresist\030< \002(\r\022\024\n\014bright"
  "resist\030= \002(\r\022\022\n\ndarkresist\030> \002(\r\022\017\n\007fire"
  "pen\030\? \002(\r\022\016\n\006icepen\030@ \002(\r\022\024\n\014lightningpe"
  "n\030A \002(\r\022\021\n\tbrightpen\030B \002(\r\022\017\n\007darkpen\030C "
  "\002(\r\022\017\n\007blowint\030D \002(\r\022\020\n\010knockint\030E \002(\r\022\020"
  "\n\010floatint\030F \002(\r\022\023\n\013superhitint\030G \002(\r\022\022\n"
  "\nblowresist\030H \002(\r\022\023\n\013knockresist\030I \002(\r\022\023"
  "\n\013floatresist\030J \002(\r\022\026\n\016superhitresist\030K "
  "\002(\r\022\023\n\013blowdectime\030L \002(\r\022\024\n\014knockdectime"
  "\030M \002(\r\022\024\n\014floatdectime\030N \002(\r\022\027\n\017superhit"
  "dectime\030O \002(\r\022\024\n\014stiffaddtime\030P \002(\r\022\024\n\014s"
  "tiffdectime\030Q \002(\r\022\014\n\004icon\030R \002(\t\022\017\n\007bigic"
  "on\030S \002(\t\022\016\n\006UIicon\030T \002(\t\022\021\n\tmodelsize\030U "
  "\002(\t\022\027\n\017show_conditions\030V \002(\t\022\027\n\017hide_con"
  "ditions\030W \002(\t\022\031\n\021effect_appearance\030X \002(\t"
  "\022\031\n\021bipbind_excursion\030Y \002(\t\022\031\n\021modelposf"
  "or3dicon\030Z \002(\t\022\027\n\017hatred_distance\030[ \002(\r\022"
  "\023\n\013guardRegion\030\\ \002(\r\022\023\n\013visitfollow\030] \002("
  "\r\022\016\n\006lookat\030^ \002(\r\022\024\n\014modelCon4Cha\030_ \002(\t\022"
  "\025\n\rmodelCon4Hero\030` \002(\t\022\026\n\016modelCon4Guide"
  "\030a \002(\t\022\027\n\017CapsuleCollider\030b \002(\t\022\020\n\010funct"
  "ion\030c \002(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_npc_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_npc_5fdata_2eproto_sccs[2] = {
  &scc_info_npc_data_npc_5fdata_2eproto.base,
  &scc_info_npc_data_t_npc_config_npc_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_npc_5fdata_2eproto_once;
static bool descriptor_table_npc_5fdata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_npc_5fdata_2eproto = {
  &descriptor_table_npc_5fdata_2eproto_initialized, descriptor_table_protodef_npc_5fdata_2eproto, "npc_data.proto", 2089,
  &descriptor_table_npc_5fdata_2eproto_once, descriptor_table_npc_5fdata_2eproto_sccs, descriptor_table_npc_5fdata_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_npc_5fdata_2eproto::offsets,
  file_level_metadata_npc_5fdata_2eproto, 2, file_level_enum_descriptors_npc_5fdata_2eproto, file_level_service_descriptors_npc_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_npc_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_npc_5fdata_2eproto)), true);
namespace pb {

// ===================================================================

void npc_data_t_npc_config::InitAsDefaultInstance() {
}
class npc_data_t_npc_config::_Internal {
 public:
  using HasBits = decltype(std::declval<npc_data_t_npc_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_animatorcontroller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uimodelsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uimodelrotation(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_visiticon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_visitbtn(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_countryid(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_mapinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_show_map(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_not_show_name(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_borntime(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_bornaction(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_borneffect(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_not_beselect(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_taskid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_show_shadow(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_bodysize(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_hplayer(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_appparentvolume(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_heropainting(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_herostate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pdamage(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_mdamage(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_pdefence(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_mdefence(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_maxmp(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_bang(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_bangextradam(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_toughness(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_toughness_reducedam(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_block_reduce_dam(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_penetrate(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_penetrate_extra_dam(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_accurate(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_accurate_extra_dam(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_hold(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_hold_reduce_dam(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_deflect(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_deflect_reduce_dam(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_realdam(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_real_reduce_dam(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_hit(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_miss(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_firemastery(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_icemastery(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_lightningmastery(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_brightmastery(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_darkmastery(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_fireresist(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_iceresist(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_lightningresist(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_brightresist(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_darkresist(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_firepen(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_icepen(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_lightningpen(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_brightpen(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_darkpen(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_blowint(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_knockint(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_floatint(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_superhitint(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_blowresist(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_knockresist(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_floatresist(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_superhitresist(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_blowdectime(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_knockdectime(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_floatdectime(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_superhitdectime(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_stiffaddtime(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_stiffdectime(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bigicon(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_uiicon(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_modelsize(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_show_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_hide_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_effect_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_bipbind_excursion(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_modelposfor3dicon(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_hatred_distance(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_guardregion(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_visitfollow(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_lookat(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_modelcon4cha(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_modelcon4hero(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_modelcon4guide(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_capsulecollider(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_function(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

npc_data_t_npc_config::npc_data_t_npc_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.npc_data.t_npc_config)
}
npc_data_t_npc_config::npc_data_t_npc_config(const npc_data_t_npc_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  animatorcontroller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_animatorcontroller()) {
    animatorcontroller_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.animatorcontroller_);
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_model()) {
    model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  uimodelsize_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uimodelsize()) {
    uimodelsize_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uimodelsize_);
  }
  visiticon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_visiticon()) {
    visiticon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.visiticon_);
  }
  visitbtn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_visitbtn()) {
    visitbtn_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.visitbtn_);
  }
  borneffect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_borneffect()) {
    borneffect_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.borneffect_);
  }
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_taskid()) {
    taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  heropainting_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_heropainting()) {
    heropainting_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.heropainting_);
  }
  herostate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herostate()) {
    herostate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herostate_);
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon()) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  bigicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bigicon()) {
    bigicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bigicon_);
  }
  uiicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uiicon()) {
    uiicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uiicon_);
  }
  modelsize_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modelsize()) {
    modelsize_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelsize_);
  }
  show_conditions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_show_conditions()) {
    show_conditions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.show_conditions_);
  }
  hide_conditions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hide_conditions()) {
    hide_conditions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hide_conditions_);
  }
  effect_appearance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_effect_appearance()) {
    effect_appearance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effect_appearance_);
  }
  bipbind_excursion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bipbind_excursion()) {
    bipbind_excursion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bipbind_excursion_);
  }
  modelposfor3dicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modelposfor3dicon()) {
    modelposfor3dicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelposfor3dicon_);
  }
  modelcon4cha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modelcon4cha()) {
    modelcon4cha_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelcon4cha_);
  }
  modelcon4hero_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modelcon4hero()) {
    modelcon4hero_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelcon4hero_);
  }
  modelcon4guide_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modelcon4guide()) {
    modelcon4guide_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelcon4guide_);
  }
  capsulecollider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_capsulecollider()) {
    capsulecollider_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.capsulecollider_);
  }
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_function()) {
    function_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.function_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lookat_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(lookat_));
  // @@protoc_insertion_point(copy_constructor:pb.npc_data.t_npc_config)
}

void npc_data_t_npc_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_npc_data_t_npc_config_npc_5fdata_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  animatorcontroller_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uimodelsize_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visiticon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visitbtn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  borneffect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heropainting_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  herostate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bigicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uiicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelsize_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  show_conditions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hide_conditions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effect_appearance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bipbind_excursion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelposfor3dicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelcon4cha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelcon4hero_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelcon4guide_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  capsulecollider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lookat_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(lookat_));
}

npc_data_t_npc_config::~npc_data_t_npc_config() {
  // @@protoc_insertion_point(destructor:pb.npc_data.t_npc_config)
  SharedDtor();
}

void npc_data_t_npc_config::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  animatorcontroller_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uimodelsize_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visiticon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visitbtn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  borneffect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  taskid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heropainting_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  herostate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bigicon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uiicon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelsize_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  show_conditions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hide_conditions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effect_appearance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bipbind_excursion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelposfor3dicon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelcon4cha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelcon4hero_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modelcon4guide_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  capsulecollider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void npc_data_t_npc_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const npc_data_t_npc_config& npc_data_t_npc_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_npc_data_t_npc_config_npc_5fdata_2eproto.base);
  return *internal_default_instance();
}


void npc_data_t_npc_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.npc_data.t_npc_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      animatorcontroller_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      model_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      uimodelsize_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      visiticon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      visitbtn_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      borneffect_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      taskid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      heropainting_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      herostate_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      icon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      bigicon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      uiicon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      modelsize_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      show_conditions_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00008000u) {
      hide_conditions_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      effect_appearance_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00020000u) {
      bipbind_excursion_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00040000u) {
      modelposfor3dicon_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00080000u) {
      modelcon4cha_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00100000u) {
      modelcon4hero_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00200000u) {
      modelcon4guide_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00400000u) {
      capsulecollider_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00800000u) {
      function_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mapinfo_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(mapinfo_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&show_map_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hplayer_) -
        reinterpret_cast<char*>(&show_map_)) + sizeof(hplayer_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&volume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxmp_) -
        reinterpret_cast<char*>(&volume_)) + sizeof(maxmp_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&bang_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penetrate_extra_dam_) -
        reinterpret_cast<char*>(&bang_)) + sizeof(penetrate_extra_dam_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&accurate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&real_reduce_dam_) -
        reinterpret_cast<char*>(&accurate_)) + sizeof(real_reduce_dam_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fireresist_) -
        reinterpret_cast<char*>(&hit_)) + sizeof(fireresist_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&iceresist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brightpen_) -
        reinterpret_cast<char*>(&iceresist_)) + sizeof(brightpen_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&darkpen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&floatresist_) -
        reinterpret_cast<char*>(&darkpen_)) + sizeof(floatresist_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&superhitresist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hatred_distance_) -
        reinterpret_cast<char*>(&superhitresist_)) + sizeof(hatred_distance_));
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&guardregion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lookat_) -
        reinterpret_cast<char*>(&guardregion_)) + sizeof(lookat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* npc_data_t_npc_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&_has_bits_);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&_has_bits_);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_kind(&_has_bits_);
          kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_level(&_has_bits_);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 distance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_distance(&_has_bits_);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string animatorcontroller = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_animatorcontroller();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.animatorcontroller");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string model = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.model");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string uimodelsize = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_uimodelsize();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.uimodelsize");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 uimodelrotation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_uimodelrotation(&_has_bits_);
          uimodelrotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string visiticon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_visiticon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.visiticon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string visitbtn = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_visitbtn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.visitbtn");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 countryid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_countryid(&_has_bits_);
          countryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mapinfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_mapinfo(&_has_bits_);
          mapinfo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 show_map = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_show_map(&_has_bits_);
          show_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 not_show_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_not_show_name(&_has_bits_);
          not_show_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 borntime = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_borntime(&_has_bits_);
          borntime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bornaction = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_bornaction(&_has_bits_);
          bornaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string borneffect = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_borneffect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.borneffect");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool not_beselect = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_not_beselect(&_has_bits_);
          not_beselect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string taskid = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_taskid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.taskid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 show_shadow = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_show_shadow(&_has_bits_);
          show_shadow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bodysize = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_bodysize(&_has_bits_);
          bodysize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hplayer = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_hplayer(&_has_bits_);
          hplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 volume = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_volume(&_has_bits_);
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 appparentvolume = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_appparentvolume(&_has_bits_);
          appparentvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string heropainting = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_heropainting();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.heropainting");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string herostate = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_herostate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.herostate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pdamage = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_pdamage(&_has_bits_);
          pdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mdamage = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_mdamage(&_has_bits_);
          mdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pdefence = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_pdefence(&_has_bits_);
          pdefence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mdefence = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_mdefence(&_has_bits_);
          mdefence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxhp = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_maxhp(&_has_bits_);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 maxmp = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_maxmp(&_has_bits_);
          maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bang = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bang(&_has_bits_);
          bang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bangextradam = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bangextradam(&_has_bits_);
          bangextradam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 toughness = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_toughness(&_has_bits_);
          toughness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 toughness_reducedam = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_toughness_reducedam(&_has_bits_);
          toughness_reducedam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 block = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_block(&_has_bits_);
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 block_reduce_dam = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_block_reduce_dam(&_has_bits_);
          block_reduce_dam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 penetrate = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_penetrate(&_has_bits_);
          penetrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 penetrate_extra_dam = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_penetrate_extra_dam(&_has_bits_);
          penetrate_extra_dam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 accurate = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_accurate(&_has_bits_);
          accurate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 accurate_extra_dam = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_accurate_extra_dam(&_has_bits_);
          accurate_extra_dam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hold = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_hold(&_has_bits_);
          hold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hold_reduce_dam = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_hold_reduce_dam(&_has_bits_);
          hold_reduce_dam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deflect = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_deflect(&_has_bits_);
          deflect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deflect_reduce_dam = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_deflect_reduce_dam(&_has_bits_);
          deflect_reduce_dam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 realdam = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_realdam(&_has_bits_);
          realdam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 real_reduce_dam = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_real_reduce_dam(&_has_bits_);
          real_reduce_dam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hit = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_hit(&_has_bits_);
          hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 miss = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_miss(&_has_bits_);
          miss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 firemastery = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_firemastery(&_has_bits_);
          firemastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 icemastery = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_icemastery(&_has_bits_);
          icemastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 lightningmastery = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_lightningmastery(&_has_bits_);
          lightningmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 brightmastery = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_brightmastery(&_has_bits_);
          brightmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 darkmastery = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_darkmastery(&_has_bits_);
          darkmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 fireresist = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_fireresist(&_has_bits_);
          fireresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 iceresist = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_iceresist(&_has_bits_);
          iceresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 lightningresist = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_lightningresist(&_has_bits_);
          lightningresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 brightresist = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_brightresist(&_has_bits_);
          brightresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 darkresist = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_darkresist(&_has_bits_);
          darkresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 firepen = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_firepen(&_has_bits_);
          firepen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 icepen = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_icepen(&_has_bits_);
          icepen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 lightningpen = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lightningpen(&_has_bits_);
          lightningpen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 brightpen = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_brightpen(&_has_bits_);
          brightpen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 darkpen = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_darkpen(&_has_bits_);
          darkpen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 blowint = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_blowint(&_has_bits_);
          blowint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 knockint = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_knockint(&_has_bits_);
          knockint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 floatint = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_floatint(&_has_bits_);
          floatint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 superhitint = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_superhitint(&_has_bits_);
          superhitint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 blowresist = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_blowresist(&_has_bits_);
          blowresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 knockresist = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_knockresist(&_has_bits_);
          knockresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 floatresist = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_floatresist(&_has_bits_);
          floatresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 superhitresist = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_superhitresist(&_has_bits_);
          superhitresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 blowdectime = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_blowdectime(&_has_bits_);
          blowdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 knockdectime = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_knockdectime(&_has_bits_);
          knockdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 floatdectime = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_floatdectime(&_has_bits_);
          floatdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 superhitdectime = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_superhitdectime(&_has_bits_);
          superhitdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stiffaddtime = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_stiffaddtime(&_has_bits_);
          stiffaddtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 stiffdectime = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_stiffdectime(&_has_bits_);
          stiffdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string icon = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string bigicon = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_bigicon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.bigicon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string UIicon = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_uiicon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.UIicon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string modelsize = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_modelsize();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.modelsize");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string show_conditions = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_show_conditions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.show_conditions");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string hide_conditions = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_hide_conditions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.hide_conditions");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string effect_appearance = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_effect_appearance();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.effect_appearance");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string bipbind_excursion = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_bipbind_excursion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.bipbind_excursion");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string modelposfor3dicon = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_modelposfor3dicon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.modelposfor3dicon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 hatred_distance = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_hatred_distance(&_has_bits_);
          hatred_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 guardRegion = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_guardregion(&_has_bits_);
          guardregion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 visitfollow = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_visitfollow(&_has_bits_);
          visitfollow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 lookat = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_lookat(&_has_bits_);
          lookat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string modelCon4Cha = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_modelcon4cha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.modelCon4Cha");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string modelCon4Hero = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_modelcon4hero();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.modelCon4Hero");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string modelCon4Guide = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_modelcon4guide();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.modelCon4Guide");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string CapsuleCollider = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_capsulecollider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.CapsuleCollider");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string function = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_function();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.npc_data.t_npc_config.function");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* npc_data_t_npc_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.npc_data.t_npc_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // required uint32 kind = 4;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kind(), target);
  }

  // required uint32 level = 5;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_level(), target);
  }

  // required uint32 distance = 6;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_distance(), target);
  }

  // required string animatorcontroller = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_animatorcontroller().data(), static_cast<int>(this->_internal_animatorcontroller().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.animatorcontroller");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_animatorcontroller(), target);
  }

  // required string model = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.model");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_model(), target);
  }

  // required string uimodelsize = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uimodelsize().data(), static_cast<int>(this->_internal_uimodelsize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.uimodelsize");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_uimodelsize(), target);
  }

  // required uint32 uimodelrotation = 10;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_uimodelrotation(), target);
  }

  // required string visiticon = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_visiticon().data(), static_cast<int>(this->_internal_visiticon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.visiticon");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_visiticon(), target);
  }

  // required string visitbtn = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_visitbtn().data(), static_cast<int>(this->_internal_visitbtn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.visitbtn");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_visitbtn(), target);
  }

  // required uint32 countryid = 13;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_countryid(), target);
  }

  // required uint32 mapinfo = 14;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_mapinfo(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 show_map = 15;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_show_map(), target);
  }

  // required uint32 not_show_name = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_not_show_name(), target);
  }

  // required uint32 borntime = 17;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_borntime(), target);
  }

  // required uint32 bornaction = 18;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_bornaction(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string borneffect = 19;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_borneffect().data(), static_cast<int>(this->_internal_borneffect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.borneffect");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_borneffect(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required bool not_beselect = 20;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_not_beselect(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string taskid = 21;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_taskid().data(), static_cast<int>(this->_internal_taskid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.taskid");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_taskid(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 show_shadow = 22;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_show_shadow(), target);
  }

  // required uint32 bodysize = 23;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_bodysize(), target);
  }

  // required uint32 hplayer = 24;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_hplayer(), target);
  }

  // required uint32 volume = 25;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_volume(), target);
  }

  // required uint32 appparentvolume = 26;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_appparentvolume(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string heropainting = 27;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_heropainting().data(), static_cast<int>(this->_internal_heropainting().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.heropainting");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_heropainting(), target);
  }

  // required string herostate = 28;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herostate().data(), static_cast<int>(this->_internal_herostate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.herostate");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_herostate(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 pdamage = 29;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_pdamage(), target);
  }

  // required uint32 mdamage = 30;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_mdamage(), target);
  }

  // required uint32 pdefence = 31;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_pdefence(), target);
  }

  // required uint32 mdefence = 32;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_mdefence(), target);
  }

  // required uint32 maxhp = 33;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_maxhp(), target);
  }

  // required uint32 maxmp = 34;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_maxmp(), target);
  }

  // required uint32 bang = 35;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_bang(), target);
  }

  // required uint32 bangextradam = 36;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_bangextradam(), target);
  }

  // required uint32 toughness = 37;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_toughness(), target);
  }

  // required uint32 toughness_reducedam = 38;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_toughness_reducedam(), target);
  }

  // required uint32 block = 39;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_block(), target);
  }

  // required uint32 block_reduce_dam = 40;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_block_reduce_dam(), target);
  }

  // required uint32 penetrate = 41;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_penetrate(), target);
  }

  // required uint32 penetrate_extra_dam = 42;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_penetrate_extra_dam(), target);
  }

  // required uint32 accurate = 43;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_accurate(), target);
  }

  // required uint32 accurate_extra_dam = 44;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_accurate_extra_dam(), target);
  }

  // required uint32 hold = 45;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_hold(), target);
  }

  // required uint32 hold_reduce_dam = 46;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_hold_reduce_dam(), target);
  }

  // required uint32 deflect = 47;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_deflect(), target);
  }

  // required uint32 deflect_reduce_dam = 48;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_deflect_reduce_dam(), target);
  }

  // required uint32 realdam = 49;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_realdam(), target);
  }

  // required uint32 real_reduce_dam = 50;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_real_reduce_dam(), target);
  }

  cached_has_bits = _has_bits_[2];
  // required uint32 hit = 51;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_hit(), target);
  }

  // required uint32 miss = 52;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_miss(), target);
  }

  // required uint32 firemastery = 53;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_firemastery(), target);
  }

  // required uint32 icemastery = 54;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_icemastery(), target);
  }

  // required uint32 lightningmastery = 55;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_lightningmastery(), target);
  }

  // required uint32 brightmastery = 56;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_brightmastery(), target);
  }

  // required uint32 darkmastery = 57;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(57, this->_internal_darkmastery(), target);
  }

  // required uint32 fireresist = 58;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_fireresist(), target);
  }

  // required uint32 iceresist = 59;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_iceresist(), target);
  }

  // required uint32 lightningresist = 60;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_lightningresist(), target);
  }

  // required uint32 brightresist = 61;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_brightresist(), target);
  }

  // required uint32 darkresist = 62;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_darkresist(), target);
  }

  // required uint32 firepen = 63;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_firepen(), target);
  }

  // required uint32 icepen = 64;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(64, this->_internal_icepen(), target);
  }

  // required uint32 lightningpen = 65;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(65, this->_internal_lightningpen(), target);
  }

  // required uint32 brightpen = 66;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(66, this->_internal_brightpen(), target);
  }

  // required uint32 darkpen = 67;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(67, this->_internal_darkpen(), target);
  }

  // required uint32 blowint = 68;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(68, this->_internal_blowint(), target);
  }

  // required uint32 knockint = 69;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(69, this->_internal_knockint(), target);
  }

  // required uint32 floatint = 70;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_floatint(), target);
  }

  // required uint32 superhitint = 71;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_superhitint(), target);
  }

  // required uint32 blowresist = 72;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(72, this->_internal_blowresist(), target);
  }

  // required uint32 knockresist = 73;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(73, this->_internal_knockresist(), target);
  }

  // required uint32 floatresist = 74;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(74, this->_internal_floatresist(), target);
  }

  // required uint32 superhitresist = 75;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(75, this->_internal_superhitresist(), target);
  }

  // required uint32 blowdectime = 76;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(76, this->_internal_blowdectime(), target);
  }

  // required uint32 knockdectime = 77;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(77, this->_internal_knockdectime(), target);
  }

  // required uint32 floatdectime = 78;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(78, this->_internal_floatdectime(), target);
  }

  // required uint32 superhitdectime = 79;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(79, this->_internal_superhitdectime(), target);
  }

  // required uint32 stiffaddtime = 80;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(80, this->_internal_stiffaddtime(), target);
  }

  // required uint32 stiffdectime = 81;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(81, this->_internal_stiffdectime(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string icon = 82;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.icon");
    target = stream->WriteStringMaybeAliased(
        82, this->_internal_icon(), target);
  }

  // required string bigicon = 83;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bigicon().data(), static_cast<int>(this->_internal_bigicon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.bigicon");
    target = stream->WriteStringMaybeAliased(
        83, this->_internal_bigicon(), target);
  }

  // required string UIicon = 84;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uiicon().data(), static_cast<int>(this->_internal_uiicon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.UIicon");
    target = stream->WriteStringMaybeAliased(
        84, this->_internal_uiicon(), target);
  }

  // required string modelsize = 85;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modelsize().data(), static_cast<int>(this->_internal_modelsize().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.modelsize");
    target = stream->WriteStringMaybeAliased(
        85, this->_internal_modelsize(), target);
  }

  // required string show_conditions = 86;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_show_conditions().data(), static_cast<int>(this->_internal_show_conditions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.show_conditions");
    target = stream->WriteStringMaybeAliased(
        86, this->_internal_show_conditions(), target);
  }

  // required string hide_conditions = 87;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hide_conditions().data(), static_cast<int>(this->_internal_hide_conditions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.hide_conditions");
    target = stream->WriteStringMaybeAliased(
        87, this->_internal_hide_conditions(), target);
  }

  // required string effect_appearance = 88;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_effect_appearance().data(), static_cast<int>(this->_internal_effect_appearance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.effect_appearance");
    target = stream->WriteStringMaybeAliased(
        88, this->_internal_effect_appearance(), target);
  }

  // required string bipbind_excursion = 89;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bipbind_excursion().data(), static_cast<int>(this->_internal_bipbind_excursion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.bipbind_excursion");
    target = stream->WriteStringMaybeAliased(
        89, this->_internal_bipbind_excursion(), target);
  }

  // required string modelposfor3dicon = 90;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modelposfor3dicon().data(), static_cast<int>(this->_internal_modelposfor3dicon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.modelposfor3dicon");
    target = stream->WriteStringMaybeAliased(
        90, this->_internal_modelposfor3dicon(), target);
  }

  cached_has_bits = _has_bits_[2];
  // required uint32 hatred_distance = 91;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(91, this->_internal_hatred_distance(), target);
  }

  cached_has_bits = _has_bits_[3];
  // required uint32 guardRegion = 92;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(92, this->_internal_guardregion(), target);
  }

  // required uint32 visitfollow = 93;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(93, this->_internal_visitfollow(), target);
  }

  // required uint32 lookat = 94;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(94, this->_internal_lookat(), target);
  }

  cached_has_bits = _has_bits_[0];
  // required string modelCon4Cha = 95;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modelcon4cha().data(), static_cast<int>(this->_internal_modelcon4cha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.modelCon4Cha");
    target = stream->WriteStringMaybeAliased(
        95, this->_internal_modelcon4cha(), target);
  }

  // required string modelCon4Hero = 96;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modelcon4hero().data(), static_cast<int>(this->_internal_modelcon4hero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.modelCon4Hero");
    target = stream->WriteStringMaybeAliased(
        96, this->_internal_modelcon4hero(), target);
  }

  // required string modelCon4Guide = 97;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modelcon4guide().data(), static_cast<int>(this->_internal_modelcon4guide().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.modelCon4Guide");
    target = stream->WriteStringMaybeAliased(
        97, this->_internal_modelcon4guide(), target);
  }

  // required string CapsuleCollider = 98;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_capsulecollider().data(), static_cast<int>(this->_internal_capsulecollider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.CapsuleCollider");
    target = stream->WriteStringMaybeAliased(
        98, this->_internal_capsulecollider(), target);
  }

  // required string function = 99;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function().data(), static_cast<int>(this->_internal_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.npc_data.t_npc_config.function");
    target = stream->WriteStringMaybeAliased(
        99, this->_internal_function(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.npc_data.t_npc_config)
  return target;
}

size_t npc_data_t_npc_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.npc_data.t_npc_config)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_animatorcontroller()) {
    // required string animatorcontroller = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animatorcontroller());
  }

  if (_internal_has_model()) {
    // required string model = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  if (_internal_has_uimodelsize()) {
    // required string uimodelsize = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uimodelsize());
  }

  if (_internal_has_visiticon()) {
    // required string visiticon = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visiticon());
  }

  if (_internal_has_visitbtn()) {
    // required string visitbtn = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visitbtn());
  }

  if (_internal_has_borneffect()) {
    // required string borneffect = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_borneffect());
  }

  if (_internal_has_taskid()) {
    // required string taskid = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());
  }

  if (_internal_has_heropainting()) {
    // required string heropainting = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heropainting());
  }

  if (_internal_has_herostate()) {
    // required string herostate = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_herostate());
  }

  if (_internal_has_icon()) {
    // required string icon = 82;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  if (_internal_has_bigicon()) {
    // required string bigicon = 83;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bigicon());
  }

  if (_internal_has_uiicon()) {
    // required string UIicon = 84;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uiicon());
  }

  if (_internal_has_modelsize()) {
    // required string modelsize = 85;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelsize());
  }

  if (_internal_has_show_conditions()) {
    // required string show_conditions = 86;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_show_conditions());
  }

  if (_internal_has_hide_conditions()) {
    // required string hide_conditions = 87;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hide_conditions());
  }

  if (_internal_has_effect_appearance()) {
    // required string effect_appearance = 88;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effect_appearance());
  }

  if (_internal_has_bipbind_excursion()) {
    // required string bipbind_excursion = 89;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bipbind_excursion());
  }

  if (_internal_has_modelposfor3dicon()) {
    // required string modelposfor3dicon = 90;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelposfor3dicon());
  }

  if (_internal_has_modelcon4cha()) {
    // required string modelCon4Cha = 95;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelcon4cha());
  }

  if (_internal_has_modelcon4hero()) {
    // required string modelCon4Hero = 96;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelcon4hero());
  }

  if (_internal_has_modelcon4guide()) {
    // required string modelCon4Guide = 97;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelcon4guide());
  }

  if (_internal_has_capsulecollider()) {
    // required string CapsuleCollider = 98;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_capsulecollider());
  }

  if (_internal_has_function()) {
    // required string function = 99;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function());
  }

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_kind()) {
    // required uint32 kind = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kind());
  }

  if (_internal_has_level()) {
    // required uint32 level = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (_internal_has_distance()) {
    // required uint32 distance = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_distance());
  }

  if (_internal_has_uimodelrotation()) {
    // required uint32 uimodelrotation = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimodelrotation());
  }

  if (_internal_has_countryid()) {
    // required uint32 countryid = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_countryid());
  }

  if (_internal_has_mapinfo()) {
    // required uint32 mapinfo = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapinfo());
  }

  if (_internal_has_show_map()) {
    // required uint32 show_map = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_show_map());
  }

  if (_internal_has_not_show_name()) {
    // required uint32 not_show_name = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_not_show_name());
  }

  if (_internal_has_borntime()) {
    // required uint32 borntime = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_borntime());
  }

  if (_internal_has_bornaction()) {
    // required uint32 bornaction = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bornaction());
  }

  if (_internal_has_not_beselect()) {
    // required bool not_beselect = 20;
    total_size += 2 + 1;
  }

  if (_internal_has_show_shadow()) {
    // required uint32 show_shadow = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_show_shadow());
  }

  if (_internal_has_bodysize()) {
    // required uint32 bodysize = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bodysize());
  }

  if (_internal_has_hplayer()) {
    // required uint32 hplayer = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hplayer());
  }

  if (_internal_has_volume()) {
    // required uint32 volume = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_volume());
  }

  if (_internal_has_appparentvolume()) {
    // required uint32 appparentvolume = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appparentvolume());
  }

  if (_internal_has_pdamage()) {
    // required uint32 pdamage = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdamage());
  }

  if (_internal_has_mdamage()) {
    // required uint32 mdamage = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdamage());
  }

  if (_internal_has_pdefence()) {
    // required uint32 pdefence = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdefence());
  }

  if (_internal_has_mdefence()) {
    // required uint32 mdefence = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdefence());
  }

  if (_internal_has_maxhp()) {
    // required uint32 maxhp = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxhp());
  }

  if (_internal_has_maxmp()) {
    // required uint32 maxmp = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxmp());
  }

  if (_internal_has_bang()) {
    // required uint32 bang = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bang());
  }

  if (_internal_has_bangextradam()) {
    // required uint32 bangextradam = 36;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bangextradam());
  }

  if (_internal_has_toughness()) {
    // required uint32 toughness = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_toughness());
  }

  if (_internal_has_toughness_reducedam()) {
    // required uint32 toughness_reducedam = 38;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_toughness_reducedam());
  }

  if (_internal_has_block()) {
    // required uint32 block = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block());
  }

  if (_internal_has_block_reduce_dam()) {
    // required uint32 block_reduce_dam = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_reduce_dam());
  }

  if (_internal_has_penetrate()) {
    // required uint32 penetrate = 41;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_penetrate());
  }

  if (_internal_has_penetrate_extra_dam()) {
    // required uint32 penetrate_extra_dam = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_penetrate_extra_dam());
  }

  if (_internal_has_accurate()) {
    // required uint32 accurate = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accurate());
  }

  if (_internal_has_accurate_extra_dam()) {
    // required uint32 accurate_extra_dam = 44;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accurate_extra_dam());
  }

  if (_internal_has_hold()) {
    // required uint32 hold = 45;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hold());
  }

  if (_internal_has_hold_reduce_dam()) {
    // required uint32 hold_reduce_dam = 46;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hold_reduce_dam());
  }

  if (_internal_has_deflect()) {
    // required uint32 deflect = 47;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deflect());
  }

  if (_internal_has_deflect_reduce_dam()) {
    // required uint32 deflect_reduce_dam = 48;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deflect_reduce_dam());
  }

  if (_internal_has_realdam()) {
    // required uint32 realdam = 49;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_realdam());
  }

  if (_internal_has_real_reduce_dam()) {
    // required uint32 real_reduce_dam = 50;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_real_reduce_dam());
  }

  if (_internal_has_hit()) {
    // required uint32 hit = 51;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hit());
  }

  if (_internal_has_miss()) {
    // required uint32 miss = 52;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_miss());
  }

  if (_internal_has_firemastery()) {
    // required uint32 firemastery = 53;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_firemastery());
  }

  if (_internal_has_icemastery()) {
    // required uint32 icemastery = 54;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icemastery());
  }

  if (_internal_has_lightningmastery()) {
    // required uint32 lightningmastery = 55;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lightningmastery());
  }

  if (_internal_has_brightmastery()) {
    // required uint32 brightmastery = 56;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_brightmastery());
  }

  if (_internal_has_darkmastery()) {
    // required uint32 darkmastery = 57;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_darkmastery());
  }

  if (_internal_has_fireresist()) {
    // required uint32 fireresist = 58;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fireresist());
  }

  if (_internal_has_iceresist()) {
    // required uint32 iceresist = 59;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iceresist());
  }

  if (_internal_has_lightningresist()) {
    // required uint32 lightningresist = 60;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lightningresist());
  }

  if (_internal_has_brightresist()) {
    // required uint32 brightresist = 61;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_brightresist());
  }

  if (_internal_has_darkresist()) {
    // required uint32 darkresist = 62;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_darkresist());
  }

  if (_internal_has_firepen()) {
    // required uint32 firepen = 63;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_firepen());
  }

  if (_internal_has_icepen()) {
    // required uint32 icepen = 64;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icepen());
  }

  if (_internal_has_lightningpen()) {
    // required uint32 lightningpen = 65;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lightningpen());
  }

  if (_internal_has_brightpen()) {
    // required uint32 brightpen = 66;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_brightpen());
  }

  if (_internal_has_darkpen()) {
    // required uint32 darkpen = 67;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_darkpen());
  }

  if (_internal_has_blowint()) {
    // required uint32 blowint = 68;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blowint());
  }

  if (_internal_has_knockint()) {
    // required uint32 knockint = 69;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_knockint());
  }

  if (_internal_has_floatint()) {
    // required uint32 floatint = 70;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_floatint());
  }

  if (_internal_has_superhitint()) {
    // required uint32 superhitint = 71;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_superhitint());
  }

  if (_internal_has_blowresist()) {
    // required uint32 blowresist = 72;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blowresist());
  }

  if (_internal_has_knockresist()) {
    // required uint32 knockresist = 73;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_knockresist());
  }

  if (_internal_has_floatresist()) {
    // required uint32 floatresist = 74;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_floatresist());
  }

  if (_internal_has_superhitresist()) {
    // required uint32 superhitresist = 75;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_superhitresist());
  }

  if (_internal_has_blowdectime()) {
    // required uint32 blowdectime = 76;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blowdectime());
  }

  if (_internal_has_knockdectime()) {
    // required uint32 knockdectime = 77;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_knockdectime());
  }

  if (_internal_has_floatdectime()) {
    // required uint32 floatdectime = 78;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_floatdectime());
  }

  if (_internal_has_superhitdectime()) {
    // required uint32 superhitdectime = 79;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_superhitdectime());
  }

  if (_internal_has_stiffaddtime()) {
    // required uint32 stiffaddtime = 80;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stiffaddtime());
  }

  if (_internal_has_stiffdectime()) {
    // required uint32 stiffdectime = 81;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stiffdectime());
  }

  if (_internal_has_hatred_distance()) {
    // required uint32 hatred_distance = 91;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hatred_distance());
  }

  if (_internal_has_guardregion()) {
    // required uint32 guardRegion = 92;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guardregion());
  }

  if (_internal_has_visitfollow()) {
    // required uint32 visitfollow = 93;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_visitfollow());
  }

  if (_internal_has_lookat()) {
    // required uint32 lookat = 94;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lookat());
  }

  return total_size;
}
size_t npc_data_t_npc_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.npc_data.t_npc_config)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_has_bits_[1] & 0xffffffff) ^ 0xffffffff)
       | ((_has_bits_[2] & 0xffffffff) ^ 0xffffffff)
       | ((_has_bits_[3] & 0x00000007) ^ 0x00000007)) == 0) {  // All required fields are present.
    // required string name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string animatorcontroller = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animatorcontroller());

    // required string model = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());

    // required string uimodelsize = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uimodelsize());

    // required string visiticon = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visiticon());

    // required string visitbtn = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visitbtn());

    // required string borneffect = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_borneffect());

    // required string taskid = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_taskid());

    // required string heropainting = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heropainting());

    // required string herostate = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_herostate());

    // required string icon = 82;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());

    // required string bigicon = 83;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bigicon());

    // required string UIicon = 84;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uiicon());

    // required string modelsize = 85;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelsize());

    // required string show_conditions = 86;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_show_conditions());

    // required string hide_conditions = 87;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hide_conditions());

    // required string effect_appearance = 88;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effect_appearance());

    // required string bipbind_excursion = 89;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bipbind_excursion());

    // required string modelposfor3dicon = 90;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelposfor3dicon());

    // required string modelCon4Cha = 95;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelcon4cha());

    // required string modelCon4Hero = 96;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelcon4hero());

    // required string modelCon4Guide = 97;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modelcon4guide());

    // required string CapsuleCollider = 98;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_capsulecollider());

    // required string function = 99;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function());

    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 kind = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_kind());

    // required uint32 level = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());

    // required uint32 distance = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_distance());

    // required uint32 uimodelrotation = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_uimodelrotation());

    // required uint32 countryid = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_countryid());

    // required uint32 mapinfo = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mapinfo());

    // required uint32 show_map = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_show_map());

    // required uint32 not_show_name = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_not_show_name());

    // required uint32 borntime = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_borntime());

    // required uint32 bornaction = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bornaction());

    // required bool not_beselect = 20;
    total_size += 2 + 1;

    // required uint32 show_shadow = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_show_shadow());

    // required uint32 bodysize = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bodysize());

    // required uint32 hplayer = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hplayer());

    // required uint32 volume = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_volume());

    // required uint32 appparentvolume = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_appparentvolume());

    // required uint32 pdamage = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdamage());

    // required uint32 mdamage = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdamage());

    // required uint32 pdefence = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pdefence());

    // required uint32 mdefence = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mdefence());

    // required uint32 maxhp = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxhp());

    // required uint32 maxmp = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxmp());

    // required uint32 bang = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bang());

    // required uint32 bangextradam = 36;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bangextradam());

    // required uint32 toughness = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_toughness());

    // required uint32 toughness_reducedam = 38;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_toughness_reducedam());

    // required uint32 block = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block());

    // required uint32 block_reduce_dam = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_reduce_dam());

    // required uint32 penetrate = 41;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_penetrate());

    // required uint32 penetrate_extra_dam = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_penetrate_extra_dam());

    // required uint32 accurate = 43;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accurate());

    // required uint32 accurate_extra_dam = 44;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_accurate_extra_dam());

    // required uint32 hold = 45;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hold());

    // required uint32 hold_reduce_dam = 46;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hold_reduce_dam());

    // required uint32 deflect = 47;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deflect());

    // required uint32 deflect_reduce_dam = 48;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deflect_reduce_dam());

    // required uint32 realdam = 49;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_realdam());

    // required uint32 real_reduce_dam = 50;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_real_reduce_dam());

    // required uint32 hit = 51;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hit());

    // required uint32 miss = 52;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_miss());

    // required uint32 firemastery = 53;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_firemastery());

    // required uint32 icemastery = 54;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icemastery());

    // required uint32 lightningmastery = 55;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lightningmastery());

    // required uint32 brightmastery = 56;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_brightmastery());

    // required uint32 darkmastery = 57;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_darkmastery());

    // required uint32 fireresist = 58;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fireresist());

    // required uint32 iceresist = 59;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iceresist());

    // required uint32 lightningresist = 60;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lightningresist());

    // required uint32 brightresist = 61;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_brightresist());

    // required uint32 darkresist = 62;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_darkresist());

    // required uint32 firepen = 63;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_firepen());

    // required uint32 icepen = 64;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_icepen());

    // required uint32 lightningpen = 65;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lightningpen());

    // required uint32 brightpen = 66;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_brightpen());

    // required uint32 darkpen = 67;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_darkpen());

    // required uint32 blowint = 68;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blowint());

    // required uint32 knockint = 69;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_knockint());

    // required uint32 floatint = 70;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_floatint());

    // required uint32 superhitint = 71;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_superhitint());

    // required uint32 blowresist = 72;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blowresist());

    // required uint32 knockresist = 73;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_knockresist());

    // required uint32 floatresist = 74;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_floatresist());

    // required uint32 superhitresist = 75;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_superhitresist());

    // required uint32 blowdectime = 76;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blowdectime());

    // required uint32 knockdectime = 77;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_knockdectime());

    // required uint32 floatdectime = 78;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_floatdectime());

    // required uint32 superhitdectime = 79;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_superhitdectime());

    // required uint32 stiffaddtime = 80;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stiffaddtime());

    // required uint32 stiffdectime = 81;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stiffdectime());

    // required uint32 hatred_distance = 91;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hatred_distance());

    // required uint32 guardRegion = 92;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guardregion());

    // required uint32 visitfollow = 93;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_visitfollow());

    // required uint32 lookat = 94;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lookat());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void npc_data_t_npc_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.npc_data.t_npc_config)
  GOOGLE_DCHECK_NE(&from, this);
  const npc_data_t_npc_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<npc_data_t_npc_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.npc_data.t_npc_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.npc_data.t_npc_config)
    MergeFrom(*source);
  }
}

void npc_data_t_npc_config::MergeFrom(const npc_data_t_npc_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.npc_data.t_npc_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      animatorcontroller_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.animatorcontroller_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      uimodelsize_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uimodelsize_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      visiticon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.visiticon_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      visitbtn_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.visitbtn_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      borneffect_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.borneffect_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      taskid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.taskid_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      heropainting_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.heropainting_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      herostate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herostate_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      bigicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bigicon_);
    }
    if (cached_has_bits & 0x00001000u) {
      _has_bits_[0] |= 0x00001000u;
      uiicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uiicon_);
    }
    if (cached_has_bits & 0x00002000u) {
      _has_bits_[0] |= 0x00002000u;
      modelsize_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelsize_);
    }
    if (cached_has_bits & 0x00004000u) {
      _has_bits_[0] |= 0x00004000u;
      show_conditions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.show_conditions_);
    }
    if (cached_has_bits & 0x00008000u) {
      _has_bits_[0] |= 0x00008000u;
      hide_conditions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hide_conditions_);
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _has_bits_[0] |= 0x00010000u;
      effect_appearance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effect_appearance_);
    }
    if (cached_has_bits & 0x00020000u) {
      _has_bits_[0] |= 0x00020000u;
      bipbind_excursion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bipbind_excursion_);
    }
    if (cached_has_bits & 0x00040000u) {
      _has_bits_[0] |= 0x00040000u;
      modelposfor3dicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelposfor3dicon_);
    }
    if (cached_has_bits & 0x00080000u) {
      _has_bits_[0] |= 0x00080000u;
      modelcon4cha_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelcon4cha_);
    }
    if (cached_has_bits & 0x00100000u) {
      _has_bits_[0] |= 0x00100000u;
      modelcon4hero_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelcon4hero_);
    }
    if (cached_has_bits & 0x00200000u) {
      _has_bits_[0] |= 0x00200000u;
      modelcon4guide_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.modelcon4guide_);
    }
    if (cached_has_bits & 0x00400000u) {
      _has_bits_[0] |= 0x00400000u;
      capsulecollider_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.capsulecollider_);
    }
    if (cached_has_bits & 0x00800000u) {
      _has_bits_[0] |= 0x00800000u;
      function_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.function_);
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x02000000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x04000000u) {
      kind_ = from.kind_;
    }
    if (cached_has_bits & 0x08000000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x10000000u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x20000000u) {
      uimodelrotation_ = from.uimodelrotation_;
    }
    if (cached_has_bits & 0x40000000u) {
      countryid_ = from.countryid_;
    }
    if (cached_has_bits & 0x80000000u) {
      mapinfo_ = from.mapinfo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      show_map_ = from.show_map_;
    }
    if (cached_has_bits & 0x00000002u) {
      not_show_name_ = from.not_show_name_;
    }
    if (cached_has_bits & 0x00000004u) {
      borntime_ = from.borntime_;
    }
    if (cached_has_bits & 0x00000008u) {
      bornaction_ = from.bornaction_;
    }
    if (cached_has_bits & 0x00000010u) {
      not_beselect_ = from.not_beselect_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_shadow_ = from.show_shadow_;
    }
    if (cached_has_bits & 0x00000040u) {
      bodysize_ = from.bodysize_;
    }
    if (cached_has_bits & 0x00000080u) {
      hplayer_ = from.hplayer_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000200u) {
      appparentvolume_ = from.appparentvolume_;
    }
    if (cached_has_bits & 0x00000400u) {
      pdamage_ = from.pdamage_;
    }
    if (cached_has_bits & 0x00000800u) {
      mdamage_ = from.mdamage_;
    }
    if (cached_has_bits & 0x00001000u) {
      pdefence_ = from.pdefence_;
    }
    if (cached_has_bits & 0x00002000u) {
      mdefence_ = from.mdefence_;
    }
    if (cached_has_bits & 0x00004000u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00008000u) {
      maxmp_ = from.maxmp_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      bang_ = from.bang_;
    }
    if (cached_has_bits & 0x00020000u) {
      bangextradam_ = from.bangextradam_;
    }
    if (cached_has_bits & 0x00040000u) {
      toughness_ = from.toughness_;
    }
    if (cached_has_bits & 0x00080000u) {
      toughness_reducedam_ = from.toughness_reducedam_;
    }
    if (cached_has_bits & 0x00100000u) {
      block_ = from.block_;
    }
    if (cached_has_bits & 0x00200000u) {
      block_reduce_dam_ = from.block_reduce_dam_;
    }
    if (cached_has_bits & 0x00400000u) {
      penetrate_ = from.penetrate_;
    }
    if (cached_has_bits & 0x00800000u) {
      penetrate_extra_dam_ = from.penetrate_extra_dam_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      accurate_ = from.accurate_;
    }
    if (cached_has_bits & 0x02000000u) {
      accurate_extra_dam_ = from.accurate_extra_dam_;
    }
    if (cached_has_bits & 0x04000000u) {
      hold_ = from.hold_;
    }
    if (cached_has_bits & 0x08000000u) {
      hold_reduce_dam_ = from.hold_reduce_dam_;
    }
    if (cached_has_bits & 0x10000000u) {
      deflect_ = from.deflect_;
    }
    if (cached_has_bits & 0x20000000u) {
      deflect_reduce_dam_ = from.deflect_reduce_dam_;
    }
    if (cached_has_bits & 0x40000000u) {
      realdam_ = from.realdam_;
    }
    if (cached_has_bits & 0x80000000u) {
      real_reduce_dam_ = from.real_reduce_dam_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hit_ = from.hit_;
    }
    if (cached_has_bits & 0x00000002u) {
      miss_ = from.miss_;
    }
    if (cached_has_bits & 0x00000004u) {
      firemastery_ = from.firemastery_;
    }
    if (cached_has_bits & 0x00000008u) {
      icemastery_ = from.icemastery_;
    }
    if (cached_has_bits & 0x00000010u) {
      lightningmastery_ = from.lightningmastery_;
    }
    if (cached_has_bits & 0x00000020u) {
      brightmastery_ = from.brightmastery_;
    }
    if (cached_has_bits & 0x00000040u) {
      darkmastery_ = from.darkmastery_;
    }
    if (cached_has_bits & 0x00000080u) {
      fireresist_ = from.fireresist_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      iceresist_ = from.iceresist_;
    }
    if (cached_has_bits & 0x00000200u) {
      lightningresist_ = from.lightningresist_;
    }
    if (cached_has_bits & 0x00000400u) {
      brightresist_ = from.brightresist_;
    }
    if (cached_has_bits & 0x00000800u) {
      darkresist_ = from.darkresist_;
    }
    if (cached_has_bits & 0x00001000u) {
      firepen_ = from.firepen_;
    }
    if (cached_has_bits & 0x00002000u) {
      icepen_ = from.icepen_;
    }
    if (cached_has_bits & 0x00004000u) {
      lightningpen_ = from.lightningpen_;
    }
    if (cached_has_bits & 0x00008000u) {
      brightpen_ = from.brightpen_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      darkpen_ = from.darkpen_;
    }
    if (cached_has_bits & 0x00020000u) {
      blowint_ = from.blowint_;
    }
    if (cached_has_bits & 0x00040000u) {
      knockint_ = from.knockint_;
    }
    if (cached_has_bits & 0x00080000u) {
      floatint_ = from.floatint_;
    }
    if (cached_has_bits & 0x00100000u) {
      superhitint_ = from.superhitint_;
    }
    if (cached_has_bits & 0x00200000u) {
      blowresist_ = from.blowresist_;
    }
    if (cached_has_bits & 0x00400000u) {
      knockresist_ = from.knockresist_;
    }
    if (cached_has_bits & 0x00800000u) {
      floatresist_ = from.floatresist_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      superhitresist_ = from.superhitresist_;
    }
    if (cached_has_bits & 0x02000000u) {
      blowdectime_ = from.blowdectime_;
    }
    if (cached_has_bits & 0x04000000u) {
      knockdectime_ = from.knockdectime_;
    }
    if (cached_has_bits & 0x08000000u) {
      floatdectime_ = from.floatdectime_;
    }
    if (cached_has_bits & 0x10000000u) {
      superhitdectime_ = from.superhitdectime_;
    }
    if (cached_has_bits & 0x20000000u) {
      stiffaddtime_ = from.stiffaddtime_;
    }
    if (cached_has_bits & 0x40000000u) {
      stiffdectime_ = from.stiffdectime_;
    }
    if (cached_has_bits & 0x80000000u) {
      hatred_distance_ = from.hatred_distance_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      guardregion_ = from.guardregion_;
    }
    if (cached_has_bits & 0x00000002u) {
      visitfollow_ = from.visitfollow_;
    }
    if (cached_has_bits & 0x00000004u) {
      lookat_ = from.lookat_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
}

void npc_data_t_npc_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.npc_data.t_npc_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npc_data_t_npc_config::CopyFrom(const npc_data_t_npc_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.npc_data.t_npc_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npc_data_t_npc_config::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[2] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[3] & 0x00000007) != 0x00000007) return false;
  return true;
}

void npc_data_t_npc_config::InternalSwap(npc_data_t_npc_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  animatorcontroller_.Swap(&other->animatorcontroller_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_.Swap(&other->model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uimodelsize_.Swap(&other->uimodelsize_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  visiticon_.Swap(&other->visiticon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  visitbtn_.Swap(&other->visitbtn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  borneffect_.Swap(&other->borneffect_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  taskid_.Swap(&other->taskid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  heropainting_.Swap(&other->heropainting_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  herostate_.Swap(&other->herostate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bigicon_.Swap(&other->bigicon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uiicon_.Swap(&other->uiicon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modelsize_.Swap(&other->modelsize_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  show_conditions_.Swap(&other->show_conditions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hide_conditions_.Swap(&other->hide_conditions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  effect_appearance_.Swap(&other->effect_appearance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bipbind_excursion_.Swap(&other->bipbind_excursion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modelposfor3dicon_.Swap(&other->modelposfor3dicon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modelcon4cha_.Swap(&other->modelcon4cha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modelcon4hero_.Swap(&other->modelcon4hero_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  modelcon4guide_.Swap(&other->modelcon4guide_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  capsulecollider_.Swap(&other->capsulecollider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  function_.Swap(&other->function_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(kind_, other->kind_);
  swap(level_, other->level_);
  swap(distance_, other->distance_);
  swap(uimodelrotation_, other->uimodelrotation_);
  swap(countryid_, other->countryid_);
  swap(mapinfo_, other->mapinfo_);
  swap(show_map_, other->show_map_);
  swap(not_show_name_, other->not_show_name_);
  swap(borntime_, other->borntime_);
  swap(bornaction_, other->bornaction_);
  swap(not_beselect_, other->not_beselect_);
  swap(show_shadow_, other->show_shadow_);
  swap(bodysize_, other->bodysize_);
  swap(hplayer_, other->hplayer_);
  swap(volume_, other->volume_);
  swap(appparentvolume_, other->appparentvolume_);
  swap(pdamage_, other->pdamage_);
  swap(mdamage_, other->mdamage_);
  swap(pdefence_, other->pdefence_);
  swap(mdefence_, other->mdefence_);
  swap(maxhp_, other->maxhp_);
  swap(maxmp_, other->maxmp_);
  swap(bang_, other->bang_);
  swap(bangextradam_, other->bangextradam_);
  swap(toughness_, other->toughness_);
  swap(toughness_reducedam_, other->toughness_reducedam_);
  swap(block_, other->block_);
  swap(block_reduce_dam_, other->block_reduce_dam_);
  swap(penetrate_, other->penetrate_);
  swap(penetrate_extra_dam_, other->penetrate_extra_dam_);
  swap(accurate_, other->accurate_);
  swap(accurate_extra_dam_, other->accurate_extra_dam_);
  swap(hold_, other->hold_);
  swap(hold_reduce_dam_, other->hold_reduce_dam_);
  swap(deflect_, other->deflect_);
  swap(deflect_reduce_dam_, other->deflect_reduce_dam_);
  swap(realdam_, other->realdam_);
  swap(real_reduce_dam_, other->real_reduce_dam_);
  swap(hit_, other->hit_);
  swap(miss_, other->miss_);
  swap(firemastery_, other->firemastery_);
  swap(icemastery_, other->icemastery_);
  swap(lightningmastery_, other->lightningmastery_);
  swap(brightmastery_, other->brightmastery_);
  swap(darkmastery_, other->darkmastery_);
  swap(fireresist_, other->fireresist_);
  swap(iceresist_, other->iceresist_);
  swap(lightningresist_, other->lightningresist_);
  swap(brightresist_, other->brightresist_);
  swap(darkresist_, other->darkresist_);
  swap(firepen_, other->firepen_);
  swap(icepen_, other->icepen_);
  swap(lightningpen_, other->lightningpen_);
  swap(brightpen_, other->brightpen_);
  swap(darkpen_, other->darkpen_);
  swap(blowint_, other->blowint_);
  swap(knockint_, other->knockint_);
  swap(floatint_, other->floatint_);
  swap(superhitint_, other->superhitint_);
  swap(blowresist_, other->blowresist_);
  swap(knockresist_, other->knockresist_);
  swap(floatresist_, other->floatresist_);
  swap(superhitresist_, other->superhitresist_);
  swap(blowdectime_, other->blowdectime_);
  swap(knockdectime_, other->knockdectime_);
  swap(floatdectime_, other->floatdectime_);
  swap(superhitdectime_, other->superhitdectime_);
  swap(stiffaddtime_, other->stiffaddtime_);
  swap(stiffdectime_, other->stiffdectime_);
  swap(hatred_distance_, other->hatred_distance_);
  swap(guardregion_, other->guardregion_);
  swap(visitfollow_, other->visitfollow_);
  swap(lookat_, other->lookat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata npc_data_t_npc_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void npc_data::InitAsDefaultInstance() {
}
class npc_data::_Internal {
 public:
  using HasBits = decltype(std::declval<npc_data>()._has_bits_);
};

npc_data::npc_data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.npc_data)
}
npc_data::npc_data(const npc_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.npc_data)
}

void npc_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_npc_data_npc_5fdata_2eproto.base);
}

npc_data::~npc_data() {
  // @@protoc_insertion_point(destructor:pb.npc_data)
  SharedDtor();
}

void npc_data::SharedDtor() {
}

void npc_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const npc_data& npc_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_npc_data_npc_5fdata_2eproto.base);
  return *internal_default_instance();
}


void npc_data::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.npc_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* npc_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.npc_data.t_npc_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* npc_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.npc_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.npc_data.t_npc_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.npc_data)
  return target;
}

size_t npc_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.npc_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.npc_data.t_npc_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void npc_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.npc_data)
  GOOGLE_DCHECK_NE(&from, this);
  const npc_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<npc_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.npc_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.npc_data)
    MergeFrom(*source);
  }
}

void npc_data::MergeFrom(const npc_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.npc_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void npc_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.npc_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void npc_data::CopyFrom(const npc_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.npc_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool npc_data::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void npc_data::InternalSwap(npc_data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata npc_data::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::npc_data_t_npc_config* Arena::CreateMaybeMessage< ::pb::npc_data_t_npc_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::npc_data_t_npc_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::npc_data* Arena::CreateMaybeMessage< ::pb::npc_data >(Arena* arena) {
  return Arena::CreateInternal< ::pb::npc_data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
