// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: questconfig.proto

#include "questconfig.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_questconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_questconfig_t_quest_config_questconfig_2eproto;
namespace pb {
class questconfig_t_quest_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<questconfig_t_quest_config> _instance;
} _questconfig_t_quest_config_default_instance_;
class questconfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<questconfig> _instance;
} _questconfig_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_questconfig_questconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_questconfig_default_instance_;
    new (ptr) ::pb::questconfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::questconfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_questconfig_questconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_questconfig_questconfig_2eproto}, {
      &scc_info_questconfig_t_quest_config_questconfig_2eproto.base,}};

static void InitDefaultsscc_info_questconfig_t_quest_config_questconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_questconfig_t_quest_config_default_instance_;
    new (ptr) ::pb::questconfig_t_quest_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::questconfig_t_quest_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_questconfig_t_quest_config_questconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_questconfig_t_quest_config_questconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_questconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_questconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_questconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_questconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, tbxid_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, id_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, acceptnpcid_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, commitnpcid_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, name_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, desc_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, group_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, type_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, levellimit_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, goal_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, degreename_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, award_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, canabandon_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, objects_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, can_cycle_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, pathfindstate_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, pathwaydoing_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, useobject_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, gatherid_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, pathwaydone_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, pathwaypre_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, predesc_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, afterquestnpcid_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, levelaward_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, objaward_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, show_copy_id_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, show_common_map_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, lastsecs_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, degree_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, commitdesc_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, visitnpcid_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, prequestlimit_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, can_share_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, auto_share_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, timelimit_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, if_ring_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig_t_quest_config, state_show_),
  16,
  17,
  18,
  19,
  0,
  1,
  20,
  21,
  2,
  3,
  4,
  5,
  22,
  6,
  23,
  24,
  7,
  8,
  25,
  9,
  10,
  11,
  26,
  27,
  28,
  29,
  30,
  31,
  12,
  13,
  14,
  15,
  32,
  33,
  34,
  35,
  36,
  PROTOBUF_FIELD_OFFSET(::pb::questconfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pb::questconfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::questconfig, datas_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 42, sizeof(::pb::questconfig_t_quest_config)},
  { 79, 85, sizeof(::pb::questconfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_questconfig_t_quest_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_questconfig_default_instance_),
};

const char descriptor_table_protodef_questconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021questconfig.proto\022\002pb\"\212\006\n\013questconfig\022"
  "-\n\005datas\030\001 \003(\0132\036.pb.questconfig.t_quest_"
  "config\032\313\005\n\016t_quest_config\022\020\n\005tbxid\030\001 \002(\r"
  ":\0010\022\r\n\002id\030\002 \002(\r:\0010\022\023\n\013AcceptNpcId\030\003 \002(\r\022"
  "\023\n\013CommitNpcId\030\004 \002(\r\022\014\n\004name\030\005 \002(\t\022\014\n\004de"
  "sc\030\006 \002(\t\022\r\n\005group\030\007 \002(\r\022\014\n\004type\030\010 \002(\r\022\022\n"
  "\nlevellimit\030\t \002(\t\022\014\n\004goal\030\n \002(\t\022\022\n\ndegre"
  "ename\030\013 \002(\t\022\r\n\005award\030\014 \002(\t\022\022\n\ncanabandon"
  "\030\r \002(\010\022\017\n\007objects\030\016 \002(\t\022\021\n\tcan_cycle\030\017 \002"
  "(\010\022\025\n\rpathfindstate\030\020 \002(\r\022\024\n\014pathwaydoin"
  "g\030\021 \002(\t\022\021\n\tuseobject\030\022 \002(\t\022\020\n\010gatherid\030\023"
  " \002(\r\022\023\n\013pathwaydone\030\024 \002(\t\022\022\n\npathwaypre\030"
  "\025 \002(\t\022\017\n\007predesc\030\026 \002(\t\022\027\n\017afterquestnpci"
  "d\030\027 \002(\r\022\022\n\nlevelaward\030\030 \002(\r\022\020\n\010objaward\030"
  "\031 \002(\r\022\024\n\014show_copy_id\030\032 \002(\r\022\027\n\017show_comm"
  "on_map\030\033 \002(\r\022\020\n\010lastsecs\030\034 \002(\r\022\016\n\006degree"
  "\030\035 \002(\t\022\022\n\ncommitdesc\030\036 \002(\t\022\022\n\nVisitNpcId"
  "\030\037 \002(\t\022\025\n\rprequestlimit\030  \002(\t\022\021\n\tcan_sha"
  "re\030! \002(\r\022\022\n\nauto_share\030\" \002(\r\022\021\n\ttimelimi"
  "t\030# \002(\r\022\017\n\007if_ring\030$ \002(\r\022\022\n\nstate_show\030%"
  " \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_questconfig_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_questconfig_2eproto_sccs[2] = {
  &scc_info_questconfig_questconfig_2eproto.base,
  &scc_info_questconfig_t_quest_config_questconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_questconfig_2eproto_once;
static bool descriptor_table_questconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_questconfig_2eproto = {
  &descriptor_table_questconfig_2eproto_initialized, descriptor_table_protodef_questconfig_2eproto, "questconfig.proto", 804,
  &descriptor_table_questconfig_2eproto_once, descriptor_table_questconfig_2eproto_sccs, descriptor_table_questconfig_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_questconfig_2eproto::offsets,
  file_level_metadata_questconfig_2eproto, 2, file_level_enum_descriptors_questconfig_2eproto, file_level_service_descriptors_questconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_questconfig_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_questconfig_2eproto)), true);
namespace pb {

// ===================================================================

void questconfig_t_quest_config::InitAsDefaultInstance() {
}
class questconfig_t_quest_config::_Internal {
 public:
  using HasBits = decltype(std::declval<questconfig_t_quest_config>()._has_bits_);
  static void set_has_tbxid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_acceptnpcid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_commitnpcid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_levellimit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_degreename(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_award(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_canabandon(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_objects(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_can_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_pathfindstate(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_pathwaydoing(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_useobject(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gatherid(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_pathwaydone(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pathwaypre(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_predesc(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_afterquestnpcid(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_levelaward(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_objaward(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_show_copy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_show_common_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_lastsecs(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_commitdesc(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_visitnpcid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_prequestlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_can_share(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_auto_share(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_timelimit(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_if_ring(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_state_show(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
};

questconfig_t_quest_config::questconfig_t_quest_config()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.questconfig.t_quest_config)
}
questconfig_t_quest_config::questconfig_t_quest_config(const questconfig_t_quest_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc()) {
    desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
  }
  levellimit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_levellimit()) {
    levellimit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.levellimit_);
  }
  goal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_goal()) {
    goal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goal_);
  }
  degreename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_degreename()) {
    degreename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.degreename_);
  }
  award_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_award()) {
    award_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.award_);
  }
  objects_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_objects()) {
    objects_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objects_);
  }
  pathwaydoing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pathwaydoing()) {
    pathwaydoing_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathwaydoing_);
  }
  useobject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_useobject()) {
    useobject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.useobject_);
  }
  pathwaydone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pathwaydone()) {
    pathwaydone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathwaydone_);
  }
  pathwaypre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pathwaypre()) {
    pathwaypre_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathwaypre_);
  }
  predesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_predesc()) {
    predesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predesc_);
  }
  degree_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_degree()) {
    degree_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.degree_);
  }
  commitdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_commitdesc()) {
    commitdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.commitdesc_);
  }
  visitnpcid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_visitnpcid()) {
    visitnpcid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.visitnpcid_);
  }
  prequestlimit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prequestlimit()) {
    prequestlimit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prequestlimit_);
  }
  ::memcpy(&tbxid_, &from.tbxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_show_) -
    reinterpret_cast<char*>(&tbxid_)) + sizeof(state_show_));
  // @@protoc_insertion_point(copy_constructor:pb.questconfig.t_quest_config)
}

void questconfig_t_quest_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_questconfig_t_quest_config_questconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  levellimit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  degreename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  award_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objects_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pathwaydoing_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useobject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pathwaydone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pathwaypre_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  degree_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commitdesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visitnpcid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prequestlimit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tbxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_show_) -
      reinterpret_cast<char*>(&tbxid_)) + sizeof(state_show_));
}

questconfig_t_quest_config::~questconfig_t_quest_config() {
  // @@protoc_insertion_point(destructor:pb.questconfig.t_quest_config)
  SharedDtor();
}

void questconfig_t_quest_config::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  levellimit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  degreename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  award_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objects_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pathwaydoing_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  useobject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pathwaydone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pathwaypre_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  degree_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commitdesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  visitnpcid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prequestlimit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void questconfig_t_quest_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const questconfig_t_quest_config& questconfig_t_quest_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_questconfig_t_quest_config_questconfig_2eproto.base);
  return *internal_default_instance();
}


void questconfig_t_quest_config::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.questconfig.t_quest_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      desc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      levellimit_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      goal_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      degreename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      award_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      objects_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      pathwaydoing_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      useobject_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      pathwaydone_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      pathwaypre_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      predesc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00001000u) {
      degree_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00002000u) {
      commitdesc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00004000u) {
      visitnpcid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00008000u) {
      prequestlimit_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&tbxid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_cycle_) -
        reinterpret_cast<char*>(&tbxid_)) + sizeof(can_cycle_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&pathfindstate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastsecs_) -
        reinterpret_cast<char*>(&pathfindstate_)) + sizeof(lastsecs_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&can_share_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_show_) -
        reinterpret_cast<char*>(&can_share_)) + sizeof(state_show_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* questconfig_t_quest_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tbxid = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbxid(&_has_bits_);
          tbxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&_has_bits_);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 AcceptNpcId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_acceptnpcid(&_has_bits_);
          acceptnpcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 CommitNpcId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_commitnpcid(&_has_bits_);
          commitnpcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string desc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 group = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_group(&_has_bits_);
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_type(&_has_bits_);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string levellimit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_levellimit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.levellimit");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string goal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_goal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.goal");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string degreename = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_degreename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.degreename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string award = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_award();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.award");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool canabandon = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_canabandon(&_has_bits_);
          canabandon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string objects = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_objects();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.objects");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool can_cycle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_can_cycle(&_has_bits_);
          can_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pathfindstate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_pathfindstate(&_has_bits_);
          pathfindstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string pathwaydoing = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_pathwaydoing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.pathwaydoing");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string useobject = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_useobject();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.useobject");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gatherid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_gatherid(&_has_bits_);
          gatherid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string pathwaydone = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_pathwaydone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.pathwaydone");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string pathwaypre = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_pathwaypre();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.pathwaypre");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string predesc = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_predesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.predesc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 afterquestnpcid = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_afterquestnpcid(&_has_bits_);
          afterquestnpcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 levelaward = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_levelaward(&_has_bits_);
          levelaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 objaward = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_objaward(&_has_bits_);
          objaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 show_copy_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_show_copy_id(&_has_bits_);
          show_copy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 show_common_map = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_show_common_map(&_has_bits_);
          show_common_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 lastsecs = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_lastsecs(&_has_bits_);
          lastsecs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string degree = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_degree();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.degree");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string commitdesc = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_commitdesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.commitdesc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string VisitNpcId = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_visitnpcid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.VisitNpcId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string prequestlimit = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_prequestlimit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.questconfig.t_quest_config.prequestlimit");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 can_share = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_can_share(&_has_bits_);
          can_share_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 auto_share = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_auto_share(&_has_bits_);
          auto_share_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 timelimit = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timelimit(&_has_bits_);
          timelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 if_ring = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_if_ring(&_has_bits_);
          if_ring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 state_show = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_state_show(&_has_bits_);
          state_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* questconfig_t_quest_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.questconfig.t_quest_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tbxid = 1 [default = 0];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbxid(), target);
  }

  // required uint32 id = 2 [default = 0];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // required uint32 AcceptNpcId = 3;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_acceptnpcid(), target);
  }

  // required uint32 CommitNpcId = 4;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_commitnpcid(), target);
  }

  // required string name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // required string desc = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.desc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_desc(), target);
  }

  // required uint32 group = 7;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_group(), target);
  }

  // required uint32 type = 8;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_type(), target);
  }

  // required string levellimit = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_levellimit().data(), static_cast<int>(this->_internal_levellimit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.levellimit");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_levellimit(), target);
  }

  // required string goal = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_goal().data(), static_cast<int>(this->_internal_goal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.goal");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_goal(), target);
  }

  // required string degreename = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_degreename().data(), static_cast<int>(this->_internal_degreename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.degreename");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_degreename(), target);
  }

  // required string award = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_award().data(), static_cast<int>(this->_internal_award().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.award");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_award(), target);
  }

  // required bool canabandon = 13;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_canabandon(), target);
  }

  // required string objects = 14;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_objects().data(), static_cast<int>(this->_internal_objects().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.objects");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_objects(), target);
  }

  // required bool can_cycle = 15;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_can_cycle(), target);
  }

  // required uint32 pathfindstate = 16;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_pathfindstate(), target);
  }

  // required string pathwaydoing = 17;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pathwaydoing().data(), static_cast<int>(this->_internal_pathwaydoing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.pathwaydoing");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_pathwaydoing(), target);
  }

  // required string useobject = 18;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_useobject().data(), static_cast<int>(this->_internal_useobject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.useobject");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_useobject(), target);
  }

  // required uint32 gatherid = 19;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_gatherid(), target);
  }

  // required string pathwaydone = 20;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pathwaydone().data(), static_cast<int>(this->_internal_pathwaydone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.pathwaydone");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_pathwaydone(), target);
  }

  // required string pathwaypre = 21;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pathwaypre().data(), static_cast<int>(this->_internal_pathwaypre().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.pathwaypre");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_pathwaypre(), target);
  }

  // required string predesc = 22;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_predesc().data(), static_cast<int>(this->_internal_predesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.predesc");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_predesc(), target);
  }

  // required uint32 afterquestnpcid = 23;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_afterquestnpcid(), target);
  }

  // required uint32 levelaward = 24;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_levelaward(), target);
  }

  // required uint32 objaward = 25;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_objaward(), target);
  }

  // required uint32 show_copy_id = 26;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_show_copy_id(), target);
  }

  // required uint32 show_common_map = 27;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_show_common_map(), target);
  }

  // required uint32 lastsecs = 28;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_lastsecs(), target);
  }

  // required string degree = 29;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_degree().data(), static_cast<int>(this->_internal_degree().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.degree");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_degree(), target);
  }

  // required string commitdesc = 30;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_commitdesc().data(), static_cast<int>(this->_internal_commitdesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.commitdesc");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_commitdesc(), target);
  }

  // required string VisitNpcId = 31;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_visitnpcid().data(), static_cast<int>(this->_internal_visitnpcid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.VisitNpcId");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_visitnpcid(), target);
  }

  // required string prequestlimit = 32;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_prequestlimit().data(), static_cast<int>(this->_internal_prequestlimit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pb.questconfig.t_quest_config.prequestlimit");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_prequestlimit(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required uint32 can_share = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_can_share(), target);
  }

  // required uint32 auto_share = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_auto_share(), target);
  }

  // required uint32 timelimit = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_timelimit(), target);
  }

  // required uint32 if_ring = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_if_ring(), target);
  }

  // required uint32 state_show = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_state_show(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.questconfig.t_quest_config)
  return target;
}

size_t questconfig_t_quest_config::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pb.questconfig.t_quest_config)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_desc()) {
    // required string desc = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  if (_internal_has_levellimit()) {
    // required string levellimit = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_levellimit());
  }

  if (_internal_has_goal()) {
    // required string goal = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goal());
  }

  if (_internal_has_degreename()) {
    // required string degreename = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_degreename());
  }

  if (_internal_has_award()) {
    // required string award = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_award());
  }

  if (_internal_has_objects()) {
    // required string objects = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objects());
  }

  if (_internal_has_pathwaydoing()) {
    // required string pathwaydoing = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathwaydoing());
  }

  if (_internal_has_useobject()) {
    // required string useobject = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_useobject());
  }

  if (_internal_has_pathwaydone()) {
    // required string pathwaydone = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathwaydone());
  }

  if (_internal_has_pathwaypre()) {
    // required string pathwaypre = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathwaypre());
  }

  if (_internal_has_predesc()) {
    // required string predesc = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predesc());
  }

  if (_internal_has_degree()) {
    // required string degree = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_degree());
  }

  if (_internal_has_commitdesc()) {
    // required string commitdesc = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commitdesc());
  }

  if (_internal_has_visitnpcid()) {
    // required string VisitNpcId = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visitnpcid());
  }

  if (_internal_has_prequestlimit()) {
    // required string prequestlimit = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prequestlimit());
  }

  if (_internal_has_tbxid()) {
    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());
  }

  if (_internal_has_id()) {
    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (_internal_has_acceptnpcid()) {
    // required uint32 AcceptNpcId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acceptnpcid());
  }

  if (_internal_has_commitnpcid()) {
    // required uint32 CommitNpcId = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_commitnpcid());
  }

  if (_internal_has_group()) {
    // required uint32 group = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group());
  }

  if (_internal_has_type()) {
    // required uint32 type = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  if (_internal_has_canabandon()) {
    // required bool canabandon = 13;
    total_size += 1 + 1;
  }

  if (_internal_has_can_cycle()) {
    // required bool can_cycle = 15;
    total_size += 1 + 1;
  }

  if (_internal_has_pathfindstate()) {
    // required uint32 pathfindstate = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pathfindstate());
  }

  if (_internal_has_gatherid()) {
    // required uint32 gatherid = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gatherid());
  }

  if (_internal_has_afterquestnpcid()) {
    // required uint32 afterquestnpcid = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_afterquestnpcid());
  }

  if (_internal_has_levelaward()) {
    // required uint32 levelaward = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levelaward());
  }

  if (_internal_has_objaward()) {
    // required uint32 objaward = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objaward());
  }

  if (_internal_has_show_copy_id()) {
    // required uint32 show_copy_id = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_show_copy_id());
  }

  if (_internal_has_show_common_map()) {
    // required uint32 show_common_map = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_show_common_map());
  }

  if (_internal_has_lastsecs()) {
    // required uint32 lastsecs = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lastsecs());
  }

  if (_internal_has_can_share()) {
    // required uint32 can_share = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_can_share());
  }

  if (_internal_has_auto_share()) {
    // required uint32 auto_share = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_auto_share());
  }

  if (_internal_has_timelimit()) {
    // required uint32 timelimit = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timelimit());
  }

  if (_internal_has_if_ring()) {
    // required uint32 if_ring = 36;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_if_ring());
  }

  if (_internal_has_state_show()) {
    // required uint32 state_show = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state_show());
  }

  return total_size;
}
size_t questconfig_t_quest_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.questconfig.t_quest_config)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_has_bits_[1] & 0x0000001f) ^ 0x0000001f)) == 0) {  // All required fields are present.
    // required string name = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string desc = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());

    // required string levellimit = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_levellimit());

    // required string goal = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goal());

    // required string degreename = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_degreename());

    // required string award = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_award());

    // required string objects = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_objects());

    // required string pathwaydoing = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathwaydoing());

    // required string useobject = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_useobject());

    // required string pathwaydone = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathwaydone());

    // required string pathwaypre = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathwaypre());

    // required string predesc = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_predesc());

    // required string degree = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_degree());

    // required string commitdesc = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commitdesc());

    // required string VisitNpcId = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visitnpcid());

    // required string prequestlimit = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prequestlimit());

    // required uint32 tbxid = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tbxid());

    // required uint32 id = 2 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

    // required uint32 AcceptNpcId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acceptnpcid());

    // required uint32 CommitNpcId = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_commitnpcid());

    // required uint32 group = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_group());

    // required uint32 type = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());

    // required bool canabandon = 13;
    total_size += 1 + 1;

    // required bool can_cycle = 15;
    total_size += 1 + 1;

    // required uint32 pathfindstate = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pathfindstate());

    // required uint32 gatherid = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gatherid());

    // required uint32 afterquestnpcid = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_afterquestnpcid());

    // required uint32 levelaward = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levelaward());

    // required uint32 objaward = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_objaward());

    // required uint32 show_copy_id = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_show_copy_id());

    // required uint32 show_common_map = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_show_common_map());

    // required uint32 lastsecs = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lastsecs());

    // required uint32 can_share = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_can_share());

    // required uint32 auto_share = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_auto_share());

    // required uint32 timelimit = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timelimit());

    // required uint32 if_ring = 36;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_if_ring());

    // required uint32 state_show = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_state_show());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void questconfig_t_quest_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.questconfig.t_quest_config)
  GOOGLE_DCHECK_NE(&from, this);
  const questconfig_t_quest_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<questconfig_t_quest_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.questconfig.t_quest_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.questconfig.t_quest_config)
    MergeFrom(*source);
  }
}

void questconfig_t_quest_config::MergeFrom(const questconfig_t_quest_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.questconfig.t_quest_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      desc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      levellimit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.levellimit_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      goal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.goal_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      degreename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.degreename_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      award_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.award_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      objects_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objects_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      pathwaydoing_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathwaydoing_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      useobject_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.useobject_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      pathwaydone_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathwaydone_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      pathwaypre_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathwaypre_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      predesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predesc_);
    }
    if (cached_has_bits & 0x00001000u) {
      _has_bits_[0] |= 0x00001000u;
      degree_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.degree_);
    }
    if (cached_has_bits & 0x00002000u) {
      _has_bits_[0] |= 0x00002000u;
      commitdesc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.commitdesc_);
    }
    if (cached_has_bits & 0x00004000u) {
      _has_bits_[0] |= 0x00004000u;
      visitnpcid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.visitnpcid_);
    }
    if (cached_has_bits & 0x00008000u) {
      _has_bits_[0] |= 0x00008000u;
      prequestlimit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prequestlimit_);
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      tbxid_ = from.tbxid_;
    }
    if (cached_has_bits & 0x00020000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00040000u) {
      acceptnpcid_ = from.acceptnpcid_;
    }
    if (cached_has_bits & 0x00080000u) {
      commitnpcid_ = from.commitnpcid_;
    }
    if (cached_has_bits & 0x00100000u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x00200000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00400000u) {
      canabandon_ = from.canabandon_;
    }
    if (cached_has_bits & 0x00800000u) {
      can_cycle_ = from.can_cycle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      pathfindstate_ = from.pathfindstate_;
    }
    if (cached_has_bits & 0x02000000u) {
      gatherid_ = from.gatherid_;
    }
    if (cached_has_bits & 0x04000000u) {
      afterquestnpcid_ = from.afterquestnpcid_;
    }
    if (cached_has_bits & 0x08000000u) {
      levelaward_ = from.levelaward_;
    }
    if (cached_has_bits & 0x10000000u) {
      objaward_ = from.objaward_;
    }
    if (cached_has_bits & 0x20000000u) {
      show_copy_id_ = from.show_copy_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      show_common_map_ = from.show_common_map_;
    }
    if (cached_has_bits & 0x80000000u) {
      lastsecs_ = from.lastsecs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      can_share_ = from.can_share_;
    }
    if (cached_has_bits & 0x00000002u) {
      auto_share_ = from.auto_share_;
    }
    if (cached_has_bits & 0x00000004u) {
      timelimit_ = from.timelimit_;
    }
    if (cached_has_bits & 0x00000008u) {
      if_ring_ = from.if_ring_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_show_ = from.state_show_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void questconfig_t_quest_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.questconfig.t_quest_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void questconfig_t_quest_config::CopyFrom(const questconfig_t_quest_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.questconfig.t_quest_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool questconfig_t_quest_config::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void questconfig_t_quest_config::InternalSwap(questconfig_t_quest_config* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  levellimit_.Swap(&other->levellimit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  goal_.Swap(&other->goal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  degreename_.Swap(&other->degreename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  award_.Swap(&other->award_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objects_.Swap(&other->objects_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pathwaydoing_.Swap(&other->pathwaydoing_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  useobject_.Swap(&other->useobject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pathwaydone_.Swap(&other->pathwaydone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pathwaypre_.Swap(&other->pathwaypre_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  predesc_.Swap(&other->predesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  degree_.Swap(&other->degree_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commitdesc_.Swap(&other->commitdesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  visitnpcid_.Swap(&other->visitnpcid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prequestlimit_.Swap(&other->prequestlimit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tbxid_, other->tbxid_);
  swap(id_, other->id_);
  swap(acceptnpcid_, other->acceptnpcid_);
  swap(commitnpcid_, other->commitnpcid_);
  swap(group_, other->group_);
  swap(type_, other->type_);
  swap(canabandon_, other->canabandon_);
  swap(can_cycle_, other->can_cycle_);
  swap(pathfindstate_, other->pathfindstate_);
  swap(gatherid_, other->gatherid_);
  swap(afterquestnpcid_, other->afterquestnpcid_);
  swap(levelaward_, other->levelaward_);
  swap(objaward_, other->objaward_);
  swap(show_copy_id_, other->show_copy_id_);
  swap(show_common_map_, other->show_common_map_);
  swap(lastsecs_, other->lastsecs_);
  swap(can_share_, other->can_share_);
  swap(auto_share_, other->auto_share_);
  swap(timelimit_, other->timelimit_);
  swap(if_ring_, other->if_ring_);
  swap(state_show_, other->state_show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata questconfig_t_quest_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void questconfig::InitAsDefaultInstance() {
}
class questconfig::_Internal {
 public:
  using HasBits = decltype(std::declval<questconfig>()._has_bits_);
};

questconfig::questconfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.questconfig)
}
questconfig::questconfig(const questconfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.questconfig)
}

void questconfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_questconfig_questconfig_2eproto.base);
}

questconfig::~questconfig() {
  // @@protoc_insertion_point(destructor:pb.questconfig)
  SharedDtor();
}

void questconfig::SharedDtor() {
}

void questconfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const questconfig& questconfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_questconfig_questconfig_2eproto.base);
  return *internal_default_instance();
}


void questconfig::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.questconfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* questconfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.questconfig.t_quest_config datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* questconfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.questconfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.questconfig.t_quest_config datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.questconfig)
  return target;
}

size_t questconfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.questconfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.questconfig.t_quest_config datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void questconfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.questconfig)
  GOOGLE_DCHECK_NE(&from, this);
  const questconfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<questconfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.questconfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.questconfig)
    MergeFrom(*source);
  }
}

void questconfig::MergeFrom(const questconfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.questconfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void questconfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.questconfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void questconfig::CopyFrom(const questconfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.questconfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool questconfig::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datas_)) return false;
  return true;
}

void questconfig::InternalSwap(questconfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata questconfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::questconfig_t_quest_config* Arena::CreateMaybeMessage< ::pb::questconfig_t_quest_config >(Arena* arena) {
  return Arena::CreateInternal< ::pb::questconfig_t_quest_config >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::questconfig* Arena::CreateMaybeMessage< ::pb::questconfig >(Arena* arena) {
  return Arena::CreateInternal< ::pb::questconfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
