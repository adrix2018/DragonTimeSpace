// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill_guild.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skill_5fguild_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skill_5fguild_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skill_5fguild_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skill_5fguild_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skill_5fguild_2eproto;
namespace pb {
class skill_guild;
class skill_guildDefaultTypeInternal;
extern skill_guildDefaultTypeInternal _skill_guild_default_instance_;
class skill_guild_t_skill_guild;
class skill_guild_t_skill_guildDefaultTypeInternal;
extern skill_guild_t_skill_guildDefaultTypeInternal _skill_guild_t_skill_guild_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::skill_guild* Arena::CreateMaybeMessage<::pb::skill_guild>(Arena*);
template<> ::pb::skill_guild_t_skill_guild* Arena::CreateMaybeMessage<::pb::skill_guild_t_skill_guild>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class skill_guild_t_skill_guild :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.skill_guild.t_skill_guild) */ {
 public:
  skill_guild_t_skill_guild();
  virtual ~skill_guild_t_skill_guild();

  skill_guild_t_skill_guild(const skill_guild_t_skill_guild& from);
  skill_guild_t_skill_guild(skill_guild_t_skill_guild&& from) noexcept
    : skill_guild_t_skill_guild() {
    *this = ::std::move(from);
  }

  inline skill_guild_t_skill_guild& operator=(const skill_guild_t_skill_guild& from) {
    CopyFrom(from);
    return *this;
  }
  inline skill_guild_t_skill_guild& operator=(skill_guild_t_skill_guild&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const skill_guild_t_skill_guild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const skill_guild_t_skill_guild* internal_default_instance() {
    return reinterpret_cast<const skill_guild_t_skill_guild*>(
               &_skill_guild_t_skill_guild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(skill_guild_t_skill_guild& a, skill_guild_t_skill_guild& b) {
    a.Swap(&b);
  }
  inline void Swap(skill_guild_t_skill_guild* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline skill_guild_t_skill_guild* New() const final {
    return CreateMaybeMessage<skill_guild_t_skill_guild>(nullptr);
  }

  skill_guild_t_skill_guild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<skill_guild_t_skill_guild>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const skill_guild_t_skill_guild& from);
  void MergeFrom(const skill_guild_t_skill_guild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(skill_guild_t_skill_guild* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.skill_guild.t_skill_guild";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skill_5fguild_2eproto);
    return ::descriptor_table_skill_5fguild_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillnameFieldNumber = 3,
    kLevelupcostFieldNumber = 6,
    kDescFieldNumber = 8,
    kSkillstausFieldNumber = 9,
    kSkilliconFieldNumber = 10,
    kTbxidFieldNumber = 1,
    kSkillidFieldNumber = 2,
    kLevelFieldNumber = 4,
    kNextskillidFieldNumber = 5,
    kUnlocklevelFieldNumber = 7,
  };
  // required string skillname = 3;
  bool has_skillname() const;
  private:
  bool _internal_has_skillname() const;
  public:
  void clear_skillname();
  const std::string& skillname() const;
  void set_skillname(const std::string& value);
  void set_skillname(std::string&& value);
  void set_skillname(const char* value);
  void set_skillname(const char* value, size_t size);
  std::string* mutable_skillname();
  std::string* release_skillname();
  void set_allocated_skillname(std::string* skillname);
  private:
  const std::string& _internal_skillname() const;
  void _internal_set_skillname(const std::string& value);
  std::string* _internal_mutable_skillname();
  public:

  // required string levelupcost = 6;
  bool has_levelupcost() const;
  private:
  bool _internal_has_levelupcost() const;
  public:
  void clear_levelupcost();
  const std::string& levelupcost() const;
  void set_levelupcost(const std::string& value);
  void set_levelupcost(std::string&& value);
  void set_levelupcost(const char* value);
  void set_levelupcost(const char* value, size_t size);
  std::string* mutable_levelupcost();
  std::string* release_levelupcost();
  void set_allocated_levelupcost(std::string* levelupcost);
  private:
  const std::string& _internal_levelupcost() const;
  void _internal_set_levelupcost(const std::string& value);
  std::string* _internal_mutable_levelupcost();
  public:

  // required string desc = 8;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // required string skillstaus = 9;
  bool has_skillstaus() const;
  private:
  bool _internal_has_skillstaus() const;
  public:
  void clear_skillstaus();
  const std::string& skillstaus() const;
  void set_skillstaus(const std::string& value);
  void set_skillstaus(std::string&& value);
  void set_skillstaus(const char* value);
  void set_skillstaus(const char* value, size_t size);
  std::string* mutable_skillstaus();
  std::string* release_skillstaus();
  void set_allocated_skillstaus(std::string* skillstaus);
  private:
  const std::string& _internal_skillstaus() const;
  void _internal_set_skillstaus(const std::string& value);
  std::string* _internal_mutable_skillstaus();
  public:

  // required string skillicon = 10;
  bool has_skillicon() const;
  private:
  bool _internal_has_skillicon() const;
  public:
  void clear_skillicon();
  const std::string& skillicon() const;
  void set_skillicon(const std::string& value);
  void set_skillicon(std::string&& value);
  void set_skillicon(const char* value);
  void set_skillicon(const char* value, size_t size);
  std::string* mutable_skillicon();
  std::string* release_skillicon();
  void set_allocated_skillicon(std::string* skillicon);
  private:
  const std::string& _internal_skillicon() const;
  void _internal_set_skillicon(const std::string& value);
  std::string* _internal_mutable_skillicon();
  public:

  // required uint32 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 skillid = 2 [default = 0];
  bool has_skillid() const;
  private:
  bool _internal_has_skillid() const;
  public:
  void clear_skillid();
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid() const;
  void set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skillid() const;
  void _internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 level = 4;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nextskillid = 5;
  bool has_nextskillid() const;
  private:
  bool _internal_has_nextskillid() const;
  public:
  void clear_nextskillid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nextskillid() const;
  void set_nextskillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nextskillid() const;
  void _internal_set_nextskillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 unlocklevel = 7;
  bool has_unlocklevel() const;
  private:
  bool _internal_has_unlocklevel() const;
  public:
  void clear_unlocklevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 unlocklevel() const;
  void set_unlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unlocklevel() const;
  void _internal_set_unlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.skill_guild.t_skill_guild)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skillname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr levelupcost_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skillstaus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skillicon_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nextskillid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unlocklevel_;
  friend struct ::TableStruct_skill_5fguild_2eproto;
};
// -------------------------------------------------------------------

class skill_guild :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.skill_guild) */ {
 public:
  skill_guild();
  virtual ~skill_guild();

  skill_guild(const skill_guild& from);
  skill_guild(skill_guild&& from) noexcept
    : skill_guild() {
    *this = ::std::move(from);
  }

  inline skill_guild& operator=(const skill_guild& from) {
    CopyFrom(from);
    return *this;
  }
  inline skill_guild& operator=(skill_guild&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const skill_guild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const skill_guild* internal_default_instance() {
    return reinterpret_cast<const skill_guild*>(
               &_skill_guild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(skill_guild& a, skill_guild& b) {
    a.Swap(&b);
  }
  inline void Swap(skill_guild* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline skill_guild* New() const final {
    return CreateMaybeMessage<skill_guild>(nullptr);
  }

  skill_guild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<skill_guild>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const skill_guild& from);
  void MergeFrom(const skill_guild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(skill_guild* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.skill_guild";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skill_5fguild_2eproto);
    return ::descriptor_table_skill_5fguild_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef skill_guild_t_skill_guild t_skill_guild;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.skill_guild.t_skill_guild datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::skill_guild_t_skill_guild* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_guild_t_skill_guild >*
      mutable_datas();
  private:
  const ::pb::skill_guild_t_skill_guild& _internal_datas(int index) const;
  ::pb::skill_guild_t_skill_guild* _internal_add_datas();
  public:
  const ::pb::skill_guild_t_skill_guild& datas(int index) const;
  ::pb::skill_guild_t_skill_guild* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_guild_t_skill_guild >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.skill_guild)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_guild_t_skill_guild > datas_;
  friend struct ::TableStruct_skill_5fguild_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// skill_guild_t_skill_guild

// required uint32 tbxid = 1 [default = 0];
inline bool skill_guild_t_skill_guild::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool skill_guild_t_skill_guild::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void skill_guild_t_skill_guild::clear_tbxid() {
  tbxid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_guild_t_skill_guild::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_guild_t_skill_guild::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.t_skill_guild.tbxid)
  return _internal_tbxid();
}
inline void skill_guild_t_skill_guild::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tbxid_ = value;
}
inline void skill_guild_t_skill_guild::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.skill_guild.t_skill_guild.tbxid)
}

// required uint32 skillid = 2 [default = 0];
inline bool skill_guild_t_skill_guild::_internal_has_skillid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool skill_guild_t_skill_guild::has_skillid() const {
  return _internal_has_skillid();
}
inline void skill_guild_t_skill_guild::clear_skillid() {
  skillid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_guild_t_skill_guild::_internal_skillid() const {
  return skillid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_guild_t_skill_guild::skillid() const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.t_skill_guild.skillid)
  return _internal_skillid();
}
inline void skill_guild_t_skill_guild::_internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  skillid_ = value;
}
inline void skill_guild_t_skill_guild::set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:pb.skill_guild.t_skill_guild.skillid)
}

// required string skillname = 3;
inline bool skill_guild_t_skill_guild::_internal_has_skillname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool skill_guild_t_skill_guild::has_skillname() const {
  return _internal_has_skillname();
}
inline void skill_guild_t_skill_guild::clear_skillname() {
  skillname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& skill_guild_t_skill_guild::skillname() const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.t_skill_guild.skillname)
  return _internal_skillname();
}
inline void skill_guild_t_skill_guild::set_skillname(const std::string& value) {
  _internal_set_skillname(value);
  // @@protoc_insertion_point(field_set:pb.skill_guild.t_skill_guild.skillname)
}
inline std::string* skill_guild_t_skill_guild::mutable_skillname() {
  // @@protoc_insertion_point(field_mutable:pb.skill_guild.t_skill_guild.skillname)
  return _internal_mutable_skillname();
}
inline const std::string& skill_guild_t_skill_guild::_internal_skillname() const {
  return skillname_.GetNoArena();
}
inline void skill_guild_t_skill_guild::_internal_set_skillname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  skillname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_guild_t_skill_guild::set_skillname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  skillname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_guild.t_skill_guild.skillname)
}
inline void skill_guild_t_skill_guild::set_skillname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  skillname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_guild.t_skill_guild.skillname)
}
inline void skill_guild_t_skill_guild::set_skillname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  skillname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_guild.t_skill_guild.skillname)
}
inline std::string* skill_guild_t_skill_guild::_internal_mutable_skillname() {
  _has_bits_[0] |= 0x00000001u;
  return skillname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_guild_t_skill_guild::release_skillname() {
  // @@protoc_insertion_point(field_release:pb.skill_guild.t_skill_guild.skillname)
  if (!_internal_has_skillname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return skillname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_guild_t_skill_guild::set_allocated_skillname(std::string* skillname) {
  if (skillname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  skillname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skillname);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_guild.t_skill_guild.skillname)
}

// required uint32 level = 4;
inline bool skill_guild_t_skill_guild::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool skill_guild_t_skill_guild::has_level() const {
  return _internal_has_level();
}
inline void skill_guild_t_skill_guild::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_guild_t_skill_guild::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_guild_t_skill_guild::level() const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.t_skill_guild.level)
  return _internal_level();
}
inline void skill_guild_t_skill_guild::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  level_ = value;
}
inline void skill_guild_t_skill_guild::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.skill_guild.t_skill_guild.level)
}

// required uint32 nextskillid = 5;
inline bool skill_guild_t_skill_guild::_internal_has_nextskillid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool skill_guild_t_skill_guild::has_nextskillid() const {
  return _internal_has_nextskillid();
}
inline void skill_guild_t_skill_guild::clear_nextskillid() {
  nextskillid_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_guild_t_skill_guild::_internal_nextskillid() const {
  return nextskillid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_guild_t_skill_guild::nextskillid() const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.t_skill_guild.nextskillid)
  return _internal_nextskillid();
}
inline void skill_guild_t_skill_guild::_internal_set_nextskillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  nextskillid_ = value;
}
inline void skill_guild_t_skill_guild::set_nextskillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nextskillid(value);
  // @@protoc_insertion_point(field_set:pb.skill_guild.t_skill_guild.nextskillid)
}

// required string levelupcost = 6;
inline bool skill_guild_t_skill_guild::_internal_has_levelupcost() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool skill_guild_t_skill_guild::has_levelupcost() const {
  return _internal_has_levelupcost();
}
inline void skill_guild_t_skill_guild::clear_levelupcost() {
  levelupcost_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& skill_guild_t_skill_guild::levelupcost() const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.t_skill_guild.levelupcost)
  return _internal_levelupcost();
}
inline void skill_guild_t_skill_guild::set_levelupcost(const std::string& value) {
  _internal_set_levelupcost(value);
  // @@protoc_insertion_point(field_set:pb.skill_guild.t_skill_guild.levelupcost)
}
inline std::string* skill_guild_t_skill_guild::mutable_levelupcost() {
  // @@protoc_insertion_point(field_mutable:pb.skill_guild.t_skill_guild.levelupcost)
  return _internal_mutable_levelupcost();
}
inline const std::string& skill_guild_t_skill_guild::_internal_levelupcost() const {
  return levelupcost_.GetNoArena();
}
inline void skill_guild_t_skill_guild::_internal_set_levelupcost(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  levelupcost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_guild_t_skill_guild::set_levelupcost(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  levelupcost_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_guild.t_skill_guild.levelupcost)
}
inline void skill_guild_t_skill_guild::set_levelupcost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  levelupcost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_guild.t_skill_guild.levelupcost)
}
inline void skill_guild_t_skill_guild::set_levelupcost(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  levelupcost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_guild.t_skill_guild.levelupcost)
}
inline std::string* skill_guild_t_skill_guild::_internal_mutable_levelupcost() {
  _has_bits_[0] |= 0x00000002u;
  return levelupcost_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_guild_t_skill_guild::release_levelupcost() {
  // @@protoc_insertion_point(field_release:pb.skill_guild.t_skill_guild.levelupcost)
  if (!_internal_has_levelupcost()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return levelupcost_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_guild_t_skill_guild::set_allocated_levelupcost(std::string* levelupcost) {
  if (levelupcost != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  levelupcost_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), levelupcost);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_guild.t_skill_guild.levelupcost)
}

// required uint32 unlocklevel = 7;
inline bool skill_guild_t_skill_guild::_internal_has_unlocklevel() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool skill_guild_t_skill_guild::has_unlocklevel() const {
  return _internal_has_unlocklevel();
}
inline void skill_guild_t_skill_guild::clear_unlocklevel() {
  unlocklevel_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_guild_t_skill_guild::_internal_unlocklevel() const {
  return unlocklevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_guild_t_skill_guild::unlocklevel() const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.t_skill_guild.unlocklevel)
  return _internal_unlocklevel();
}
inline void skill_guild_t_skill_guild::_internal_set_unlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  unlocklevel_ = value;
}
inline void skill_guild_t_skill_guild::set_unlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unlocklevel(value);
  // @@protoc_insertion_point(field_set:pb.skill_guild.t_skill_guild.unlocklevel)
}

// required string desc = 8;
inline bool skill_guild_t_skill_guild::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool skill_guild_t_skill_guild::has_desc() const {
  return _internal_has_desc();
}
inline void skill_guild_t_skill_guild::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& skill_guild_t_skill_guild::desc() const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.t_skill_guild.desc)
  return _internal_desc();
}
inline void skill_guild_t_skill_guild::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:pb.skill_guild.t_skill_guild.desc)
}
inline std::string* skill_guild_t_skill_guild::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:pb.skill_guild.t_skill_guild.desc)
  return _internal_mutable_desc();
}
inline const std::string& skill_guild_t_skill_guild::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void skill_guild_t_skill_guild::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_guild_t_skill_guild::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_guild.t_skill_guild.desc)
}
inline void skill_guild_t_skill_guild::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_guild.t_skill_guild.desc)
}
inline void skill_guild_t_skill_guild::set_desc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_guild.t_skill_guild.desc)
}
inline std::string* skill_guild_t_skill_guild::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000004u;
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_guild_t_skill_guild::release_desc() {
  // @@protoc_insertion_point(field_release:pb.skill_guild.t_skill_guild.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return desc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_guild_t_skill_guild::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_guild.t_skill_guild.desc)
}

// required string skillstaus = 9;
inline bool skill_guild_t_skill_guild::_internal_has_skillstaus() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool skill_guild_t_skill_guild::has_skillstaus() const {
  return _internal_has_skillstaus();
}
inline void skill_guild_t_skill_guild::clear_skillstaus() {
  skillstaus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& skill_guild_t_skill_guild::skillstaus() const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.t_skill_guild.skillstaus)
  return _internal_skillstaus();
}
inline void skill_guild_t_skill_guild::set_skillstaus(const std::string& value) {
  _internal_set_skillstaus(value);
  // @@protoc_insertion_point(field_set:pb.skill_guild.t_skill_guild.skillstaus)
}
inline std::string* skill_guild_t_skill_guild::mutable_skillstaus() {
  // @@protoc_insertion_point(field_mutable:pb.skill_guild.t_skill_guild.skillstaus)
  return _internal_mutable_skillstaus();
}
inline const std::string& skill_guild_t_skill_guild::_internal_skillstaus() const {
  return skillstaus_.GetNoArena();
}
inline void skill_guild_t_skill_guild::_internal_set_skillstaus(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  skillstaus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_guild_t_skill_guild::set_skillstaus(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  skillstaus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_guild.t_skill_guild.skillstaus)
}
inline void skill_guild_t_skill_guild::set_skillstaus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  skillstaus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_guild.t_skill_guild.skillstaus)
}
inline void skill_guild_t_skill_guild::set_skillstaus(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  skillstaus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_guild.t_skill_guild.skillstaus)
}
inline std::string* skill_guild_t_skill_guild::_internal_mutable_skillstaus() {
  _has_bits_[0] |= 0x00000008u;
  return skillstaus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_guild_t_skill_guild::release_skillstaus() {
  // @@protoc_insertion_point(field_release:pb.skill_guild.t_skill_guild.skillstaus)
  if (!_internal_has_skillstaus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return skillstaus_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_guild_t_skill_guild::set_allocated_skillstaus(std::string* skillstaus) {
  if (skillstaus != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  skillstaus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skillstaus);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_guild.t_skill_guild.skillstaus)
}

// required string skillicon = 10;
inline bool skill_guild_t_skill_guild::_internal_has_skillicon() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool skill_guild_t_skill_guild::has_skillicon() const {
  return _internal_has_skillicon();
}
inline void skill_guild_t_skill_guild::clear_skillicon() {
  skillicon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& skill_guild_t_skill_guild::skillicon() const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.t_skill_guild.skillicon)
  return _internal_skillicon();
}
inline void skill_guild_t_skill_guild::set_skillicon(const std::string& value) {
  _internal_set_skillicon(value);
  // @@protoc_insertion_point(field_set:pb.skill_guild.t_skill_guild.skillicon)
}
inline std::string* skill_guild_t_skill_guild::mutable_skillicon() {
  // @@protoc_insertion_point(field_mutable:pb.skill_guild.t_skill_guild.skillicon)
  return _internal_mutable_skillicon();
}
inline const std::string& skill_guild_t_skill_guild::_internal_skillicon() const {
  return skillicon_.GetNoArena();
}
inline void skill_guild_t_skill_guild::_internal_set_skillicon(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  skillicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_guild_t_skill_guild::set_skillicon(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  skillicon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_guild.t_skill_guild.skillicon)
}
inline void skill_guild_t_skill_guild::set_skillicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  skillicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_guild.t_skill_guild.skillicon)
}
inline void skill_guild_t_skill_guild::set_skillicon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  skillicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_guild.t_skill_guild.skillicon)
}
inline std::string* skill_guild_t_skill_guild::_internal_mutable_skillicon() {
  _has_bits_[0] |= 0x00000010u;
  return skillicon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_guild_t_skill_guild::release_skillicon() {
  // @@protoc_insertion_point(field_release:pb.skill_guild.t_skill_guild.skillicon)
  if (!_internal_has_skillicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return skillicon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_guild_t_skill_guild::set_allocated_skillicon(std::string* skillicon) {
  if (skillicon != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  skillicon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skillicon);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_guild.t_skill_guild.skillicon)
}

// -------------------------------------------------------------------

// skill_guild

// repeated .pb.skill_guild.t_skill_guild datas = 1;
inline int skill_guild::_internal_datas_size() const {
  return datas_.size();
}
inline int skill_guild::datas_size() const {
  return _internal_datas_size();
}
inline void skill_guild::clear_datas() {
  datas_.Clear();
}
inline ::pb::skill_guild_t_skill_guild* skill_guild::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.skill_guild.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_guild_t_skill_guild >*
skill_guild::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.skill_guild.datas)
  return &datas_;
}
inline const ::pb::skill_guild_t_skill_guild& skill_guild::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::skill_guild_t_skill_guild& skill_guild::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.skill_guild.datas)
  return _internal_datas(index);
}
inline ::pb::skill_guild_t_skill_guild* skill_guild::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::skill_guild_t_skill_guild* skill_guild::add_datas() {
  // @@protoc_insertion_point(field_add:pb.skill_guild.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_guild_t_skill_guild >&
skill_guild::datas() const {
  // @@protoc_insertion_point(field_list:pb.skill_guild.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skill_5fguild_2eproto
