// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skill_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_skill_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_skill_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skill_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_skill_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_skill_5fdata_2eproto;
namespace pb {
class skill_data;
class skill_dataDefaultTypeInternal;
extern skill_dataDefaultTypeInternal _skill_data_default_instance_;
class skill_data_t_skill_lv_config;
class skill_data_t_skill_lv_configDefaultTypeInternal;
extern skill_data_t_skill_lv_configDefaultTypeInternal _skill_data_t_skill_lv_config_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::skill_data* Arena::CreateMaybeMessage<::pb::skill_data>(Arena*);
template<> ::pb::skill_data_t_skill_lv_config* Arena::CreateMaybeMessage<::pb::skill_data_t_skill_lv_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class skill_data_t_skill_lv_config :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.skill_data.t_skill_lv_config) */ {
 public:
  skill_data_t_skill_lv_config();
  virtual ~skill_data_t_skill_lv_config();

  skill_data_t_skill_lv_config(const skill_data_t_skill_lv_config& from);
  skill_data_t_skill_lv_config(skill_data_t_skill_lv_config&& from) noexcept
    : skill_data_t_skill_lv_config() {
    *this = ::std::move(from);
  }

  inline skill_data_t_skill_lv_config& operator=(const skill_data_t_skill_lv_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline skill_data_t_skill_lv_config& operator=(skill_data_t_skill_lv_config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const skill_data_t_skill_lv_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const skill_data_t_skill_lv_config* internal_default_instance() {
    return reinterpret_cast<const skill_data_t_skill_lv_config*>(
               &_skill_data_t_skill_lv_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(skill_data_t_skill_lv_config& a, skill_data_t_skill_lv_config& b) {
    a.Swap(&b);
  }
  inline void Swap(skill_data_t_skill_lv_config* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline skill_data_t_skill_lv_config* New() const final {
    return CreateMaybeMessage<skill_data_t_skill_lv_config>(nullptr);
  }

  skill_data_t_skill_lv_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<skill_data_t_skill_lv_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const skill_data_t_skill_lv_config& from);
  void MergeFrom(const skill_data_t_skill_lv_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(skill_data_t_skill_lv_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.skill_data.t_skill_lv_config";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skill_5fdata_2eproto);
    return ::descriptor_table_skill_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillnameFieldNumber = 4,
    kHeroFieldNumber = 5,
    kUnlockevolutionFieldNumber = 7,
    kDescFieldNumber = 17,
    kSkillstatusFieldNumber = 18,
    kSkilliconFieldNumber = 20,
    kSkillRangeFieldNumber = 25,
    kExtskillFieldNumber = 26,
    kLevelupcostFieldNumber = 37,
    kTbxidFieldNumber = 1,
    kIdFieldNumber = 2,
    kSkillidFieldNumber = 3,
    kUnlocklevelFieldNumber = 6,
    kDtimeFieldNumber = 8,
    kMaxoverlaytimesFieldNumber = 9,
    kCanbePassiveFieldNumber = 10,
    kGoodFieldNumber = 11,
    kReleasetypeFieldNumber = 12,
    kChanttimeFieldNumber = 13,
    kUsetypeFieldNumber = 14,
    kLevelFieldNumber = 16,
    kMagiccostFieldNumber = 19,
    kBelongcareerFieldNumber = 21,
    kCareerunlocklevelFieldNumber = 22,
    kCreateproficiencyFieldNumber = 23,
    kCanbeBreakattackFieldNumber = 15,
    kNeedTargetFieldNumber = 24,
    kMoveBreakCombFieldNumber = 28,
    kSkillBreakCombFieldNumber = 29,
    kPublicCDFieldNumber = 27,
    kMultiskillFieldNumber = 30,
    kSearchTypeFieldNumber = 31,
    kCastBeyondTypeFieldNumber = 32,
    kSearchRangeFieldNumber = 33,
    kRelyonStateFieldNumber = 34,
    kLevelupTypeFieldNumber = 35,
    kNextskillidFieldNumber = 36,
  };
  // required string skillname = 4;
  bool has_skillname() const;
  private:
  bool _internal_has_skillname() const;
  public:
  void clear_skillname();
  const std::string& skillname() const;
  void set_skillname(const std::string& value);
  void set_skillname(std::string&& value);
  void set_skillname(const char* value);
  void set_skillname(const char* value, size_t size);
  std::string* mutable_skillname();
  std::string* release_skillname();
  void set_allocated_skillname(std::string* skillname);
  private:
  const std::string& _internal_skillname() const;
  void _internal_set_skillname(const std::string& value);
  std::string* _internal_mutable_skillname();
  public:

  // required string hero = 5;
  bool has_hero() const;
  private:
  bool _internal_has_hero() const;
  public:
  void clear_hero();
  const std::string& hero() const;
  void set_hero(const std::string& value);
  void set_hero(std::string&& value);
  void set_hero(const char* value);
  void set_hero(const char* value, size_t size);
  std::string* mutable_hero();
  std::string* release_hero();
  void set_allocated_hero(std::string* hero);
  private:
  const std::string& _internal_hero() const;
  void _internal_set_hero(const std::string& value);
  std::string* _internal_mutable_hero();
  public:

  // required string unlockevolution = 7;
  bool has_unlockevolution() const;
  private:
  bool _internal_has_unlockevolution() const;
  public:
  void clear_unlockevolution();
  const std::string& unlockevolution() const;
  void set_unlockevolution(const std::string& value);
  void set_unlockevolution(std::string&& value);
  void set_unlockevolution(const char* value);
  void set_unlockevolution(const char* value, size_t size);
  std::string* mutable_unlockevolution();
  std::string* release_unlockevolution();
  void set_allocated_unlockevolution(std::string* unlockevolution);
  private:
  const std::string& _internal_unlockevolution() const;
  void _internal_set_unlockevolution(const std::string& value);
  std::string* _internal_mutable_unlockevolution();
  public:

  // required string desc = 17;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // required string skillstatus = 18;
  bool has_skillstatus() const;
  private:
  bool _internal_has_skillstatus() const;
  public:
  void clear_skillstatus();
  const std::string& skillstatus() const;
  void set_skillstatus(const std::string& value);
  void set_skillstatus(std::string&& value);
  void set_skillstatus(const char* value);
  void set_skillstatus(const char* value, size_t size);
  std::string* mutable_skillstatus();
  std::string* release_skillstatus();
  void set_allocated_skillstatus(std::string* skillstatus);
  private:
  const std::string& _internal_skillstatus() const;
  void _internal_set_skillstatus(const std::string& value);
  std::string* _internal_mutable_skillstatus();
  public:

  // required string skillicon = 20;
  bool has_skillicon() const;
  private:
  bool _internal_has_skillicon() const;
  public:
  void clear_skillicon();
  const std::string& skillicon() const;
  void set_skillicon(const std::string& value);
  void set_skillicon(std::string&& value);
  void set_skillicon(const char* value);
  void set_skillicon(const char* value, size_t size);
  std::string* mutable_skillicon();
  std::string* release_skillicon();
  void set_allocated_skillicon(std::string* skillicon);
  private:
  const std::string& _internal_skillicon() const;
  void _internal_set_skillicon(const std::string& value);
  std::string* _internal_mutable_skillicon();
  public:

  // required string SkillRange = 25;
  bool has_skillrange() const;
  private:
  bool _internal_has_skillrange() const;
  public:
  void clear_skillrange();
  const std::string& skillrange() const;
  void set_skillrange(const std::string& value);
  void set_skillrange(std::string&& value);
  void set_skillrange(const char* value);
  void set_skillrange(const char* value, size_t size);
  std::string* mutable_skillrange();
  std::string* release_skillrange();
  void set_allocated_skillrange(std::string* skillrange);
  private:
  const std::string& _internal_skillrange() const;
  void _internal_set_skillrange(const std::string& value);
  std::string* _internal_mutable_skillrange();
  public:

  // required string extskill = 26;
  bool has_extskill() const;
  private:
  bool _internal_has_extskill() const;
  public:
  void clear_extskill();
  const std::string& extskill() const;
  void set_extskill(const std::string& value);
  void set_extskill(std::string&& value);
  void set_extskill(const char* value);
  void set_extskill(const char* value, size_t size);
  std::string* mutable_extskill();
  std::string* release_extskill();
  void set_allocated_extskill(std::string* extskill);
  private:
  const std::string& _internal_extskill() const;
  void _internal_set_extskill(const std::string& value);
  std::string* _internal_mutable_extskill();
  public:

  // required string levelupcost = 37;
  bool has_levelupcost() const;
  private:
  bool _internal_has_levelupcost() const;
  public:
  void clear_levelupcost();
  const std::string& levelupcost() const;
  void set_levelupcost(const std::string& value);
  void set_levelupcost(std::string&& value);
  void set_levelupcost(const char* value);
  void set_levelupcost(const char* value, size_t size);
  std::string* mutable_levelupcost();
  std::string* release_levelupcost();
  void set_allocated_levelupcost(std::string* levelupcost);
  private:
  const std::string& _internal_levelupcost() const;
  void _internal_set_levelupcost(const std::string& value);
  std::string* _internal_mutable_levelupcost();
  public:

  // required uint64 tbxid = 1 [default = 0];
  bool has_tbxid() const;
  private:
  bool _internal_has_tbxid() const;
  public:
  void clear_tbxid();
  ::PROTOBUF_NAMESPACE_ID::uint64 tbxid() const;
  void set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tbxid() const;
  void _internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 id = 2 [default = 0];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 skillid = 3;
  bool has_skillid() const;
  private:
  bool _internal_has_skillid() const;
  public:
  void clear_skillid();
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid() const;
  void set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skillid() const;
  void _internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 unlocklevel = 6;
  bool has_unlocklevel() const;
  private:
  bool _internal_has_unlocklevel() const;
  public:
  void clear_unlocklevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 unlocklevel() const;
  void set_unlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unlocklevel() const;
  void _internal_set_unlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 dtime = 8;
  bool has_dtime() const;
  private:
  bool _internal_has_dtime() const;
  public:
  void clear_dtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 dtime() const;
  void set_dtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dtime() const;
  void _internal_set_dtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 maxoverlaytimes = 9;
  bool has_maxoverlaytimes() const;
  private:
  bool _internal_has_maxoverlaytimes() const;
  public:
  void clear_maxoverlaytimes();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxoverlaytimes() const;
  void set_maxoverlaytimes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxoverlaytimes() const;
  void _internal_set_maxoverlaytimes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 canbe_passive = 10;
  bool has_canbe_passive() const;
  private:
  bool _internal_has_canbe_passive() const;
  public:
  void clear_canbe_passive();
  ::PROTOBUF_NAMESPACE_ID::uint32 canbe_passive() const;
  void set_canbe_passive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_canbe_passive() const;
  void _internal_set_canbe_passive(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 good = 11;
  bool has_good() const;
  private:
  bool _internal_has_good() const;
  public:
  void clear_good();
  ::PROTOBUF_NAMESPACE_ID::uint32 good() const;
  void set_good(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_good() const;
  void _internal_set_good(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 releasetype = 12;
  bool has_releasetype() const;
  private:
  bool _internal_has_releasetype() const;
  public:
  void clear_releasetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 releasetype() const;
  void set_releasetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_releasetype() const;
  void _internal_set_releasetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 chanttime = 13;
  bool has_chanttime() const;
  private:
  bool _internal_has_chanttime() const;
  public:
  void clear_chanttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 chanttime() const;
  void set_chanttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_chanttime() const;
  void _internal_set_chanttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 usetype = 14;
  bool has_usetype() const;
  private:
  bool _internal_has_usetype() const;
  public:
  void clear_usetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 usetype() const;
  void set_usetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usetype() const;
  void _internal_set_usetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 level = 16;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 magiccost = 19;
  bool has_magiccost() const;
  private:
  bool _internal_has_magiccost() const;
  public:
  void clear_magiccost();
  ::PROTOBUF_NAMESPACE_ID::uint32 magiccost() const;
  void set_magiccost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_magiccost() const;
  void _internal_set_magiccost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 belongcareer = 21;
  bool has_belongcareer() const;
  private:
  bool _internal_has_belongcareer() const;
  public:
  void clear_belongcareer();
  ::PROTOBUF_NAMESPACE_ID::uint32 belongcareer() const;
  void set_belongcareer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_belongcareer() const;
  void _internal_set_belongcareer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 careerunlocklevel = 22;
  bool has_careerunlocklevel() const;
  private:
  bool _internal_has_careerunlocklevel() const;
  public:
  void clear_careerunlocklevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 careerunlocklevel() const;
  void set_careerunlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_careerunlocklevel() const;
  void _internal_set_careerunlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 createproficiency = 23;
  bool has_createproficiency() const;
  private:
  bool _internal_has_createproficiency() const;
  public:
  void clear_createproficiency();
  ::PROTOBUF_NAMESPACE_ID::uint32 createproficiency() const;
  void set_createproficiency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_createproficiency() const;
  void _internal_set_createproficiency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool canbe_breakattack = 15;
  bool has_canbe_breakattack() const;
  private:
  bool _internal_has_canbe_breakattack() const;
  public:
  void clear_canbe_breakattack();
  bool canbe_breakattack() const;
  void set_canbe_breakattack(bool value);
  private:
  bool _internal_canbe_breakattack() const;
  void _internal_set_canbe_breakattack(bool value);
  public:

  // required bool NeedTarget = 24;
  bool has_needtarget() const;
  private:
  bool _internal_has_needtarget() const;
  public:
  void clear_needtarget();
  bool needtarget() const;
  void set_needtarget(bool value);
  private:
  bool _internal_needtarget() const;
  void _internal_set_needtarget(bool value);
  public:

  // required bool MoveBreakComb = 28;
  bool has_movebreakcomb() const;
  private:
  bool _internal_has_movebreakcomb() const;
  public:
  void clear_movebreakcomb();
  bool movebreakcomb() const;
  void set_movebreakcomb(bool value);
  private:
  bool _internal_movebreakcomb() const;
  void _internal_set_movebreakcomb(bool value);
  public:

  // required bool SkillBreakComb = 29;
  bool has_skillbreakcomb() const;
  private:
  bool _internal_has_skillbreakcomb() const;
  public:
  void clear_skillbreakcomb();
  bool skillbreakcomb() const;
  void set_skillbreakcomb(bool value);
  private:
  bool _internal_skillbreakcomb() const;
  void _internal_set_skillbreakcomb(bool value);
  public:

  // required uint32 publicCD = 27;
  bool has_publiccd() const;
  private:
  bool _internal_has_publiccd() const;
  public:
  void clear_publiccd();
  ::PROTOBUF_NAMESPACE_ID::uint32 publiccd() const;
  void set_publiccd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_publiccd() const;
  void _internal_set_publiccd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required bool multiskill = 30;
  bool has_multiskill() const;
  private:
  bool _internal_has_multiskill() const;
  public:
  void clear_multiskill();
  bool multiskill() const;
  void set_multiskill(bool value);
  private:
  bool _internal_multiskill() const;
  void _internal_set_multiskill(bool value);
  public:

  // required uint32 SearchType = 31;
  bool has_searchtype() const;
  private:
  bool _internal_has_searchtype() const;
  public:
  void clear_searchtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 searchtype() const;
  void set_searchtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_searchtype() const;
  void _internal_set_searchtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 CastBeyondType = 32;
  bool has_castbeyondtype() const;
  private:
  bool _internal_has_castbeyondtype() const;
  public:
  void clear_castbeyondtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 castbeyondtype() const;
  void set_castbeyondtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_castbeyondtype() const;
  void _internal_set_castbeyondtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 SearchRange = 33;
  bool has_searchrange() const;
  private:
  bool _internal_has_searchrange() const;
  public:
  void clear_searchrange();
  ::PROTOBUF_NAMESPACE_ID::uint32 searchrange() const;
  void set_searchrange(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_searchrange() const;
  void _internal_set_searchrange(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 relyon_state = 34;
  bool has_relyon_state() const;
  private:
  bool _internal_has_relyon_state() const;
  public:
  void clear_relyon_state();
  ::PROTOBUF_NAMESPACE_ID::uint32 relyon_state() const;
  void set_relyon_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_relyon_state() const;
  void _internal_set_relyon_state(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 levelup_type = 35;
  bool has_levelup_type() const;
  private:
  bool _internal_has_levelup_type() const;
  public:
  void clear_levelup_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 levelup_type() const;
  void set_levelup_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_levelup_type() const;
  void _internal_set_levelup_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nextskillid = 36;
  bool has_nextskillid() const;
  private:
  bool _internal_has_nextskillid() const;
  public:
  void clear_nextskillid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nextskillid() const;
  void set_nextskillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nextskillid() const;
  void _internal_set_nextskillid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.skill_data.t_skill_lv_config)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skillname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hero_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unlockevolution_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skillstatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skillicon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skillrange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extskill_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr levelupcost_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tbxid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 skillid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unlocklevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxoverlaytimes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 canbe_passive_;
  ::PROTOBUF_NAMESPACE_ID::uint32 good_;
  ::PROTOBUF_NAMESPACE_ID::uint32 releasetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 chanttime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 magiccost_;
  ::PROTOBUF_NAMESPACE_ID::uint32 belongcareer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 careerunlocklevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 createproficiency_;
  bool canbe_breakattack_;
  bool needtarget_;
  bool movebreakcomb_;
  bool skillbreakcomb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 publiccd_;
  bool multiskill_;
  ::PROTOBUF_NAMESPACE_ID::uint32 searchtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 castbeyondtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 searchrange_;
  ::PROTOBUF_NAMESPACE_ID::uint32 relyon_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 levelup_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nextskillid_;
  friend struct ::TableStruct_skill_5fdata_2eproto;
};
// -------------------------------------------------------------------

class skill_data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.skill_data) */ {
 public:
  skill_data();
  virtual ~skill_data();

  skill_data(const skill_data& from);
  skill_data(skill_data&& from) noexcept
    : skill_data() {
    *this = ::std::move(from);
  }

  inline skill_data& operator=(const skill_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline skill_data& operator=(skill_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const skill_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const skill_data* internal_default_instance() {
    return reinterpret_cast<const skill_data*>(
               &_skill_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(skill_data& a, skill_data& b) {
    a.Swap(&b);
  }
  inline void Swap(skill_data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline skill_data* New() const final {
    return CreateMaybeMessage<skill_data>(nullptr);
  }

  skill_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<skill_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const skill_data& from);
  void MergeFrom(const skill_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(skill_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.skill_data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_skill_5fdata_2eproto);
    return ::descriptor_table_skill_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef skill_data_t_skill_lv_config t_skill_lv_config;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasFieldNumber = 1,
  };
  // repeated .pb.skill_data.t_skill_lv_config datas = 1;
  int datas_size() const;
  private:
  int _internal_datas_size() const;
  public:
  void clear_datas();
  ::pb::skill_data_t_skill_lv_config* mutable_datas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_data_t_skill_lv_config >*
      mutable_datas();
  private:
  const ::pb::skill_data_t_skill_lv_config& _internal_datas(int index) const;
  ::pb::skill_data_t_skill_lv_config* _internal_add_datas();
  public:
  const ::pb::skill_data_t_skill_lv_config& datas(int index) const;
  ::pb::skill_data_t_skill_lv_config* add_datas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_data_t_skill_lv_config >&
      datas() const;

  // @@protoc_insertion_point(class_scope:pb.skill_data)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_data_t_skill_lv_config > datas_;
  friend struct ::TableStruct_skill_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// skill_data_t_skill_lv_config

// required uint64 tbxid = 1 [default = 0];
inline bool skill_data_t_skill_lv_config::_internal_has_tbxid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_tbxid() const {
  return _internal_has_tbxid();
}
inline void skill_data_t_skill_lv_config::clear_tbxid() {
  tbxid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 skill_data_t_skill_lv_config::_internal_tbxid() const {
  return tbxid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 skill_data_t_skill_lv_config::tbxid() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.tbxid)
  return _internal_tbxid();
}
inline void skill_data_t_skill_lv_config::_internal_set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  tbxid_ = value;
}
inline void skill_data_t_skill_lv_config::set_tbxid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tbxid(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.tbxid)
}

// required uint64 id = 2 [default = 0];
inline bool skill_data_t_skill_lv_config::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_id() const {
  return _internal_has_id();
}
inline void skill_data_t_skill_lv_config::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 skill_data_t_skill_lv_config::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 skill_data_t_skill_lv_config::id() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.id)
  return _internal_id();
}
inline void skill_data_t_skill_lv_config::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  id_ = value;
}
inline void skill_data_t_skill_lv_config::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.id)
}

// required uint32 skillid = 3;
inline bool skill_data_t_skill_lv_config::_internal_has_skillid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_skillid() const {
  return _internal_has_skillid();
}
inline void skill_data_t_skill_lv_config::clear_skillid() {
  skillid_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_skillid() const {
  return skillid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::skillid() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.skillid)
  return _internal_skillid();
}
inline void skill_data_t_skill_lv_config::_internal_set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  skillid_ = value;
}
inline void skill_data_t_skill_lv_config::set_skillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.skillid)
}

// required string skillname = 4;
inline bool skill_data_t_skill_lv_config::_internal_has_skillname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_skillname() const {
  return _internal_has_skillname();
}
inline void skill_data_t_skill_lv_config::clear_skillname() {
  skillname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& skill_data_t_skill_lv_config::skillname() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.skillname)
  return _internal_skillname();
}
inline void skill_data_t_skill_lv_config::set_skillname(const std::string& value) {
  _internal_set_skillname(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.skillname)
}
inline std::string* skill_data_t_skill_lv_config::mutable_skillname() {
  // @@protoc_insertion_point(field_mutable:pb.skill_data.t_skill_lv_config.skillname)
  return _internal_mutable_skillname();
}
inline const std::string& skill_data_t_skill_lv_config::_internal_skillname() const {
  return skillname_.GetNoArena();
}
inline void skill_data_t_skill_lv_config::_internal_set_skillname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  skillname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_data_t_skill_lv_config::set_skillname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  skillname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_data.t_skill_lv_config.skillname)
}
inline void skill_data_t_skill_lv_config::set_skillname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  skillname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_data.t_skill_lv_config.skillname)
}
inline void skill_data_t_skill_lv_config::set_skillname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  skillname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_data.t_skill_lv_config.skillname)
}
inline std::string* skill_data_t_skill_lv_config::_internal_mutable_skillname() {
  _has_bits_[0] |= 0x00000001u;
  return skillname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_data_t_skill_lv_config::release_skillname() {
  // @@protoc_insertion_point(field_release:pb.skill_data.t_skill_lv_config.skillname)
  if (!_internal_has_skillname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return skillname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_data_t_skill_lv_config::set_allocated_skillname(std::string* skillname) {
  if (skillname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  skillname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skillname);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_data.t_skill_lv_config.skillname)
}

// required string hero = 5;
inline bool skill_data_t_skill_lv_config::_internal_has_hero() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_hero() const {
  return _internal_has_hero();
}
inline void skill_data_t_skill_lv_config::clear_hero() {
  hero_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& skill_data_t_skill_lv_config::hero() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.hero)
  return _internal_hero();
}
inline void skill_data_t_skill_lv_config::set_hero(const std::string& value) {
  _internal_set_hero(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.hero)
}
inline std::string* skill_data_t_skill_lv_config::mutable_hero() {
  // @@protoc_insertion_point(field_mutable:pb.skill_data.t_skill_lv_config.hero)
  return _internal_mutable_hero();
}
inline const std::string& skill_data_t_skill_lv_config::_internal_hero() const {
  return hero_.GetNoArena();
}
inline void skill_data_t_skill_lv_config::_internal_set_hero(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hero_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_data_t_skill_lv_config::set_hero(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hero_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_data.t_skill_lv_config.hero)
}
inline void skill_data_t_skill_lv_config::set_hero(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hero_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_data.t_skill_lv_config.hero)
}
inline void skill_data_t_skill_lv_config::set_hero(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hero_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_data.t_skill_lv_config.hero)
}
inline std::string* skill_data_t_skill_lv_config::_internal_mutable_hero() {
  _has_bits_[0] |= 0x00000002u;
  return hero_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_data_t_skill_lv_config::release_hero() {
  // @@protoc_insertion_point(field_release:pb.skill_data.t_skill_lv_config.hero)
  if (!_internal_has_hero()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hero_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_data_t_skill_lv_config::set_allocated_hero(std::string* hero) {
  if (hero != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hero_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hero);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_data.t_skill_lv_config.hero)
}

// required uint32 unlocklevel = 6;
inline bool skill_data_t_skill_lv_config::_internal_has_unlocklevel() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_unlocklevel() const {
  return _internal_has_unlocklevel();
}
inline void skill_data_t_skill_lv_config::clear_unlocklevel() {
  unlocklevel_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_unlocklevel() const {
  return unlocklevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::unlocklevel() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.unlocklevel)
  return _internal_unlocklevel();
}
inline void skill_data_t_skill_lv_config::_internal_set_unlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  unlocklevel_ = value;
}
inline void skill_data_t_skill_lv_config::set_unlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unlocklevel(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.unlocklevel)
}

// required string unlockevolution = 7;
inline bool skill_data_t_skill_lv_config::_internal_has_unlockevolution() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_unlockevolution() const {
  return _internal_has_unlockevolution();
}
inline void skill_data_t_skill_lv_config::clear_unlockevolution() {
  unlockevolution_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& skill_data_t_skill_lv_config::unlockevolution() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.unlockevolution)
  return _internal_unlockevolution();
}
inline void skill_data_t_skill_lv_config::set_unlockevolution(const std::string& value) {
  _internal_set_unlockevolution(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.unlockevolution)
}
inline std::string* skill_data_t_skill_lv_config::mutable_unlockevolution() {
  // @@protoc_insertion_point(field_mutable:pb.skill_data.t_skill_lv_config.unlockevolution)
  return _internal_mutable_unlockevolution();
}
inline const std::string& skill_data_t_skill_lv_config::_internal_unlockevolution() const {
  return unlockevolution_.GetNoArena();
}
inline void skill_data_t_skill_lv_config::_internal_set_unlockevolution(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  unlockevolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_data_t_skill_lv_config::set_unlockevolution(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  unlockevolution_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_data.t_skill_lv_config.unlockevolution)
}
inline void skill_data_t_skill_lv_config::set_unlockevolution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  unlockevolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_data.t_skill_lv_config.unlockevolution)
}
inline void skill_data_t_skill_lv_config::set_unlockevolution(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  unlockevolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_data.t_skill_lv_config.unlockevolution)
}
inline std::string* skill_data_t_skill_lv_config::_internal_mutable_unlockevolution() {
  _has_bits_[0] |= 0x00000004u;
  return unlockevolution_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_data_t_skill_lv_config::release_unlockevolution() {
  // @@protoc_insertion_point(field_release:pb.skill_data.t_skill_lv_config.unlockevolution)
  if (!_internal_has_unlockevolution()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return unlockevolution_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_data_t_skill_lv_config::set_allocated_unlockevolution(std::string* unlockevolution) {
  if (unlockevolution != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  unlockevolution_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unlockevolution);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_data.t_skill_lv_config.unlockevolution)
}

// required uint32 dtime = 8;
inline bool skill_data_t_skill_lv_config::_internal_has_dtime() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_dtime() const {
  return _internal_has_dtime();
}
inline void skill_data_t_skill_lv_config::clear_dtime() {
  dtime_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_dtime() const {
  return dtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::dtime() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.dtime)
  return _internal_dtime();
}
inline void skill_data_t_skill_lv_config::_internal_set_dtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  dtime_ = value;
}
inline void skill_data_t_skill_lv_config::set_dtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dtime(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.dtime)
}

// required uint32 maxoverlaytimes = 9;
inline bool skill_data_t_skill_lv_config::_internal_has_maxoverlaytimes() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_maxoverlaytimes() const {
  return _internal_has_maxoverlaytimes();
}
inline void skill_data_t_skill_lv_config::clear_maxoverlaytimes() {
  maxoverlaytimes_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_maxoverlaytimes() const {
  return maxoverlaytimes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::maxoverlaytimes() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.maxoverlaytimes)
  return _internal_maxoverlaytimes();
}
inline void skill_data_t_skill_lv_config::_internal_set_maxoverlaytimes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  maxoverlaytimes_ = value;
}
inline void skill_data_t_skill_lv_config::set_maxoverlaytimes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxoverlaytimes(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.maxoverlaytimes)
}

// required uint32 canbe_passive = 10;
inline bool skill_data_t_skill_lv_config::_internal_has_canbe_passive() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_canbe_passive() const {
  return _internal_has_canbe_passive();
}
inline void skill_data_t_skill_lv_config::clear_canbe_passive() {
  canbe_passive_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_canbe_passive() const {
  return canbe_passive_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::canbe_passive() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.canbe_passive)
  return _internal_canbe_passive();
}
inline void skill_data_t_skill_lv_config::_internal_set_canbe_passive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  canbe_passive_ = value;
}
inline void skill_data_t_skill_lv_config::set_canbe_passive(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_canbe_passive(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.canbe_passive)
}

// required uint32 good = 11;
inline bool skill_data_t_skill_lv_config::_internal_has_good() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_good() const {
  return _internal_has_good();
}
inline void skill_data_t_skill_lv_config::clear_good() {
  good_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_good() const {
  return good_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::good() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.good)
  return _internal_good();
}
inline void skill_data_t_skill_lv_config::_internal_set_good(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  good_ = value;
}
inline void skill_data_t_skill_lv_config::set_good(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_good(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.good)
}

// required uint32 releasetype = 12;
inline bool skill_data_t_skill_lv_config::_internal_has_releasetype() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_releasetype() const {
  return _internal_has_releasetype();
}
inline void skill_data_t_skill_lv_config::clear_releasetype() {
  releasetype_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_releasetype() const {
  return releasetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::releasetype() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.releasetype)
  return _internal_releasetype();
}
inline void skill_data_t_skill_lv_config::_internal_set_releasetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  releasetype_ = value;
}
inline void skill_data_t_skill_lv_config::set_releasetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_releasetype(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.releasetype)
}

// required uint32 chanttime = 13;
inline bool skill_data_t_skill_lv_config::_internal_has_chanttime() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_chanttime() const {
  return _internal_has_chanttime();
}
inline void skill_data_t_skill_lv_config::clear_chanttime() {
  chanttime_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_chanttime() const {
  return chanttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::chanttime() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.chanttime)
  return _internal_chanttime();
}
inline void skill_data_t_skill_lv_config::_internal_set_chanttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  chanttime_ = value;
}
inline void skill_data_t_skill_lv_config::set_chanttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_chanttime(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.chanttime)
}

// required uint32 usetype = 14;
inline bool skill_data_t_skill_lv_config::_internal_has_usetype() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_usetype() const {
  return _internal_has_usetype();
}
inline void skill_data_t_skill_lv_config::clear_usetype() {
  usetype_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_usetype() const {
  return usetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::usetype() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.usetype)
  return _internal_usetype();
}
inline void skill_data_t_skill_lv_config::_internal_set_usetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  usetype_ = value;
}
inline void skill_data_t_skill_lv_config::set_usetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usetype(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.usetype)
}

// required bool canbe_breakattack = 15;
inline bool skill_data_t_skill_lv_config::_internal_has_canbe_breakattack() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_canbe_breakattack() const {
  return _internal_has_canbe_breakattack();
}
inline void skill_data_t_skill_lv_config::clear_canbe_breakattack() {
  canbe_breakattack_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool skill_data_t_skill_lv_config::_internal_canbe_breakattack() const {
  return canbe_breakattack_;
}
inline bool skill_data_t_skill_lv_config::canbe_breakattack() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.canbe_breakattack)
  return _internal_canbe_breakattack();
}
inline void skill_data_t_skill_lv_config::_internal_set_canbe_breakattack(bool value) {
  _has_bits_[0] |= 0x02000000u;
  canbe_breakattack_ = value;
}
inline void skill_data_t_skill_lv_config::set_canbe_breakattack(bool value) {
  _internal_set_canbe_breakattack(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.canbe_breakattack)
}

// required uint32 level = 16;
inline bool skill_data_t_skill_lv_config::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_level() const {
  return _internal_has_level();
}
inline void skill_data_t_skill_lv_config::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::level() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.level)
  return _internal_level();
}
inline void skill_data_t_skill_lv_config::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  level_ = value;
}
inline void skill_data_t_skill_lv_config::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.level)
}

// required string desc = 17;
inline bool skill_data_t_skill_lv_config::_internal_has_desc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_desc() const {
  return _internal_has_desc();
}
inline void skill_data_t_skill_lv_config::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& skill_data_t_skill_lv_config::desc() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.desc)
  return _internal_desc();
}
inline void skill_data_t_skill_lv_config::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.desc)
}
inline std::string* skill_data_t_skill_lv_config::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:pb.skill_data.t_skill_lv_config.desc)
  return _internal_mutable_desc();
}
inline const std::string& skill_data_t_skill_lv_config::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void skill_data_t_skill_lv_config::_internal_set_desc(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_data_t_skill_lv_config::set_desc(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_data.t_skill_lv_config.desc)
}
inline void skill_data_t_skill_lv_config::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_data.t_skill_lv_config.desc)
}
inline void skill_data_t_skill_lv_config::set_desc(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_data.t_skill_lv_config.desc)
}
inline std::string* skill_data_t_skill_lv_config::_internal_mutable_desc() {
  _has_bits_[0] |= 0x00000008u;
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_data_t_skill_lv_config::release_desc() {
  // @@protoc_insertion_point(field_release:pb.skill_data.t_skill_lv_config.desc)
  if (!_internal_has_desc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return desc_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_data_t_skill_lv_config::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_data.t_skill_lv_config.desc)
}

// required string skillstatus = 18;
inline bool skill_data_t_skill_lv_config::_internal_has_skillstatus() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_skillstatus() const {
  return _internal_has_skillstatus();
}
inline void skill_data_t_skill_lv_config::clear_skillstatus() {
  skillstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& skill_data_t_skill_lv_config::skillstatus() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.skillstatus)
  return _internal_skillstatus();
}
inline void skill_data_t_skill_lv_config::set_skillstatus(const std::string& value) {
  _internal_set_skillstatus(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.skillstatus)
}
inline std::string* skill_data_t_skill_lv_config::mutable_skillstatus() {
  // @@protoc_insertion_point(field_mutable:pb.skill_data.t_skill_lv_config.skillstatus)
  return _internal_mutable_skillstatus();
}
inline const std::string& skill_data_t_skill_lv_config::_internal_skillstatus() const {
  return skillstatus_.GetNoArena();
}
inline void skill_data_t_skill_lv_config::_internal_set_skillstatus(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  skillstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_data_t_skill_lv_config::set_skillstatus(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  skillstatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_data.t_skill_lv_config.skillstatus)
}
inline void skill_data_t_skill_lv_config::set_skillstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  skillstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_data.t_skill_lv_config.skillstatus)
}
inline void skill_data_t_skill_lv_config::set_skillstatus(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  skillstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_data.t_skill_lv_config.skillstatus)
}
inline std::string* skill_data_t_skill_lv_config::_internal_mutable_skillstatus() {
  _has_bits_[0] |= 0x00000010u;
  return skillstatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_data_t_skill_lv_config::release_skillstatus() {
  // @@protoc_insertion_point(field_release:pb.skill_data.t_skill_lv_config.skillstatus)
  if (!_internal_has_skillstatus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return skillstatus_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_data_t_skill_lv_config::set_allocated_skillstatus(std::string* skillstatus) {
  if (skillstatus != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  skillstatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skillstatus);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_data.t_skill_lv_config.skillstatus)
}

// required uint32 magiccost = 19;
inline bool skill_data_t_skill_lv_config::_internal_has_magiccost() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_magiccost() const {
  return _internal_has_magiccost();
}
inline void skill_data_t_skill_lv_config::clear_magiccost() {
  magiccost_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_magiccost() const {
  return magiccost_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::magiccost() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.magiccost)
  return _internal_magiccost();
}
inline void skill_data_t_skill_lv_config::_internal_set_magiccost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  magiccost_ = value;
}
inline void skill_data_t_skill_lv_config::set_magiccost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_magiccost(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.magiccost)
}

// required string skillicon = 20;
inline bool skill_data_t_skill_lv_config::_internal_has_skillicon() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_skillicon() const {
  return _internal_has_skillicon();
}
inline void skill_data_t_skill_lv_config::clear_skillicon() {
  skillicon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& skill_data_t_skill_lv_config::skillicon() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.skillicon)
  return _internal_skillicon();
}
inline void skill_data_t_skill_lv_config::set_skillicon(const std::string& value) {
  _internal_set_skillicon(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.skillicon)
}
inline std::string* skill_data_t_skill_lv_config::mutable_skillicon() {
  // @@protoc_insertion_point(field_mutable:pb.skill_data.t_skill_lv_config.skillicon)
  return _internal_mutable_skillicon();
}
inline const std::string& skill_data_t_skill_lv_config::_internal_skillicon() const {
  return skillicon_.GetNoArena();
}
inline void skill_data_t_skill_lv_config::_internal_set_skillicon(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  skillicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_data_t_skill_lv_config::set_skillicon(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  skillicon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_data.t_skill_lv_config.skillicon)
}
inline void skill_data_t_skill_lv_config::set_skillicon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  skillicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_data.t_skill_lv_config.skillicon)
}
inline void skill_data_t_skill_lv_config::set_skillicon(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  skillicon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_data.t_skill_lv_config.skillicon)
}
inline std::string* skill_data_t_skill_lv_config::_internal_mutable_skillicon() {
  _has_bits_[0] |= 0x00000020u;
  return skillicon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_data_t_skill_lv_config::release_skillicon() {
  // @@protoc_insertion_point(field_release:pb.skill_data.t_skill_lv_config.skillicon)
  if (!_internal_has_skillicon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return skillicon_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_data_t_skill_lv_config::set_allocated_skillicon(std::string* skillicon) {
  if (skillicon != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  skillicon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skillicon);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_data.t_skill_lv_config.skillicon)
}

// required uint32 belongcareer = 21;
inline bool skill_data_t_skill_lv_config::_internal_has_belongcareer() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_belongcareer() const {
  return _internal_has_belongcareer();
}
inline void skill_data_t_skill_lv_config::clear_belongcareer() {
  belongcareer_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_belongcareer() const {
  return belongcareer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::belongcareer() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.belongcareer)
  return _internal_belongcareer();
}
inline void skill_data_t_skill_lv_config::_internal_set_belongcareer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  belongcareer_ = value;
}
inline void skill_data_t_skill_lv_config::set_belongcareer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_belongcareer(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.belongcareer)
}

// required uint32 careerunlocklevel = 22;
inline bool skill_data_t_skill_lv_config::_internal_has_careerunlocklevel() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_careerunlocklevel() const {
  return _internal_has_careerunlocklevel();
}
inline void skill_data_t_skill_lv_config::clear_careerunlocklevel() {
  careerunlocklevel_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_careerunlocklevel() const {
  return careerunlocklevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::careerunlocklevel() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.careerunlocklevel)
  return _internal_careerunlocklevel();
}
inline void skill_data_t_skill_lv_config::_internal_set_careerunlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  careerunlocklevel_ = value;
}
inline void skill_data_t_skill_lv_config::set_careerunlocklevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_careerunlocklevel(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.careerunlocklevel)
}

// required uint32 createproficiency = 23;
inline bool skill_data_t_skill_lv_config::_internal_has_createproficiency() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_createproficiency() const {
  return _internal_has_createproficiency();
}
inline void skill_data_t_skill_lv_config::clear_createproficiency() {
  createproficiency_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_createproficiency() const {
  return createproficiency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::createproficiency() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.createproficiency)
  return _internal_createproficiency();
}
inline void skill_data_t_skill_lv_config::_internal_set_createproficiency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  createproficiency_ = value;
}
inline void skill_data_t_skill_lv_config::set_createproficiency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_createproficiency(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.createproficiency)
}

// required bool NeedTarget = 24;
inline bool skill_data_t_skill_lv_config::_internal_has_needtarget() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_needtarget() const {
  return _internal_has_needtarget();
}
inline void skill_data_t_skill_lv_config::clear_needtarget() {
  needtarget_ = false;
  _has_bits_[0] &= ~0x04000000u;
}
inline bool skill_data_t_skill_lv_config::_internal_needtarget() const {
  return needtarget_;
}
inline bool skill_data_t_skill_lv_config::needtarget() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.NeedTarget)
  return _internal_needtarget();
}
inline void skill_data_t_skill_lv_config::_internal_set_needtarget(bool value) {
  _has_bits_[0] |= 0x04000000u;
  needtarget_ = value;
}
inline void skill_data_t_skill_lv_config::set_needtarget(bool value) {
  _internal_set_needtarget(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.NeedTarget)
}

// required string SkillRange = 25;
inline bool skill_data_t_skill_lv_config::_internal_has_skillrange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_skillrange() const {
  return _internal_has_skillrange();
}
inline void skill_data_t_skill_lv_config::clear_skillrange() {
  skillrange_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& skill_data_t_skill_lv_config::skillrange() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.SkillRange)
  return _internal_skillrange();
}
inline void skill_data_t_skill_lv_config::set_skillrange(const std::string& value) {
  _internal_set_skillrange(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.SkillRange)
}
inline std::string* skill_data_t_skill_lv_config::mutable_skillrange() {
  // @@protoc_insertion_point(field_mutable:pb.skill_data.t_skill_lv_config.SkillRange)
  return _internal_mutable_skillrange();
}
inline const std::string& skill_data_t_skill_lv_config::_internal_skillrange() const {
  return skillrange_.GetNoArena();
}
inline void skill_data_t_skill_lv_config::_internal_set_skillrange(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  skillrange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_data_t_skill_lv_config::set_skillrange(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  skillrange_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_data.t_skill_lv_config.SkillRange)
}
inline void skill_data_t_skill_lv_config::set_skillrange(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  skillrange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_data.t_skill_lv_config.SkillRange)
}
inline void skill_data_t_skill_lv_config::set_skillrange(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  skillrange_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_data.t_skill_lv_config.SkillRange)
}
inline std::string* skill_data_t_skill_lv_config::_internal_mutable_skillrange() {
  _has_bits_[0] |= 0x00000040u;
  return skillrange_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_data_t_skill_lv_config::release_skillrange() {
  // @@protoc_insertion_point(field_release:pb.skill_data.t_skill_lv_config.SkillRange)
  if (!_internal_has_skillrange()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return skillrange_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_data_t_skill_lv_config::set_allocated_skillrange(std::string* skillrange) {
  if (skillrange != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  skillrange_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skillrange);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_data.t_skill_lv_config.SkillRange)
}

// required string extskill = 26;
inline bool skill_data_t_skill_lv_config::_internal_has_extskill() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_extskill() const {
  return _internal_has_extskill();
}
inline void skill_data_t_skill_lv_config::clear_extskill() {
  extskill_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& skill_data_t_skill_lv_config::extskill() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.extskill)
  return _internal_extskill();
}
inline void skill_data_t_skill_lv_config::set_extskill(const std::string& value) {
  _internal_set_extskill(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.extskill)
}
inline std::string* skill_data_t_skill_lv_config::mutable_extskill() {
  // @@protoc_insertion_point(field_mutable:pb.skill_data.t_skill_lv_config.extskill)
  return _internal_mutable_extskill();
}
inline const std::string& skill_data_t_skill_lv_config::_internal_extskill() const {
  return extskill_.GetNoArena();
}
inline void skill_data_t_skill_lv_config::_internal_set_extskill(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  extskill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_data_t_skill_lv_config::set_extskill(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  extskill_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_data.t_skill_lv_config.extskill)
}
inline void skill_data_t_skill_lv_config::set_extskill(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  extskill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_data.t_skill_lv_config.extskill)
}
inline void skill_data_t_skill_lv_config::set_extskill(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  extskill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_data.t_skill_lv_config.extskill)
}
inline std::string* skill_data_t_skill_lv_config::_internal_mutable_extskill() {
  _has_bits_[0] |= 0x00000080u;
  return extskill_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_data_t_skill_lv_config::release_extskill() {
  // @@protoc_insertion_point(field_release:pb.skill_data.t_skill_lv_config.extskill)
  if (!_internal_has_extskill()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return extskill_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_data_t_skill_lv_config::set_allocated_extskill(std::string* extskill) {
  if (extskill != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  extskill_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extskill);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_data.t_skill_lv_config.extskill)
}

// required uint32 publicCD = 27;
inline bool skill_data_t_skill_lv_config::_internal_has_publiccd() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_publiccd() const {
  return _internal_has_publiccd();
}
inline void skill_data_t_skill_lv_config::clear_publiccd() {
  publiccd_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_publiccd() const {
  return publiccd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::publiccd() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.publicCD)
  return _internal_publiccd();
}
inline void skill_data_t_skill_lv_config::_internal_set_publiccd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  publiccd_ = value;
}
inline void skill_data_t_skill_lv_config::set_publiccd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_publiccd(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.publicCD)
}

// required bool MoveBreakComb = 28;
inline bool skill_data_t_skill_lv_config::_internal_has_movebreakcomb() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_movebreakcomb() const {
  return _internal_has_movebreakcomb();
}
inline void skill_data_t_skill_lv_config::clear_movebreakcomb() {
  movebreakcomb_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool skill_data_t_skill_lv_config::_internal_movebreakcomb() const {
  return movebreakcomb_;
}
inline bool skill_data_t_skill_lv_config::movebreakcomb() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.MoveBreakComb)
  return _internal_movebreakcomb();
}
inline void skill_data_t_skill_lv_config::_internal_set_movebreakcomb(bool value) {
  _has_bits_[0] |= 0x08000000u;
  movebreakcomb_ = value;
}
inline void skill_data_t_skill_lv_config::set_movebreakcomb(bool value) {
  _internal_set_movebreakcomb(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.MoveBreakComb)
}

// required bool SkillBreakComb = 29;
inline bool skill_data_t_skill_lv_config::_internal_has_skillbreakcomb() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_skillbreakcomb() const {
  return _internal_has_skillbreakcomb();
}
inline void skill_data_t_skill_lv_config::clear_skillbreakcomb() {
  skillbreakcomb_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool skill_data_t_skill_lv_config::_internal_skillbreakcomb() const {
  return skillbreakcomb_;
}
inline bool skill_data_t_skill_lv_config::skillbreakcomb() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.SkillBreakComb)
  return _internal_skillbreakcomb();
}
inline void skill_data_t_skill_lv_config::_internal_set_skillbreakcomb(bool value) {
  _has_bits_[0] |= 0x10000000u;
  skillbreakcomb_ = value;
}
inline void skill_data_t_skill_lv_config::set_skillbreakcomb(bool value) {
  _internal_set_skillbreakcomb(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.SkillBreakComb)
}

// required bool multiskill = 30;
inline bool skill_data_t_skill_lv_config::_internal_has_multiskill() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_multiskill() const {
  return _internal_has_multiskill();
}
inline void skill_data_t_skill_lv_config::clear_multiskill() {
  multiskill_ = false;
  _has_bits_[0] &= ~0x40000000u;
}
inline bool skill_data_t_skill_lv_config::_internal_multiskill() const {
  return multiskill_;
}
inline bool skill_data_t_skill_lv_config::multiskill() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.multiskill)
  return _internal_multiskill();
}
inline void skill_data_t_skill_lv_config::_internal_set_multiskill(bool value) {
  _has_bits_[0] |= 0x40000000u;
  multiskill_ = value;
}
inline void skill_data_t_skill_lv_config::set_multiskill(bool value) {
  _internal_set_multiskill(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.multiskill)
}

// required uint32 SearchType = 31;
inline bool skill_data_t_skill_lv_config::_internal_has_searchtype() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_searchtype() const {
  return _internal_has_searchtype();
}
inline void skill_data_t_skill_lv_config::clear_searchtype() {
  searchtype_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_searchtype() const {
  return searchtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::searchtype() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.SearchType)
  return _internal_searchtype();
}
inline void skill_data_t_skill_lv_config::_internal_set_searchtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  searchtype_ = value;
}
inline void skill_data_t_skill_lv_config::set_searchtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_searchtype(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.SearchType)
}

// required uint32 CastBeyondType = 32;
inline bool skill_data_t_skill_lv_config::_internal_has_castbeyondtype() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_castbeyondtype() const {
  return _internal_has_castbeyondtype();
}
inline void skill_data_t_skill_lv_config::clear_castbeyondtype() {
  castbeyondtype_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_castbeyondtype() const {
  return castbeyondtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::castbeyondtype() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.CastBeyondType)
  return _internal_castbeyondtype();
}
inline void skill_data_t_skill_lv_config::_internal_set_castbeyondtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  castbeyondtype_ = value;
}
inline void skill_data_t_skill_lv_config::set_castbeyondtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_castbeyondtype(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.CastBeyondType)
}

// required uint32 SearchRange = 33;
inline bool skill_data_t_skill_lv_config::_internal_has_searchrange() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_searchrange() const {
  return _internal_has_searchrange();
}
inline void skill_data_t_skill_lv_config::clear_searchrange() {
  searchrange_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_searchrange() const {
  return searchrange_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::searchrange() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.SearchRange)
  return _internal_searchrange();
}
inline void skill_data_t_skill_lv_config::_internal_set_searchrange(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  searchrange_ = value;
}
inline void skill_data_t_skill_lv_config::set_searchrange(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_searchrange(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.SearchRange)
}

// required uint32 relyon_state = 34;
inline bool skill_data_t_skill_lv_config::_internal_has_relyon_state() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_relyon_state() const {
  return _internal_has_relyon_state();
}
inline void skill_data_t_skill_lv_config::clear_relyon_state() {
  relyon_state_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_relyon_state() const {
  return relyon_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::relyon_state() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.relyon_state)
  return _internal_relyon_state();
}
inline void skill_data_t_skill_lv_config::_internal_set_relyon_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  relyon_state_ = value;
}
inline void skill_data_t_skill_lv_config::set_relyon_state(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_relyon_state(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.relyon_state)
}

// required uint32 levelup_type = 35;
inline bool skill_data_t_skill_lv_config::_internal_has_levelup_type() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_levelup_type() const {
  return _internal_has_levelup_type();
}
inline void skill_data_t_skill_lv_config::clear_levelup_type() {
  levelup_type_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_levelup_type() const {
  return levelup_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::levelup_type() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.levelup_type)
  return _internal_levelup_type();
}
inline void skill_data_t_skill_lv_config::_internal_set_levelup_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  levelup_type_ = value;
}
inline void skill_data_t_skill_lv_config::set_levelup_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_levelup_type(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.levelup_type)
}

// required uint32 nextskillid = 36;
inline bool skill_data_t_skill_lv_config::_internal_has_nextskillid() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_nextskillid() const {
  return _internal_has_nextskillid();
}
inline void skill_data_t_skill_lv_config::clear_nextskillid() {
  nextskillid_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::_internal_nextskillid() const {
  return nextskillid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 skill_data_t_skill_lv_config::nextskillid() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.nextskillid)
  return _internal_nextskillid();
}
inline void skill_data_t_skill_lv_config::_internal_set_nextskillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  nextskillid_ = value;
}
inline void skill_data_t_skill_lv_config::set_nextskillid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nextskillid(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.nextskillid)
}

// required string levelupcost = 37;
inline bool skill_data_t_skill_lv_config::_internal_has_levelupcost() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool skill_data_t_skill_lv_config::has_levelupcost() const {
  return _internal_has_levelupcost();
}
inline void skill_data_t_skill_lv_config::clear_levelupcost() {
  levelupcost_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& skill_data_t_skill_lv_config::levelupcost() const {
  // @@protoc_insertion_point(field_get:pb.skill_data.t_skill_lv_config.levelupcost)
  return _internal_levelupcost();
}
inline void skill_data_t_skill_lv_config::set_levelupcost(const std::string& value) {
  _internal_set_levelupcost(value);
  // @@protoc_insertion_point(field_set:pb.skill_data.t_skill_lv_config.levelupcost)
}
inline std::string* skill_data_t_skill_lv_config::mutable_levelupcost() {
  // @@protoc_insertion_point(field_mutable:pb.skill_data.t_skill_lv_config.levelupcost)
  return _internal_mutable_levelupcost();
}
inline const std::string& skill_data_t_skill_lv_config::_internal_levelupcost() const {
  return levelupcost_.GetNoArena();
}
inline void skill_data_t_skill_lv_config::_internal_set_levelupcost(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  levelupcost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void skill_data_t_skill_lv_config::set_levelupcost(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  levelupcost_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.skill_data.t_skill_lv_config.levelupcost)
}
inline void skill_data_t_skill_lv_config::set_levelupcost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  levelupcost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.skill_data.t_skill_lv_config.levelupcost)
}
inline void skill_data_t_skill_lv_config::set_levelupcost(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  levelupcost_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.skill_data.t_skill_lv_config.levelupcost)
}
inline std::string* skill_data_t_skill_lv_config::_internal_mutable_levelupcost() {
  _has_bits_[0] |= 0x00000100u;
  return levelupcost_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* skill_data_t_skill_lv_config::release_levelupcost() {
  // @@protoc_insertion_point(field_release:pb.skill_data.t_skill_lv_config.levelupcost)
  if (!_internal_has_levelupcost()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return levelupcost_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void skill_data_t_skill_lv_config::set_allocated_levelupcost(std::string* levelupcost) {
  if (levelupcost != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  levelupcost_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), levelupcost);
  // @@protoc_insertion_point(field_set_allocated:pb.skill_data.t_skill_lv_config.levelupcost)
}

// -------------------------------------------------------------------

// skill_data

// repeated .pb.skill_data.t_skill_lv_config datas = 1;
inline int skill_data::_internal_datas_size() const {
  return datas_.size();
}
inline int skill_data::datas_size() const {
  return _internal_datas_size();
}
inline void skill_data::clear_datas() {
  datas_.Clear();
}
inline ::pb::skill_data_t_skill_lv_config* skill_data::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:pb.skill_data.datas)
  return datas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_data_t_skill_lv_config >*
skill_data::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:pb.skill_data.datas)
  return &datas_;
}
inline const ::pb::skill_data_t_skill_lv_config& skill_data::_internal_datas(int index) const {
  return datas_.Get(index);
}
inline const ::pb::skill_data_t_skill_lv_config& skill_data::datas(int index) const {
  // @@protoc_insertion_point(field_get:pb.skill_data.datas)
  return _internal_datas(index);
}
inline ::pb::skill_data_t_skill_lv_config* skill_data::_internal_add_datas() {
  return datas_.Add();
}
inline ::pb::skill_data_t_skill_lv_config* skill_data::add_datas() {
  // @@protoc_insertion_point(field_add:pb.skill_data.datas)
  return _internal_add_datas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::skill_data_t_skill_lv_config >&
skill_data::datas() const {
  // @@protoc_insertion_point(field_list:pb.skill_data.datas)
  return datas_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_skill_5fdata_2eproto
