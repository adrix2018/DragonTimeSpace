// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pvpmatchfight.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pvpmatchfight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pvpmatchfight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "msg_enum.pb.h"
#include "basic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pvpmatchfight_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pvpmatchfight_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pvpmatchfight_2eproto;
namespace pvpmatchfight {
class MSG_ReqChoosePvPPrepared_CS;
class MSG_ReqChoosePvPPrepared_CSDefaultTypeInternal;
extern MSG_ReqChoosePvPPrepared_CSDefaultTypeInternal _MSG_ReqChoosePvPPrepared_CS_default_instance_;
class MSG_ReqPvPDailyAwards_CS;
class MSG_ReqPvPDailyAwards_CSDefaultTypeInternal;
extern MSG_ReqPvPDailyAwards_CSDefaultTypeInternal _MSG_ReqPvPDailyAwards_CS_default_instance_;
class MSG_ReqPvPFightCurStage_CS;
class MSG_ReqPvPFightCurStage_CSDefaultTypeInternal;
extern MSG_ReqPvPFightCurStage_CSDefaultTypeInternal _MSG_ReqPvPFightCurStage_CS_default_instance_;
class MSG_Req_CancelPvPMatch_CS;
class MSG_Req_CancelPvPMatch_CSDefaultTypeInternal;
extern MSG_Req_CancelPvPMatch_CSDefaultTypeInternal _MSG_Req_CancelPvPMatch_CS_default_instance_;
class MSG_Req_GotoPvPBattle_CS;
class MSG_Req_GotoPvPBattle_CSDefaultTypeInternal;
extern MSG_Req_GotoPvPBattle_CSDefaultTypeInternal _MSG_Req_GotoPvPBattle_CS_default_instance_;
class MSG_Req_StartPvPMatch_CS;
class MSG_Req_StartPvPMatch_CSDefaultTypeInternal;
extern MSG_Req_StartPvPMatch_CSDefaultTypeInternal _MSG_Req_StartPvPMatch_CS_default_instance_;
class MSG_RetChoosePvPPrepared_SC;
class MSG_RetChoosePvPPrepared_SCDefaultTypeInternal;
extern MSG_RetChoosePvPPrepared_SCDefaultTypeInternal _MSG_RetChoosePvPPrepared_SC_default_instance_;
class MSG_RetPvPDailyAwards_SC;
class MSG_RetPvPDailyAwards_SCDefaultTypeInternal;
extern MSG_RetPvPDailyAwards_SCDefaultTypeInternal _MSG_RetPvPDailyAwards_SC_default_instance_;
class MSG_RetPvPFightCountDown_SC;
class MSG_RetPvPFightCountDown_SCDefaultTypeInternal;
extern MSG_RetPvPFightCountDown_SCDefaultTypeInternal _MSG_RetPvPFightCountDown_SC_default_instance_;
class MSG_RetPvPFightCurStage_SC;
class MSG_RetPvPFightCurStage_SCDefaultTypeInternal;
extern MSG_RetPvPFightCurStage_SCDefaultTypeInternal _MSG_RetPvPFightCurStage_SC_default_instance_;
class MSG_RetPvPFightFinish_SC;
class MSG_RetPvPFightFinish_SCDefaultTypeInternal;
extern MSG_RetPvPFightFinish_SCDefaultTypeInternal _MSG_RetPvPFightFinish_SC_default_instance_;
class MSG_RetPvPFightPreFight_SC;
class MSG_RetPvPFightPreFight_SCDefaultTypeInternal;
extern MSG_RetPvPFightPreFight_SCDefaultTypeInternal _MSG_RetPvPFightPreFight_SC_default_instance_;
class MSG_RetPvPMatchFightCurLive_SC;
class MSG_RetPvPMatchFightCurLive_SCDefaultTypeInternal;
extern MSG_RetPvPMatchFightCurLive_SCDefaultTypeInternal _MSG_RetPvPMatchFightCurLive_SC_default_instance_;
class MSG_RetPvPPKGeneralConfig_SC;
class MSG_RetPvPPKGeneralConfig_SCDefaultTypeInternal;
extern MSG_RetPvPPKGeneralConfig_SCDefaultTypeInternal _MSG_RetPvPPKGeneralConfig_SC_default_instance_;
class MSG_RetPvPPreparedNum_SC;
class MSG_RetPvPPreparedNum_SCDefaultTypeInternal;
extern MSG_RetPvPPreparedNum_SCDefaultTypeInternal _MSG_RetPvPPreparedNum_SC_default_instance_;
class MSG_RetPvPSpeedupFight_SC;
class MSG_RetPvPSpeedupFight_SCDefaultTypeInternal;
extern MSG_RetPvPSpeedupFight_SCDefaultTypeInternal _MSG_RetPvPSpeedupFight_SC_default_instance_;
class MSG_RetPvPTeamCurScore_SC;
class MSG_RetPvPTeamCurScore_SCDefaultTypeInternal;
extern MSG_RetPvPTeamCurScore_SCDefaultTypeInternal _MSG_RetPvPTeamCurScore_SC_default_instance_;
class MSG_RetStartPvPFight_SC;
class MSG_RetStartPvPFight_SCDefaultTypeInternal;
extern MSG_RetStartPvPFight_SCDefaultTypeInternal _MSG_RetStartPvPFight_SC_default_instance_;
class MSG_RetStartPvPPrepare_SC;
class MSG_RetStartPvPPrepare_SCDefaultTypeInternal;
extern MSG_RetStartPvPPrepare_SCDefaultTypeInternal _MSG_RetStartPvPPrepare_SC_default_instance_;
class MSG_Ret_CancelPvPMatch_SC;
class MSG_Ret_CancelPvPMatch_SCDefaultTypeInternal;
extern MSG_Ret_CancelPvPMatch_SCDefaultTypeInternal _MSG_Ret_CancelPvPMatch_SC_default_instance_;
class MSG_Ret_PvPMatchResult_SC;
class MSG_Ret_PvPMatchResult_SCDefaultTypeInternal;
extern MSG_Ret_PvPMatchResult_SCDefaultTypeInternal _MSG_Ret_PvPMatchResult_SC_default_instance_;
class MSG_Ret_StartPvPMatch_SC;
class MSG_Ret_StartPvPMatch_SCDefaultTypeInternal;
extern MSG_Ret_StartPvPMatch_SCDefaultTypeInternal _MSG_Ret_StartPvPMatch_SC_default_instance_;
class PvPAwardItem;
class PvPAwardItemDefaultTypeInternal;
extern PvPAwardItemDefaultTypeInternal _PvPAwardItem_default_instance_;
class onePlayerLive;
class onePlayerLiveDefaultTypeInternal;
extern onePlayerLiveDefaultTypeInternal _onePlayerLive_default_instance_;
}  // namespace pvpmatchfight
PROTOBUF_NAMESPACE_OPEN
template<> ::pvpmatchfight::MSG_ReqChoosePvPPrepared_CS* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_ReqChoosePvPPrepared_CS>(Arena*);
template<> ::pvpmatchfight::MSG_ReqPvPDailyAwards_CS* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_ReqPvPDailyAwards_CS>(Arena*);
template<> ::pvpmatchfight::MSG_ReqPvPFightCurStage_CS* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_ReqPvPFightCurStage_CS>(Arena*);
template<> ::pvpmatchfight::MSG_Req_CancelPvPMatch_CS* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_Req_CancelPvPMatch_CS>(Arena*);
template<> ::pvpmatchfight::MSG_Req_GotoPvPBattle_CS* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_Req_GotoPvPBattle_CS>(Arena*);
template<> ::pvpmatchfight::MSG_Req_StartPvPMatch_CS* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_Req_StartPvPMatch_CS>(Arena*);
template<> ::pvpmatchfight::MSG_RetChoosePvPPrepared_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetChoosePvPPrepared_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetPvPDailyAwards_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPDailyAwards_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetPvPFightCountDown_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPFightCountDown_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetPvPFightCurStage_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPFightCurStage_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetPvPFightFinish_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPFightFinish_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetPvPFightPreFight_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPFightPreFight_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetPvPPreparedNum_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPPreparedNum_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetPvPSpeedupFight_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPSpeedupFight_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPTeamCurScore_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetStartPvPFight_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetStartPvPFight_SC>(Arena*);
template<> ::pvpmatchfight::MSG_RetStartPvPPrepare_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_RetStartPvPPrepare_SC>(Arena*);
template<> ::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC>(Arena*);
template<> ::pvpmatchfight::MSG_Ret_PvPMatchResult_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_Ret_PvPMatchResult_SC>(Arena*);
template<> ::pvpmatchfight::MSG_Ret_StartPvPMatch_SC* Arena::CreateMaybeMessage<::pvpmatchfight::MSG_Ret_StartPvPMatch_SC>(Arena*);
template<> ::pvpmatchfight::PvPAwardItem* Arena::CreateMaybeMessage<::pvpmatchfight::PvPAwardItem>(Arena*);
template<> ::pvpmatchfight::onePlayerLive* Arena::CreateMaybeMessage<::pvpmatchfight::onePlayerLive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pvpmatchfight {

// ===================================================================

class MSG_Req_StartPvPMatch_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_Req_StartPvPMatch_CS) */ {
 public:
  MSG_Req_StartPvPMatch_CS();
  virtual ~MSG_Req_StartPvPMatch_CS();

  MSG_Req_StartPvPMatch_CS(const MSG_Req_StartPvPMatch_CS& from);
  MSG_Req_StartPvPMatch_CS(MSG_Req_StartPvPMatch_CS&& from) noexcept
    : MSG_Req_StartPvPMatch_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_StartPvPMatch_CS& operator=(const MSG_Req_StartPvPMatch_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_StartPvPMatch_CS& operator=(MSG_Req_StartPvPMatch_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_StartPvPMatch_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_StartPvPMatch_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_StartPvPMatch_CS*>(
               &_MSG_Req_StartPvPMatch_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_Req_StartPvPMatch_CS& a, MSG_Req_StartPvPMatch_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_StartPvPMatch_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_StartPvPMatch_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_StartPvPMatch_CS>(nullptr);
  }

  MSG_Req_StartPvPMatch_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_StartPvPMatch_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_StartPvPMatch_CS& from);
  void MergeFrom(const MSG_Req_StartPvPMatch_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_StartPvPMatch_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_Req_StartPvPMatch_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_StartPvPMatch_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_Ret_StartPvPMatch_SC) */ {
 public:
  MSG_Ret_StartPvPMatch_SC();
  virtual ~MSG_Ret_StartPvPMatch_SC();

  MSG_Ret_StartPvPMatch_SC(const MSG_Ret_StartPvPMatch_SC& from);
  MSG_Ret_StartPvPMatch_SC(MSG_Ret_StartPvPMatch_SC&& from) noexcept
    : MSG_Ret_StartPvPMatch_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_StartPvPMatch_SC& operator=(const MSG_Ret_StartPvPMatch_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_StartPvPMatch_SC& operator=(MSG_Ret_StartPvPMatch_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_StartPvPMatch_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_StartPvPMatch_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_StartPvPMatch_SC*>(
               &_MSG_Ret_StartPvPMatch_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_Ret_StartPvPMatch_SC& a, MSG_Ret_StartPvPMatch_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_StartPvPMatch_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_StartPvPMatch_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_StartPvPMatch_SC>(nullptr);
  }

  MSG_Ret_StartPvPMatch_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_StartPvPMatch_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_StartPvPMatch_SC& from);
  void MergeFrom(const MSG_Ret_StartPvPMatch_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_StartPvPMatch_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_Ret_StartPvPMatch_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
    kMatchtypeFieldNumber = 2,
  };
  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .msg.MATCHFIGHT matchtype = 2;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  int matchtype_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_CancelPvPMatch_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_Req_CancelPvPMatch_CS) */ {
 public:
  MSG_Req_CancelPvPMatch_CS();
  virtual ~MSG_Req_CancelPvPMatch_CS();

  MSG_Req_CancelPvPMatch_CS(const MSG_Req_CancelPvPMatch_CS& from);
  MSG_Req_CancelPvPMatch_CS(MSG_Req_CancelPvPMatch_CS&& from) noexcept
    : MSG_Req_CancelPvPMatch_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_CancelPvPMatch_CS& operator=(const MSG_Req_CancelPvPMatch_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_CancelPvPMatch_CS& operator=(MSG_Req_CancelPvPMatch_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_CancelPvPMatch_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_CancelPvPMatch_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_CancelPvPMatch_CS*>(
               &_MSG_Req_CancelPvPMatch_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_Req_CancelPvPMatch_CS& a, MSG_Req_CancelPvPMatch_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_CancelPvPMatch_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_CancelPvPMatch_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_CancelPvPMatch_CS>(nullptr);
  }

  MSG_Req_CancelPvPMatch_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_CancelPvPMatch_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_CancelPvPMatch_CS& from);
  void MergeFrom(const MSG_Req_CancelPvPMatch_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_CancelPvPMatch_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_Req_CancelPvPMatch_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_CancelPvPMatch_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC) */ {
 public:
  MSG_Ret_CancelPvPMatch_SC();
  virtual ~MSG_Ret_CancelPvPMatch_SC();

  MSG_Ret_CancelPvPMatch_SC(const MSG_Ret_CancelPvPMatch_SC& from);
  MSG_Ret_CancelPvPMatch_SC(MSG_Ret_CancelPvPMatch_SC&& from) noexcept
    : MSG_Ret_CancelPvPMatch_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_CancelPvPMatch_SC& operator=(const MSG_Ret_CancelPvPMatch_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_CancelPvPMatch_SC& operator=(MSG_Ret_CancelPvPMatch_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_CancelPvPMatch_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_CancelPvPMatch_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_CancelPvPMatch_SC*>(
               &_MSG_Ret_CancelPvPMatch_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_Ret_CancelPvPMatch_SC& a, MSG_Ret_CancelPvPMatch_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_CancelPvPMatch_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_CancelPvPMatch_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_CancelPvPMatch_SC>(nullptr);
  }

  MSG_Ret_CancelPvPMatch_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_CancelPvPMatch_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_CancelPvPMatch_SC& from);
  void MergeFrom(const MSG_Ret_CancelPvPMatch_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_CancelPvPMatch_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_Ret_CancelPvPMatch_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
    kMatchtypeFieldNumber = 2,
  };
  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .msg.MATCHFIGHT matchtype = 2;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  int matchtype_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_PvPMatchResult_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_Ret_PvPMatchResult_SC) */ {
 public:
  MSG_Ret_PvPMatchResult_SC();
  virtual ~MSG_Ret_PvPMatchResult_SC();

  MSG_Ret_PvPMatchResult_SC(const MSG_Ret_PvPMatchResult_SC& from);
  MSG_Ret_PvPMatchResult_SC(MSG_Ret_PvPMatchResult_SC&& from) noexcept
    : MSG_Ret_PvPMatchResult_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_PvPMatchResult_SC& operator=(const MSG_Ret_PvPMatchResult_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_PvPMatchResult_SC& operator=(MSG_Ret_PvPMatchResult_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_PvPMatchResult_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_PvPMatchResult_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_PvPMatchResult_SC*>(
               &_MSG_Ret_PvPMatchResult_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MSG_Ret_PvPMatchResult_SC& a, MSG_Ret_PvPMatchResult_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_PvPMatchResult_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_PvPMatchResult_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_PvPMatchResult_SC>(nullptr);
  }

  MSG_Ret_PvPMatchResult_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_PvPMatchResult_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_PvPMatchResult_SC& from);
  void MergeFrom(const MSG_Ret_PvPMatchResult_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_PvPMatchResult_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_Ret_PvPMatchResult_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
    kMatchtypeFieldNumber = 2,
  };
  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .msg.MATCHFIGHT matchtype = 2;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  int matchtype_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_GotoPvPBattle_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_Req_GotoPvPBattle_CS) */ {
 public:
  MSG_Req_GotoPvPBattle_CS();
  virtual ~MSG_Req_GotoPvPBattle_CS();

  MSG_Req_GotoPvPBattle_CS(const MSG_Req_GotoPvPBattle_CS& from);
  MSG_Req_GotoPvPBattle_CS(MSG_Req_GotoPvPBattle_CS&& from) noexcept
    : MSG_Req_GotoPvPBattle_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_GotoPvPBattle_CS& operator=(const MSG_Req_GotoPvPBattle_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_GotoPvPBattle_CS& operator=(MSG_Req_GotoPvPBattle_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_GotoPvPBattle_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_GotoPvPBattle_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_GotoPvPBattle_CS*>(
               &_MSG_Req_GotoPvPBattle_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_Req_GotoPvPBattle_CS& a, MSG_Req_GotoPvPBattle_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_GotoPvPBattle_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_GotoPvPBattle_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_GotoPvPBattle_CS>(nullptr);
  }

  MSG_Req_GotoPvPBattle_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_GotoPvPBattle_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_GotoPvPBattle_CS& from);
  void MergeFrom(const MSG_Req_GotoPvPBattle_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_GotoPvPBattle_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_Req_GotoPvPBattle_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqChoosePvPPrepared_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS) */ {
 public:
  MSG_ReqChoosePvPPrepared_CS();
  virtual ~MSG_ReqChoosePvPPrepared_CS();

  MSG_ReqChoosePvPPrepared_CS(const MSG_ReqChoosePvPPrepared_CS& from);
  MSG_ReqChoosePvPPrepared_CS(MSG_ReqChoosePvPPrepared_CS&& from) noexcept
    : MSG_ReqChoosePvPPrepared_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqChoosePvPPrepared_CS& operator=(const MSG_ReqChoosePvPPrepared_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqChoosePvPPrepared_CS& operator=(MSG_ReqChoosePvPPrepared_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqChoosePvPPrepared_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqChoosePvPPrepared_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqChoosePvPPrepared_CS*>(
               &_MSG_ReqChoosePvPPrepared_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_ReqChoosePvPPrepared_CS& a, MSG_ReqChoosePvPPrepared_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqChoosePvPPrepared_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqChoosePvPPrepared_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqChoosePvPPrepared_CS>(nullptr);
  }

  MSG_ReqChoosePvPPrepared_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqChoosePvPPrepared_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqChoosePvPPrepared_CS& from);
  void MergeFrom(const MSG_ReqChoosePvPPrepared_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqChoosePvPPrepared_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_ReqChoosePvPPrepared_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetChoosePvPPrepared_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetChoosePvPPrepared_SC) */ {
 public:
  MSG_RetChoosePvPPrepared_SC();
  virtual ~MSG_RetChoosePvPPrepared_SC();

  MSG_RetChoosePvPPrepared_SC(const MSG_RetChoosePvPPrepared_SC& from);
  MSG_RetChoosePvPPrepared_SC(MSG_RetChoosePvPPrepared_SC&& from) noexcept
    : MSG_RetChoosePvPPrepared_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetChoosePvPPrepared_SC& operator=(const MSG_RetChoosePvPPrepared_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetChoosePvPPrepared_SC& operator=(MSG_RetChoosePvPPrepared_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetChoosePvPPrepared_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetChoosePvPPrepared_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetChoosePvPPrepared_SC*>(
               &_MSG_RetChoosePvPPrepared_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_RetChoosePvPPrepared_SC& a, MSG_RetChoosePvPPrepared_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetChoosePvPPrepared_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetChoosePvPPrepared_SC* New() const final {
    return CreateMaybeMessage<MSG_RetChoosePvPPrepared_SC>(nullptr);
  }

  MSG_RetChoosePvPPrepared_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetChoosePvPPrepared_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetChoosePvPPrepared_SC& from);
  void MergeFrom(const MSG_RetChoosePvPPrepared_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetChoosePvPPrepared_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetChoosePvPPrepared_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrcodeFieldNumber = 1,
  };
  // optional uint32 errcode = 1;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetStartPvPPrepare_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetStartPvPPrepare_SC) */ {
 public:
  MSG_RetStartPvPPrepare_SC();
  virtual ~MSG_RetStartPvPPrepare_SC();

  MSG_RetStartPvPPrepare_SC(const MSG_RetStartPvPPrepare_SC& from);
  MSG_RetStartPvPPrepare_SC(MSG_RetStartPvPPrepare_SC&& from) noexcept
    : MSG_RetStartPvPPrepare_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetStartPvPPrepare_SC& operator=(const MSG_RetStartPvPPrepare_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetStartPvPPrepare_SC& operator=(MSG_RetStartPvPPrepare_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetStartPvPPrepare_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetStartPvPPrepare_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetStartPvPPrepare_SC*>(
               &_MSG_RetStartPvPPrepare_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MSG_RetStartPvPPrepare_SC& a, MSG_RetStartPvPPrepare_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetStartPvPPrepare_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetStartPvPPrepare_SC* New() const final {
    return CreateMaybeMessage<MSG_RetStartPvPPrepare_SC>(nullptr);
  }

  MSG_RetStartPvPPrepare_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetStartPvPPrepare_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetStartPvPPrepare_SC& from);
  void MergeFrom(const MSG_RetStartPvPPrepare_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetStartPvPPrepare_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetStartPvPPrepare_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetPvPFightCountDown_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetPvPFightCountDown_SC) */ {
 public:
  MSG_RetPvPFightCountDown_SC();
  virtual ~MSG_RetPvPFightCountDown_SC();

  MSG_RetPvPFightCountDown_SC(const MSG_RetPvPFightCountDown_SC& from);
  MSG_RetPvPFightCountDown_SC(MSG_RetPvPFightCountDown_SC&& from) noexcept
    : MSG_RetPvPFightCountDown_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetPvPFightCountDown_SC& operator=(const MSG_RetPvPFightCountDown_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetPvPFightCountDown_SC& operator=(MSG_RetPvPFightCountDown_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetPvPFightCountDown_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetPvPFightCountDown_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetPvPFightCountDown_SC*>(
               &_MSG_RetPvPFightCountDown_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_RetPvPFightCountDown_SC& a, MSG_RetPvPFightCountDown_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetPvPFightCountDown_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetPvPFightCountDown_SC* New() const final {
    return CreateMaybeMessage<MSG_RetPvPFightCountDown_SC>(nullptr);
  }

  MSG_RetPvPFightCountDown_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetPvPFightCountDown_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetPvPFightCountDown_SC& from);
  void MergeFrom(const MSG_RetPvPFightCountDown_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetPvPFightCountDown_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetPvPFightCountDown_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetPvPFightPreFight_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetPvPFightPreFight_SC) */ {
 public:
  MSG_RetPvPFightPreFight_SC();
  virtual ~MSG_RetPvPFightPreFight_SC();

  MSG_RetPvPFightPreFight_SC(const MSG_RetPvPFightPreFight_SC& from);
  MSG_RetPvPFightPreFight_SC(MSG_RetPvPFightPreFight_SC&& from) noexcept
    : MSG_RetPvPFightPreFight_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetPvPFightPreFight_SC& operator=(const MSG_RetPvPFightPreFight_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetPvPFightPreFight_SC& operator=(MSG_RetPvPFightPreFight_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetPvPFightPreFight_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetPvPFightPreFight_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetPvPFightPreFight_SC*>(
               &_MSG_RetPvPFightPreFight_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_RetPvPFightPreFight_SC& a, MSG_RetPvPFightPreFight_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetPvPFightPreFight_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetPvPFightPreFight_SC* New() const final {
    return CreateMaybeMessage<MSG_RetPvPFightPreFight_SC>(nullptr);
  }

  MSG_RetPvPFightPreFight_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetPvPFightPreFight_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetPvPFightPreFight_SC& from);
  void MergeFrom(const MSG_RetPvPFightPreFight_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetPvPFightPreFight_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetPvPFightPreFight_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetStartPvPFight_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetStartPvPFight_SC) */ {
 public:
  MSG_RetStartPvPFight_SC();
  virtual ~MSG_RetStartPvPFight_SC();

  MSG_RetStartPvPFight_SC(const MSG_RetStartPvPFight_SC& from);
  MSG_RetStartPvPFight_SC(MSG_RetStartPvPFight_SC&& from) noexcept
    : MSG_RetStartPvPFight_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetStartPvPFight_SC& operator=(const MSG_RetStartPvPFight_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetStartPvPFight_SC& operator=(MSG_RetStartPvPFight_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetStartPvPFight_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetStartPvPFight_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetStartPvPFight_SC*>(
               &_MSG_RetStartPvPFight_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MSG_RetStartPvPFight_SC& a, MSG_RetStartPvPFight_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetStartPvPFight_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetStartPvPFight_SC* New() const final {
    return CreateMaybeMessage<MSG_RetStartPvPFight_SC>(nullptr);
  }

  MSG_RetStartPvPFight_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetStartPvPFight_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetStartPvPFight_SC& from);
  void MergeFrom(const MSG_RetStartPvPFight_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetStartPvPFight_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetStartPvPFight_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetStartPvPFight_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetPvPSpeedupFight_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetPvPSpeedupFight_SC) */ {
 public:
  MSG_RetPvPSpeedupFight_SC();
  virtual ~MSG_RetPvPSpeedupFight_SC();

  MSG_RetPvPSpeedupFight_SC(const MSG_RetPvPSpeedupFight_SC& from);
  MSG_RetPvPSpeedupFight_SC(MSG_RetPvPSpeedupFight_SC&& from) noexcept
    : MSG_RetPvPSpeedupFight_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetPvPSpeedupFight_SC& operator=(const MSG_RetPvPSpeedupFight_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetPvPSpeedupFight_SC& operator=(MSG_RetPvPSpeedupFight_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetPvPSpeedupFight_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetPvPSpeedupFight_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetPvPSpeedupFight_SC*>(
               &_MSG_RetPvPSpeedupFight_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MSG_RetPvPSpeedupFight_SC& a, MSG_RetPvPSpeedupFight_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetPvPSpeedupFight_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetPvPSpeedupFight_SC* New() const final {
    return CreateMaybeMessage<MSG_RetPvPSpeedupFight_SC>(nullptr);
  }

  MSG_RetPvPSpeedupFight_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetPvPSpeedupFight_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetPvPSpeedupFight_SC& from);
  void MergeFrom(const MSG_RetPvPSpeedupFight_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetPvPSpeedupFight_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetPvPSpeedupFight_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetPvPFightFinish_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetPvPFightFinish_SC) */ {
 public:
  MSG_RetPvPFightFinish_SC();
  virtual ~MSG_RetPvPFightFinish_SC();

  MSG_RetPvPFightFinish_SC(const MSG_RetPvPFightFinish_SC& from);
  MSG_RetPvPFightFinish_SC(MSG_RetPvPFightFinish_SC&& from) noexcept
    : MSG_RetPvPFightFinish_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetPvPFightFinish_SC& operator=(const MSG_RetPvPFightFinish_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetPvPFightFinish_SC& operator=(MSG_RetPvPFightFinish_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetPvPFightFinish_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetPvPFightFinish_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetPvPFightFinish_SC*>(
               &_MSG_RetPvPFightFinish_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MSG_RetPvPFightFinish_SC& a, MSG_RetPvPFightFinish_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetPvPFightFinish_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetPvPFightFinish_SC* New() const final {
    return CreateMaybeMessage<MSG_RetPvPFightFinish_SC>(nullptr);
  }

  MSG_RetPvPFightFinish_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetPvPFightFinish_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetPvPFightFinish_SC& from);
  void MergeFrom(const MSG_RetPvPFightFinish_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetPvPFightFinish_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetPvPFightFinish_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwardFieldNumber = 4,
    kMatchtypeFieldNumber = 1,
    kDurationFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // optional .pvpmatchfight.PvPAwardItem award = 4;
  bool has_award() const;
  private:
  bool _internal_has_award() const;
  public:
  void clear_award();
  const ::pvpmatchfight::PvPAwardItem& award() const;
  ::pvpmatchfight::PvPAwardItem* release_award();
  ::pvpmatchfight::PvPAwardItem* mutable_award();
  void set_allocated_award(::pvpmatchfight::PvPAwardItem* award);
  private:
  const ::pvpmatchfight::PvPAwardItem& _internal_award() const;
  ::pvpmatchfight::PvPAwardItem* _internal_mutable_award();
  public:

  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .msg.FIGHTRESULT result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::msg::FIGHTRESULT result() const;
  void set_result(::msg::FIGHTRESULT value);
  private:
  ::msg::FIGHTRESULT _internal_result() const;
  void _internal_set_result(::msg::FIGHTRESULT value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetPvPFightFinish_SC)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pvpmatchfight::PvPAwardItem* award_;
  int matchtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  int result_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqPvPFightCurStage_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_ReqPvPFightCurStage_CS) */ {
 public:
  MSG_ReqPvPFightCurStage_CS();
  virtual ~MSG_ReqPvPFightCurStage_CS();

  MSG_ReqPvPFightCurStage_CS(const MSG_ReqPvPFightCurStage_CS& from);
  MSG_ReqPvPFightCurStage_CS(MSG_ReqPvPFightCurStage_CS&& from) noexcept
    : MSG_ReqPvPFightCurStage_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqPvPFightCurStage_CS& operator=(const MSG_ReqPvPFightCurStage_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqPvPFightCurStage_CS& operator=(MSG_ReqPvPFightCurStage_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqPvPFightCurStage_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqPvPFightCurStage_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqPvPFightCurStage_CS*>(
               &_MSG_ReqPvPFightCurStage_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MSG_ReqPvPFightCurStage_CS& a, MSG_ReqPvPFightCurStage_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqPvPFightCurStage_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqPvPFightCurStage_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqPvPFightCurStage_CS>(nullptr);
  }

  MSG_ReqPvPFightCurStage_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqPvPFightCurStage_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqPvPFightCurStage_CS& from);
  void MergeFrom(const MSG_ReqPvPFightCurStage_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqPvPFightCurStage_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_ReqPvPFightCurStage_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetPvPFightCurStage_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetPvPFightCurStage_SC) */ {
 public:
  MSG_RetPvPFightCurStage_SC();
  virtual ~MSG_RetPvPFightCurStage_SC();

  MSG_RetPvPFightCurStage_SC(const MSG_RetPvPFightCurStage_SC& from);
  MSG_RetPvPFightCurStage_SC(MSG_RetPvPFightCurStage_SC&& from) noexcept
    : MSG_RetPvPFightCurStage_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetPvPFightCurStage_SC& operator=(const MSG_RetPvPFightCurStage_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetPvPFightCurStage_SC& operator=(MSG_RetPvPFightCurStage_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetPvPFightCurStage_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetPvPFightCurStage_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetPvPFightCurStage_SC*>(
               &_MSG_RetPvPFightCurStage_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MSG_RetPvPFightCurStage_SC& a, MSG_RetPvPFightCurStage_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetPvPFightCurStage_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetPvPFightCurStage_SC* New() const final {
    return CreateMaybeMessage<MSG_RetPvPFightCurStage_SC>(nullptr);
  }

  MSG_RetPvPFightCurStage_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetPvPFightCurStage_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetPvPFightCurStage_SC& from);
  void MergeFrom(const MSG_RetPvPFightCurStage_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetPvPFightCurStage_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetPvPFightCurStage_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreinfoFieldNumber = 3,
    kLiveinfoFieldNumber = 4,
    kCurstageFieldNumber = 1,
    kLeftsecsFieldNumber = 2,
  };
  // optional .pvpmatchfight.MSG_RetPvPTeamCurScore_SC scoreinfo = 3;
  bool has_scoreinfo() const;
  private:
  bool _internal_has_scoreinfo() const;
  public:
  void clear_scoreinfo();
  const ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC& scoreinfo() const;
  ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* release_scoreinfo();
  ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* mutable_scoreinfo();
  void set_allocated_scoreinfo(::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* scoreinfo);
  private:
  const ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC& _internal_scoreinfo() const;
  ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* _internal_mutable_scoreinfo();
  public:

  // optional .pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC liveinfo = 4;
  bool has_liveinfo() const;
  private:
  bool _internal_has_liveinfo() const;
  public:
  void clear_liveinfo();
  const ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC& liveinfo() const;
  ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* release_liveinfo();
  ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* mutable_liveinfo();
  void set_allocated_liveinfo(::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* liveinfo);
  private:
  const ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC& _internal_liveinfo() const;
  ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* _internal_mutable_liveinfo();
  public:

  // required .msg.StageType curstage = 1;
  bool has_curstage() const;
  private:
  bool _internal_has_curstage() const;
  public:
  void clear_curstage();
  ::msg::StageType curstage() const;
  void set_curstage(::msg::StageType value);
  private:
  ::msg::StageType _internal_curstage() const;
  void _internal_set_curstage(::msg::StageType value);
  public:

  // optional uint32 leftsecs = 2;
  bool has_leftsecs() const;
  private:
  bool _internal_has_leftsecs() const;
  public:
  void clear_leftsecs();
  ::PROTOBUF_NAMESPACE_ID::uint32 leftsecs() const;
  void set_leftsecs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leftsecs() const;
  void _internal_set_leftsecs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* scoreinfo_;
  ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* liveinfo_;
  int curstage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leftsecs_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetPvPTeamCurScore_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetPvPTeamCurScore_SC) */ {
 public:
  MSG_RetPvPTeamCurScore_SC();
  virtual ~MSG_RetPvPTeamCurScore_SC();

  MSG_RetPvPTeamCurScore_SC(const MSG_RetPvPTeamCurScore_SC& from);
  MSG_RetPvPTeamCurScore_SC(MSG_RetPvPTeamCurScore_SC&& from) noexcept
    : MSG_RetPvPTeamCurScore_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetPvPTeamCurScore_SC& operator=(const MSG_RetPvPTeamCurScore_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetPvPTeamCurScore_SC& operator=(MSG_RetPvPTeamCurScore_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetPvPTeamCurScore_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetPvPTeamCurScore_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetPvPTeamCurScore_SC*>(
               &_MSG_RetPvPTeamCurScore_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MSG_RetPvPTeamCurScore_SC& a, MSG_RetPvPTeamCurScore_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetPvPTeamCurScore_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetPvPTeamCurScore_SC* New() const final {
    return CreateMaybeMessage<MSG_RetPvPTeamCurScore_SC>(nullptr);
  }

  MSG_RetPvPTeamCurScore_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetPvPTeamCurScore_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetPvPTeamCurScore_SC& from);
  void MergeFrom(const MSG_RetPvPTeamCurScore_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetPvPTeamCurScore_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetPvPTeamCurScore_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeam1IdFieldNumber = 1,
    kTeam1ScoreFieldNumber = 2,
    kTeam2IdFieldNumber = 3,
    kTeam2ScoreFieldNumber = 4,
  };
  // optional uint32 team1id = 1;
  bool has_team1id() const;
  private:
  bool _internal_has_team1id() const;
  public:
  void clear_team1id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team1id() const;
  void set_team1id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team1id() const;
  void _internal_set_team1id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team1score = 2;
  bool has_team1score() const;
  private:
  bool _internal_has_team1score() const;
  public:
  void clear_team1score();
  ::PROTOBUF_NAMESPACE_ID::uint32 team1score() const;
  void set_team1score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team1score() const;
  void _internal_set_team1score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team2id = 3;
  bool has_team2id() const;
  private:
  bool _internal_has_team2id() const;
  public:
  void clear_team2id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team2id() const;
  void set_team2id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team2id() const;
  void _internal_set_team2id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team2score = 4;
  bool has_team2score() const;
  private:
  bool _internal_has_team2score() const;
  public:
  void clear_team2score();
  ::PROTOBUF_NAMESPACE_ID::uint32 team2score() const;
  void set_team2score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team2score() const;
  void _internal_set_team2score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team1id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team1score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team2id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team2score_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetPvPPreparedNum_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetPvPPreparedNum_SC) */ {
 public:
  MSG_RetPvPPreparedNum_SC();
  virtual ~MSG_RetPvPPreparedNum_SC();

  MSG_RetPvPPreparedNum_SC(const MSG_RetPvPPreparedNum_SC& from);
  MSG_RetPvPPreparedNum_SC(MSG_RetPvPPreparedNum_SC&& from) noexcept
    : MSG_RetPvPPreparedNum_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetPvPPreparedNum_SC& operator=(const MSG_RetPvPPreparedNum_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetPvPPreparedNum_SC& operator=(MSG_RetPvPPreparedNum_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetPvPPreparedNum_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetPvPPreparedNum_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetPvPPreparedNum_SC*>(
               &_MSG_RetPvPPreparedNum_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MSG_RetPvPPreparedNum_SC& a, MSG_RetPvPPreparedNum_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetPvPPreparedNum_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetPvPPreparedNum_SC* New() const final {
    return CreateMaybeMessage<MSG_RetPvPPreparedNum_SC>(nullptr);
  }

  MSG_RetPvPPreparedNum_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetPvPPreparedNum_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetPvPPreparedNum_SC& from);
  void MergeFrom(const MSG_RetPvPPreparedNum_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetPvPPreparedNum_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetPvPPreparedNum_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
    kCurnumFieldNumber = 2,
    kAllnumFieldNumber = 3,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // optional uint32 curnum = 2;
  bool has_curnum() const;
  private:
  bool _internal_has_curnum() const;
  public:
  void clear_curnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 curnum() const;
  void set_curnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_curnum() const;
  void _internal_set_curnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 allnum = 3;
  bool has_allnum() const;
  private:
  bool _internal_has_allnum() const;
  public:
  void clear_allnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 allnum() const;
  void set_allnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_allnum() const;
  void _internal_set_allnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 curnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 allnum_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class PvPAwardItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.PvPAwardItem) */ {
 public:
  PvPAwardItem();
  virtual ~PvPAwardItem();

  PvPAwardItem(const PvPAwardItem& from);
  PvPAwardItem(PvPAwardItem&& from) noexcept
    : PvPAwardItem() {
    *this = ::std::move(from);
  }

  inline PvPAwardItem& operator=(const PvPAwardItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PvPAwardItem& operator=(PvPAwardItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PvPAwardItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PvPAwardItem* internal_default_instance() {
    return reinterpret_cast<const PvPAwardItem*>(
               &_PvPAwardItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PvPAwardItem& a, PvPAwardItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PvPAwardItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PvPAwardItem* New() const final {
    return CreateMaybeMessage<PvPAwardItem>(nullptr);
  }

  PvPAwardItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PvPAwardItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PvPAwardItem& from);
  void MergeFrom(const PvPAwardItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PvPAwardItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.PvPAwardItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kHeroidFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // repeated .basic.ObjectItem item = 2;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::basic::ObjectItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::basic::ObjectItem >*
      mutable_item();
  private:
  const ::basic::ObjectItem& _internal_item(int index) const;
  ::basic::ObjectItem* _internal_add_item();
  public:
  const ::basic::ObjectItem& item(int index) const;
  ::basic::ObjectItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::basic::ObjectItem >&
      item() const;

  // optional uint32 heroid = 3;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid() const;
  void set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroid() const;
  void _internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .msg.FIGHTRESULT result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::msg::FIGHTRESULT result() const;
  void set_result(::msg::FIGHTRESULT value);
  private:
  ::msg::FIGHTRESULT _internal_result() const;
  void _internal_set_result(::msg::FIGHTRESULT value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.PvPAwardItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::basic::ObjectItem > item_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid_;
  int result_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqPvPDailyAwards_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_ReqPvPDailyAwards_CS) */ {
 public:
  MSG_ReqPvPDailyAwards_CS();
  virtual ~MSG_ReqPvPDailyAwards_CS();

  MSG_ReqPvPDailyAwards_CS(const MSG_ReqPvPDailyAwards_CS& from);
  MSG_ReqPvPDailyAwards_CS(MSG_ReqPvPDailyAwards_CS&& from) noexcept
    : MSG_ReqPvPDailyAwards_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqPvPDailyAwards_CS& operator=(const MSG_ReqPvPDailyAwards_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqPvPDailyAwards_CS& operator=(MSG_ReqPvPDailyAwards_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqPvPDailyAwards_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqPvPDailyAwards_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqPvPDailyAwards_CS*>(
               &_MSG_ReqPvPDailyAwards_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MSG_ReqPvPDailyAwards_CS& a, MSG_ReqPvPDailyAwards_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqPvPDailyAwards_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqPvPDailyAwards_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqPvPDailyAwards_CS>(nullptr);
  }

  MSG_ReqPvPDailyAwards_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqPvPDailyAwards_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqPvPDailyAwards_CS& from);
  void MergeFrom(const MSG_ReqPvPDailyAwards_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqPvPDailyAwards_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_ReqPvPDailyAwards_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetPvPDailyAwards_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetPvPDailyAwards_SC) */ {
 public:
  MSG_RetPvPDailyAwards_SC();
  virtual ~MSG_RetPvPDailyAwards_SC();

  MSG_RetPvPDailyAwards_SC(const MSG_RetPvPDailyAwards_SC& from);
  MSG_RetPvPDailyAwards_SC(MSG_RetPvPDailyAwards_SC&& from) noexcept
    : MSG_RetPvPDailyAwards_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetPvPDailyAwards_SC& operator=(const MSG_RetPvPDailyAwards_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetPvPDailyAwards_SC& operator=(MSG_RetPvPDailyAwards_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetPvPDailyAwards_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetPvPDailyAwards_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetPvPDailyAwards_SC*>(
               &_MSG_RetPvPDailyAwards_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MSG_RetPvPDailyAwards_SC& a, MSG_RetPvPDailyAwards_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetPvPDailyAwards_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetPvPDailyAwards_SC* New() const final {
    return CreateMaybeMessage<MSG_RetPvPDailyAwards_SC>(nullptr);
  }

  MSG_RetPvPDailyAwards_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetPvPDailyAwards_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetPvPDailyAwards_SC& from);
  void MergeFrom(const MSG_RetPvPDailyAwards_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetPvPDailyAwards_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetPvPDailyAwards_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardlistFieldNumber = 2,
    kMatchtypeFieldNumber = 1,
  };
  // repeated .pvpmatchfight.PvPAwardItem rewardlist = 2;
  int rewardlist_size() const;
  private:
  int _internal_rewardlist_size() const;
  public:
  void clear_rewardlist();
  ::pvpmatchfight::PvPAwardItem* mutable_rewardlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pvpmatchfight::PvPAwardItem >*
      mutable_rewardlist();
  private:
  const ::pvpmatchfight::PvPAwardItem& _internal_rewardlist(int index) const;
  ::pvpmatchfight::PvPAwardItem* _internal_add_rewardlist();
  public:
  const ::pvpmatchfight::PvPAwardItem& rewardlist(int index) const;
  ::pvpmatchfight::PvPAwardItem* add_rewardlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pvpmatchfight::PvPAwardItem >&
      rewardlist() const;

  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pvpmatchfight::PvPAwardItem > rewardlist_;
  int matchtype_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetPvPPKGeneralConfig_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC) */ {
 public:
  MSG_RetPvPPKGeneralConfig_SC();
  virtual ~MSG_RetPvPPKGeneralConfig_SC();

  MSG_RetPvPPKGeneralConfig_SC(const MSG_RetPvPPKGeneralConfig_SC& from);
  MSG_RetPvPPKGeneralConfig_SC(MSG_RetPvPPKGeneralConfig_SC&& from) noexcept
    : MSG_RetPvPPKGeneralConfig_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetPvPPKGeneralConfig_SC& operator=(const MSG_RetPvPPKGeneralConfig_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetPvPPKGeneralConfig_SC& operator=(MSG_RetPvPPKGeneralConfig_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetPvPPKGeneralConfig_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetPvPPKGeneralConfig_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetPvPPKGeneralConfig_SC*>(
               &_MSG_RetPvPPKGeneralConfig_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MSG_RetPvPPKGeneralConfig_SC& a, MSG_RetPvPPKGeneralConfig_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetPvPPKGeneralConfig_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetPvPPKGeneralConfig_SC* New() const final {
    return CreateMaybeMessage<MSG_RetPvPPKGeneralConfig_SC>(nullptr);
  }

  MSG_RetPvPPKGeneralConfig_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetPvPPKGeneralConfig_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetPvPPKGeneralConfig_SC& from);
  void MergeFrom(const MSG_RetPvPPKGeneralConfig_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetPvPPKGeneralConfig_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchtypeFieldNumber = 1,
    kTeampknumFieldNumber = 2,
  };
  // required .msg.MATCHFIGHT matchtype = 1;
  bool has_matchtype() const;
  private:
  bool _internal_has_matchtype() const;
  public:
  void clear_matchtype();
  ::msg::MATCHFIGHT matchtype() const;
  void set_matchtype(::msg::MATCHFIGHT value);
  private:
  ::msg::MATCHFIGHT _internal_matchtype() const;
  void _internal_set_matchtype(::msg::MATCHFIGHT value);
  public:

  // optional uint32 teampknum = 2;
  bool has_teampknum() const;
  private:
  bool _internal_has_teampknum() const;
  public:
  void clear_teampknum();
  ::PROTOBUF_NAMESPACE_ID::uint32 teampknum() const;
  void set_teampknum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teampknum() const;
  void _internal_set_teampknum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int matchtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teampknum_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class onePlayerLive :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.onePlayerLive) */ {
 public:
  onePlayerLive();
  virtual ~onePlayerLive();

  onePlayerLive(const onePlayerLive& from);
  onePlayerLive(onePlayerLive&& from) noexcept
    : onePlayerLive() {
    *this = ::std::move(from);
  }

  inline onePlayerLive& operator=(const onePlayerLive& from) {
    CopyFrom(from);
    return *this;
  }
  inline onePlayerLive& operator=(onePlayerLive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const onePlayerLive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const onePlayerLive* internal_default_instance() {
    return reinterpret_cast<const onePlayerLive*>(
               &_onePlayerLive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(onePlayerLive& a, onePlayerLive& b) {
    a.Swap(&b);
  }
  inline void Swap(onePlayerLive* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline onePlayerLive* New() const final {
    return CreateMaybeMessage<onePlayerLive>(nullptr);
  }

  onePlayerLive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<onePlayerLive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const onePlayerLive& from);
  void MergeFrom(const onePlayerLive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(onePlayerLive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.onePlayerLive";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemidFieldNumber = 1,
    kHeroidFieldNumber = 2,
    kIsdeadFieldNumber = 3,
    kReliveleftsecsFieldNumber = 4,
  };
  // optional string memid = 1;
  bool has_memid() const;
  private:
  bool _internal_has_memid() const;
  public:
  void clear_memid();
  const std::string& memid() const;
  void set_memid(const std::string& value);
  void set_memid(std::string&& value);
  void set_memid(const char* value);
  void set_memid(const char* value, size_t size);
  std::string* mutable_memid();
  std::string* release_memid();
  void set_allocated_memid(std::string* memid);
  private:
  const std::string& _internal_memid() const;
  void _internal_set_memid(const std::string& value);
  std::string* _internal_mutable_memid();
  public:

  // optional uint32 heroid = 2;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid() const;
  void set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroid() const;
  void _internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool isdead = 3;
  bool has_isdead() const;
  private:
  bool _internal_has_isdead() const;
  public:
  void clear_isdead();
  bool isdead() const;
  void set_isdead(bool value);
  private:
  bool _internal_isdead() const;
  void _internal_set_isdead(bool value);
  public:

  // optional uint32 reliveleftsecs = 4;
  bool has_reliveleftsecs() const;
  private:
  bool _internal_has_reliveleftsecs() const;
  public:
  void clear_reliveleftsecs();
  ::PROTOBUF_NAMESPACE_ID::uint32 reliveleftsecs() const;
  void set_reliveleftsecs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reliveleftsecs() const;
  void _internal_set_reliveleftsecs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pvpmatchfight.onePlayerLive)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid_;
  bool isdead_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reliveleftsecs_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetPvPMatchFightCurLive_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC) */ {
 public:
  MSG_RetPvPMatchFightCurLive_SC();
  virtual ~MSG_RetPvPMatchFightCurLive_SC();

  MSG_RetPvPMatchFightCurLive_SC(const MSG_RetPvPMatchFightCurLive_SC& from);
  MSG_RetPvPMatchFightCurLive_SC(MSG_RetPvPMatchFightCurLive_SC&& from) noexcept
    : MSG_RetPvPMatchFightCurLive_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetPvPMatchFightCurLive_SC& operator=(const MSG_RetPvPMatchFightCurLive_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetPvPMatchFightCurLive_SC& operator=(MSG_RetPvPMatchFightCurLive_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetPvPMatchFightCurLive_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetPvPMatchFightCurLive_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetPvPMatchFightCurLive_SC*>(
               &_MSG_RetPvPMatchFightCurLive_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MSG_RetPvPMatchFightCurLive_SC& a, MSG_RetPvPMatchFightCurLive_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetPvPMatchFightCurLive_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetPvPMatchFightCurLive_SC* New() const final {
    return CreateMaybeMessage<MSG_RetPvPMatchFightCurLive_SC>(nullptr);
  }

  MSG_RetPvPMatchFightCurLive_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetPvPMatchFightCurLive_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetPvPMatchFightCurLive_SC& from);
  void MergeFrom(const MSG_RetPvPMatchFightCurLive_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetPvPMatchFightCurLive_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pvpmatchfight_2eproto);
    return ::descriptor_table_pvpmatchfight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneplayerFieldNumber = 1,
  };
  // repeated .pvpmatchfight.onePlayerLive oneplayer = 1;
  int oneplayer_size() const;
  private:
  int _internal_oneplayer_size() const;
  public:
  void clear_oneplayer();
  ::pvpmatchfight::onePlayerLive* mutable_oneplayer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pvpmatchfight::onePlayerLive >*
      mutable_oneplayer();
  private:
  const ::pvpmatchfight::onePlayerLive& _internal_oneplayer(int index) const;
  ::pvpmatchfight::onePlayerLive* _internal_add_oneplayer();
  public:
  const ::pvpmatchfight::onePlayerLive& oneplayer(int index) const;
  ::pvpmatchfight::onePlayerLive* add_oneplayer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pvpmatchfight::onePlayerLive >&
      oneplayer() const;

  // @@protoc_insertion_point(class_scope:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pvpmatchfight::onePlayerLive > oneplayer_;
  friend struct ::TableStruct_pvpmatchfight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_Req_StartPvPMatch_CS

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_Req_StartPvPMatch_CS::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_StartPvPMatch_CS::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_Req_StartPvPMatch_CS::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_Req_StartPvPMatch_CS::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_Req_StartPvPMatch_CS::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_Req_StartPvPMatch_CS.matchtype)
  return _internal_matchtype();
}
inline void MSG_Req_StartPvPMatch_CS::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_Req_StartPvPMatch_CS::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_Req_StartPvPMatch_CS.matchtype)
}

// -------------------------------------------------------------------

// MSG_Ret_StartPvPMatch_SC

// optional uint32 retcode = 1;
inline bool MSG_Ret_StartPvPMatch_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_StartPvPMatch_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_Ret_StartPvPMatch_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_StartPvPMatch_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_StartPvPMatch_SC::retcode() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_Ret_StartPvPMatch_SC.retcode)
  return _internal_retcode();
}
inline void MSG_Ret_StartPvPMatch_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  retcode_ = value;
}
inline void MSG_Ret_StartPvPMatch_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_Ret_StartPvPMatch_SC.retcode)
}

// required .msg.MATCHFIGHT matchtype = 2;
inline bool MSG_Ret_StartPvPMatch_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_StartPvPMatch_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_Ret_StartPvPMatch_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::msg::MATCHFIGHT MSG_Ret_StartPvPMatch_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_Ret_StartPvPMatch_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_Ret_StartPvPMatch_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_Ret_StartPvPMatch_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  matchtype_ = value;
}
inline void MSG_Ret_StartPvPMatch_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_Ret_StartPvPMatch_SC.matchtype)
}

// -------------------------------------------------------------------

// MSG_Req_CancelPvPMatch_CS

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_Req_CancelPvPMatch_CS::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_CancelPvPMatch_CS::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_Req_CancelPvPMatch_CS::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_Req_CancelPvPMatch_CS::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_Req_CancelPvPMatch_CS::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_Req_CancelPvPMatch_CS.matchtype)
  return _internal_matchtype();
}
inline void MSG_Req_CancelPvPMatch_CS::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_Req_CancelPvPMatch_CS::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_Req_CancelPvPMatch_CS.matchtype)
}

// -------------------------------------------------------------------

// MSG_Ret_CancelPvPMatch_SC

// optional uint32 retcode = 1;
inline bool MSG_Ret_CancelPvPMatch_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_CancelPvPMatch_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_Ret_CancelPvPMatch_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CancelPvPMatch_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_CancelPvPMatch_SC::retcode() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC.retcode)
  return _internal_retcode();
}
inline void MSG_Ret_CancelPvPMatch_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  retcode_ = value;
}
inline void MSG_Ret_CancelPvPMatch_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC.retcode)
}

// required .msg.MATCHFIGHT matchtype = 2;
inline bool MSG_Ret_CancelPvPMatch_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_CancelPvPMatch_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_Ret_CancelPvPMatch_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::msg::MATCHFIGHT MSG_Ret_CancelPvPMatch_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_Ret_CancelPvPMatch_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_Ret_CancelPvPMatch_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  matchtype_ = value;
}
inline void MSG_Ret_CancelPvPMatch_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC.matchtype)
}

// -------------------------------------------------------------------

// MSG_Ret_PvPMatchResult_SC

// optional uint32 retcode = 1;
inline bool MSG_Ret_PvPMatchResult_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_PvPMatchResult_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_Ret_PvPMatchResult_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_PvPMatchResult_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Ret_PvPMatchResult_SC::retcode() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_Ret_PvPMatchResult_SC.retcode)
  return _internal_retcode();
}
inline void MSG_Ret_PvPMatchResult_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  retcode_ = value;
}
inline void MSG_Ret_PvPMatchResult_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_Ret_PvPMatchResult_SC.retcode)
}

// required .msg.MATCHFIGHT matchtype = 2;
inline bool MSG_Ret_PvPMatchResult_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_PvPMatchResult_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_Ret_PvPMatchResult_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::msg::MATCHFIGHT MSG_Ret_PvPMatchResult_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_Ret_PvPMatchResult_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_Ret_PvPMatchResult_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_Ret_PvPMatchResult_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  matchtype_ = value;
}
inline void MSG_Ret_PvPMatchResult_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_Ret_PvPMatchResult_SC.matchtype)
}

// -------------------------------------------------------------------

// MSG_Req_GotoPvPBattle_CS

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_Req_GotoPvPBattle_CS::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_GotoPvPBattle_CS::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_Req_GotoPvPBattle_CS::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_Req_GotoPvPBattle_CS::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_Req_GotoPvPBattle_CS::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_Req_GotoPvPBattle_CS.matchtype)
  return _internal_matchtype();
}
inline void MSG_Req_GotoPvPBattle_CS::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_Req_GotoPvPBattle_CS::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_Req_GotoPvPBattle_CS.matchtype)
}

// -------------------------------------------------------------------

// MSG_ReqChoosePvPPrepared_CS

// -------------------------------------------------------------------

// MSG_RetChoosePvPPrepared_SC

// optional uint32 errcode = 1;
inline bool MSG_RetChoosePvPPrepared_SC::_internal_has_errcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetChoosePvPPrepared_SC::has_errcode() const {
  return _internal_has_errcode();
}
inline void MSG_RetChoosePvPPrepared_SC::clear_errcode() {
  errcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetChoosePvPPrepared_SC::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetChoosePvPPrepared_SC::errcode() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetChoosePvPPrepared_SC.errcode)
  return _internal_errcode();
}
inline void MSG_RetChoosePvPPrepared_SC::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  errcode_ = value;
}
inline void MSG_RetChoosePvPPrepared_SC::set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetChoosePvPPrepared_SC.errcode)
}

// -------------------------------------------------------------------

// MSG_RetStartPvPPrepare_SC

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_RetStartPvPPrepare_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetStartPvPPrepare_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_RetStartPvPPrepare_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_RetStartPvPPrepare_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_RetStartPvPPrepare_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetStartPvPPrepare_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_RetStartPvPPrepare_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_RetStartPvPPrepare_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetStartPvPPrepare_SC.matchtype)
}

// optional uint32 duration = 2;
inline bool MSG_RetStartPvPPrepare_SC::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetStartPvPPrepare_SC::has_duration() const {
  return _internal_has_duration();
}
inline void MSG_RetStartPvPPrepare_SC::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetStartPvPPrepare_SC::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetStartPvPPrepare_SC::duration() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetStartPvPPrepare_SC.duration)
  return _internal_duration();
}
inline void MSG_RetStartPvPPrepare_SC::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  duration_ = value;
}
inline void MSG_RetStartPvPPrepare_SC::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetStartPvPPrepare_SC.duration)
}

// -------------------------------------------------------------------

// MSG_RetPvPFightCountDown_SC

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_RetPvPFightCountDown_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetPvPFightCountDown_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_RetPvPFightCountDown_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_RetPvPFightCountDown_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_RetPvPFightCountDown_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightCountDown_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_RetPvPFightCountDown_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_RetPvPFightCountDown_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPFightCountDown_SC.matchtype)
}

// optional uint32 duration = 2;
inline bool MSG_RetPvPFightCountDown_SC::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetPvPFightCountDown_SC::has_duration() const {
  return _internal_has_duration();
}
inline void MSG_RetPvPFightCountDown_SC::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPFightCountDown_SC::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPFightCountDown_SC::duration() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightCountDown_SC.duration)
  return _internal_duration();
}
inline void MSG_RetPvPFightCountDown_SC::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  duration_ = value;
}
inline void MSG_RetPvPFightCountDown_SC::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPFightCountDown_SC.duration)
}

// -------------------------------------------------------------------

// MSG_RetPvPFightPreFight_SC

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_RetPvPFightPreFight_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetPvPFightPreFight_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_RetPvPFightPreFight_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_RetPvPFightPreFight_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_RetPvPFightPreFight_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightPreFight_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_RetPvPFightPreFight_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_RetPvPFightPreFight_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPFightPreFight_SC.matchtype)
}

// optional uint32 duration = 2;
inline bool MSG_RetPvPFightPreFight_SC::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetPvPFightPreFight_SC::has_duration() const {
  return _internal_has_duration();
}
inline void MSG_RetPvPFightPreFight_SC::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPFightPreFight_SC::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPFightPreFight_SC::duration() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightPreFight_SC.duration)
  return _internal_duration();
}
inline void MSG_RetPvPFightPreFight_SC::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  duration_ = value;
}
inline void MSG_RetPvPFightPreFight_SC::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPFightPreFight_SC.duration)
}

// -------------------------------------------------------------------

// MSG_RetStartPvPFight_SC

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_RetStartPvPFight_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetStartPvPFight_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_RetStartPvPFight_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_RetStartPvPFight_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_RetStartPvPFight_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetStartPvPFight_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_RetStartPvPFight_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_RetStartPvPFight_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetStartPvPFight_SC.matchtype)
}

// optional uint32 duration = 2;
inline bool MSG_RetStartPvPFight_SC::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetStartPvPFight_SC::has_duration() const {
  return _internal_has_duration();
}
inline void MSG_RetStartPvPFight_SC::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetStartPvPFight_SC::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetStartPvPFight_SC::duration() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetStartPvPFight_SC.duration)
  return _internal_duration();
}
inline void MSG_RetStartPvPFight_SC::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  duration_ = value;
}
inline void MSG_RetStartPvPFight_SC::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetStartPvPFight_SC.duration)
}

// -------------------------------------------------------------------

// MSG_RetPvPSpeedupFight_SC

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_RetPvPSpeedupFight_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetPvPSpeedupFight_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_RetPvPSpeedupFight_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_RetPvPSpeedupFight_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_RetPvPSpeedupFight_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPSpeedupFight_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_RetPvPSpeedupFight_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_RetPvPSpeedupFight_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPSpeedupFight_SC.matchtype)
}

// optional uint32 duration = 2;
inline bool MSG_RetPvPSpeedupFight_SC::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetPvPSpeedupFight_SC::has_duration() const {
  return _internal_has_duration();
}
inline void MSG_RetPvPSpeedupFight_SC::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPSpeedupFight_SC::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPSpeedupFight_SC::duration() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPSpeedupFight_SC.duration)
  return _internal_duration();
}
inline void MSG_RetPvPSpeedupFight_SC::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  duration_ = value;
}
inline void MSG_RetPvPSpeedupFight_SC::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPSpeedupFight_SC.duration)
}

// -------------------------------------------------------------------

// MSG_RetPvPFightFinish_SC

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_RetPvPFightFinish_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetPvPFightFinish_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_RetPvPFightFinish_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::msg::MATCHFIGHT MSG_RetPvPFightFinish_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_RetPvPFightFinish_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightFinish_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_RetPvPFightFinish_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  matchtype_ = value;
}
inline void MSG_RetPvPFightFinish_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPFightFinish_SC.matchtype)
}

// optional uint32 duration = 2;
inline bool MSG_RetPvPFightFinish_SC::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_RetPvPFightFinish_SC::has_duration() const {
  return _internal_has_duration();
}
inline void MSG_RetPvPFightFinish_SC::clear_duration() {
  duration_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPFightFinish_SC::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPFightFinish_SC::duration() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightFinish_SC.duration)
  return _internal_duration();
}
inline void MSG_RetPvPFightFinish_SC::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ = value;
}
inline void MSG_RetPvPFightFinish_SC::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPFightFinish_SC.duration)
}

// required .msg.FIGHTRESULT result = 3;
inline bool MSG_RetPvPFightFinish_SC::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_RetPvPFightFinish_SC::has_result() const {
  return _internal_has_result();
}
inline void MSG_RetPvPFightFinish_SC::clear_result() {
  result_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::msg::FIGHTRESULT MSG_RetPvPFightFinish_SC::_internal_result() const {
  return static_cast< ::msg::FIGHTRESULT >(result_);
}
inline ::msg::FIGHTRESULT MSG_RetPvPFightFinish_SC::result() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightFinish_SC.result)
  return _internal_result();
}
inline void MSG_RetPvPFightFinish_SC::_internal_set_result(::msg::FIGHTRESULT value) {
  assert(::msg::FIGHTRESULT_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  result_ = value;
}
inline void MSG_RetPvPFightFinish_SC::set_result(::msg::FIGHTRESULT value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPFightFinish_SC.result)
}

// optional .pvpmatchfight.PvPAwardItem award = 4;
inline bool MSG_RetPvPFightFinish_SC::_internal_has_award() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || award_ != nullptr);
  return value;
}
inline bool MSG_RetPvPFightFinish_SC::has_award() const {
  return _internal_has_award();
}
inline void MSG_RetPvPFightFinish_SC::clear_award() {
  if (award_ != nullptr) award_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pvpmatchfight::PvPAwardItem& MSG_RetPvPFightFinish_SC::_internal_award() const {
  const ::pvpmatchfight::PvPAwardItem* p = award_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pvpmatchfight::PvPAwardItem*>(
      &::pvpmatchfight::_PvPAwardItem_default_instance_);
}
inline const ::pvpmatchfight::PvPAwardItem& MSG_RetPvPFightFinish_SC::award() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightFinish_SC.award)
  return _internal_award();
}
inline ::pvpmatchfight::PvPAwardItem* MSG_RetPvPFightFinish_SC::release_award() {
  // @@protoc_insertion_point(field_release:pvpmatchfight.MSG_RetPvPFightFinish_SC.award)
  _has_bits_[0] &= ~0x00000001u;
  ::pvpmatchfight::PvPAwardItem* temp = award_;
  award_ = nullptr;
  return temp;
}
inline ::pvpmatchfight::PvPAwardItem* MSG_RetPvPFightFinish_SC::_internal_mutable_award() {
  _has_bits_[0] |= 0x00000001u;
  if (award_ == nullptr) {
    auto* p = CreateMaybeMessage<::pvpmatchfight::PvPAwardItem>(GetArenaNoVirtual());
    award_ = p;
  }
  return award_;
}
inline ::pvpmatchfight::PvPAwardItem* MSG_RetPvPFightFinish_SC::mutable_award() {
  // @@protoc_insertion_point(field_mutable:pvpmatchfight.MSG_RetPvPFightFinish_SC.award)
  return _internal_mutable_award();
}
inline void MSG_RetPvPFightFinish_SC::set_allocated_award(::pvpmatchfight::PvPAwardItem* award) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete award_;
  }
  if (award) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      award = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, award, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  award_ = award;
  // @@protoc_insertion_point(field_set_allocated:pvpmatchfight.MSG_RetPvPFightFinish_SC.award)
}

// -------------------------------------------------------------------

// MSG_ReqPvPFightCurStage_CS

// -------------------------------------------------------------------

// MSG_RetPvPFightCurStage_SC

// required .msg.StageType curstage = 1;
inline bool MSG_RetPvPFightCurStage_SC::_internal_has_curstage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_RetPvPFightCurStage_SC::has_curstage() const {
  return _internal_has_curstage();
}
inline void MSG_RetPvPFightCurStage_SC::clear_curstage() {
  curstage_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::msg::StageType MSG_RetPvPFightCurStage_SC::_internal_curstage() const {
  return static_cast< ::msg::StageType >(curstage_);
}
inline ::msg::StageType MSG_RetPvPFightCurStage_SC::curstage() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightCurStage_SC.curstage)
  return _internal_curstage();
}
inline void MSG_RetPvPFightCurStage_SC::_internal_set_curstage(::msg::StageType value) {
  assert(::msg::StageType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  curstage_ = value;
}
inline void MSG_RetPvPFightCurStage_SC::set_curstage(::msg::StageType value) {
  _internal_set_curstage(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPFightCurStage_SC.curstage)
}

// optional uint32 leftsecs = 2;
inline bool MSG_RetPvPFightCurStage_SC::_internal_has_leftsecs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_RetPvPFightCurStage_SC::has_leftsecs() const {
  return _internal_has_leftsecs();
}
inline void MSG_RetPvPFightCurStage_SC::clear_leftsecs() {
  leftsecs_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPFightCurStage_SC::_internal_leftsecs() const {
  return leftsecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPFightCurStage_SC::leftsecs() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightCurStage_SC.leftsecs)
  return _internal_leftsecs();
}
inline void MSG_RetPvPFightCurStage_SC::_internal_set_leftsecs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  leftsecs_ = value;
}
inline void MSG_RetPvPFightCurStage_SC::set_leftsecs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leftsecs(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPFightCurStage_SC.leftsecs)
}

// optional .pvpmatchfight.MSG_RetPvPTeamCurScore_SC scoreinfo = 3;
inline bool MSG_RetPvPFightCurStage_SC::_internal_has_scoreinfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || scoreinfo_ != nullptr);
  return value;
}
inline bool MSG_RetPvPFightCurStage_SC::has_scoreinfo() const {
  return _internal_has_scoreinfo();
}
inline void MSG_RetPvPFightCurStage_SC::clear_scoreinfo() {
  if (scoreinfo_ != nullptr) scoreinfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC& MSG_RetPvPFightCurStage_SC::_internal_scoreinfo() const {
  const ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* p = scoreinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC*>(
      &::pvpmatchfight::_MSG_RetPvPTeamCurScore_SC_default_instance_);
}
inline const ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC& MSG_RetPvPFightCurStage_SC::scoreinfo() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightCurStage_SC.scoreinfo)
  return _internal_scoreinfo();
}
inline ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* MSG_RetPvPFightCurStage_SC::release_scoreinfo() {
  // @@protoc_insertion_point(field_release:pvpmatchfight.MSG_RetPvPFightCurStage_SC.scoreinfo)
  _has_bits_[0] &= ~0x00000001u;
  ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* temp = scoreinfo_;
  scoreinfo_ = nullptr;
  return temp;
}
inline ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* MSG_RetPvPFightCurStage_SC::_internal_mutable_scoreinfo() {
  _has_bits_[0] |= 0x00000001u;
  if (scoreinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPTeamCurScore_SC>(GetArenaNoVirtual());
    scoreinfo_ = p;
  }
  return scoreinfo_;
}
inline ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* MSG_RetPvPFightCurStage_SC::mutable_scoreinfo() {
  // @@protoc_insertion_point(field_mutable:pvpmatchfight.MSG_RetPvPFightCurStage_SC.scoreinfo)
  return _internal_mutable_scoreinfo();
}
inline void MSG_RetPvPFightCurStage_SC::set_allocated_scoreinfo(::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* scoreinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scoreinfo_;
  }
  if (scoreinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scoreinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scoreinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scoreinfo_ = scoreinfo;
  // @@protoc_insertion_point(field_set_allocated:pvpmatchfight.MSG_RetPvPFightCurStage_SC.scoreinfo)
}

// optional .pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC liveinfo = 4;
inline bool MSG_RetPvPFightCurStage_SC::_internal_has_liveinfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || liveinfo_ != nullptr);
  return value;
}
inline bool MSG_RetPvPFightCurStage_SC::has_liveinfo() const {
  return _internal_has_liveinfo();
}
inline void MSG_RetPvPFightCurStage_SC::clear_liveinfo() {
  if (liveinfo_ != nullptr) liveinfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC& MSG_RetPvPFightCurStage_SC::_internal_liveinfo() const {
  const ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* p = liveinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC*>(
      &::pvpmatchfight::_MSG_RetPvPMatchFightCurLive_SC_default_instance_);
}
inline const ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC& MSG_RetPvPFightCurStage_SC::liveinfo() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPFightCurStage_SC.liveinfo)
  return _internal_liveinfo();
}
inline ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* MSG_RetPvPFightCurStage_SC::release_liveinfo() {
  // @@protoc_insertion_point(field_release:pvpmatchfight.MSG_RetPvPFightCurStage_SC.liveinfo)
  _has_bits_[0] &= ~0x00000002u;
  ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* temp = liveinfo_;
  liveinfo_ = nullptr;
  return temp;
}
inline ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* MSG_RetPvPFightCurStage_SC::_internal_mutable_liveinfo() {
  _has_bits_[0] |= 0x00000002u;
  if (liveinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC>(GetArenaNoVirtual());
    liveinfo_ = p;
  }
  return liveinfo_;
}
inline ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* MSG_RetPvPFightCurStage_SC::mutable_liveinfo() {
  // @@protoc_insertion_point(field_mutable:pvpmatchfight.MSG_RetPvPFightCurStage_SC.liveinfo)
  return _internal_mutable_liveinfo();
}
inline void MSG_RetPvPFightCurStage_SC::set_allocated_liveinfo(::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* liveinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete liveinfo_;
  }
  if (liveinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      liveinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liveinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  liveinfo_ = liveinfo;
  // @@protoc_insertion_point(field_set_allocated:pvpmatchfight.MSG_RetPvPFightCurStage_SC.liveinfo)
}

// -------------------------------------------------------------------

// MSG_RetPvPTeamCurScore_SC

// optional uint32 team1id = 1;
inline bool MSG_RetPvPTeamCurScore_SC::_internal_has_team1id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetPvPTeamCurScore_SC::has_team1id() const {
  return _internal_has_team1id();
}
inline void MSG_RetPvPTeamCurScore_SC::clear_team1id() {
  team1id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPTeamCurScore_SC::_internal_team1id() const {
  return team1id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPTeamCurScore_SC::team1id() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPTeamCurScore_SC.team1id)
  return _internal_team1id();
}
inline void MSG_RetPvPTeamCurScore_SC::_internal_set_team1id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  team1id_ = value;
}
inline void MSG_RetPvPTeamCurScore_SC::set_team1id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team1id(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPTeamCurScore_SC.team1id)
}

// optional uint32 team1score = 2;
inline bool MSG_RetPvPTeamCurScore_SC::_internal_has_team1score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetPvPTeamCurScore_SC::has_team1score() const {
  return _internal_has_team1score();
}
inline void MSG_RetPvPTeamCurScore_SC::clear_team1score() {
  team1score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPTeamCurScore_SC::_internal_team1score() const {
  return team1score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPTeamCurScore_SC::team1score() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPTeamCurScore_SC.team1score)
  return _internal_team1score();
}
inline void MSG_RetPvPTeamCurScore_SC::_internal_set_team1score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team1score_ = value;
}
inline void MSG_RetPvPTeamCurScore_SC::set_team1score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team1score(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPTeamCurScore_SC.team1score)
}

// optional uint32 team2id = 3;
inline bool MSG_RetPvPTeamCurScore_SC::_internal_has_team2id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_RetPvPTeamCurScore_SC::has_team2id() const {
  return _internal_has_team2id();
}
inline void MSG_RetPvPTeamCurScore_SC::clear_team2id() {
  team2id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPTeamCurScore_SC::_internal_team2id() const {
  return team2id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPTeamCurScore_SC::team2id() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPTeamCurScore_SC.team2id)
  return _internal_team2id();
}
inline void MSG_RetPvPTeamCurScore_SC::_internal_set_team2id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  team2id_ = value;
}
inline void MSG_RetPvPTeamCurScore_SC::set_team2id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team2id(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPTeamCurScore_SC.team2id)
}

// optional uint32 team2score = 4;
inline bool MSG_RetPvPTeamCurScore_SC::_internal_has_team2score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_RetPvPTeamCurScore_SC::has_team2score() const {
  return _internal_has_team2score();
}
inline void MSG_RetPvPTeamCurScore_SC::clear_team2score() {
  team2score_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPTeamCurScore_SC::_internal_team2score() const {
  return team2score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPTeamCurScore_SC::team2score() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPTeamCurScore_SC.team2score)
  return _internal_team2score();
}
inline void MSG_RetPvPTeamCurScore_SC::_internal_set_team2score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team2score_ = value;
}
inline void MSG_RetPvPTeamCurScore_SC::set_team2score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team2score(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPTeamCurScore_SC.team2score)
}

// -------------------------------------------------------------------

// MSG_RetPvPPreparedNum_SC

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_RetPvPPreparedNum_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetPvPPreparedNum_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_RetPvPPreparedNum_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_RetPvPPreparedNum_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_RetPvPPreparedNum_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPPreparedNum_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_RetPvPPreparedNum_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_RetPvPPreparedNum_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPPreparedNum_SC.matchtype)
}

// optional uint32 curnum = 2;
inline bool MSG_RetPvPPreparedNum_SC::_internal_has_curnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetPvPPreparedNum_SC::has_curnum() const {
  return _internal_has_curnum();
}
inline void MSG_RetPvPPreparedNum_SC::clear_curnum() {
  curnum_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPPreparedNum_SC::_internal_curnum() const {
  return curnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPPreparedNum_SC::curnum() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPPreparedNum_SC.curnum)
  return _internal_curnum();
}
inline void MSG_RetPvPPreparedNum_SC::_internal_set_curnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  curnum_ = value;
}
inline void MSG_RetPvPPreparedNum_SC::set_curnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_curnum(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPPreparedNum_SC.curnum)
}

// optional uint32 allnum = 3;
inline bool MSG_RetPvPPreparedNum_SC::_internal_has_allnum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_RetPvPPreparedNum_SC::has_allnum() const {
  return _internal_has_allnum();
}
inline void MSG_RetPvPPreparedNum_SC::clear_allnum() {
  allnum_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPPreparedNum_SC::_internal_allnum() const {
  return allnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPPreparedNum_SC::allnum() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPPreparedNum_SC.allnum)
  return _internal_allnum();
}
inline void MSG_RetPvPPreparedNum_SC::_internal_set_allnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  allnum_ = value;
}
inline void MSG_RetPvPPreparedNum_SC::set_allnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_allnum(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPPreparedNum_SC.allnum)
}

// -------------------------------------------------------------------

// PvPAwardItem

// required .msg.FIGHTRESULT result = 1;
inline bool PvPAwardItem::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PvPAwardItem::has_result() const {
  return _internal_has_result();
}
inline void PvPAwardItem::clear_result() {
  result_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::msg::FIGHTRESULT PvPAwardItem::_internal_result() const {
  return static_cast< ::msg::FIGHTRESULT >(result_);
}
inline ::msg::FIGHTRESULT PvPAwardItem::result() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.PvPAwardItem.result)
  return _internal_result();
}
inline void PvPAwardItem::_internal_set_result(::msg::FIGHTRESULT value) {
  assert(::msg::FIGHTRESULT_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void PvPAwardItem::set_result(::msg::FIGHTRESULT value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.PvPAwardItem.result)
}

// repeated .basic.ObjectItem item = 2;
inline int PvPAwardItem::_internal_item_size() const {
  return item_.size();
}
inline int PvPAwardItem::item_size() const {
  return _internal_item_size();
}
inline ::basic::ObjectItem* PvPAwardItem::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:pvpmatchfight.PvPAwardItem.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::basic::ObjectItem >*
PvPAwardItem::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:pvpmatchfight.PvPAwardItem.item)
  return &item_;
}
inline const ::basic::ObjectItem& PvPAwardItem::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::basic::ObjectItem& PvPAwardItem::item(int index) const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.PvPAwardItem.item)
  return _internal_item(index);
}
inline ::basic::ObjectItem* PvPAwardItem::_internal_add_item() {
  return item_.Add();
}
inline ::basic::ObjectItem* PvPAwardItem::add_item() {
  // @@protoc_insertion_point(field_add:pvpmatchfight.PvPAwardItem.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::basic::ObjectItem >&
PvPAwardItem::item() const {
  // @@protoc_insertion_point(field_list:pvpmatchfight.PvPAwardItem.item)
  return item_;
}

// optional uint32 heroid = 3;
inline bool PvPAwardItem::_internal_has_heroid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PvPAwardItem::has_heroid() const {
  return _internal_has_heroid();
}
inline void PvPAwardItem::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PvPAwardItem::_internal_heroid() const {
  return heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PvPAwardItem::heroid() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.PvPAwardItem.heroid)
  return _internal_heroid();
}
inline void PvPAwardItem::_internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  heroid_ = value;
}
inline void PvPAwardItem::set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.PvPAwardItem.heroid)
}

// -------------------------------------------------------------------

// MSG_ReqPvPDailyAwards_CS

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_ReqPvPDailyAwards_CS::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqPvPDailyAwards_CS::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_ReqPvPDailyAwards_CS::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_ReqPvPDailyAwards_CS::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_ReqPvPDailyAwards_CS::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_ReqPvPDailyAwards_CS.matchtype)
  return _internal_matchtype();
}
inline void MSG_ReqPvPDailyAwards_CS::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_ReqPvPDailyAwards_CS::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_ReqPvPDailyAwards_CS.matchtype)
}

// -------------------------------------------------------------------

// MSG_RetPvPDailyAwards_SC

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_RetPvPDailyAwards_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetPvPDailyAwards_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_RetPvPDailyAwards_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_RetPvPDailyAwards_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_RetPvPDailyAwards_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPDailyAwards_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_RetPvPDailyAwards_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_RetPvPDailyAwards_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPDailyAwards_SC.matchtype)
}

// repeated .pvpmatchfight.PvPAwardItem rewardlist = 2;
inline int MSG_RetPvPDailyAwards_SC::_internal_rewardlist_size() const {
  return rewardlist_.size();
}
inline int MSG_RetPvPDailyAwards_SC::rewardlist_size() const {
  return _internal_rewardlist_size();
}
inline void MSG_RetPvPDailyAwards_SC::clear_rewardlist() {
  rewardlist_.Clear();
}
inline ::pvpmatchfight::PvPAwardItem* MSG_RetPvPDailyAwards_SC::mutable_rewardlist(int index) {
  // @@protoc_insertion_point(field_mutable:pvpmatchfight.MSG_RetPvPDailyAwards_SC.rewardlist)
  return rewardlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pvpmatchfight::PvPAwardItem >*
MSG_RetPvPDailyAwards_SC::mutable_rewardlist() {
  // @@protoc_insertion_point(field_mutable_list:pvpmatchfight.MSG_RetPvPDailyAwards_SC.rewardlist)
  return &rewardlist_;
}
inline const ::pvpmatchfight::PvPAwardItem& MSG_RetPvPDailyAwards_SC::_internal_rewardlist(int index) const {
  return rewardlist_.Get(index);
}
inline const ::pvpmatchfight::PvPAwardItem& MSG_RetPvPDailyAwards_SC::rewardlist(int index) const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPDailyAwards_SC.rewardlist)
  return _internal_rewardlist(index);
}
inline ::pvpmatchfight::PvPAwardItem* MSG_RetPvPDailyAwards_SC::_internal_add_rewardlist() {
  return rewardlist_.Add();
}
inline ::pvpmatchfight::PvPAwardItem* MSG_RetPvPDailyAwards_SC::add_rewardlist() {
  // @@protoc_insertion_point(field_add:pvpmatchfight.MSG_RetPvPDailyAwards_SC.rewardlist)
  return _internal_add_rewardlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pvpmatchfight::PvPAwardItem >&
MSG_RetPvPDailyAwards_SC::rewardlist() const {
  // @@protoc_insertion_point(field_list:pvpmatchfight.MSG_RetPvPDailyAwards_SC.rewardlist)
  return rewardlist_;
}

// -------------------------------------------------------------------

// MSG_RetPvPPKGeneralConfig_SC

// required .msg.MATCHFIGHT matchtype = 1;
inline bool MSG_RetPvPPKGeneralConfig_SC::_internal_has_matchtype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetPvPPKGeneralConfig_SC::has_matchtype() const {
  return _internal_has_matchtype();
}
inline void MSG_RetPvPPKGeneralConfig_SC::clear_matchtype() {
  matchtype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::msg::MATCHFIGHT MSG_RetPvPPKGeneralConfig_SC::_internal_matchtype() const {
  return static_cast< ::msg::MATCHFIGHT >(matchtype_);
}
inline ::msg::MATCHFIGHT MSG_RetPvPPKGeneralConfig_SC::matchtype() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC.matchtype)
  return _internal_matchtype();
}
inline void MSG_RetPvPPKGeneralConfig_SC::_internal_set_matchtype(::msg::MATCHFIGHT value) {
  assert(::msg::MATCHFIGHT_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  matchtype_ = value;
}
inline void MSG_RetPvPPKGeneralConfig_SC::set_matchtype(::msg::MATCHFIGHT value) {
  _internal_set_matchtype(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC.matchtype)
}

// optional uint32 teampknum = 2;
inline bool MSG_RetPvPPKGeneralConfig_SC::_internal_has_teampknum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetPvPPKGeneralConfig_SC::has_teampknum() const {
  return _internal_has_teampknum();
}
inline void MSG_RetPvPPKGeneralConfig_SC::clear_teampknum() {
  teampknum_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPPKGeneralConfig_SC::_internal_teampknum() const {
  return teampknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetPvPPKGeneralConfig_SC::teampknum() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC.teampknum)
  return _internal_teampknum();
}
inline void MSG_RetPvPPKGeneralConfig_SC::_internal_set_teampknum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  teampknum_ = value;
}
inline void MSG_RetPvPPKGeneralConfig_SC::set_teampknum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teampknum(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC.teampknum)
}

// -------------------------------------------------------------------

// onePlayerLive

// optional string memid = 1;
inline bool onePlayerLive::_internal_has_memid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool onePlayerLive::has_memid() const {
  return _internal_has_memid();
}
inline void onePlayerLive::clear_memid() {
  memid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& onePlayerLive::memid() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.onePlayerLive.memid)
  return _internal_memid();
}
inline void onePlayerLive::set_memid(const std::string& value) {
  _internal_set_memid(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.onePlayerLive.memid)
}
inline std::string* onePlayerLive::mutable_memid() {
  // @@protoc_insertion_point(field_mutable:pvpmatchfight.onePlayerLive.memid)
  return _internal_mutable_memid();
}
inline const std::string& onePlayerLive::_internal_memid() const {
  return memid_.GetNoArena();
}
inline void onePlayerLive::_internal_set_memid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void onePlayerLive::set_memid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pvpmatchfight.onePlayerLive.memid)
}
inline void onePlayerLive::set_memid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pvpmatchfight.onePlayerLive.memid)
}
inline void onePlayerLive::set_memid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pvpmatchfight.onePlayerLive.memid)
}
inline std::string* onePlayerLive::_internal_mutable_memid() {
  _has_bits_[0] |= 0x00000001u;
  return memid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* onePlayerLive::release_memid() {
  // @@protoc_insertion_point(field_release:pvpmatchfight.onePlayerLive.memid)
  if (!_internal_has_memid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void onePlayerLive::set_allocated_memid(std::string* memid) {
  if (memid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memid);
  // @@protoc_insertion_point(field_set_allocated:pvpmatchfight.onePlayerLive.memid)
}

// optional uint32 heroid = 2;
inline bool onePlayerLive::_internal_has_heroid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool onePlayerLive::has_heroid() const {
  return _internal_has_heroid();
}
inline void onePlayerLive::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 onePlayerLive::_internal_heroid() const {
  return heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 onePlayerLive::heroid() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.onePlayerLive.heroid)
  return _internal_heroid();
}
inline void onePlayerLive::_internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  heroid_ = value;
}
inline void onePlayerLive::set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.onePlayerLive.heroid)
}

// optional bool isdead = 3;
inline bool onePlayerLive::_internal_has_isdead() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool onePlayerLive::has_isdead() const {
  return _internal_has_isdead();
}
inline void onePlayerLive::clear_isdead() {
  isdead_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool onePlayerLive::_internal_isdead() const {
  return isdead_;
}
inline bool onePlayerLive::isdead() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.onePlayerLive.isdead)
  return _internal_isdead();
}
inline void onePlayerLive::_internal_set_isdead(bool value) {
  _has_bits_[0] |= 0x00000004u;
  isdead_ = value;
}
inline void onePlayerLive::set_isdead(bool value) {
  _internal_set_isdead(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.onePlayerLive.isdead)
}

// optional uint32 reliveleftsecs = 4;
inline bool onePlayerLive::_internal_has_reliveleftsecs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool onePlayerLive::has_reliveleftsecs() const {
  return _internal_has_reliveleftsecs();
}
inline void onePlayerLive::clear_reliveleftsecs() {
  reliveleftsecs_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 onePlayerLive::_internal_reliveleftsecs() const {
  return reliveleftsecs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 onePlayerLive::reliveleftsecs() const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.onePlayerLive.reliveleftsecs)
  return _internal_reliveleftsecs();
}
inline void onePlayerLive::_internal_set_reliveleftsecs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  reliveleftsecs_ = value;
}
inline void onePlayerLive::set_reliveleftsecs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reliveleftsecs(value);
  // @@protoc_insertion_point(field_set:pvpmatchfight.onePlayerLive.reliveleftsecs)
}

// -------------------------------------------------------------------

// MSG_RetPvPMatchFightCurLive_SC

// repeated .pvpmatchfight.onePlayerLive oneplayer = 1;
inline int MSG_RetPvPMatchFightCurLive_SC::_internal_oneplayer_size() const {
  return oneplayer_.size();
}
inline int MSG_RetPvPMatchFightCurLive_SC::oneplayer_size() const {
  return _internal_oneplayer_size();
}
inline void MSG_RetPvPMatchFightCurLive_SC::clear_oneplayer() {
  oneplayer_.Clear();
}
inline ::pvpmatchfight::onePlayerLive* MSG_RetPvPMatchFightCurLive_SC::mutable_oneplayer(int index) {
  // @@protoc_insertion_point(field_mutable:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC.oneplayer)
  return oneplayer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pvpmatchfight::onePlayerLive >*
MSG_RetPvPMatchFightCurLive_SC::mutable_oneplayer() {
  // @@protoc_insertion_point(field_mutable_list:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC.oneplayer)
  return &oneplayer_;
}
inline const ::pvpmatchfight::onePlayerLive& MSG_RetPvPMatchFightCurLive_SC::_internal_oneplayer(int index) const {
  return oneplayer_.Get(index);
}
inline const ::pvpmatchfight::onePlayerLive& MSG_RetPvPMatchFightCurLive_SC::oneplayer(int index) const {
  // @@protoc_insertion_point(field_get:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC.oneplayer)
  return _internal_oneplayer(index);
}
inline ::pvpmatchfight::onePlayerLive* MSG_RetPvPMatchFightCurLive_SC::_internal_add_oneplayer() {
  return oneplayer_.Add();
}
inline ::pvpmatchfight::onePlayerLive* MSG_RetPvPMatchFightCurLive_SC::add_oneplayer() {
  // @@protoc_insertion_point(field_add:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC.oneplayer)
  return _internal_add_oneplayer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pvpmatchfight::onePlayerLive >&
MSG_RetPvPMatchFightCurLive_SC::oneplayer() const {
  // @@protoc_insertion_point(field_list:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC.oneplayer)
  return oneplayer_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pvpmatchfight

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pvpmatchfight_2eproto
