// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatData_chat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatLink_chat_2eproto;
namespace Chat {
class MSG_Req_ChannleChat_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ChannleChat_CS> _instance;
} _MSG_Req_ChannleChat_CS_default_instance_;
class MSG_Ret_ChannelChat_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_ChannelChat_SC> _instance;
} _MSG_Ret_ChannelChat_SC_default_instance_;
class ChatLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatLink> _instance;
} _ChatLink_default_instance_;
class ChatDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChatData> _instance;
} _ChatData_default_instance_;
class MSG_Req_Chat_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Chat_CS> _instance;
} _MSG_Req_Chat_CS_default_instance_;
class MSG_Ret_Chat_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Chat_SC> _instance;
} _MSG_Ret_Chat_SC_default_instance_;
class MSG_Req_ChatUserInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ChatUserInfo_CS> _instance;
} _MSG_Req_ChatUserInfo_CS_default_instance_;
class MSG_Ret_ChatUserInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_ChatUserInfo_SC> _instance;
} _MSG_Ret_ChatUserInfo_SC_default_instance_;
class MSG_Req_OfflineChat_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_OfflineChat_CS> _instance;
} _MSG_Req_OfflineChat_CS_default_instance_;
class MSG_Ret_OfflineChat_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_OfflineChat_SC> _instance;
} _MSG_Ret_OfflineChat_SC_default_instance_;
class MSG_Req_ImportantBroadcast_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ImportantBroadcast_CS> _instance;
} _MSG_Req_ImportantBroadcast_CS_default_instance_;
}  // namespace Chat
static void InitDefaultsscc_info_ChatData_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_ChatData_default_instance_;
    new (ptr) ::Chat::ChatData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::ChatData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatData_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChatData_chat_2eproto}, {
      &scc_info_ChatLink_chat_2eproto.base,}};

static void InitDefaultsscc_info_ChatLink_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_ChatLink_default_instance_;
    new (ptr) ::Chat::ChatLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::ChatLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChatLink_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChatLink_chat_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_ChannleChat_CS_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_MSG_Req_ChannleChat_CS_default_instance_;
    new (ptr) ::Chat::MSG_Req_ChannleChat_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::MSG_Req_ChannleChat_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ChannleChat_CS_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ChannleChat_CS_chat_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_ChatUserInfo_CS_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_MSG_Req_ChatUserInfo_CS_default_instance_;
    new (ptr) ::Chat::MSG_Req_ChatUserInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::MSG_Req_ChatUserInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ChatUserInfo_CS_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ChatUserInfo_CS_chat_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_Chat_CS_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_MSG_Req_Chat_CS_default_instance_;
    new (ptr) ::Chat::MSG_Req_Chat_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::MSG_Req_Chat_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_Chat_CS_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_Chat_CS_chat_2eproto}, {
      &scc_info_ChatData_chat_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_ImportantBroadcast_CS_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_MSG_Req_ImportantBroadcast_CS_default_instance_;
    new (ptr) ::Chat::MSG_Req_ImportantBroadcast_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::MSG_Req_ImportantBroadcast_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ImportantBroadcast_CS_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ImportantBroadcast_CS_chat_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_OfflineChat_CS_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_MSG_Req_OfflineChat_CS_default_instance_;
    new (ptr) ::Chat::MSG_Req_OfflineChat_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::MSG_Req_OfflineChat_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_OfflineChat_CS_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_OfflineChat_CS_chat_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_ChannelChat_SC_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_MSG_Ret_ChannelChat_SC_default_instance_;
    new (ptr) ::Chat::MSG_Ret_ChannelChat_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::MSG_Ret_ChannelChat_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_ChannelChat_SC_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_ChannelChat_SC_chat_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_ChatUserInfo_SC_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_MSG_Ret_ChatUserInfo_SC_default_instance_;
    new (ptr) ::Chat::MSG_Ret_ChatUserInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::MSG_Ret_ChatUserInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_ChatUserInfo_SC_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_ChatUserInfo_SC_chat_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_Chat_SC_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_MSG_Ret_Chat_SC_default_instance_;
    new (ptr) ::Chat::MSG_Ret_Chat_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::MSG_Ret_Chat_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_Chat_SC_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_Chat_SC_chat_2eproto}, {
      &scc_info_ChatData_chat_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_OfflineChat_SC_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_MSG_Ret_OfflineChat_SC_default_instance_;
    new (ptr) ::Chat::MSG_Ret_OfflineChat_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::MSG_Ret_OfflineChat_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_OfflineChat_SC_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_OfflineChat_SC_chat_2eproto}, {
      &scc_info_ChatData_chat_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chat_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_ChannleChat_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_ChannleChat_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_ChannleChat_CS, str_chat_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_ChannleChat_CS, src_name_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_ChannleChat_CS, channel_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChannelChat_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChannelChat_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChannelChat_SC, str_chat_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChannelChat_SC, src_name_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChannelChat_SC, textid_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChannelChat_SC, channel_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Chat::ChatLink, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::ChatLink, linktype_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatLink, data_args_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, channel_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, charid_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, charname_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, charcountry_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, chattime_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, content_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, link_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, show_type_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, tocharid_),
  PROTOBUF_FIELD_OFFSET(::Chat::ChatData, toname_),
  4,
  3,
  0,
  5,
  6,
  1,
  ~0u,
  7,
  8,
  2,
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_Chat_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_Chat_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_Chat_CS, data_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_Chat_CS, shake_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_Chat_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_Chat_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_Chat_SC, data_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_Chat_SC, shake_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_ChatUserInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_ChatUserInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_ChatUserInfo_CS, otherid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChatUserInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChatUserInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChatUserInfo_SC, charid_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChatUserInfo_SC, charname_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChatUserInfo_SC, level_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChatUserInfo_SC, occupation_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChatUserInfo_SC, occupationlevel_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChatUserInfo_SC, can_take_master_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_ChatUserInfo_SC, can_take_apprent_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_OfflineChat_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_OfflineChat_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_OfflineChat_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_OfflineChat_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Ret_OfflineChat_SC, datas_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_ImportantBroadcast_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::MSG_Req_ImportantBroadcast_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::Chat::MSG_Req_ChannleChat_CS)},
  { 11, 20, sizeof(::Chat::MSG_Ret_ChannelChat_SC)},
  { 24, 31, sizeof(::Chat::ChatLink)},
  { 33, 48, sizeof(::Chat::ChatData)},
  { 58, 65, sizeof(::Chat::MSG_Req_Chat_CS)},
  { 67, 74, sizeof(::Chat::MSG_Ret_Chat_SC)},
  { 76, 82, sizeof(::Chat::MSG_Req_ChatUserInfo_CS)},
  { 83, 95, sizeof(::Chat::MSG_Ret_ChatUserInfo_SC)},
  { 102, 107, sizeof(::Chat::MSG_Req_OfflineChat_CS)},
  { 107, 113, sizeof(::Chat::MSG_Ret_OfflineChat_SC)},
  { 114, 119, sizeof(::Chat::MSG_Req_ImportantBroadcast_CS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_MSG_Req_ChannleChat_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_MSG_Ret_ChannelChat_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_ChatLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_ChatData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_MSG_Req_Chat_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_MSG_Ret_Chat_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_MSG_Req_ChatUserInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_MSG_Ret_ChatUserInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_MSG_Req_OfflineChat_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_MSG_Ret_OfflineChat_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_MSG_Req_ImportantBroadcast_CS_default_instance_),
};

const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nchat.proto\022\004Chat\"e\n\026MSG_Req_ChannleCha"
  "t_CS\022\020\n\010str_chat\030\001 \001(\t\022\020\n\010src_name\030\002 \001(\t"
  "\022\'\n\014channel_type\030\003 \001(\0162\021.Chat.ChannelTyp"
  "e\"u\n\026MSG_Ret_ChannelChat_SC\022\020\n\010str_chat\030"
  "\001 \001(\t\022\020\n\010src_name\030\002 \001(\t\022\016\n\006textid\030\003 \001(\r\022"
  "\'\n\014channel_type\030\004 \001(\0162\021.Chat.ChannelType"
  "\"/\n\010ChatLink\022\020\n\010linktype\030\001 \001(\r\022\021\n\tdata_a"
  "rgs\030\002 \003(\t\"\310\001\n\010ChatData\022\017\n\007channel\030\001 \001(\r\022"
  "\016\n\006charid\030\002 \001(\004\022\020\n\010charname\030\003 \001(\t\022\023\n\013cha"
  "rcountry\030\004 \001(\r\022\020\n\010chattime\030\005 \001(\r\022\017\n\007cont"
  "ent\030\006 \001(\t\022\034\n\004link\030\007 \003(\0132\016.Chat.ChatLink\022"
  "\021\n\tshow_type\030\010 \001(\r\022\020\n\010tocharid\030\t \001(\004\022\016\n\006"
  "toname\030\n \001(\t\">\n\017MSG_Req_Chat_CS\022\034\n\004data\030"
  "\001 \001(\0132\016.Chat.ChatData\022\r\n\005shake\030\002 \001(\010\">\n\017"
  "MSG_Ret_Chat_SC\022\034\n\004data\030\001 \001(\0132\016.Chat.Cha"
  "tData\022\r\n\005shake\030\002 \001(\010\"*\n\027MSG_Req_ChatUser"
  "Info_CS\022\017\n\007otherid\030\001 \001(\004\"\270\001\n\027MSG_Ret_Cha"
  "tUserInfo_SC\022\016\n\006charid\030\001 \001(\004\022\020\n\010charname"
  "\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\022\n\noccupation\030\004 \001("
  "\r\022\027\n\017occupationlevel\030\005 \001(\r\022\036\n\017can_take_m"
  "aster\030\006 \001(\010:\005false\022\037\n\020can_take_apprent\030\007"
  " \001(\010:\005false\"\030\n\026MSG_Req_OfflineChat_CS\"7\n"
  "\026MSG_Ret_OfflineChat_SC\022\035\n\005datas\030\001 \003(\0132\016"
  ".Chat.ChatData\"\037\n\035MSG_Req_ImportantBroad"
  "cast_CS*\210\002\n\013ChannelType\022\024\n\020ChannelType_N"
  "one\020\000\022\023\n\017ChannelType_Sys\020\001\022\024\n\020ChannelTyp"
  "e_Team\020\002\022\025\n\021ChannelType_Guild\020\003\022\024\n\020Chann"
  "elType_Camp\020\004\022\025\n\021ChannelType_World\020\005\022\025\n\021"
  "ChannelType_Scene\020\006\022\027\n\023ChannelType_Priva"
  "te\020\007\022\026\n\022ChannelType_GmTool\020\010\022\024\n\020ChannelT"
  "ype_Moba\020\t\022\026\n\022ChannelType_Secret\020\n*\317\001\n\014C"
  "hatShowType\022\033\n\027ChatShowType_MessageBox\020\001"
  "\022\024\n\020ChatShowType_Sys\020\002\022\031\n\025ChatShowType_T"
  "ips_Red\020\003\022\033\n\027ChatShowType_Tips_Green\020\004\022\034"
  "\n\030ChatShowType_Tips_BossPk\020\005\022\032\n\026ChatShow"
  "Type_Tips_Task\020\006\022\032\n\026ChatShowType_TimerTi"
  "ps\020\007*=\n\014ChatTextType\022\026\n\022ChatTextType_Pla"
  "in\020\001\022\025\n\021ChatTextType_Rich\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chat_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chat_2eproto_sccs[11] = {
  &scc_info_ChatData_chat_2eproto.base,
  &scc_info_ChatLink_chat_2eproto.base,
  &scc_info_MSG_Req_ChannleChat_CS_chat_2eproto.base,
  &scc_info_MSG_Req_ChatUserInfo_CS_chat_2eproto.base,
  &scc_info_MSG_Req_Chat_CS_chat_2eproto.base,
  &scc_info_MSG_Req_ImportantBroadcast_CS_chat_2eproto.base,
  &scc_info_MSG_Req_OfflineChat_CS_chat_2eproto.base,
  &scc_info_MSG_Ret_ChannelChat_SC_chat_2eproto.base,
  &scc_info_MSG_Ret_ChatUserInfo_SC_chat_2eproto.base,
  &scc_info_MSG_Ret_Chat_SC_chat_2eproto.base,
  &scc_info_MSG_Ret_OfflineChat_SC_chat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2eproto_once;
static bool descriptor_table_chat_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto = {
  &descriptor_table_chat_2eproto_initialized, descriptor_table_protodef_chat_2eproto, "chat.proto", 1507,
  &descriptor_table_chat_2eproto_once, descriptor_table_chat_2eproto_sccs, descriptor_table_chat_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_chat_2eproto::offsets,
  file_level_metadata_chat_2eproto, 11, file_level_enum_descriptors_chat_2eproto, file_level_service_descriptors_chat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chat_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chat_2eproto)), true);
namespace Chat {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[0];
}
bool ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatShowType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[1];
}
bool ChatShowType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChatTextType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[2];
}
bool ChatTextType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MSG_Req_ChannleChat_CS::InitAsDefaultInstance() {
}
class MSG_Req_ChannleChat_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ChannleChat_CS>()._has_bits_);
  static void set_has_str_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_src_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Req_ChannleChat_CS::MSG_Req_ChannleChat_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.MSG_Req_ChannleChat_CS)
}
MSG_Req_ChannleChat_CS::MSG_Req_ChannleChat_CS(const MSG_Req_ChannleChat_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_chat()) {
    str_chat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_chat_);
  }
  src_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_name()) {
    src_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_name_);
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:Chat.MSG_Req_ChannleChat_CS)
}

void MSG_Req_ChannleChat_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_ChannleChat_CS_chat_2eproto.base);
  str_chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_type_ = 0;
}

MSG_Req_ChannleChat_CS::~MSG_Req_ChannleChat_CS() {
  // @@protoc_insertion_point(destructor:Chat.MSG_Req_ChannleChat_CS)
  SharedDtor();
}

void MSG_Req_ChannleChat_CS::SharedDtor() {
  str_chat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_ChannleChat_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ChannleChat_CS& MSG_Req_ChannleChat_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ChannleChat_CS_chat_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ChannleChat_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.MSG_Req_ChannleChat_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      str_chat_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      src_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  channel_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ChannleChat_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string str_chat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str_chat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.MSG_Req_ChannleChat_CS.str_chat");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string src_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_src_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.MSG_Req_ChannleChat_CS.src_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Chat.ChannelType channel_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Chat::ChannelType_IsValid(val))) {
            _internal_set_channel_type(static_cast<::Chat::ChannelType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ChannleChat_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.MSG_Req_ChannleChat_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str_chat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_chat().data(), static_cast<int>(this->_internal_str_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Chat.MSG_Req_ChannleChat_CS.str_chat");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str_chat(), target);
  }

  // optional string src_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_name().data(), static_cast<int>(this->_internal_src_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Chat.MSG_Req_ChannleChat_CS.src_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src_name(), target);
  }

  // optional .Chat.ChannelType channel_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_channel_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.MSG_Req_ChannleChat_CS)
  return target;
}

size_t MSG_Req_ChannleChat_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.MSG_Req_ChannleChat_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string str_chat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_chat());
    }

    // optional string src_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src_name());
    }

    // optional .Chat.ChannelType channel_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ChannleChat_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.MSG_Req_ChannleChat_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ChannleChat_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ChannleChat_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.MSG_Req_ChannleChat_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.MSG_Req_ChannleChat_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ChannleChat_CS::MergeFrom(const MSG_Req_ChannleChat_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.MSG_Req_ChannleChat_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      str_chat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_chat_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      src_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_ChannleChat_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.MSG_Req_ChannleChat_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ChannleChat_CS::CopyFrom(const MSG_Req_ChannleChat_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.MSG_Req_ChannleChat_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ChannleChat_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ChannleChat_CS::InternalSwap(MSG_Req_ChannleChat_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_chat_.Swap(&other->str_chat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  src_name_.Swap(&other->src_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_type_, other->channel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ChannleChat_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_ChannelChat_SC::InitAsDefaultInstance() {
}
class MSG_Ret_ChannelChat_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_ChannelChat_SC>()._has_bits_);
  static void set_has_str_chat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_src_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_textid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_Ret_ChannelChat_SC::MSG_Ret_ChannelChat_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.MSG_Ret_ChannelChat_SC)
}
MSG_Ret_ChannelChat_SC::MSG_Ret_ChannelChat_SC(const MSG_Ret_ChannelChat_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  str_chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_str_chat()) {
    str_chat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_chat_);
  }
  src_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_src_name()) {
    src_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_name_);
  }
  ::memcpy(&textid_, &from.textid_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&textid_)) + sizeof(channel_type_));
  // @@protoc_insertion_point(copy_constructor:Chat.MSG_Ret_ChannelChat_SC)
}

void MSG_Ret_ChannelChat_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_ChannelChat_SC_chat_2eproto.base);
  str_chat_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&textid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_type_) -
      reinterpret_cast<char*>(&textid_)) + sizeof(channel_type_));
}

MSG_Ret_ChannelChat_SC::~MSG_Ret_ChannelChat_SC() {
  // @@protoc_insertion_point(destructor:Chat.MSG_Ret_ChannelChat_SC)
  SharedDtor();
}

void MSG_Ret_ChannelChat_SC::SharedDtor() {
  str_chat_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  src_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_ChannelChat_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_ChannelChat_SC& MSG_Ret_ChannelChat_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_ChannelChat_SC_chat_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_ChannelChat_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.MSG_Ret_ChannelChat_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      str_chat_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      src_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&textid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_type_) -
        reinterpret_cast<char*>(&textid_)) + sizeof(channel_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_ChannelChat_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string str_chat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_str_chat();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.MSG_Ret_ChannelChat_SC.str_chat");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string src_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_src_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.MSG_Ret_ChannelChat_SC.src_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 textid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_textid(&has_bits);
          textid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Chat.ChannelType channel_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Chat::ChannelType_IsValid(val))) {
            _internal_set_channel_type(static_cast<::Chat::ChannelType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_ChannelChat_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.MSG_Ret_ChannelChat_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string str_chat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_str_chat().data(), static_cast<int>(this->_internal_str_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Chat.MSG_Ret_ChannelChat_SC.str_chat");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str_chat(), target);
  }

  // optional string src_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_src_name().data(), static_cast<int>(this->_internal_src_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Chat.MSG_Ret_ChannelChat_SC.src_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src_name(), target);
  }

  // optional uint32 textid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_textid(), target);
  }

  // optional .Chat.ChannelType channel_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_channel_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.MSG_Ret_ChannelChat_SC)
  return target;
}

size_t MSG_Ret_ChannelChat_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.MSG_Ret_ChannelChat_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string str_chat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_chat());
    }

    // optional string src_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src_name());
    }

    // optional uint32 textid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_textid());
    }

    // optional .Chat.ChannelType channel_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channel_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_ChannelChat_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.MSG_Ret_ChannelChat_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_ChannelChat_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_ChannelChat_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.MSG_Ret_ChannelChat_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.MSG_Ret_ChannelChat_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_ChannelChat_SC::MergeFrom(const MSG_Ret_ChannelChat_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.MSG_Ret_ChannelChat_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      str_chat_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.str_chat_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      src_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.src_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      textid_ = from.textid_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_ChannelChat_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.MSG_Ret_ChannelChat_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_ChannelChat_SC::CopyFrom(const MSG_Ret_ChannelChat_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.MSG_Ret_ChannelChat_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_ChannelChat_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_ChannelChat_SC::InternalSwap(MSG_Ret_ChannelChat_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_chat_.Swap(&other->str_chat_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  src_name_.Swap(&other->src_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(textid_, other->textid_);
  swap(channel_type_, other->channel_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_ChannelChat_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatLink::InitAsDefaultInstance() {
}
class ChatLink::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatLink>()._has_bits_);
  static void set_has_linktype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ChatLink::ChatLink()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.ChatLink)
}
ChatLink::ChatLink(const ChatLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_args_(from.data_args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  linktype_ = from.linktype_;
  // @@protoc_insertion_point(copy_constructor:Chat.ChatLink)
}

void ChatLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatLink_chat_2eproto.base);
  linktype_ = 0u;
}

ChatLink::~ChatLink() {
  // @@protoc_insertion_point(destructor:Chat.ChatLink)
  SharedDtor();
}

void ChatLink::SharedDtor() {
}

void ChatLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatLink& ChatLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatLink_chat_2eproto.base);
  return *internal_default_instance();
}


void ChatLink::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.ChatLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_args_.Clear();
  linktype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChatLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 linktype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_linktype(&has_bits);
          linktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string data_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data_args();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.ChatLink.data_args");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatLink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.ChatLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 linktype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_linktype(), target);
  }

  // repeated string data_args = 2;
  for (int i = 0, n = this->_internal_data_args_size(); i < n; i++) {
    const auto& s = this->_internal_data_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Chat.ChatLink.data_args");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.ChatLink)
  return target;
}

size_t ChatLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.ChatLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data_args = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_args_.size());
  for (int i = 0, n = data_args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      data_args_.Get(i));
  }

  // optional uint32 linktype = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_linktype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.ChatLink)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.ChatLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.ChatLink)
    MergeFrom(*source);
  }
}

void ChatLink::MergeFrom(const ChatLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.ChatLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_args_.MergeFrom(from.data_args_);
  if (from._internal_has_linktype()) {
    _internal_set_linktype(from._internal_linktype());
  }
}

void ChatLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.ChatLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatLink::CopyFrom(const ChatLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.ChatLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatLink::IsInitialized() const {
  return true;
}

void ChatLink::InternalSwap(ChatLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_args_.InternalSwap(&other->data_args_);
  swap(linktype_, other->linktype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChatData::InitAsDefaultInstance() {
}
class ChatData::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatData>()._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_charname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_charcountry(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_chattime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tocharid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_toname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ChatData::ChatData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.ChatData)
}
ChatData::ChatData(const ChatData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      link_(from.link_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_charname()) {
    charname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charname_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_content()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  toname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_toname()) {
    toname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toname_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tocharid_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(tocharid_));
  // @@protoc_insertion_point(copy_constructor:Chat.ChatData)
}

void ChatData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChatData_chat_2eproto.base);
  charname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tocharid_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(tocharid_));
}

ChatData::~ChatData() {
  // @@protoc_insertion_point(destructor:Chat.ChatData)
  SharedDtor();
}

void ChatData::SharedDtor() {
  charname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChatData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChatData& ChatData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChatData_chat_2eproto.base);
  return *internal_default_instance();
}


void ChatData::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.ChatData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      charname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      toname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_type_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(show_type_));
  }
  tocharid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChatData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 charid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string charname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_charname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.ChatData.charname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 charcountry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_charcountry(&has_bits);
          charcountry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 chattime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_chattime(&has_bits);
          chattime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.ChatData.content");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Chat.ChatLink link = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 show_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_show_type(&has_bits);
          show_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tocharid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tocharid(&has_bits);
          tocharid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string toname = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_toname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.ChatData.toname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChatData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.ChatData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  // optional uint64 charid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_charid(), target);
  }

  // optional string charname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_charname().data(), static_cast<int>(this->_internal_charname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Chat.ChatData.charname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_charname(), target);
  }

  // optional uint32 charcountry = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_charcountry(), target);
  }

  // optional uint32 chattime = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_chattime(), target);
  }

  // optional string content = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Chat.ChatData.content");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content(), target);
  }

  // repeated .Chat.ChatLink link = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_link_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_link(i), target, stream);
  }

  // optional uint32 show_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_show_type(), target);
  }

  // optional uint64 tocharid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_tocharid(), target);
  }

  // optional string toname = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toname().data(), static_cast<int>(this->_internal_toname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Chat.ChatData.toname");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_toname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.ChatData)
  return target;
}

size_t ChatData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.ChatData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Chat.ChatLink link = 7;
  total_size += 1UL * this->_internal_link_size();
  for (const auto& msg : this->link_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string charname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_charname());
    }

    // optional string content = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional string toname = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_toname());
    }

    // optional uint64 charid = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 channel = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_channel());
    }

    // optional uint32 charcountry = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_charcountry());
    }

    // optional uint32 chattime = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chattime());
    }

    // optional uint32 show_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_show_type());
    }

  }
  // optional uint64 tocharid = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tocharid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.ChatData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChatData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.ChatData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.ChatData)
    MergeFrom(*source);
  }
}

void ChatData::MergeFrom(const ChatData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.ChatData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  link_.MergeFrom(from.link_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      charname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      toname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toname_);
    }
    if (cached_has_bits & 0x00000008u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000020u) {
      charcountry_ = from.charcountry_;
    }
    if (cached_has_bits & 0x00000040u) {
      chattime_ = from.chattime_;
    }
    if (cached_has_bits & 0x00000080u) {
      show_type_ = from.show_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_tocharid(from._internal_tocharid());
  }
}

void ChatData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.ChatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatData::CopyFrom(const ChatData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.ChatData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatData::IsInitialized() const {
  return true;
}

void ChatData::InternalSwap(ChatData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  link_.InternalSwap(&other->link_);
  charname_.Swap(&other->charname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  toname_.Swap(&other->toname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(channel_, other->channel_);
  swap(charcountry_, other->charcountry_);
  swap(chattime_, other->chattime_);
  swap(show_type_, other->show_type_);
  swap(tocharid_, other->tocharid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Chat_CS::InitAsDefaultInstance() {
  ::Chat::_MSG_Req_Chat_CS_default_instance_._instance.get_mutable()->data_ = const_cast< ::Chat::ChatData*>(
      ::Chat::ChatData::internal_default_instance());
}
class MSG_Req_Chat_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Chat_CS>()._has_bits_);
  static const ::Chat::ChatData& data(const MSG_Req_Chat_CS* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shake(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Chat::ChatData&
MSG_Req_Chat_CS::_Internal::data(const MSG_Req_Chat_CS* msg) {
  return *msg->data_;
}
MSG_Req_Chat_CS::MSG_Req_Chat_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.MSG_Req_Chat_CS)
}
MSG_Req_Chat_CS::MSG_Req_Chat_CS(const MSG_Req_Chat_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::Chat::ChatData(*from.data_);
  } else {
    data_ = nullptr;
  }
  shake_ = from.shake_;
  // @@protoc_insertion_point(copy_constructor:Chat.MSG_Req_Chat_CS)
}

void MSG_Req_Chat_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_Chat_CS_chat_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shake_) -
      reinterpret_cast<char*>(&data_)) + sizeof(shake_));
}

MSG_Req_Chat_CS::~MSG_Req_Chat_CS() {
  // @@protoc_insertion_point(destructor:Chat.MSG_Req_Chat_CS)
  SharedDtor();
}

void MSG_Req_Chat_CS::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void MSG_Req_Chat_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Chat_CS& MSG_Req_Chat_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Chat_CS_chat_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Chat_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.MSG_Req_Chat_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  shake_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Chat_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Chat.ChatData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shake(&has_bits);
          shake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Chat_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.MSG_Req_Chat_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Chat.ChatData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional bool shake = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_shake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.MSG_Req_Chat_CS)
  return target;
}

size_t MSG_Req_Chat_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.MSG_Req_Chat_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Chat.ChatData data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional bool shake = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Chat_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.MSG_Req_Chat_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Chat_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Chat_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.MSG_Req_Chat_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.MSG_Req_Chat_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_Chat_CS::MergeFrom(const MSG_Req_Chat_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.MSG_Req_Chat_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_data()->::Chat::ChatData::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      shake_ = from.shake_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_Chat_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.MSG_Req_Chat_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Chat_CS::CopyFrom(const MSG_Req_Chat_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.MSG_Req_Chat_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Chat_CS::IsInitialized() const {
  return true;
}

void MSG_Req_Chat_CS::InternalSwap(MSG_Req_Chat_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
  swap(shake_, other->shake_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Chat_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Chat_SC::InitAsDefaultInstance() {
  ::Chat::_MSG_Ret_Chat_SC_default_instance_._instance.get_mutable()->data_ = const_cast< ::Chat::ChatData*>(
      ::Chat::ChatData::internal_default_instance());
}
class MSG_Ret_Chat_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Chat_SC>()._has_bits_);
  static const ::Chat::ChatData& data(const MSG_Ret_Chat_SC* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shake(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Chat::ChatData&
MSG_Ret_Chat_SC::_Internal::data(const MSG_Ret_Chat_SC* msg) {
  return *msg->data_;
}
MSG_Ret_Chat_SC::MSG_Ret_Chat_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.MSG_Ret_Chat_SC)
}
MSG_Ret_Chat_SC::MSG_Ret_Chat_SC(const MSG_Ret_Chat_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::Chat::ChatData(*from.data_);
  } else {
    data_ = nullptr;
  }
  shake_ = from.shake_;
  // @@protoc_insertion_point(copy_constructor:Chat.MSG_Ret_Chat_SC)
}

void MSG_Ret_Chat_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_Chat_SC_chat_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shake_) -
      reinterpret_cast<char*>(&data_)) + sizeof(shake_));
}

MSG_Ret_Chat_SC::~MSG_Ret_Chat_SC() {
  // @@protoc_insertion_point(destructor:Chat.MSG_Ret_Chat_SC)
  SharedDtor();
}

void MSG_Ret_Chat_SC::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void MSG_Ret_Chat_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Chat_SC& MSG_Ret_Chat_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Chat_SC_chat_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Chat_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.MSG_Ret_Chat_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  shake_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Chat_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Chat.ChatData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool shake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shake(&has_bits);
          shake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Chat_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.MSG_Ret_Chat_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Chat.ChatData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional bool shake = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_shake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.MSG_Ret_Chat_SC)
  return target;
}

size_t MSG_Ret_Chat_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.MSG_Ret_Chat_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Chat.ChatData data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional bool shake = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Chat_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.MSG_Ret_Chat_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Chat_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Chat_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.MSG_Ret_Chat_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.MSG_Ret_Chat_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Chat_SC::MergeFrom(const MSG_Ret_Chat_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.MSG_Ret_Chat_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_data()->::Chat::ChatData::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      shake_ = from.shake_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_Chat_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.MSG_Ret_Chat_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Chat_SC::CopyFrom(const MSG_Ret_Chat_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.MSG_Ret_Chat_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Chat_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Chat_SC::InternalSwap(MSG_Ret_Chat_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
  swap(shake_, other->shake_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Chat_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ChatUserInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_ChatUserInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ChatUserInfo_CS>()._has_bits_);
  static void set_has_otherid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_ChatUserInfo_CS::MSG_Req_ChatUserInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.MSG_Req_ChatUserInfo_CS)
}
MSG_Req_ChatUserInfo_CS::MSG_Req_ChatUserInfo_CS(const MSG_Req_ChatUserInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  otherid_ = from.otherid_;
  // @@protoc_insertion_point(copy_constructor:Chat.MSG_Req_ChatUserInfo_CS)
}

void MSG_Req_ChatUserInfo_CS::SharedCtor() {
  otherid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Req_ChatUserInfo_CS::~MSG_Req_ChatUserInfo_CS() {
  // @@protoc_insertion_point(destructor:Chat.MSG_Req_ChatUserInfo_CS)
  SharedDtor();
}

void MSG_Req_ChatUserInfo_CS::SharedDtor() {
}

void MSG_Req_ChatUserInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ChatUserInfo_CS& MSG_Req_ChatUserInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ChatUserInfo_CS_chat_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ChatUserInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.MSG_Req_ChatUserInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  otherid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ChatUserInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 otherid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_otherid(&has_bits);
          otherid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ChatUserInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.MSG_Req_ChatUserInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 otherid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_otherid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.MSG_Req_ChatUserInfo_CS)
  return target;
}

size_t MSG_Req_ChatUserInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.MSG_Req_ChatUserInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 otherid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_otherid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ChatUserInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.MSG_Req_ChatUserInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ChatUserInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ChatUserInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.MSG_Req_ChatUserInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.MSG_Req_ChatUserInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ChatUserInfo_CS::MergeFrom(const MSG_Req_ChatUserInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.MSG_Req_ChatUserInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_otherid()) {
    _internal_set_otherid(from._internal_otherid());
  }
}

void MSG_Req_ChatUserInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.MSG_Req_ChatUserInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ChatUserInfo_CS::CopyFrom(const MSG_Req_ChatUserInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.MSG_Req_ChatUserInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ChatUserInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ChatUserInfo_CS::InternalSwap(MSG_Req_ChatUserInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(otherid_, other->otherid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ChatUserInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_ChatUserInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_ChatUserInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_ChatUserInfo_SC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_charname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_occupation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_occupationlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_can_take_master(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_can_take_apprent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

MSG_Ret_ChatUserInfo_SC::MSG_Ret_ChatUserInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.MSG_Ret_ChatUserInfo_SC)
}
MSG_Ret_ChatUserInfo_SC::MSG_Ret_ChatUserInfo_SC(const MSG_Ret_ChatUserInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_charname()) {
    charname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charname_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&can_take_apprent_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(can_take_apprent_));
  // @@protoc_insertion_point(copy_constructor:Chat.MSG_Ret_ChatUserInfo_SC)
}

void MSG_Ret_ChatUserInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_ChatUserInfo_SC_chat_2eproto.base);
  charname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_take_apprent_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(can_take_apprent_));
}

MSG_Ret_ChatUserInfo_SC::~MSG_Ret_ChatUserInfo_SC() {
  // @@protoc_insertion_point(destructor:Chat.MSG_Ret_ChatUserInfo_SC)
  SharedDtor();
}

void MSG_Ret_ChatUserInfo_SC::SharedDtor() {
  charname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_ChatUserInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_ChatUserInfo_SC& MSG_Ret_ChatUserInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_ChatUserInfo_SC_chat_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_ChatUserInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.MSG_Ret_ChatUserInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    charname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&can_take_apprent_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(can_take_apprent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_ChatUserInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string charname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_charname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Chat.MSG_Ret_ChatUserInfo_SC.charname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 occupation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_occupation(&has_bits);
          occupation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 occupationlevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_occupationlevel(&has_bits);
          occupationlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_take_master = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_can_take_master(&has_bits);
          can_take_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool can_take_apprent = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_can_take_apprent(&has_bits);
          can_take_apprent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_ChatUserInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.MSG_Ret_ChatUserInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional string charname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_charname().data(), static_cast<int>(this->_internal_charname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Chat.MSG_Ret_ChatUserInfo_SC.charname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_charname(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 occupation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_occupation(), target);
  }

  // optional uint32 occupationlevel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_occupationlevel(), target);
  }

  // optional bool can_take_master = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_can_take_master(), target);
  }

  // optional bool can_take_apprent = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_can_take_apprent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.MSG_Ret_ChatUserInfo_SC)
  return target;
}

size_t MSG_Ret_ChatUserInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.MSG_Ret_ChatUserInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string charname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_charname());
    }

    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 occupation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_occupation());
    }

    // optional uint32 occupationlevel = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_occupationlevel());
    }

    // optional bool can_take_master = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool can_take_apprent = 7 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_ChatUserInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.MSG_Ret_ChatUserInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_ChatUserInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_ChatUserInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.MSG_Ret_ChatUserInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.MSG_Ret_ChatUserInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_ChatUserInfo_SC::MergeFrom(const MSG_Ret_ChatUserInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.MSG_Ret_ChatUserInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      charname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charname_);
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      occupation_ = from.occupation_;
    }
    if (cached_has_bits & 0x00000010u) {
      occupationlevel_ = from.occupationlevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      can_take_master_ = from.can_take_master_;
    }
    if (cached_has_bits & 0x00000040u) {
      can_take_apprent_ = from.can_take_apprent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_ChatUserInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.MSG_Ret_ChatUserInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_ChatUserInfo_SC::CopyFrom(const MSG_Ret_ChatUserInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.MSG_Ret_ChatUserInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_ChatUserInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_ChatUserInfo_SC::InternalSwap(MSG_Ret_ChatUserInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  charname_.Swap(&other->charname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(level_, other->level_);
  swap(occupation_, other->occupation_);
  swap(occupationlevel_, other->occupationlevel_);
  swap(can_take_master_, other->can_take_master_);
  swap(can_take_apprent_, other->can_take_apprent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_ChatUserInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_OfflineChat_CS::InitAsDefaultInstance() {
}
class MSG_Req_OfflineChat_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_OfflineChat_CS>()._has_bits_);
};

MSG_Req_OfflineChat_CS::MSG_Req_OfflineChat_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.MSG_Req_OfflineChat_CS)
}
MSG_Req_OfflineChat_CS::MSG_Req_OfflineChat_CS(const MSG_Req_OfflineChat_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Chat.MSG_Req_OfflineChat_CS)
}

void MSG_Req_OfflineChat_CS::SharedCtor() {
}

MSG_Req_OfflineChat_CS::~MSG_Req_OfflineChat_CS() {
  // @@protoc_insertion_point(destructor:Chat.MSG_Req_OfflineChat_CS)
  SharedDtor();
}

void MSG_Req_OfflineChat_CS::SharedDtor() {
}

void MSG_Req_OfflineChat_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_OfflineChat_CS& MSG_Req_OfflineChat_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_OfflineChat_CS_chat_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_OfflineChat_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.MSG_Req_OfflineChat_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_OfflineChat_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_OfflineChat_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.MSG_Req_OfflineChat_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.MSG_Req_OfflineChat_CS)
  return target;
}

size_t MSG_Req_OfflineChat_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.MSG_Req_OfflineChat_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_OfflineChat_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.MSG_Req_OfflineChat_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_OfflineChat_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_OfflineChat_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.MSG_Req_OfflineChat_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.MSG_Req_OfflineChat_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_OfflineChat_CS::MergeFrom(const MSG_Req_OfflineChat_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.MSG_Req_OfflineChat_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_OfflineChat_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.MSG_Req_OfflineChat_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_OfflineChat_CS::CopyFrom(const MSG_Req_OfflineChat_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.MSG_Req_OfflineChat_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_OfflineChat_CS::IsInitialized() const {
  return true;
}

void MSG_Req_OfflineChat_CS::InternalSwap(MSG_Req_OfflineChat_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_OfflineChat_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_OfflineChat_SC::InitAsDefaultInstance() {
}
class MSG_Ret_OfflineChat_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_OfflineChat_SC>()._has_bits_);
};

MSG_Ret_OfflineChat_SC::MSG_Ret_OfflineChat_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.MSG_Ret_OfflineChat_SC)
}
MSG_Ret_OfflineChat_SC::MSG_Ret_OfflineChat_SC(const MSG_Ret_OfflineChat_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Chat.MSG_Ret_OfflineChat_SC)
}

void MSG_Ret_OfflineChat_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_OfflineChat_SC_chat_2eproto.base);
}

MSG_Ret_OfflineChat_SC::~MSG_Ret_OfflineChat_SC() {
  // @@protoc_insertion_point(destructor:Chat.MSG_Ret_OfflineChat_SC)
  SharedDtor();
}

void MSG_Ret_OfflineChat_SC::SharedDtor() {
}

void MSG_Ret_OfflineChat_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_OfflineChat_SC& MSG_Ret_OfflineChat_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_OfflineChat_SC_chat_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_OfflineChat_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.MSG_Ret_OfflineChat_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_OfflineChat_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Chat.ChatData datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_OfflineChat_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.MSG_Ret_OfflineChat_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Chat.ChatData datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.MSG_Ret_OfflineChat_SC)
  return target;
}

size_t MSG_Ret_OfflineChat_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.MSG_Ret_OfflineChat_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Chat.ChatData datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_OfflineChat_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.MSG_Ret_OfflineChat_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_OfflineChat_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_OfflineChat_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.MSG_Ret_OfflineChat_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.MSG_Ret_OfflineChat_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_OfflineChat_SC::MergeFrom(const MSG_Ret_OfflineChat_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.MSG_Ret_OfflineChat_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void MSG_Ret_OfflineChat_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.MSG_Ret_OfflineChat_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_OfflineChat_SC::CopyFrom(const MSG_Ret_OfflineChat_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.MSG_Ret_OfflineChat_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_OfflineChat_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_OfflineChat_SC::InternalSwap(MSG_Ret_OfflineChat_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_OfflineChat_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ImportantBroadcast_CS::InitAsDefaultInstance() {
}
class MSG_Req_ImportantBroadcast_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ImportantBroadcast_CS>()._has_bits_);
};

MSG_Req_ImportantBroadcast_CS::MSG_Req_ImportantBroadcast_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.MSG_Req_ImportantBroadcast_CS)
}
MSG_Req_ImportantBroadcast_CS::MSG_Req_ImportantBroadcast_CS(const MSG_Req_ImportantBroadcast_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Chat.MSG_Req_ImportantBroadcast_CS)
}

void MSG_Req_ImportantBroadcast_CS::SharedCtor() {
}

MSG_Req_ImportantBroadcast_CS::~MSG_Req_ImportantBroadcast_CS() {
  // @@protoc_insertion_point(destructor:Chat.MSG_Req_ImportantBroadcast_CS)
  SharedDtor();
}

void MSG_Req_ImportantBroadcast_CS::SharedDtor() {
}

void MSG_Req_ImportantBroadcast_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ImportantBroadcast_CS& MSG_Req_ImportantBroadcast_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ImportantBroadcast_CS_chat_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ImportantBroadcast_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.MSG_Req_ImportantBroadcast_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ImportantBroadcast_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ImportantBroadcast_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.MSG_Req_ImportantBroadcast_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.MSG_Req_ImportantBroadcast_CS)
  return target;
}

size_t MSG_Req_ImportantBroadcast_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.MSG_Req_ImportantBroadcast_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ImportantBroadcast_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.MSG_Req_ImportantBroadcast_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ImportantBroadcast_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ImportantBroadcast_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.MSG_Req_ImportantBroadcast_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.MSG_Req_ImportantBroadcast_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ImportantBroadcast_CS::MergeFrom(const MSG_Req_ImportantBroadcast_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.MSG_Req_ImportantBroadcast_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_ImportantBroadcast_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.MSG_Req_ImportantBroadcast_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ImportantBroadcast_CS::CopyFrom(const MSG_Req_ImportantBroadcast_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.MSG_Req_ImportantBroadcast_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ImportantBroadcast_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ImportantBroadcast_CS::InternalSwap(MSG_Req_ImportantBroadcast_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ImportantBroadcast_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Chat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Chat::MSG_Req_ChannleChat_CS* Arena::CreateMaybeMessage< ::Chat::MSG_Req_ChannleChat_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::MSG_Req_ChannleChat_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::MSG_Ret_ChannelChat_SC* Arena::CreateMaybeMessage< ::Chat::MSG_Ret_ChannelChat_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::MSG_Ret_ChannelChat_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::ChatLink* Arena::CreateMaybeMessage< ::Chat::ChatLink >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::ChatLink >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::ChatData* Arena::CreateMaybeMessage< ::Chat::ChatData >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::ChatData >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::MSG_Req_Chat_CS* Arena::CreateMaybeMessage< ::Chat::MSG_Req_Chat_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::MSG_Req_Chat_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::MSG_Ret_Chat_SC* Arena::CreateMaybeMessage< ::Chat::MSG_Ret_Chat_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::MSG_Ret_Chat_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::MSG_Req_ChatUserInfo_CS* Arena::CreateMaybeMessage< ::Chat::MSG_Req_ChatUserInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::MSG_Req_ChatUserInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::MSG_Ret_ChatUserInfo_SC* Arena::CreateMaybeMessage< ::Chat::MSG_Ret_ChatUserInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::MSG_Ret_ChatUserInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::MSG_Req_OfflineChat_CS* Arena::CreateMaybeMessage< ::Chat::MSG_Req_OfflineChat_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::MSG_Req_OfflineChat_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::MSG_Ret_OfflineChat_SC* Arena::CreateMaybeMessage< ::Chat::MSG_Ret_OfflineChat_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::MSG_Ret_OfflineChat_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::MSG_Req_ImportantBroadcast_CS* Arena::CreateMaybeMessage< ::Chat::MSG_Req_ImportantBroadcast_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::MSG_Req_ImportantBroadcast_CS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
