// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quiz.proto

#include "quiz.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_quiz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnswerRewards_quiz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_quiz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Day7ActivityInfo_quiz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_quiz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuizData_quiz_2eproto;
namespace quiz {
class QuizDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuizData> _instance;
} _QuizData_default_instance_;
class AnswerRewardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnswerRewards> _instance;
} _AnswerRewards_default_instance_;
class MSG_Req_QuizPrivilege_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_QuizPrivilege_CS> _instance;
} _MSG_Req_QuizPrivilege_CS_default_instance_;
class MSG_Ret_QuizPrivilege_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_QuizPrivilege_SC> _instance;
} _MSG_Ret_QuizPrivilege_SC_default_instance_;
class MSG_Req_StartQuiz_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_StartQuiz_CS> _instance;
} _MSG_Req_StartQuiz_CS_default_instance_;
class MSG_Ret_QuestionsData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_QuestionsData_SC> _instance;
} _MSG_Ret_QuestionsData_SC_default_instance_;
class MSG_AnswerQuestion_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_AnswerQuestion_CS> _instance;
} _MSG_AnswerQuestion_CS_default_instance_;
class MSG_Ret_QuestionResult_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_QuestionResult_SC> _instance;
} _MSG_Ret_QuestionResult_SC_default_instance_;
class MSG_Req_UseHelpItem_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_UseHelpItem_CS> _instance;
} _MSG_Req_UseHelpItem_CS_default_instance_;
class MSG_Ret_HelpItemEffect_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_HelpItemEffect_SC> _instance;
} _MSG_Ret_HelpItemEffect_SC_default_instance_;
class Day7ActivityInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Day7ActivityInfo> _instance;
} _Day7ActivityInfo_default_instance_;
class MSG_Ret_Day7ActivityInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Day7ActivityInfo_SC> _instance;
} _MSG_Ret_Day7ActivityInfo_SC_default_instance_;
class MSG_Req_RecvDay7ActivityPrize_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_RecvDay7ActivityPrize_CS> _instance;
} _MSG_Req_RecvDay7ActivityPrize_CS_default_instance_;
class MSG_Req_SeekActivityInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_SeekActivityInfo_CS> _instance;
} _MSG_Req_SeekActivityInfo_CS_default_instance_;
class MSG_Ret_SeekActivityInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_SeekActivityInfo_SC> _instance;
} _MSG_Ret_SeekActivityInfo_SC_default_instance_;
class MSG_Req_RecvSeekActivityPrize_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_RecvSeekActivityPrize_CS> _instance;
} _MSG_Req_RecvSeekActivityPrize_CS_default_instance_;
}  // namespace quiz
static void InitDefaultsscc_info_AnswerRewards_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_AnswerRewards_default_instance_;
    new (ptr) ::quiz::AnswerRewards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::AnswerRewards::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AnswerRewards_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AnswerRewards_quiz_2eproto}, {}};

static void InitDefaultsscc_info_Day7ActivityInfo_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_Day7ActivityInfo_default_instance_;
    new (ptr) ::quiz::Day7ActivityInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::Day7ActivityInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Day7ActivityInfo_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Day7ActivityInfo_quiz_2eproto}, {}};

static void InitDefaultsscc_info_MSG_AnswerQuestion_CS_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_AnswerQuestion_CS_default_instance_;
    new (ptr) ::quiz::MSG_AnswerQuestion_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_AnswerQuestion_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_AnswerQuestion_CS_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_AnswerQuestion_CS_quiz_2eproto}, {
      &scc_info_QuizData_quiz_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_QuizPrivilege_CS_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Req_QuizPrivilege_CS_default_instance_;
    new (ptr) ::quiz::MSG_Req_QuizPrivilege_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Req_QuizPrivilege_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_QuizPrivilege_CS_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_QuizPrivilege_CS_quiz_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_RecvDay7ActivityPrize_CS_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Req_RecvDay7ActivityPrize_CS_default_instance_;
    new (ptr) ::quiz::MSG_Req_RecvDay7ActivityPrize_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Req_RecvDay7ActivityPrize_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_RecvDay7ActivityPrize_CS_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_RecvDay7ActivityPrize_CS_quiz_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_RecvSeekActivityPrize_CS_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Req_RecvSeekActivityPrize_CS_default_instance_;
    new (ptr) ::quiz::MSG_Req_RecvSeekActivityPrize_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Req_RecvSeekActivityPrize_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_RecvSeekActivityPrize_CS_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_RecvSeekActivityPrize_CS_quiz_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_SeekActivityInfo_CS_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Req_SeekActivityInfo_CS_default_instance_;
    new (ptr) ::quiz::MSG_Req_SeekActivityInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Req_SeekActivityInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_SeekActivityInfo_CS_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_SeekActivityInfo_CS_quiz_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_StartQuiz_CS_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Req_StartQuiz_CS_default_instance_;
    new (ptr) ::quiz::MSG_Req_StartQuiz_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Req_StartQuiz_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_StartQuiz_CS_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_StartQuiz_CS_quiz_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_UseHelpItem_CS_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Req_UseHelpItem_CS_default_instance_;
    new (ptr) ::quiz::MSG_Req_UseHelpItem_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Req_UseHelpItem_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_UseHelpItem_CS_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_UseHelpItem_CS_quiz_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_Day7ActivityInfo_SC_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Ret_Day7ActivityInfo_SC_default_instance_;
    new (ptr) ::quiz::MSG_Ret_Day7ActivityInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Ret_Day7ActivityInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_Day7ActivityInfo_SC_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_Day7ActivityInfo_SC_quiz_2eproto}, {
      &scc_info_Day7ActivityInfo_quiz_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_HelpItemEffect_SC_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Ret_HelpItemEffect_SC_default_instance_;
    new (ptr) ::quiz::MSG_Ret_HelpItemEffect_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Ret_HelpItemEffect_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_HelpItemEffect_SC_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_HelpItemEffect_SC_quiz_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_QuestionResult_SC_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Ret_QuestionResult_SC_default_instance_;
    new (ptr) ::quiz::MSG_Ret_QuestionResult_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Ret_QuestionResult_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MSG_Ret_QuestionResult_SC_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MSG_Ret_QuestionResult_SC_quiz_2eproto}, {
      &scc_info_QuizData_quiz_2eproto.base,
      &scc_info_AnswerRewards_quiz_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_QuestionsData_SC_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Ret_QuestionsData_SC_default_instance_;
    new (ptr) ::quiz::MSG_Ret_QuestionsData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Ret_QuestionsData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_QuestionsData_SC_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_QuestionsData_SC_quiz_2eproto}, {
      &scc_info_QuizData_quiz_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_QuizPrivilege_SC_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Ret_QuizPrivilege_SC_default_instance_;
    new (ptr) ::quiz::MSG_Ret_QuizPrivilege_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Ret_QuizPrivilege_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_QuizPrivilege_SC_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_QuizPrivilege_SC_quiz_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_SeekActivityInfo_SC_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_MSG_Ret_SeekActivityInfo_SC_default_instance_;
    new (ptr) ::quiz::MSG_Ret_SeekActivityInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::MSG_Ret_SeekActivityInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_SeekActivityInfo_SC_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_SeekActivityInfo_SC_quiz_2eproto}, {}};

static void InitDefaultsscc_info_QuizData_quiz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quiz::_QuizData_default_instance_;
    new (ptr) ::quiz::QuizData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quiz::QuizData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuizData_quiz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuizData_quiz_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_quiz_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_quiz_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_quiz_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_quiz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::quiz::QuizData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::QuizData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::QuizData, questionnum_),
  PROTOBUF_FIELD_OFFSET(::quiz::QuizData, questionid_),
  PROTOBUF_FIELD_OFFSET(::quiz::QuizData, correctid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::quiz::AnswerRewards, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::AnswerRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::AnswerRewards, objid_),
  PROTOBUF_FIELD_OFFSET(::quiz::AnswerRewards, objnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_QuizPrivilege_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_QuizPrivilege_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_QuizPrivilege_CS, onlycheck_),
  0,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuizPrivilege_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuizPrivilege_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuizPrivilege_SC, stageid_),
  0,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_StartQuiz_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_StartQuiz_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_StartQuiz_CS, stageid_),
  0,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionsData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionsData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionsData_SC, stageid_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionsData_SC, quizdatas_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionsData_SC, curquestionnum_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionsData_SC, correctnum_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionsData_SC, remaintime_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionsData_SC, errorid_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_AnswerQuestion_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_AnswerQuestion_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_AnswerQuestion_CS, stageid_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_AnswerQuestion_CS, quizdata_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionResult_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionResult_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionResult_SC, stageid_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionResult_SC, quizdata_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionResult_SC, rewards_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_QuestionResult_SC, result_),
  1,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_UseHelpItem_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_UseHelpItem_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_UseHelpItem_CS, stageid_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_UseHelpItem_CS, objid_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_UseHelpItem_CS, questionnum_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_HelpItemEffect_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_HelpItemEffect_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_HelpItemEffect_SC, stageid_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_HelpItemEffect_SC, objid_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_HelpItemEffect_SC, questionnum_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_HelpItemEffect_SC, effectvalue_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::quiz::Day7ActivityInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::Day7ActivityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::Day7ActivityInfo, dayid_),
  PROTOBUF_FIELD_OFFSET(::quiz::Day7ActivityInfo, state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_Day7ActivityInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_Day7ActivityInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_Day7ActivityInfo_SC, data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_RecvDay7ActivityPrize_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_RecvDay7ActivityPrize_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_SeekActivityInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_SeekActivityInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_SeekActivityInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_SeekActivityInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_SeekActivityInfo_SC, state_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Ret_SeekActivityInfo_SC, id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_RecvSeekActivityPrize_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_RecvSeekActivityPrize_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quiz::MSG_Req_RecvSeekActivityPrize_CS, id_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::quiz::QuizData)},
  { 11, 18, sizeof(::quiz::AnswerRewards)},
  { 20, 26, sizeof(::quiz::MSG_Req_QuizPrivilege_CS)},
  { 27, 33, sizeof(::quiz::MSG_Ret_QuizPrivilege_SC)},
  { 34, 40, sizeof(::quiz::MSG_Req_StartQuiz_CS)},
  { 41, 52, sizeof(::quiz::MSG_Ret_QuestionsData_SC)},
  { 58, 65, sizeof(::quiz::MSG_AnswerQuestion_CS)},
  { 67, 76, sizeof(::quiz::MSG_Ret_QuestionResult_SC)},
  { 80, 88, sizeof(::quiz::MSG_Req_UseHelpItem_CS)},
  { 91, 100, sizeof(::quiz::MSG_Ret_HelpItemEffect_SC)},
  { 104, 111, sizeof(::quiz::Day7ActivityInfo)},
  { 113, 119, sizeof(::quiz::MSG_Ret_Day7ActivityInfo_SC)},
  { 120, 125, sizeof(::quiz::MSG_Req_RecvDay7ActivityPrize_CS)},
  { 125, 130, sizeof(::quiz::MSG_Req_SeekActivityInfo_CS)},
  { 130, 137, sizeof(::quiz::MSG_Ret_SeekActivityInfo_SC)},
  { 139, 145, sizeof(::quiz::MSG_Req_RecvSeekActivityPrize_CS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_QuizData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_AnswerRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Req_QuizPrivilege_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Ret_QuizPrivilege_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Req_StartQuiz_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Ret_QuestionsData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_AnswerQuestion_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Ret_QuestionResult_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Req_UseHelpItem_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Ret_HelpItemEffect_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_Day7ActivityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Ret_Day7ActivityInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Req_RecvDay7ActivityPrize_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Req_SeekActivityInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Ret_SeekActivityInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quiz::_MSG_Req_RecvSeekActivityPrize_CS_default_instance_),
};

const char descriptor_table_protodef_quiz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nquiz.proto\022\004quiz\"F\n\010QuizData\022\023\n\013questi"
  "onnum\030\001 \001(\r\022\022\n\nquestionid\030\002 \001(\r\022\021\n\tcorre"
  "ctid\030\003 \001(\r\".\n\rAnswerRewards\022\r\n\005objid\030\001 \001"
  "(\r\022\016\n\006objnum\030\002 \001(\r\"-\n\030MSG_Req_QuizPrivil"
  "ege_CS\022\021\n\tonlycheck\030\001 \001(\010\"<\n\030MSG_Ret_Qui"
  "zPrivilege_SC\022 \n\007stageid\030\001 \001(\0162\017.quiz.Qu"
  "izStage\"8\n\024MSG_Req_StartQuiz_CS\022 \n\007stage"
  "id\030\001 \001(\0162\017.quiz.QuizStage\"\260\001\n\030MSG_Ret_Qu"
  "estionsData_SC\022 \n\007stageid\030\001 \001(\0162\017.quiz.Q"
  "uizStage\022!\n\tquizdatas\030\002 \003(\0132\016.quiz.QuizD"
  "ata\022\026\n\016curquestionnum\030\003 \001(\r\022\022\n\ncorrectnu"
  "m\030\004 \001(\r\022\022\n\nremaintime\030\005 \001(\r\022\017\n\007errorid\030\006"
  " \001(\r\"[\n\025MSG_AnswerQuestion_CS\022 \n\007stageid"
  "\030\001 \001(\0162\017.quiz.QuizStage\022 \n\010quizdata\030\002 \001("
  "\0132\016.quiz.QuizData\"\225\001\n\031MSG_Ret_QuestionRe"
  "sult_SC\022 \n\007stageid\030\001 \001(\0162\017.quiz.QuizStag"
  "e\022 \n\010quizdata\030\002 \001(\0132\016.quiz.QuizData\022$\n\007r"
  "ewards\030\003 \003(\0132\023.quiz.AnswerRewards\022\016\n\006res"
  "ult\030\004 \001(\010\"^\n\026MSG_Req_UseHelpItem_CS\022 \n\007s"
  "tageid\030\001 \001(\0162\017.quiz.QuizStage\022\r\n\005objid\030\002"
  " \001(\r\022\023\n\013questionnum\030\003 \001(\r\"v\n\031MSG_Ret_Hel"
  "pItemEffect_SC\022 \n\007stageid\030\001 \001(\0162\017.quiz.Q"
  "uizStage\022\r\n\005objid\030\002 \001(\r\022\023\n\013questionnum\030\003"
  " \001(\r\022\023\n\013effectvalue\030\004 \001(\r\"E\n\020Day7Activit"
  "yInfo\022\r\n\005dayid\030\001 \001(\r\022\"\n\005state\030\002 \001(\0162\023.qu"
  "iz.ActivityState\"C\n\033MSG_Ret_Day7Activity"
  "Info_SC\022$\n\004data\030\001 \003(\0132\026.quiz.Day7Activit"
  "yInfo\"\"\n MSG_Req_RecvDay7ActivityPrize_C"
  "S\"\035\n\033MSG_Req_SeekActivityInfo_CS\"M\n\033MSG_"
  "Ret_SeekActivityInfo_SC\022\"\n\005state\030\001 \001(\0162\023"
  ".quiz.ActivityState\022\n\n\002id\030\002 \001(\r\".\n MSG_R"
  "eq_RecvSeekActivityPrize_CS\022\n\n\002id\030\001 \001(\r*"
  "w\n\tQuizStage\022\023\n\017QUIZ_STAGE_NULL\020\000\022\024\n\020QUI"
  "Z_STAGE_FIRST\020\001\022\025\n\021QUIZ_STAGE_SECOND\020\002\022\024"
  "\n\020QUIZ_STAGE_FINAL\020\003\022\022\n\016QUIZ_STAGE_MAX\020\004"
  "*\234\001\n\rActivityState\022\031\n\025ACTIVITY_STATE_UNO"
  "PEN\020\000\022\027\n\023ACTIVITY_STATE_OPEN\020\001\022\033\n\027ACTIVI"
  "TY_STATE_COMPLETE\020\002\022\033\n\027ACTIVITY_STATE_GO"
  "TPRIZE\020\003\022\035\n\031ACTIVITY_STATE_UNCOMPLETE\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_quiz_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_quiz_2eproto_sccs[16] = {
  &scc_info_AnswerRewards_quiz_2eproto.base,
  &scc_info_Day7ActivityInfo_quiz_2eproto.base,
  &scc_info_MSG_AnswerQuestion_CS_quiz_2eproto.base,
  &scc_info_MSG_Req_QuizPrivilege_CS_quiz_2eproto.base,
  &scc_info_MSG_Req_RecvDay7ActivityPrize_CS_quiz_2eproto.base,
  &scc_info_MSG_Req_RecvSeekActivityPrize_CS_quiz_2eproto.base,
  &scc_info_MSG_Req_SeekActivityInfo_CS_quiz_2eproto.base,
  &scc_info_MSG_Req_StartQuiz_CS_quiz_2eproto.base,
  &scc_info_MSG_Req_UseHelpItem_CS_quiz_2eproto.base,
  &scc_info_MSG_Ret_Day7ActivityInfo_SC_quiz_2eproto.base,
  &scc_info_MSG_Ret_HelpItemEffect_SC_quiz_2eproto.base,
  &scc_info_MSG_Ret_QuestionResult_SC_quiz_2eproto.base,
  &scc_info_MSG_Ret_QuestionsData_SC_quiz_2eproto.base,
  &scc_info_MSG_Ret_QuizPrivilege_SC_quiz_2eproto.base,
  &scc_info_MSG_Ret_SeekActivityInfo_SC_quiz_2eproto.base,
  &scc_info_QuizData_quiz_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_quiz_2eproto_once;
static bool descriptor_table_quiz_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_quiz_2eproto = {
  &descriptor_table_quiz_2eproto_initialized, descriptor_table_protodef_quiz_2eproto, "quiz.proto", 1559,
  &descriptor_table_quiz_2eproto_once, descriptor_table_quiz_2eproto_sccs, descriptor_table_quiz_2eproto_deps, 16, 0,
  schemas, file_default_instances, TableStruct_quiz_2eproto::offsets,
  file_level_metadata_quiz_2eproto, 16, file_level_enum_descriptors_quiz_2eproto, file_level_service_descriptors_quiz_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_quiz_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_quiz_2eproto)), true);
namespace quiz {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuizStage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_quiz_2eproto);
  return file_level_enum_descriptors_quiz_2eproto[0];
}
bool QuizStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivityState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_quiz_2eproto);
  return file_level_enum_descriptors_quiz_2eproto[1];
}
bool ActivityState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void QuizData::InitAsDefaultInstance() {
}
class QuizData::_Internal {
 public:
  using HasBits = decltype(std::declval<QuizData>()._has_bits_);
  static void set_has_questionnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_questionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_correctid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

QuizData::QuizData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.QuizData)
}
QuizData::QuizData(const QuizData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&questionnum_, &from.questionnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&correctid_) -
    reinterpret_cast<char*>(&questionnum_)) + sizeof(correctid_));
  // @@protoc_insertion_point(copy_constructor:quiz.QuizData)
}

void QuizData::SharedCtor() {
  ::memset(&questionnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&correctid_) -
      reinterpret_cast<char*>(&questionnum_)) + sizeof(correctid_));
}

QuizData::~QuizData() {
  // @@protoc_insertion_point(destructor:quiz.QuizData)
  SharedDtor();
}

void QuizData::SharedDtor() {
}

void QuizData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuizData& QuizData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuizData_quiz_2eproto.base);
  return *internal_default_instance();
}


void QuizData::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.QuizData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&questionnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&correctid_) -
        reinterpret_cast<char*>(&questionnum_)) + sizeof(correctid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QuizData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 questionnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_questionnum(&has_bits);
          questionnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 questionid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_questionid(&has_bits);
          questionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 correctid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_correctid(&has_bits);
          correctid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuizData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.QuizData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 questionnum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_questionnum(), target);
  }

  // optional uint32 questionid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_questionid(), target);
  }

  // optional uint32 correctid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_correctid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.QuizData)
  return target;
}

size_t QuizData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.QuizData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 questionnum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questionnum());
    }

    // optional uint32 questionid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questionid());
    }

    // optional uint32 correctid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_correctid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuizData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.QuizData)
  GOOGLE_DCHECK_NE(&from, this);
  const QuizData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuizData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.QuizData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.QuizData)
    MergeFrom(*source);
  }
}

void QuizData::MergeFrom(const QuizData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.QuizData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      questionnum_ = from.questionnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      questionid_ = from.questionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      correctid_ = from.correctid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuizData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.QuizData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuizData::CopyFrom(const QuizData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.QuizData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuizData::IsInitialized() const {
  return true;
}

void QuizData::InternalSwap(QuizData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(questionnum_, other->questionnum_);
  swap(questionid_, other->questionid_);
  swap(correctid_, other->correctid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuizData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnswerRewards::InitAsDefaultInstance() {
}
class AnswerRewards::_Internal {
 public:
  using HasBits = decltype(std::declval<AnswerRewards>()._has_bits_);
  static void set_has_objid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_objnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AnswerRewards::AnswerRewards()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.AnswerRewards)
}
AnswerRewards::AnswerRewards(const AnswerRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objid_, &from.objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&objnum_) -
    reinterpret_cast<char*>(&objid_)) + sizeof(objnum_));
  // @@protoc_insertion_point(copy_constructor:quiz.AnswerRewards)
}

void AnswerRewards::SharedCtor() {
  ::memset(&objid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&objnum_) -
      reinterpret_cast<char*>(&objid_)) + sizeof(objnum_));
}

AnswerRewards::~AnswerRewards() {
  // @@protoc_insertion_point(destructor:quiz.AnswerRewards)
  SharedDtor();
}

void AnswerRewards::SharedDtor() {
}

void AnswerRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnswerRewards& AnswerRewards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnswerRewards_quiz_2eproto.base);
  return *internal_default_instance();
}


void AnswerRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.AnswerRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&objid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&objnum_) -
        reinterpret_cast<char*>(&objid_)) + sizeof(objnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AnswerRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 objid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_objid(&has_bits);
          objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 objnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_objnum(&has_bits);
          objnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnswerRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.AnswerRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 objid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_objid(), target);
  }

  // optional uint32 objnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_objnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.AnswerRewards)
  return target;
}

size_t AnswerRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.AnswerRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 objid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_objid());
    }

    // optional uint32 objnum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_objnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnswerRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.AnswerRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const AnswerRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnswerRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.AnswerRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.AnswerRewards)
    MergeFrom(*source);
  }
}

void AnswerRewards::MergeFrom(const AnswerRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.AnswerRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000002u) {
      objnum_ = from.objnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AnswerRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.AnswerRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerRewards::CopyFrom(const AnswerRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.AnswerRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerRewards::IsInitialized() const {
  return true;
}

void AnswerRewards::InternalSwap(AnswerRewards* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(objid_, other->objid_);
  swap(objnum_, other->objnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerRewards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_QuizPrivilege_CS::InitAsDefaultInstance() {
}
class MSG_Req_QuizPrivilege_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_QuizPrivilege_CS>()._has_bits_);
  static void set_has_onlycheck(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_QuizPrivilege_CS::MSG_Req_QuizPrivilege_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Req_QuizPrivilege_CS)
}
MSG_Req_QuizPrivilege_CS::MSG_Req_QuizPrivilege_CS(const MSG_Req_QuizPrivilege_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  onlycheck_ = from.onlycheck_;
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Req_QuizPrivilege_CS)
}

void MSG_Req_QuizPrivilege_CS::SharedCtor() {
  onlycheck_ = false;
}

MSG_Req_QuizPrivilege_CS::~MSG_Req_QuizPrivilege_CS() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Req_QuizPrivilege_CS)
  SharedDtor();
}

void MSG_Req_QuizPrivilege_CS::SharedDtor() {
}

void MSG_Req_QuizPrivilege_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_QuizPrivilege_CS& MSG_Req_QuizPrivilege_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_QuizPrivilege_CS_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_QuizPrivilege_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Req_QuizPrivilege_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onlycheck_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_QuizPrivilege_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool onlycheck = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_onlycheck(&has_bits);
          onlycheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_QuizPrivilege_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Req_QuizPrivilege_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool onlycheck = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_onlycheck(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Req_QuizPrivilege_CS)
  return target;
}

size_t MSG_Req_QuizPrivilege_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Req_QuizPrivilege_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool onlycheck = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_QuizPrivilege_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Req_QuizPrivilege_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_QuizPrivilege_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_QuizPrivilege_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Req_QuizPrivilege_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Req_QuizPrivilege_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_QuizPrivilege_CS::MergeFrom(const MSG_Req_QuizPrivilege_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Req_QuizPrivilege_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_onlycheck()) {
    _internal_set_onlycheck(from._internal_onlycheck());
  }
}

void MSG_Req_QuizPrivilege_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Req_QuizPrivilege_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_QuizPrivilege_CS::CopyFrom(const MSG_Req_QuizPrivilege_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Req_QuizPrivilege_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_QuizPrivilege_CS::IsInitialized() const {
  return true;
}

void MSG_Req_QuizPrivilege_CS::InternalSwap(MSG_Req_QuizPrivilege_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(onlycheck_, other->onlycheck_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_QuizPrivilege_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_QuizPrivilege_SC::InitAsDefaultInstance() {
}
class MSG_Ret_QuizPrivilege_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_QuizPrivilege_SC>()._has_bits_);
  static void set_has_stageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_QuizPrivilege_SC::MSG_Ret_QuizPrivilege_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Ret_QuizPrivilege_SC)
}
MSG_Ret_QuizPrivilege_SC::MSG_Ret_QuizPrivilege_SC(const MSG_Ret_QuizPrivilege_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stageid_ = from.stageid_;
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Ret_QuizPrivilege_SC)
}

void MSG_Ret_QuizPrivilege_SC::SharedCtor() {
  stageid_ = 0;
}

MSG_Ret_QuizPrivilege_SC::~MSG_Ret_QuizPrivilege_SC() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Ret_QuizPrivilege_SC)
  SharedDtor();
}

void MSG_Ret_QuizPrivilege_SC::SharedDtor() {
}

void MSG_Ret_QuizPrivilege_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_QuizPrivilege_SC& MSG_Ret_QuizPrivilege_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_QuizPrivilege_SC_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_QuizPrivilege_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Ret_QuizPrivilege_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stageid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_QuizPrivilege_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .quiz.QuizStage stageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::quiz::QuizStage_IsValid(val))) {
            _internal_set_stageid(static_cast<::quiz::QuizStage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_QuizPrivilege_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Ret_QuizPrivilege_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .quiz.QuizStage stageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Ret_QuizPrivilege_SC)
  return target;
}

size_t MSG_Ret_QuizPrivilege_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Ret_QuizPrivilege_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .quiz.QuizStage stageid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stageid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_QuizPrivilege_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Ret_QuizPrivilege_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_QuizPrivilege_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_QuizPrivilege_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Ret_QuizPrivilege_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Ret_QuizPrivilege_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_QuizPrivilege_SC::MergeFrom(const MSG_Ret_QuizPrivilege_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Ret_QuizPrivilege_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stageid()) {
    _internal_set_stageid(from._internal_stageid());
  }
}

void MSG_Ret_QuizPrivilege_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Ret_QuizPrivilege_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_QuizPrivilege_SC::CopyFrom(const MSG_Ret_QuizPrivilege_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Ret_QuizPrivilege_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_QuizPrivilege_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_QuizPrivilege_SC::InternalSwap(MSG_Ret_QuizPrivilege_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stageid_, other->stageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_QuizPrivilege_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_StartQuiz_CS::InitAsDefaultInstance() {
}
class MSG_Req_StartQuiz_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_StartQuiz_CS>()._has_bits_);
  static void set_has_stageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_StartQuiz_CS::MSG_Req_StartQuiz_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Req_StartQuiz_CS)
}
MSG_Req_StartQuiz_CS::MSG_Req_StartQuiz_CS(const MSG_Req_StartQuiz_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stageid_ = from.stageid_;
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Req_StartQuiz_CS)
}

void MSG_Req_StartQuiz_CS::SharedCtor() {
  stageid_ = 0;
}

MSG_Req_StartQuiz_CS::~MSG_Req_StartQuiz_CS() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Req_StartQuiz_CS)
  SharedDtor();
}

void MSG_Req_StartQuiz_CS::SharedDtor() {
}

void MSG_Req_StartQuiz_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_StartQuiz_CS& MSG_Req_StartQuiz_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_StartQuiz_CS_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_StartQuiz_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Req_StartQuiz_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stageid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_StartQuiz_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .quiz.QuizStage stageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::quiz::QuizStage_IsValid(val))) {
            _internal_set_stageid(static_cast<::quiz::QuizStage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_StartQuiz_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Req_StartQuiz_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .quiz.QuizStage stageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Req_StartQuiz_CS)
  return target;
}

size_t MSG_Req_StartQuiz_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Req_StartQuiz_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .quiz.QuizStage stageid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stageid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_StartQuiz_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Req_StartQuiz_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_StartQuiz_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_StartQuiz_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Req_StartQuiz_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Req_StartQuiz_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_StartQuiz_CS::MergeFrom(const MSG_Req_StartQuiz_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Req_StartQuiz_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stageid()) {
    _internal_set_stageid(from._internal_stageid());
  }
}

void MSG_Req_StartQuiz_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Req_StartQuiz_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_StartQuiz_CS::CopyFrom(const MSG_Req_StartQuiz_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Req_StartQuiz_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_StartQuiz_CS::IsInitialized() const {
  return true;
}

void MSG_Req_StartQuiz_CS::InternalSwap(MSG_Req_StartQuiz_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stageid_, other->stageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_StartQuiz_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_QuestionsData_SC::InitAsDefaultInstance() {
}
class MSG_Ret_QuestionsData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_QuestionsData_SC>()._has_bits_);
  static void set_has_stageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_curquestionnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_correctnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_remaintime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_errorid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_Ret_QuestionsData_SC::MSG_Ret_QuestionsData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Ret_QuestionsData_SC)
}
MSG_Ret_QuestionsData_SC::MSG_Ret_QuestionsData_SC(const MSG_Ret_QuestionsData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      quizdatas_(from.quizdatas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stageid_, &from.stageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorid_) -
    reinterpret_cast<char*>(&stageid_)) + sizeof(errorid_));
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Ret_QuestionsData_SC)
}

void MSG_Ret_QuestionsData_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_QuestionsData_SC_quiz_2eproto.base);
  ::memset(&stageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorid_) -
      reinterpret_cast<char*>(&stageid_)) + sizeof(errorid_));
}

MSG_Ret_QuestionsData_SC::~MSG_Ret_QuestionsData_SC() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Ret_QuestionsData_SC)
  SharedDtor();
}

void MSG_Ret_QuestionsData_SC::SharedDtor() {
}

void MSG_Ret_QuestionsData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_QuestionsData_SC& MSG_Ret_QuestionsData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_QuestionsData_SC_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_QuestionsData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Ret_QuestionsData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quizdatas_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&stageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&errorid_) -
        reinterpret_cast<char*>(&stageid_)) + sizeof(errorid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_QuestionsData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .quiz.QuizStage stageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::quiz::QuizStage_IsValid(val))) {
            _internal_set_stageid(static_cast<::quiz::QuizStage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .quiz.QuizData quizdatas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quizdatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 curquestionnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_curquestionnum(&has_bits);
          curquestionnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 correctnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_correctnum(&has_bits);
          correctnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remaintime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_remaintime(&has_bits);
          remaintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 errorid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_errorid(&has_bits);
          errorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_QuestionsData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Ret_QuestionsData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .quiz.QuizStage stageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stageid(), target);
  }

  // repeated .quiz.QuizData quizdatas = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quizdatas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_quizdatas(i), target, stream);
  }

  // optional uint32 curquestionnum = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_curquestionnum(), target);
  }

  // optional uint32 correctnum = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_correctnum(), target);
  }

  // optional uint32 remaintime = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_remaintime(), target);
  }

  // optional uint32 errorid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_errorid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Ret_QuestionsData_SC)
  return target;
}

size_t MSG_Ret_QuestionsData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Ret_QuestionsData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quiz.QuizData quizdatas = 2;
  total_size += 1UL * this->_internal_quizdatas_size();
  for (const auto& msg : this->quizdatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .quiz.QuizStage stageid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stageid());
    }

    // optional uint32 curquestionnum = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curquestionnum());
    }

    // optional uint32 correctnum = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_correctnum());
    }

    // optional uint32 remaintime = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_remaintime());
    }

    // optional uint32 errorid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errorid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_QuestionsData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Ret_QuestionsData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_QuestionsData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_QuestionsData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Ret_QuestionsData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Ret_QuestionsData_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_QuestionsData_SC::MergeFrom(const MSG_Ret_QuestionsData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Ret_QuestionsData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quizdatas_.MergeFrom(from.quizdatas_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      stageid_ = from.stageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      curquestionnum_ = from.curquestionnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      correctnum_ = from.correctnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      remaintime_ = from.remaintime_;
    }
    if (cached_has_bits & 0x00000010u) {
      errorid_ = from.errorid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_QuestionsData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Ret_QuestionsData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_QuestionsData_SC::CopyFrom(const MSG_Ret_QuestionsData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Ret_QuestionsData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_QuestionsData_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_QuestionsData_SC::InternalSwap(MSG_Ret_QuestionsData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quizdatas_.InternalSwap(&other->quizdatas_);
  swap(stageid_, other->stageid_);
  swap(curquestionnum_, other->curquestionnum_);
  swap(correctnum_, other->correctnum_);
  swap(remaintime_, other->remaintime_);
  swap(errorid_, other->errorid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_QuestionsData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_AnswerQuestion_CS::InitAsDefaultInstance() {
  ::quiz::_MSG_AnswerQuestion_CS_default_instance_._instance.get_mutable()->quizdata_ = const_cast< ::quiz::QuizData*>(
      ::quiz::QuizData::internal_default_instance());
}
class MSG_AnswerQuestion_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_AnswerQuestion_CS>()._has_bits_);
  static void set_has_stageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::quiz::QuizData& quizdata(const MSG_AnswerQuestion_CS* msg);
  static void set_has_quizdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::quiz::QuizData&
MSG_AnswerQuestion_CS::_Internal::quizdata(const MSG_AnswerQuestion_CS* msg) {
  return *msg->quizdata_;
}
MSG_AnswerQuestion_CS::MSG_AnswerQuestion_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_AnswerQuestion_CS)
}
MSG_AnswerQuestion_CS::MSG_AnswerQuestion_CS(const MSG_AnswerQuestion_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_quizdata()) {
    quizdata_ = new ::quiz::QuizData(*from.quizdata_);
  } else {
    quizdata_ = nullptr;
  }
  stageid_ = from.stageid_;
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_AnswerQuestion_CS)
}

void MSG_AnswerQuestion_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_AnswerQuestion_CS_quiz_2eproto.base);
  ::memset(&quizdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stageid_) -
      reinterpret_cast<char*>(&quizdata_)) + sizeof(stageid_));
}

MSG_AnswerQuestion_CS::~MSG_AnswerQuestion_CS() {
  // @@protoc_insertion_point(destructor:quiz.MSG_AnswerQuestion_CS)
  SharedDtor();
}

void MSG_AnswerQuestion_CS::SharedDtor() {
  if (this != internal_default_instance()) delete quizdata_;
}

void MSG_AnswerQuestion_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_AnswerQuestion_CS& MSG_AnswerQuestion_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_AnswerQuestion_CS_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_AnswerQuestion_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_AnswerQuestion_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(quizdata_ != nullptr);
    quizdata_->Clear();
  }
  stageid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_AnswerQuestion_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .quiz.QuizStage stageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::quiz::QuizStage_IsValid(val))) {
            _internal_set_stageid(static_cast<::quiz::QuizStage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .quiz.QuizData quizdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quizdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_AnswerQuestion_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_AnswerQuestion_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .quiz.QuizStage stageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stageid(), target);
  }

  // optional .quiz.QuizData quizdata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quizdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_AnswerQuestion_CS)
  return target;
}

size_t MSG_AnswerQuestion_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_AnswerQuestion_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .quiz.QuizData quizdata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quizdata_);
    }

    // optional .quiz.QuizStage stageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stageid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_AnswerQuestion_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_AnswerQuestion_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_AnswerQuestion_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_AnswerQuestion_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_AnswerQuestion_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_AnswerQuestion_CS)
    MergeFrom(*source);
  }
}

void MSG_AnswerQuestion_CS::MergeFrom(const MSG_AnswerQuestion_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_AnswerQuestion_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_quizdata()->::quiz::QuizData::MergeFrom(from._internal_quizdata());
    }
    if (cached_has_bits & 0x00000002u) {
      stageid_ = from.stageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_AnswerQuestion_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_AnswerQuestion_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_AnswerQuestion_CS::CopyFrom(const MSG_AnswerQuestion_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_AnswerQuestion_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_AnswerQuestion_CS::IsInitialized() const {
  return true;
}

void MSG_AnswerQuestion_CS::InternalSwap(MSG_AnswerQuestion_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(quizdata_, other->quizdata_);
  swap(stageid_, other->stageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_AnswerQuestion_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_QuestionResult_SC::InitAsDefaultInstance() {
  ::quiz::_MSG_Ret_QuestionResult_SC_default_instance_._instance.get_mutable()->quizdata_ = const_cast< ::quiz::QuizData*>(
      ::quiz::QuizData::internal_default_instance());
}
class MSG_Ret_QuestionResult_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_QuestionResult_SC>()._has_bits_);
  static void set_has_stageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::quiz::QuizData& quizdata(const MSG_Ret_QuestionResult_SC* msg);
  static void set_has_quizdata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::quiz::QuizData&
MSG_Ret_QuestionResult_SC::_Internal::quizdata(const MSG_Ret_QuestionResult_SC* msg) {
  return *msg->quizdata_;
}
MSG_Ret_QuestionResult_SC::MSG_Ret_QuestionResult_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Ret_QuestionResult_SC)
}
MSG_Ret_QuestionResult_SC::MSG_Ret_QuestionResult_SC(const MSG_Ret_QuestionResult_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_quizdata()) {
    quizdata_ = new ::quiz::QuizData(*from.quizdata_);
  } else {
    quizdata_ = nullptr;
  }
  ::memcpy(&stageid_, &from.stageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&stageid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Ret_QuestionResult_SC)
}

void MSG_Ret_QuestionResult_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_QuestionResult_SC_quiz_2eproto.base);
  ::memset(&quizdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&quizdata_)) + sizeof(result_));
}

MSG_Ret_QuestionResult_SC::~MSG_Ret_QuestionResult_SC() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Ret_QuestionResult_SC)
  SharedDtor();
}

void MSG_Ret_QuestionResult_SC::SharedDtor() {
  if (this != internal_default_instance()) delete quizdata_;
}

void MSG_Ret_QuestionResult_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_QuestionResult_SC& MSG_Ret_QuestionResult_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_QuestionResult_SC_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_QuestionResult_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Ret_QuestionResult_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(quizdata_ != nullptr);
    quizdata_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&stageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&stageid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_QuestionResult_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .quiz.QuizStage stageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::quiz::QuizStage_IsValid(val))) {
            _internal_set_stageid(static_cast<::quiz::QuizStage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .quiz.QuizData quizdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quizdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .quiz.AnswerRewards rewards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_QuestionResult_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Ret_QuestionResult_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .quiz.QuizStage stageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stageid(), target);
  }

  // optional .quiz.QuizData quizdata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quizdata(this), target, stream);
  }

  // repeated .quiz.AnswerRewards rewards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rewards(i), target, stream);
  }

  // optional bool result = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Ret_QuestionResult_SC)
  return target;
}

size_t MSG_Ret_QuestionResult_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Ret_QuestionResult_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quiz.AnswerRewards rewards = 3;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .quiz.QuizData quizdata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quizdata_);
    }

    // optional .quiz.QuizStage stageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stageid());
    }

    // optional bool result = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_QuestionResult_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Ret_QuestionResult_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_QuestionResult_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_QuestionResult_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Ret_QuestionResult_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Ret_QuestionResult_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_QuestionResult_SC::MergeFrom(const MSG_Ret_QuestionResult_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Ret_QuestionResult_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_quizdata()->::quiz::QuizData::MergeFrom(from._internal_quizdata());
    }
    if (cached_has_bits & 0x00000002u) {
      stageid_ = from.stageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_QuestionResult_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Ret_QuestionResult_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_QuestionResult_SC::CopyFrom(const MSG_Ret_QuestionResult_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Ret_QuestionResult_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_QuestionResult_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_QuestionResult_SC::InternalSwap(MSG_Ret_QuestionResult_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rewards_.InternalSwap(&other->rewards_);
  swap(quizdata_, other->quizdata_);
  swap(stageid_, other->stageid_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_QuestionResult_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_UseHelpItem_CS::InitAsDefaultInstance() {
}
class MSG_Req_UseHelpItem_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_UseHelpItem_CS>()._has_bits_);
  static void set_has_stageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_objid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_questionnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Req_UseHelpItem_CS::MSG_Req_UseHelpItem_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Req_UseHelpItem_CS)
}
MSG_Req_UseHelpItem_CS::MSG_Req_UseHelpItem_CS(const MSG_Req_UseHelpItem_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stageid_, &from.stageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&questionnum_) -
    reinterpret_cast<char*>(&stageid_)) + sizeof(questionnum_));
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Req_UseHelpItem_CS)
}

void MSG_Req_UseHelpItem_CS::SharedCtor() {
  ::memset(&stageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&questionnum_) -
      reinterpret_cast<char*>(&stageid_)) + sizeof(questionnum_));
}

MSG_Req_UseHelpItem_CS::~MSG_Req_UseHelpItem_CS() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Req_UseHelpItem_CS)
  SharedDtor();
}

void MSG_Req_UseHelpItem_CS::SharedDtor() {
}

void MSG_Req_UseHelpItem_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_UseHelpItem_CS& MSG_Req_UseHelpItem_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_UseHelpItem_CS_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_UseHelpItem_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Req_UseHelpItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&stageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&questionnum_) -
        reinterpret_cast<char*>(&stageid_)) + sizeof(questionnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_UseHelpItem_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .quiz.QuizStage stageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::quiz::QuizStage_IsValid(val))) {
            _internal_set_stageid(static_cast<::quiz::QuizStage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 objid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_objid(&has_bits);
          objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 questionnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_questionnum(&has_bits);
          questionnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_UseHelpItem_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Req_UseHelpItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .quiz.QuizStage stageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stageid(), target);
  }

  // optional uint32 objid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_objid(), target);
  }

  // optional uint32 questionnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_questionnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Req_UseHelpItem_CS)
  return target;
}

size_t MSG_Req_UseHelpItem_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Req_UseHelpItem_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .quiz.QuizStage stageid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stageid());
    }

    // optional uint32 objid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_objid());
    }

    // optional uint32 questionnum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questionnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_UseHelpItem_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Req_UseHelpItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_UseHelpItem_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_UseHelpItem_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Req_UseHelpItem_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Req_UseHelpItem_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_UseHelpItem_CS::MergeFrom(const MSG_Req_UseHelpItem_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Req_UseHelpItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      stageid_ = from.stageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000004u) {
      questionnum_ = from.questionnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_UseHelpItem_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Req_UseHelpItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_UseHelpItem_CS::CopyFrom(const MSG_Req_UseHelpItem_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Req_UseHelpItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_UseHelpItem_CS::IsInitialized() const {
  return true;
}

void MSG_Req_UseHelpItem_CS::InternalSwap(MSG_Req_UseHelpItem_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stageid_, other->stageid_);
  swap(objid_, other->objid_);
  swap(questionnum_, other->questionnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_UseHelpItem_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_HelpItemEffect_SC::InitAsDefaultInstance() {
}
class MSG_Ret_HelpItemEffect_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_HelpItemEffect_SC>()._has_bits_);
  static void set_has_stageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_objid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_questionnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_effectvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_Ret_HelpItemEffect_SC::MSG_Ret_HelpItemEffect_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Ret_HelpItemEffect_SC)
}
MSG_Ret_HelpItemEffect_SC::MSG_Ret_HelpItemEffect_SC(const MSG_Ret_HelpItemEffect_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stageid_, &from.stageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&effectvalue_) -
    reinterpret_cast<char*>(&stageid_)) + sizeof(effectvalue_));
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Ret_HelpItemEffect_SC)
}

void MSG_Ret_HelpItemEffect_SC::SharedCtor() {
  ::memset(&stageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effectvalue_) -
      reinterpret_cast<char*>(&stageid_)) + sizeof(effectvalue_));
}

MSG_Ret_HelpItemEffect_SC::~MSG_Ret_HelpItemEffect_SC() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Ret_HelpItemEffect_SC)
  SharedDtor();
}

void MSG_Ret_HelpItemEffect_SC::SharedDtor() {
}

void MSG_Ret_HelpItemEffect_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_HelpItemEffect_SC& MSG_Ret_HelpItemEffect_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_HelpItemEffect_SC_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_HelpItemEffect_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Ret_HelpItemEffect_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&stageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effectvalue_) -
        reinterpret_cast<char*>(&stageid_)) + sizeof(effectvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_HelpItemEffect_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .quiz.QuizStage stageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::quiz::QuizStage_IsValid(val))) {
            _internal_set_stageid(static_cast<::quiz::QuizStage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 objid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_objid(&has_bits);
          objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 questionnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_questionnum(&has_bits);
          questionnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 effectvalue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_effectvalue(&has_bits);
          effectvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_HelpItemEffect_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Ret_HelpItemEffect_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .quiz.QuizStage stageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stageid(), target);
  }

  // optional uint32 objid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_objid(), target);
  }

  // optional uint32 questionnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_questionnum(), target);
  }

  // optional uint32 effectvalue = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_effectvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Ret_HelpItemEffect_SC)
  return target;
}

size_t MSG_Ret_HelpItemEffect_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Ret_HelpItemEffect_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .quiz.QuizStage stageid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stageid());
    }

    // optional uint32 objid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_objid());
    }

    // optional uint32 questionnum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_questionnum());
    }

    // optional uint32 effectvalue = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_effectvalue());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_HelpItemEffect_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Ret_HelpItemEffect_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_HelpItemEffect_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_HelpItemEffect_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Ret_HelpItemEffect_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Ret_HelpItemEffect_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_HelpItemEffect_SC::MergeFrom(const MSG_Ret_HelpItemEffect_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Ret_HelpItemEffect_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      stageid_ = from.stageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000004u) {
      questionnum_ = from.questionnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      effectvalue_ = from.effectvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_HelpItemEffect_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Ret_HelpItemEffect_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_HelpItemEffect_SC::CopyFrom(const MSG_Ret_HelpItemEffect_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Ret_HelpItemEffect_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_HelpItemEffect_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_HelpItemEffect_SC::InternalSwap(MSG_Ret_HelpItemEffect_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stageid_, other->stageid_);
  swap(objid_, other->objid_);
  swap(questionnum_, other->questionnum_);
  swap(effectvalue_, other->effectvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_HelpItemEffect_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Day7ActivityInfo::InitAsDefaultInstance() {
}
class Day7ActivityInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Day7ActivityInfo>()._has_bits_);
  static void set_has_dayid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Day7ActivityInfo::Day7ActivityInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.Day7ActivityInfo)
}
Day7ActivityInfo::Day7ActivityInfo(const Day7ActivityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dayid_, &from.dayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&dayid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:quiz.Day7ActivityInfo)
}

void Day7ActivityInfo::SharedCtor() {
  ::memset(&dayid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&dayid_)) + sizeof(state_));
}

Day7ActivityInfo::~Day7ActivityInfo() {
  // @@protoc_insertion_point(destructor:quiz.Day7ActivityInfo)
  SharedDtor();
}

void Day7ActivityInfo::SharedDtor() {
}

void Day7ActivityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Day7ActivityInfo& Day7ActivityInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Day7ActivityInfo_quiz_2eproto.base);
  return *internal_default_instance();
}


void Day7ActivityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.Day7ActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dayid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&dayid_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Day7ActivityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dayid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dayid(&has_bits);
          dayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .quiz.ActivityState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::quiz::ActivityState_IsValid(val))) {
            _internal_set_state(static_cast<::quiz::ActivityState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Day7ActivityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.Day7ActivityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dayid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dayid(), target);
  }

  // optional .quiz.ActivityState state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.Day7ActivityInfo)
  return target;
}

size_t Day7ActivityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.Day7ActivityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dayid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dayid());
    }

    // optional .quiz.ActivityState state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Day7ActivityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.Day7ActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Day7ActivityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Day7ActivityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.Day7ActivityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.Day7ActivityInfo)
    MergeFrom(*source);
  }
}

void Day7ActivityInfo::MergeFrom(const Day7ActivityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.Day7ActivityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dayid_ = from.dayid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Day7ActivityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.Day7ActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Day7ActivityInfo::CopyFrom(const Day7ActivityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.Day7ActivityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Day7ActivityInfo::IsInitialized() const {
  return true;
}

void Day7ActivityInfo::InternalSwap(Day7ActivityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dayid_, other->dayid_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Day7ActivityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Day7ActivityInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_Day7ActivityInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Day7ActivityInfo_SC>()._has_bits_);
};

MSG_Ret_Day7ActivityInfo_SC::MSG_Ret_Day7ActivityInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Ret_Day7ActivityInfo_SC)
}
MSG_Ret_Day7ActivityInfo_SC::MSG_Ret_Day7ActivityInfo_SC(const MSG_Ret_Day7ActivityInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Ret_Day7ActivityInfo_SC)
}

void MSG_Ret_Day7ActivityInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_Day7ActivityInfo_SC_quiz_2eproto.base);
}

MSG_Ret_Day7ActivityInfo_SC::~MSG_Ret_Day7ActivityInfo_SC() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Ret_Day7ActivityInfo_SC)
  SharedDtor();
}

void MSG_Ret_Day7ActivityInfo_SC::SharedDtor() {
}

void MSG_Ret_Day7ActivityInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Day7ActivityInfo_SC& MSG_Ret_Day7ActivityInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Day7ActivityInfo_SC_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Day7ActivityInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Ret_Day7ActivityInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Day7ActivityInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .quiz.Day7ActivityInfo data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Day7ActivityInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Ret_Day7ActivityInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .quiz.Day7ActivityInfo data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Ret_Day7ActivityInfo_SC)
  return target;
}

size_t MSG_Ret_Day7ActivityInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Ret_Day7ActivityInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .quiz.Day7ActivityInfo data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Day7ActivityInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Ret_Day7ActivityInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Day7ActivityInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Day7ActivityInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Ret_Day7ActivityInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Ret_Day7ActivityInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Day7ActivityInfo_SC::MergeFrom(const MSG_Ret_Day7ActivityInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Ret_Day7ActivityInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MSG_Ret_Day7ActivityInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Ret_Day7ActivityInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Day7ActivityInfo_SC::CopyFrom(const MSG_Ret_Day7ActivityInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Ret_Day7ActivityInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Day7ActivityInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Day7ActivityInfo_SC::InternalSwap(MSG_Ret_Day7ActivityInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Day7ActivityInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_RecvDay7ActivityPrize_CS::InitAsDefaultInstance() {
}
class MSG_Req_RecvDay7ActivityPrize_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_RecvDay7ActivityPrize_CS>()._has_bits_);
};

MSG_Req_RecvDay7ActivityPrize_CS::MSG_Req_RecvDay7ActivityPrize_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
}
MSG_Req_RecvDay7ActivityPrize_CS::MSG_Req_RecvDay7ActivityPrize_CS(const MSG_Req_RecvDay7ActivityPrize_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
}

void MSG_Req_RecvDay7ActivityPrize_CS::SharedCtor() {
}

MSG_Req_RecvDay7ActivityPrize_CS::~MSG_Req_RecvDay7ActivityPrize_CS() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
  SharedDtor();
}

void MSG_Req_RecvDay7ActivityPrize_CS::SharedDtor() {
}

void MSG_Req_RecvDay7ActivityPrize_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_RecvDay7ActivityPrize_CS& MSG_Req_RecvDay7ActivityPrize_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_RecvDay7ActivityPrize_CS_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_RecvDay7ActivityPrize_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_RecvDay7ActivityPrize_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_RecvDay7ActivityPrize_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
  return target;
}

size_t MSG_Req_RecvDay7ActivityPrize_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_RecvDay7ActivityPrize_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_RecvDay7ActivityPrize_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_RecvDay7ActivityPrize_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_RecvDay7ActivityPrize_CS::MergeFrom(const MSG_Req_RecvDay7ActivityPrize_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_RecvDay7ActivityPrize_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_RecvDay7ActivityPrize_CS::CopyFrom(const MSG_Req_RecvDay7ActivityPrize_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Req_RecvDay7ActivityPrize_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_RecvDay7ActivityPrize_CS::IsInitialized() const {
  return true;
}

void MSG_Req_RecvDay7ActivityPrize_CS::InternalSwap(MSG_Req_RecvDay7ActivityPrize_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_RecvDay7ActivityPrize_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_SeekActivityInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_SeekActivityInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_SeekActivityInfo_CS>()._has_bits_);
};

MSG_Req_SeekActivityInfo_CS::MSG_Req_SeekActivityInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Req_SeekActivityInfo_CS)
}
MSG_Req_SeekActivityInfo_CS::MSG_Req_SeekActivityInfo_CS(const MSG_Req_SeekActivityInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Req_SeekActivityInfo_CS)
}

void MSG_Req_SeekActivityInfo_CS::SharedCtor() {
}

MSG_Req_SeekActivityInfo_CS::~MSG_Req_SeekActivityInfo_CS() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Req_SeekActivityInfo_CS)
  SharedDtor();
}

void MSG_Req_SeekActivityInfo_CS::SharedDtor() {
}

void MSG_Req_SeekActivityInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_SeekActivityInfo_CS& MSG_Req_SeekActivityInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_SeekActivityInfo_CS_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_SeekActivityInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Req_SeekActivityInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_SeekActivityInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_SeekActivityInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Req_SeekActivityInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Req_SeekActivityInfo_CS)
  return target;
}

size_t MSG_Req_SeekActivityInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Req_SeekActivityInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_SeekActivityInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Req_SeekActivityInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_SeekActivityInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_SeekActivityInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Req_SeekActivityInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Req_SeekActivityInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_SeekActivityInfo_CS::MergeFrom(const MSG_Req_SeekActivityInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Req_SeekActivityInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_SeekActivityInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Req_SeekActivityInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_SeekActivityInfo_CS::CopyFrom(const MSG_Req_SeekActivityInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Req_SeekActivityInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_SeekActivityInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_SeekActivityInfo_CS::InternalSwap(MSG_Req_SeekActivityInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_SeekActivityInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_SeekActivityInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_SeekActivityInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_SeekActivityInfo_SC>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_SeekActivityInfo_SC::MSG_Ret_SeekActivityInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Ret_SeekActivityInfo_SC)
}
MSG_Ret_SeekActivityInfo_SC::MSG_Ret_SeekActivityInfo_SC(const MSG_Ret_SeekActivityInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&state_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Ret_SeekActivityInfo_SC)
}

void MSG_Ret_SeekActivityInfo_SC::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&state_)) + sizeof(id_));
}

MSG_Ret_SeekActivityInfo_SC::~MSG_Ret_SeekActivityInfo_SC() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Ret_SeekActivityInfo_SC)
  SharedDtor();
}

void MSG_Ret_SeekActivityInfo_SC::SharedDtor() {
}

void MSG_Ret_SeekActivityInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_SeekActivityInfo_SC& MSG_Ret_SeekActivityInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_SeekActivityInfo_SC_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_SeekActivityInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Ret_SeekActivityInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&state_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_SeekActivityInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .quiz.ActivityState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::quiz::ActivityState_IsValid(val))) {
            _internal_set_state(static_cast<::quiz::ActivityState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_SeekActivityInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Ret_SeekActivityInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .quiz.ActivityState state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Ret_SeekActivityInfo_SC)
  return target;
}

size_t MSG_Ret_SeekActivityInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Ret_SeekActivityInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .quiz.ActivityState state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_SeekActivityInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Ret_SeekActivityInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_SeekActivityInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_SeekActivityInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Ret_SeekActivityInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Ret_SeekActivityInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_SeekActivityInfo_SC::MergeFrom(const MSG_Ret_SeekActivityInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Ret_SeekActivityInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_SeekActivityInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Ret_SeekActivityInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_SeekActivityInfo_SC::CopyFrom(const MSG_Ret_SeekActivityInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Ret_SeekActivityInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_SeekActivityInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_SeekActivityInfo_SC::InternalSwap(MSG_Ret_SeekActivityInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_SeekActivityInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_RecvSeekActivityPrize_CS::InitAsDefaultInstance() {
}
class MSG_Req_RecvSeekActivityPrize_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_RecvSeekActivityPrize_CS>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_RecvSeekActivityPrize_CS::MSG_Req_RecvSeekActivityPrize_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:quiz.MSG_Req_RecvSeekActivityPrize_CS)
}
MSG_Req_RecvSeekActivityPrize_CS::MSG_Req_RecvSeekActivityPrize_CS(const MSG_Req_RecvSeekActivityPrize_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:quiz.MSG_Req_RecvSeekActivityPrize_CS)
}

void MSG_Req_RecvSeekActivityPrize_CS::SharedCtor() {
  id_ = 0u;
}

MSG_Req_RecvSeekActivityPrize_CS::~MSG_Req_RecvSeekActivityPrize_CS() {
  // @@protoc_insertion_point(destructor:quiz.MSG_Req_RecvSeekActivityPrize_CS)
  SharedDtor();
}

void MSG_Req_RecvSeekActivityPrize_CS::SharedDtor() {
}

void MSG_Req_RecvSeekActivityPrize_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_RecvSeekActivityPrize_CS& MSG_Req_RecvSeekActivityPrize_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_RecvSeekActivityPrize_CS_quiz_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_RecvSeekActivityPrize_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:quiz.MSG_Req_RecvSeekActivityPrize_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_RecvSeekActivityPrize_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_RecvSeekActivityPrize_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quiz.MSG_Req_RecvSeekActivityPrize_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quiz.MSG_Req_RecvSeekActivityPrize_CS)
  return target;
}

size_t MSG_Req_RecvSeekActivityPrize_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quiz.MSG_Req_RecvSeekActivityPrize_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_RecvSeekActivityPrize_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quiz.MSG_Req_RecvSeekActivityPrize_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_RecvSeekActivityPrize_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_RecvSeekActivityPrize_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quiz.MSG_Req_RecvSeekActivityPrize_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quiz.MSG_Req_RecvSeekActivityPrize_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_RecvSeekActivityPrize_CS::MergeFrom(const MSG_Req_RecvSeekActivityPrize_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quiz.MSG_Req_RecvSeekActivityPrize_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void MSG_Req_RecvSeekActivityPrize_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quiz.MSG_Req_RecvSeekActivityPrize_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_RecvSeekActivityPrize_CS::CopyFrom(const MSG_Req_RecvSeekActivityPrize_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quiz.MSG_Req_RecvSeekActivityPrize_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_RecvSeekActivityPrize_CS::IsInitialized() const {
  return true;
}

void MSG_Req_RecvSeekActivityPrize_CS::InternalSwap(MSG_Req_RecvSeekActivityPrize_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_RecvSeekActivityPrize_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace quiz
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::quiz::QuizData* Arena::CreateMaybeMessage< ::quiz::QuizData >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::QuizData >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::AnswerRewards* Arena::CreateMaybeMessage< ::quiz::AnswerRewards >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::AnswerRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Req_QuizPrivilege_CS* Arena::CreateMaybeMessage< ::quiz::MSG_Req_QuizPrivilege_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Req_QuizPrivilege_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Ret_QuizPrivilege_SC* Arena::CreateMaybeMessage< ::quiz::MSG_Ret_QuizPrivilege_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Ret_QuizPrivilege_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Req_StartQuiz_CS* Arena::CreateMaybeMessage< ::quiz::MSG_Req_StartQuiz_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Req_StartQuiz_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Ret_QuestionsData_SC* Arena::CreateMaybeMessage< ::quiz::MSG_Ret_QuestionsData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Ret_QuestionsData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_AnswerQuestion_CS* Arena::CreateMaybeMessage< ::quiz::MSG_AnswerQuestion_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_AnswerQuestion_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Ret_QuestionResult_SC* Arena::CreateMaybeMessage< ::quiz::MSG_Ret_QuestionResult_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Ret_QuestionResult_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Req_UseHelpItem_CS* Arena::CreateMaybeMessage< ::quiz::MSG_Req_UseHelpItem_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Req_UseHelpItem_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Ret_HelpItemEffect_SC* Arena::CreateMaybeMessage< ::quiz::MSG_Ret_HelpItemEffect_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Ret_HelpItemEffect_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::Day7ActivityInfo* Arena::CreateMaybeMessage< ::quiz::Day7ActivityInfo >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::Day7ActivityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Ret_Day7ActivityInfo_SC* Arena::CreateMaybeMessage< ::quiz::MSG_Ret_Day7ActivityInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Ret_Day7ActivityInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Req_RecvDay7ActivityPrize_CS* Arena::CreateMaybeMessage< ::quiz::MSG_Req_RecvDay7ActivityPrize_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Req_RecvDay7ActivityPrize_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Req_SeekActivityInfo_CS* Arena::CreateMaybeMessage< ::quiz::MSG_Req_SeekActivityInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Req_SeekActivityInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Ret_SeekActivityInfo_SC* Arena::CreateMaybeMessage< ::quiz::MSG_Ret_SeekActivityInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Ret_SeekActivityInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::quiz::MSG_Req_RecvSeekActivityPrize_CS* Arena::CreateMaybeMessage< ::quiz::MSG_Req_RecvSeekActivityPrize_CS >(Arena* arena) {
  return Arena::CreateInternal< ::quiz::MSG_Req_RecvSeekActivityPrize_CS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
