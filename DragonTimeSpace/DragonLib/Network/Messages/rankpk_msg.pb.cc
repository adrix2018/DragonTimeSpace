// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rankpk_msg.proto

#include "rankpk_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rankpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetTeamCurScore_SC_rankpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rankpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PkRewards_rankpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rankpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankPKHero_rankpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rankpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankPKListItem_rankpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rankpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankPKResult_rankpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rankpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardsNumber_rankpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rankpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserRankPkInfo_rankpk_5fmsg_2eproto;
namespace rankpk_msg {
class UserRankPkInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserRankPkInfo> _instance;
} _UserRankPkInfo_default_instance_;
class MSG_Req_MatchMemberInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_MatchMemberInfo_CS> _instance;
} _MSG_Req_MatchMemberInfo_CS_default_instance_;
class MSG_Ret_MatchMemberInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MatchMemberInfo_SC> _instance;
} _MSG_Ret_MatchMemberInfo_SC_default_instance_;
class MSG_Req_StartMatch_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_StartMatch_CS> _instance;
} _MSG_Req_StartMatch_CS_default_instance_;
class MSG_Ret_StartMatch_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_StartMatch_SC> _instance;
} _MSG_Ret_StartMatch_SC_default_instance_;
class MSG_Req_CancelMatch_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CancelMatch_CS> _instance;
} _MSG_Req_CancelMatch_CS_default_instance_;
class MSG_Ret_CancelMatch_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CancelMatch_SC> _instance;
} _MSG_Ret_CancelMatch_SC_default_instance_;
class MSG_RankPkReqPrepare_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RankPkReqPrepare_CS> _instance;
} _MSG_RankPkReqPrepare_CS_default_instance_;
class MSG_RankPkReqPrepare_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RankPkReqPrepare_SC> _instance;
} _MSG_RankPkReqPrepare_SC_default_instance_;
class MSG_GoToBattle_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_GoToBattle_SC> _instance;
} _MSG_GoToBattle_SC_default_instance_;
class MSG_Ret_MatchResult_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MatchResult_SC> _instance;
} _MSG_Ret_MatchResult_SC_default_instance_;
class MSG_Req_GotoBattle_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GotoBattle_CS> _instance;
} _MSG_Req_GotoBattle_CS_default_instance_;
class MSG_RetStartPrepare_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetStartPrepare_SC> _instance;
} _MSG_RetStartPrepare_SC_default_instance_;
class MSG_ReqChoosePrepared_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqChoosePrepared_CS> _instance;
} _MSG_ReqChoosePrepared_CS_default_instance_;
class MSG_RetChoosePrepared_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetChoosePrepared_SC> _instance;
} _MSG_RetChoosePrepared_SC_default_instance_;
class MSG_RetFightCountDown_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetFightCountDown_SC> _instance;
} _MSG_RetFightCountDown_SC_default_instance_;
class MSG_RetStartFight_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetStartFight_SC> _instance;
} _MSG_RetStartFight_SC_default_instance_;
class MSG_RetSpeedupFight_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetSpeedupFight_SC> _instance;
} _MSG_RetSpeedupFight_SC_default_instance_;
class RankPKResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankPKResult> _instance;
} _RankPKResult_default_instance_;
class MSG_RetFightFinish_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetFightFinish_SC> _instance;
} _MSG_RetFightFinish_SC_default_instance_;
class MSG_ReqGetSeasonRewards_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqGetSeasonRewards_CS> _instance;
} _MSG_ReqGetSeasonRewards_CS_default_instance_;
class MSG_RetGetSeasonRewards_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetGetSeasonRewards_SC> _instance;
} _MSG_RetGetSeasonRewards_SC_default_instance_;
class MSG_RetRewardsEveryday_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRewardsEveryday_SC> _instance;
} _MSG_RetRewardsEveryday_SC_default_instance_;
class MSG_ReqRewardsEveryday_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqRewardsEveryday_CS> _instance;
} _MSG_ReqRewardsEveryday_CS_default_instance_;
class PkRewardsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PkRewards> _instance;
} _PkRewards_default_instance_;
class RewardsNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RewardsNumber> _instance;
} _RewardsNumber_default_instance_;
class RankPKHeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankPKHero> _instance;
} _RankPKHero_default_instance_;
class MSG_RetRankPKHeroHistory_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRankPKHeroHistory_SC> _instance;
} _MSG_RetRankPKHeroHistory_SC_default_instance_;
class MSG_RetUserRankStar_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetUserRankStar_SC> _instance;
} _MSG_RetUserRankStar_SC_default_instance_;
class MSG_RetTeamLeftMemSize_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetTeamLeftMemSize_SC> _instance;
} _MSG_RetTeamLeftMemSize_SC_default_instance_;
class MSG_ReqRankPKCurStage_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqRankPKCurStage_CS> _instance;
} _MSG_ReqRankPKCurStage_CS_default_instance_;
class MSG_RetRankPKCurStage_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRankPKCurStage_SC> _instance;
} _MSG_RetRankPKCurStage_SC_default_instance_;
class MSG_RetPreparedNum_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPreparedNum_SC> _instance;
} _MSG_RetPreparedNum_SC_default_instance_;
class MSG_RetMemPkPrepared_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetMemPkPrepared_SC> _instance;
} _MSG_RetMemPkPrepared_SC_default_instance_;
class MSG_RetPKGeneralConfig_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPKGeneralConfig_SC> _instance;
} _MSG_RetPKGeneralConfig_SC_default_instance_;
class MSG_RetTeamCurScore_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetTeamCurScore_SC> _instance;
} _MSG_RetTeamCurScore_SC_default_instance_;
class RankPKListItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankPKListItem> _instance;
} _RankPKListItem_default_instance_;
class MSG_ReqRankPKList_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqRankPKList_CS> _instance;
} _MSG_ReqRankPKList_CS_default_instance_;
class MSG_RetRankPKList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRankPKList_SC> _instance;
} _MSG_RetRankPKList_SC_default_instance_;
}  // namespace rankpk_msg
static void InitDefaultsscc_info_MSG_GoToBattle_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_GoToBattle_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_GoToBattle_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_GoToBattle_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_GoToBattle_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_GoToBattle_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RankPkReqPrepare_CS_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RankPkReqPrepare_CS_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RankPkReqPrepare_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RankPkReqPrepare_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RankPkReqPrepare_CS_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RankPkReqPrepare_CS_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RankPkReqPrepare_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RankPkReqPrepare_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RankPkReqPrepare_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RankPkReqPrepare_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RankPkReqPrepare_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RankPkReqPrepare_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqChoosePrepared_CS_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_ReqChoosePrepared_CS_default_instance_;
    new (ptr) ::rankpk_msg::MSG_ReqChoosePrepared_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_ReqChoosePrepared_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqChoosePrepared_CS_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqChoosePrepared_CS_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqGetSeasonRewards_CS_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_ReqGetSeasonRewards_CS_default_instance_;
    new (ptr) ::rankpk_msg::MSG_ReqGetSeasonRewards_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_ReqGetSeasonRewards_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqGetSeasonRewards_CS_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqGetSeasonRewards_CS_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqRankPKCurStage_CS_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_ReqRankPKCurStage_CS_default_instance_;
    new (ptr) ::rankpk_msg::MSG_ReqRankPKCurStage_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_ReqRankPKCurStage_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqRankPKCurStage_CS_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqRankPKCurStage_CS_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqRankPKList_CS_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_ReqRankPKList_CS_default_instance_;
    new (ptr) ::rankpk_msg::MSG_ReqRankPKList_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_ReqRankPKList_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqRankPKList_CS_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqRankPKList_CS_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqRewardsEveryday_CS_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_ReqRewardsEveryday_CS_default_instance_;
    new (ptr) ::rankpk_msg::MSG_ReqRewardsEveryday_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_ReqRewardsEveryday_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqRewardsEveryday_CS_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqRewardsEveryday_CS_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CancelMatch_CS_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_Req_CancelMatch_CS_default_instance_;
    new (ptr) ::rankpk_msg::MSG_Req_CancelMatch_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_Req_CancelMatch_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CancelMatch_CS_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CancelMatch_CS_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GotoBattle_CS_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_Req_GotoBattle_CS_default_instance_;
    new (ptr) ::rankpk_msg::MSG_Req_GotoBattle_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_Req_GotoBattle_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GotoBattle_CS_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GotoBattle_CS_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_MatchMemberInfo_CS_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_Req_MatchMemberInfo_CS_default_instance_;
    new (ptr) ::rankpk_msg::MSG_Req_MatchMemberInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_Req_MatchMemberInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_MatchMemberInfo_CS_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_MatchMemberInfo_CS_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_StartMatch_CS_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_Req_StartMatch_CS_default_instance_;
    new (ptr) ::rankpk_msg::MSG_Req_StartMatch_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_Req_StartMatch_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_StartMatch_CS_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_StartMatch_CS_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetChoosePrepared_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetChoosePrepared_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetChoosePrepared_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetChoosePrepared_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetChoosePrepared_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetChoosePrepared_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetFightCountDown_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetFightCountDown_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetFightCountDown_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetFightCountDown_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetFightCountDown_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetFightCountDown_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetFightFinish_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetFightFinish_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetFightFinish_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetFightFinish_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MSG_RetFightFinish_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MSG_RetFightFinish_SC_rankpk_5fmsg_2eproto}, {
      &scc_info_RewardsNumber_rankpk_5fmsg_2eproto.base,
      &scc_info_RankPKResult_rankpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetGetSeasonRewards_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetGetSeasonRewards_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetGetSeasonRewards_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetGetSeasonRewards_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetGetSeasonRewards_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetGetSeasonRewards_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetMemPkPrepared_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetMemPkPrepared_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetMemPkPrepared_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetMemPkPrepared_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetMemPkPrepared_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetMemPkPrepared_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetPKGeneralConfig_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetPKGeneralConfig_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetPKGeneralConfig_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetPKGeneralConfig_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetPKGeneralConfig_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetPKGeneralConfig_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetPreparedNum_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetPreparedNum_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetPreparedNum_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetPreparedNum_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetPreparedNum_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetPreparedNum_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetRankPKCurStage_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetRankPKCurStage_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetRankPKCurStage_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetRankPKCurStage_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetRankPKCurStage_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetRankPKCurStage_SC_rankpk_5fmsg_2eproto}, {
      &scc_info_MSG_RetTeamCurScore_SC_rankpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetRankPKHeroHistory_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetRankPKHeroHistory_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetRankPKHeroHistory_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetRankPKHeroHistory_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetRankPKHeroHistory_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetRankPKHeroHistory_SC_rankpk_5fmsg_2eproto}, {
      &scc_info_RankPKHero_rankpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetRankPKList_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetRankPKList_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetRankPKList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetRankPKList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetRankPKList_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetRankPKList_SC_rankpk_5fmsg_2eproto}, {
      &scc_info_RankPKListItem_rankpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetRewardsEveryday_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetRewardsEveryday_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetRewardsEveryday_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetRewardsEveryday_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetRewardsEveryday_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetRewardsEveryday_SC_rankpk_5fmsg_2eproto}, {
      &scc_info_PkRewards_rankpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetSpeedupFight_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetSpeedupFight_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetSpeedupFight_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetSpeedupFight_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetSpeedupFight_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetSpeedupFight_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetStartFight_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetStartFight_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetStartFight_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetStartFight_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetStartFight_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetStartFight_SC_rankpk_5fmsg_2eproto}, {
      &scc_info_MSG_RetTeamCurScore_SC_rankpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetStartPrepare_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetStartPrepare_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetStartPrepare_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetStartPrepare_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetStartPrepare_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetStartPrepare_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetTeamCurScore_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetTeamCurScore_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetTeamCurScore_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetTeamCurScore_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetTeamCurScore_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetTeamCurScore_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetTeamLeftMemSize_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetTeamLeftMemSize_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetTeamLeftMemSize_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetTeamLeftMemSize_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetTeamLeftMemSize_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetTeamLeftMemSize_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetUserRankStar_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_RetUserRankStar_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_RetUserRankStar_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_RetUserRankStar_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetUserRankStar_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetUserRankStar_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_CancelMatch_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_Ret_CancelMatch_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_Ret_CancelMatch_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_Ret_CancelMatch_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_CancelMatch_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_CancelMatch_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_MatchMemberInfo_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_Ret_MatchMemberInfo_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_Ret_MatchMemberInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_Ret_MatchMemberInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_MatchMemberInfo_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_MatchMemberInfo_SC_rankpk_5fmsg_2eproto}, {
      &scc_info_UserRankPkInfo_rankpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_MatchResult_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_Ret_MatchResult_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_Ret_MatchResult_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_Ret_MatchResult_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_MatchResult_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_MatchResult_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_StartMatch_SC_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_MSG_Ret_StartMatch_SC_default_instance_;
    new (ptr) ::rankpk_msg::MSG_Ret_StartMatch_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::MSG_Ret_StartMatch_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_StartMatch_SC_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_StartMatch_SC_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_PkRewards_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_PkRewards_default_instance_;
    new (ptr) ::rankpk_msg::PkRewards();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::PkRewards::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PkRewards_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PkRewards_rankpk_5fmsg_2eproto}, {
      &scc_info_RewardsNumber_rankpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_RankPKHero_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_RankPKHero_default_instance_;
    new (ptr) ::rankpk_msg::RankPKHero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::RankPKHero::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankPKHero_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RankPKHero_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_RankPKListItem_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_RankPKListItem_default_instance_;
    new (ptr) ::rankpk_msg::RankPKListItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::RankPKListItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankPKListItem_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RankPKListItem_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_RankPKResult_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_RankPKResult_default_instance_;
    new (ptr) ::rankpk_msg::RankPKResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::RankPKResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankPKResult_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RankPKResult_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_RewardsNumber_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_RewardsNumber_default_instance_;
    new (ptr) ::rankpk_msg::RewardsNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::RewardsNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RewardsNumber_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RewardsNumber_rankpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_UserRankPkInfo_rankpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rankpk_msg::_UserRankPkInfo_default_instance_;
    new (ptr) ::rankpk_msg::UserRankPkInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rankpk_msg::UserRankPkInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserRankPkInfo_rankpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserRankPkInfo_rankpk_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rankpk_5fmsg_2eproto[39];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rankpk_5fmsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rankpk_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rankpk_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, charid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, name_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, heroid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, fight_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, rank_level_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, rank_star_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, rank_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, hide_score_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, all_battles_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, success_battles_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, battle_score_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, seanson_battles_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, best_rank_level_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::UserRankPkInfo, best_rank_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Req_MatchMemberInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Req_MatchMemberInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchMemberInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchMemberInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchMemberInfo_SC, members_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchMemberInfo_SC, leaderid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchMemberInfo_SC, season_id_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchMemberInfo_SC, start_time_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchMemberInfo_SC, end_time_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchMemberInfo_SC, leftdays_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Req_StartMatch_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Req_StartMatch_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_StartMatch_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_StartMatch_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_StartMatch_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Req_CancelMatch_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Req_CancelMatch_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_CancelMatch_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_CancelMatch_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_CancelMatch_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RankPkReqPrepare_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RankPkReqPrepare_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RankPkReqPrepare_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RankPkReqPrepare_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RankPkReqPrepare_SC, readystate_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RankPkReqPrepare_SC, readynum_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RankPkReqPrepare_SC, totalnum_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RankPkReqPrepare_SC, lefttime_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RankPkReqPrepare_SC, enemyreadynum_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RankPkReqPrepare_SC, enemytotalnum_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_GoToBattle_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_GoToBattle_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_GoToBattle_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchResult_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchResult_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchResult_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchResult_SC, lefttime_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Ret_MatchResult_SC, totalnum_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Req_GotoBattle_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_Req_GotoBattle_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetStartPrepare_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetStartPrepare_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetStartPrepare_SC, duration_),
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqChoosePrepared_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqChoosePrepared_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetChoosePrepared_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetChoosePrepared_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetChoosePrepared_SC, errcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetFightCountDown_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetFightCountDown_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetFightCountDown_SC, duration_),
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetStartFight_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetStartFight_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetStartFight_SC, duration_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetStartFight_SC, score_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetSpeedupFight_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetSpeedupFight_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetSpeedupFight_SC, duration_),
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKResult, charid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKResult, name_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKResult, heroid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKResult, cure_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKResult, hurt_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKResult, dead_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKResult, kill_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetFightFinish_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetFightFinish_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetFightFinish_SC, duration_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetFightFinish_SC, winteamid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetFightFinish_SC, rewards_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetFightFinish_SC, merankpkresult_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetFightFinish_SC, enemyrankpkresult_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqGetSeasonRewards_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqGetSeasonRewards_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetGetSeasonRewards_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetGetSeasonRewards_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetGetSeasonRewards_SC, season_rewards_received_),
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRewardsEveryday_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRewardsEveryday_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRewardsEveryday_SC, battle_number_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRewardsEveryday_SC, success_number_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRewardsEveryday_SC, pkrewards_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRewardsEveryday_SC, remainder_day_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRewardsEveryday_SC, rank_level_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRewardsEveryday_SC, rewards_received_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqRewardsEveryday_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqRewardsEveryday_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::PkRewards, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::PkRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::PkRewards, heroid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::PkRewards, time_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::PkRewards, rewards_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::PkRewards, pkresult_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RewardsNumber, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RewardsNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RewardsNumber, objectid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RewardsNumber, number_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKHero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKHero, heroid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKHero, lastusetime_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKHeroHistory_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKHeroHistory_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKHeroHistory_SC, heros_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetUserRankStar_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetUserRankStar_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetUserRankStar_SC, uid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetUserRankStar_SC, rank_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamLeftMemSize_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamLeftMemSize_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamLeftMemSize_SC, team1id_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamLeftMemSize_SC, team1left_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamLeftMemSize_SC, team2id_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamLeftMemSize_SC, team2left_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqRankPKCurStage_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqRankPKCurStage_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKCurStage_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKCurStage_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKCurStage_SC, curstage_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKCurStage_SC, duration_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKCurStage_SC, score_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetPreparedNum_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetPreparedNum_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetPreparedNum_SC, curnum_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetPreparedNum_SC, allnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetMemPkPrepared_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetMemPkPrepared_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetMemPkPrepared_SC, memid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetMemPkPrepared_SC, heroid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetPKGeneralConfig_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetPKGeneralConfig_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetPKGeneralConfig_SC, teampknum_),
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamCurScore_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamCurScore_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamCurScore_SC, team1id_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamCurScore_SC, team1score_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamCurScore_SC, team2id_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetTeamCurScore_SC, team2score_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKListItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKListItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKListItem, position_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKListItem, charid_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKListItem, name_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKListItem, ranklevel_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKListItem, guildname_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKListItem, winbattle_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::RankPKListItem, winrate_),
  3,
  2,
  0,
  4,
  1,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqRankPKList_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqRankPKList_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_ReqRankPKList_CS, type_),
  0,
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKList_SC, type_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKList_SC, myposition_),
  PROTOBUF_FIELD_OFFSET(::rankpk_msg::MSG_RetRankPKList_SC, data_),
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::rankpk_msg::UserRankPkInfo)},
  { 33, 38, sizeof(::rankpk_msg::MSG_Req_MatchMemberInfo_CS)},
  { 38, 49, sizeof(::rankpk_msg::MSG_Ret_MatchMemberInfo_SC)},
  { 55, 60, sizeof(::rankpk_msg::MSG_Req_StartMatch_CS)},
  { 60, 66, sizeof(::rankpk_msg::MSG_Ret_StartMatch_SC)},
  { 67, 72, sizeof(::rankpk_msg::MSG_Req_CancelMatch_CS)},
  { 72, 78, sizeof(::rankpk_msg::MSG_Ret_CancelMatch_SC)},
  { 79, 84, sizeof(::rankpk_msg::MSG_RankPkReqPrepare_CS)},
  { 84, 95, sizeof(::rankpk_msg::MSG_RankPkReqPrepare_SC)},
  { 101, 107, sizeof(::rankpk_msg::MSG_GoToBattle_SC)},
  { 108, 116, sizeof(::rankpk_msg::MSG_Ret_MatchResult_SC)},
  { 119, 124, sizeof(::rankpk_msg::MSG_Req_GotoBattle_CS)},
  { 124, 130, sizeof(::rankpk_msg::MSG_RetStartPrepare_SC)},
  { 131, 136, sizeof(::rankpk_msg::MSG_ReqChoosePrepared_CS)},
  { 136, 142, sizeof(::rankpk_msg::MSG_RetChoosePrepared_SC)},
  { 143, 149, sizeof(::rankpk_msg::MSG_RetFightCountDown_SC)},
  { 150, 157, sizeof(::rankpk_msg::MSG_RetStartFight_SC)},
  { 159, 165, sizeof(::rankpk_msg::MSG_RetSpeedupFight_SC)},
  { 166, 178, sizeof(::rankpk_msg::RankPKResult)},
  { 185, 195, sizeof(::rankpk_msg::MSG_RetFightFinish_SC)},
  { 200, 205, sizeof(::rankpk_msg::MSG_ReqGetSeasonRewards_CS)},
  { 205, 211, sizeof(::rankpk_msg::MSG_RetGetSeasonRewards_SC)},
  { 212, 223, sizeof(::rankpk_msg::MSG_RetRewardsEveryday_SC)},
  { 229, 234, sizeof(::rankpk_msg::MSG_ReqRewardsEveryday_CS)},
  { 234, 243, sizeof(::rankpk_msg::PkRewards)},
  { 247, 254, sizeof(::rankpk_msg::RewardsNumber)},
  { 256, 263, sizeof(::rankpk_msg::RankPKHero)},
  { 265, 271, sizeof(::rankpk_msg::MSG_RetRankPKHeroHistory_SC)},
  { 272, 279, sizeof(::rankpk_msg::MSG_RetUserRankStar_SC)},
  { 281, 290, sizeof(::rankpk_msg::MSG_RetTeamLeftMemSize_SC)},
  { 294, 299, sizeof(::rankpk_msg::MSG_ReqRankPKCurStage_CS)},
  { 299, 307, sizeof(::rankpk_msg::MSG_RetRankPKCurStage_SC)},
  { 310, 317, sizeof(::rankpk_msg::MSG_RetPreparedNum_SC)},
  { 319, 326, sizeof(::rankpk_msg::MSG_RetMemPkPrepared_SC)},
  { 328, 334, sizeof(::rankpk_msg::MSG_RetPKGeneralConfig_SC)},
  { 335, 344, sizeof(::rankpk_msg::MSG_RetTeamCurScore_SC)},
  { 348, 360, sizeof(::rankpk_msg::RankPKListItem)},
  { 367, 373, sizeof(::rankpk_msg::MSG_ReqRankPKList_CS)},
  { 374, 382, sizeof(::rankpk_msg::MSG_RetRankPKList_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_UserRankPkInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_Req_MatchMemberInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_Ret_MatchMemberInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_Req_StartMatch_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_Ret_StartMatch_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_Req_CancelMatch_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_Ret_CancelMatch_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RankPkReqPrepare_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RankPkReqPrepare_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_GoToBattle_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_Ret_MatchResult_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_Req_GotoBattle_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetStartPrepare_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_ReqChoosePrepared_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetChoosePrepared_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetFightCountDown_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetStartFight_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetSpeedupFight_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_RankPKResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetFightFinish_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_ReqGetSeasonRewards_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetGetSeasonRewards_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetRewardsEveryday_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_ReqRewardsEveryday_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_PkRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_RewardsNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_RankPKHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetRankPKHeroHistory_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetUserRankStar_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetTeamLeftMemSize_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_ReqRankPKCurStage_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetRankPKCurStage_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetPreparedNum_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetMemPkPrepared_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetPKGeneralConfig_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetTeamCurScore_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_RankPKListItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_ReqRankPKList_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rankpk_msg::_MSG_RetRankPKList_SC_default_instance_),
};

const char descriptor_table_protodef_rankpk_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020rankpk_msg.proto\022\nrankpk_msg\032\016msg_enum"
  ".proto\"\237\002\n\016UserRankPkInfo\022\016\n\006charid\030\001 \001("
  "\r\022\014\n\004name\030\002 \001(\t\022\016\n\006heroid\030\003 \001(\r\022\r\n\005fight"
  "\030\004 \001(\r\022\022\n\nrank_level\030\005 \001(\r\022\021\n\trank_star\030"
  "\006 \001(\r\022\014\n\004rank\030\007 \001(\r\022\022\n\nhide_score\030\010 \001(\r\022"
  "\023\n\013all_battles\030\t \001(\r\022\027\n\017success_battles\030"
  "\n \001(\r\022\024\n\014battle_score\030\013 \001(\r\022\027\n\017seanson_b"
  "attles\030\014 \001(\r\022\027\n\017best_rank_level\030\r \001(\r\022\021\n"
  "\tbest_rank\030\016 \001(\r\"\034\n\032MSG_Req_MatchMemberI"
  "nfo_CS\"\246\001\n\032MSG_Ret_MatchMemberInfo_SC\022+\n"
  "\007members\030\001 \003(\0132\032.rankpk_msg.UserRankPkIn"
  "fo\022\020\n\010leaderid\030\002 \001(\004\022\021\n\tseason_id\030\003 \001(\r\022"
  "\022\n\nstart_time\030\004 \001(\r\022\020\n\010end_time\030\005 \001(\r\022\020\n"
  "\010leftdays\030\006 \001(\r\"\027\n\025MSG_Req_StartMatch_CS"
  "\"(\n\025MSG_Ret_StartMatch_SC\022\017\n\007retcode\030\001 \001"
  "(\r\"\030\n\026MSG_Req_CancelMatch_CS\")\n\026MSG_Ret_"
  "CancelMatch_SC\022\017\n\007retcode\030\001 \001(\r\"\031\n\027MSG_R"
  "ankPkReqPrepare_CS\"\221\001\n\027MSG_RankPkReqPrep"
  "are_SC\022\022\n\nreadystate\030\001 \002(\r\022\020\n\010readynum\030\002"
  " \002(\r\022\020\n\010totalnum\030\003 \002(\r\022\020\n\010lefttime\030\004 \001(\r"
  "\022\025\n\renemyreadynum\030\005 \001(\r\022\025\n\renemytotalnum"
  "\030\006 \001(\r\"$\n\021MSG_GoToBattle_SC\022\017\n\007retcode\030\001"
  " \001(\r\"M\n\026MSG_Ret_MatchResult_SC\022\017\n\007retcod"
  "e\030\001 \001(\r\022\020\n\010lefttime\030\002 \001(\r\022\020\n\010totalnum\030\003 "
  "\001(\r\"\027\n\025MSG_Req_GotoBattle_CS\"*\n\026MSG_RetS"
  "tartPrepare_SC\022\020\n\010duration\030\001 \001(\r\"\032\n\030MSG_"
  "ReqChoosePrepared_CS\"+\n\030MSG_RetChoosePre"
  "pared_SC\022\017\n\007errcode\030\001 \001(\r\",\n\030MSG_RetFigh"
  "tCountDown_SC\022\020\n\010duration\030\001 \001(\r\"[\n\024MSG_R"
  "etStartFight_SC\022\020\n\010duration\030\001 \001(\r\0221\n\005sco"
  "re\030\002 \001(\0132\".rankpk_msg.MSG_RetTeamCurScor"
  "e_SC\"*\n\026MSG_RetSpeedupFight_SC\022\020\n\010durati"
  "on\030\001 \001(\r\"t\n\014RankPKResult\022\016\n\006charid\030\001 \001(\r"
  "\022\014\n\004name\030\002 \001(\t\022\016\n\006heroid\030\003 \001(\r\022\014\n\004cure\030\004"
  " \001(\r\022\014\n\004hurt\030\005 \001(\r\022\014\n\004dead\030\006 \001(\r\022\014\n\004kill"
  "\030\007 \001(\r\"\317\001\n\025MSG_RetFightFinish_SC\022\020\n\010dura"
  "tion\030\001 \001(\r\022\021\n\twinteamid\030\002 \001(\r\022*\n\007rewards"
  "\030\003 \003(\0132\031.rankpk_msg.RewardsNumber\0220\n\016MeR"
  "ankPKResult\030\004 \003(\0132\030.rankpk_msg.RankPKRes"
  "ult\0223\n\021EnemyRankPKResult\030\005 \003(\0132\030.rankpk_"
  "msg.RankPKResult\"\034\n\032MSG_ReqGetSeasonRewa"
  "rds_CS\"=\n\032MSG_RetGetSeasonRewards_SC\022\037\n\027"
  "season_rewards_received\030\001 \001(\010\"\271\001\n\031MSG_Re"
  "tRewardsEveryday_SC\022\025\n\rbattle_number\030\001 \001"
  "(\r\022\026\n\016success_number\030\002 \001(\r\022(\n\tpkrewards\030"
  "\003 \003(\0132\025.rankpk_msg.PkRewards\022\025\n\rremainde"
  "r_day\030\004 \001(\r\022\022\n\nrank_level\030\005 \001(\r\022\030\n\020rewar"
  "ds_received\030\006 \001(\010\"\033\n\031MSG_ReqRewardsEvery"
  "day_CS\"g\n\tPkRewards\022\016\n\006heroid\030\001 \001(\r\022\014\n\004t"
  "ime\030\002 \001(\r\022*\n\007rewards\030\003 \003(\0132\031.rankpk_msg."
  "RewardsNumber\022\020\n\010pkresult\030\004 \001(\010\"1\n\rRewar"
  "dsNumber\022\020\n\010objectid\030\001 \001(\r\022\016\n\006number\030\002 \001"
  "(\r\"1\n\nRankPKHero\022\016\n\006heroid\030\001 \001(\r\022\023\n\013last"
  "usetime\030\002 \001(\r\"D\n\033MSG_RetRankPKHeroHistor"
  "y_SC\022%\n\005heros\030\001 \003(\0132\026.rankpk_msg.RankPKH"
  "ero\"3\n\026MSG_RetUserRankStar_SC\022\013\n\003uid\030\001 \001"
  "(\004\022\014\n\004rank\030\002 \001(\r\"c\n\031MSG_RetTeamLeftMemSi"
  "ze_SC\022\017\n\007team1id\030\001 \001(\r\022\021\n\tteam1left\030\002 \001("
  "\r\022\017\n\007team2id\030\003 \001(\r\022\021\n\tteam2left\030\004 \001(\r\"\032\n"
  "\030MSG_ReqRankPKCurStage_CS\"\201\001\n\030MSG_RetRan"
  "kPKCurStage_SC\022 \n\010curstage\030\001 \002(\0162\016.msg.S"
  "tageType\022\020\n\010duration\030\002 \001(\r\0221\n\005score\030\003 \001("
  "\0132\".rankpk_msg.MSG_RetTeamCurScore_SC\"7\n"
  "\025MSG_RetPreparedNum_SC\022\016\n\006curnum\030\001 \001(\r\022\016"
  "\n\006allnum\030\002 \001(\r\"8\n\027MSG_RetMemPkPrepared_S"
  "C\022\r\n\005memid\030\001 \001(\004\022\016\n\006heroid\030\002 \001(\r\".\n\031MSG_"
  "RetPKGeneralConfig_SC\022\021\n\tteampknum\030\001 \001(\r"
  "\"b\n\026MSG_RetTeamCurScore_SC\022\017\n\007team1id\030\001 "
  "\001(\r\022\022\n\nteam1score\030\002 \001(\r\022\017\n\007team2id\030\003 \001(\r"
  "\022\022\n\nteam2score\030\004 \001(\r\"\212\001\n\016RankPKListItem\022"
  "\020\n\010position\030\001 \001(\r\022\016\n\006charid\030\002 \001(\004\022\014\n\004nam"
  "e\030\003 \001(\t\022\021\n\tranklevel\030\004 \001(\r\022\021\n\tguildname\030"
  "\005 \001(\t\022\021\n\twinbattle\030\006 \001(\r\022\017\n\007winrate\030\007 \001("
  "\r\"@\n\024MSG_ReqRankPKList_CS\022(\n\004type\030\001 \001(\0162"
  "\032.rankpk_msg.RankPKListType\"~\n\024MSG_RetRa"
  "nkPKList_SC\022(\n\004type\030\001 \001(\0162\032.rankpk_msg.R"
  "ankPKListType\022\022\n\nmyposition\030\002 \001(\r\022(\n\004dat"
  "a\030\003 \003(\0132\032.rankpk_msg.RankPKListItem*C\n\016R"
  "ankPKListType\022\026\n\022RankPKListType_All\020\000\022\031\n"
  "\025RankPKListType_Friend\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rankpk_5fmsg_2eproto_deps[1] = {
  &::descriptor_table_msg_5fenum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rankpk_5fmsg_2eproto_sccs[39] = {
  &scc_info_MSG_GoToBattle_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RankPkReqPrepare_CS_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RankPkReqPrepare_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_ReqChoosePrepared_CS_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_ReqGetSeasonRewards_CS_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_ReqRankPKCurStage_CS_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_ReqRankPKList_CS_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_ReqRewardsEveryday_CS_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_CancelMatch_CS_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_GotoBattle_CS_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_MatchMemberInfo_CS_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_StartMatch_CS_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetChoosePrepared_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetFightCountDown_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetFightFinish_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetGetSeasonRewards_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetMemPkPrepared_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetPKGeneralConfig_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetPreparedNum_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetRankPKCurStage_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetRankPKHeroHistory_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetRankPKList_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetRewardsEveryday_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetSpeedupFight_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetStartFight_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetStartPrepare_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetTeamCurScore_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetTeamLeftMemSize_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_RetUserRankStar_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_CancelMatch_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_MatchMemberInfo_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_MatchResult_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_StartMatch_SC_rankpk_5fmsg_2eproto.base,
  &scc_info_PkRewards_rankpk_5fmsg_2eproto.base,
  &scc_info_RankPKHero_rankpk_5fmsg_2eproto.base,
  &scc_info_RankPKListItem_rankpk_5fmsg_2eproto.base,
  &scc_info_RankPKResult_rankpk_5fmsg_2eproto.base,
  &scc_info_RewardsNumber_rankpk_5fmsg_2eproto.base,
  &scc_info_UserRankPkInfo_rankpk_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rankpk_5fmsg_2eproto_once;
static bool descriptor_table_rankpk_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rankpk_5fmsg_2eproto = {
  &descriptor_table_rankpk_5fmsg_2eproto_initialized, descriptor_table_protodef_rankpk_5fmsg_2eproto, "rankpk_msg.proto", 3184,
  &descriptor_table_rankpk_5fmsg_2eproto_once, descriptor_table_rankpk_5fmsg_2eproto_sccs, descriptor_table_rankpk_5fmsg_2eproto_deps, 39, 1,
  schemas, file_default_instances, TableStruct_rankpk_5fmsg_2eproto::offsets,
  file_level_metadata_rankpk_5fmsg_2eproto, 39, file_level_enum_descriptors_rankpk_5fmsg_2eproto, file_level_service_descriptors_rankpk_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rankpk_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rankpk_5fmsg_2eproto)), true);
namespace rankpk_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RankPKListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rankpk_5fmsg_2eproto);
  return file_level_enum_descriptors_rankpk_5fmsg_2eproto[0];
}
bool RankPKListType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void UserRankPkInfo::InitAsDefaultInstance() {
}
class UserRankPkInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UserRankPkInfo>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rank_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rank_star(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hide_score(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_all_battles(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_success_battles(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_battle_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_seanson_battles(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_best_rank_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_best_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

UserRankPkInfo::UserRankPkInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.UserRankPkInfo)
}
UserRankPkInfo::UserRankPkInfo(const UserRankPkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&best_rank_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(best_rank_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.UserRankPkInfo)
}

void UserRankPkInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserRankPkInfo_rankpk_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&best_rank_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(best_rank_));
}

UserRankPkInfo::~UserRankPkInfo() {
  // @@protoc_insertion_point(destructor:rankpk_msg.UserRankPkInfo)
  SharedDtor();
}

void UserRankPkInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserRankPkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserRankPkInfo& UserRankPkInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserRankPkInfo_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void UserRankPkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.UserRankPkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hide_score_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(hide_score_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&all_battles_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&best_rank_) -
        reinterpret_cast<char*>(&all_battles_)) + sizeof(best_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserRankPkInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rankpk_msg.UserRankPkInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fight(&has_bits);
          fight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rank_level(&has_bits);
          rank_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank_star = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rank_star(&has_bits);
          rank_star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hide_score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_hide_score(&has_bits);
          hide_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 all_battles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_all_battles(&has_bits);
          all_battles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 success_battles = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_success_battles(&has_bits);
          success_battles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 battle_score = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_battle_score(&has_bits);
          battle_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seanson_battles = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_seanson_battles(&has_bits);
          seanson_battles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_rank_level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_best_rank_level(&has_bits);
          best_rank_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_rank = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_best_rank(&has_bits);
          best_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserRankPkInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.UserRankPkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 charid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_charid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rankpk_msg.UserRankPkInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 heroid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_heroid(), target);
  }

  // optional uint32 fight = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fight(), target);
  }

  // optional uint32 rank_level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rank_level(), target);
  }

  // optional uint32 rank_star = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rank_star(), target);
  }

  // optional uint32 rank = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rank(), target);
  }

  // optional uint32 hide_score = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_hide_score(), target);
  }

  // optional uint32 all_battles = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_all_battles(), target);
  }

  // optional uint32 success_battles = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_success_battles(), target);
  }

  // optional uint32 battle_score = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_battle_score(), target);
  }

  // optional uint32 seanson_battles = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_seanson_battles(), target);
  }

  // optional uint32 best_rank_level = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_best_rank_level(), target);
  }

  // optional uint32 best_rank = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_best_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.UserRankPkInfo)
  return target;
}

size_t UserRankPkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.UserRankPkInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 charid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_charid());
    }

    // optional uint32 heroid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 fight = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fight());
    }

    // optional uint32 rank_level = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_level());
    }

    // optional uint32 rank_star = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_star());
    }

    // optional uint32 rank = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint32 hide_score = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hide_score());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 all_battles = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_all_battles());
    }

    // optional uint32 success_battles = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_success_battles());
    }

    // optional uint32 battle_score = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_battle_score());
    }

    // optional uint32 seanson_battles = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seanson_battles());
    }

    // optional uint32 best_rank_level = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_rank_level());
    }

    // optional uint32 best_rank = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_rank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRankPkInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.UserRankPkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRankPkInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserRankPkInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.UserRankPkInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.UserRankPkInfo)
    MergeFrom(*source);
  }
}

void UserRankPkInfo::MergeFrom(const UserRankPkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.UserRankPkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000004u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000008u) {
      fight_ = from.fight_;
    }
    if (cached_has_bits & 0x00000010u) {
      rank_level_ = from.rank_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      rank_star_ = from.rank_star_;
    }
    if (cached_has_bits & 0x00000040u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000080u) {
      hide_score_ = from.hide_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      all_battles_ = from.all_battles_;
    }
    if (cached_has_bits & 0x00000200u) {
      success_battles_ = from.success_battles_;
    }
    if (cached_has_bits & 0x00000400u) {
      battle_score_ = from.battle_score_;
    }
    if (cached_has_bits & 0x00000800u) {
      seanson_battles_ = from.seanson_battles_;
    }
    if (cached_has_bits & 0x00001000u) {
      best_rank_level_ = from.best_rank_level_;
    }
    if (cached_has_bits & 0x00002000u) {
      best_rank_ = from.best_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserRankPkInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.UserRankPkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRankPkInfo::CopyFrom(const UserRankPkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.UserRankPkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRankPkInfo::IsInitialized() const {
  return true;
}

void UserRankPkInfo::InternalSwap(UserRankPkInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(heroid_, other->heroid_);
  swap(fight_, other->fight_);
  swap(rank_level_, other->rank_level_);
  swap(rank_star_, other->rank_star_);
  swap(rank_, other->rank_);
  swap(hide_score_, other->hide_score_);
  swap(all_battles_, other->all_battles_);
  swap(success_battles_, other->success_battles_);
  swap(battle_score_, other->battle_score_);
  swap(seanson_battles_, other->seanson_battles_);
  swap(best_rank_level_, other->best_rank_level_);
  swap(best_rank_, other->best_rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserRankPkInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_MatchMemberInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_MatchMemberInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_MatchMemberInfo_CS>()._has_bits_);
};

MSG_Req_MatchMemberInfo_CS::MSG_Req_MatchMemberInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
}
MSG_Req_MatchMemberInfo_CS::MSG_Req_MatchMemberInfo_CS(const MSG_Req_MatchMemberInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
}

void MSG_Req_MatchMemberInfo_CS::SharedCtor() {
}

MSG_Req_MatchMemberInfo_CS::~MSG_Req_MatchMemberInfo_CS() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
  SharedDtor();
}

void MSG_Req_MatchMemberInfo_CS::SharedDtor() {
}

void MSG_Req_MatchMemberInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_MatchMemberInfo_CS& MSG_Req_MatchMemberInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_MatchMemberInfo_CS_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_MatchMemberInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_MatchMemberInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_MatchMemberInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
  return target;
}

size_t MSG_Req_MatchMemberInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_MatchMemberInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_MatchMemberInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_MatchMemberInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_MatchMemberInfo_CS::MergeFrom(const MSG_Req_MatchMemberInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_MatchMemberInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_MatchMemberInfo_CS::CopyFrom(const MSG_Req_MatchMemberInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_Req_MatchMemberInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_MatchMemberInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_MatchMemberInfo_CS::InternalSwap(MSG_Req_MatchMemberInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_MatchMemberInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MatchMemberInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MatchMemberInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MatchMemberInfo_SC>()._has_bits_);
  static void set_has_leaderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_season_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leftdays(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_Ret_MatchMemberInfo_SC::MSG_Ret_MatchMemberInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
}
MSG_Ret_MatchMemberInfo_SC::MSG_Ret_MatchMemberInfo_SC(const MSG_Ret_MatchMemberInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leaderid_, &from.leaderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&leftdays_) -
    reinterpret_cast<char*>(&leaderid_)) + sizeof(leftdays_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
}

void MSG_Ret_MatchMemberInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_MatchMemberInfo_SC_rankpk_5fmsg_2eproto.base);
  ::memset(&leaderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leftdays_) -
      reinterpret_cast<char*>(&leaderid_)) + sizeof(leftdays_));
}

MSG_Ret_MatchMemberInfo_SC::~MSG_Ret_MatchMemberInfo_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
  SharedDtor();
}

void MSG_Ret_MatchMemberInfo_SC::SharedDtor() {
}

void MSG_Ret_MatchMemberInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MatchMemberInfo_SC& MSG_Ret_MatchMemberInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MatchMemberInfo_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MatchMemberInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&leaderid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leftdays_) -
        reinterpret_cast<char*>(&leaderid_)) + sizeof(leftdays_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MatchMemberInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rankpk_msg.UserRankPkInfo members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 leaderid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_leaderid(&has_bits);
          leaderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_season_id(&has_bits);
          season_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leftdays = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_leftdays(&has_bits);
          leftdays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MatchMemberInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rankpk_msg.UserRankPkInfo members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 leaderid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_leaderid(), target);
  }

  // optional uint32 season_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_season_id(), target);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_time(), target);
  }

  // optional uint32 end_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_end_time(), target);
  }

  // optional uint32 leftdays = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_leftdays(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
  return target;
}

size_t MSG_Ret_MatchMemberInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rankpk_msg.UserRankPkInfo members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 leaderid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_leaderid());
    }

    // optional uint32 season_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season_id());
    }

    // optional uint32 start_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional uint32 end_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_time());
    }

    // optional uint32 leftdays = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leftdays());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MatchMemberInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MatchMemberInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MatchMemberInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MatchMemberInfo_SC::MergeFrom(const MSG_Ret_MatchMemberInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      leaderid_ = from.leaderid_;
    }
    if (cached_has_bits & 0x00000002u) {
      season_id_ = from.season_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      leftdays_ = from.leftdays_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_MatchMemberInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MatchMemberInfo_SC::CopyFrom(const MSG_Ret_MatchMemberInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_Ret_MatchMemberInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MatchMemberInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MatchMemberInfo_SC::InternalSwap(MSG_Ret_MatchMemberInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  swap(leaderid_, other->leaderid_);
  swap(season_id_, other->season_id_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(leftdays_, other->leftdays_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MatchMemberInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_StartMatch_CS::InitAsDefaultInstance() {
}
class MSG_Req_StartMatch_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_StartMatch_CS>()._has_bits_);
};

MSG_Req_StartMatch_CS::MSG_Req_StartMatch_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_Req_StartMatch_CS)
}
MSG_Req_StartMatch_CS::MSG_Req_StartMatch_CS(const MSG_Req_StartMatch_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_Req_StartMatch_CS)
}

void MSG_Req_StartMatch_CS::SharedCtor() {
}

MSG_Req_StartMatch_CS::~MSG_Req_StartMatch_CS() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_Req_StartMatch_CS)
  SharedDtor();
}

void MSG_Req_StartMatch_CS::SharedDtor() {
}

void MSG_Req_StartMatch_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_StartMatch_CS& MSG_Req_StartMatch_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_StartMatch_CS_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_StartMatch_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_Req_StartMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_StartMatch_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_StartMatch_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_Req_StartMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_Req_StartMatch_CS)
  return target;
}

size_t MSG_Req_StartMatch_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_Req_StartMatch_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_StartMatch_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_Req_StartMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_StartMatch_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_StartMatch_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_Req_StartMatch_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_Req_StartMatch_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_StartMatch_CS::MergeFrom(const MSG_Req_StartMatch_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_Req_StartMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_StartMatch_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_Req_StartMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_StartMatch_CS::CopyFrom(const MSG_Req_StartMatch_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_Req_StartMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_StartMatch_CS::IsInitialized() const {
  return true;
}

void MSG_Req_StartMatch_CS::InternalSwap(MSG_Req_StartMatch_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_StartMatch_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_StartMatch_SC::InitAsDefaultInstance() {
}
class MSG_Ret_StartMatch_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_StartMatch_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_StartMatch_SC::MSG_Ret_StartMatch_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_Ret_StartMatch_SC)
}
MSG_Ret_StartMatch_SC::MSG_Ret_StartMatch_SC(const MSG_Ret_StartMatch_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_Ret_StartMatch_SC)
}

void MSG_Ret_StartMatch_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_StartMatch_SC::~MSG_Ret_StartMatch_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_Ret_StartMatch_SC)
  SharedDtor();
}

void MSG_Ret_StartMatch_SC::SharedDtor() {
}

void MSG_Ret_StartMatch_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_StartMatch_SC& MSG_Ret_StartMatch_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_StartMatch_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_StartMatch_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_Ret_StartMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_StartMatch_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_StartMatch_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_Ret_StartMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_Ret_StartMatch_SC)
  return target;
}

size_t MSG_Ret_StartMatch_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_Ret_StartMatch_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_StartMatch_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_Ret_StartMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_StartMatch_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_StartMatch_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_Ret_StartMatch_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_Ret_StartMatch_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_StartMatch_SC::MergeFrom(const MSG_Ret_StartMatch_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_Ret_StartMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_StartMatch_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_Ret_StartMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_StartMatch_SC::CopyFrom(const MSG_Ret_StartMatch_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_Ret_StartMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_StartMatch_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_StartMatch_SC::InternalSwap(MSG_Ret_StartMatch_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_StartMatch_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CancelMatch_CS::InitAsDefaultInstance() {
}
class MSG_Req_CancelMatch_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CancelMatch_CS>()._has_bits_);
};

MSG_Req_CancelMatch_CS::MSG_Req_CancelMatch_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_Req_CancelMatch_CS)
}
MSG_Req_CancelMatch_CS::MSG_Req_CancelMatch_CS(const MSG_Req_CancelMatch_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_Req_CancelMatch_CS)
}

void MSG_Req_CancelMatch_CS::SharedCtor() {
}

MSG_Req_CancelMatch_CS::~MSG_Req_CancelMatch_CS() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_Req_CancelMatch_CS)
  SharedDtor();
}

void MSG_Req_CancelMatch_CS::SharedDtor() {
}

void MSG_Req_CancelMatch_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CancelMatch_CS& MSG_Req_CancelMatch_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CancelMatch_CS_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CancelMatch_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_Req_CancelMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CancelMatch_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CancelMatch_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_Req_CancelMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_Req_CancelMatch_CS)
  return target;
}

size_t MSG_Req_CancelMatch_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_Req_CancelMatch_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CancelMatch_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_Req_CancelMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CancelMatch_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CancelMatch_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_Req_CancelMatch_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_Req_CancelMatch_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CancelMatch_CS::MergeFrom(const MSG_Req_CancelMatch_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_Req_CancelMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_CancelMatch_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_Req_CancelMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CancelMatch_CS::CopyFrom(const MSG_Req_CancelMatch_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_Req_CancelMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CancelMatch_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CancelMatch_CS::InternalSwap(MSG_Req_CancelMatch_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CancelMatch_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CancelMatch_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CancelMatch_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CancelMatch_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_CancelMatch_SC::MSG_Ret_CancelMatch_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_Ret_CancelMatch_SC)
}
MSG_Ret_CancelMatch_SC::MSG_Ret_CancelMatch_SC(const MSG_Ret_CancelMatch_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_Ret_CancelMatch_SC)
}

void MSG_Ret_CancelMatch_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_CancelMatch_SC::~MSG_Ret_CancelMatch_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_Ret_CancelMatch_SC)
  SharedDtor();
}

void MSG_Ret_CancelMatch_SC::SharedDtor() {
}

void MSG_Ret_CancelMatch_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CancelMatch_SC& MSG_Ret_CancelMatch_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CancelMatch_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CancelMatch_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_Ret_CancelMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CancelMatch_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CancelMatch_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_Ret_CancelMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_Ret_CancelMatch_SC)
  return target;
}

size_t MSG_Ret_CancelMatch_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_Ret_CancelMatch_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CancelMatch_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_Ret_CancelMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CancelMatch_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CancelMatch_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_Ret_CancelMatch_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_Ret_CancelMatch_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CancelMatch_SC::MergeFrom(const MSG_Ret_CancelMatch_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_Ret_CancelMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_CancelMatch_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_Ret_CancelMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CancelMatch_SC::CopyFrom(const MSG_Ret_CancelMatch_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_Ret_CancelMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CancelMatch_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CancelMatch_SC::InternalSwap(MSG_Ret_CancelMatch_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CancelMatch_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RankPkReqPrepare_CS::InitAsDefaultInstance() {
}
class MSG_RankPkReqPrepare_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RankPkReqPrepare_CS>()._has_bits_);
};

MSG_RankPkReqPrepare_CS::MSG_RankPkReqPrepare_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RankPkReqPrepare_CS)
}
MSG_RankPkReqPrepare_CS::MSG_RankPkReqPrepare_CS(const MSG_RankPkReqPrepare_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RankPkReqPrepare_CS)
}

void MSG_RankPkReqPrepare_CS::SharedCtor() {
}

MSG_RankPkReqPrepare_CS::~MSG_RankPkReqPrepare_CS() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RankPkReqPrepare_CS)
  SharedDtor();
}

void MSG_RankPkReqPrepare_CS::SharedDtor() {
}

void MSG_RankPkReqPrepare_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RankPkReqPrepare_CS& MSG_RankPkReqPrepare_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RankPkReqPrepare_CS_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RankPkReqPrepare_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RankPkReqPrepare_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RankPkReqPrepare_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RankPkReqPrepare_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RankPkReqPrepare_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RankPkReqPrepare_CS)
  return target;
}

size_t MSG_RankPkReqPrepare_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RankPkReqPrepare_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RankPkReqPrepare_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RankPkReqPrepare_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RankPkReqPrepare_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RankPkReqPrepare_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RankPkReqPrepare_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RankPkReqPrepare_CS)
    MergeFrom(*source);
  }
}

void MSG_RankPkReqPrepare_CS::MergeFrom(const MSG_RankPkReqPrepare_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RankPkReqPrepare_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_RankPkReqPrepare_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RankPkReqPrepare_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RankPkReqPrepare_CS::CopyFrom(const MSG_RankPkReqPrepare_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RankPkReqPrepare_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RankPkReqPrepare_CS::IsInitialized() const {
  return true;
}

void MSG_RankPkReqPrepare_CS::InternalSwap(MSG_RankPkReqPrepare_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RankPkReqPrepare_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RankPkReqPrepare_SC::InitAsDefaultInstance() {
}
class MSG_RankPkReqPrepare_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RankPkReqPrepare_SC>()._has_bits_);
  static void set_has_readystate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_readynum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_totalnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lefttime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enemyreadynum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_enemytotalnum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MSG_RankPkReqPrepare_SC::MSG_RankPkReqPrepare_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RankPkReqPrepare_SC)
}
MSG_RankPkReqPrepare_SC::MSG_RankPkReqPrepare_SC(const MSG_RankPkReqPrepare_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&readystate_, &from.readystate_,
    static_cast<size_t>(reinterpret_cast<char*>(&enemytotalnum_) -
    reinterpret_cast<char*>(&readystate_)) + sizeof(enemytotalnum_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RankPkReqPrepare_SC)
}

void MSG_RankPkReqPrepare_SC::SharedCtor() {
  ::memset(&readystate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enemytotalnum_) -
      reinterpret_cast<char*>(&readystate_)) + sizeof(enemytotalnum_));
}

MSG_RankPkReqPrepare_SC::~MSG_RankPkReqPrepare_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RankPkReqPrepare_SC)
  SharedDtor();
}

void MSG_RankPkReqPrepare_SC::SharedDtor() {
}

void MSG_RankPkReqPrepare_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RankPkReqPrepare_SC& MSG_RankPkReqPrepare_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RankPkReqPrepare_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RankPkReqPrepare_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RankPkReqPrepare_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&readystate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enemytotalnum_) -
        reinterpret_cast<char*>(&readystate_)) + sizeof(enemytotalnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RankPkReqPrepare_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 readystate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_readystate(&has_bits);
          readystate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 readynum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_readynum(&has_bits);
          readynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 totalnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_totalnum(&has_bits);
          totalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lefttime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lefttime(&has_bits);
          lefttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enemyreadynum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enemyreadynum(&has_bits);
          enemyreadynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enemytotalnum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_enemytotalnum(&has_bits);
          enemytotalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RankPkReqPrepare_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RankPkReqPrepare_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 readystate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_readystate(), target);
  }

  // required uint32 readynum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_readynum(), target);
  }

  // required uint32 totalnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_totalnum(), target);
  }

  // optional uint32 lefttime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lefttime(), target);
  }

  // optional uint32 enemyreadynum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_enemyreadynum(), target);
  }

  // optional uint32 enemytotalnum = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_enemytotalnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RankPkReqPrepare_SC)
  return target;
}

size_t MSG_RankPkReqPrepare_SC::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:rankpk_msg.MSG_RankPkReqPrepare_SC)
  size_t total_size = 0;

  if (_internal_has_readystate()) {
    // required uint32 readystate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_readystate());
  }

  if (_internal_has_readynum()) {
    // required uint32 readynum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_readynum());
  }

  if (_internal_has_totalnum()) {
    // required uint32 totalnum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalnum());
  }

  return total_size;
}
size_t MSG_RankPkReqPrepare_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RankPkReqPrepare_SC)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 readystate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_readystate());

    // required uint32 readynum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_readynum());

    // required uint32 totalnum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional uint32 lefttime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lefttime());
    }

    // optional uint32 enemyreadynum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enemyreadynum());
    }

    // optional uint32 enemytotalnum = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enemytotalnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RankPkReqPrepare_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RankPkReqPrepare_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RankPkReqPrepare_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RankPkReqPrepare_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RankPkReqPrepare_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RankPkReqPrepare_SC)
    MergeFrom(*source);
  }
}

void MSG_RankPkReqPrepare_SC::MergeFrom(const MSG_RankPkReqPrepare_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RankPkReqPrepare_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      readystate_ = from.readystate_;
    }
    if (cached_has_bits & 0x00000002u) {
      readynum_ = from.readynum_;
    }
    if (cached_has_bits & 0x00000004u) {
      totalnum_ = from.totalnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      lefttime_ = from.lefttime_;
    }
    if (cached_has_bits & 0x00000010u) {
      enemyreadynum_ = from.enemyreadynum_;
    }
    if (cached_has_bits & 0x00000020u) {
      enemytotalnum_ = from.enemytotalnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RankPkReqPrepare_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RankPkReqPrepare_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RankPkReqPrepare_SC::CopyFrom(const MSG_RankPkReqPrepare_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RankPkReqPrepare_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RankPkReqPrepare_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MSG_RankPkReqPrepare_SC::InternalSwap(MSG_RankPkReqPrepare_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(readystate_, other->readystate_);
  swap(readynum_, other->readynum_);
  swap(totalnum_, other->totalnum_);
  swap(lefttime_, other->lefttime_);
  swap(enemyreadynum_, other->enemyreadynum_);
  swap(enemytotalnum_, other->enemytotalnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RankPkReqPrepare_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_GoToBattle_SC::InitAsDefaultInstance() {
}
class MSG_GoToBattle_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_GoToBattle_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_GoToBattle_SC::MSG_GoToBattle_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_GoToBattle_SC)
}
MSG_GoToBattle_SC::MSG_GoToBattle_SC(const MSG_GoToBattle_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_GoToBattle_SC)
}

void MSG_GoToBattle_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_GoToBattle_SC::~MSG_GoToBattle_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_GoToBattle_SC)
  SharedDtor();
}

void MSG_GoToBattle_SC::SharedDtor() {
}

void MSG_GoToBattle_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_GoToBattle_SC& MSG_GoToBattle_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_GoToBattle_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_GoToBattle_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_GoToBattle_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_GoToBattle_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_GoToBattle_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_GoToBattle_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_GoToBattle_SC)
  return target;
}

size_t MSG_GoToBattle_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_GoToBattle_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_GoToBattle_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_GoToBattle_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_GoToBattle_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_GoToBattle_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_GoToBattle_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_GoToBattle_SC)
    MergeFrom(*source);
  }
}

void MSG_GoToBattle_SC::MergeFrom(const MSG_GoToBattle_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_GoToBattle_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_GoToBattle_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_GoToBattle_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_GoToBattle_SC::CopyFrom(const MSG_GoToBattle_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_GoToBattle_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_GoToBattle_SC::IsInitialized() const {
  return true;
}

void MSG_GoToBattle_SC::InternalSwap(MSG_GoToBattle_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_GoToBattle_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MatchResult_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MatchResult_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MatchResult_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lefttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_totalnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_MatchResult_SC::MSG_Ret_MatchResult_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_Ret_MatchResult_SC)
}
MSG_Ret_MatchResult_SC::MSG_Ret_MatchResult_SC(const MSG_Ret_MatchResult_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalnum_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(totalnum_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_Ret_MatchResult_SC)
}

void MSG_Ret_MatchResult_SC::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalnum_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(totalnum_));
}

MSG_Ret_MatchResult_SC::~MSG_Ret_MatchResult_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_Ret_MatchResult_SC)
  SharedDtor();
}

void MSG_Ret_MatchResult_SC::SharedDtor() {
}

void MSG_Ret_MatchResult_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MatchResult_SC& MSG_Ret_MatchResult_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MatchResult_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MatchResult_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_Ret_MatchResult_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&totalnum_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(totalnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MatchResult_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lefttime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lefttime(&has_bits);
          lefttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 totalnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_totalnum(&has_bits);
          totalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MatchResult_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_Ret_MatchResult_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional uint32 lefttime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lefttime(), target);
  }

  // optional uint32 totalnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_totalnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_Ret_MatchResult_SC)
  return target;
}

size_t MSG_Ret_MatchResult_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_Ret_MatchResult_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

    // optional uint32 lefttime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lefttime());
    }

    // optional uint32 totalnum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_totalnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MatchResult_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_Ret_MatchResult_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MatchResult_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MatchResult_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_Ret_MatchResult_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_Ret_MatchResult_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MatchResult_SC::MergeFrom(const MSG_Ret_MatchResult_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_Ret_MatchResult_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      lefttime_ = from.lefttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      totalnum_ = from.totalnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_MatchResult_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_Ret_MatchResult_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MatchResult_SC::CopyFrom(const MSG_Ret_MatchResult_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_Ret_MatchResult_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MatchResult_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MatchResult_SC::InternalSwap(MSG_Ret_MatchResult_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
  swap(lefttime_, other->lefttime_);
  swap(totalnum_, other->totalnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MatchResult_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GotoBattle_CS::InitAsDefaultInstance() {
}
class MSG_Req_GotoBattle_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GotoBattle_CS>()._has_bits_);
};

MSG_Req_GotoBattle_CS::MSG_Req_GotoBattle_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_Req_GotoBattle_CS)
}
MSG_Req_GotoBattle_CS::MSG_Req_GotoBattle_CS(const MSG_Req_GotoBattle_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_Req_GotoBattle_CS)
}

void MSG_Req_GotoBattle_CS::SharedCtor() {
}

MSG_Req_GotoBattle_CS::~MSG_Req_GotoBattle_CS() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_Req_GotoBattle_CS)
  SharedDtor();
}

void MSG_Req_GotoBattle_CS::SharedDtor() {
}

void MSG_Req_GotoBattle_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GotoBattle_CS& MSG_Req_GotoBattle_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GotoBattle_CS_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GotoBattle_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_Req_GotoBattle_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GotoBattle_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GotoBattle_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_Req_GotoBattle_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_Req_GotoBattle_CS)
  return target;
}

size_t MSG_Req_GotoBattle_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_Req_GotoBattle_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GotoBattle_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_Req_GotoBattle_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GotoBattle_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GotoBattle_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_Req_GotoBattle_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_Req_GotoBattle_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GotoBattle_CS::MergeFrom(const MSG_Req_GotoBattle_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_Req_GotoBattle_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GotoBattle_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_Req_GotoBattle_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GotoBattle_CS::CopyFrom(const MSG_Req_GotoBattle_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_Req_GotoBattle_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GotoBattle_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GotoBattle_CS::InternalSwap(MSG_Req_GotoBattle_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GotoBattle_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetStartPrepare_SC::InitAsDefaultInstance() {
}
class MSG_RetStartPrepare_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetStartPrepare_SC>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetStartPrepare_SC::MSG_RetStartPrepare_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetStartPrepare_SC)
}
MSG_RetStartPrepare_SC::MSG_RetStartPrepare_SC(const MSG_RetStartPrepare_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetStartPrepare_SC)
}

void MSG_RetStartPrepare_SC::SharedCtor() {
  duration_ = 0u;
}

MSG_RetStartPrepare_SC::~MSG_RetStartPrepare_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetStartPrepare_SC)
  SharedDtor();
}

void MSG_RetStartPrepare_SC::SharedDtor() {
}

void MSG_RetStartPrepare_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetStartPrepare_SC& MSG_RetStartPrepare_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetStartPrepare_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetStartPrepare_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetStartPrepare_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetStartPrepare_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetStartPrepare_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetStartPrepare_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetStartPrepare_SC)
  return target;
}

size_t MSG_RetStartPrepare_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetStartPrepare_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 duration = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetStartPrepare_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetStartPrepare_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetStartPrepare_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetStartPrepare_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetStartPrepare_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetStartPrepare_SC)
    MergeFrom(*source);
  }
}

void MSG_RetStartPrepare_SC::MergeFrom(const MSG_RetStartPrepare_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetStartPrepare_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _internal_set_duration(from._internal_duration());
  }
}

void MSG_RetStartPrepare_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetStartPrepare_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetStartPrepare_SC::CopyFrom(const MSG_RetStartPrepare_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetStartPrepare_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetStartPrepare_SC::IsInitialized() const {
  return true;
}

void MSG_RetStartPrepare_SC::InternalSwap(MSG_RetStartPrepare_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetStartPrepare_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqChoosePrepared_CS::InitAsDefaultInstance() {
}
class MSG_ReqChoosePrepared_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqChoosePrepared_CS>()._has_bits_);
};

MSG_ReqChoosePrepared_CS::MSG_ReqChoosePrepared_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_ReqChoosePrepared_CS)
}
MSG_ReqChoosePrepared_CS::MSG_ReqChoosePrepared_CS(const MSG_ReqChoosePrepared_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_ReqChoosePrepared_CS)
}

void MSG_ReqChoosePrepared_CS::SharedCtor() {
}

MSG_ReqChoosePrepared_CS::~MSG_ReqChoosePrepared_CS() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_ReqChoosePrepared_CS)
  SharedDtor();
}

void MSG_ReqChoosePrepared_CS::SharedDtor() {
}

void MSG_ReqChoosePrepared_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqChoosePrepared_CS& MSG_ReqChoosePrepared_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqChoosePrepared_CS_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqChoosePrepared_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_ReqChoosePrepared_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqChoosePrepared_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqChoosePrepared_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_ReqChoosePrepared_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_ReqChoosePrepared_CS)
  return target;
}

size_t MSG_ReqChoosePrepared_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_ReqChoosePrepared_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqChoosePrepared_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_ReqChoosePrepared_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqChoosePrepared_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqChoosePrepared_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_ReqChoosePrepared_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_ReqChoosePrepared_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqChoosePrepared_CS::MergeFrom(const MSG_ReqChoosePrepared_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_ReqChoosePrepared_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqChoosePrepared_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_ReqChoosePrepared_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqChoosePrepared_CS::CopyFrom(const MSG_ReqChoosePrepared_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_ReqChoosePrepared_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqChoosePrepared_CS::IsInitialized() const {
  return true;
}

void MSG_ReqChoosePrepared_CS::InternalSwap(MSG_ReqChoosePrepared_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqChoosePrepared_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetChoosePrepared_SC::InitAsDefaultInstance() {
}
class MSG_RetChoosePrepared_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetChoosePrepared_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetChoosePrepared_SC::MSG_RetChoosePrepared_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetChoosePrepared_SC)
}
MSG_RetChoosePrepared_SC::MSG_RetChoosePrepared_SC(const MSG_RetChoosePrepared_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetChoosePrepared_SC)
}

void MSG_RetChoosePrepared_SC::SharedCtor() {
  errcode_ = 0u;
}

MSG_RetChoosePrepared_SC::~MSG_RetChoosePrepared_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetChoosePrepared_SC)
  SharedDtor();
}

void MSG_RetChoosePrepared_SC::SharedDtor() {
}

void MSG_RetChoosePrepared_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetChoosePrepared_SC& MSG_RetChoosePrepared_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetChoosePrepared_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetChoosePrepared_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetChoosePrepared_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetChoosePrepared_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetChoosePrepared_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetChoosePrepared_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetChoosePrepared_SC)
  return target;
}

size_t MSG_RetChoosePrepared_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetChoosePrepared_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 errcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetChoosePrepared_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetChoosePrepared_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetChoosePrepared_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetChoosePrepared_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetChoosePrepared_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetChoosePrepared_SC)
    MergeFrom(*source);
  }
}

void MSG_RetChoosePrepared_SC::MergeFrom(const MSG_RetChoosePrepared_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetChoosePrepared_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errcode()) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void MSG_RetChoosePrepared_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetChoosePrepared_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetChoosePrepared_SC::CopyFrom(const MSG_RetChoosePrepared_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetChoosePrepared_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetChoosePrepared_SC::IsInitialized() const {
  return true;
}

void MSG_RetChoosePrepared_SC::InternalSwap(MSG_RetChoosePrepared_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetChoosePrepared_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetFightCountDown_SC::InitAsDefaultInstance() {
}
class MSG_RetFightCountDown_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetFightCountDown_SC>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetFightCountDown_SC::MSG_RetFightCountDown_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetFightCountDown_SC)
}
MSG_RetFightCountDown_SC::MSG_RetFightCountDown_SC(const MSG_RetFightCountDown_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetFightCountDown_SC)
}

void MSG_RetFightCountDown_SC::SharedCtor() {
  duration_ = 0u;
}

MSG_RetFightCountDown_SC::~MSG_RetFightCountDown_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetFightCountDown_SC)
  SharedDtor();
}

void MSG_RetFightCountDown_SC::SharedDtor() {
}

void MSG_RetFightCountDown_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetFightCountDown_SC& MSG_RetFightCountDown_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetFightCountDown_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetFightCountDown_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetFightCountDown_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetFightCountDown_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetFightCountDown_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetFightCountDown_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetFightCountDown_SC)
  return target;
}

size_t MSG_RetFightCountDown_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetFightCountDown_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 duration = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetFightCountDown_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetFightCountDown_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetFightCountDown_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetFightCountDown_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetFightCountDown_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetFightCountDown_SC)
    MergeFrom(*source);
  }
}

void MSG_RetFightCountDown_SC::MergeFrom(const MSG_RetFightCountDown_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetFightCountDown_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _internal_set_duration(from._internal_duration());
  }
}

void MSG_RetFightCountDown_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetFightCountDown_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetFightCountDown_SC::CopyFrom(const MSG_RetFightCountDown_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetFightCountDown_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetFightCountDown_SC::IsInitialized() const {
  return true;
}

void MSG_RetFightCountDown_SC::InternalSwap(MSG_RetFightCountDown_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetFightCountDown_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetStartFight_SC::InitAsDefaultInstance() {
  ::rankpk_msg::_MSG_RetStartFight_SC_default_instance_._instance.get_mutable()->score_ = const_cast< ::rankpk_msg::MSG_RetTeamCurScore_SC*>(
      ::rankpk_msg::MSG_RetTeamCurScore_SC::internal_default_instance());
}
class MSG_RetStartFight_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetStartFight_SC>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rankpk_msg::MSG_RetTeamCurScore_SC& score(const MSG_RetStartFight_SC* msg);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::rankpk_msg::MSG_RetTeamCurScore_SC&
MSG_RetStartFight_SC::_Internal::score(const MSG_RetStartFight_SC* msg) {
  return *msg->score_;
}
MSG_RetStartFight_SC::MSG_RetStartFight_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetStartFight_SC)
}
MSG_RetStartFight_SC::MSG_RetStartFight_SC(const MSG_RetStartFight_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_score()) {
    score_ = new ::rankpk_msg::MSG_RetTeamCurScore_SC(*from.score_);
  } else {
    score_ = nullptr;
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetStartFight_SC)
}

void MSG_RetStartFight_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetStartFight_SC_rankpk_5fmsg_2eproto.base);
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&score_)) + sizeof(duration_));
}

MSG_RetStartFight_SC::~MSG_RetStartFight_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetStartFight_SC)
  SharedDtor();
}

void MSG_RetStartFight_SC::SharedDtor() {
  if (this != internal_default_instance()) delete score_;
}

void MSG_RetStartFight_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetStartFight_SC& MSG_RetStartFight_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetStartFight_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetStartFight_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetStartFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(score_ != nullptr);
    score_->Clear();
  }
  duration_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetStartFight_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rankpk_msg.MSG_RetTeamCurScore_SC score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_score(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetStartFight_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetStartFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration(), target);
  }

  // optional .rankpk_msg.MSG_RetTeamCurScore_SC score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::score(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetStartFight_SC)
  return target;
}

size_t MSG_RetStartFight_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetStartFight_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .rankpk_msg.MSG_RetTeamCurScore_SC score = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *score_);
    }

    // optional uint32 duration = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetStartFight_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetStartFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetStartFight_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetStartFight_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetStartFight_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetStartFight_SC)
    MergeFrom(*source);
  }
}

void MSG_RetStartFight_SC::MergeFrom(const MSG_RetStartFight_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetStartFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_score()->::rankpk_msg::MSG_RetTeamCurScore_SC::MergeFrom(from._internal_score());
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetStartFight_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetStartFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetStartFight_SC::CopyFrom(const MSG_RetStartFight_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetStartFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetStartFight_SC::IsInitialized() const {
  return true;
}

void MSG_RetStartFight_SC::InternalSwap(MSG_RetStartFight_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(score_, other->score_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetStartFight_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetSpeedupFight_SC::InitAsDefaultInstance() {
}
class MSG_RetSpeedupFight_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetSpeedupFight_SC>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetSpeedupFight_SC::MSG_RetSpeedupFight_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetSpeedupFight_SC)
}
MSG_RetSpeedupFight_SC::MSG_RetSpeedupFight_SC(const MSG_RetSpeedupFight_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetSpeedupFight_SC)
}

void MSG_RetSpeedupFight_SC::SharedCtor() {
  duration_ = 0u;
}

MSG_RetSpeedupFight_SC::~MSG_RetSpeedupFight_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetSpeedupFight_SC)
  SharedDtor();
}

void MSG_RetSpeedupFight_SC::SharedDtor() {
}

void MSG_RetSpeedupFight_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetSpeedupFight_SC& MSG_RetSpeedupFight_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetSpeedupFight_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetSpeedupFight_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetSpeedupFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetSpeedupFight_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetSpeedupFight_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetSpeedupFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetSpeedupFight_SC)
  return target;
}

size_t MSG_RetSpeedupFight_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetSpeedupFight_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 duration = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetSpeedupFight_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetSpeedupFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetSpeedupFight_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetSpeedupFight_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetSpeedupFight_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetSpeedupFight_SC)
    MergeFrom(*source);
  }
}

void MSG_RetSpeedupFight_SC::MergeFrom(const MSG_RetSpeedupFight_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetSpeedupFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_duration()) {
    _internal_set_duration(from._internal_duration());
  }
}

void MSG_RetSpeedupFight_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetSpeedupFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetSpeedupFight_SC::CopyFrom(const MSG_RetSpeedupFight_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetSpeedupFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetSpeedupFight_SC::IsInitialized() const {
  return true;
}

void MSG_RetSpeedupFight_SC::InternalSwap(MSG_RetSpeedupFight_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetSpeedupFight_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankPKResult::InitAsDefaultInstance() {
}
class RankPKResult::_Internal {
 public:
  using HasBits = decltype(std::declval<RankPKResult>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cure(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hurt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dead(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

RankPKResult::RankPKResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.RankPKResult)
}
RankPKResult::RankPKResult(const RankPKResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&kill_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(kill_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.RankPKResult)
}

void RankPKResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankPKResult_rankpk_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(kill_));
}

RankPKResult::~RankPKResult() {
  // @@protoc_insertion_point(destructor:rankpk_msg.RankPKResult)
  SharedDtor();
}

void RankPKResult::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RankPKResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankPKResult& RankPKResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankPKResult_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RankPKResult::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.RankPKResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kill_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(kill_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RankPKResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rankpk_msg.RankPKResult.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cure(&has_bits);
          cure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hurt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hurt(&has_bits);
          hurt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dead = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dead(&has_bits);
          dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_kill(&has_bits);
          kill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankPKResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.RankPKResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 charid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_charid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rankpk_msg.RankPKResult.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 heroid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_heroid(), target);
  }

  // optional uint32 cure = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_cure(), target);
  }

  // optional uint32 hurt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hurt(), target);
  }

  // optional uint32 dead = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_dead(), target);
  }

  // optional uint32 kill = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_kill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.RankPKResult)
  return target;
}

size_t RankPKResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.RankPKResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 charid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_charid());
    }

    // optional uint32 heroid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 cure = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cure());
    }

    // optional uint32 hurt = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hurt());
    }

    // optional uint32 dead = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dead());
    }

    // optional uint32 kill = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kill());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankPKResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.RankPKResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RankPKResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankPKResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.RankPKResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.RankPKResult)
    MergeFrom(*source);
  }
}

void RankPKResult::MergeFrom(const RankPKResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.RankPKResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000004u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000008u) {
      cure_ = from.cure_;
    }
    if (cached_has_bits & 0x00000010u) {
      hurt_ = from.hurt_;
    }
    if (cached_has_bits & 0x00000020u) {
      dead_ = from.dead_;
    }
    if (cached_has_bits & 0x00000040u) {
      kill_ = from.kill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RankPKResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.RankPKResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankPKResult::CopyFrom(const RankPKResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.RankPKResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankPKResult::IsInitialized() const {
  return true;
}

void RankPKResult::InternalSwap(RankPKResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(heroid_, other->heroid_);
  swap(cure_, other->cure_);
  swap(hurt_, other->hurt_);
  swap(dead_, other->dead_);
  swap(kill_, other->kill_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankPKResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetFightFinish_SC::InitAsDefaultInstance() {
}
class MSG_RetFightFinish_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetFightFinish_SC>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_winteamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetFightFinish_SC::MSG_RetFightFinish_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetFightFinish_SC)
}
MSG_RetFightFinish_SC::MSG_RetFightFinish_SC(const MSG_RetFightFinish_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      rewards_(from.rewards_),
      merankpkresult_(from.merankpkresult_),
      enemyrankpkresult_(from.enemyrankpkresult_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&winteamid_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(winteamid_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetFightFinish_SC)
}

void MSG_RetFightFinish_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetFightFinish_SC_rankpk_5fmsg_2eproto.base);
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winteamid_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(winteamid_));
}

MSG_RetFightFinish_SC::~MSG_RetFightFinish_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetFightFinish_SC)
  SharedDtor();
}

void MSG_RetFightFinish_SC::SharedDtor() {
}

void MSG_RetFightFinish_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetFightFinish_SC& MSG_RetFightFinish_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetFightFinish_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetFightFinish_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetFightFinish_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  merankpkresult_.Clear();
  enemyrankpkresult_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winteamid_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(winteamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetFightFinish_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winteamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_winteamid(&has_bits);
          winteamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rankpk_msg.RewardsNumber rewards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .rankpk_msg.RankPKResult MeRankPKResult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_merankpkresult(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .rankpk_msg.RankPKResult EnemyRankPKResult = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enemyrankpkresult(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetFightFinish_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetFightFinish_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_duration(), target);
  }

  // optional uint32 winteamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_winteamid(), target);
  }

  // repeated .rankpk_msg.RewardsNumber rewards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rewards(i), target, stream);
  }

  // repeated .rankpk_msg.RankPKResult MeRankPKResult = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_merankpkresult_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_merankpkresult(i), target, stream);
  }

  // repeated .rankpk_msg.RankPKResult EnemyRankPKResult = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enemyrankpkresult_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_enemyrankpkresult(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetFightFinish_SC)
  return target;
}

size_t MSG_RetFightFinish_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetFightFinish_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rankpk_msg.RewardsNumber rewards = 3;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rankpk_msg.RankPKResult MeRankPKResult = 4;
  total_size += 1UL * this->_internal_merankpkresult_size();
  for (const auto& msg : this->merankpkresult_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rankpk_msg.RankPKResult EnemyRankPKResult = 5;
  total_size += 1UL * this->_internal_enemyrankpkresult_size();
  for (const auto& msg : this->enemyrankpkresult_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 duration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional uint32 winteamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winteamid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetFightFinish_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetFightFinish_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetFightFinish_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetFightFinish_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetFightFinish_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetFightFinish_SC)
    MergeFrom(*source);
  }
}

void MSG_RetFightFinish_SC::MergeFrom(const MSG_RetFightFinish_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetFightFinish_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
  merankpkresult_.MergeFrom(from.merankpkresult_);
  enemyrankpkresult_.MergeFrom(from.enemyrankpkresult_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      winteamid_ = from.winteamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetFightFinish_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetFightFinish_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetFightFinish_SC::CopyFrom(const MSG_RetFightFinish_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetFightFinish_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetFightFinish_SC::IsInitialized() const {
  return true;
}

void MSG_RetFightFinish_SC::InternalSwap(MSG_RetFightFinish_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rewards_.InternalSwap(&other->rewards_);
  merankpkresult_.InternalSwap(&other->merankpkresult_);
  enemyrankpkresult_.InternalSwap(&other->enemyrankpkresult_);
  swap(duration_, other->duration_);
  swap(winteamid_, other->winteamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetFightFinish_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqGetSeasonRewards_CS::InitAsDefaultInstance() {
}
class MSG_ReqGetSeasonRewards_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqGetSeasonRewards_CS>()._has_bits_);
};

MSG_ReqGetSeasonRewards_CS::MSG_ReqGetSeasonRewards_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
}
MSG_ReqGetSeasonRewards_CS::MSG_ReqGetSeasonRewards_CS(const MSG_ReqGetSeasonRewards_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
}

void MSG_ReqGetSeasonRewards_CS::SharedCtor() {
}

MSG_ReqGetSeasonRewards_CS::~MSG_ReqGetSeasonRewards_CS() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
  SharedDtor();
}

void MSG_ReqGetSeasonRewards_CS::SharedDtor() {
}

void MSG_ReqGetSeasonRewards_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqGetSeasonRewards_CS& MSG_ReqGetSeasonRewards_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqGetSeasonRewards_CS_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqGetSeasonRewards_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqGetSeasonRewards_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqGetSeasonRewards_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
  return target;
}

size_t MSG_ReqGetSeasonRewards_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqGetSeasonRewards_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqGetSeasonRewards_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqGetSeasonRewards_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqGetSeasonRewards_CS::MergeFrom(const MSG_ReqGetSeasonRewards_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqGetSeasonRewards_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqGetSeasonRewards_CS::CopyFrom(const MSG_ReqGetSeasonRewards_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_ReqGetSeasonRewards_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqGetSeasonRewards_CS::IsInitialized() const {
  return true;
}

void MSG_ReqGetSeasonRewards_CS::InternalSwap(MSG_ReqGetSeasonRewards_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqGetSeasonRewards_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetGetSeasonRewards_SC::InitAsDefaultInstance() {
}
class MSG_RetGetSeasonRewards_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetGetSeasonRewards_SC>()._has_bits_);
  static void set_has_season_rewards_received(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetGetSeasonRewards_SC::MSG_RetGetSeasonRewards_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetGetSeasonRewards_SC)
}
MSG_RetGetSeasonRewards_SC::MSG_RetGetSeasonRewards_SC(const MSG_RetGetSeasonRewards_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  season_rewards_received_ = from.season_rewards_received_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetGetSeasonRewards_SC)
}

void MSG_RetGetSeasonRewards_SC::SharedCtor() {
  season_rewards_received_ = false;
}

MSG_RetGetSeasonRewards_SC::~MSG_RetGetSeasonRewards_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetGetSeasonRewards_SC)
  SharedDtor();
}

void MSG_RetGetSeasonRewards_SC::SharedDtor() {
}

void MSG_RetGetSeasonRewards_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetGetSeasonRewards_SC& MSG_RetGetSeasonRewards_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetGetSeasonRewards_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetGetSeasonRewards_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetGetSeasonRewards_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  season_rewards_received_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetGetSeasonRewards_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool season_rewards_received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_season_rewards_received(&has_bits);
          season_rewards_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetGetSeasonRewards_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetGetSeasonRewards_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool season_rewards_received = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_season_rewards_received(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetGetSeasonRewards_SC)
  return target;
}

size_t MSG_RetGetSeasonRewards_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetGetSeasonRewards_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool season_rewards_received = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetGetSeasonRewards_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetGetSeasonRewards_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetGetSeasonRewards_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetGetSeasonRewards_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetGetSeasonRewards_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetGetSeasonRewards_SC)
    MergeFrom(*source);
  }
}

void MSG_RetGetSeasonRewards_SC::MergeFrom(const MSG_RetGetSeasonRewards_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetGetSeasonRewards_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_season_rewards_received()) {
    _internal_set_season_rewards_received(from._internal_season_rewards_received());
  }
}

void MSG_RetGetSeasonRewards_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetGetSeasonRewards_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetGetSeasonRewards_SC::CopyFrom(const MSG_RetGetSeasonRewards_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetGetSeasonRewards_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetGetSeasonRewards_SC::IsInitialized() const {
  return true;
}

void MSG_RetGetSeasonRewards_SC::InternalSwap(MSG_RetGetSeasonRewards_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(season_rewards_received_, other->season_rewards_received_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetGetSeasonRewards_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRewardsEveryday_SC::InitAsDefaultInstance() {
}
class MSG_RetRewardsEveryday_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRewardsEveryday_SC>()._has_bits_);
  static void set_has_battle_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remainder_day(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rank_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rewards_received(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_RetRewardsEveryday_SC::MSG_RetRewardsEveryday_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetRewardsEveryday_SC)
}
MSG_RetRewardsEveryday_SC::MSG_RetRewardsEveryday_SC(const MSG_RetRewardsEveryday_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pkrewards_(from.pkrewards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battle_number_, &from.battle_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&rewards_received_) -
    reinterpret_cast<char*>(&battle_number_)) + sizeof(rewards_received_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetRewardsEveryday_SC)
}

void MSG_RetRewardsEveryday_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetRewardsEveryday_SC_rankpk_5fmsg_2eproto.base);
  ::memset(&battle_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rewards_received_) -
      reinterpret_cast<char*>(&battle_number_)) + sizeof(rewards_received_));
}

MSG_RetRewardsEveryday_SC::~MSG_RetRewardsEveryday_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetRewardsEveryday_SC)
  SharedDtor();
}

void MSG_RetRewardsEveryday_SC::SharedDtor() {
}

void MSG_RetRewardsEveryday_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRewardsEveryday_SC& MSG_RetRewardsEveryday_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRewardsEveryday_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRewardsEveryday_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetRewardsEveryday_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pkrewards_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&battle_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rewards_received_) -
        reinterpret_cast<char*>(&battle_number_)) + sizeof(rewards_received_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRewardsEveryday_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 battle_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_battle_number(&has_bits);
          battle_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 success_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_success_number(&has_bits);
          success_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rankpk_msg.PkRewards pkrewards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pkrewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 remainder_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_remainder_day(&has_bits);
          remainder_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rank_level(&has_bits);
          rank_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rewards_received = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rewards_received(&has_bits);
          rewards_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRewardsEveryday_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetRewardsEveryday_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 battle_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_battle_number(), target);
  }

  // optional uint32 success_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_success_number(), target);
  }

  // repeated .rankpk_msg.PkRewards pkrewards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pkrewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pkrewards(i), target, stream);
  }

  // optional uint32 remainder_day = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_remainder_day(), target);
  }

  // optional uint32 rank_level = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rank_level(), target);
  }

  // optional bool rewards_received = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_rewards_received(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetRewardsEveryday_SC)
  return target;
}

size_t MSG_RetRewardsEveryday_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetRewardsEveryday_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rankpk_msg.PkRewards pkrewards = 3;
  total_size += 1UL * this->_internal_pkrewards_size();
  for (const auto& msg : this->pkrewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 battle_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_battle_number());
    }

    // optional uint32 success_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_success_number());
    }

    // optional uint32 remainder_day = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_remainder_day());
    }

    // optional uint32 rank_level = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_level());
    }

    // optional bool rewards_received = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRewardsEveryday_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetRewardsEveryday_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRewardsEveryday_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRewardsEveryday_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetRewardsEveryday_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetRewardsEveryday_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRewardsEveryday_SC::MergeFrom(const MSG_RetRewardsEveryday_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetRewardsEveryday_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pkrewards_.MergeFrom(from.pkrewards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      battle_number_ = from.battle_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      success_number_ = from.success_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      remainder_day_ = from.remainder_day_;
    }
    if (cached_has_bits & 0x00000008u) {
      rank_level_ = from.rank_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      rewards_received_ = from.rewards_received_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetRewardsEveryday_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetRewardsEveryday_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRewardsEveryday_SC::CopyFrom(const MSG_RetRewardsEveryday_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetRewardsEveryday_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRewardsEveryday_SC::IsInitialized() const {
  return true;
}

void MSG_RetRewardsEveryday_SC::InternalSwap(MSG_RetRewardsEveryday_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pkrewards_.InternalSwap(&other->pkrewards_);
  swap(battle_number_, other->battle_number_);
  swap(success_number_, other->success_number_);
  swap(remainder_day_, other->remainder_day_);
  swap(rank_level_, other->rank_level_);
  swap(rewards_received_, other->rewards_received_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRewardsEveryday_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqRewardsEveryday_CS::InitAsDefaultInstance() {
}
class MSG_ReqRewardsEveryday_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqRewardsEveryday_CS>()._has_bits_);
};

MSG_ReqRewardsEveryday_CS::MSG_ReqRewardsEveryday_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_ReqRewardsEveryday_CS)
}
MSG_ReqRewardsEveryday_CS::MSG_ReqRewardsEveryday_CS(const MSG_ReqRewardsEveryday_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_ReqRewardsEveryday_CS)
}

void MSG_ReqRewardsEveryday_CS::SharedCtor() {
}

MSG_ReqRewardsEveryday_CS::~MSG_ReqRewardsEveryday_CS() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_ReqRewardsEveryday_CS)
  SharedDtor();
}

void MSG_ReqRewardsEveryday_CS::SharedDtor() {
}

void MSG_ReqRewardsEveryday_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqRewardsEveryday_CS& MSG_ReqRewardsEveryday_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqRewardsEveryday_CS_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqRewardsEveryday_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_ReqRewardsEveryday_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqRewardsEveryday_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqRewardsEveryday_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_ReqRewardsEveryday_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_ReqRewardsEveryday_CS)
  return target;
}

size_t MSG_ReqRewardsEveryday_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_ReqRewardsEveryday_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqRewardsEveryday_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_ReqRewardsEveryday_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqRewardsEveryday_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqRewardsEveryday_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_ReqRewardsEveryday_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_ReqRewardsEveryday_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqRewardsEveryday_CS::MergeFrom(const MSG_ReqRewardsEveryday_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_ReqRewardsEveryday_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqRewardsEveryday_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_ReqRewardsEveryday_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqRewardsEveryday_CS::CopyFrom(const MSG_ReqRewardsEveryday_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_ReqRewardsEveryday_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqRewardsEveryday_CS::IsInitialized() const {
  return true;
}

void MSG_ReqRewardsEveryday_CS::InternalSwap(MSG_ReqRewardsEveryday_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqRewardsEveryday_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PkRewards::InitAsDefaultInstance() {
}
class PkRewards::_Internal {
 public:
  using HasBits = decltype(std::declval<PkRewards>()._has_bits_);
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pkresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PkRewards::PkRewards()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.PkRewards)
}
PkRewards::PkRewards(const PkRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heroid_, &from.heroid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pkresult_) -
    reinterpret_cast<char*>(&heroid_)) + sizeof(pkresult_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.PkRewards)
}

void PkRewards::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PkRewards_rankpk_5fmsg_2eproto.base);
  ::memset(&heroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pkresult_) -
      reinterpret_cast<char*>(&heroid_)) + sizeof(pkresult_));
}

PkRewards::~PkRewards() {
  // @@protoc_insertion_point(destructor:rankpk_msg.PkRewards)
  SharedDtor();
}

void PkRewards::SharedDtor() {
}

void PkRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PkRewards& PkRewards::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PkRewards_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void PkRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.PkRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&heroid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pkresult_) -
        reinterpret_cast<char*>(&heroid_)) + sizeof(pkresult_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PkRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 heroid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rankpk_msg.RewardsNumber rewards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool pkresult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pkresult(&has_bits);
          pkresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PkRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.PkRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 heroid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_heroid(), target);
  }

  // optional uint32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  // repeated .rankpk_msg.RewardsNumber rewards = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rewards(i), target, stream);
  }

  // optional bool pkresult = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_pkresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.PkRewards)
  return target;
}

size_t PkRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.PkRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rankpk_msg.RewardsNumber rewards = 3;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 heroid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time());
    }

    // optional bool pkresult = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PkRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.PkRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const PkRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PkRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.PkRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.PkRewards)
    MergeFrom(*source);
  }
}

void PkRewards::MergeFrom(const PkRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.PkRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      pkresult_ = from.pkresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PkRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.PkRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PkRewards::CopyFrom(const PkRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.PkRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PkRewards::IsInitialized() const {
  return true;
}

void PkRewards::InternalSwap(PkRewards* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rewards_.InternalSwap(&other->rewards_);
  swap(heroid_, other->heroid_);
  swap(time_, other->time_);
  swap(pkresult_, other->pkresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PkRewards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RewardsNumber::InitAsDefaultInstance() {
}
class RewardsNumber::_Internal {
 public:
  using HasBits = decltype(std::declval<RewardsNumber>()._has_bits_);
  static void set_has_objectid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RewardsNumber::RewardsNumber()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.RewardsNumber)
}
RewardsNumber::RewardsNumber(const RewardsNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objectid_, &from.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&objectid_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.RewardsNumber)
}

void RewardsNumber::SharedCtor() {
  ::memset(&objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&objectid_)) + sizeof(number_));
}

RewardsNumber::~RewardsNumber() {
  // @@protoc_insertion_point(destructor:rankpk_msg.RewardsNumber)
  SharedDtor();
}

void RewardsNumber::SharedDtor() {
}

void RewardsNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RewardsNumber& RewardsNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RewardsNumber_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RewardsNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.RewardsNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&objectid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&number_) -
        reinterpret_cast<char*>(&objectid_)) + sizeof(number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RewardsNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 objectid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_objectid(&has_bits);
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewardsNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.RewardsNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 objectid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_objectid(), target);
  }

  // optional uint32 number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.RewardsNumber)
  return target;
}

size_t RewardsNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.RewardsNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 objectid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_objectid());
    }

    // optional uint32 number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewardsNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.RewardsNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const RewardsNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewardsNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.RewardsNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.RewardsNumber)
    MergeFrom(*source);
  }
}

void RewardsNumber::MergeFrom(const RewardsNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.RewardsNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      objectid_ = from.objectid_;
    }
    if (cached_has_bits & 0x00000002u) {
      number_ = from.number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RewardsNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.RewardsNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardsNumber::CopyFrom(const RewardsNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.RewardsNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardsNumber::IsInitialized() const {
  return true;
}

void RewardsNumber::InternalSwap(RewardsNumber* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(objectid_, other->objectid_);
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewardsNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankPKHero::InitAsDefaultInstance() {
}
class RankPKHero::_Internal {
 public:
  using HasBits = decltype(std::declval<RankPKHero>()._has_bits_);
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lastusetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RankPKHero::RankPKHero()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.RankPKHero)
}
RankPKHero::RankPKHero(const RankPKHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heroid_, &from.heroid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastusetime_) -
    reinterpret_cast<char*>(&heroid_)) + sizeof(lastusetime_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.RankPKHero)
}

void RankPKHero::SharedCtor() {
  ::memset(&heroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastusetime_) -
      reinterpret_cast<char*>(&heroid_)) + sizeof(lastusetime_));
}

RankPKHero::~RankPKHero() {
  // @@protoc_insertion_point(destructor:rankpk_msg.RankPKHero)
  SharedDtor();
}

void RankPKHero::SharedDtor() {
}

void RankPKHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankPKHero& RankPKHero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankPKHero_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RankPKHero::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.RankPKHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&heroid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastusetime_) -
        reinterpret_cast<char*>(&heroid_)) + sizeof(lastusetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RankPKHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 heroid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lastusetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lastusetime(&has_bits);
          lastusetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankPKHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.RankPKHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 heroid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_heroid(), target);
  }

  // optional uint32 lastusetime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lastusetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.RankPKHero)
  return target;
}

size_t RankPKHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.RankPKHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 heroid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 lastusetime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lastusetime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankPKHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.RankPKHero)
  GOOGLE_DCHECK_NE(&from, this);
  const RankPKHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankPKHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.RankPKHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.RankPKHero)
    MergeFrom(*source);
  }
}

void RankPKHero::MergeFrom(const RankPKHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.RankPKHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000002u) {
      lastusetime_ = from.lastusetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RankPKHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.RankPKHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankPKHero::CopyFrom(const RankPKHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.RankPKHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankPKHero::IsInitialized() const {
  return true;
}

void RankPKHero::InternalSwap(RankPKHero* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(heroid_, other->heroid_);
  swap(lastusetime_, other->lastusetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankPKHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRankPKHeroHistory_SC::InitAsDefaultInstance() {
}
class MSG_RetRankPKHeroHistory_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRankPKHeroHistory_SC>()._has_bits_);
};

MSG_RetRankPKHeroHistory_SC::MSG_RetRankPKHeroHistory_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
}
MSG_RetRankPKHeroHistory_SC::MSG_RetRankPKHeroHistory_SC(const MSG_RetRankPKHeroHistory_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      heros_(from.heros_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
}

void MSG_RetRankPKHeroHistory_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetRankPKHeroHistory_SC_rankpk_5fmsg_2eproto.base);
}

MSG_RetRankPKHeroHistory_SC::~MSG_RetRankPKHeroHistory_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
  SharedDtor();
}

void MSG_RetRankPKHeroHistory_SC::SharedDtor() {
}

void MSG_RetRankPKHeroHistory_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRankPKHeroHistory_SC& MSG_RetRankPKHeroHistory_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRankPKHeroHistory_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRankPKHeroHistory_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heros_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRankPKHeroHistory_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rankpk_msg.RankPKHero heros = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_heros(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRankPKHeroHistory_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rankpk_msg.RankPKHero heros = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heros_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_heros(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
  return target;
}

size_t MSG_RetRankPKHeroHistory_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rankpk_msg.RankPKHero heros = 1;
  total_size += 1UL * this->_internal_heros_size();
  for (const auto& msg : this->heros_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRankPKHeroHistory_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRankPKHeroHistory_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRankPKHeroHistory_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRankPKHeroHistory_SC::MergeFrom(const MSG_RetRankPKHeroHistory_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heros_.MergeFrom(from.heros_);
}

void MSG_RetRankPKHeroHistory_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRankPKHeroHistory_SC::CopyFrom(const MSG_RetRankPKHeroHistory_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetRankPKHeroHistory_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRankPKHeroHistory_SC::IsInitialized() const {
  return true;
}

void MSG_RetRankPKHeroHistory_SC::InternalSwap(MSG_RetRankPKHeroHistory_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  heros_.InternalSwap(&other->heros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRankPKHeroHistory_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetUserRankStar_SC::InitAsDefaultInstance() {
}
class MSG_RetUserRankStar_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetUserRankStar_SC>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetUserRankStar_SC::MSG_RetUserRankStar_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetUserRankStar_SC)
}
MSG_RetUserRankStar_SC::MSG_RetUserRankStar_SC(const MSG_RetUserRankStar_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(rank_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetUserRankStar_SC)
}

void MSG_RetUserRankStar_SC::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(rank_));
}

MSG_RetUserRankStar_SC::~MSG_RetUserRankStar_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetUserRankStar_SC)
  SharedDtor();
}

void MSG_RetUserRankStar_SC::SharedDtor() {
}

void MSG_RetUserRankStar_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetUserRankStar_SC& MSG_RetUserRankStar_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetUserRankStar_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetUserRankStar_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetUserRankStar_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetUserRankStar_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetUserRankStar_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetUserRankStar_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // optional uint32 rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetUserRankStar_SC)
  return target;
}

size_t MSG_RetUserRankStar_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetUserRankStar_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 uid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uid());
    }

    // optional uint32 rank = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetUserRankStar_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetUserRankStar_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetUserRankStar_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetUserRankStar_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetUserRankStar_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetUserRankStar_SC)
    MergeFrom(*source);
  }
}

void MSG_RetUserRankStar_SC::MergeFrom(const MSG_RetUserRankStar_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetUserRankStar_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetUserRankStar_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetUserRankStar_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetUserRankStar_SC::CopyFrom(const MSG_RetUserRankStar_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetUserRankStar_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetUserRankStar_SC::IsInitialized() const {
  return true;
}

void MSG_RetUserRankStar_SC::InternalSwap(MSG_RetUserRankStar_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uid_, other->uid_);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetUserRankStar_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetTeamLeftMemSize_SC::InitAsDefaultInstance() {
}
class MSG_RetTeamLeftMemSize_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetTeamLeftMemSize_SC>()._has_bits_);
  static void set_has_team1id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team1left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team2id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team2left(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_RetTeamLeftMemSize_SC::MSG_RetTeamLeftMemSize_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
}
MSG_RetTeamLeftMemSize_SC::MSG_RetTeamLeftMemSize_SC(const MSG_RetTeamLeftMemSize_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team1id_, &from.team1id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team2left_) -
    reinterpret_cast<char*>(&team1id_)) + sizeof(team2left_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
}

void MSG_RetTeamLeftMemSize_SC::SharedCtor() {
  ::memset(&team1id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team2left_) -
      reinterpret_cast<char*>(&team1id_)) + sizeof(team2left_));
}

MSG_RetTeamLeftMemSize_SC::~MSG_RetTeamLeftMemSize_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
  SharedDtor();
}

void MSG_RetTeamLeftMemSize_SC::SharedDtor() {
}

void MSG_RetTeamLeftMemSize_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetTeamLeftMemSize_SC& MSG_RetTeamLeftMemSize_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetTeamLeftMemSize_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetTeamLeftMemSize_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&team1id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team2left_) -
        reinterpret_cast<char*>(&team1id_)) + sizeof(team2left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetTeamLeftMemSize_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team1id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team1id(&has_bits);
          team1id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team1left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team1left(&has_bits);
          team1left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team2id(&has_bits);
          team2id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team2left(&has_bits);
          team2left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetTeamLeftMemSize_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team1id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team1id(), target);
  }

  // optional uint32 team1left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team1left(), target);
  }

  // optional uint32 team2id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team2id(), target);
  }

  // optional uint32 team2left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team2left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
  return target;
}

size_t MSG_RetTeamLeftMemSize_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 team1id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1id());
    }

    // optional uint32 team1left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1left());
    }

    // optional uint32 team2id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2id());
    }

    // optional uint32 team2left = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2left());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetTeamLeftMemSize_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetTeamLeftMemSize_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetTeamLeftMemSize_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
    MergeFrom(*source);
  }
}

void MSG_RetTeamLeftMemSize_SC::MergeFrom(const MSG_RetTeamLeftMemSize_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      team1id_ = from.team1id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team1left_ = from.team1left_;
    }
    if (cached_has_bits & 0x00000004u) {
      team2id_ = from.team2id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team2left_ = from.team2left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetTeamLeftMemSize_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetTeamLeftMemSize_SC::CopyFrom(const MSG_RetTeamLeftMemSize_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetTeamLeftMemSize_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetTeamLeftMemSize_SC::IsInitialized() const {
  return true;
}

void MSG_RetTeamLeftMemSize_SC::InternalSwap(MSG_RetTeamLeftMemSize_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team1id_, other->team1id_);
  swap(team1left_, other->team1left_);
  swap(team2id_, other->team2id_);
  swap(team2left_, other->team2left_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetTeamLeftMemSize_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqRankPKCurStage_CS::InitAsDefaultInstance() {
}
class MSG_ReqRankPKCurStage_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqRankPKCurStage_CS>()._has_bits_);
};

MSG_ReqRankPKCurStage_CS::MSG_ReqRankPKCurStage_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_ReqRankPKCurStage_CS)
}
MSG_ReqRankPKCurStage_CS::MSG_ReqRankPKCurStage_CS(const MSG_ReqRankPKCurStage_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_ReqRankPKCurStage_CS)
}

void MSG_ReqRankPKCurStage_CS::SharedCtor() {
}

MSG_ReqRankPKCurStage_CS::~MSG_ReqRankPKCurStage_CS() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_ReqRankPKCurStage_CS)
  SharedDtor();
}

void MSG_ReqRankPKCurStage_CS::SharedDtor() {
}

void MSG_ReqRankPKCurStage_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqRankPKCurStage_CS& MSG_ReqRankPKCurStage_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqRankPKCurStage_CS_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqRankPKCurStage_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_ReqRankPKCurStage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqRankPKCurStage_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqRankPKCurStage_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_ReqRankPKCurStage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_ReqRankPKCurStage_CS)
  return target;
}

size_t MSG_ReqRankPKCurStage_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_ReqRankPKCurStage_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqRankPKCurStage_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_ReqRankPKCurStage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqRankPKCurStage_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqRankPKCurStage_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_ReqRankPKCurStage_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_ReqRankPKCurStage_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqRankPKCurStage_CS::MergeFrom(const MSG_ReqRankPKCurStage_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_ReqRankPKCurStage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqRankPKCurStage_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_ReqRankPKCurStage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqRankPKCurStage_CS::CopyFrom(const MSG_ReqRankPKCurStage_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_ReqRankPKCurStage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqRankPKCurStage_CS::IsInitialized() const {
  return true;
}

void MSG_ReqRankPKCurStage_CS::InternalSwap(MSG_ReqRankPKCurStage_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqRankPKCurStage_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRankPKCurStage_SC::InitAsDefaultInstance() {
  ::rankpk_msg::_MSG_RetRankPKCurStage_SC_default_instance_._instance.get_mutable()->score_ = const_cast< ::rankpk_msg::MSG_RetTeamCurScore_SC*>(
      ::rankpk_msg::MSG_RetTeamCurScore_SC::internal_default_instance());
}
class MSG_RetRankPKCurStage_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRankPKCurStage_SC>()._has_bits_);
  static void set_has_curstage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::rankpk_msg::MSG_RetTeamCurScore_SC& score(const MSG_RetRankPKCurStage_SC* msg);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::rankpk_msg::MSG_RetTeamCurScore_SC&
MSG_RetRankPKCurStage_SC::_Internal::score(const MSG_RetRankPKCurStage_SC* msg) {
  return *msg->score_;
}
MSG_RetRankPKCurStage_SC::MSG_RetRankPKCurStage_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetRankPKCurStage_SC)
}
MSG_RetRankPKCurStage_SC::MSG_RetRankPKCurStage_SC(const MSG_RetRankPKCurStage_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_score()) {
    score_ = new ::rankpk_msg::MSG_RetTeamCurScore_SC(*from.score_);
  } else {
    score_ = nullptr;
  }
  ::memcpy(&curstage_, &from.curstage_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&curstage_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetRankPKCurStage_SC)
}

void MSG_RetRankPKCurStage_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetRankPKCurStage_SC_rankpk_5fmsg_2eproto.base);
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&score_)) + sizeof(duration_));
}

MSG_RetRankPKCurStage_SC::~MSG_RetRankPKCurStage_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetRankPKCurStage_SC)
  SharedDtor();
}

void MSG_RetRankPKCurStage_SC::SharedDtor() {
  if (this != internal_default_instance()) delete score_;
}

void MSG_RetRankPKCurStage_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRankPKCurStage_SC& MSG_RetRankPKCurStage_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRankPKCurStage_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRankPKCurStage_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetRankPKCurStage_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(score_ != nullptr);
    score_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&curstage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&curstage_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRankPKCurStage_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.StageType curstage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::StageType_IsValid(val))) {
            _internal_set_curstage(static_cast<::msg::StageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .rankpk_msg.MSG_RetTeamCurScore_SC score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_score(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRankPKCurStage_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetRankPKCurStage_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.StageType curstage = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_curstage(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional .rankpk_msg.MSG_RetTeamCurScore_SC score = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::score(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetRankPKCurStage_SC)
  return target;
}

size_t MSG_RetRankPKCurStage_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetRankPKCurStage_SC)
  size_t total_size = 0;

  // required .msg.StageType curstage = 1;
  if (_internal_has_curstage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_curstage());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .rankpk_msg.MSG_RetTeamCurScore_SC score = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *score_);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRankPKCurStage_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetRankPKCurStage_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRankPKCurStage_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRankPKCurStage_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetRankPKCurStage_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetRankPKCurStage_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRankPKCurStage_SC::MergeFrom(const MSG_RetRankPKCurStage_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetRankPKCurStage_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_score()->::rankpk_msg::MSG_RetTeamCurScore_SC::MergeFrom(from._internal_score());
    }
    if (cached_has_bits & 0x00000002u) {
      curstage_ = from.curstage_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetRankPKCurStage_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetRankPKCurStage_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRankPKCurStage_SC::CopyFrom(const MSG_RetRankPKCurStage_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetRankPKCurStage_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRankPKCurStage_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MSG_RetRankPKCurStage_SC::InternalSwap(MSG_RetRankPKCurStage_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(score_, other->score_);
  swap(curstage_, other->curstage_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRankPKCurStage_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPreparedNum_SC::InitAsDefaultInstance() {
}
class MSG_RetPreparedNum_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPreparedNum_SC>()._has_bits_);
  static void set_has_curnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetPreparedNum_SC::MSG_RetPreparedNum_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetPreparedNum_SC)
}
MSG_RetPreparedNum_SC::MSG_RetPreparedNum_SC(const MSG_RetPreparedNum_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curnum_, &from.curnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&allnum_) -
    reinterpret_cast<char*>(&curnum_)) + sizeof(allnum_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetPreparedNum_SC)
}

void MSG_RetPreparedNum_SC::SharedCtor() {
  ::memset(&curnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allnum_) -
      reinterpret_cast<char*>(&curnum_)) + sizeof(allnum_));
}

MSG_RetPreparedNum_SC::~MSG_RetPreparedNum_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetPreparedNum_SC)
  SharedDtor();
}

void MSG_RetPreparedNum_SC::SharedDtor() {
}

void MSG_RetPreparedNum_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPreparedNum_SC& MSG_RetPreparedNum_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPreparedNum_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPreparedNum_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetPreparedNum_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&curnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allnum_) -
        reinterpret_cast<char*>(&curnum_)) + sizeof(allnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPreparedNum_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 curnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_curnum(&has_bits);
          curnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 allnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_allnum(&has_bits);
          allnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPreparedNum_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetPreparedNum_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 curnum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_curnum(), target);
  }

  // optional uint32 allnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_allnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetPreparedNum_SC)
  return target;
}

size_t MSG_RetPreparedNum_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetPreparedNum_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 curnum = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curnum());
    }

    // optional uint32 allnum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_allnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPreparedNum_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetPreparedNum_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPreparedNum_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPreparedNum_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetPreparedNum_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetPreparedNum_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPreparedNum_SC::MergeFrom(const MSG_RetPreparedNum_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetPreparedNum_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      curnum_ = from.curnum_;
    }
    if (cached_has_bits & 0x00000002u) {
      allnum_ = from.allnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetPreparedNum_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetPreparedNum_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPreparedNum_SC::CopyFrom(const MSG_RetPreparedNum_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetPreparedNum_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPreparedNum_SC::IsInitialized() const {
  return true;
}

void MSG_RetPreparedNum_SC::InternalSwap(MSG_RetPreparedNum_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(curnum_, other->curnum_);
  swap(allnum_, other->allnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPreparedNum_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetMemPkPrepared_SC::InitAsDefaultInstance() {
}
class MSG_RetMemPkPrepared_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetMemPkPrepared_SC>()._has_bits_);
  static void set_has_memid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetMemPkPrepared_SC::MSG_RetMemPkPrepared_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetMemPkPrepared_SC)
}
MSG_RetMemPkPrepared_SC::MSG_RetMemPkPrepared_SC(const MSG_RetMemPkPrepared_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memid_, &from.memid_,
    static_cast<size_t>(reinterpret_cast<char*>(&heroid_) -
    reinterpret_cast<char*>(&memid_)) + sizeof(heroid_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetMemPkPrepared_SC)
}

void MSG_RetMemPkPrepared_SC::SharedCtor() {
  ::memset(&memid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heroid_) -
      reinterpret_cast<char*>(&memid_)) + sizeof(heroid_));
}

MSG_RetMemPkPrepared_SC::~MSG_RetMemPkPrepared_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetMemPkPrepared_SC)
  SharedDtor();
}

void MSG_RetMemPkPrepared_SC::SharedDtor() {
}

void MSG_RetMemPkPrepared_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetMemPkPrepared_SC& MSG_RetMemPkPrepared_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetMemPkPrepared_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetMemPkPrepared_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetMemPkPrepared_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&memid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heroid_) -
        reinterpret_cast<char*>(&memid_)) + sizeof(heroid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetMemPkPrepared_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 memid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_memid(&has_bits);
          memid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetMemPkPrepared_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetMemPkPrepared_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 memid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memid(), target);
  }

  // optional uint32 heroid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heroid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetMemPkPrepared_SC)
  return target;
}

size_t MSG_RetMemPkPrepared_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetMemPkPrepared_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 memid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_memid());
    }

    // optional uint32 heroid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetMemPkPrepared_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetMemPkPrepared_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetMemPkPrepared_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetMemPkPrepared_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetMemPkPrepared_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetMemPkPrepared_SC)
    MergeFrom(*source);
  }
}

void MSG_RetMemPkPrepared_SC::MergeFrom(const MSG_RetMemPkPrepared_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetMemPkPrepared_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      memid_ = from.memid_;
    }
    if (cached_has_bits & 0x00000002u) {
      heroid_ = from.heroid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetMemPkPrepared_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetMemPkPrepared_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetMemPkPrepared_SC::CopyFrom(const MSG_RetMemPkPrepared_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetMemPkPrepared_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetMemPkPrepared_SC::IsInitialized() const {
  return true;
}

void MSG_RetMemPkPrepared_SC::InternalSwap(MSG_RetMemPkPrepared_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(memid_, other->memid_);
  swap(heroid_, other->heroid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetMemPkPrepared_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPKGeneralConfig_SC::InitAsDefaultInstance() {
}
class MSG_RetPKGeneralConfig_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPKGeneralConfig_SC>()._has_bits_);
  static void set_has_teampknum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetPKGeneralConfig_SC::MSG_RetPKGeneralConfig_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetPKGeneralConfig_SC)
}
MSG_RetPKGeneralConfig_SC::MSG_RetPKGeneralConfig_SC(const MSG_RetPKGeneralConfig_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teampknum_ = from.teampknum_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetPKGeneralConfig_SC)
}

void MSG_RetPKGeneralConfig_SC::SharedCtor() {
  teampknum_ = 0u;
}

MSG_RetPKGeneralConfig_SC::~MSG_RetPKGeneralConfig_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetPKGeneralConfig_SC)
  SharedDtor();
}

void MSG_RetPKGeneralConfig_SC::SharedDtor() {
}

void MSG_RetPKGeneralConfig_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPKGeneralConfig_SC& MSG_RetPKGeneralConfig_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPKGeneralConfig_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPKGeneralConfig_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetPKGeneralConfig_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teampknum_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPKGeneralConfig_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 teampknum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_teampknum(&has_bits);
          teampknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPKGeneralConfig_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetPKGeneralConfig_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 teampknum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_teampknum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetPKGeneralConfig_SC)
  return target;
}

size_t MSG_RetPKGeneralConfig_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetPKGeneralConfig_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 teampknum = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teampknum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPKGeneralConfig_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetPKGeneralConfig_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPKGeneralConfig_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPKGeneralConfig_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetPKGeneralConfig_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetPKGeneralConfig_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPKGeneralConfig_SC::MergeFrom(const MSG_RetPKGeneralConfig_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetPKGeneralConfig_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_teampknum()) {
    _internal_set_teampknum(from._internal_teampknum());
  }
}

void MSG_RetPKGeneralConfig_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetPKGeneralConfig_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPKGeneralConfig_SC::CopyFrom(const MSG_RetPKGeneralConfig_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetPKGeneralConfig_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPKGeneralConfig_SC::IsInitialized() const {
  return true;
}

void MSG_RetPKGeneralConfig_SC::InternalSwap(MSG_RetPKGeneralConfig_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(teampknum_, other->teampknum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPKGeneralConfig_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetTeamCurScore_SC::InitAsDefaultInstance() {
}
class MSG_RetTeamCurScore_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetTeamCurScore_SC>()._has_bits_);
  static void set_has_team1id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team1score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team2id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team2score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_RetTeamCurScore_SC::MSG_RetTeamCurScore_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetTeamCurScore_SC)
}
MSG_RetTeamCurScore_SC::MSG_RetTeamCurScore_SC(const MSG_RetTeamCurScore_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team1id_, &from.team1id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team2score_) -
    reinterpret_cast<char*>(&team1id_)) + sizeof(team2score_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetTeamCurScore_SC)
}

void MSG_RetTeamCurScore_SC::SharedCtor() {
  ::memset(&team1id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team2score_) -
      reinterpret_cast<char*>(&team1id_)) + sizeof(team2score_));
}

MSG_RetTeamCurScore_SC::~MSG_RetTeamCurScore_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetTeamCurScore_SC)
  SharedDtor();
}

void MSG_RetTeamCurScore_SC::SharedDtor() {
}

void MSG_RetTeamCurScore_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetTeamCurScore_SC& MSG_RetTeamCurScore_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetTeamCurScore_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetTeamCurScore_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetTeamCurScore_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&team1id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team2score_) -
        reinterpret_cast<char*>(&team1id_)) + sizeof(team2score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetTeamCurScore_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team1id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team1id(&has_bits);
          team1id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team1score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team1score(&has_bits);
          team1score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team2id(&has_bits);
          team2id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team2score(&has_bits);
          team2score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetTeamCurScore_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetTeamCurScore_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team1id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team1id(), target);
  }

  // optional uint32 team1score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team1score(), target);
  }

  // optional uint32 team2id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team2id(), target);
  }

  // optional uint32 team2score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team2score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetTeamCurScore_SC)
  return target;
}

size_t MSG_RetTeamCurScore_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetTeamCurScore_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 team1id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1id());
    }

    // optional uint32 team1score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1score());
    }

    // optional uint32 team2id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2id());
    }

    // optional uint32 team2score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetTeamCurScore_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetTeamCurScore_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetTeamCurScore_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetTeamCurScore_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetTeamCurScore_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetTeamCurScore_SC)
    MergeFrom(*source);
  }
}

void MSG_RetTeamCurScore_SC::MergeFrom(const MSG_RetTeamCurScore_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetTeamCurScore_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      team1id_ = from.team1id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team1score_ = from.team1score_;
    }
    if (cached_has_bits & 0x00000004u) {
      team2id_ = from.team2id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team2score_ = from.team2score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetTeamCurScore_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetTeamCurScore_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetTeamCurScore_SC::CopyFrom(const MSG_RetTeamCurScore_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetTeamCurScore_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetTeamCurScore_SC::IsInitialized() const {
  return true;
}

void MSG_RetTeamCurScore_SC::InternalSwap(MSG_RetTeamCurScore_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team1id_, other->team1id_);
  swap(team1score_, other->team1score_);
  swap(team2id_, other->team2id_);
  swap(team2score_, other->team2score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetTeamCurScore_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RankPKListItem::InitAsDefaultInstance() {
}
class RankPKListItem::_Internal {
 public:
  using HasBits = decltype(std::declval<RankPKListItem>()._has_bits_);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ranklevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guildname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_winbattle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_winrate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

RankPKListItem::RankPKListItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.RankPKListItem)
}
RankPKListItem::RankPKListItem(const RankPKListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildname()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&winrate_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(winrate_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.RankPKListItem)
}

void RankPKListItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankPKListItem_rankpk_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winrate_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(winrate_));
}

RankPKListItem::~RankPKListItem() {
  // @@protoc_insertion_point(destructor:rankpk_msg.RankPKListItem)
  SharedDtor();
}

void RankPKListItem::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RankPKListItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankPKListItem& RankPKListItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankPKListItem_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RankPKListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.RankPKListItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      guildname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winrate_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(winrate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RankPKListItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 charid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rankpk_msg.RankPKListItem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ranklevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ranklevel(&has_bits);
          ranklevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guildname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rankpk_msg.RankPKListItem.guildname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winbattle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_winbattle(&has_bits);
          winbattle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 winrate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_winrate(&has_bits);
          winrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RankPKListItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.RankPKListItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 position = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_position(), target);
  }

  // optional uint64 charid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_charid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rankpk_msg.RankPKListItem.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional uint32 ranklevel = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ranklevel(), target);
  }

  // optional string guildname = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rankpk_msg.RankPKListItem.guildname");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_guildname(), target);
  }

  // optional uint32 winbattle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_winbattle(), target);
  }

  // optional uint32 winrate = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_winrate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.RankPKListItem)
  return target;
}

size_t RankPKListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.RankPKListItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string guildname = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildname());
    }

    // optional uint64 charid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 position = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_position());
    }

    // optional uint32 ranklevel = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ranklevel());
    }

    // optional uint32 winbattle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winbattle());
    }

    // optional uint32 winrate = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_winrate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankPKListItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.RankPKListItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RankPKListItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RankPKListItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.RankPKListItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.RankPKListItem)
    MergeFrom(*source);
  }
}

void RankPKListItem::MergeFrom(const RankPKListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.RankPKListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000004u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000008u) {
      position_ = from.position_;
    }
    if (cached_has_bits & 0x00000010u) {
      ranklevel_ = from.ranklevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      winbattle_ = from.winbattle_;
    }
    if (cached_has_bits & 0x00000040u) {
      winrate_ = from.winrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RankPKListItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.RankPKListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankPKListItem::CopyFrom(const RankPKListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.RankPKListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankPKListItem::IsInitialized() const {
  return true;
}

void RankPKListItem::InternalSwap(RankPKListItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(position_, other->position_);
  swap(ranklevel_, other->ranklevel_);
  swap(winbattle_, other->winbattle_);
  swap(winrate_, other->winrate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RankPKListItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqRankPKList_CS::InitAsDefaultInstance() {
}
class MSG_ReqRankPKList_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqRankPKList_CS>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqRankPKList_CS::MSG_ReqRankPKList_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_ReqRankPKList_CS)
}
MSG_ReqRankPKList_CS::MSG_ReqRankPKList_CS(const MSG_ReqRankPKList_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_ReqRankPKList_CS)
}

void MSG_ReqRankPKList_CS::SharedCtor() {
  type_ = 0;
}

MSG_ReqRankPKList_CS::~MSG_ReqRankPKList_CS() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_ReqRankPKList_CS)
  SharedDtor();
}

void MSG_ReqRankPKList_CS::SharedDtor() {
}

void MSG_ReqRankPKList_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqRankPKList_CS& MSG_ReqRankPKList_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqRankPKList_CS_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqRankPKList_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_ReqRankPKList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqRankPKList_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .rankpk_msg.RankPKListType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::rankpk_msg::RankPKListType_IsValid(val))) {
            _internal_set_type(static_cast<::rankpk_msg::RankPKListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqRankPKList_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_ReqRankPKList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rankpk_msg.RankPKListType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_ReqRankPKList_CS)
  return target;
}

size_t MSG_ReqRankPKList_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_ReqRankPKList_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .rankpk_msg.RankPKListType type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqRankPKList_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_ReqRankPKList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqRankPKList_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqRankPKList_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_ReqRankPKList_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_ReqRankPKList_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqRankPKList_CS::MergeFrom(const MSG_ReqRankPKList_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_ReqRankPKList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _internal_set_type(from._internal_type());
  }
}

void MSG_ReqRankPKList_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_ReqRankPKList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqRankPKList_CS::CopyFrom(const MSG_ReqRankPKList_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_ReqRankPKList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqRankPKList_CS::IsInitialized() const {
  return true;
}

void MSG_ReqRankPKList_CS::InternalSwap(MSG_ReqRankPKList_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqRankPKList_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRankPKList_SC::InitAsDefaultInstance() {
}
class MSG_RetRankPKList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRankPKList_SC>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_myposition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetRankPKList_SC::MSG_RetRankPKList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rankpk_msg.MSG_RetRankPKList_SC)
}
MSG_RetRankPKList_SC::MSG_RetRankPKList_SC(const MSG_RetRankPKList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&myposition_) -
    reinterpret_cast<char*>(&type_)) + sizeof(myposition_));
  // @@protoc_insertion_point(copy_constructor:rankpk_msg.MSG_RetRankPKList_SC)
}

void MSG_RetRankPKList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetRankPKList_SC_rankpk_5fmsg_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&myposition_) -
      reinterpret_cast<char*>(&type_)) + sizeof(myposition_));
}

MSG_RetRankPKList_SC::~MSG_RetRankPKList_SC() {
  // @@protoc_insertion_point(destructor:rankpk_msg.MSG_RetRankPKList_SC)
  SharedDtor();
}

void MSG_RetRankPKList_SC::SharedDtor() {
}

void MSG_RetRankPKList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRankPKList_SC& MSG_RetRankPKList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRankPKList_SC_rankpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRankPKList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rankpk_msg.MSG_RetRankPKList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&myposition_) -
        reinterpret_cast<char*>(&type_)) + sizeof(myposition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRankPKList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .rankpk_msg.RankPKListType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::rankpk_msg::RankPKListType_IsValid(val))) {
            _internal_set_type(static_cast<::rankpk_msg::RankPKListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 myposition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_myposition(&has_bits);
          myposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .rankpk_msg.RankPKListItem data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRankPKList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rankpk_msg.MSG_RetRankPKList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rankpk_msg.RankPKListType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 myposition = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_myposition(), target);
  }

  // repeated .rankpk_msg.RankPKListItem data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rankpk_msg.MSG_RetRankPKList_SC)
  return target;
}

size_t MSG_RetRankPKList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rankpk_msg.MSG_RetRankPKList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rankpk_msg.RankPKListItem data = 3;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .rankpk_msg.RankPKListType type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 myposition = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_myposition());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRankPKList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rankpk_msg.MSG_RetRankPKList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRankPKList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRankPKList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rankpk_msg.MSG_RetRankPKList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rankpk_msg.MSG_RetRankPKList_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRankPKList_SC::MergeFrom(const MSG_RetRankPKList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rankpk_msg.MSG_RetRankPKList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      myposition_ = from.myposition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetRankPKList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rankpk_msg.MSG_RetRankPKList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRankPKList_SC::CopyFrom(const MSG_RetRankPKList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rankpk_msg.MSG_RetRankPKList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRankPKList_SC::IsInitialized() const {
  return true;
}

void MSG_RetRankPKList_SC::InternalSwap(MSG_RetRankPKList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
  swap(type_, other->type_);
  swap(myposition_, other->myposition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRankPKList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rankpk_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rankpk_msg::UserRankPkInfo* Arena::CreateMaybeMessage< ::rankpk_msg::UserRankPkInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::UserRankPkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_Req_MatchMemberInfo_CS* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_Req_MatchMemberInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_Req_MatchMemberInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_Ret_MatchMemberInfo_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_Ret_MatchMemberInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_Ret_MatchMemberInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_Req_StartMatch_CS* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_Req_StartMatch_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_Req_StartMatch_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_Ret_StartMatch_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_Ret_StartMatch_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_Ret_StartMatch_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_Req_CancelMatch_CS* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_Req_CancelMatch_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_Req_CancelMatch_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_Ret_CancelMatch_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_Ret_CancelMatch_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_Ret_CancelMatch_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RankPkReqPrepare_CS* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RankPkReqPrepare_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RankPkReqPrepare_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RankPkReqPrepare_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RankPkReqPrepare_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RankPkReqPrepare_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_GoToBattle_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_GoToBattle_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_GoToBattle_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_Ret_MatchResult_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_Ret_MatchResult_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_Ret_MatchResult_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_Req_GotoBattle_CS* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_Req_GotoBattle_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_Req_GotoBattle_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetStartPrepare_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetStartPrepare_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetStartPrepare_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_ReqChoosePrepared_CS* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_ReqChoosePrepared_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_ReqChoosePrepared_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetChoosePrepared_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetChoosePrepared_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetChoosePrepared_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetFightCountDown_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetFightCountDown_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetFightCountDown_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetStartFight_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetStartFight_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetStartFight_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetSpeedupFight_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetSpeedupFight_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetSpeedupFight_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::RankPKResult* Arena::CreateMaybeMessage< ::rankpk_msg::RankPKResult >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::RankPKResult >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetFightFinish_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetFightFinish_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetFightFinish_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_ReqGetSeasonRewards_CS* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_ReqGetSeasonRewards_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_ReqGetSeasonRewards_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetGetSeasonRewards_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetGetSeasonRewards_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetGetSeasonRewards_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetRewardsEveryday_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetRewardsEveryday_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetRewardsEveryday_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_ReqRewardsEveryday_CS* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_ReqRewardsEveryday_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_ReqRewardsEveryday_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::PkRewards* Arena::CreateMaybeMessage< ::rankpk_msg::PkRewards >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::PkRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::RewardsNumber* Arena::CreateMaybeMessage< ::rankpk_msg::RewardsNumber >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::RewardsNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::RankPKHero* Arena::CreateMaybeMessage< ::rankpk_msg::RankPKHero >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::RankPKHero >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetRankPKHeroHistory_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetRankPKHeroHistory_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetRankPKHeroHistory_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetUserRankStar_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetUserRankStar_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetUserRankStar_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetTeamLeftMemSize_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetTeamLeftMemSize_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetTeamLeftMemSize_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_ReqRankPKCurStage_CS* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_ReqRankPKCurStage_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_ReqRankPKCurStage_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetRankPKCurStage_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetRankPKCurStage_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetRankPKCurStage_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetPreparedNum_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetPreparedNum_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetPreparedNum_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetMemPkPrepared_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetMemPkPrepared_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetMemPkPrepared_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetPKGeneralConfig_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetPKGeneralConfig_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetPKGeneralConfig_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetTeamCurScore_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetTeamCurScore_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetTeamCurScore_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::RankPKListItem* Arena::CreateMaybeMessage< ::rankpk_msg::RankPKListItem >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::RankPKListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_ReqRankPKList_CS* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_ReqRankPKList_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_ReqRankPKList_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rankpk_msg::MSG_RetRankPKList_SC* Arena::CreateMaybeMessage< ::rankpk_msg::MSG_RetRankPKList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rankpk_msg::MSG_RetRankPKList_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
