// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: triggersounddata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_triggersounddata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_triggersounddata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_triggersounddata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_triggersounddata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_triggersounddata_2eproto;
namespace triggersounddata {
class TriggerSoundData;
class TriggerSoundDataDefaultTypeInternal;
extern TriggerSoundDataDefaultTypeInternal _TriggerSoundData_default_instance_;
class TriggerSoundDataList;
class TriggerSoundDataListDefaultTypeInternal;
extern TriggerSoundDataListDefaultTypeInternal _TriggerSoundDataList_default_instance_;
}  // namespace triggersounddata
PROTOBUF_NAMESPACE_OPEN
template<> ::triggersounddata::TriggerSoundData* Arena::CreateMaybeMessage<::triggersounddata::TriggerSoundData>(Arena*);
template<> ::triggersounddata::TriggerSoundDataList* Arena::CreateMaybeMessage<::triggersounddata::TriggerSoundDataList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace triggersounddata {

// ===================================================================

class TriggerSoundData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:triggersounddata.TriggerSoundData) */ {
 public:
  TriggerSoundData();
  virtual ~TriggerSoundData();

  TriggerSoundData(const TriggerSoundData& from);
  TriggerSoundData(TriggerSoundData&& from) noexcept
    : TriggerSoundData() {
    *this = ::std::move(from);
  }

  inline TriggerSoundData& operator=(const TriggerSoundData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerSoundData& operator=(TriggerSoundData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TriggerSoundData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TriggerSoundData* internal_default_instance() {
    return reinterpret_cast<const TriggerSoundData*>(
               &_TriggerSoundData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TriggerSoundData& a, TriggerSoundData& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerSoundData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TriggerSoundData* New() const final {
    return CreateMaybeMessage<TriggerSoundData>(nullptr);
  }

  TriggerSoundData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TriggerSoundData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TriggerSoundData& from);
  void MergeFrom(const TriggerSoundData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TriggerSoundData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "triggersounddata.TriggerSoundData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_triggersounddata_2eproto);
    return ::descriptor_table_triggersounddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kButtonClickEventFieldNumber = 3,
    kToggleClickEventFieldNumber = 5,
    kSetActiveEventFieldNumber = 7,
    kSetDisActiveEventFieldNumber = 9,
    kEffectBeginEventFieldNumber = 11,
    kEffectEndEventFieldNumber = 12,
    kButtonSoundFieldNumber = 2,
    kToggleSoundFieldNumber = 4,
    kSetActiveFieldNumber = 6,
    kSetDisActiveFieldNumber = 8,
    kEffectSoundFieldNumber = 10,
  };
  // optional string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string ButtonClickEvent = 3;
  bool has_buttonclickevent() const;
  private:
  bool _internal_has_buttonclickevent() const;
  public:
  void clear_buttonclickevent();
  const std::string& buttonclickevent() const;
  void set_buttonclickevent(const std::string& value);
  void set_buttonclickevent(std::string&& value);
  void set_buttonclickevent(const char* value);
  void set_buttonclickevent(const char* value, size_t size);
  std::string* mutable_buttonclickevent();
  std::string* release_buttonclickevent();
  void set_allocated_buttonclickevent(std::string* buttonclickevent);
  private:
  const std::string& _internal_buttonclickevent() const;
  void _internal_set_buttonclickevent(const std::string& value);
  std::string* _internal_mutable_buttonclickevent();
  public:

  // optional string ToggleClickEvent = 5;
  bool has_toggleclickevent() const;
  private:
  bool _internal_has_toggleclickevent() const;
  public:
  void clear_toggleclickevent();
  const std::string& toggleclickevent() const;
  void set_toggleclickevent(const std::string& value);
  void set_toggleclickevent(std::string&& value);
  void set_toggleclickevent(const char* value);
  void set_toggleclickevent(const char* value, size_t size);
  std::string* mutable_toggleclickevent();
  std::string* release_toggleclickevent();
  void set_allocated_toggleclickevent(std::string* toggleclickevent);
  private:
  const std::string& _internal_toggleclickevent() const;
  void _internal_set_toggleclickevent(const std::string& value);
  std::string* _internal_mutable_toggleclickevent();
  public:

  // optional string SetActiveEvent = 7;
  bool has_setactiveevent() const;
  private:
  bool _internal_has_setactiveevent() const;
  public:
  void clear_setactiveevent();
  const std::string& setactiveevent() const;
  void set_setactiveevent(const std::string& value);
  void set_setactiveevent(std::string&& value);
  void set_setactiveevent(const char* value);
  void set_setactiveevent(const char* value, size_t size);
  std::string* mutable_setactiveevent();
  std::string* release_setactiveevent();
  void set_allocated_setactiveevent(std::string* setactiveevent);
  private:
  const std::string& _internal_setactiveevent() const;
  void _internal_set_setactiveevent(const std::string& value);
  std::string* _internal_mutable_setactiveevent();
  public:

  // optional string SetDisActiveEvent = 9;
  bool has_setdisactiveevent() const;
  private:
  bool _internal_has_setdisactiveevent() const;
  public:
  void clear_setdisactiveevent();
  const std::string& setdisactiveevent() const;
  void set_setdisactiveevent(const std::string& value);
  void set_setdisactiveevent(std::string&& value);
  void set_setdisactiveevent(const char* value);
  void set_setdisactiveevent(const char* value, size_t size);
  std::string* mutable_setdisactiveevent();
  std::string* release_setdisactiveevent();
  void set_allocated_setdisactiveevent(std::string* setdisactiveevent);
  private:
  const std::string& _internal_setdisactiveevent() const;
  void _internal_set_setdisactiveevent(const std::string& value);
  std::string* _internal_mutable_setdisactiveevent();
  public:

  // optional string EffectBeginEvent = 11;
  bool has_effectbeginevent() const;
  private:
  bool _internal_has_effectbeginevent() const;
  public:
  void clear_effectbeginevent();
  const std::string& effectbeginevent() const;
  void set_effectbeginevent(const std::string& value);
  void set_effectbeginevent(std::string&& value);
  void set_effectbeginevent(const char* value);
  void set_effectbeginevent(const char* value, size_t size);
  std::string* mutable_effectbeginevent();
  std::string* release_effectbeginevent();
  void set_allocated_effectbeginevent(std::string* effectbeginevent);
  private:
  const std::string& _internal_effectbeginevent() const;
  void _internal_set_effectbeginevent(const std::string& value);
  std::string* _internal_mutable_effectbeginevent();
  public:

  // optional string EffectEndEvent = 12;
  bool has_effectendevent() const;
  private:
  bool _internal_has_effectendevent() const;
  public:
  void clear_effectendevent();
  const std::string& effectendevent() const;
  void set_effectendevent(const std::string& value);
  void set_effectendevent(std::string&& value);
  void set_effectendevent(const char* value);
  void set_effectendevent(const char* value, size_t size);
  std::string* mutable_effectendevent();
  std::string* release_effectendevent();
  void set_allocated_effectendevent(std::string* effectendevent);
  private:
  const std::string& _internal_effectendevent() const;
  void _internal_set_effectendevent(const std::string& value);
  std::string* _internal_mutable_effectendevent();
  public:

  // optional bool ButtonSound = 2;
  bool has_buttonsound() const;
  private:
  bool _internal_has_buttonsound() const;
  public:
  void clear_buttonsound();
  bool buttonsound() const;
  void set_buttonsound(bool value);
  private:
  bool _internal_buttonsound() const;
  void _internal_set_buttonsound(bool value);
  public:

  // optional bool ToggleSound = 4;
  bool has_togglesound() const;
  private:
  bool _internal_has_togglesound() const;
  public:
  void clear_togglesound();
  bool togglesound() const;
  void set_togglesound(bool value);
  private:
  bool _internal_togglesound() const;
  void _internal_set_togglesound(bool value);
  public:

  // optional bool SetActive = 6;
  bool has_setactive() const;
  private:
  bool _internal_has_setactive() const;
  public:
  void clear_setactive();
  bool setactive() const;
  void set_setactive(bool value);
  private:
  bool _internal_setactive() const;
  void _internal_set_setactive(bool value);
  public:

  // optional bool SetDisActive = 8;
  bool has_setdisactive() const;
  private:
  bool _internal_has_setdisactive() const;
  public:
  void clear_setdisactive();
  bool setdisactive() const;
  void set_setdisactive(bool value);
  private:
  bool _internal_setdisactive() const;
  void _internal_set_setdisactive(bool value);
  public:

  // optional bool EffectSound = 10;
  bool has_effectsound() const;
  private:
  bool _internal_has_effectsound() const;
  public:
  void clear_effectsound();
  bool effectsound() const;
  void set_effectsound(bool value);
  private:
  bool _internal_effectsound() const;
  void _internal_set_effectsound(bool value);
  public:

  // @@protoc_insertion_point(class_scope:triggersounddata.TriggerSoundData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buttonclickevent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toggleclickevent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setactiveevent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setdisactiveevent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectbeginevent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectendevent_;
  bool buttonsound_;
  bool togglesound_;
  bool setactive_;
  bool setdisactive_;
  bool effectsound_;
  friend struct ::TableStruct_triggersounddata_2eproto;
};
// -------------------------------------------------------------------

class TriggerSoundDataList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:triggersounddata.TriggerSoundDataList) */ {
 public:
  TriggerSoundDataList();
  virtual ~TriggerSoundDataList();

  TriggerSoundDataList(const TriggerSoundDataList& from);
  TriggerSoundDataList(TriggerSoundDataList&& from) noexcept
    : TriggerSoundDataList() {
    *this = ::std::move(from);
  }

  inline TriggerSoundDataList& operator=(const TriggerSoundDataList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerSoundDataList& operator=(TriggerSoundDataList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TriggerSoundDataList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TriggerSoundDataList* internal_default_instance() {
    return reinterpret_cast<const TriggerSoundDataList*>(
               &_TriggerSoundDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TriggerSoundDataList& a, TriggerSoundDataList& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerSoundDataList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TriggerSoundDataList* New() const final {
    return CreateMaybeMessage<TriggerSoundDataList>(nullptr);
  }

  TriggerSoundDataList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TriggerSoundDataList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TriggerSoundDataList& from);
  void MergeFrom(const TriggerSoundDataList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TriggerSoundDataList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "triggersounddata.TriggerSoundDataList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_triggersounddata_2eproto);
    return ::descriptor_table_triggersounddata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsdFieldNumber = 1,
  };
  // repeated .triggersounddata.TriggerSoundData tsd = 1;
  int tsd_size() const;
  private:
  int _internal_tsd_size() const;
  public:
  void clear_tsd();
  ::triggersounddata::TriggerSoundData* mutable_tsd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::triggersounddata::TriggerSoundData >*
      mutable_tsd();
  private:
  const ::triggersounddata::TriggerSoundData& _internal_tsd(int index) const;
  ::triggersounddata::TriggerSoundData* _internal_add_tsd();
  public:
  const ::triggersounddata::TriggerSoundData& tsd(int index) const;
  ::triggersounddata::TriggerSoundData* add_tsd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::triggersounddata::TriggerSoundData >&
      tsd() const;

  // @@protoc_insertion_point(class_scope:triggersounddata.TriggerSoundDataList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::triggersounddata::TriggerSoundData > tsd_;
  friend struct ::TableStruct_triggersounddata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TriggerSoundData

// optional string path = 1;
inline bool TriggerSoundData::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TriggerSoundData::has_path() const {
  return _internal_has_path();
}
inline void TriggerSoundData::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TriggerSoundData::path() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.path)
  return _internal_path();
}
inline void TriggerSoundData::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.path)
}
inline std::string* TriggerSoundData::mutable_path() {
  // @@protoc_insertion_point(field_mutable:triggersounddata.TriggerSoundData.path)
  return _internal_mutable_path();
}
inline const std::string& TriggerSoundData::_internal_path() const {
  return path_.GetNoArena();
}
inline void TriggerSoundData::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TriggerSoundData::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:triggersounddata.TriggerSoundData.path)
}
inline void TriggerSoundData::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:triggersounddata.TriggerSoundData.path)
}
inline void TriggerSoundData::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:triggersounddata.TriggerSoundData.path)
}
inline std::string* TriggerSoundData::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TriggerSoundData::release_path() {
  // @@protoc_insertion_point(field_release:triggersounddata.TriggerSoundData.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerSoundData::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:triggersounddata.TriggerSoundData.path)
}

// optional bool ButtonSound = 2;
inline bool TriggerSoundData::_internal_has_buttonsound() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TriggerSoundData::has_buttonsound() const {
  return _internal_has_buttonsound();
}
inline void TriggerSoundData::clear_buttonsound() {
  buttonsound_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool TriggerSoundData::_internal_buttonsound() const {
  return buttonsound_;
}
inline bool TriggerSoundData::buttonsound() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.ButtonSound)
  return _internal_buttonsound();
}
inline void TriggerSoundData::_internal_set_buttonsound(bool value) {
  _has_bits_[0] |= 0x00000080u;
  buttonsound_ = value;
}
inline void TriggerSoundData::set_buttonsound(bool value) {
  _internal_set_buttonsound(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.ButtonSound)
}

// optional string ButtonClickEvent = 3;
inline bool TriggerSoundData::_internal_has_buttonclickevent() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TriggerSoundData::has_buttonclickevent() const {
  return _internal_has_buttonclickevent();
}
inline void TriggerSoundData::clear_buttonclickevent() {
  buttonclickevent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TriggerSoundData::buttonclickevent() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.ButtonClickEvent)
  return _internal_buttonclickevent();
}
inline void TriggerSoundData::set_buttonclickevent(const std::string& value) {
  _internal_set_buttonclickevent(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.ButtonClickEvent)
}
inline std::string* TriggerSoundData::mutable_buttonclickevent() {
  // @@protoc_insertion_point(field_mutable:triggersounddata.TriggerSoundData.ButtonClickEvent)
  return _internal_mutable_buttonclickevent();
}
inline const std::string& TriggerSoundData::_internal_buttonclickevent() const {
  return buttonclickevent_.GetNoArena();
}
inline void TriggerSoundData::_internal_set_buttonclickevent(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  buttonclickevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TriggerSoundData::set_buttonclickevent(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  buttonclickevent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:triggersounddata.TriggerSoundData.ButtonClickEvent)
}
inline void TriggerSoundData::set_buttonclickevent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  buttonclickevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:triggersounddata.TriggerSoundData.ButtonClickEvent)
}
inline void TriggerSoundData::set_buttonclickevent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  buttonclickevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:triggersounddata.TriggerSoundData.ButtonClickEvent)
}
inline std::string* TriggerSoundData::_internal_mutable_buttonclickevent() {
  _has_bits_[0] |= 0x00000002u;
  return buttonclickevent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TriggerSoundData::release_buttonclickevent() {
  // @@protoc_insertion_point(field_release:triggersounddata.TriggerSoundData.ButtonClickEvent)
  if (!_internal_has_buttonclickevent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return buttonclickevent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerSoundData::set_allocated_buttonclickevent(std::string* buttonclickevent) {
  if (buttonclickevent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  buttonclickevent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buttonclickevent);
  // @@protoc_insertion_point(field_set_allocated:triggersounddata.TriggerSoundData.ButtonClickEvent)
}

// optional bool ToggleSound = 4;
inline bool TriggerSoundData::_internal_has_togglesound() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TriggerSoundData::has_togglesound() const {
  return _internal_has_togglesound();
}
inline void TriggerSoundData::clear_togglesound() {
  togglesound_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool TriggerSoundData::_internal_togglesound() const {
  return togglesound_;
}
inline bool TriggerSoundData::togglesound() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.ToggleSound)
  return _internal_togglesound();
}
inline void TriggerSoundData::_internal_set_togglesound(bool value) {
  _has_bits_[0] |= 0x00000100u;
  togglesound_ = value;
}
inline void TriggerSoundData::set_togglesound(bool value) {
  _internal_set_togglesound(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.ToggleSound)
}

// optional string ToggleClickEvent = 5;
inline bool TriggerSoundData::_internal_has_toggleclickevent() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TriggerSoundData::has_toggleclickevent() const {
  return _internal_has_toggleclickevent();
}
inline void TriggerSoundData::clear_toggleclickevent() {
  toggleclickevent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TriggerSoundData::toggleclickevent() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.ToggleClickEvent)
  return _internal_toggleclickevent();
}
inline void TriggerSoundData::set_toggleclickevent(const std::string& value) {
  _internal_set_toggleclickevent(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.ToggleClickEvent)
}
inline std::string* TriggerSoundData::mutable_toggleclickevent() {
  // @@protoc_insertion_point(field_mutable:triggersounddata.TriggerSoundData.ToggleClickEvent)
  return _internal_mutable_toggleclickevent();
}
inline const std::string& TriggerSoundData::_internal_toggleclickevent() const {
  return toggleclickevent_.GetNoArena();
}
inline void TriggerSoundData::_internal_set_toggleclickevent(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  toggleclickevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TriggerSoundData::set_toggleclickevent(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  toggleclickevent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:triggersounddata.TriggerSoundData.ToggleClickEvent)
}
inline void TriggerSoundData::set_toggleclickevent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  toggleclickevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:triggersounddata.TriggerSoundData.ToggleClickEvent)
}
inline void TriggerSoundData::set_toggleclickevent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  toggleclickevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:triggersounddata.TriggerSoundData.ToggleClickEvent)
}
inline std::string* TriggerSoundData::_internal_mutable_toggleclickevent() {
  _has_bits_[0] |= 0x00000004u;
  return toggleclickevent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TriggerSoundData::release_toggleclickevent() {
  // @@protoc_insertion_point(field_release:triggersounddata.TriggerSoundData.ToggleClickEvent)
  if (!_internal_has_toggleclickevent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return toggleclickevent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerSoundData::set_allocated_toggleclickevent(std::string* toggleclickevent) {
  if (toggleclickevent != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  toggleclickevent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toggleclickevent);
  // @@protoc_insertion_point(field_set_allocated:triggersounddata.TriggerSoundData.ToggleClickEvent)
}

// optional bool SetActive = 6;
inline bool TriggerSoundData::_internal_has_setactive() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TriggerSoundData::has_setactive() const {
  return _internal_has_setactive();
}
inline void TriggerSoundData::clear_setactive() {
  setactive_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool TriggerSoundData::_internal_setactive() const {
  return setactive_;
}
inline bool TriggerSoundData::setactive() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.SetActive)
  return _internal_setactive();
}
inline void TriggerSoundData::_internal_set_setactive(bool value) {
  _has_bits_[0] |= 0x00000200u;
  setactive_ = value;
}
inline void TriggerSoundData::set_setactive(bool value) {
  _internal_set_setactive(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.SetActive)
}

// optional string SetActiveEvent = 7;
inline bool TriggerSoundData::_internal_has_setactiveevent() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TriggerSoundData::has_setactiveevent() const {
  return _internal_has_setactiveevent();
}
inline void TriggerSoundData::clear_setactiveevent() {
  setactiveevent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& TriggerSoundData::setactiveevent() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.SetActiveEvent)
  return _internal_setactiveevent();
}
inline void TriggerSoundData::set_setactiveevent(const std::string& value) {
  _internal_set_setactiveevent(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.SetActiveEvent)
}
inline std::string* TriggerSoundData::mutable_setactiveevent() {
  // @@protoc_insertion_point(field_mutable:triggersounddata.TriggerSoundData.SetActiveEvent)
  return _internal_mutable_setactiveevent();
}
inline const std::string& TriggerSoundData::_internal_setactiveevent() const {
  return setactiveevent_.GetNoArena();
}
inline void TriggerSoundData::_internal_set_setactiveevent(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  setactiveevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TriggerSoundData::set_setactiveevent(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  setactiveevent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:triggersounddata.TriggerSoundData.SetActiveEvent)
}
inline void TriggerSoundData::set_setactiveevent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  setactiveevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:triggersounddata.TriggerSoundData.SetActiveEvent)
}
inline void TriggerSoundData::set_setactiveevent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  setactiveevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:triggersounddata.TriggerSoundData.SetActiveEvent)
}
inline std::string* TriggerSoundData::_internal_mutable_setactiveevent() {
  _has_bits_[0] |= 0x00000008u;
  return setactiveevent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TriggerSoundData::release_setactiveevent() {
  // @@protoc_insertion_point(field_release:triggersounddata.TriggerSoundData.SetActiveEvent)
  if (!_internal_has_setactiveevent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return setactiveevent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerSoundData::set_allocated_setactiveevent(std::string* setactiveevent) {
  if (setactiveevent != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  setactiveevent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), setactiveevent);
  // @@protoc_insertion_point(field_set_allocated:triggersounddata.TriggerSoundData.SetActiveEvent)
}

// optional bool SetDisActive = 8;
inline bool TriggerSoundData::_internal_has_setdisactive() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TriggerSoundData::has_setdisactive() const {
  return _internal_has_setdisactive();
}
inline void TriggerSoundData::clear_setdisactive() {
  setdisactive_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool TriggerSoundData::_internal_setdisactive() const {
  return setdisactive_;
}
inline bool TriggerSoundData::setdisactive() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.SetDisActive)
  return _internal_setdisactive();
}
inline void TriggerSoundData::_internal_set_setdisactive(bool value) {
  _has_bits_[0] |= 0x00000400u;
  setdisactive_ = value;
}
inline void TriggerSoundData::set_setdisactive(bool value) {
  _internal_set_setdisactive(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.SetDisActive)
}

// optional string SetDisActiveEvent = 9;
inline bool TriggerSoundData::_internal_has_setdisactiveevent() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TriggerSoundData::has_setdisactiveevent() const {
  return _internal_has_setdisactiveevent();
}
inline void TriggerSoundData::clear_setdisactiveevent() {
  setdisactiveevent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& TriggerSoundData::setdisactiveevent() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.SetDisActiveEvent)
  return _internal_setdisactiveevent();
}
inline void TriggerSoundData::set_setdisactiveevent(const std::string& value) {
  _internal_set_setdisactiveevent(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.SetDisActiveEvent)
}
inline std::string* TriggerSoundData::mutable_setdisactiveevent() {
  // @@protoc_insertion_point(field_mutable:triggersounddata.TriggerSoundData.SetDisActiveEvent)
  return _internal_mutable_setdisactiveevent();
}
inline const std::string& TriggerSoundData::_internal_setdisactiveevent() const {
  return setdisactiveevent_.GetNoArena();
}
inline void TriggerSoundData::_internal_set_setdisactiveevent(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  setdisactiveevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TriggerSoundData::set_setdisactiveevent(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  setdisactiveevent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:triggersounddata.TriggerSoundData.SetDisActiveEvent)
}
inline void TriggerSoundData::set_setdisactiveevent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  setdisactiveevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:triggersounddata.TriggerSoundData.SetDisActiveEvent)
}
inline void TriggerSoundData::set_setdisactiveevent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  setdisactiveevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:triggersounddata.TriggerSoundData.SetDisActiveEvent)
}
inline std::string* TriggerSoundData::_internal_mutable_setdisactiveevent() {
  _has_bits_[0] |= 0x00000010u;
  return setdisactiveevent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TriggerSoundData::release_setdisactiveevent() {
  // @@protoc_insertion_point(field_release:triggersounddata.TriggerSoundData.SetDisActiveEvent)
  if (!_internal_has_setdisactiveevent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return setdisactiveevent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerSoundData::set_allocated_setdisactiveevent(std::string* setdisactiveevent) {
  if (setdisactiveevent != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  setdisactiveevent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), setdisactiveevent);
  // @@protoc_insertion_point(field_set_allocated:triggersounddata.TriggerSoundData.SetDisActiveEvent)
}

// optional bool EffectSound = 10;
inline bool TriggerSoundData::_internal_has_effectsound() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TriggerSoundData::has_effectsound() const {
  return _internal_has_effectsound();
}
inline void TriggerSoundData::clear_effectsound() {
  effectsound_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool TriggerSoundData::_internal_effectsound() const {
  return effectsound_;
}
inline bool TriggerSoundData::effectsound() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.EffectSound)
  return _internal_effectsound();
}
inline void TriggerSoundData::_internal_set_effectsound(bool value) {
  _has_bits_[0] |= 0x00000800u;
  effectsound_ = value;
}
inline void TriggerSoundData::set_effectsound(bool value) {
  _internal_set_effectsound(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.EffectSound)
}

// optional string EffectBeginEvent = 11;
inline bool TriggerSoundData::_internal_has_effectbeginevent() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TriggerSoundData::has_effectbeginevent() const {
  return _internal_has_effectbeginevent();
}
inline void TriggerSoundData::clear_effectbeginevent() {
  effectbeginevent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& TriggerSoundData::effectbeginevent() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.EffectBeginEvent)
  return _internal_effectbeginevent();
}
inline void TriggerSoundData::set_effectbeginevent(const std::string& value) {
  _internal_set_effectbeginevent(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.EffectBeginEvent)
}
inline std::string* TriggerSoundData::mutable_effectbeginevent() {
  // @@protoc_insertion_point(field_mutable:triggersounddata.TriggerSoundData.EffectBeginEvent)
  return _internal_mutable_effectbeginevent();
}
inline const std::string& TriggerSoundData::_internal_effectbeginevent() const {
  return effectbeginevent_.GetNoArena();
}
inline void TriggerSoundData::_internal_set_effectbeginevent(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  effectbeginevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TriggerSoundData::set_effectbeginevent(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  effectbeginevent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:triggersounddata.TriggerSoundData.EffectBeginEvent)
}
inline void TriggerSoundData::set_effectbeginevent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  effectbeginevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:triggersounddata.TriggerSoundData.EffectBeginEvent)
}
inline void TriggerSoundData::set_effectbeginevent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  effectbeginevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:triggersounddata.TriggerSoundData.EffectBeginEvent)
}
inline std::string* TriggerSoundData::_internal_mutable_effectbeginevent() {
  _has_bits_[0] |= 0x00000020u;
  return effectbeginevent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TriggerSoundData::release_effectbeginevent() {
  // @@protoc_insertion_point(field_release:triggersounddata.TriggerSoundData.EffectBeginEvent)
  if (!_internal_has_effectbeginevent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return effectbeginevent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerSoundData::set_allocated_effectbeginevent(std::string* effectbeginevent) {
  if (effectbeginevent != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  effectbeginevent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectbeginevent);
  // @@protoc_insertion_point(field_set_allocated:triggersounddata.TriggerSoundData.EffectBeginEvent)
}

// optional string EffectEndEvent = 12;
inline bool TriggerSoundData::_internal_has_effectendevent() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TriggerSoundData::has_effectendevent() const {
  return _internal_has_effectendevent();
}
inline void TriggerSoundData::clear_effectendevent() {
  effectendevent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& TriggerSoundData::effectendevent() const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundData.EffectEndEvent)
  return _internal_effectendevent();
}
inline void TriggerSoundData::set_effectendevent(const std::string& value) {
  _internal_set_effectendevent(value);
  // @@protoc_insertion_point(field_set:triggersounddata.TriggerSoundData.EffectEndEvent)
}
inline std::string* TriggerSoundData::mutable_effectendevent() {
  // @@protoc_insertion_point(field_mutable:triggersounddata.TriggerSoundData.EffectEndEvent)
  return _internal_mutable_effectendevent();
}
inline const std::string& TriggerSoundData::_internal_effectendevent() const {
  return effectendevent_.GetNoArena();
}
inline void TriggerSoundData::_internal_set_effectendevent(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  effectendevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TriggerSoundData::set_effectendevent(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  effectendevent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:triggersounddata.TriggerSoundData.EffectEndEvent)
}
inline void TriggerSoundData::set_effectendevent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  effectendevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:triggersounddata.TriggerSoundData.EffectEndEvent)
}
inline void TriggerSoundData::set_effectendevent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  effectendevent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:triggersounddata.TriggerSoundData.EffectEndEvent)
}
inline std::string* TriggerSoundData::_internal_mutable_effectendevent() {
  _has_bits_[0] |= 0x00000040u;
  return effectendevent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TriggerSoundData::release_effectendevent() {
  // @@protoc_insertion_point(field_release:triggersounddata.TriggerSoundData.EffectEndEvent)
  if (!_internal_has_effectendevent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return effectendevent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerSoundData::set_allocated_effectendevent(std::string* effectendevent) {
  if (effectendevent != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  effectendevent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectendevent);
  // @@protoc_insertion_point(field_set_allocated:triggersounddata.TriggerSoundData.EffectEndEvent)
}

// -------------------------------------------------------------------

// TriggerSoundDataList

// repeated .triggersounddata.TriggerSoundData tsd = 1;
inline int TriggerSoundDataList::_internal_tsd_size() const {
  return tsd_.size();
}
inline int TriggerSoundDataList::tsd_size() const {
  return _internal_tsd_size();
}
inline void TriggerSoundDataList::clear_tsd() {
  tsd_.Clear();
}
inline ::triggersounddata::TriggerSoundData* TriggerSoundDataList::mutable_tsd(int index) {
  // @@protoc_insertion_point(field_mutable:triggersounddata.TriggerSoundDataList.tsd)
  return tsd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::triggersounddata::TriggerSoundData >*
TriggerSoundDataList::mutable_tsd() {
  // @@protoc_insertion_point(field_mutable_list:triggersounddata.TriggerSoundDataList.tsd)
  return &tsd_;
}
inline const ::triggersounddata::TriggerSoundData& TriggerSoundDataList::_internal_tsd(int index) const {
  return tsd_.Get(index);
}
inline const ::triggersounddata::TriggerSoundData& TriggerSoundDataList::tsd(int index) const {
  // @@protoc_insertion_point(field_get:triggersounddata.TriggerSoundDataList.tsd)
  return _internal_tsd(index);
}
inline ::triggersounddata::TriggerSoundData* TriggerSoundDataList::_internal_add_tsd() {
  return tsd_.Add();
}
inline ::triggersounddata::TriggerSoundData* TriggerSoundDataList::add_tsd() {
  // @@protoc_insertion_point(field_add:triggersounddata.TriggerSoundDataList.tsd)
  return _internal_add_tsd();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::triggersounddata::TriggerSoundData >&
TriggerSoundDataList::tsd() const {
  // @@protoc_insertion_point(field_list:triggersounddata.TriggerSoundDataList.tsd)
  return tsd_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace triggersounddata

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_triggersounddata_2eproto
