// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guildpk_msg.proto

#include "guildpk_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_guildpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuildPkGuildInfo_guildpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guildpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildPkGuildScore_guildpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guildpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildPkMemberInfo_guildpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guildpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuildPkTeamInfo_guildpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guildpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildPkWinInfo_guildpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guildpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_finalresult_guildteam_info_guildpk_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guildpk_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_realtime_guildteam_info_guildpk_5fmsg_2eproto;
namespace guildpk_msg {
class MSG_Req_GuildPkEnroll_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildPkEnroll_CS> _instance;
} _MSG_Req_GuildPkEnroll_CS_default_instance_;
class MSG_Ret_GuildPkEnroll_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildPkEnroll_SC> _instance;
} _MSG_Ret_GuildPkEnroll_SC_default_instance_;
class GuildPkMemberInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildPkMemberInfo> _instance;
} _GuildPkMemberInfo_default_instance_;
class GuildPkTeamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildPkTeamInfo> _instance;
} _GuildPkTeamInfo_default_instance_;
class GuildPkGuildInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildPkGuildInfo> _instance;
} _GuildPkGuildInfo_default_instance_;
class MSG_Ret_GuildPkInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildPkInfo_SC> _instance;
} _MSG_Ret_GuildPkInfo_SC_default_instance_;
class MSG_Req_GuildPkInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildPkInfo_CS> _instance;
} _MSG_Req_GuildPkInfo_CS_default_instance_;
class MSG_Req_GuildPkJoinTeam_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildPkJoinTeam_CS> _instance;
} _MSG_Req_GuildPkJoinTeam_CS_default_instance_;
class MSG_Req_GuildPkQuitTeam_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildPkQuitTeam_CS> _instance;
} _MSG_Req_GuildPkQuitTeam_CS_default_instance_;
class MSG_Refresh_GuildPkMemberInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Refresh_GuildPkMemberInfo_SC> _instance;
} _MSG_Refresh_GuildPkMemberInfo_SC_default_instance_;
class MSG_Req_GuildPkRank_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildPkRank_CS> _instance;
} _MSG_Req_GuildPkRank_CS_default_instance_;
class GuildPkGuildScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildPkGuildScore> _instance;
} _GuildPkGuildScore_default_instance_;
class MSG_Ret_GuildPkRank_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildPkRank_SC> _instance;
} _MSG_Ret_GuildPkRank_SC_default_instance_;
class MSG_Req_GuildPkWinList_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildPkWinList_CS> _instance;
} _MSG_Req_GuildPkWinList_CS_default_instance_;
class GuildPkWinInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildPkWinInfo> _instance;
} _GuildPkWinInfo_default_instance_;
class MSG_Ret_GuildPkWinList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildPkWinList_SC> _instance;
} _MSG_Ret_GuildPkWinList_SC_default_instance_;
class MSG_Ret_GuildPkMatchResult_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildPkMatchResult_SC> _instance;
} _MSG_Ret_GuildPkMatchResult_SC_default_instance_;
class MSG_Req_EnterGuildPk_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_EnterGuildPk_CS> _instance;
} _MSG_Req_EnterGuildPk_CS_default_instance_;
class MSG_Ret_GuildPkCountDown_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildPkCountDown_SC> _instance;
} _MSG_Ret_GuildPkCountDown_SC_default_instance_;
class MSG_Ret_GuildPkFight_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildPkFight_SC> _instance;
} _MSG_Ret_GuildPkFight_SC_default_instance_;
class realtime_guildteam_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<realtime_guildteam_info> _instance;
} _realtime_guildteam_info_default_instance_;
class MSG_RealTime_GuildPkTeam_Rank_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RealTime_GuildPkTeam_Rank_SC> _instance;
} _MSG_RealTime_GuildPkTeam_Rank_SC_default_instance_;
class finalresult_guildteam_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<finalresult_guildteam_info> _instance;
} _finalresult_guildteam_info_default_instance_;
class MSG_GuildPk_FinalResult_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_GuildPk_FinalResult_SC> _instance;
} _MSG_GuildPk_FinalResult_SC_default_instance_;
class MSG_Ret_GuildPkEnroll_Finish_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildPkEnroll_Finish_SC> _instance;
} _MSG_Ret_GuildPkEnroll_Finish_SC_default_instance_;
}  // namespace guildpk_msg
static void InitDefaultsscc_info_GuildPkGuildInfo_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_GuildPkGuildInfo_default_instance_;
    new (ptr) ::guildpk_msg::GuildPkGuildInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::GuildPkGuildInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuildPkGuildInfo_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GuildPkGuildInfo_guildpk_5fmsg_2eproto}, {
      &scc_info_GuildPkTeamInfo_guildpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_GuildPkGuildScore_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_GuildPkGuildScore_default_instance_;
    new (ptr) ::guildpk_msg::GuildPkGuildScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::GuildPkGuildScore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildPkGuildScore_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildPkGuildScore_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_GuildPkMemberInfo_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_GuildPkMemberInfo_default_instance_;
    new (ptr) ::guildpk_msg::GuildPkMemberInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::GuildPkMemberInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildPkMemberInfo_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildPkMemberInfo_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_GuildPkTeamInfo_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_GuildPkTeamInfo_default_instance_;
    new (ptr) ::guildpk_msg::GuildPkTeamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::GuildPkTeamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GuildPkTeamInfo_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GuildPkTeamInfo_guildpk_5fmsg_2eproto}, {
      &scc_info_GuildPkMemberInfo_guildpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_GuildPkWinInfo_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_GuildPkWinInfo_default_instance_;
    new (ptr) ::guildpk_msg::GuildPkWinInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::GuildPkWinInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildPkWinInfo_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildPkWinInfo_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_GuildPk_FinalResult_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_GuildPk_FinalResult_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_GuildPk_FinalResult_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_GuildPk_FinalResult_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_GuildPk_FinalResult_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_GuildPk_FinalResult_SC_guildpk_5fmsg_2eproto}, {
      &scc_info_finalresult_guildteam_info_guildpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RealTime_GuildPkTeam_Rank_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_RealTime_GuildPkTeam_Rank_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RealTime_GuildPkTeam_Rank_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RealTime_GuildPkTeam_Rank_SC_guildpk_5fmsg_2eproto}, {
      &scc_info_realtime_guildteam_info_guildpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Refresh_GuildPkMemberInfo_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Refresh_GuildPkMemberInfo_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Refresh_GuildPkMemberInfo_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Refresh_GuildPkMemberInfo_SC_guildpk_5fmsg_2eproto}, {
      &scc_info_GuildPkMemberInfo_guildpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_EnterGuildPk_CS_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Req_EnterGuildPk_CS_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Req_EnterGuildPk_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Req_EnterGuildPk_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_EnterGuildPk_CS_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_EnterGuildPk_CS_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildPkEnroll_CS_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Req_GuildPkEnroll_CS_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Req_GuildPkEnroll_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Req_GuildPkEnroll_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildPkEnroll_CS_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildPkEnroll_CS_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildPkInfo_CS_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Req_GuildPkInfo_CS_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Req_GuildPkInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Req_GuildPkInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildPkInfo_CS_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildPkInfo_CS_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildPkJoinTeam_CS_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Req_GuildPkJoinTeam_CS_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildPkJoinTeam_CS_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildPkJoinTeam_CS_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildPkQuitTeam_CS_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Req_GuildPkQuitTeam_CS_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Req_GuildPkQuitTeam_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Req_GuildPkQuitTeam_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildPkQuitTeam_CS_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildPkQuitTeam_CS_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildPkRank_CS_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Req_GuildPkRank_CS_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Req_GuildPkRank_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Req_GuildPkRank_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildPkRank_CS_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildPkRank_CS_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildPkWinList_CS_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Req_GuildPkWinList_CS_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Req_GuildPkWinList_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Req_GuildPkWinList_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildPkWinList_CS_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildPkWinList_CS_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildPkCountDown_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Ret_GuildPkCountDown_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Ret_GuildPkCountDown_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Ret_GuildPkCountDown_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildPkCountDown_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildPkCountDown_SC_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildPkEnroll_Finish_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Ret_GuildPkEnroll_Finish_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Ret_GuildPkEnroll_Finish_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Ret_GuildPkEnroll_Finish_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildPkEnroll_Finish_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildPkEnroll_Finish_SC_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildPkEnroll_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Ret_GuildPkEnroll_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Ret_GuildPkEnroll_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Ret_GuildPkEnroll_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildPkEnroll_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildPkEnroll_SC_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildPkFight_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Ret_GuildPkFight_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Ret_GuildPkFight_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Ret_GuildPkFight_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildPkFight_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildPkFight_SC_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildPkInfo_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Ret_GuildPkInfo_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Ret_GuildPkInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Ret_GuildPkInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_GuildPkInfo_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_GuildPkInfo_SC_guildpk_5fmsg_2eproto}, {
      &scc_info_GuildPkGuildInfo_guildpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_GuildPkMatchResult_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Ret_GuildPkMatchResult_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildPkMatchResult_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildPkMatchResult_SC_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildPkRank_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Ret_GuildPkRank_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Ret_GuildPkRank_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Ret_GuildPkRank_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_GuildPkRank_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_GuildPkRank_SC_guildpk_5fmsg_2eproto}, {
      &scc_info_GuildPkGuildScore_guildpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_GuildPkWinList_SC_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_MSG_Ret_GuildPkWinList_SC_default_instance_;
    new (ptr) ::guildpk_msg::MSG_Ret_GuildPkWinList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::MSG_Ret_GuildPkWinList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_GuildPkWinList_SC_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_GuildPkWinList_SC_guildpk_5fmsg_2eproto}, {
      &scc_info_GuildPkWinInfo_guildpk_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_finalresult_guildteam_info_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_finalresult_guildteam_info_default_instance_;
    new (ptr) ::guildpk_msg::finalresult_guildteam_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::finalresult_guildteam_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_finalresult_guildteam_info_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_finalresult_guildteam_info_guildpk_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_realtime_guildteam_info_guildpk_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guildpk_msg::_realtime_guildteam_info_default_instance_;
    new (ptr) ::guildpk_msg::realtime_guildteam_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guildpk_msg::realtime_guildteam_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_realtime_guildteam_info_guildpk_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_realtime_guildteam_info_guildpk_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_guildpk_5fmsg_2eproto[25];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_guildpk_5fmsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_guildpk_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_guildpk_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkEnroll_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkEnroll_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkEnroll_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkEnroll_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkEnroll_SC, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkMemberInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkMemberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkMemberInfo, charid_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkMemberInfo, name_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkMemberInfo, level_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkMemberInfo, teamid_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkMemberInfo, posid_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkTeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkTeamInfo, teamid_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkTeamInfo, unlocklv_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkTeamInfo, members_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildInfo, guildid_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildInfo, guildname_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildInfo, teamlimit_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildInfo, teaminfo_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkInfo_SC, guildinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS, teamid_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS, posid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkQuitTeam_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkQuitTeam_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC, member_),
  0,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkRank_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkRank_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildScore, rank_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildScore, guildid_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildScore, guildname_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkGuildScore, score_),
  2,
  1,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkRank_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkRank_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkRank_SC, scorerank_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkWinList_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_GuildPkWinList_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkWinInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkWinInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkWinInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkWinInfo, win_guild_name_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::GuildPkWinInfo, win_leader_name_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkWinList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkWinList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkWinList_SC, winers_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC, lefttime_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_EnterGuildPk_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Req_EnterGuildPk_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkCountDown_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkCountDown_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkCountDown_SC, lefttime_),
  0,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkFight_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkFight_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkFight_SC, lefttime_),
  0,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::realtime_guildteam_info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::realtime_guildteam_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::realtime_guildteam_info, guildid_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::realtime_guildteam_info, guildname_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::realtime_guildteam_info, leftnum_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC, teamrank_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::finalresult_guildteam_info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::finalresult_guildteam_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::finalresult_guildteam_info, rank_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::finalresult_guildteam_info, name_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::finalresult_guildteam_info, killnum_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::finalresult_guildteam_info, totaldmg_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_GuildPk_FinalResult_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_GuildPk_FinalResult_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_GuildPk_FinalResult_SC, iswin_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_GuildPk_FinalResult_SC, teamlist_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkEnroll_Finish_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guildpk_msg::MSG_Ret_GuildPkEnroll_Finish_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::guildpk_msg::MSG_Req_GuildPkEnroll_CS)},
  { 5, 11, sizeof(::guildpk_msg::MSG_Ret_GuildPkEnroll_SC)},
  { 12, 22, sizeof(::guildpk_msg::GuildPkMemberInfo)},
  { 27, 35, sizeof(::guildpk_msg::GuildPkTeamInfo)},
  { 38, 47, sizeof(::guildpk_msg::GuildPkGuildInfo)},
  { 51, 57, sizeof(::guildpk_msg::MSG_Ret_GuildPkInfo_SC)},
  { 58, 63, sizeof(::guildpk_msg::MSG_Req_GuildPkInfo_CS)},
  { 63, 70, sizeof(::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS)},
  { 72, 77, sizeof(::guildpk_msg::MSG_Req_GuildPkQuitTeam_CS)},
  { 77, 83, sizeof(::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC)},
  { 84, 89, sizeof(::guildpk_msg::MSG_Req_GuildPkRank_CS)},
  { 89, 98, sizeof(::guildpk_msg::GuildPkGuildScore)},
  { 102, 108, sizeof(::guildpk_msg::MSG_Ret_GuildPkRank_SC)},
  { 109, 114, sizeof(::guildpk_msg::MSG_Req_GuildPkWinList_CS)},
  { 114, 122, sizeof(::guildpk_msg::GuildPkWinInfo)},
  { 125, 131, sizeof(::guildpk_msg::MSG_Ret_GuildPkWinList_SC)},
  { 132, 139, sizeof(::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC)},
  { 141, 146, sizeof(::guildpk_msg::MSG_Req_EnterGuildPk_CS)},
  { 146, 152, sizeof(::guildpk_msg::MSG_Ret_GuildPkCountDown_SC)},
  { 153, 159, sizeof(::guildpk_msg::MSG_Ret_GuildPkFight_SC)},
  { 160, 168, sizeof(::guildpk_msg::realtime_guildteam_info)},
  { 171, 177, sizeof(::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC)},
  { 178, 187, sizeof(::guildpk_msg::finalresult_guildteam_info)},
  { 191, 198, sizeof(::guildpk_msg::MSG_GuildPk_FinalResult_SC)},
  { 200, 205, sizeof(::guildpk_msg::MSG_Ret_GuildPkEnroll_Finish_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Req_GuildPkEnroll_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Ret_GuildPkEnroll_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_GuildPkMemberInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_GuildPkTeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_GuildPkGuildInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Ret_GuildPkInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Req_GuildPkInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Req_GuildPkJoinTeam_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Req_GuildPkQuitTeam_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Refresh_GuildPkMemberInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Req_GuildPkRank_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_GuildPkGuildScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Ret_GuildPkRank_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Req_GuildPkWinList_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_GuildPkWinInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Ret_GuildPkWinList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Ret_GuildPkMatchResult_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Req_EnterGuildPk_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Ret_GuildPkCountDown_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Ret_GuildPkFight_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_realtime_guildteam_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_RealTime_GuildPkTeam_Rank_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_finalresult_guildteam_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_GuildPk_FinalResult_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guildpk_msg::_MSG_Ret_GuildPkEnroll_Finish_SC_default_instance_),
};

const char descriptor_table_protodef_guildpk_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021guildpk_msg.proto\022\013guildpk_msg\032\016msg_en"
  "um.proto\"\032\n\030MSG_Req_GuildPkEnroll_CS\"*\n\030"
  "MSG_Ret_GuildPkEnroll_SC\022\016\n\006result\030\001 \001(\010"
  "\"_\n\021GuildPkMemberInfo\022\016\n\006charid\030\001 \001(\004\022\014\n"
  "\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\016\n\006teamid\030\004 \001"
  "(\r\022\r\n\005posid\030\005 \001(\r\"d\n\017GuildPkTeamInfo\022\016\n\006"
  "teamid\030\001 \001(\r\022\020\n\010unlocklv\030\002 \001(\r\022/\n\007member"
  "s\030\003 \003(\0132\036.guildpk_msg.GuildPkMemberInfo\""
  "y\n\020GuildPkGuildInfo\022\017\n\007guildid\030\001 \001(\004\022\021\n\t"
  "guildname\030\002 \001(\t\022\021\n\tteamlimit\030\003 \001(\r\022.\n\010te"
  "aminfo\030\004 \003(\0132\034.guildpk_msg.GuildPkTeamIn"
  "fo\"J\n\026MSG_Ret_GuildPkInfo_SC\0220\n\tguildinf"
  "o\030\001 \001(\0132\035.guildpk_msg.GuildPkGuildInfo\"\030"
  "\n\026MSG_Req_GuildPkInfo_CS\";\n\032MSG_Req_Guil"
  "dPkJoinTeam_CS\022\016\n\006teamid\030\001 \001(\r\022\r\n\005posid\030"
  "\002 \001(\r\"\034\n\032MSG_Req_GuildPkQuitTeam_CS\"R\n M"
  "SG_Refresh_GuildPkMemberInfo_SC\022.\n\006membe"
  "r\030\001 \001(\0132\036.guildpk_msg.GuildPkMemberInfo\""
  "\030\n\026MSG_Req_GuildPkRank_CS\"T\n\021GuildPkGuil"
  "dScore\022\014\n\004rank\030\001 \001(\r\022\017\n\007guildid\030\002 \001(\004\022\021\n"
  "\tguildname\030\003 \001(\t\022\r\n\005score\030\004 \001(\r\"K\n\026MSG_R"
  "et_GuildPkRank_SC\0221\n\tscorerank\030\001 \003(\0132\036.g"
  "uildpk_msg.GuildPkGuildScore\"\033\n\031MSG_Req_"
  "GuildPkWinList_CS\"N\n\016GuildPkWinInfo\022\013\n\003u"
  "id\030\001 \001(\004\022\026\n\016win_guild_name\030\002 \001(\t\022\027\n\017win_"
  "leader_name\030\003 \001(\t\"H\n\031MSG_Ret_GuildPkWinL"
  "ist_SC\022+\n\006winers\030\001 \003(\0132\033.guildpk_msg.Gui"
  "ldPkWinInfo\"B\n\035MSG_Ret_GuildPkMatchResul"
  "t_SC\022\017\n\007retcode\030\001 \001(\r\022\020\n\010lefttime\030\002 \001(\r\""
  "\031\n\027MSG_Req_EnterGuildPk_CS\"/\n\033MSG_Ret_Gu"
  "ildPkCountDown_SC\022\020\n\010lefttime\030\001 \001(\r\"+\n\027M"
  "SG_Ret_GuildPkFight_SC\022\020\n\010lefttime\030\001 \001(\r"
  "\"N\n\027realtime_guildteam_info\022\017\n\007guildid\030\001"
  " \001(\004\022\021\n\tguildname\030\002 \001(\t\022\017\n\007leftnum\030\003 \001(\r"
  "\"Z\n MSG_RealTime_GuildPkTeam_Rank_SC\0226\n\010"
  "teamrank\030\001 \003(\0132$.guildpk_msg.realtime_gu"
  "ildteam_info\"[\n\032finalresult_guildteam_in"
  "fo\022\014\n\004rank\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007killnu"
  "m\030\003 \001(\r\022\020\n\010totaldmg\030\004 \001(\r\"f\n\032MSG_GuildPk"
  "_FinalResult_SC\022\r\n\005iswin\030\001 \001(\010\0229\n\010teamli"
  "st\030\002 \003(\0132\'.guildpk_msg.finalresult_guild"
  "team_info\"!\n\037MSG_Ret_GuildPkEnroll_Finis"
  "h_SC"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_guildpk_5fmsg_2eproto_deps[1] = {
  &::descriptor_table_msg_5fenum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_guildpk_5fmsg_2eproto_sccs[25] = {
  &scc_info_GuildPkGuildInfo_guildpk_5fmsg_2eproto.base,
  &scc_info_GuildPkGuildScore_guildpk_5fmsg_2eproto.base,
  &scc_info_GuildPkMemberInfo_guildpk_5fmsg_2eproto.base,
  &scc_info_GuildPkTeamInfo_guildpk_5fmsg_2eproto.base,
  &scc_info_GuildPkWinInfo_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_GuildPk_FinalResult_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_RealTime_GuildPkTeam_Rank_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Refresh_GuildPkMemberInfo_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_EnterGuildPk_CS_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_GuildPkEnroll_CS_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_GuildPkInfo_CS_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_GuildPkJoinTeam_CS_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_GuildPkQuitTeam_CS_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_GuildPkRank_CS_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Req_GuildPkWinList_CS_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_GuildPkCountDown_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_GuildPkEnroll_Finish_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_GuildPkEnroll_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_GuildPkFight_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_GuildPkInfo_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_GuildPkMatchResult_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_GuildPkRank_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_GuildPkWinList_SC_guildpk_5fmsg_2eproto.base,
  &scc_info_finalresult_guildteam_info_guildpk_5fmsg_2eproto.base,
  &scc_info_realtime_guildteam_info_guildpk_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_guildpk_5fmsg_2eproto_once;
static bool descriptor_table_guildpk_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_guildpk_5fmsg_2eproto = {
  &descriptor_table_guildpk_5fmsg_2eproto_initialized, descriptor_table_protodef_guildpk_5fmsg_2eproto, "guildpk_msg.proto", 1684,
  &descriptor_table_guildpk_5fmsg_2eproto_once, descriptor_table_guildpk_5fmsg_2eproto_sccs, descriptor_table_guildpk_5fmsg_2eproto_deps, 25, 1,
  schemas, file_default_instances, TableStruct_guildpk_5fmsg_2eproto::offsets,
  file_level_metadata_guildpk_5fmsg_2eproto, 25, file_level_enum_descriptors_guildpk_5fmsg_2eproto, file_level_service_descriptors_guildpk_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_guildpk_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_guildpk_5fmsg_2eproto)), true);
namespace guildpk_msg {

// ===================================================================

void MSG_Req_GuildPkEnroll_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildPkEnroll_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildPkEnroll_CS>()._has_bits_);
};

MSG_Req_GuildPkEnroll_CS::MSG_Req_GuildPkEnroll_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
}
MSG_Req_GuildPkEnroll_CS::MSG_Req_GuildPkEnroll_CS(const MSG_Req_GuildPkEnroll_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
}

void MSG_Req_GuildPkEnroll_CS::SharedCtor() {
}

MSG_Req_GuildPkEnroll_CS::~MSG_Req_GuildPkEnroll_CS() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
  SharedDtor();
}

void MSG_Req_GuildPkEnroll_CS::SharedDtor() {
}

void MSG_Req_GuildPkEnroll_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildPkEnroll_CS& MSG_Req_GuildPkEnroll_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildPkEnroll_CS_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildPkEnroll_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildPkEnroll_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildPkEnroll_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
  return target;
}

size_t MSG_Req_GuildPkEnroll_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildPkEnroll_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildPkEnroll_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildPkEnroll_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildPkEnroll_CS::MergeFrom(const MSG_Req_GuildPkEnroll_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GuildPkEnroll_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildPkEnroll_CS::CopyFrom(const MSG_Req_GuildPkEnroll_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Req_GuildPkEnroll_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildPkEnroll_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildPkEnroll_CS::InternalSwap(MSG_Req_GuildPkEnroll_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildPkEnroll_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildPkEnroll_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildPkEnroll_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildPkEnroll_SC>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_GuildPkEnroll_SC::MSG_Ret_GuildPkEnroll_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
}
MSG_Ret_GuildPkEnroll_SC::MSG_Ret_GuildPkEnroll_SC(const MSG_Ret_GuildPkEnroll_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
}

void MSG_Ret_GuildPkEnroll_SC::SharedCtor() {
  result_ = false;
}

MSG_Ret_GuildPkEnroll_SC::~MSG_Ret_GuildPkEnroll_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
  SharedDtor();
}

void MSG_Ret_GuildPkEnroll_SC::SharedDtor() {
}

void MSG_Ret_GuildPkEnroll_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildPkEnroll_SC& MSG_Ret_GuildPkEnroll_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildPkEnroll_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildPkEnroll_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildPkEnroll_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildPkEnroll_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
  return target;
}

size_t MSG_Ret_GuildPkEnroll_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildPkEnroll_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildPkEnroll_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildPkEnroll_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildPkEnroll_SC::MergeFrom(const MSG_Ret_GuildPkEnroll_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void MSG_Ret_GuildPkEnroll_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildPkEnroll_SC::CopyFrom(const MSG_Ret_GuildPkEnroll_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Ret_GuildPkEnroll_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildPkEnroll_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildPkEnroll_SC::InternalSwap(MSG_Ret_GuildPkEnroll_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildPkEnroll_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildPkMemberInfo::InitAsDefaultInstance() {
}
class GuildPkMemberInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GuildPkMemberInfo>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_posid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GuildPkMemberInfo::GuildPkMemberInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.GuildPkMemberInfo)
}
GuildPkMemberInfo::GuildPkMemberInfo(const GuildPkMemberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&posid_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(posid_));
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.GuildPkMemberInfo)
}

void GuildPkMemberInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuildPkMemberInfo_guildpk_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posid_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(posid_));
}

GuildPkMemberInfo::~GuildPkMemberInfo() {
  // @@protoc_insertion_point(destructor:guildpk_msg.GuildPkMemberInfo)
  SharedDtor();
}

void GuildPkMemberInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuildPkMemberInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildPkMemberInfo& GuildPkMemberInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildPkMemberInfo_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GuildPkMemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.GuildPkMemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&posid_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(posid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GuildPkMemberInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guildpk_msg.GuildPkMemberInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 posid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_posid(&has_bits);
          posid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildPkMemberInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.GuildPkMemberInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guildpk_msg.GuildPkMemberInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 teamid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teamid(), target);
  }

  // optional uint32 posid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_posid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.GuildPkMemberInfo)
  return target;
}

size_t GuildPkMemberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.GuildPkMemberInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 teamid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid());
    }

    // optional uint32 posid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildPkMemberInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.GuildPkMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildPkMemberInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildPkMemberInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.GuildPkMemberInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.GuildPkMemberInfo)
    MergeFrom(*source);
  }
}

void GuildPkMemberInfo::MergeFrom(const GuildPkMemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.GuildPkMemberInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      posid_ = from.posid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildPkMemberInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.GuildPkMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPkMemberInfo::CopyFrom(const GuildPkMemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.GuildPkMemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPkMemberInfo::IsInitialized() const {
  return true;
}

void GuildPkMemberInfo::InternalSwap(GuildPkMemberInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(level_, other->level_);
  swap(teamid_, other->teamid_);
  swap(posid_, other->posid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildPkMemberInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildPkTeamInfo::InitAsDefaultInstance() {
}
class GuildPkTeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GuildPkTeamInfo>()._has_bits_);
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unlocklv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GuildPkTeamInfo::GuildPkTeamInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.GuildPkTeamInfo)
}
GuildPkTeamInfo::GuildPkTeamInfo(const GuildPkTeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&teamid_, &from.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlocklv_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(unlocklv_));
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.GuildPkTeamInfo)
}

void GuildPkTeamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuildPkTeamInfo_guildpk_5fmsg_2eproto.base);
  ::memset(&teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlocklv_) -
      reinterpret_cast<char*>(&teamid_)) + sizeof(unlocklv_));
}

GuildPkTeamInfo::~GuildPkTeamInfo() {
  // @@protoc_insertion_point(destructor:guildpk_msg.GuildPkTeamInfo)
  SharedDtor();
}

void GuildPkTeamInfo::SharedDtor() {
}

void GuildPkTeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildPkTeamInfo& GuildPkTeamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildPkTeamInfo_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GuildPkTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.GuildPkTeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&teamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unlocklv_) -
        reinterpret_cast<char*>(&teamid_)) + sizeof(unlocklv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GuildPkTeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 teamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unlocklv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unlocklv(&has_bits);
          unlocklv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .guildpk_msg.GuildPkMemberInfo members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildPkTeamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.GuildPkTeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 teamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_teamid(), target);
  }

  // optional uint32 unlocklv = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unlocklv(), target);
  }

  // repeated .guildpk_msg.GuildPkMemberInfo members = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.GuildPkTeamInfo)
  return target;
}

size_t GuildPkTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.GuildPkTeamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guildpk_msg.GuildPkMemberInfo members = 3;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 teamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid());
    }

    // optional uint32 unlocklv = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unlocklv());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildPkTeamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.GuildPkTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildPkTeamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildPkTeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.GuildPkTeamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.GuildPkTeamInfo)
    MergeFrom(*source);
  }
}

void GuildPkTeamInfo::MergeFrom(const GuildPkTeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.GuildPkTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      unlocklv_ = from.unlocklv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildPkTeamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.GuildPkTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPkTeamInfo::CopyFrom(const GuildPkTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.GuildPkTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPkTeamInfo::IsInitialized() const {
  return true;
}

void GuildPkTeamInfo::InternalSwap(GuildPkTeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  swap(teamid_, other->teamid_);
  swap(unlocklv_, other->unlocklv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildPkTeamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildPkGuildInfo::InitAsDefaultInstance() {
}
class GuildPkGuildInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GuildPkGuildInfo>()._has_bits_);
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guildname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teamlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GuildPkGuildInfo::GuildPkGuildInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.GuildPkGuildInfo)
}
GuildPkGuildInfo::GuildPkGuildInfo(const GuildPkGuildInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teaminfo_(from.teaminfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildname()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&teamlimit_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(teamlimit_));
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.GuildPkGuildInfo)
}

void GuildPkGuildInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuildPkGuildInfo_guildpk_5fmsg_2eproto.base);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guildid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teamlimit_) -
      reinterpret_cast<char*>(&guildid_)) + sizeof(teamlimit_));
}

GuildPkGuildInfo::~GuildPkGuildInfo() {
  // @@protoc_insertion_point(destructor:guildpk_msg.GuildPkGuildInfo)
  SharedDtor();
}

void GuildPkGuildInfo::SharedDtor() {
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuildPkGuildInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildPkGuildInfo& GuildPkGuildInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildPkGuildInfo_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GuildPkGuildInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.GuildPkGuildInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teaminfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guildname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&guildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teamlimit_) -
        reinterpret_cast<char*>(&guildid_)) + sizeof(teamlimit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GuildPkGuildInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 guildid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guildname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guildpk_msg.GuildPkGuildInfo.guildname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teamlimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_teamlimit(&has_bits);
          teamlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .guildpk_msg.GuildPkTeamInfo teaminfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teaminfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildPkGuildInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.GuildPkGuildInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guildid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guildid(), target);
  }

  // optional string guildname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guildpk_msg.GuildPkGuildInfo.guildname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_guildname(), target);
  }

  // optional uint32 teamlimit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_teamlimit(), target);
  }

  // repeated .guildpk_msg.GuildPkTeamInfo teaminfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teaminfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_teaminfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.GuildPkGuildInfo)
  return target;
}

size_t GuildPkGuildInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.GuildPkGuildInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guildpk_msg.GuildPkTeamInfo teaminfo = 4;
  total_size += 1UL * this->_internal_teaminfo_size();
  for (const auto& msg : this->teaminfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string guildname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildname());
    }

    // optional uint64 guildid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guildid());
    }

    // optional uint32 teamlimit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamlimit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildPkGuildInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.GuildPkGuildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildPkGuildInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildPkGuildInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.GuildPkGuildInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.GuildPkGuildInfo)
    MergeFrom(*source);
  }
}

void GuildPkGuildInfo::MergeFrom(const GuildPkGuildInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.GuildPkGuildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teaminfo_.MergeFrom(from.teaminfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000002u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000004u) {
      teamlimit_ = from.teamlimit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildPkGuildInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.GuildPkGuildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPkGuildInfo::CopyFrom(const GuildPkGuildInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.GuildPkGuildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPkGuildInfo::IsInitialized() const {
  return true;
}

void GuildPkGuildInfo::InternalSwap(GuildPkGuildInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teaminfo_.InternalSwap(&other->teaminfo_);
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guildid_, other->guildid_);
  swap(teamlimit_, other->teamlimit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildPkGuildInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildPkInfo_SC::InitAsDefaultInstance() {
  ::guildpk_msg::_MSG_Ret_GuildPkInfo_SC_default_instance_._instance.get_mutable()->guildinfo_ = const_cast< ::guildpk_msg::GuildPkGuildInfo*>(
      ::guildpk_msg::GuildPkGuildInfo::internal_default_instance());
}
class MSG_Ret_GuildPkInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildPkInfo_SC>()._has_bits_);
  static const ::guildpk_msg::GuildPkGuildInfo& guildinfo(const MSG_Ret_GuildPkInfo_SC* msg);
  static void set_has_guildinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::guildpk_msg::GuildPkGuildInfo&
MSG_Ret_GuildPkInfo_SC::_Internal::guildinfo(const MSG_Ret_GuildPkInfo_SC* msg) {
  return *msg->guildinfo_;
}
MSG_Ret_GuildPkInfo_SC::MSG_Ret_GuildPkInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
}
MSG_Ret_GuildPkInfo_SC::MSG_Ret_GuildPkInfo_SC(const MSG_Ret_GuildPkInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_guildinfo()) {
    guildinfo_ = new ::guildpk_msg::GuildPkGuildInfo(*from.guildinfo_);
  } else {
    guildinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
}

void MSG_Ret_GuildPkInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildPkInfo_SC_guildpk_5fmsg_2eproto.base);
  guildinfo_ = nullptr;
}

MSG_Ret_GuildPkInfo_SC::~MSG_Ret_GuildPkInfo_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
  SharedDtor();
}

void MSG_Ret_GuildPkInfo_SC::SharedDtor() {
  if (this != internal_default_instance()) delete guildinfo_;
}

void MSG_Ret_GuildPkInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildPkInfo_SC& MSG_Ret_GuildPkInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildPkInfo_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildPkInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(guildinfo_ != nullptr);
    guildinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildPkInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guildpk_msg.GuildPkGuildInfo guildinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildPkInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guildpk_msg.GuildPkGuildInfo guildinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::guildinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
  return target;
}

size_t MSG_Ret_GuildPkInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .guildpk_msg.GuildPkGuildInfo guildinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guildinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildPkInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildPkInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildPkInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildPkInfo_SC::MergeFrom(const MSG_Ret_GuildPkInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guildinfo()) {
    _internal_mutable_guildinfo()->::guildpk_msg::GuildPkGuildInfo::MergeFrom(from._internal_guildinfo());
  }
}

void MSG_Ret_GuildPkInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildPkInfo_SC::CopyFrom(const MSG_Ret_GuildPkInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Ret_GuildPkInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildPkInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildPkInfo_SC::InternalSwap(MSG_Ret_GuildPkInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guildinfo_, other->guildinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildPkInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildPkInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildPkInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildPkInfo_CS>()._has_bits_);
};

MSG_Req_GuildPkInfo_CS::MSG_Req_GuildPkInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Req_GuildPkInfo_CS)
}
MSG_Req_GuildPkInfo_CS::MSG_Req_GuildPkInfo_CS(const MSG_Req_GuildPkInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Req_GuildPkInfo_CS)
}

void MSG_Req_GuildPkInfo_CS::SharedCtor() {
}

MSG_Req_GuildPkInfo_CS::~MSG_Req_GuildPkInfo_CS() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Req_GuildPkInfo_CS)
  SharedDtor();
}

void MSG_Req_GuildPkInfo_CS::SharedDtor() {
}

void MSG_Req_GuildPkInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildPkInfo_CS& MSG_Req_GuildPkInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildPkInfo_CS_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildPkInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Req_GuildPkInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildPkInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildPkInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Req_GuildPkInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Req_GuildPkInfo_CS)
  return target;
}

size_t MSG_Req_GuildPkInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Req_GuildPkInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildPkInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Req_GuildPkInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildPkInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildPkInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Req_GuildPkInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Req_GuildPkInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildPkInfo_CS::MergeFrom(const MSG_Req_GuildPkInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Req_GuildPkInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GuildPkInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Req_GuildPkInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildPkInfo_CS::CopyFrom(const MSG_Req_GuildPkInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Req_GuildPkInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildPkInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildPkInfo_CS::InternalSwap(MSG_Req_GuildPkInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildPkInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildPkJoinTeam_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildPkJoinTeam_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildPkJoinTeam_CS>()._has_bits_);
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_GuildPkJoinTeam_CS::MSG_Req_GuildPkJoinTeam_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
}
MSG_Req_GuildPkJoinTeam_CS::MSG_Req_GuildPkJoinTeam_CS(const MSG_Req_GuildPkJoinTeam_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&teamid_, &from.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&posid_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(posid_));
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
}

void MSG_Req_GuildPkJoinTeam_CS::SharedCtor() {
  ::memset(&teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posid_) -
      reinterpret_cast<char*>(&teamid_)) + sizeof(posid_));
}

MSG_Req_GuildPkJoinTeam_CS::~MSG_Req_GuildPkJoinTeam_CS() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
  SharedDtor();
}

void MSG_Req_GuildPkJoinTeam_CS::SharedDtor() {
}

void MSG_Req_GuildPkJoinTeam_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildPkJoinTeam_CS& MSG_Req_GuildPkJoinTeam_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildPkJoinTeam_CS_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildPkJoinTeam_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&teamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&posid_) -
        reinterpret_cast<char*>(&teamid_)) + sizeof(posid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildPkJoinTeam_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 teamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 posid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_posid(&has_bits);
          posid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildPkJoinTeam_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 teamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_teamid(), target);
  }

  // optional uint32 posid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
  return target;
}

size_t MSG_Req_GuildPkJoinTeam_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 teamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid());
    }

    // optional uint32 posid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildPkJoinTeam_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildPkJoinTeam_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildPkJoinTeam_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildPkJoinTeam_CS::MergeFrom(const MSG_Req_GuildPkJoinTeam_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      posid_ = from.posid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_GuildPkJoinTeam_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildPkJoinTeam_CS::CopyFrom(const MSG_Req_GuildPkJoinTeam_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Req_GuildPkJoinTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildPkJoinTeam_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildPkJoinTeam_CS::InternalSwap(MSG_Req_GuildPkJoinTeam_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(teamid_, other->teamid_);
  swap(posid_, other->posid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildPkJoinTeam_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildPkQuitTeam_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildPkQuitTeam_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildPkQuitTeam_CS>()._has_bits_);
};

MSG_Req_GuildPkQuitTeam_CS::MSG_Req_GuildPkQuitTeam_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
}
MSG_Req_GuildPkQuitTeam_CS::MSG_Req_GuildPkQuitTeam_CS(const MSG_Req_GuildPkQuitTeam_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
}

void MSG_Req_GuildPkQuitTeam_CS::SharedCtor() {
}

MSG_Req_GuildPkQuitTeam_CS::~MSG_Req_GuildPkQuitTeam_CS() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
  SharedDtor();
}

void MSG_Req_GuildPkQuitTeam_CS::SharedDtor() {
}

void MSG_Req_GuildPkQuitTeam_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildPkQuitTeam_CS& MSG_Req_GuildPkQuitTeam_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildPkQuitTeam_CS_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildPkQuitTeam_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildPkQuitTeam_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildPkQuitTeam_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
  return target;
}

size_t MSG_Req_GuildPkQuitTeam_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildPkQuitTeam_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildPkQuitTeam_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildPkQuitTeam_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildPkQuitTeam_CS::MergeFrom(const MSG_Req_GuildPkQuitTeam_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GuildPkQuitTeam_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildPkQuitTeam_CS::CopyFrom(const MSG_Req_GuildPkQuitTeam_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Req_GuildPkQuitTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildPkQuitTeam_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildPkQuitTeam_CS::InternalSwap(MSG_Req_GuildPkQuitTeam_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildPkQuitTeam_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Refresh_GuildPkMemberInfo_SC::InitAsDefaultInstance() {
  ::guildpk_msg::_MSG_Refresh_GuildPkMemberInfo_SC_default_instance_._instance.get_mutable()->member_ = const_cast< ::guildpk_msg::GuildPkMemberInfo*>(
      ::guildpk_msg::GuildPkMemberInfo::internal_default_instance());
}
class MSG_Refresh_GuildPkMemberInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Refresh_GuildPkMemberInfo_SC>()._has_bits_);
  static const ::guildpk_msg::GuildPkMemberInfo& member(const MSG_Refresh_GuildPkMemberInfo_SC* msg);
  static void set_has_member(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::guildpk_msg::GuildPkMemberInfo&
MSG_Refresh_GuildPkMemberInfo_SC::_Internal::member(const MSG_Refresh_GuildPkMemberInfo_SC* msg) {
  return *msg->member_;
}
MSG_Refresh_GuildPkMemberInfo_SC::MSG_Refresh_GuildPkMemberInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
}
MSG_Refresh_GuildPkMemberInfo_SC::MSG_Refresh_GuildPkMemberInfo_SC(const MSG_Refresh_GuildPkMemberInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_member()) {
    member_ = new ::guildpk_msg::GuildPkMemberInfo(*from.member_);
  } else {
    member_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
}

void MSG_Refresh_GuildPkMemberInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Refresh_GuildPkMemberInfo_SC_guildpk_5fmsg_2eproto.base);
  member_ = nullptr;
}

MSG_Refresh_GuildPkMemberInfo_SC::~MSG_Refresh_GuildPkMemberInfo_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
  SharedDtor();
}

void MSG_Refresh_GuildPkMemberInfo_SC::SharedDtor() {
  if (this != internal_default_instance()) delete member_;
}

void MSG_Refresh_GuildPkMemberInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Refresh_GuildPkMemberInfo_SC& MSG_Refresh_GuildPkMemberInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Refresh_GuildPkMemberInfo_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Refresh_GuildPkMemberInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(member_ != nullptr);
    member_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Refresh_GuildPkMemberInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guildpk_msg.GuildPkMemberInfo member = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_member(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Refresh_GuildPkMemberInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guildpk_msg.GuildPkMemberInfo member = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::member(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
  return target;
}

size_t MSG_Refresh_GuildPkMemberInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .guildpk_msg.GuildPkMemberInfo member = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *member_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Refresh_GuildPkMemberInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Refresh_GuildPkMemberInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Refresh_GuildPkMemberInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Refresh_GuildPkMemberInfo_SC::MergeFrom(const MSG_Refresh_GuildPkMemberInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_member()) {
    _internal_mutable_member()->::guildpk_msg::GuildPkMemberInfo::MergeFrom(from._internal_member());
  }
}

void MSG_Refresh_GuildPkMemberInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Refresh_GuildPkMemberInfo_SC::CopyFrom(const MSG_Refresh_GuildPkMemberInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Refresh_GuildPkMemberInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Refresh_GuildPkMemberInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Refresh_GuildPkMemberInfo_SC::InternalSwap(MSG_Refresh_GuildPkMemberInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(member_, other->member_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Refresh_GuildPkMemberInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildPkRank_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildPkRank_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildPkRank_CS>()._has_bits_);
};

MSG_Req_GuildPkRank_CS::MSG_Req_GuildPkRank_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Req_GuildPkRank_CS)
}
MSG_Req_GuildPkRank_CS::MSG_Req_GuildPkRank_CS(const MSG_Req_GuildPkRank_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Req_GuildPkRank_CS)
}

void MSG_Req_GuildPkRank_CS::SharedCtor() {
}

MSG_Req_GuildPkRank_CS::~MSG_Req_GuildPkRank_CS() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Req_GuildPkRank_CS)
  SharedDtor();
}

void MSG_Req_GuildPkRank_CS::SharedDtor() {
}

void MSG_Req_GuildPkRank_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildPkRank_CS& MSG_Req_GuildPkRank_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildPkRank_CS_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildPkRank_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Req_GuildPkRank_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildPkRank_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildPkRank_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Req_GuildPkRank_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Req_GuildPkRank_CS)
  return target;
}

size_t MSG_Req_GuildPkRank_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Req_GuildPkRank_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildPkRank_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Req_GuildPkRank_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildPkRank_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildPkRank_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Req_GuildPkRank_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Req_GuildPkRank_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildPkRank_CS::MergeFrom(const MSG_Req_GuildPkRank_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Req_GuildPkRank_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GuildPkRank_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Req_GuildPkRank_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildPkRank_CS::CopyFrom(const MSG_Req_GuildPkRank_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Req_GuildPkRank_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildPkRank_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildPkRank_CS::InternalSwap(MSG_Req_GuildPkRank_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildPkRank_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildPkGuildScore::InitAsDefaultInstance() {
}
class GuildPkGuildScore::_Internal {
 public:
  using HasBits = decltype(std::declval<GuildPkGuildScore>()._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guildname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GuildPkGuildScore::GuildPkGuildScore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.GuildPkGuildScore)
}
GuildPkGuildScore::GuildPkGuildScore(const GuildPkGuildScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildname()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.GuildPkGuildScore)
}

void GuildPkGuildScore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuildPkGuildScore_guildpk_5fmsg_2eproto.base);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guildid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&guildid_)) + sizeof(score_));
}

GuildPkGuildScore::~GuildPkGuildScore() {
  // @@protoc_insertion_point(destructor:guildpk_msg.GuildPkGuildScore)
  SharedDtor();
}

void GuildPkGuildScore::SharedDtor() {
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuildPkGuildScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildPkGuildScore& GuildPkGuildScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildPkGuildScore_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GuildPkGuildScore::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.GuildPkGuildScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guildname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&guildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&guildid_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GuildPkGuildScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 guildid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guildname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guildpk_msg.GuildPkGuildScore.guildname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildPkGuildScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.GuildPkGuildScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rank = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rank(), target);
  }

  // optional uint64 guildid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guildid(), target);
  }

  // optional string guildname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guildpk_msg.GuildPkGuildScore.guildname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_guildname(), target);
  }

  // optional uint32 score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.GuildPkGuildScore)
  return target;
}

size_t GuildPkGuildScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.GuildPkGuildScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string guildname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildname());
    }

    // optional uint64 guildid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guildid());
    }

    // optional uint32 rank = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint32 score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildPkGuildScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.GuildPkGuildScore)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildPkGuildScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildPkGuildScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.GuildPkGuildScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.GuildPkGuildScore)
    MergeFrom(*source);
  }
}

void GuildPkGuildScore::MergeFrom(const GuildPkGuildScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.GuildPkGuildScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000002u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000004u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildPkGuildScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.GuildPkGuildScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPkGuildScore::CopyFrom(const GuildPkGuildScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.GuildPkGuildScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPkGuildScore::IsInitialized() const {
  return true;
}

void GuildPkGuildScore::InternalSwap(GuildPkGuildScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guildid_, other->guildid_);
  swap(rank_, other->rank_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildPkGuildScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildPkRank_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildPkRank_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildPkRank_SC>()._has_bits_);
};

MSG_Ret_GuildPkRank_SC::MSG_Ret_GuildPkRank_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Ret_GuildPkRank_SC)
}
MSG_Ret_GuildPkRank_SC::MSG_Ret_GuildPkRank_SC(const MSG_Ret_GuildPkRank_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      scorerank_(from.scorerank_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Ret_GuildPkRank_SC)
}

void MSG_Ret_GuildPkRank_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildPkRank_SC_guildpk_5fmsg_2eproto.base);
}

MSG_Ret_GuildPkRank_SC::~MSG_Ret_GuildPkRank_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Ret_GuildPkRank_SC)
  SharedDtor();
}

void MSG_Ret_GuildPkRank_SC::SharedDtor() {
}

void MSG_Ret_GuildPkRank_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildPkRank_SC& MSG_Ret_GuildPkRank_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildPkRank_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildPkRank_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Ret_GuildPkRank_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scorerank_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildPkRank_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guildpk_msg.GuildPkGuildScore scorerank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scorerank(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildPkRank_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Ret_GuildPkRank_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guildpk_msg.GuildPkGuildScore scorerank = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scorerank_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_scorerank(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Ret_GuildPkRank_SC)
  return target;
}

size_t MSG_Ret_GuildPkRank_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Ret_GuildPkRank_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guildpk_msg.GuildPkGuildScore scorerank = 1;
  total_size += 1UL * this->_internal_scorerank_size();
  for (const auto& msg : this->scorerank_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildPkRank_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Ret_GuildPkRank_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildPkRank_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildPkRank_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Ret_GuildPkRank_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Ret_GuildPkRank_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildPkRank_SC::MergeFrom(const MSG_Ret_GuildPkRank_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Ret_GuildPkRank_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scorerank_.MergeFrom(from.scorerank_);
}

void MSG_Ret_GuildPkRank_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Ret_GuildPkRank_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildPkRank_SC::CopyFrom(const MSG_Ret_GuildPkRank_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Ret_GuildPkRank_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildPkRank_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildPkRank_SC::InternalSwap(MSG_Ret_GuildPkRank_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scorerank_.InternalSwap(&other->scorerank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildPkRank_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildPkWinList_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildPkWinList_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildPkWinList_CS>()._has_bits_);
};

MSG_Req_GuildPkWinList_CS::MSG_Req_GuildPkWinList_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Req_GuildPkWinList_CS)
}
MSG_Req_GuildPkWinList_CS::MSG_Req_GuildPkWinList_CS(const MSG_Req_GuildPkWinList_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Req_GuildPkWinList_CS)
}

void MSG_Req_GuildPkWinList_CS::SharedCtor() {
}

MSG_Req_GuildPkWinList_CS::~MSG_Req_GuildPkWinList_CS() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Req_GuildPkWinList_CS)
  SharedDtor();
}

void MSG_Req_GuildPkWinList_CS::SharedDtor() {
}

void MSG_Req_GuildPkWinList_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildPkWinList_CS& MSG_Req_GuildPkWinList_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildPkWinList_CS_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildPkWinList_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Req_GuildPkWinList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildPkWinList_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildPkWinList_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Req_GuildPkWinList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Req_GuildPkWinList_CS)
  return target;
}

size_t MSG_Req_GuildPkWinList_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Req_GuildPkWinList_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildPkWinList_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Req_GuildPkWinList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildPkWinList_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildPkWinList_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Req_GuildPkWinList_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Req_GuildPkWinList_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildPkWinList_CS::MergeFrom(const MSG_Req_GuildPkWinList_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Req_GuildPkWinList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GuildPkWinList_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Req_GuildPkWinList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildPkWinList_CS::CopyFrom(const MSG_Req_GuildPkWinList_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Req_GuildPkWinList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildPkWinList_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildPkWinList_CS::InternalSwap(MSG_Req_GuildPkWinList_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildPkWinList_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildPkWinInfo::InitAsDefaultInstance() {
}
class GuildPkWinInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GuildPkWinInfo>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_win_guild_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_win_leader_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GuildPkWinInfo::GuildPkWinInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.GuildPkWinInfo)
}
GuildPkWinInfo::GuildPkWinInfo(const GuildPkWinInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  win_guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_win_guild_name()) {
    win_guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.win_guild_name_);
  }
  win_leader_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_win_leader_name()) {
    win_leader_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.win_leader_name_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.GuildPkWinInfo)
}

void GuildPkWinInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuildPkWinInfo_guildpk_5fmsg_2eproto.base);
  win_guild_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  win_leader_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_ = PROTOBUF_ULONGLONG(0);
}

GuildPkWinInfo::~GuildPkWinInfo() {
  // @@protoc_insertion_point(destructor:guildpk_msg.GuildPkWinInfo)
  SharedDtor();
}

void GuildPkWinInfo::SharedDtor() {
  win_guild_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  win_leader_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuildPkWinInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildPkWinInfo& GuildPkWinInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildPkWinInfo_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void GuildPkWinInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.GuildPkWinInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      win_guild_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      win_leader_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GuildPkWinInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string win_guild_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_win_guild_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guildpk_msg.GuildPkWinInfo.win_guild_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string win_leader_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_win_leader_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guildpk_msg.GuildPkWinInfo.win_leader_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildPkWinInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.GuildPkWinInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 uid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // optional string win_guild_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_win_guild_name().data(), static_cast<int>(this->_internal_win_guild_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guildpk_msg.GuildPkWinInfo.win_guild_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_win_guild_name(), target);
  }

  // optional string win_leader_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_win_leader_name().data(), static_cast<int>(this->_internal_win_leader_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guildpk_msg.GuildPkWinInfo.win_leader_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_win_leader_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.GuildPkWinInfo)
  return target;
}

size_t GuildPkWinInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.GuildPkWinInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string win_guild_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_win_guild_name());
    }

    // optional string win_leader_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_win_leader_name());
    }

    // optional uint64 uid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildPkWinInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.GuildPkWinInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildPkWinInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildPkWinInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.GuildPkWinInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.GuildPkWinInfo)
    MergeFrom(*source);
  }
}

void GuildPkWinInfo::MergeFrom(const GuildPkWinInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.GuildPkWinInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      win_guild_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.win_guild_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      win_leader_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.win_leader_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildPkWinInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.GuildPkWinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPkWinInfo::CopyFrom(const GuildPkWinInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.GuildPkWinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPkWinInfo::IsInitialized() const {
  return true;
}

void GuildPkWinInfo::InternalSwap(GuildPkWinInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  win_guild_name_.Swap(&other->win_guild_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  win_leader_name_.Swap(&other->win_leader_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildPkWinInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildPkWinList_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildPkWinList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildPkWinList_SC>()._has_bits_);
};

MSG_Ret_GuildPkWinList_SC::MSG_Ret_GuildPkWinList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
}
MSG_Ret_GuildPkWinList_SC::MSG_Ret_GuildPkWinList_SC(const MSG_Ret_GuildPkWinList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      winers_(from.winers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
}

void MSG_Ret_GuildPkWinList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildPkWinList_SC_guildpk_5fmsg_2eproto.base);
}

MSG_Ret_GuildPkWinList_SC::~MSG_Ret_GuildPkWinList_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
  SharedDtor();
}

void MSG_Ret_GuildPkWinList_SC::SharedDtor() {
}

void MSG_Ret_GuildPkWinList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildPkWinList_SC& MSG_Ret_GuildPkWinList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildPkWinList_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildPkWinList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildPkWinList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guildpk_msg.GuildPkWinInfo winers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_winers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildPkWinList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guildpk_msg.GuildPkWinInfo winers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_winers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_winers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
  return target;
}

size_t MSG_Ret_GuildPkWinList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guildpk_msg.GuildPkWinInfo winers = 1;
  total_size += 1UL * this->_internal_winers_size();
  for (const auto& msg : this->winers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildPkWinList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildPkWinList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildPkWinList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildPkWinList_SC::MergeFrom(const MSG_Ret_GuildPkWinList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  winers_.MergeFrom(from.winers_);
}

void MSG_Ret_GuildPkWinList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildPkWinList_SC::CopyFrom(const MSG_Ret_GuildPkWinList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Ret_GuildPkWinList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildPkWinList_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildPkWinList_SC::InternalSwap(MSG_Ret_GuildPkWinList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  winers_.InternalSwap(&other->winers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildPkWinList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildPkMatchResult_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildPkMatchResult_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildPkMatchResult_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lefttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_GuildPkMatchResult_SC::MSG_Ret_GuildPkMatchResult_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
}
MSG_Ret_GuildPkMatchResult_SC::MSG_Ret_GuildPkMatchResult_SC(const MSG_Ret_GuildPkMatchResult_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&lefttime_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(lefttime_));
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
}

void MSG_Ret_GuildPkMatchResult_SC::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lefttime_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(lefttime_));
}

MSG_Ret_GuildPkMatchResult_SC::~MSG_Ret_GuildPkMatchResult_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
  SharedDtor();
}

void MSG_Ret_GuildPkMatchResult_SC::SharedDtor() {
}

void MSG_Ret_GuildPkMatchResult_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildPkMatchResult_SC& MSG_Ret_GuildPkMatchResult_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildPkMatchResult_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildPkMatchResult_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lefttime_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(lefttime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildPkMatchResult_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lefttime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lefttime(&has_bits);
          lefttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildPkMatchResult_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional uint32 lefttime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lefttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
  return target;
}

size_t MSG_Ret_GuildPkMatchResult_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

    // optional uint32 lefttime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lefttime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildPkMatchResult_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildPkMatchResult_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildPkMatchResult_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildPkMatchResult_SC::MergeFrom(const MSG_Ret_GuildPkMatchResult_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      lefttime_ = from.lefttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_GuildPkMatchResult_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildPkMatchResult_SC::CopyFrom(const MSG_Ret_GuildPkMatchResult_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Ret_GuildPkMatchResult_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildPkMatchResult_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildPkMatchResult_SC::InternalSwap(MSG_Ret_GuildPkMatchResult_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
  swap(lefttime_, other->lefttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildPkMatchResult_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_EnterGuildPk_CS::InitAsDefaultInstance() {
}
class MSG_Req_EnterGuildPk_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_EnterGuildPk_CS>()._has_bits_);
};

MSG_Req_EnterGuildPk_CS::MSG_Req_EnterGuildPk_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Req_EnterGuildPk_CS)
}
MSG_Req_EnterGuildPk_CS::MSG_Req_EnterGuildPk_CS(const MSG_Req_EnterGuildPk_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Req_EnterGuildPk_CS)
}

void MSG_Req_EnterGuildPk_CS::SharedCtor() {
}

MSG_Req_EnterGuildPk_CS::~MSG_Req_EnterGuildPk_CS() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Req_EnterGuildPk_CS)
  SharedDtor();
}

void MSG_Req_EnterGuildPk_CS::SharedDtor() {
}

void MSG_Req_EnterGuildPk_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_EnterGuildPk_CS& MSG_Req_EnterGuildPk_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_EnterGuildPk_CS_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_EnterGuildPk_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Req_EnterGuildPk_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_EnterGuildPk_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_EnterGuildPk_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Req_EnterGuildPk_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Req_EnterGuildPk_CS)
  return target;
}

size_t MSG_Req_EnterGuildPk_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Req_EnterGuildPk_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_EnterGuildPk_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Req_EnterGuildPk_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_EnterGuildPk_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_EnterGuildPk_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Req_EnterGuildPk_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Req_EnterGuildPk_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_EnterGuildPk_CS::MergeFrom(const MSG_Req_EnterGuildPk_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Req_EnterGuildPk_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_EnterGuildPk_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Req_EnterGuildPk_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_EnterGuildPk_CS::CopyFrom(const MSG_Req_EnterGuildPk_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Req_EnterGuildPk_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_EnterGuildPk_CS::IsInitialized() const {
  return true;
}

void MSG_Req_EnterGuildPk_CS::InternalSwap(MSG_Req_EnterGuildPk_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_EnterGuildPk_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildPkCountDown_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildPkCountDown_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildPkCountDown_SC>()._has_bits_);
  static void set_has_lefttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_GuildPkCountDown_SC::MSG_Ret_GuildPkCountDown_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
}
MSG_Ret_GuildPkCountDown_SC::MSG_Ret_GuildPkCountDown_SC(const MSG_Ret_GuildPkCountDown_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lefttime_ = from.lefttime_;
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
}

void MSG_Ret_GuildPkCountDown_SC::SharedCtor() {
  lefttime_ = 0u;
}

MSG_Ret_GuildPkCountDown_SC::~MSG_Ret_GuildPkCountDown_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
  SharedDtor();
}

void MSG_Ret_GuildPkCountDown_SC::SharedDtor() {
}

void MSG_Ret_GuildPkCountDown_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildPkCountDown_SC& MSG_Ret_GuildPkCountDown_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildPkCountDown_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildPkCountDown_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lefttime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildPkCountDown_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 lefttime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lefttime(&has_bits);
          lefttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildPkCountDown_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lefttime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lefttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
  return target;
}

size_t MSG_Ret_GuildPkCountDown_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 lefttime = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lefttime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildPkCountDown_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildPkCountDown_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildPkCountDown_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildPkCountDown_SC::MergeFrom(const MSG_Ret_GuildPkCountDown_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lefttime()) {
    _internal_set_lefttime(from._internal_lefttime());
  }
}

void MSG_Ret_GuildPkCountDown_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildPkCountDown_SC::CopyFrom(const MSG_Ret_GuildPkCountDown_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Ret_GuildPkCountDown_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildPkCountDown_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildPkCountDown_SC::InternalSwap(MSG_Ret_GuildPkCountDown_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lefttime_, other->lefttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildPkCountDown_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildPkFight_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildPkFight_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildPkFight_SC>()._has_bits_);
  static void set_has_lefttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_GuildPkFight_SC::MSG_Ret_GuildPkFight_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Ret_GuildPkFight_SC)
}
MSG_Ret_GuildPkFight_SC::MSG_Ret_GuildPkFight_SC(const MSG_Ret_GuildPkFight_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lefttime_ = from.lefttime_;
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Ret_GuildPkFight_SC)
}

void MSG_Ret_GuildPkFight_SC::SharedCtor() {
  lefttime_ = 0u;
}

MSG_Ret_GuildPkFight_SC::~MSG_Ret_GuildPkFight_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Ret_GuildPkFight_SC)
  SharedDtor();
}

void MSG_Ret_GuildPkFight_SC::SharedDtor() {
}

void MSG_Ret_GuildPkFight_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildPkFight_SC& MSG_Ret_GuildPkFight_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildPkFight_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildPkFight_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Ret_GuildPkFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lefttime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildPkFight_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 lefttime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lefttime(&has_bits);
          lefttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildPkFight_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Ret_GuildPkFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lefttime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lefttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Ret_GuildPkFight_SC)
  return target;
}

size_t MSG_Ret_GuildPkFight_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Ret_GuildPkFight_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 lefttime = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lefttime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildPkFight_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Ret_GuildPkFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildPkFight_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildPkFight_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Ret_GuildPkFight_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Ret_GuildPkFight_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildPkFight_SC::MergeFrom(const MSG_Ret_GuildPkFight_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Ret_GuildPkFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lefttime()) {
    _internal_set_lefttime(from._internal_lefttime());
  }
}

void MSG_Ret_GuildPkFight_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Ret_GuildPkFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildPkFight_SC::CopyFrom(const MSG_Ret_GuildPkFight_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Ret_GuildPkFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildPkFight_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildPkFight_SC::InternalSwap(MSG_Ret_GuildPkFight_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lefttime_, other->lefttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildPkFight_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void realtime_guildteam_info::InitAsDefaultInstance() {
}
class realtime_guildteam_info::_Internal {
 public:
  using HasBits = decltype(std::declval<realtime_guildteam_info>()._has_bits_);
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guildname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leftnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

realtime_guildteam_info::realtime_guildteam_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.realtime_guildteam_info)
}
realtime_guildteam_info::realtime_guildteam_info(const realtime_guildteam_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildname()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&leftnum_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(leftnum_));
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.realtime_guildteam_info)
}

void realtime_guildteam_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_realtime_guildteam_info_guildpk_5fmsg_2eproto.base);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guildid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leftnum_) -
      reinterpret_cast<char*>(&guildid_)) + sizeof(leftnum_));
}

realtime_guildteam_info::~realtime_guildteam_info() {
  // @@protoc_insertion_point(destructor:guildpk_msg.realtime_guildteam_info)
  SharedDtor();
}

void realtime_guildteam_info::SharedDtor() {
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void realtime_guildteam_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const realtime_guildteam_info& realtime_guildteam_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_realtime_guildteam_info_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void realtime_guildteam_info::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.realtime_guildteam_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guildname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&guildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leftnum_) -
        reinterpret_cast<char*>(&guildid_)) + sizeof(leftnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* realtime_guildteam_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 guildid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guildname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guildpk_msg.realtime_guildteam_info.guildname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leftnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_leftnum(&has_bits);
          leftnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* realtime_guildteam_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.realtime_guildteam_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guildid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guildid(), target);
  }

  // optional string guildname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guildpk_msg.realtime_guildteam_info.guildname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_guildname(), target);
  }

  // optional uint32 leftnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_leftnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.realtime_guildteam_info)
  return target;
}

size_t realtime_guildteam_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.realtime_guildteam_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string guildname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildname());
    }

    // optional uint64 guildid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guildid());
    }

    // optional uint32 leftnum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leftnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void realtime_guildteam_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.realtime_guildteam_info)
  GOOGLE_DCHECK_NE(&from, this);
  const realtime_guildteam_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<realtime_guildteam_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.realtime_guildteam_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.realtime_guildteam_info)
    MergeFrom(*source);
  }
}

void realtime_guildteam_info::MergeFrom(const realtime_guildteam_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.realtime_guildteam_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000002u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000004u) {
      leftnum_ = from.leftnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void realtime_guildteam_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.realtime_guildteam_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void realtime_guildteam_info::CopyFrom(const realtime_guildteam_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.realtime_guildteam_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool realtime_guildteam_info::IsInitialized() const {
  return true;
}

void realtime_guildteam_info::InternalSwap(realtime_guildteam_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guildid_, other->guildid_);
  swap(leftnum_, other->leftnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata realtime_guildteam_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RealTime_GuildPkTeam_Rank_SC::InitAsDefaultInstance() {
}
class MSG_RealTime_GuildPkTeam_Rank_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RealTime_GuildPkTeam_Rank_SC>()._has_bits_);
};

MSG_RealTime_GuildPkTeam_Rank_SC::MSG_RealTime_GuildPkTeam_Rank_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
}
MSG_RealTime_GuildPkTeam_Rank_SC::MSG_RealTime_GuildPkTeam_Rank_SC(const MSG_RealTime_GuildPkTeam_Rank_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teamrank_(from.teamrank_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
}

void MSG_RealTime_GuildPkTeam_Rank_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RealTime_GuildPkTeam_Rank_SC_guildpk_5fmsg_2eproto.base);
}

MSG_RealTime_GuildPkTeam_Rank_SC::~MSG_RealTime_GuildPkTeam_Rank_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
  SharedDtor();
}

void MSG_RealTime_GuildPkTeam_Rank_SC::SharedDtor() {
}

void MSG_RealTime_GuildPkTeam_Rank_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RealTime_GuildPkTeam_Rank_SC& MSG_RealTime_GuildPkTeam_Rank_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RealTime_GuildPkTeam_Rank_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RealTime_GuildPkTeam_Rank_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teamrank_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RealTime_GuildPkTeam_Rank_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guildpk_msg.realtime_guildteam_info teamrank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teamrank(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RealTime_GuildPkTeam_Rank_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guildpk_msg.realtime_guildteam_info teamrank = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teamrank_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_teamrank(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
  return target;
}

size_t MSG_RealTime_GuildPkTeam_Rank_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guildpk_msg.realtime_guildteam_info teamrank = 1;
  total_size += 1UL * this->_internal_teamrank_size();
  for (const auto& msg : this->teamrank_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RealTime_GuildPkTeam_Rank_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RealTime_GuildPkTeam_Rank_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RealTime_GuildPkTeam_Rank_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
    MergeFrom(*source);
  }
}

void MSG_RealTime_GuildPkTeam_Rank_SC::MergeFrom(const MSG_RealTime_GuildPkTeam_Rank_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teamrank_.MergeFrom(from.teamrank_);
}

void MSG_RealTime_GuildPkTeam_Rank_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RealTime_GuildPkTeam_Rank_SC::CopyFrom(const MSG_RealTime_GuildPkTeam_Rank_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_RealTime_GuildPkTeam_Rank_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RealTime_GuildPkTeam_Rank_SC::IsInitialized() const {
  return true;
}

void MSG_RealTime_GuildPkTeam_Rank_SC::InternalSwap(MSG_RealTime_GuildPkTeam_Rank_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teamrank_.InternalSwap(&other->teamrank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RealTime_GuildPkTeam_Rank_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void finalresult_guildteam_info::InitAsDefaultInstance() {
}
class finalresult_guildteam_info::_Internal {
 public:
  using HasBits = decltype(std::declval<finalresult_guildteam_info>()._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_killnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_totaldmg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

finalresult_guildteam_info::finalresult_guildteam_info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.finalresult_guildteam_info)
}
finalresult_guildteam_info::finalresult_guildteam_info(const finalresult_guildteam_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&rank_, &from.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&totaldmg_) -
    reinterpret_cast<char*>(&rank_)) + sizeof(totaldmg_));
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.finalresult_guildteam_info)
}

void finalresult_guildteam_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_finalresult_guildteam_info_guildpk_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totaldmg_) -
      reinterpret_cast<char*>(&rank_)) + sizeof(totaldmg_));
}

finalresult_guildteam_info::~finalresult_guildteam_info() {
  // @@protoc_insertion_point(destructor:guildpk_msg.finalresult_guildteam_info)
  SharedDtor();
}

void finalresult_guildteam_info::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void finalresult_guildteam_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const finalresult_guildteam_info& finalresult_guildteam_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_finalresult_guildteam_info_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void finalresult_guildteam_info::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.finalresult_guildteam_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&totaldmg_) -
        reinterpret_cast<char*>(&rank_)) + sizeof(totaldmg_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* finalresult_guildteam_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guildpk_msg.finalresult_guildteam_info.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 killnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_killnum(&has_bits);
          killnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 totaldmg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_totaldmg(&has_bits);
          totaldmg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* finalresult_guildteam_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.finalresult_guildteam_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rank = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rank(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guildpk_msg.finalresult_guildteam_info.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 killnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_killnum(), target);
  }

  // optional uint32 totaldmg = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_totaldmg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.finalresult_guildteam_info)
  return target;
}

size_t finalresult_guildteam_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.finalresult_guildteam_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 rank = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint32 killnum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killnum());
    }

    // optional uint32 totaldmg = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_totaldmg());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void finalresult_guildteam_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.finalresult_guildteam_info)
  GOOGLE_DCHECK_NE(&from, this);
  const finalresult_guildteam_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<finalresult_guildteam_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.finalresult_guildteam_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.finalresult_guildteam_info)
    MergeFrom(*source);
  }
}

void finalresult_guildteam_info::MergeFrom(const finalresult_guildteam_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.finalresult_guildteam_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      killnum_ = from.killnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      totaldmg_ = from.totaldmg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void finalresult_guildteam_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.finalresult_guildteam_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void finalresult_guildteam_info::CopyFrom(const finalresult_guildteam_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.finalresult_guildteam_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool finalresult_guildteam_info::IsInitialized() const {
  return true;
}

void finalresult_guildteam_info::InternalSwap(finalresult_guildteam_info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rank_, other->rank_);
  swap(killnum_, other->killnum_);
  swap(totaldmg_, other->totaldmg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata finalresult_guildteam_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_GuildPk_FinalResult_SC::InitAsDefaultInstance() {
}
class MSG_GuildPk_FinalResult_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_GuildPk_FinalResult_SC>()._has_bits_);
  static void set_has_iswin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_GuildPk_FinalResult_SC::MSG_GuildPk_FinalResult_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_GuildPk_FinalResult_SC)
}
MSG_GuildPk_FinalResult_SC::MSG_GuildPk_FinalResult_SC(const MSG_GuildPk_FinalResult_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teamlist_(from.teamlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iswin_ = from.iswin_;
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_GuildPk_FinalResult_SC)
}

void MSG_GuildPk_FinalResult_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_GuildPk_FinalResult_SC_guildpk_5fmsg_2eproto.base);
  iswin_ = false;
}

MSG_GuildPk_FinalResult_SC::~MSG_GuildPk_FinalResult_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_GuildPk_FinalResult_SC)
  SharedDtor();
}

void MSG_GuildPk_FinalResult_SC::SharedDtor() {
}

void MSG_GuildPk_FinalResult_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_GuildPk_FinalResult_SC& MSG_GuildPk_FinalResult_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_GuildPk_FinalResult_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_GuildPk_FinalResult_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_GuildPk_FinalResult_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teamlist_.Clear();
  iswin_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_GuildPk_FinalResult_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool iswin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_iswin(&has_bits);
          iswin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .guildpk_msg.finalresult_guildteam_info teamlist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teamlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_GuildPk_FinalResult_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_GuildPk_FinalResult_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool iswin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_iswin(), target);
  }

  // repeated .guildpk_msg.finalresult_guildteam_info teamlist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teamlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_teamlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_GuildPk_FinalResult_SC)
  return target;
}

size_t MSG_GuildPk_FinalResult_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_GuildPk_FinalResult_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guildpk_msg.finalresult_guildteam_info teamlist = 2;
  total_size += 1UL * this->_internal_teamlist_size();
  for (const auto& msg : this->teamlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool iswin = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_GuildPk_FinalResult_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_GuildPk_FinalResult_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_GuildPk_FinalResult_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_GuildPk_FinalResult_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_GuildPk_FinalResult_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_GuildPk_FinalResult_SC)
    MergeFrom(*source);
  }
}

void MSG_GuildPk_FinalResult_SC::MergeFrom(const MSG_GuildPk_FinalResult_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_GuildPk_FinalResult_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teamlist_.MergeFrom(from.teamlist_);
  if (from._internal_has_iswin()) {
    _internal_set_iswin(from._internal_iswin());
  }
}

void MSG_GuildPk_FinalResult_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_GuildPk_FinalResult_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_GuildPk_FinalResult_SC::CopyFrom(const MSG_GuildPk_FinalResult_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_GuildPk_FinalResult_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_GuildPk_FinalResult_SC::IsInitialized() const {
  return true;
}

void MSG_GuildPk_FinalResult_SC::InternalSwap(MSG_GuildPk_FinalResult_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teamlist_.InternalSwap(&other->teamlist_);
  swap(iswin_, other->iswin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_GuildPk_FinalResult_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildPkEnroll_Finish_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildPkEnroll_Finish_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildPkEnroll_Finish_SC>()._has_bits_);
};

MSG_Ret_GuildPkEnroll_Finish_SC::MSG_Ret_GuildPkEnroll_Finish_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
}
MSG_Ret_GuildPkEnroll_Finish_SC::MSG_Ret_GuildPkEnroll_Finish_SC(const MSG_Ret_GuildPkEnroll_Finish_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
}

void MSG_Ret_GuildPkEnroll_Finish_SC::SharedCtor() {
}

MSG_Ret_GuildPkEnroll_Finish_SC::~MSG_Ret_GuildPkEnroll_Finish_SC() {
  // @@protoc_insertion_point(destructor:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
  SharedDtor();
}

void MSG_Ret_GuildPkEnroll_Finish_SC::SharedDtor() {
}

void MSG_Ret_GuildPkEnroll_Finish_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildPkEnroll_Finish_SC& MSG_Ret_GuildPkEnroll_Finish_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildPkEnroll_Finish_SC_guildpk_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildPkEnroll_Finish_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildPkEnroll_Finish_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildPkEnroll_Finish_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
  return target;
}

size_t MSG_Ret_GuildPkEnroll_Finish_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildPkEnroll_Finish_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildPkEnroll_Finish_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildPkEnroll_Finish_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildPkEnroll_Finish_SC::MergeFrom(const MSG_Ret_GuildPkEnroll_Finish_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Ret_GuildPkEnroll_Finish_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildPkEnroll_Finish_SC::CopyFrom(const MSG_Ret_GuildPkEnroll_Finish_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guildpk_msg.MSG_Ret_GuildPkEnroll_Finish_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildPkEnroll_Finish_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildPkEnroll_Finish_SC::InternalSwap(MSG_Ret_GuildPkEnroll_Finish_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildPkEnroll_Finish_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace guildpk_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Req_GuildPkEnroll_CS* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Req_GuildPkEnroll_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Req_GuildPkEnroll_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Ret_GuildPkEnroll_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Ret_GuildPkEnroll_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Ret_GuildPkEnroll_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::GuildPkMemberInfo* Arena::CreateMaybeMessage< ::guildpk_msg::GuildPkMemberInfo >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::GuildPkMemberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::GuildPkTeamInfo* Arena::CreateMaybeMessage< ::guildpk_msg::GuildPkTeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::GuildPkTeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::GuildPkGuildInfo* Arena::CreateMaybeMessage< ::guildpk_msg::GuildPkGuildInfo >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::GuildPkGuildInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Ret_GuildPkInfo_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Ret_GuildPkInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Ret_GuildPkInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Req_GuildPkInfo_CS* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Req_GuildPkInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Req_GuildPkInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Req_GuildPkJoinTeam_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Req_GuildPkQuitTeam_CS* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Req_GuildPkQuitTeam_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Req_GuildPkQuitTeam_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Refresh_GuildPkMemberInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Req_GuildPkRank_CS* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Req_GuildPkRank_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Req_GuildPkRank_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::GuildPkGuildScore* Arena::CreateMaybeMessage< ::guildpk_msg::GuildPkGuildScore >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::GuildPkGuildScore >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Ret_GuildPkRank_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Ret_GuildPkRank_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Ret_GuildPkRank_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Req_GuildPkWinList_CS* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Req_GuildPkWinList_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Req_GuildPkWinList_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::GuildPkWinInfo* Arena::CreateMaybeMessage< ::guildpk_msg::GuildPkWinInfo >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::GuildPkWinInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Ret_GuildPkWinList_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Ret_GuildPkWinList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Ret_GuildPkWinList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Ret_GuildPkMatchResult_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Req_EnterGuildPk_CS* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Req_EnterGuildPk_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Req_EnterGuildPk_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Ret_GuildPkCountDown_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Ret_GuildPkCountDown_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Ret_GuildPkCountDown_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Ret_GuildPkFight_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Ret_GuildPkFight_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Ret_GuildPkFight_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::realtime_guildteam_info* Arena::CreateMaybeMessage< ::guildpk_msg::realtime_guildteam_info >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::realtime_guildteam_info >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_RealTime_GuildPkTeam_Rank_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::finalresult_guildteam_info* Arena::CreateMaybeMessage< ::guildpk_msg::finalresult_guildteam_info >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::finalresult_guildteam_info >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_GuildPk_FinalResult_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_GuildPk_FinalResult_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_GuildPk_FinalResult_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guildpk_msg::MSG_Ret_GuildPkEnroll_Finish_SC* Arena::CreateMaybeMessage< ::guildpk_msg::MSG_Ret_GuildPkEnroll_Finish_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guildpk_msg::MSG_Ret_GuildPkEnroll_Finish_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
