// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatset.proto

#include "chatset.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChatData_chat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chatset_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalChatInfo_chatset_2eproto;
namespace Chat {
class LocalChatInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalChatInfo> _instance;
} _LocalChatInfo_default_instance_;
class LocalChatSetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalChatSet> _instance;
} _LocalChatSet_default_instance_;
}  // namespace Chat
static void InitDefaultsscc_info_LocalChatInfo_chatset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_LocalChatInfo_default_instance_;
    new (ptr) ::Chat::LocalChatInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::LocalChatInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalChatInfo_chatset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocalChatInfo_chatset_2eproto}, {
      &scc_info_ChatData_chat_2eproto.base,}};

static void InitDefaultsscc_info_LocalChatSet_chatset_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Chat::_LocalChatSet_default_instance_;
    new (ptr) ::Chat::LocalChatSet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Chat::LocalChatSet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalChatSet_chatset_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocalChatSet_chatset_2eproto}, {
      &scc_info_LocalChatInfo_chatset_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chatset_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_chatset_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chatset_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chatset_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Chat::LocalChatInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::LocalChatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::LocalChatInfo, id_),
  PROTOBUF_FIELD_OFFSET(::Chat::LocalChatInfo, unread_num_),
  PROTOBUF_FIELD_OFFSET(::Chat::LocalChatInfo, datalist_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Chat::LocalChatSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Chat::LocalChatSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Chat::LocalChatSet, list_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::Chat::LocalChatInfo)},
  { 11, 17, sizeof(::Chat::LocalChatSet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_LocalChatInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Chat::_LocalChatSet_default_instance_),
};

const char descriptor_table_protodef_chatset_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rchatset.proto\022\004Chat\032\nchat.proto\"Q\n\rLoc"
  "alChatInfo\022\n\n\002id\030\001 \001(\004\022\022\n\nunread_num\030\002 \001"
  "(\r\022 \n\010dataList\030\003 \003(\0132\016.Chat.ChatData\"1\n\014"
  "LocalChatSet\022!\n\004list\030\001 \003(\0132\023.Chat.LocalC"
  "hatInfo"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chatset_2eproto_deps[1] = {
  &::descriptor_table_chat_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chatset_2eproto_sccs[2] = {
  &scc_info_LocalChatInfo_chatset_2eproto.base,
  &scc_info_LocalChatSet_chatset_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chatset_2eproto_once;
static bool descriptor_table_chatset_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chatset_2eproto = {
  &descriptor_table_chatset_2eproto_initialized, descriptor_table_protodef_chatset_2eproto, "chatset.proto", 167,
  &descriptor_table_chatset_2eproto_once, descriptor_table_chatset_2eproto_sccs, descriptor_table_chatset_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_chatset_2eproto::offsets,
  file_level_metadata_chatset_2eproto, 2, file_level_enum_descriptors_chatset_2eproto, file_level_service_descriptors_chatset_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chatset_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chatset_2eproto)), true);
namespace Chat {

// ===================================================================

void LocalChatInfo::InitAsDefaultInstance() {
}
class LocalChatInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalChatInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unread_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void LocalChatInfo::clear_datalist() {
  datalist_.Clear();
}
LocalChatInfo::LocalChatInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.LocalChatInfo)
}
LocalChatInfo::LocalChatInfo(const LocalChatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datalist_(from.datalist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unread_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(unread_num_));
  // @@protoc_insertion_point(copy_constructor:Chat.LocalChatInfo)
}

void LocalChatInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalChatInfo_chatset_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unread_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(unread_num_));
}

LocalChatInfo::~LocalChatInfo() {
  // @@protoc_insertion_point(destructor:Chat.LocalChatInfo)
  SharedDtor();
}

void LocalChatInfo::SharedDtor() {
}

void LocalChatInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalChatInfo& LocalChatInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalChatInfo_chatset_2eproto.base);
  return *internal_default_instance();
}


void LocalChatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.LocalChatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datalist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unread_num_) -
        reinterpret_cast<char*>(&id_)) + sizeof(unread_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LocalChatInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unread_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unread_num(&has_bits);
          unread_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Chat.ChatData dataList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datalist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalChatInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.LocalChatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 unread_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unread_num(), target);
  }

  // repeated .Chat.ChatData dataList = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datalist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_datalist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.LocalChatInfo)
  return target;
}

size_t LocalChatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.LocalChatInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Chat.ChatData dataList = 3;
  total_size += 1UL * this->_internal_datalist_size();
  for (const auto& msg : this->datalist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint32 unread_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unread_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalChatInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.LocalChatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalChatInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalChatInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.LocalChatInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.LocalChatInfo)
    MergeFrom(*source);
  }
}

void LocalChatInfo::MergeFrom(const LocalChatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.LocalChatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datalist_.MergeFrom(from.datalist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      unread_num_ = from.unread_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalChatInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.LocalChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalChatInfo::CopyFrom(const LocalChatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.LocalChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalChatInfo::IsInitialized() const {
  return true;
}

void LocalChatInfo::InternalSwap(LocalChatInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datalist_.InternalSwap(&other->datalist_);
  swap(id_, other->id_);
  swap(unread_num_, other->unread_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalChatInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalChatSet::InitAsDefaultInstance() {
}
class LocalChatSet::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalChatSet>()._has_bits_);
};

LocalChatSet::LocalChatSet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Chat.LocalChatSet)
}
LocalChatSet::LocalChatSet(const LocalChatSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Chat.LocalChatSet)
}

void LocalChatSet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalChatSet_chatset_2eproto.base);
}

LocalChatSet::~LocalChatSet() {
  // @@protoc_insertion_point(destructor:Chat.LocalChatSet)
  SharedDtor();
}

void LocalChatSet::SharedDtor() {
}

void LocalChatSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalChatSet& LocalChatSet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalChatSet_chatset_2eproto.base);
  return *internal_default_instance();
}


void LocalChatSet::Clear() {
// @@protoc_insertion_point(message_clear_start:Chat.LocalChatSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LocalChatSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Chat.LocalChatInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalChatSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Chat.LocalChatSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Chat.LocalChatInfo list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Chat.LocalChatSet)
  return target;
}

size_t LocalChatSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Chat.LocalChatSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Chat.LocalChatInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalChatSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Chat.LocalChatSet)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalChatSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalChatSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Chat.LocalChatSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Chat.LocalChatSet)
    MergeFrom(*source);
  }
}

void LocalChatSet::MergeFrom(const LocalChatSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Chat.LocalChatSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void LocalChatSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Chat.LocalChatSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalChatSet::CopyFrom(const LocalChatSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Chat.LocalChatSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalChatSet::IsInitialized() const {
  return true;
}

void LocalChatSet::InternalSwap(LocalChatSet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalChatSet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Chat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Chat::LocalChatInfo* Arena::CreateMaybeMessage< ::Chat::LocalChatInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::LocalChatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Chat::LocalChatSet* Arena::CreateMaybeMessage< ::Chat::LocalChatSet >(Arena* arena) {
  return Arena::CreateInternal< ::Chat::LocalChatSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
