// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mobapk.proto

#include "mobapk.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mobapk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBagInfo_mobapk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mobapk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerItem_mobapk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mobapk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarPos_mobapk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mobapk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamUser_mobapk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mobapk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserTeamInfo_mobapk_2eproto;
namespace mobapk {
class MSG_UserMatchReq_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_UserMatchReq_CS> _instance;
} _MSG_UserMatchReq_CS_default_instance_;
class MSG_MatchInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_MatchInfo_SC> _instance;
} _MSG_MatchInfo_SC_default_instance_;
class MSG_MatchReady_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_MatchReady_CS> _instance;
} _MSG_MatchReady_CS_default_instance_;
class MSG_DismissGroup_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_DismissGroup_SC> _instance;
} _MSG_DismissGroup_SC_default_instance_;
class TeamUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TeamUser> _instance;
} _TeamUser_default_instance_;
class MSG_MyTeamInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_MyTeamInfo_SC> _instance;
} _MSG_MyTeamInfo_SC_default_instance_;
class PowerItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerItem> _instance;
} _PowerItem_default_instance_;
class MSG_RefreshPowerRank_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RefreshPowerRank_SC> _instance;
} _MSG_RefreshPowerRank_SC_default_instance_;
class RadarPosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarPos> _instance;
} _RadarPos_default_instance_;
class MSG_RefreshRadarPos_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RefreshRadarPos_CSC> _instance;
} _MSG_RefreshRadarPos_CSC_default_instance_;
class MSG_StartPray_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_StartPray_SC> _instance;
} _MSG_StartPray_SC_default_instance_;
class MSG_SelectHopes_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_SelectHopes_CS> _instance;
} _MSG_SelectHopes_CS_default_instance_;
class MSG_ServerTimer_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ServerTimer_SC> _instance;
} _MSG_ServerTimer_SC_default_instance_;
class UserTeamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserTeamInfo> _instance;
} _UserTeamInfo_default_instance_;
class MSG_BstUserTeamInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_BstUserTeamInfo_SC> _instance;
} _MSG_BstUserTeamInfo_SC_default_instance_;
class MSG_UseSpecialCapsule_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_UseSpecialCapsule_CS> _instance;
} _MSG_UseSpecialCapsule_CS_default_instance_;
class MSG_GameOver_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_GameOver_SC> _instance;
} _MSG_GameOver_SC_default_instance_;
class MSG_UserGetAwardReq_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_UserGetAwardReq_CS> _instance;
} _MSG_UserGetAwardReq_CS_default_instance_;
class GetBagInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBagInfo> _instance;
} _GetBagInfo_default_instance_;
class MSG_RewardBagInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RewardBagInfo_SC> _instance;
} _MSG_RewardBagInfo_SC_default_instance_;
class MSG_MobaLevelUp_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_MobaLevelUp_SC> _instance;
} _MSG_MobaLevelUp_SC_default_instance_;
class MSG_ClientEffect_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ClientEffect_SC> _instance;
} _MSG_ClientEffect_SC_default_instance_;
}  // namespace mobapk
static void InitDefaultsscc_info_GetBagInfo_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_GetBagInfo_default_instance_;
    new (ptr) ::mobapk::GetBagInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::GetBagInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBagInfo_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBagInfo_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_BstUserTeamInfo_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_BstUserTeamInfo_SC_default_instance_;
    new (ptr) ::mobapk::MSG_BstUserTeamInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_BstUserTeamInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_BstUserTeamInfo_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_BstUserTeamInfo_SC_mobapk_2eproto}, {
      &scc_info_UserTeamInfo_mobapk_2eproto.base,}};

static void InitDefaultsscc_info_MSG_ClientEffect_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_ClientEffect_SC_default_instance_;
    new (ptr) ::mobapk::MSG_ClientEffect_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_ClientEffect_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ClientEffect_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ClientEffect_SC_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_DismissGroup_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_DismissGroup_SC_default_instance_;
    new (ptr) ::mobapk::MSG_DismissGroup_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_DismissGroup_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_DismissGroup_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_DismissGroup_SC_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_GameOver_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_GameOver_SC_default_instance_;
    new (ptr) ::mobapk::MSG_GameOver_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_GameOver_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_GameOver_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_GameOver_SC_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_MatchInfo_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_MatchInfo_SC_default_instance_;
    new (ptr) ::mobapk::MSG_MatchInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_MatchInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_MatchInfo_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_MatchInfo_SC_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_MatchReady_CS_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_MatchReady_CS_default_instance_;
    new (ptr) ::mobapk::MSG_MatchReady_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_MatchReady_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_MatchReady_CS_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_MatchReady_CS_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_MobaLevelUp_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_MobaLevelUp_SC_default_instance_;
    new (ptr) ::mobapk::MSG_MobaLevelUp_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_MobaLevelUp_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_MobaLevelUp_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_MobaLevelUp_SC_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_MyTeamInfo_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_MyTeamInfo_SC_default_instance_;
    new (ptr) ::mobapk::MSG_MyTeamInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_MyTeamInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_MyTeamInfo_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_MyTeamInfo_SC_mobapk_2eproto}, {
      &scc_info_TeamUser_mobapk_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RefreshPowerRank_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_RefreshPowerRank_SC_default_instance_;
    new (ptr) ::mobapk::MSG_RefreshPowerRank_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_RefreshPowerRank_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RefreshPowerRank_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RefreshPowerRank_SC_mobapk_2eproto}, {
      &scc_info_PowerItem_mobapk_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RefreshRadarPos_CSC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_RefreshRadarPos_CSC_default_instance_;
    new (ptr) ::mobapk::MSG_RefreshRadarPos_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_RefreshRadarPos_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RefreshRadarPos_CSC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RefreshRadarPos_CSC_mobapk_2eproto}, {
      &scc_info_RadarPos_mobapk_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RewardBagInfo_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_RewardBagInfo_SC_default_instance_;
    new (ptr) ::mobapk::MSG_RewardBagInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_RewardBagInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RewardBagInfo_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RewardBagInfo_SC_mobapk_2eproto}, {
      &scc_info_GetBagInfo_mobapk_2eproto.base,}};

static void InitDefaultsscc_info_MSG_SelectHopes_CS_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_SelectHopes_CS_default_instance_;
    new (ptr) ::mobapk::MSG_SelectHopes_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_SelectHopes_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_SelectHopes_CS_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_SelectHopes_CS_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ServerTimer_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_ServerTimer_SC_default_instance_;
    new (ptr) ::mobapk::MSG_ServerTimer_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_ServerTimer_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ServerTimer_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ServerTimer_SC_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_StartPray_SC_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_StartPray_SC_default_instance_;
    new (ptr) ::mobapk::MSG_StartPray_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_StartPray_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_StartPray_SC_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_StartPray_SC_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_UseSpecialCapsule_CS_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_UseSpecialCapsule_CS_default_instance_;
    new (ptr) ::mobapk::MSG_UseSpecialCapsule_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_UseSpecialCapsule_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_UseSpecialCapsule_CS_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_UseSpecialCapsule_CS_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_UserGetAwardReq_CS_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_UserGetAwardReq_CS_default_instance_;
    new (ptr) ::mobapk::MSG_UserGetAwardReq_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_UserGetAwardReq_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_UserGetAwardReq_CS_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_UserGetAwardReq_CS_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_MSG_UserMatchReq_CS_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_MSG_UserMatchReq_CS_default_instance_;
    new (ptr) ::mobapk::MSG_UserMatchReq_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::MSG_UserMatchReq_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_UserMatchReq_CS_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_UserMatchReq_CS_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_PowerItem_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_PowerItem_default_instance_;
    new (ptr) ::mobapk::PowerItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::PowerItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerItem_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PowerItem_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_RadarPos_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_RadarPos_default_instance_;
    new (ptr) ::mobapk::RadarPos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::RadarPos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarPos_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RadarPos_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_TeamUser_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_TeamUser_default_instance_;
    new (ptr) ::mobapk::TeamUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::TeamUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TeamUser_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TeamUser_mobapk_2eproto}, {}};

static void InitDefaultsscc_info_UserTeamInfo_mobapk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mobapk::_UserTeamInfo_default_instance_;
    new (ptr) ::mobapk::UserTeamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mobapk::UserTeamInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserTeamInfo_mobapk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserTeamInfo_mobapk_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mobapk_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mobapk_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mobapk_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mobapk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UserMatchReq_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UserMatchReq_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UserMatchReq_CS, is_match_),
  0,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MatchInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MatchInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MatchInfo_SC, num_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MatchInfo_SC, ready_num_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MatchInfo_SC, id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MatchReady_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MatchReady_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MatchReady_CS, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_DismissGroup_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_DismissGroup_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, uid_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, name_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, level_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, x_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, y_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, online_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, hairstyle_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, haircolor_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, headstyle_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, bodystyle_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, antenna_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, coat_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, avatarid_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, maxhp_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, hp_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, heroid_),
  PROTOBUF_FIELD_OFFSET(::mobapk::TeamUser, exp_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MyTeamInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MyTeamInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MyTeamInfo_SC, users_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MyTeamInfo_SC, create_time_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MyTeamInfo_SC, teamid_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mobapk::PowerItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::PowerItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::PowerItem, color_),
  PROTOBUF_FIELD_OFFSET(::mobapk::PowerItem, power_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_RefreshPowerRank_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_RefreshPowerRank_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_RefreshPowerRank_SC, items_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mobapk::RadarPos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::RadarPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::RadarPos, x_),
  PROTOBUF_FIELD_OFFSET(::mobapk::RadarPos, y_),
  PROTOBUF_FIELD_OFFSET(::mobapk::RadarPos, num_),
  PROTOBUF_FIELD_OFFSET(::mobapk::RadarPos, uid_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_RefreshRadarPos_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_RefreshRadarPos_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_RefreshRadarPos_CSC, pos_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_RefreshRadarPos_CSC, radius_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_StartPray_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_StartPray_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_StartPray_SC, hopes_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_SelectHopes_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_SelectHopes_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_SelectHopes_CS, idx_1st_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_SelectHopes_CS, idx_2nd_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_SelectHopes_CS, idx_3rd_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ServerTimer_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ServerTimer_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ServerTimer_SC, id_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ServerTimer_SC, caption_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ServerTimer_SC, resttime_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ServerTimer_SC, style_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mobapk::UserTeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::UserTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::UserTeamInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::mobapk::UserTeamInfo, team_color_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_BstUserTeamInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_BstUserTeamInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_BstUserTeamInfo_SC, infos_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UseSpecialCapsule_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UseSpecialCapsule_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UseSpecialCapsule_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UseSpecialCapsule_CS, x_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UseSpecialCapsule_CS, y_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_GameOver_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_GameOver_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_GameOver_SC, rank_),
  0,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UserGetAwardReq_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UserGetAwardReq_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_UserGetAwardReq_CS, idx_),
  0,
  PROTOBUF_FIELD_OFFSET(::mobapk::GetBagInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::GetBagInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::GetBagInfo, idx_),
  PROTOBUF_FIELD_OFFSET(::mobapk::GetBagInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::mobapk::GetBagInfo, name_),
  PROTOBUF_FIELD_OFFSET(::mobapk::GetBagInfo, objectid_),
  PROTOBUF_FIELD_OFFSET(::mobapk::GetBagInfo, count_),
  2,
  1,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_RewardBagInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_RewardBagInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_RewardBagInfo_SC, infos_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MobaLevelUp_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MobaLevelUp_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MobaLevelUp_SC, oldlevel_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MobaLevelUp_SC, newlevel_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MobaLevelUp_SC, uid_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_MobaLevelUp_SC, type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ClientEffect_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ClientEffect_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ClientEffect_SC, uid_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ClientEffect_SC, effectid_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ClientEffect_SC, posx_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ClientEffect_SC, posy_),
  PROTOBUF_FIELD_OFFSET(::mobapk::MSG_ClientEffect_SC, r_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::mobapk::MSG_UserMatchReq_CS)},
  { 7, 15, sizeof(::mobapk::MSG_MatchInfo_SC)},
  { 18, 24, sizeof(::mobapk::MSG_MatchReady_CS)},
  { 25, 30, sizeof(::mobapk::MSG_DismissGroup_SC)},
  { 30, 52, sizeof(::mobapk::TeamUser)},
  { 69, 77, sizeof(::mobapk::MSG_MyTeamInfo_SC)},
  { 80, 87, sizeof(::mobapk::PowerItem)},
  { 89, 95, sizeof(::mobapk::MSG_RefreshPowerRank_SC)},
  { 96, 105, sizeof(::mobapk::RadarPos)},
  { 109, 116, sizeof(::mobapk::MSG_RefreshRadarPos_CSC)},
  { 118, 124, sizeof(::mobapk::MSG_StartPray_SC)},
  { 125, 133, sizeof(::mobapk::MSG_SelectHopes_CS)},
  { 136, 145, sizeof(::mobapk::MSG_ServerTimer_SC)},
  { 149, 156, sizeof(::mobapk::UserTeamInfo)},
  { 158, 164, sizeof(::mobapk::MSG_BstUserTeamInfo_SC)},
  { 165, 173, sizeof(::mobapk::MSG_UseSpecialCapsule_CS)},
  { 176, 182, sizeof(::mobapk::MSG_GameOver_SC)},
  { 183, 189, sizeof(::mobapk::MSG_UserGetAwardReq_CS)},
  { 190, 200, sizeof(::mobapk::GetBagInfo)},
  { 205, 211, sizeof(::mobapk::MSG_RewardBagInfo_SC)},
  { 212, 221, sizeof(::mobapk::MSG_MobaLevelUp_SC)},
  { 225, 235, sizeof(::mobapk::MSG_ClientEffect_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_UserMatchReq_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_MatchInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_MatchReady_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_DismissGroup_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_TeamUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_MyTeamInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_PowerItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_RefreshPowerRank_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_RadarPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_RefreshRadarPos_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_StartPray_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_SelectHopes_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_ServerTimer_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_UserTeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_BstUserTeamInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_UseSpecialCapsule_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_GameOver_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_UserGetAwardReq_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_GetBagInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_RewardBagInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_MobaLevelUp_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mobapk::_MSG_ClientEffect_SC_default_instance_),
};

const char descriptor_table_protodef_mobapk_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014mobapk.proto\022\006mobapk\"\'\n\023MSG_UserMatchR"
  "eq_CS\022\020\n\010is_match\030\001 \001(\010\">\n\020MSG_MatchInfo"
  "_SC\022\013\n\003num\030\001 \001(\r\022\021\n\tready_num\030\002 \001(\r\022\n\n\002i"
  "d\030\003 \001(\004\"\037\n\021MSG_MatchReady_CS\022\n\n\002id\030\001 \001(\004"
  "\"\025\n\023MSG_DismissGroup_SC\"\217\002\n\010TeamUser\022\013\n\003"
  "uid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\t"
  "\n\001x\030\004 \001(\r\022\t\n\001y\030\005 \001(\r\022\016\n\006online\030\006 \001(\010\022\021\n\t"
  "hairstyle\030\007 \001(\r\022\021\n\thaircolor\030\010 \001(\r\022\021\n\the"
  "adstyle\030\t \001(\r\022\021\n\tbodystyle\030\n \001(\r\022\017\n\007ante"
  "nna\030\013 \001(\r\022\014\n\004coat\030\014 \001(\r\022\020\n\010avatarid\030\r \001("
  "\r\022\r\n\005maxhp\030\016 \001(\r\022\n\n\002hp\030\017 \001(\r\022\016\n\006heroid\030\020"
  " \001(\r\022\013\n\003exp\030\021 \001(\r\"Y\n\021MSG_MyTeamInfo_SC\022\037"
  "\n\005users\030\001 \003(\0132\020.mobapk.TeamUser\022\023\n\013creat"
  "e_time\030\002 \001(\r\022\016\n\006teamid\030\003 \001(\t\")\n\tPowerIte"
  "m\022\r\n\005color\030\001 \001(\t\022\r\n\005power\030\002 \001(\r\";\n\027MSG_R"
  "efreshPowerRank_SC\022 \n\005items\030\001 \003(\0132\021.moba"
  "pk.PowerItem\":\n\010RadarPos\022\t\n\001x\030\001 \001(\r\022\t\n\001y"
  "\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\022\013\n\003uid\030\004 \001(\r\"H\n\027MSG_"
  "RefreshRadarPos_CSC\022\035\n\003pos\030\001 \003(\0132\020.mobap"
  "k.RadarPos\022\016\n\006radius\030\002 \001(\r\"!\n\020MSG_StartP"
  "ray_SC\022\r\n\005hopes\030\001 \003(\t\"G\n\022MSG_SelectHopes"
  "_CS\022\017\n\007idx_1st\030\001 \001(\r\022\017\n\007idx_2nd\030\002 \001(\r\022\017\n"
  "\007idx_3rd\030\003 \001(\r\"g\n\022MSG_ServerTimer_SC\022\037\n\002"
  "id\030\001 \001(\0162\023.mobapk.ServerTimer\022\017\n\007caption"
  "\030\002 \001(\t\022\020\n\010resttime\030\003 \001(\r\022\r\n\005style\030\004 \001(\r\""
  "/\n\014UserTeamInfo\022\013\n\003uid\030\001 \001(\004\022\022\n\nteam_col"
  "or\030\002 \001(\t\"=\n\026MSG_BstUserTeamInfo_SC\022#\n\005in"
  "fos\030\001 \003(\0132\024.mobapk.UserTeamInfo\"@\n\030MSG_U"
  "seSpecialCapsule_CS\022\016\n\006thisid\030\001 \001(\t\022\t\n\001x"
  "\030\002 \001(\r\022\t\n\001y\030\003 \001(\r\"\037\n\017MSG_GameOver_SC\022\014\n\004"
  "rank\030\001 \001(\r\"%\n\026MSG_UserGetAwardReq_CS\022\013\n\003"
  "idx\030\001 \001(\r\"U\n\nGetBagInfo\022\013\n\003idx\030\001 \001(\r\022\013\n\003"
  "uid\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\022\020\n\010objectid\030\004 \001("
  "\r\022\r\n\005count\030\005 \001(\r\"9\n\024MSG_RewardBagInfo_SC"
  "\022!\n\005infos\030\001 \003(\0132\022.mobapk.GetBagInfo\"S\n\022M"
  "SG_MobaLevelUp_SC\022\020\n\010oldlevel\030\001 \001(\r\022\020\n\010n"
  "ewlevel\030\002 \001(\r\022\013\n\003uid\030\003 \001(\004\022\014\n\004type\030\004 \001(\r"
  "\"[\n\023MSG_ClientEffect_SC\022\013\n\003uid\030\001 \001(\004\022\020\n\010"
  "effectid\030\002 \001(\r\022\014\n\004posx\030\003 \001(\r\022\014\n\004posy\030\004 \001"
  "(\r\022\t\n\001r\030\005 \001(\r*\237\001\n\013ServerTimer\022\033\n\027MobaPk_"
  "Confirm_RestTime\020\001\022\031\n\025MobaPk_Start_RestT"
  "ime\020\002\022\032\n\026MobaPk_Relive_RestTime\020\003\022\"\n\036Mob"
  "aPk_KickoutLastOne_RestTime\020\004\022\030\n\024MobaPk_"
  "Pray_RestTime\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mobapk_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mobapk_2eproto_sccs[22] = {
  &scc_info_GetBagInfo_mobapk_2eproto.base,
  &scc_info_MSG_BstUserTeamInfo_SC_mobapk_2eproto.base,
  &scc_info_MSG_ClientEffect_SC_mobapk_2eproto.base,
  &scc_info_MSG_DismissGroup_SC_mobapk_2eproto.base,
  &scc_info_MSG_GameOver_SC_mobapk_2eproto.base,
  &scc_info_MSG_MatchInfo_SC_mobapk_2eproto.base,
  &scc_info_MSG_MatchReady_CS_mobapk_2eproto.base,
  &scc_info_MSG_MobaLevelUp_SC_mobapk_2eproto.base,
  &scc_info_MSG_MyTeamInfo_SC_mobapk_2eproto.base,
  &scc_info_MSG_RefreshPowerRank_SC_mobapk_2eproto.base,
  &scc_info_MSG_RefreshRadarPos_CSC_mobapk_2eproto.base,
  &scc_info_MSG_RewardBagInfo_SC_mobapk_2eproto.base,
  &scc_info_MSG_SelectHopes_CS_mobapk_2eproto.base,
  &scc_info_MSG_ServerTimer_SC_mobapk_2eproto.base,
  &scc_info_MSG_StartPray_SC_mobapk_2eproto.base,
  &scc_info_MSG_UseSpecialCapsule_CS_mobapk_2eproto.base,
  &scc_info_MSG_UserGetAwardReq_CS_mobapk_2eproto.base,
  &scc_info_MSG_UserMatchReq_CS_mobapk_2eproto.base,
  &scc_info_PowerItem_mobapk_2eproto.base,
  &scc_info_RadarPos_mobapk_2eproto.base,
  &scc_info_TeamUser_mobapk_2eproto.base,
  &scc_info_UserTeamInfo_mobapk_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mobapk_2eproto_once;
static bool descriptor_table_mobapk_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mobapk_2eproto = {
  &descriptor_table_mobapk_2eproto_initialized, descriptor_table_protodef_mobapk_2eproto, "mobapk.proto", 1735,
  &descriptor_table_mobapk_2eproto_once, descriptor_table_mobapk_2eproto_sccs, descriptor_table_mobapk_2eproto_deps, 22, 0,
  schemas, file_default_instances, TableStruct_mobapk_2eproto::offsets,
  file_level_metadata_mobapk_2eproto, 22, file_level_enum_descriptors_mobapk_2eproto, file_level_service_descriptors_mobapk_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mobapk_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mobapk_2eproto)), true);
namespace mobapk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerTimer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mobapk_2eproto);
  return file_level_enum_descriptors_mobapk_2eproto[0];
}
bool ServerTimer_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MSG_UserMatchReq_CS::InitAsDefaultInstance() {
}
class MSG_UserMatchReq_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_UserMatchReq_CS>()._has_bits_);
  static void set_has_is_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_UserMatchReq_CS::MSG_UserMatchReq_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_UserMatchReq_CS)
}
MSG_UserMatchReq_CS::MSG_UserMatchReq_CS(const MSG_UserMatchReq_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_match_ = from.is_match_;
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_UserMatchReq_CS)
}

void MSG_UserMatchReq_CS::SharedCtor() {
  is_match_ = false;
}

MSG_UserMatchReq_CS::~MSG_UserMatchReq_CS() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_UserMatchReq_CS)
  SharedDtor();
}

void MSG_UserMatchReq_CS::SharedDtor() {
}

void MSG_UserMatchReq_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_UserMatchReq_CS& MSG_UserMatchReq_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_UserMatchReq_CS_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_UserMatchReq_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_UserMatchReq_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_match_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_UserMatchReq_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_match(&has_bits);
          is_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_UserMatchReq_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_UserMatchReq_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_UserMatchReq_CS)
  return target;
}

size_t MSG_UserMatchReq_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_UserMatchReq_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_match = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_UserMatchReq_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_UserMatchReq_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_UserMatchReq_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_UserMatchReq_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_UserMatchReq_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_UserMatchReq_CS)
    MergeFrom(*source);
  }
}

void MSG_UserMatchReq_CS::MergeFrom(const MSG_UserMatchReq_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_UserMatchReq_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_is_match()) {
    _internal_set_is_match(from._internal_is_match());
  }
}

void MSG_UserMatchReq_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_UserMatchReq_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_UserMatchReq_CS::CopyFrom(const MSG_UserMatchReq_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_UserMatchReq_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UserMatchReq_CS::IsInitialized() const {
  return true;
}

void MSG_UserMatchReq_CS::InternalSwap(MSG_UserMatchReq_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_match_, other->is_match_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UserMatchReq_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_MatchInfo_SC::InitAsDefaultInstance() {
}
class MSG_MatchInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_MatchInfo_SC>()._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ready_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_MatchInfo_SC::MSG_MatchInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_MatchInfo_SC)
}
MSG_MatchInfo_SC::MSG_MatchInfo_SC(const MSG_MatchInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_, &from.num_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&num_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_MatchInfo_SC)
}

void MSG_MatchInfo_SC::SharedCtor() {
  ::memset(&num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&num_)) + sizeof(id_));
}

MSG_MatchInfo_SC::~MSG_MatchInfo_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_MatchInfo_SC)
  SharedDtor();
}

void MSG_MatchInfo_SC::SharedDtor() {
}

void MSG_MatchInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_MatchInfo_SC& MSG_MatchInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_MatchInfo_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_MatchInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_MatchInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&num_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_MatchInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ready_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ready_num(&has_bits);
          ready_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_MatchInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_MatchInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num(), target);
  }

  // optional uint32 ready_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ready_num(), target);
  }

  // optional uint64 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_MatchInfo_SC)
  return target;
}

size_t MSG_MatchInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_MatchInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

    // optional uint32 ready_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ready_num());
    }

    // optional uint64 id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_MatchInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_MatchInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_MatchInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_MatchInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_MatchInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_MatchInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_MatchInfo_SC::MergeFrom(const MSG_MatchInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_MatchInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000002u) {
      ready_num_ = from.ready_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_MatchInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_MatchInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_MatchInfo_SC::CopyFrom(const MSG_MatchInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_MatchInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_MatchInfo_SC::IsInitialized() const {
  return true;
}

void MSG_MatchInfo_SC::InternalSwap(MSG_MatchInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_, other->num_);
  swap(ready_num_, other->ready_num_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_MatchInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_MatchReady_CS::InitAsDefaultInstance() {
}
class MSG_MatchReady_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_MatchReady_CS>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_MatchReady_CS::MSG_MatchReady_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_MatchReady_CS)
}
MSG_MatchReady_CS::MSG_MatchReady_CS(const MSG_MatchReady_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_MatchReady_CS)
}

void MSG_MatchReady_CS::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

MSG_MatchReady_CS::~MSG_MatchReady_CS() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_MatchReady_CS)
  SharedDtor();
}

void MSG_MatchReady_CS::SharedDtor() {
}

void MSG_MatchReady_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_MatchReady_CS& MSG_MatchReady_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_MatchReady_CS_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_MatchReady_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_MatchReady_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_MatchReady_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_MatchReady_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_MatchReady_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_MatchReady_CS)
  return target;
}

size_t MSG_MatchReady_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_MatchReady_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_MatchReady_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_MatchReady_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_MatchReady_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_MatchReady_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_MatchReady_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_MatchReady_CS)
    MergeFrom(*source);
  }
}

void MSG_MatchReady_CS::MergeFrom(const MSG_MatchReady_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_MatchReady_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void MSG_MatchReady_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_MatchReady_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_MatchReady_CS::CopyFrom(const MSG_MatchReady_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_MatchReady_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_MatchReady_CS::IsInitialized() const {
  return true;
}

void MSG_MatchReady_CS::InternalSwap(MSG_MatchReady_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_MatchReady_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_DismissGroup_SC::InitAsDefaultInstance() {
}
class MSG_DismissGroup_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_DismissGroup_SC>()._has_bits_);
};

MSG_DismissGroup_SC::MSG_DismissGroup_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_DismissGroup_SC)
}
MSG_DismissGroup_SC::MSG_DismissGroup_SC(const MSG_DismissGroup_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_DismissGroup_SC)
}

void MSG_DismissGroup_SC::SharedCtor() {
}

MSG_DismissGroup_SC::~MSG_DismissGroup_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_DismissGroup_SC)
  SharedDtor();
}

void MSG_DismissGroup_SC::SharedDtor() {
}

void MSG_DismissGroup_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_DismissGroup_SC& MSG_DismissGroup_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_DismissGroup_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_DismissGroup_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_DismissGroup_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_DismissGroup_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_DismissGroup_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_DismissGroup_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_DismissGroup_SC)
  return target;
}

size_t MSG_DismissGroup_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_DismissGroup_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_DismissGroup_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_DismissGroup_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_DismissGroup_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_DismissGroup_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_DismissGroup_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_DismissGroup_SC)
    MergeFrom(*source);
  }
}

void MSG_DismissGroup_SC::MergeFrom(const MSG_DismissGroup_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_DismissGroup_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_DismissGroup_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_DismissGroup_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DismissGroup_SC::CopyFrom(const MSG_DismissGroup_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_DismissGroup_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DismissGroup_SC::IsInitialized() const {
  return true;
}

void MSG_DismissGroup_SC::InternalSwap(MSG_DismissGroup_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_DismissGroup_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TeamUser::InitAsDefaultInstance() {
}
class TeamUser::_Internal {
 public:
  using HasBits = decltype(std::declval<TeamUser>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hairstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_haircolor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_headstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bodystyle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_coat(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_avatarid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

TeamUser::TeamUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.TeamUser)
}
TeamUser::TeamUser(const TeamUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(exp_));
  // @@protoc_insertion_point(copy_constructor:mobapk.TeamUser)
}

void TeamUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TeamUser_mobapk_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(exp_));
}

TeamUser::~TeamUser() {
  // @@protoc_insertion_point(destructor:mobapk.TeamUser)
  SharedDtor();
}

void TeamUser::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeamUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TeamUser& TeamUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TeamUser_mobapk_2eproto.base);
  return *internal_default_instance();
}


void TeamUser::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.TeamUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&haircolor_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(haircolor_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&headstyle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heroid_) -
        reinterpret_cast<char*>(&headstyle_)) + sizeof(heroid_));
  }
  exp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TeamUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mobapk.TeamUser.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool online = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_online(&has_bits);
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hairstyle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hairstyle(&has_bits);
          hairstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 haircolor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_haircolor(&has_bits);
          haircolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 headstyle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_headstyle(&has_bits);
          headstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bodystyle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bodystyle(&has_bits);
          bodystyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 antenna = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_antenna(&has_bits);
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 coat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_coat(&has_bits);
          coat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avatarid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_avatarid(&has_bits);
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 exp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeamUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.TeamUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mobapk.TeamUser.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_x(), target);
  }

  // optional uint32 y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_y(), target);
  }

  // optional bool online = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_online(), target);
  }

  // optional uint32 hairstyle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hairstyle(), target);
  }

  // optional uint32 haircolor = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_haircolor(), target);
  }

  // optional uint32 headstyle = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_headstyle(), target);
  }

  // optional uint32 bodystyle = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_bodystyle(), target);
  }

  // optional uint32 antenna = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_antenna(), target);
  }

  // optional uint32 coat = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_coat(), target);
  }

  // optional uint32 avatarid = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_avatarid(), target);
  }

  // optional uint32 maxhp = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_maxhp(), target);
  }

  // optional uint32 hp = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_hp(), target);
  }

  // optional uint32 heroid = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_heroid(), target);
  }

  // optional uint32 exp = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_exp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.TeamUser)
  return target;
}

size_t TeamUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.TeamUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uid());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

    // optional bool online = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint32 hairstyle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hairstyle());
    }

    // optional uint32 haircolor = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_haircolor());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 headstyle = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_headstyle());
    }

    // optional uint32 bodystyle = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bodystyle());
    }

    // optional uint32 antenna = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_antenna());
    }

    // optional uint32 coat = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coat());
    }

    // optional uint32 avatarid = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avatarid());
    }

    // optional uint32 maxhp = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhp());
    }

    // optional uint32 hp = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hp());
    }

    // optional uint32 heroid = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

  }
  // optional uint32 exp = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeamUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.TeamUser)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeamUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.TeamUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.TeamUser)
    MergeFrom(*source);
  }
}

void TeamUser::MergeFrom(const TeamUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.TeamUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000010u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000020u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000040u) {
      hairstyle_ = from.hairstyle_;
    }
    if (cached_has_bits & 0x00000080u) {
      haircolor_ = from.haircolor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      headstyle_ = from.headstyle_;
    }
    if (cached_has_bits & 0x00000200u) {
      bodystyle_ = from.bodystyle_;
    }
    if (cached_has_bits & 0x00000400u) {
      antenna_ = from.antenna_;
    }
    if (cached_has_bits & 0x00000800u) {
      coat_ = from.coat_;
    }
    if (cached_has_bits & 0x00001000u) {
      avatarid_ = from.avatarid_;
    }
    if (cached_has_bits & 0x00002000u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00004000u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00008000u) {
      heroid_ = from.heroid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_exp(from._internal_exp());
  }
}

void TeamUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.TeamUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamUser::CopyFrom(const TeamUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.TeamUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamUser::IsInitialized() const {
  return true;
}

void TeamUser::InternalSwap(TeamUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(level_, other->level_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(online_, other->online_);
  swap(hairstyle_, other->hairstyle_);
  swap(haircolor_, other->haircolor_);
  swap(headstyle_, other->headstyle_);
  swap(bodystyle_, other->bodystyle_);
  swap(antenna_, other->antenna_);
  swap(coat_, other->coat_);
  swap(avatarid_, other->avatarid_);
  swap(maxhp_, other->maxhp_);
  swap(hp_, other->hp_);
  swap(heroid_, other->heroid_);
  swap(exp_, other->exp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_MyTeamInfo_SC::InitAsDefaultInstance() {
}
class MSG_MyTeamInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_MyTeamInfo_SC>()._has_bits_);
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_MyTeamInfo_SC::MSG_MyTeamInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_MyTeamInfo_SC)
}
MSG_MyTeamInfo_SC::MSG_MyTeamInfo_SC(const MSG_MyTeamInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teamid()) {
    teamid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teamid_);
  }
  create_time_ = from.create_time_;
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_MyTeamInfo_SC)
}

void MSG_MyTeamInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_MyTeamInfo_SC_mobapk_2eproto.base);
  teamid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_time_ = 0u;
}

MSG_MyTeamInfo_SC::~MSG_MyTeamInfo_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_MyTeamInfo_SC)
  SharedDtor();
}

void MSG_MyTeamInfo_SC::SharedDtor() {
  teamid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_MyTeamInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_MyTeamInfo_SC& MSG_MyTeamInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_MyTeamInfo_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_MyTeamInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_MyTeamInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    teamid_.ClearNonDefaultToEmptyNoArena();
  }
  create_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_MyTeamInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mobapk.TeamUser users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 create_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_create_time(&has_bits);
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string teamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_teamid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mobapk.MSG_MyTeamInfo_SC.teamid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_MyTeamInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_MyTeamInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mobapk.TeamUser users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 create_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_create_time(), target);
  }

  // optional string teamid = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_teamid().data(), static_cast<int>(this->_internal_teamid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mobapk.MSG_MyTeamInfo_SC.teamid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_MyTeamInfo_SC)
  return target;
}

size_t MSG_MyTeamInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_MyTeamInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mobapk.TeamUser users = 1;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string teamid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_teamid());
    }

    // optional uint32 create_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_create_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_MyTeamInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_MyTeamInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_MyTeamInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_MyTeamInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_MyTeamInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_MyTeamInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_MyTeamInfo_SC::MergeFrom(const MSG_MyTeamInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_MyTeamInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      teamid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teamid_);
    }
    if (cached_has_bits & 0x00000002u) {
      create_time_ = from.create_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_MyTeamInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_MyTeamInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_MyTeamInfo_SC::CopyFrom(const MSG_MyTeamInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_MyTeamInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_MyTeamInfo_SC::IsInitialized() const {
  return true;
}

void MSG_MyTeamInfo_SC::InternalSwap(MSG_MyTeamInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  users_.InternalSwap(&other->users_);
  teamid_.Swap(&other->teamid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_MyTeamInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerItem::InitAsDefaultInstance() {
}
class PowerItem::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerItem>()._has_bits_);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_power(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PowerItem::PowerItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.PowerItem)
}
PowerItem::PowerItem(const PowerItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_color()) {
    color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  power_ = from.power_;
  // @@protoc_insertion_point(copy_constructor:mobapk.PowerItem)
}

void PowerItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerItem_mobapk_2eproto.base);
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  power_ = 0u;
}

PowerItem::~PowerItem() {
  // @@protoc_insertion_point(destructor:mobapk.PowerItem)
  SharedDtor();
}

void PowerItem::SharedDtor() {
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PowerItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerItem& PowerItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerItem_mobapk_2eproto.base);
  return *internal_default_instance();
}


void PowerItem::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.PowerItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    color_.ClearNonDefaultToEmptyNoArena();
  }
  power_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PowerItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mobapk.PowerItem.color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_power(&has_bits);
          power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.PowerItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mobapk.PowerItem.color");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_color(), target);
  }

  // optional uint32 power = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.PowerItem)
  return target;
}

size_t PowerItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.PowerItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string color = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color());
    }

    // optional uint32 power = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_power());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.PowerItem)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.PowerItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.PowerItem)
    MergeFrom(*source);
  }
}

void PowerItem::MergeFrom(const PowerItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.PowerItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (cached_has_bits & 0x00000002u) {
      power_ = from.power_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.PowerItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerItem::CopyFrom(const PowerItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.PowerItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerItem::IsInitialized() const {
  return true;
}

void PowerItem::InternalSwap(PowerItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  color_.Swap(&other->color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(power_, other->power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RefreshPowerRank_SC::InitAsDefaultInstance() {
}
class MSG_RefreshPowerRank_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RefreshPowerRank_SC>()._has_bits_);
};

MSG_RefreshPowerRank_SC::MSG_RefreshPowerRank_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_RefreshPowerRank_SC)
}
MSG_RefreshPowerRank_SC::MSG_RefreshPowerRank_SC(const MSG_RefreshPowerRank_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_RefreshPowerRank_SC)
}

void MSG_RefreshPowerRank_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RefreshPowerRank_SC_mobapk_2eproto.base);
}

MSG_RefreshPowerRank_SC::~MSG_RefreshPowerRank_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_RefreshPowerRank_SC)
  SharedDtor();
}

void MSG_RefreshPowerRank_SC::SharedDtor() {
}

void MSG_RefreshPowerRank_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RefreshPowerRank_SC& MSG_RefreshPowerRank_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RefreshPowerRank_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_RefreshPowerRank_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_RefreshPowerRank_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RefreshPowerRank_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mobapk.PowerItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RefreshPowerRank_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_RefreshPowerRank_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mobapk.PowerItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_RefreshPowerRank_SC)
  return target;
}

size_t MSG_RefreshPowerRank_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_RefreshPowerRank_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mobapk.PowerItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RefreshPowerRank_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_RefreshPowerRank_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RefreshPowerRank_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RefreshPowerRank_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_RefreshPowerRank_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_RefreshPowerRank_SC)
    MergeFrom(*source);
  }
}

void MSG_RefreshPowerRank_SC::MergeFrom(const MSG_RefreshPowerRank_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_RefreshPowerRank_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void MSG_RefreshPowerRank_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_RefreshPowerRank_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RefreshPowerRank_SC::CopyFrom(const MSG_RefreshPowerRank_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_RefreshPowerRank_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RefreshPowerRank_SC::IsInitialized() const {
  return true;
}

void MSG_RefreshPowerRank_SC::InternalSwap(MSG_RefreshPowerRank_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RefreshPowerRank_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarPos::InitAsDefaultInstance() {
}
class RadarPos::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarPos>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RadarPos::RadarPos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.RadarPos)
}
RadarPos::RadarPos(const RadarPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&x_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:mobapk.RadarPos)
}

void RadarPos::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&x_)) + sizeof(uid_));
}

RadarPos::~RadarPos() {
  // @@protoc_insertion_point(destructor:mobapk.RadarPos)
  SharedDtor();
}

void RadarPos::SharedDtor() {
}

void RadarPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarPos& RadarPos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarPos_mobapk_2eproto.base);
  return *internal_default_instance();
}


void RadarPos::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.RadarPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&x_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RadarPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarPos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.RadarPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // optional uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  // optional uint32 num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num(), target);
  }

  // optional uint32 uid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.RadarPos)
  return target;
}

size_t RadarPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.RadarPos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

    // optional uint32 num = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

    // optional uint32 uid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.RadarPos)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.RadarPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.RadarPos)
    MergeFrom(*source);
  }
}

void RadarPos::MergeFrom(const RadarPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.RadarPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000008u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.RadarPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarPos::CopyFrom(const RadarPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.RadarPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarPos::IsInitialized() const {
  return true;
}

void RadarPos::InternalSwap(RadarPos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(num_, other->num_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RefreshRadarPos_CSC::InitAsDefaultInstance() {
}
class MSG_RefreshRadarPos_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RefreshRadarPos_CSC>()._has_bits_);
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RefreshRadarPos_CSC::MSG_RefreshRadarPos_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_RefreshRadarPos_CSC)
}
MSG_RefreshRadarPos_CSC::MSG_RefreshRadarPos_CSC(const MSG_RefreshRadarPos_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pos_(from.pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_RefreshRadarPos_CSC)
}

void MSG_RefreshRadarPos_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RefreshRadarPos_CSC_mobapk_2eproto.base);
  radius_ = 0u;
}

MSG_RefreshRadarPos_CSC::~MSG_RefreshRadarPos_CSC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_RefreshRadarPos_CSC)
  SharedDtor();
}

void MSG_RefreshRadarPos_CSC::SharedDtor() {
}

void MSG_RefreshRadarPos_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RefreshRadarPos_CSC& MSG_RefreshRadarPos_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RefreshRadarPos_CSC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_RefreshRadarPos_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_RefreshRadarPos_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_.Clear();
  radius_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RefreshRadarPos_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mobapk.RadarPos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RefreshRadarPos_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_RefreshRadarPos_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mobapk.RadarPos pos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pos(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 radius = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_RefreshRadarPos_CSC)
  return target;
}

size_t MSG_RefreshRadarPos_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_RefreshRadarPos_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mobapk.RadarPos pos = 1;
  total_size += 1UL * this->_internal_pos_size();
  for (const auto& msg : this->pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 radius = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_radius());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RefreshRadarPos_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_RefreshRadarPos_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RefreshRadarPos_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RefreshRadarPos_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_RefreshRadarPos_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_RefreshRadarPos_CSC)
    MergeFrom(*source);
  }
}

void MSG_RefreshRadarPos_CSC::MergeFrom(const MSG_RefreshRadarPos_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_RefreshRadarPos_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pos_.MergeFrom(from.pos_);
  if (from._internal_has_radius()) {
    _internal_set_radius(from._internal_radius());
  }
}

void MSG_RefreshRadarPos_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_RefreshRadarPos_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RefreshRadarPos_CSC::CopyFrom(const MSG_RefreshRadarPos_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_RefreshRadarPos_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RefreshRadarPos_CSC::IsInitialized() const {
  return true;
}

void MSG_RefreshRadarPos_CSC::InternalSwap(MSG_RefreshRadarPos_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pos_.InternalSwap(&other->pos_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RefreshRadarPos_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_StartPray_SC::InitAsDefaultInstance() {
}
class MSG_StartPray_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_StartPray_SC>()._has_bits_);
};

MSG_StartPray_SC::MSG_StartPray_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_StartPray_SC)
}
MSG_StartPray_SC::MSG_StartPray_SC(const MSG_StartPray_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      hopes_(from.hopes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_StartPray_SC)
}

void MSG_StartPray_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_StartPray_SC_mobapk_2eproto.base);
}

MSG_StartPray_SC::~MSG_StartPray_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_StartPray_SC)
  SharedDtor();
}

void MSG_StartPray_SC::SharedDtor() {
}

void MSG_StartPray_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_StartPray_SC& MSG_StartPray_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_StartPray_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_StartPray_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_StartPray_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hopes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_StartPray_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string hopes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hopes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mobapk.MSG_StartPray_SC.hopes");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_StartPray_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_StartPray_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string hopes = 1;
  for (int i = 0, n = this->_internal_hopes_size(); i < n; i++) {
    const auto& s = this->_internal_hopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mobapk.MSG_StartPray_SC.hopes");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_StartPray_SC)
  return target;
}

size_t MSG_StartPray_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_StartPray_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string hopes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hopes_.size());
  for (int i = 0, n = hopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      hopes_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_StartPray_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_StartPray_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_StartPray_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_StartPray_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_StartPray_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_StartPray_SC)
    MergeFrom(*source);
  }
}

void MSG_StartPray_SC::MergeFrom(const MSG_StartPray_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_StartPray_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hopes_.MergeFrom(from.hopes_);
}

void MSG_StartPray_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_StartPray_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_StartPray_SC::CopyFrom(const MSG_StartPray_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_StartPray_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_StartPray_SC::IsInitialized() const {
  return true;
}

void MSG_StartPray_SC::InternalSwap(MSG_StartPray_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hopes_.InternalSwap(&other->hopes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_StartPray_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_SelectHopes_CS::InitAsDefaultInstance() {
}
class MSG_SelectHopes_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_SelectHopes_CS>()._has_bits_);
  static void set_has_idx_1st(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idx_2nd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_idx_3rd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_SelectHopes_CS::MSG_SelectHopes_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_SelectHopes_CS)
}
MSG_SelectHopes_CS::MSG_SelectHopes_CS(const MSG_SelectHopes_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idx_1st_, &from.idx_1st_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_3rd_) -
    reinterpret_cast<char*>(&idx_1st_)) + sizeof(idx_3rd_));
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_SelectHopes_CS)
}

void MSG_SelectHopes_CS::SharedCtor() {
  ::memset(&idx_1st_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_3rd_) -
      reinterpret_cast<char*>(&idx_1st_)) + sizeof(idx_3rd_));
}

MSG_SelectHopes_CS::~MSG_SelectHopes_CS() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_SelectHopes_CS)
  SharedDtor();
}

void MSG_SelectHopes_CS::SharedDtor() {
}

void MSG_SelectHopes_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_SelectHopes_CS& MSG_SelectHopes_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_SelectHopes_CS_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_SelectHopes_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_SelectHopes_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&idx_1st_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_3rd_) -
        reinterpret_cast<char*>(&idx_1st_)) + sizeof(idx_3rd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_SelectHopes_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 idx_1st = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_idx_1st(&has_bits);
          idx_1st_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 idx_2nd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_idx_2nd(&has_bits);
          idx_2nd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 idx_3rd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_idx_3rd(&has_bits);
          idx_3rd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_SelectHopes_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_SelectHopes_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 idx_1st = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idx_1st(), target);
  }

  // optional uint32 idx_2nd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_idx_2nd(), target);
  }

  // optional uint32 idx_3rd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_idx_3rd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_SelectHopes_CS)
  return target;
}

size_t MSG_SelectHopes_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_SelectHopes_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 idx_1st = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_idx_1st());
    }

    // optional uint32 idx_2nd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_idx_2nd());
    }

    // optional uint32 idx_3rd = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_idx_3rd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_SelectHopes_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_SelectHopes_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_SelectHopes_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_SelectHopes_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_SelectHopes_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_SelectHopes_CS)
    MergeFrom(*source);
  }
}

void MSG_SelectHopes_CS::MergeFrom(const MSG_SelectHopes_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_SelectHopes_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      idx_1st_ = from.idx_1st_;
    }
    if (cached_has_bits & 0x00000002u) {
      idx_2nd_ = from.idx_2nd_;
    }
    if (cached_has_bits & 0x00000004u) {
      idx_3rd_ = from.idx_3rd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_SelectHopes_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_SelectHopes_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_SelectHopes_CS::CopyFrom(const MSG_SelectHopes_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_SelectHopes_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SelectHopes_CS::IsInitialized() const {
  return true;
}

void MSG_SelectHopes_CS::InternalSwap(MSG_SelectHopes_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(idx_1st_, other->idx_1st_);
  swap(idx_2nd_, other->idx_2nd_);
  swap(idx_3rd_, other->idx_3rd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SelectHopes_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ServerTimer_SC::InitAsDefaultInstance() {
}
class MSG_ServerTimer_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ServerTimer_SC>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ServerTimer_SC::MSG_ServerTimer_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_ServerTimer_SC)
}
MSG_ServerTimer_SC::MSG_ServerTimer_SC(const MSG_ServerTimer_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_caption()) {
    caption_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.caption_);
  }
  ::memcpy(&resttime_, &from.resttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&resttime_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_ServerTimer_SC)
}

void MSG_ServerTimer_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ServerTimer_SC_mobapk_2eproto.base);
  caption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&style_) -
      reinterpret_cast<char*>(&resttime_)) + sizeof(style_));
  id_ = 1;
}

MSG_ServerTimer_SC::~MSG_ServerTimer_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_ServerTimer_SC)
  SharedDtor();
}

void MSG_ServerTimer_SC::SharedDtor() {
  caption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ServerTimer_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ServerTimer_SC& MSG_ServerTimer_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ServerTimer_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_ServerTimer_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_ServerTimer_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    caption_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&resttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_) -
        reinterpret_cast<char*>(&resttime_)) + sizeof(style_));
    id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ServerTimer_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mobapk.ServerTimer id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mobapk::ServerTimer_IsValid(val))) {
            _internal_set_id(static_cast<::mobapk::ServerTimer>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string caption = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_caption();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mobapk.MSG_ServerTimer_SC.caption");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 resttime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_resttime(&has_bits);
          resttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_style(&has_bits);
          style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ServerTimer_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_ServerTimer_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mobapk.ServerTimer id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional string caption = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mobapk.MSG_ServerTimer_SC.caption");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_caption(), target);
  }

  // optional uint32 resttime = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_resttime(), target);
  }

  // optional uint32 style = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_ServerTimer_SC)
  return target;
}

size_t MSG_ServerTimer_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_ServerTimer_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string caption = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caption());
    }

    // optional uint32 resttime = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_resttime());
    }

    // optional uint32 style = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_style());
    }

    // optional .mobapk.ServerTimer id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ServerTimer_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_ServerTimer_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ServerTimer_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ServerTimer_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_ServerTimer_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_ServerTimer_SC)
    MergeFrom(*source);
  }
}

void MSG_ServerTimer_SC::MergeFrom(const MSG_ServerTimer_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_ServerTimer_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      caption_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.caption_);
    }
    if (cached_has_bits & 0x00000002u) {
      resttime_ = from.resttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      style_ = from.style_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ServerTimer_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_ServerTimer_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ServerTimer_SC::CopyFrom(const MSG_ServerTimer_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_ServerTimer_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ServerTimer_SC::IsInitialized() const {
  return true;
}

void MSG_ServerTimer_SC::InternalSwap(MSG_ServerTimer_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  caption_.Swap(&other->caption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(resttime_, other->resttime_);
  swap(style_, other->style_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ServerTimer_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserTeamInfo::InitAsDefaultInstance() {
}
class UserTeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UserTeamInfo>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserTeamInfo::UserTeamInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.UserTeamInfo)
}
UserTeamInfo::UserTeamInfo(const UserTeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_color()) {
    team_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.team_color_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:mobapk.UserTeamInfo)
}

void UserTeamInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserTeamInfo_mobapk_2eproto.base);
  team_color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_ = PROTOBUF_ULONGLONG(0);
}

UserTeamInfo::~UserTeamInfo() {
  // @@protoc_insertion_point(destructor:mobapk.UserTeamInfo)
  SharedDtor();
}

void UserTeamInfo::SharedDtor() {
  team_color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserTeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserTeamInfo& UserTeamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserTeamInfo_mobapk_2eproto.base);
  return *internal_default_instance();
}


void UserTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.UserTeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_color_.ClearNonDefaultToEmptyNoArena();
  }
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UserTeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_team_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mobapk.UserTeamInfo.team_color");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserTeamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.UserTeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // optional string team_color = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_color().data(), static_cast<int>(this->_internal_team_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mobapk.UserTeamInfo.team_color");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.UserTeamInfo)
  return target;
}

size_t UserTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.UserTeamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string team_color = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_color());
    }

    // optional uint64 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserTeamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.UserTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserTeamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserTeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.UserTeamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.UserTeamInfo)
    MergeFrom(*source);
  }
}

void UserTeamInfo::MergeFrom(const UserTeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.UserTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.team_color_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UserTeamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.UserTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTeamInfo::CopyFrom(const UserTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.UserTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTeamInfo::IsInitialized() const {
  return true;
}

void UserTeamInfo::InternalSwap(UserTeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_color_.Swap(&other->team_color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserTeamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_BstUserTeamInfo_SC::InitAsDefaultInstance() {
}
class MSG_BstUserTeamInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_BstUserTeamInfo_SC>()._has_bits_);
};

MSG_BstUserTeamInfo_SC::MSG_BstUserTeamInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_BstUserTeamInfo_SC)
}
MSG_BstUserTeamInfo_SC::MSG_BstUserTeamInfo_SC(const MSG_BstUserTeamInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_BstUserTeamInfo_SC)
}

void MSG_BstUserTeamInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_BstUserTeamInfo_SC_mobapk_2eproto.base);
}

MSG_BstUserTeamInfo_SC::~MSG_BstUserTeamInfo_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_BstUserTeamInfo_SC)
  SharedDtor();
}

void MSG_BstUserTeamInfo_SC::SharedDtor() {
}

void MSG_BstUserTeamInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_BstUserTeamInfo_SC& MSG_BstUserTeamInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_BstUserTeamInfo_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_BstUserTeamInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_BstUserTeamInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_BstUserTeamInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mobapk.UserTeamInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_BstUserTeamInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_BstUserTeamInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mobapk.UserTeamInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_BstUserTeamInfo_SC)
  return target;
}

size_t MSG_BstUserTeamInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_BstUserTeamInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mobapk.UserTeamInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_BstUserTeamInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_BstUserTeamInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_BstUserTeamInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_BstUserTeamInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_BstUserTeamInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_BstUserTeamInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_BstUserTeamInfo_SC::MergeFrom(const MSG_BstUserTeamInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_BstUserTeamInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void MSG_BstUserTeamInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_BstUserTeamInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_BstUserTeamInfo_SC::CopyFrom(const MSG_BstUserTeamInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_BstUserTeamInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_BstUserTeamInfo_SC::IsInitialized() const {
  return true;
}

void MSG_BstUserTeamInfo_SC::InternalSwap(MSG_BstUserTeamInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_BstUserTeamInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_UseSpecialCapsule_CS::InitAsDefaultInstance() {
}
class MSG_UseSpecialCapsule_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_UseSpecialCapsule_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_UseSpecialCapsule_CS::MSG_UseSpecialCapsule_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_UseSpecialCapsule_CS)
}
MSG_UseSpecialCapsule_CS::MSG_UseSpecialCapsule_CS(const MSG_UseSpecialCapsule_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_UseSpecialCapsule_CS)
}

void MSG_UseSpecialCapsule_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_UseSpecialCapsule_CS_mobapk_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

MSG_UseSpecialCapsule_CS::~MSG_UseSpecialCapsule_CS() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_UseSpecialCapsule_CS)
  SharedDtor();
}

void MSG_UseSpecialCapsule_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_UseSpecialCapsule_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_UseSpecialCapsule_CS& MSG_UseSpecialCapsule_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_UseSpecialCapsule_CS_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_UseSpecialCapsule_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_UseSpecialCapsule_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_UseSpecialCapsule_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mobapk.MSG_UseSpecialCapsule_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_UseSpecialCapsule_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_UseSpecialCapsule_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mobapk.MSG_UseSpecialCapsule_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // optional uint32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_UseSpecialCapsule_CS)
  return target;
}

size_t MSG_UseSpecialCapsule_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_UseSpecialCapsule_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_UseSpecialCapsule_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_UseSpecialCapsule_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_UseSpecialCapsule_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_UseSpecialCapsule_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_UseSpecialCapsule_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_UseSpecialCapsule_CS)
    MergeFrom(*source);
  }
}

void MSG_UseSpecialCapsule_CS::MergeFrom(const MSG_UseSpecialCapsule_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_UseSpecialCapsule_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_UseSpecialCapsule_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_UseSpecialCapsule_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_UseSpecialCapsule_CS::CopyFrom(const MSG_UseSpecialCapsule_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_UseSpecialCapsule_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UseSpecialCapsule_CS::IsInitialized() const {
  return true;
}

void MSG_UseSpecialCapsule_CS::InternalSwap(MSG_UseSpecialCapsule_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UseSpecialCapsule_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_GameOver_SC::InitAsDefaultInstance() {
}
class MSG_GameOver_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_GameOver_SC>()._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_GameOver_SC::MSG_GameOver_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_GameOver_SC)
}
MSG_GameOver_SC::MSG_GameOver_SC(const MSG_GameOver_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_GameOver_SC)
}

void MSG_GameOver_SC::SharedCtor() {
  rank_ = 0u;
}

MSG_GameOver_SC::~MSG_GameOver_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_GameOver_SC)
  SharedDtor();
}

void MSG_GameOver_SC::SharedDtor() {
}

void MSG_GameOver_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_GameOver_SC& MSG_GameOver_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_GameOver_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_GameOver_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_GameOver_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rank_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_GameOver_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_GameOver_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_GameOver_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_GameOver_SC)
  return target;
}

size_t MSG_GameOver_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_GameOver_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 rank = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_GameOver_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_GameOver_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_GameOver_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_GameOver_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_GameOver_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_GameOver_SC)
    MergeFrom(*source);
  }
}

void MSG_GameOver_SC::MergeFrom(const MSG_GameOver_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_GameOver_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rank()) {
    _internal_set_rank(from._internal_rank());
  }
}

void MSG_GameOver_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_GameOver_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_GameOver_SC::CopyFrom(const MSG_GameOver_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_GameOver_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_GameOver_SC::IsInitialized() const {
  return true;
}

void MSG_GameOver_SC::InternalSwap(MSG_GameOver_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rank_, other->rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_GameOver_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_UserGetAwardReq_CS::InitAsDefaultInstance() {
}
class MSG_UserGetAwardReq_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_UserGetAwardReq_CS>()._has_bits_);
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_UserGetAwardReq_CS::MSG_UserGetAwardReq_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_UserGetAwardReq_CS)
}
MSG_UserGetAwardReq_CS::MSG_UserGetAwardReq_CS(const MSG_UserGetAwardReq_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  idx_ = from.idx_;
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_UserGetAwardReq_CS)
}

void MSG_UserGetAwardReq_CS::SharedCtor() {
  idx_ = 0u;
}

MSG_UserGetAwardReq_CS::~MSG_UserGetAwardReq_CS() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_UserGetAwardReq_CS)
  SharedDtor();
}

void MSG_UserGetAwardReq_CS::SharedDtor() {
}

void MSG_UserGetAwardReq_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_UserGetAwardReq_CS& MSG_UserGetAwardReq_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_UserGetAwardReq_CS_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_UserGetAwardReq_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_UserGetAwardReq_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  idx_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_UserGetAwardReq_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_UserGetAwardReq_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_UserGetAwardReq_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_UserGetAwardReq_CS)
  return target;
}

size_t MSG_UserGetAwardReq_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_UserGetAwardReq_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 idx = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_UserGetAwardReq_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_UserGetAwardReq_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_UserGetAwardReq_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_UserGetAwardReq_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_UserGetAwardReq_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_UserGetAwardReq_CS)
    MergeFrom(*source);
  }
}

void MSG_UserGetAwardReq_CS::MergeFrom(const MSG_UserGetAwardReq_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_UserGetAwardReq_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_idx()) {
    _internal_set_idx(from._internal_idx());
  }
}

void MSG_UserGetAwardReq_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_UserGetAwardReq_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_UserGetAwardReq_CS::CopyFrom(const MSG_UserGetAwardReq_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_UserGetAwardReq_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UserGetAwardReq_CS::IsInitialized() const {
  return true;
}

void MSG_UserGetAwardReq_CS::InternalSwap(MSG_UserGetAwardReq_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(idx_, other->idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UserGetAwardReq_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBagInfo::InitAsDefaultInstance() {
}
class GetBagInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBagInfo>()._has_bits_);
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_objectid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

GetBagInfo::GetBagInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.GetBagInfo)
}
GetBagInfo::GetBagInfo(const GetBagInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:mobapk.GetBagInfo)
}

void GetBagInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBagInfo_mobapk_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(count_));
}

GetBagInfo::~GetBagInfo() {
  // @@protoc_insertion_point(destructor:mobapk.GetBagInfo)
  SharedDtor();
}

void GetBagInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBagInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBagInfo& GetBagInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBagInfo_mobapk_2eproto.base);
  return *internal_default_instance();
}


void GetBagInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.GetBagInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBagInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mobapk.GetBagInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 objectid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_objectid(&has_bits);
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBagInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.GetBagInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 idx = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_idx(), target);
  }

  // optional uint64 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mobapk.GetBagInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional uint32 objectid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_objectid(), target);
  }

  // optional uint32 count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.GetBagInfo)
  return target;
}

size_t GetBagInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.GetBagInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uid());
    }

    // optional uint32 idx = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_idx());
    }

    // optional uint32 objectid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_objectid());
    }

    // optional uint32 count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBagInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.GetBagInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBagInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBagInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.GetBagInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.GetBagInfo)
    MergeFrom(*source);
  }
}

void GetBagInfo::MergeFrom(const GetBagInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.GetBagInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      objectid_ = from.objectid_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetBagInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.GetBagInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBagInfo::CopyFrom(const GetBagInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.GetBagInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBagInfo::IsInitialized() const {
  return true;
}

void GetBagInfo::InternalSwap(GetBagInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(idx_, other->idx_);
  swap(objectid_, other->objectid_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBagInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RewardBagInfo_SC::InitAsDefaultInstance() {
}
class MSG_RewardBagInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RewardBagInfo_SC>()._has_bits_);
};

MSG_RewardBagInfo_SC::MSG_RewardBagInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_RewardBagInfo_SC)
}
MSG_RewardBagInfo_SC::MSG_RewardBagInfo_SC(const MSG_RewardBagInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_RewardBagInfo_SC)
}

void MSG_RewardBagInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RewardBagInfo_SC_mobapk_2eproto.base);
}

MSG_RewardBagInfo_SC::~MSG_RewardBagInfo_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_RewardBagInfo_SC)
  SharedDtor();
}

void MSG_RewardBagInfo_SC::SharedDtor() {
}

void MSG_RewardBagInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RewardBagInfo_SC& MSG_RewardBagInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RewardBagInfo_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_RewardBagInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_RewardBagInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RewardBagInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mobapk.GetBagInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RewardBagInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_RewardBagInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mobapk.GetBagInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_RewardBagInfo_SC)
  return target;
}

size_t MSG_RewardBagInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_RewardBagInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mobapk.GetBagInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RewardBagInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_RewardBagInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RewardBagInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RewardBagInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_RewardBagInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_RewardBagInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_RewardBagInfo_SC::MergeFrom(const MSG_RewardBagInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_RewardBagInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void MSG_RewardBagInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_RewardBagInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RewardBagInfo_SC::CopyFrom(const MSG_RewardBagInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_RewardBagInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RewardBagInfo_SC::IsInitialized() const {
  return true;
}

void MSG_RewardBagInfo_SC::InternalSwap(MSG_RewardBagInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RewardBagInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_MobaLevelUp_SC::InitAsDefaultInstance() {
}
class MSG_MobaLevelUp_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_MobaLevelUp_SC>()._has_bits_);
  static void set_has_oldlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_MobaLevelUp_SC::MSG_MobaLevelUp_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_MobaLevelUp_SC)
}
MSG_MobaLevelUp_SC::MSG_MobaLevelUp_SC(const MSG_MobaLevelUp_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&oldlevel_, &from.oldlevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&oldlevel_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_MobaLevelUp_SC)
}

void MSG_MobaLevelUp_SC::SharedCtor() {
  ::memset(&oldlevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&oldlevel_)) + sizeof(type_));
}

MSG_MobaLevelUp_SC::~MSG_MobaLevelUp_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_MobaLevelUp_SC)
  SharedDtor();
}

void MSG_MobaLevelUp_SC::SharedDtor() {
}

void MSG_MobaLevelUp_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_MobaLevelUp_SC& MSG_MobaLevelUp_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_MobaLevelUp_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_MobaLevelUp_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_MobaLevelUp_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&oldlevel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&oldlevel_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_MobaLevelUp_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 oldlevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_oldlevel(&has_bits);
          oldlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 newlevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_newlevel(&has_bits);
          newlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_MobaLevelUp_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_MobaLevelUp_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 oldlevel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_oldlevel(), target);
  }

  // optional uint32 newlevel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_newlevel(), target);
  }

  // optional uint64 uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uid(), target);
  }

  // optional uint32 type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_MobaLevelUp_SC)
  return target;
}

size_t MSG_MobaLevelUp_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_MobaLevelUp_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 oldlevel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_oldlevel());
    }

    // optional uint32 newlevel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_newlevel());
    }

    // optional uint64 uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uid());
    }

    // optional uint32 type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_MobaLevelUp_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_MobaLevelUp_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_MobaLevelUp_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_MobaLevelUp_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_MobaLevelUp_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_MobaLevelUp_SC)
    MergeFrom(*source);
  }
}

void MSG_MobaLevelUp_SC::MergeFrom(const MSG_MobaLevelUp_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_MobaLevelUp_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      oldlevel_ = from.oldlevel_;
    }
    if (cached_has_bits & 0x00000002u) {
      newlevel_ = from.newlevel_;
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_MobaLevelUp_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_MobaLevelUp_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_MobaLevelUp_SC::CopyFrom(const MSG_MobaLevelUp_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_MobaLevelUp_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_MobaLevelUp_SC::IsInitialized() const {
  return true;
}

void MSG_MobaLevelUp_SC::InternalSwap(MSG_MobaLevelUp_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(oldlevel_, other->oldlevel_);
  swap(newlevel_, other->newlevel_);
  swap(uid_, other->uid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_MobaLevelUp_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ClientEffect_SC::InitAsDefaultInstance() {
}
class MSG_ClientEffect_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ClientEffect_SC>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effectid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_posx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_posy(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_ClientEffect_SC::MSG_ClientEffect_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mobapk.MSG_ClientEffect_SC)
}
MSG_ClientEffect_SC::MSG_ClientEffect_SC(const MSG_ClientEffect_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:mobapk.MSG_ClientEffect_SC)
}

void MSG_ClientEffect_SC::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(r_));
}

MSG_ClientEffect_SC::~MSG_ClientEffect_SC() {
  // @@protoc_insertion_point(destructor:mobapk.MSG_ClientEffect_SC)
  SharedDtor();
}

void MSG_ClientEffect_SC::SharedDtor() {
}

void MSG_ClientEffect_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ClientEffect_SC& MSG_ClientEffect_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ClientEffect_SC_mobapk_2eproto.base);
  return *internal_default_instance();
}


void MSG_ClientEffect_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:mobapk.MSG_ClientEffect_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&r_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(r_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ClientEffect_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 effectid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_effectid(&has_bits);
          effectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 posx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_posx(&has_bits);
          posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 posy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_posy(&has_bits);
          posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 r = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ClientEffect_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mobapk.MSG_ClientEffect_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // optional uint32 effectid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_effectid(), target);
  }

  // optional uint32 posx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posx(), target);
  }

  // optional uint32 posy = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_posy(), target);
  }

  // optional uint32 r = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_r(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mobapk.MSG_ClientEffect_SC)
  return target;
}

size_t MSG_ClientEffect_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mobapk.MSG_ClientEffect_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 uid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uid());
    }

    // optional uint32 effectid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_effectid());
    }

    // optional uint32 posx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posx());
    }

    // optional uint32 posy = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posy());
    }

    // optional uint32 r = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_r());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ClientEffect_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mobapk.MSG_ClientEffect_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ClientEffect_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ClientEffect_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mobapk.MSG_ClientEffect_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mobapk.MSG_ClientEffect_SC)
    MergeFrom(*source);
  }
}

void MSG_ClientEffect_SC::MergeFrom(const MSG_ClientEffect_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mobapk.MSG_ClientEffect_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000002u) {
      effectid_ = from.effectid_;
    }
    if (cached_has_bits & 0x00000004u) {
      posx_ = from.posx_;
    }
    if (cached_has_bits & 0x00000008u) {
      posy_ = from.posy_;
    }
    if (cached_has_bits & 0x00000010u) {
      r_ = from.r_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ClientEffect_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mobapk.MSG_ClientEffect_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ClientEffect_SC::CopyFrom(const MSG_ClientEffect_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mobapk.MSG_ClientEffect_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ClientEffect_SC::IsInitialized() const {
  return true;
}

void MSG_ClientEffect_SC::InternalSwap(MSG_ClientEffect_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uid_, other->uid_);
  swap(effectid_, other->effectid_);
  swap(posx_, other->posx_);
  swap(posy_, other->posy_);
  swap(r_, other->r_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ClientEffect_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mobapk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mobapk::MSG_UserMatchReq_CS* Arena::CreateMaybeMessage< ::mobapk::MSG_UserMatchReq_CS >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_UserMatchReq_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_MatchInfo_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_MatchInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_MatchInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_MatchReady_CS* Arena::CreateMaybeMessage< ::mobapk::MSG_MatchReady_CS >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_MatchReady_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_DismissGroup_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_DismissGroup_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_DismissGroup_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::TeamUser* Arena::CreateMaybeMessage< ::mobapk::TeamUser >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::TeamUser >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_MyTeamInfo_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_MyTeamInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_MyTeamInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::PowerItem* Arena::CreateMaybeMessage< ::mobapk::PowerItem >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::PowerItem >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_RefreshPowerRank_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_RefreshPowerRank_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_RefreshPowerRank_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::RadarPos* Arena::CreateMaybeMessage< ::mobapk::RadarPos >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::RadarPos >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_RefreshRadarPos_CSC* Arena::CreateMaybeMessage< ::mobapk::MSG_RefreshRadarPos_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_RefreshRadarPos_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_StartPray_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_StartPray_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_StartPray_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_SelectHopes_CS* Arena::CreateMaybeMessage< ::mobapk::MSG_SelectHopes_CS >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_SelectHopes_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_ServerTimer_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_ServerTimer_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_ServerTimer_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::UserTeamInfo* Arena::CreateMaybeMessage< ::mobapk::UserTeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::UserTeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_BstUserTeamInfo_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_BstUserTeamInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_BstUserTeamInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_UseSpecialCapsule_CS* Arena::CreateMaybeMessage< ::mobapk::MSG_UseSpecialCapsule_CS >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_UseSpecialCapsule_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_GameOver_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_GameOver_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_GameOver_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_UserGetAwardReq_CS* Arena::CreateMaybeMessage< ::mobapk::MSG_UserGetAwardReq_CS >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_UserGetAwardReq_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::GetBagInfo* Arena::CreateMaybeMessage< ::mobapk::GetBagInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::GetBagInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_RewardBagInfo_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_RewardBagInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_RewardBagInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_MobaLevelUp_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_MobaLevelUp_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_MobaLevelUp_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::mobapk::MSG_ClientEffect_SC* Arena::CreateMaybeMessage< ::mobapk::MSG_ClientEffect_SC >(Arena* arena) {
  return Arena::CreateInternal< ::mobapk::MSG_ClientEffect_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
