// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_team_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_team_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_team_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_team_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[72]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_team_2eproto;
namespace Team {
class ChooseTeamDropItem;
class ChooseTeamDropItemDefaultTypeInternal;
extern ChooseTeamDropItemDefaultTypeInternal _ChooseTeamDropItem_default_instance_;
class LeaderPosInfo;
class LeaderPosInfoDefaultTypeInternal;
extern LeaderPosInfoDefaultTypeInternal _LeaderPosInfo_default_instance_;
class MSG_AddMemember_SC;
class MSG_AddMemember_SCDefaultTypeInternal;
extern MSG_AddMemember_SCDefaultTypeInternal _MSG_AddMemember_SC_default_instance_;
class MSG_AnswerInviteTeam_CS;
class MSG_AnswerInviteTeam_CSDefaultTypeInternal;
extern MSG_AnswerInviteTeam_CSDefaultTypeInternal _MSG_AnswerInviteTeam_CS_default_instance_;
class MSG_AnswerJoinTeam_CS;
class MSG_AnswerJoinTeam_CSDefaultTypeInternal;
extern MSG_AnswerJoinTeam_CSDefaultTypeInternal _MSG_AnswerJoinTeam_CS_default_instance_;
class MSG_AnswerJoinTeam_SC;
class MSG_AnswerJoinTeam_SCDefaultTypeInternal;
extern MSG_AnswerJoinTeam_SCDefaultTypeInternal _MSG_AnswerJoinTeam_SC_default_instance_;
class MSG_CreateTeam_CS;
class MSG_CreateTeam_CSDefaultTypeInternal;
extern MSG_CreateTeam_CSDefaultTypeInternal _MSG_CreateTeam_CS_default_instance_;
class MSG_InviteIntoTeam_CS;
class MSG_InviteIntoTeam_CSDefaultTypeInternal;
extern MSG_InviteIntoTeam_CSDefaultTypeInternal _MSG_InviteIntoTeam_CS_default_instance_;
class MSG_InviteIntoTeam_SC;
class MSG_InviteIntoTeam_SCDefaultTypeInternal;
extern MSG_InviteIntoTeam_SCDefaultTypeInternal _MSG_InviteIntoTeam_SC_default_instance_;
class MSG_Join_Team_CS;
class MSG_Join_Team_CSDefaultTypeInternal;
extern MSG_Join_Team_CSDefaultTypeInternal _MSG_Join_Team_CS_default_instance_;
class MSG_Join_Team_SC;
class MSG_Join_Team_SCDefaultTypeInternal;
extern MSG_Join_Team_SCDefaultTypeInternal _MSG_Join_Team_SC_default_instance_;
class MSG_LeaderIgnoreNotice_CS;
class MSG_LeaderIgnoreNotice_CSDefaultTypeInternal;
extern MSG_LeaderIgnoreNotice_CSDefaultTypeInternal _MSG_LeaderIgnoreNotice_CS_default_instance_;
class MSG_NotifyTeamDismiss_SC;
class MSG_NotifyTeamDismiss_SCDefaultTypeInternal;
extern MSG_NotifyTeamDismiss_SCDefaultTypeInternal _MSG_NotifyTeamDismiss_SC_default_instance_;
class MSG_ReqApplyList_CS;
class MSG_ReqApplyList_CSDefaultTypeInternal;
extern MSG_ReqApplyList_CSDefaultTypeInternal _MSG_ReqApplyList_CS_default_instance_;
class MSG_ReqApplyList_SC;
class MSG_ReqApplyList_SCDefaultTypeInternal;
extern MSG_ReqApplyList_SCDefaultTypeInternal _MSG_ReqApplyList_SC_default_instance_;
class MSG_ReqChangeActivityTarget_CS;
class MSG_ReqChangeActivityTarget_CSDefaultTypeInternal;
extern MSG_ReqChangeActivityTarget_CSDefaultTypeInternal _MSG_ReqChangeActivityTarget_CS_default_instance_;
class MSG_ReqChangeLeader_CS;
class MSG_ReqChangeLeader_CSDefaultTypeInternal;
extern MSG_ReqChangeLeader_CSDefaultTypeInternal _MSG_ReqChangeLeader_CS_default_instance_;
class MSG_ReqChangeLeader_SC;
class MSG_ReqChangeLeader_SCDefaultTypeInternal;
extern MSG_ReqChangeLeader_SCDefaultTypeInternal _MSG_ReqChangeLeader_SC_default_instance_;
class MSG_ReqChangeMapToLeader_CS;
class MSG_ReqChangeMapToLeader_CSDefaultTypeInternal;
extern MSG_ReqChangeMapToLeader_CSDefaultTypeInternal _MSG_ReqChangeMapToLeader_CS_default_instance_;
class MSG_ReqChooseTeamDrop_CS;
class MSG_ReqChooseTeamDrop_CSDefaultTypeInternal;
extern MSG_ReqChooseTeamDrop_CSDefaultTypeInternal _MSG_ReqChooseTeamDrop_CS_default_instance_;
class MSG_ReqDelMemember_CS;
class MSG_ReqDelMemember_CSDefaultTypeInternal;
extern MSG_ReqDelMemember_CSDefaultTypeInternal _MSG_ReqDelMemember_CS_default_instance_;
class MSG_ReqDelMemember_SC;
class MSG_ReqDelMemember_SCDefaultTypeInternal;
extern MSG_ReqDelMemember_SCDefaultTypeInternal _MSG_ReqDelMemember_SC_default_instance_;
class MSG_ReqJoinTeamNotifyLeader_SC;
class MSG_ReqJoinTeamNotifyLeader_SCDefaultTypeInternal;
extern MSG_ReqJoinTeamNotifyLeader_SCDefaultTypeInternal _MSG_ReqJoinTeamNotifyLeader_SC_default_instance_;
class MSG_ReqLanchVoteOut_CS;
class MSG_ReqLanchVoteOut_CSDefaultTypeInternal;
extern MSG_ReqLanchVoteOut_CSDefaultTypeInternal _MSG_ReqLanchVoteOut_CS_default_instance_;
class MSG_ReqLanchVoteOut_SC;
class MSG_ReqLanchVoteOut_SCDefaultTypeInternal;
extern MSG_ReqLanchVoteOut_SCDefaultTypeInternal _MSG_ReqLanchVoteOut_SC_default_instance_;
class MSG_ReqLeaderAttackTarget_CS;
class MSG_ReqLeaderAttackTarget_CSDefaultTypeInternal;
extern MSG_ReqLeaderAttackTarget_CSDefaultTypeInternal _MSG_ReqLeaderAttackTarget_CS_default_instance_;
class MSG_ReqLeaderMapPos_CS;
class MSG_ReqLeaderMapPos_CSDefaultTypeInternal;
extern MSG_ReqLeaderMapPos_CSDefaultTypeInternal _MSG_ReqLeaderMapPos_CS_default_instance_;
class MSG_ReqMatch_CS;
class MSG_ReqMatch_CSDefaultTypeInternal;
extern MSG_ReqMatch_CSDefaultTypeInternal _MSG_ReqMatch_CS_default_instance_;
class MSG_ReqMemberBackTeam_CS;
class MSG_ReqMemberBackTeam_CSDefaultTypeInternal;
extern MSG_ReqMemberBackTeam_CSDefaultTypeInternal _MSG_ReqMemberBackTeam_CS_default_instance_;
class MSG_ReqNearByUnteamedPlayer_CS;
class MSG_ReqNearByUnteamedPlayer_CSDefaultTypeInternal;
extern MSG_ReqNearByUnteamedPlayer_CSDefaultTypeInternal _MSG_ReqNearByUnteamedPlayer_CS_default_instance_;
class MSG_ReqNearByUnteamedPlayer_SC;
class MSG_ReqNearByUnteamedPlayer_SCDefaultTypeInternal;
extern MSG_ReqNearByUnteamedPlayer_SCDefaultTypeInternal _MSG_ReqNearByUnteamedPlayer_SC_default_instance_;
class MSG_ReqSearchTeamByPage_CS;
class MSG_ReqSearchTeamByPage_CSDefaultTypeInternal;
extern MSG_ReqSearchTeamByPage_CSDefaultTypeInternal _MSG_ReqSearchTeamByPage_CS_default_instance_;
class MSG_ReqSearchTeam_CS;
class MSG_ReqSearchTeam_CSDefaultTypeInternal;
extern MSG_ReqSearchTeam_CSDefaultTypeInternal _MSG_ReqSearchTeam_CS_default_instance_;
class MSG_ReqTeamMemberPos_CS;
class MSG_ReqTeamMemberPos_CSDefaultTypeInternal;
extern MSG_ReqTeamMemberPos_CSDefaultTypeInternal _MSG_ReqTeamMemberPos_CS_default_instance_;
class MSG_ReqUnmatch_CS;
class MSG_ReqUnmatch_CSDefaultTypeInternal;
extern MSG_ReqUnmatch_CSDefaultTypeInternal _MSG_ReqUnmatch_CS_default_instance_;
class MSG_ReqVote_CS;
class MSG_ReqVote_CSDefaultTypeInternal;
extern MSG_ReqVote_CSDefaultTypeInternal _MSG_ReqVote_CS_default_instance_;
class MSG_Req_DismissTeam_CS;
class MSG_Req_DismissTeam_CSDefaultTypeInternal;
extern MSG_Req_DismissTeam_CSDefaultTypeInternal _MSG_Req_DismissTeam_CS_default_instance_;
class MSG_Req_SetMemberPrivilege_CS;
class MSG_Req_SetMemberPrivilege_CSDefaultTypeInternal;
extern MSG_Req_SetMemberPrivilege_CSDefaultTypeInternal _MSG_Req_SetMemberPrivilege_CS_default_instance_;
class MSG_Req_checkUserTeamInfo_CS;
class MSG_Req_checkUserTeamInfo_CSDefaultTypeInternal;
extern MSG_Req_checkUserTeamInfo_CSDefaultTypeInternal _MSG_Req_checkUserTeamInfo_CS_default_instance_;
class MSG_RetChangeActivityTarget_SC;
class MSG_RetChangeActivityTarget_SCDefaultTypeInternal;
extern MSG_RetChangeActivityTarget_SCDefaultTypeInternal _MSG_RetChangeActivityTarget_SC_default_instance_;
class MSG_RetChangeMapToLeader_SC;
class MSG_RetChangeMapToLeader_SCDefaultTypeInternal;
extern MSG_RetChangeMapToLeader_SCDefaultTypeInternal _MSG_RetChangeMapToLeader_SC_default_instance_;
class MSG_RetChooseTeamDrop_SC;
class MSG_RetChooseTeamDrop_SCDefaultTypeInternal;
extern MSG_RetChooseTeamDrop_SCDefaultTypeInternal _MSG_RetChooseTeamDrop_SC_default_instance_;
class MSG_RetLeaderAttackTarget_SC;
class MSG_RetLeaderAttackTarget_SCDefaultTypeInternal;
extern MSG_RetLeaderAttackTarget_SCDefaultTypeInternal _MSG_RetLeaderAttackTarget_SC_default_instance_;
class MSG_RetLeaderMapPos_SC;
class MSG_RetLeaderMapPos_SCDefaultTypeInternal;
extern MSG_RetLeaderMapPos_SCDefaultTypeInternal _MSG_RetLeaderMapPos_SC_default_instance_;
class MSG_RetMatch_SC;
class MSG_RetMatch_SCDefaultTypeInternal;
extern MSG_RetMatch_SCDefaultTypeInternal _MSG_RetMatch_SC_default_instance_;
class MSG_RetMemberBackTeam_SC;
class MSG_RetMemberBackTeam_SCDefaultTypeInternal;
extern MSG_RetMemberBackTeam_SCDefaultTypeInternal _MSG_RetMemberBackTeam_SC_default_instance_;
class MSG_RetNearByUnteamedInvite_SC;
class MSG_RetNearByUnteamedInvite_SCDefaultTypeInternal;
extern MSG_RetNearByUnteamedInvite_SCDefaultTypeInternal _MSG_RetNearByUnteamedInvite_SC_default_instance_;
class MSG_RetNewApply_SC;
class MSG_RetNewApply_SCDefaultTypeInternal;
extern MSG_RetNewApply_SCDefaultTypeInternal _MSG_RetNewApply_SC_default_instance_;
class MSG_RetNotifyMatchSuccess_SC;
class MSG_RetNotifyMatchSuccess_SCDefaultTypeInternal;
extern MSG_RetNotifyMatchSuccess_SCDefaultTypeInternal _MSG_RetNotifyMatchSuccess_SC_default_instance_;
class MSG_RetSearchTeam_SC;
class MSG_RetSearchTeam_SCDefaultTypeInternal;
extern MSG_RetSearchTeam_SCDefaultTypeInternal _MSG_RetSearchTeam_SC_default_instance_;
class MSG_RetTeamMemberPos_SC;
class MSG_RetTeamMemberPos_SCDefaultTypeInternal;
extern MSG_RetTeamMemberPos_SCDefaultTypeInternal _MSG_RetTeamMemberPos_SC_default_instance_;
class MSG_RetTeamPublicDrop_SC;
class MSG_RetTeamPublicDrop_SCDefaultTypeInternal;
extern MSG_RetTeamPublicDrop_SCDefaultTypeInternal _MSG_RetTeamPublicDrop_SC_default_instance_;
class MSG_RetUnmatch_SC;
class MSG_RetUnmatch_SCDefaultTypeInternal;
extern MSG_RetUnmatch_SCDefaultTypeInternal _MSG_RetUnmatch_SC_default_instance_;
class MSG_Ret_checkUserTeamInfo_SC;
class MSG_Ret_checkUserTeamInfo_SCDefaultTypeInternal;
extern MSG_Ret_checkUserTeamInfo_SCDefaultTypeInternal _MSG_Ret_checkUserTeamInfo_SC_default_instance_;
class MSG_TeamMemeberList_CS;
class MSG_TeamMemeberList_CSDefaultTypeInternal;
extern MSG_TeamMemeberList_CSDefaultTypeInternal _MSG_TeamMemeberList_CS_default_instance_;
class MSG_TeamMemeberList_SC;
class MSG_TeamMemeberList_SCDefaultTypeInternal;
extern MSG_TeamMemeberList_SCDefaultTypeInternal _MSG_TeamMemeberList_SC_default_instance_;
class MSG_Team_List_CS;
class MSG_Team_List_CSDefaultTypeInternal;
extern MSG_Team_List_CSDefaultTypeInternal _MSG_Team_List_CS_default_instance_;
class MSG_Team_List_SC;
class MSG_Team_List_SCDefaultTypeInternal;
extern MSG_Team_List_SCDefaultTypeInternal _MSG_Team_List_SC_default_instance_;
class MSG_notifyMemberLeaderIntoPublic_SC;
class MSG_notifyMemberLeaderIntoPublic_SCDefaultTypeInternal;
extern MSG_notifyMemberLeaderIntoPublic_SCDefaultTypeInternal _MSG_notifyMemberLeaderIntoPublic_SC_default_instance_;
class MSG_notifyMemberOfflineHosting_SC;
class MSG_notifyMemberOfflineHosting_SCDefaultTypeInternal;
extern MSG_notifyMemberOfflineHosting_SCDefaultTypeInternal _MSG_notifyMemberOfflineHosting_SC_default_instance_;
class MSG_updateMemStateToTeam_SC;
class MSG_updateMemStateToTeam_SCDefaultTypeInternal;
extern MSG_updateMemStateToTeam_SCDefaultTypeInternal _MSG_updateMemStateToTeam_SC_default_instance_;
class MSG_updateTeamMemberAvatar_SC;
class MSG_updateTeamMemberAvatar_SCDefaultTypeInternal;
extern MSG_updateTeamMemberAvatar_SCDefaultTypeInternal _MSG_updateTeamMemberAvatar_SC_default_instance_;
class MSG_updateTeamMemberFight_SC;
class MSG_updateTeamMemberFight_SCDefaultTypeInternal;
extern MSG_updateTeamMemberFight_SCDefaultTypeInternal _MSG_updateTeamMemberFight_SC_default_instance_;
class MSG_updateTeamMemberPrivilege_SC;
class MSG_updateTeamMemberPrivilege_SCDefaultTypeInternal;
extern MSG_updateTeamMemberPrivilege_SCDefaultTypeInternal _MSG_updateTeamMemberPrivilege_SC_default_instance_;
class MSG_updateTeamMemeberHero_SC;
class MSG_updateTeamMemeberHero_SCDefaultTypeInternal;
extern MSG_updateTeamMemeberHero_SCDefaultTypeInternal _MSG_updateTeamMemeberHero_SC_default_instance_;
class MSG_updateTeamMememberCareer_SC;
class MSG_updateTeamMememberCareer_SCDefaultTypeInternal;
extern MSG_updateTeamMememberCareer_SCDefaultTypeInternal _MSG_updateTeamMememberCareer_SC_default_instance_;
class MSG_updateTeamMememberHp_SC;
class MSG_updateTeamMememberHp_SCDefaultTypeInternal;
extern MSG_updateTeamMememberHp_SCDefaultTypeInternal _MSG_updateTeamMememberHp_SC_default_instance_;
class MSG_updateTeamMememberLevel_SC;
class MSG_updateTeamMememberLevel_SCDefaultTypeInternal;
extern MSG_updateTeamMememberLevel_SCDefaultTypeInternal _MSG_updateTeamMememberLevel_SC_default_instance_;
class MemberPos;
class MemberPosDefaultTypeInternal;
extern MemberPosDefaultTypeInternal _MemberPos_default_instance_;
class Memember;
class MememberDefaultTypeInternal;
extern MememberDefaultTypeInternal _Memember_default_instance_;
class OneTeam;
class OneTeamDefaultTypeInternal;
extern OneTeamDefaultTypeInternal _OneTeam_default_instance_;
class teamDropItem;
class teamDropItemDefaultTypeInternal;
extern teamDropItemDefaultTypeInternal _teamDropItem_default_instance_;
}  // namespace Team
PROTOBUF_NAMESPACE_OPEN
template<> ::Team::ChooseTeamDropItem* Arena::CreateMaybeMessage<::Team::ChooseTeamDropItem>(Arena*);
template<> ::Team::LeaderPosInfo* Arena::CreateMaybeMessage<::Team::LeaderPosInfo>(Arena*);
template<> ::Team::MSG_AddMemember_SC* Arena::CreateMaybeMessage<::Team::MSG_AddMemember_SC>(Arena*);
template<> ::Team::MSG_AnswerInviteTeam_CS* Arena::CreateMaybeMessage<::Team::MSG_AnswerInviteTeam_CS>(Arena*);
template<> ::Team::MSG_AnswerJoinTeam_CS* Arena::CreateMaybeMessage<::Team::MSG_AnswerJoinTeam_CS>(Arena*);
template<> ::Team::MSG_AnswerJoinTeam_SC* Arena::CreateMaybeMessage<::Team::MSG_AnswerJoinTeam_SC>(Arena*);
template<> ::Team::MSG_CreateTeam_CS* Arena::CreateMaybeMessage<::Team::MSG_CreateTeam_CS>(Arena*);
template<> ::Team::MSG_InviteIntoTeam_CS* Arena::CreateMaybeMessage<::Team::MSG_InviteIntoTeam_CS>(Arena*);
template<> ::Team::MSG_InviteIntoTeam_SC* Arena::CreateMaybeMessage<::Team::MSG_InviteIntoTeam_SC>(Arena*);
template<> ::Team::MSG_Join_Team_CS* Arena::CreateMaybeMessage<::Team::MSG_Join_Team_CS>(Arena*);
template<> ::Team::MSG_Join_Team_SC* Arena::CreateMaybeMessage<::Team::MSG_Join_Team_SC>(Arena*);
template<> ::Team::MSG_LeaderIgnoreNotice_CS* Arena::CreateMaybeMessage<::Team::MSG_LeaderIgnoreNotice_CS>(Arena*);
template<> ::Team::MSG_NotifyTeamDismiss_SC* Arena::CreateMaybeMessage<::Team::MSG_NotifyTeamDismiss_SC>(Arena*);
template<> ::Team::MSG_ReqApplyList_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqApplyList_CS>(Arena*);
template<> ::Team::MSG_ReqApplyList_SC* Arena::CreateMaybeMessage<::Team::MSG_ReqApplyList_SC>(Arena*);
template<> ::Team::MSG_ReqChangeActivityTarget_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqChangeActivityTarget_CS>(Arena*);
template<> ::Team::MSG_ReqChangeLeader_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqChangeLeader_CS>(Arena*);
template<> ::Team::MSG_ReqChangeLeader_SC* Arena::CreateMaybeMessage<::Team::MSG_ReqChangeLeader_SC>(Arena*);
template<> ::Team::MSG_ReqChangeMapToLeader_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqChangeMapToLeader_CS>(Arena*);
template<> ::Team::MSG_ReqChooseTeamDrop_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqChooseTeamDrop_CS>(Arena*);
template<> ::Team::MSG_ReqDelMemember_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqDelMemember_CS>(Arena*);
template<> ::Team::MSG_ReqDelMemember_SC* Arena::CreateMaybeMessage<::Team::MSG_ReqDelMemember_SC>(Arena*);
template<> ::Team::MSG_ReqJoinTeamNotifyLeader_SC* Arena::CreateMaybeMessage<::Team::MSG_ReqJoinTeamNotifyLeader_SC>(Arena*);
template<> ::Team::MSG_ReqLanchVoteOut_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqLanchVoteOut_CS>(Arena*);
template<> ::Team::MSG_ReqLanchVoteOut_SC* Arena::CreateMaybeMessage<::Team::MSG_ReqLanchVoteOut_SC>(Arena*);
template<> ::Team::MSG_ReqLeaderAttackTarget_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqLeaderAttackTarget_CS>(Arena*);
template<> ::Team::MSG_ReqLeaderMapPos_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqLeaderMapPos_CS>(Arena*);
template<> ::Team::MSG_ReqMatch_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqMatch_CS>(Arena*);
template<> ::Team::MSG_ReqMemberBackTeam_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqMemberBackTeam_CS>(Arena*);
template<> ::Team::MSG_ReqNearByUnteamedPlayer_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqNearByUnteamedPlayer_CS>(Arena*);
template<> ::Team::MSG_ReqNearByUnteamedPlayer_SC* Arena::CreateMaybeMessage<::Team::MSG_ReqNearByUnteamedPlayer_SC>(Arena*);
template<> ::Team::MSG_ReqSearchTeamByPage_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqSearchTeamByPage_CS>(Arena*);
template<> ::Team::MSG_ReqSearchTeam_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqSearchTeam_CS>(Arena*);
template<> ::Team::MSG_ReqTeamMemberPos_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqTeamMemberPos_CS>(Arena*);
template<> ::Team::MSG_ReqUnmatch_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqUnmatch_CS>(Arena*);
template<> ::Team::MSG_ReqVote_CS* Arena::CreateMaybeMessage<::Team::MSG_ReqVote_CS>(Arena*);
template<> ::Team::MSG_Req_DismissTeam_CS* Arena::CreateMaybeMessage<::Team::MSG_Req_DismissTeam_CS>(Arena*);
template<> ::Team::MSG_Req_SetMemberPrivilege_CS* Arena::CreateMaybeMessage<::Team::MSG_Req_SetMemberPrivilege_CS>(Arena*);
template<> ::Team::MSG_Req_checkUserTeamInfo_CS* Arena::CreateMaybeMessage<::Team::MSG_Req_checkUserTeamInfo_CS>(Arena*);
template<> ::Team::MSG_RetChangeActivityTarget_SC* Arena::CreateMaybeMessage<::Team::MSG_RetChangeActivityTarget_SC>(Arena*);
template<> ::Team::MSG_RetChangeMapToLeader_SC* Arena::CreateMaybeMessage<::Team::MSG_RetChangeMapToLeader_SC>(Arena*);
template<> ::Team::MSG_RetChooseTeamDrop_SC* Arena::CreateMaybeMessage<::Team::MSG_RetChooseTeamDrop_SC>(Arena*);
template<> ::Team::MSG_RetLeaderAttackTarget_SC* Arena::CreateMaybeMessage<::Team::MSG_RetLeaderAttackTarget_SC>(Arena*);
template<> ::Team::MSG_RetLeaderMapPos_SC* Arena::CreateMaybeMessage<::Team::MSG_RetLeaderMapPos_SC>(Arena*);
template<> ::Team::MSG_RetMatch_SC* Arena::CreateMaybeMessage<::Team::MSG_RetMatch_SC>(Arena*);
template<> ::Team::MSG_RetMemberBackTeam_SC* Arena::CreateMaybeMessage<::Team::MSG_RetMemberBackTeam_SC>(Arena*);
template<> ::Team::MSG_RetNearByUnteamedInvite_SC* Arena::CreateMaybeMessage<::Team::MSG_RetNearByUnteamedInvite_SC>(Arena*);
template<> ::Team::MSG_RetNewApply_SC* Arena::CreateMaybeMessage<::Team::MSG_RetNewApply_SC>(Arena*);
template<> ::Team::MSG_RetNotifyMatchSuccess_SC* Arena::CreateMaybeMessage<::Team::MSG_RetNotifyMatchSuccess_SC>(Arena*);
template<> ::Team::MSG_RetSearchTeam_SC* Arena::CreateMaybeMessage<::Team::MSG_RetSearchTeam_SC>(Arena*);
template<> ::Team::MSG_RetTeamMemberPos_SC* Arena::CreateMaybeMessage<::Team::MSG_RetTeamMemberPos_SC>(Arena*);
template<> ::Team::MSG_RetTeamPublicDrop_SC* Arena::CreateMaybeMessage<::Team::MSG_RetTeamPublicDrop_SC>(Arena*);
template<> ::Team::MSG_RetUnmatch_SC* Arena::CreateMaybeMessage<::Team::MSG_RetUnmatch_SC>(Arena*);
template<> ::Team::MSG_Ret_checkUserTeamInfo_SC* Arena::CreateMaybeMessage<::Team::MSG_Ret_checkUserTeamInfo_SC>(Arena*);
template<> ::Team::MSG_TeamMemeberList_CS* Arena::CreateMaybeMessage<::Team::MSG_TeamMemeberList_CS>(Arena*);
template<> ::Team::MSG_TeamMemeberList_SC* Arena::CreateMaybeMessage<::Team::MSG_TeamMemeberList_SC>(Arena*);
template<> ::Team::MSG_Team_List_CS* Arena::CreateMaybeMessage<::Team::MSG_Team_List_CS>(Arena*);
template<> ::Team::MSG_Team_List_SC* Arena::CreateMaybeMessage<::Team::MSG_Team_List_SC>(Arena*);
template<> ::Team::MSG_notifyMemberLeaderIntoPublic_SC* Arena::CreateMaybeMessage<::Team::MSG_notifyMemberLeaderIntoPublic_SC>(Arena*);
template<> ::Team::MSG_notifyMemberOfflineHosting_SC* Arena::CreateMaybeMessage<::Team::MSG_notifyMemberOfflineHosting_SC>(Arena*);
template<> ::Team::MSG_updateMemStateToTeam_SC* Arena::CreateMaybeMessage<::Team::MSG_updateMemStateToTeam_SC>(Arena*);
template<> ::Team::MSG_updateTeamMemberAvatar_SC* Arena::CreateMaybeMessage<::Team::MSG_updateTeamMemberAvatar_SC>(Arena*);
template<> ::Team::MSG_updateTeamMemberFight_SC* Arena::CreateMaybeMessage<::Team::MSG_updateTeamMemberFight_SC>(Arena*);
template<> ::Team::MSG_updateTeamMemberPrivilege_SC* Arena::CreateMaybeMessage<::Team::MSG_updateTeamMemberPrivilege_SC>(Arena*);
template<> ::Team::MSG_updateTeamMemeberHero_SC* Arena::CreateMaybeMessage<::Team::MSG_updateTeamMemeberHero_SC>(Arena*);
template<> ::Team::MSG_updateTeamMememberCareer_SC* Arena::CreateMaybeMessage<::Team::MSG_updateTeamMememberCareer_SC>(Arena*);
template<> ::Team::MSG_updateTeamMememberHp_SC* Arena::CreateMaybeMessage<::Team::MSG_updateTeamMememberHp_SC>(Arena*);
template<> ::Team::MSG_updateTeamMememberLevel_SC* Arena::CreateMaybeMessage<::Team::MSG_updateTeamMememberLevel_SC>(Arena*);
template<> ::Team::MemberPos* Arena::CreateMaybeMessage<::Team::MemberPos>(Arena*);
template<> ::Team::Memember* Arena::CreateMaybeMessage<::Team::Memember>(Arena*);
template<> ::Team::OneTeam* Arena::CreateMaybeMessage<::Team::OneTeam>(Arena*);
template<> ::Team::teamDropItem* Arena::CreateMaybeMessage<::Team::teamDropItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Team {

enum EntryIDType : int {
  id = 1,
  type = 2
};
bool EntryIDType_IsValid(int value);
constexpr EntryIDType EntryIDType_MIN = id;
constexpr EntryIDType EntryIDType_MAX = type;
constexpr int EntryIDType_ARRAYSIZE = EntryIDType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntryIDType_descriptor();
template<typename T>
inline const std::string& EntryIDType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntryIDType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntryIDType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntryIDType_descriptor(), enum_t_value);
}
inline bool EntryIDType_Parse(
    const std::string& name, EntryIDType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntryIDType>(
    EntryIDType_descriptor(), name, value);
}
enum Position : int {
  x = 1,
  y = 2
};
bool Position_IsValid(int value);
constexpr Position Position_MIN = x;
constexpr Position Position_MAX = y;
constexpr int Position_ARRAYSIZE = Position_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Position_descriptor();
template<typename T>
inline const std::string& Position_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Position>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Position_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Position_descriptor(), enum_t_value);
}
inline bool Position_Parse(
    const std::string& name, Position* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Position>(
    Position_descriptor(), name, value);
}
enum CapacityType : int {
  Capacity_Small = 1,
  Capacity_Big = 2
};
bool CapacityType_IsValid(int value);
constexpr CapacityType CapacityType_MIN = Capacity_Small;
constexpr CapacityType CapacityType_MAX = Capacity_Big;
constexpr int CapacityType_ARRAYSIZE = CapacityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CapacityType_descriptor();
template<typename T>
inline const std::string& CapacityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CapacityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CapacityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CapacityType_descriptor(), enum_t_value);
}
inline bool CapacityType_Parse(
    const std::string& name, CapacityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CapacityType>(
    CapacityType_descriptor(), name, value);
}
enum RewardMode : int {
  Mode_Roll = 1,
  Mode_Dispath = 2
};
bool RewardMode_IsValid(int value);
constexpr RewardMode RewardMode_MIN = Mode_Roll;
constexpr RewardMode RewardMode_MAX = Mode_Dispath;
constexpr int RewardMode_ARRAYSIZE = RewardMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardMode_descriptor();
template<typename T>
inline const std::string& RewardMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RewardMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RewardMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RewardMode_descriptor(), enum_t_value);
}
inline bool RewardMode_Parse(
    const std::string& name, RewardMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RewardMode>(
    RewardMode_descriptor(), name, value);
}
enum OutType : int {
  OutType_Quit = 1,
  OutType_Fire = 2,
  OutType_VoteOut = 3
};
bool OutType_IsValid(int value);
constexpr OutType OutType_MIN = OutType_Quit;
constexpr OutType OutType_MAX = OutType_VoteOut;
constexpr int OutType_ARRAYSIZE = OutType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutType_descriptor();
template<typename T>
inline const std::string& OutType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OutType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OutType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OutType_descriptor(), enum_t_value);
}
inline bool OutType_Parse(
    const std::string& name, OutType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OutType>(
    OutType_descriptor(), name, value);
}
enum TeamPrivilege : int {
  TeamPrivilege_Invite = 1,
  TeamPrivilege_RemoveMember = 2
};
bool TeamPrivilege_IsValid(int value);
constexpr TeamPrivilege TeamPrivilege_MIN = TeamPrivilege_Invite;
constexpr TeamPrivilege TeamPrivilege_MAX = TeamPrivilege_RemoveMember;
constexpr int TeamPrivilege_ARRAYSIZE = TeamPrivilege_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamPrivilege_descriptor();
template<typename T>
inline const std::string& TeamPrivilege_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TeamPrivilege>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TeamPrivilege_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TeamPrivilege_descriptor(), enum_t_value);
}
inline bool TeamPrivilege_Parse(
    const std::string& name, TeamPrivilege* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TeamPrivilege>(
    TeamPrivilege_descriptor(), name, value);
}
enum AnswerType : int {
  AnswerType_Yes = 1,
  AnswerType_No = 2
};
bool AnswerType_IsValid(int value);
constexpr AnswerType AnswerType_MIN = AnswerType_Yes;
constexpr AnswerType AnswerType_MAX = AnswerType_No;
constexpr int AnswerType_ARRAYSIZE = AnswerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnswerType_descriptor();
template<typename T>
inline const std::string& AnswerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnswerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnswerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnswerType_descriptor(), enum_t_value);
}
inline bool AnswerType_Parse(
    const std::string& name, AnswerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnswerType>(
    AnswerType_descriptor(), name, value);
}
enum ChooseType : int {
  ChooseType_Need = 1,
  ChooseType_Greed = 2,
  ChooseType_Giveup = 3
};
bool ChooseType_IsValid(int value);
constexpr ChooseType ChooseType_MIN = ChooseType_Need;
constexpr ChooseType ChooseType_MAX = ChooseType_Giveup;
constexpr int ChooseType_ARRAYSIZE = ChooseType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChooseType_descriptor();
template<typename T>
inline const std::string& ChooseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChooseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChooseType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChooseType_descriptor(), enum_t_value);
}
inline bool ChooseType_Parse(
    const std::string& name, ChooseType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChooseType>(
    ChooseType_descriptor(), name, value);
}
enum MemState : int {
  NORMAL = 0,
  AWAY = 1,
  OFFLINE = 2,
  HOSTING = 3
};
bool MemState_IsValid(int value);
constexpr MemState MemState_MIN = NORMAL;
constexpr MemState MemState_MAX = HOSTING;
constexpr int MemState_ARRAYSIZE = MemState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemState_descriptor();
template<typename T>
inline const std::string& MemState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MemState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MemState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MemState_descriptor(), enum_t_value);
}
inline bool MemState_Parse(
    const std::string& name, MemState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MemState>(
    MemState_descriptor(), name, value);
}
// ===================================================================

class MSG_CreateTeam_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_CreateTeam_CS) */ {
 public:
  MSG_CreateTeam_CS();
  virtual ~MSG_CreateTeam_CS();

  MSG_CreateTeam_CS(const MSG_CreateTeam_CS& from);
  MSG_CreateTeam_CS(MSG_CreateTeam_CS&& from) noexcept
    : MSG_CreateTeam_CS() {
    *this = ::std::move(from);
  }

  inline MSG_CreateTeam_CS& operator=(const MSG_CreateTeam_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_CreateTeam_CS& operator=(MSG_CreateTeam_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_CreateTeam_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_CreateTeam_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_CreateTeam_CS*>(
               &_MSG_CreateTeam_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_CreateTeam_CS& a, MSG_CreateTeam_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_CreateTeam_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_CreateTeam_CS* New() const final {
    return CreateMaybeMessage<MSG_CreateTeam_CS>(nullptr);
  }

  MSG_CreateTeam_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_CreateTeam_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_CreateTeam_CS& from);
  void MergeFrom(const MSG_CreateTeam_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_CreateTeam_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_CreateTeam_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kActivityidFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 activityid = 2;
  bool has_activityid() const;
  private:
  bool _internal_has_activityid() const;
  public:
  void clear_activityid();
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid() const;
  void set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activityid() const;
  void _internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_CreateTeam_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class Memember :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.Memember) */ {
 public:
  Memember();
  virtual ~Memember();

  Memember(const Memember& from);
  Memember(Memember&& from) noexcept
    : Memember() {
    *this = ::std::move(from);
  }

  inline Memember& operator=(const Memember& from) {
    CopyFrom(from);
    return *this;
  }
  inline Memember& operator=(Memember&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Memember& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Memember* internal_default_instance() {
    return reinterpret_cast<const Memember*>(
               &_Memember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Memember& a, Memember& b) {
    a.Swap(&b);
  }
  inline void Swap(Memember* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Memember* New() const final {
    return CreateMaybeMessage<Memember>(nullptr);
  }

  Memember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Memember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Memember& from);
  void MergeFrom(const Memember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Memember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.Memember";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillFieldNumber = 5,
    kNameFieldNumber = 2,
    kMememberidFieldNumber = 6,
    kSceneidFieldNumber = 12,
    kMarkFieldNumber = 1,
    kOccupationFieldNumber = 3,
    kLevelFieldNumber = 4,
    kHpFieldNumber = 7,
    kMaxhpFieldNumber = 8,
    kOccupationlevelFieldNumber = 9,
    kHeroidFieldNumber = 10,
    kFightFieldNumber = 11,
    kStateFieldNumber = 13,
    kPrivilegeFieldNumber = 14,
    kHairstyleFieldNumber = 15,
    kHaircolorFieldNumber = 16,
    kHeadstyleFieldNumber = 17,
    kBodystyleFieldNumber = 18,
    kAntennaFieldNumber = 19,
    kAvataridFieldNumber = 20,
  };
  // repeated uint32 skill = 5;
  int skill_size() const;
  private:
  int _internal_skill_size() const;
  public:
  void clear_skill();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_skill(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_skill() const;
  void _internal_add_skill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_skill();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 skill(int index) const;
  void set_skill(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_skill(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      skill() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_skill();

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string mememberid = 6;
  bool has_mememberid() const;
  private:
  bool _internal_has_mememberid() const;
  public:
  void clear_mememberid();
  const std::string& mememberid() const;
  void set_mememberid(const std::string& value);
  void set_mememberid(std::string&& value);
  void set_mememberid(const char* value);
  void set_mememberid(const char* value, size_t size);
  std::string* mutable_mememberid();
  std::string* release_mememberid();
  void set_allocated_mememberid(std::string* mememberid);
  private:
  const std::string& _internal_mememberid() const;
  void _internal_set_mememberid(const std::string& value);
  std::string* _internal_mutable_mememberid();
  public:

  // optional string sceneid = 12;
  bool has_sceneid() const;
  private:
  bool _internal_has_sceneid() const;
  public:
  void clear_sceneid();
  const std::string& sceneid() const;
  void set_sceneid(const std::string& value);
  void set_sceneid(std::string&& value);
  void set_sceneid(const char* value);
  void set_sceneid(const char* value, size_t size);
  std::string* mutable_sceneid();
  std::string* release_sceneid();
  void set_allocated_sceneid(std::string* sceneid);
  private:
  const std::string& _internal_sceneid() const;
  void _internal_set_sceneid(const std::string& value);
  std::string* _internal_mutable_sceneid();
  public:

  // optional uint32 mark = 1;
  bool has_mark() const;
  private:
  bool _internal_has_mark() const;
  public:
  void clear_mark();
  ::PROTOBUF_NAMESPACE_ID::uint32 mark() const;
  void set_mark(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mark() const;
  void _internal_set_mark(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 occupation = 3;
  bool has_occupation() const;
  private:
  bool _internal_has_occupation() const;
  public:
  void clear_occupation();
  ::PROTOBUF_NAMESPACE_ID::uint32 occupation() const;
  void set_occupation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_occupation() const;
  void _internal_set_occupation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 level = 4;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hp = 7;
  bool has_hp() const;
  private:
  bool _internal_has_hp() const;
  public:
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::uint32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 maxhp = 8;
  bool has_maxhp() const;
  private:
  bool _internal_has_maxhp() const;
  public:
  void clear_maxhp();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxhp() const;
  void _internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 occupationlevel = 9;
  bool has_occupationlevel() const;
  private:
  bool _internal_has_occupationlevel() const;
  public:
  void clear_occupationlevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 occupationlevel() const;
  void set_occupationlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_occupationlevel() const;
  void _internal_set_occupationlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 heroid = 10;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid() const;
  void set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroid() const;
  void _internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fight = 11;
  bool has_fight() const;
  private:
  bool _internal_has_fight() const;
  public:
  void clear_fight();
  ::PROTOBUF_NAMESPACE_ID::uint32 fight() const;
  void set_fight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fight() const;
  void _internal_set_fight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Team.MemState state = 13;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::Team::MemState state() const;
  void set_state(::Team::MemState value);
  private:
  ::Team::MemState _internal_state() const;
  void _internal_set_state(::Team::MemState value);
  public:

  // optional uint32 privilege = 14;
  bool has_privilege() const;
  private:
  bool _internal_has_privilege() const;
  public:
  void clear_privilege();
  ::PROTOBUF_NAMESPACE_ID::uint32 privilege() const;
  void set_privilege(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_privilege() const;
  void _internal_set_privilege(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hairstyle = 15;
  bool has_hairstyle() const;
  private:
  bool _internal_has_hairstyle() const;
  public:
  void clear_hairstyle();
  ::PROTOBUF_NAMESPACE_ID::uint32 hairstyle() const;
  void set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hairstyle() const;
  void _internal_set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 haircolor = 16;
  bool has_haircolor() const;
  private:
  bool _internal_has_haircolor() const;
  public:
  void clear_haircolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 haircolor() const;
  void set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_haircolor() const;
  void _internal_set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 headstyle = 17;
  bool has_headstyle() const;
  private:
  bool _internal_has_headstyle() const;
  public:
  void clear_headstyle();
  ::PROTOBUF_NAMESPACE_ID::uint32 headstyle() const;
  void set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_headstyle() const;
  void _internal_set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bodystyle = 18;
  bool has_bodystyle() const;
  private:
  bool _internal_has_bodystyle() const;
  public:
  void clear_bodystyle();
  ::PROTOBUF_NAMESPACE_ID::uint32 bodystyle() const;
  void set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bodystyle() const;
  void _internal_set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 antenna = 19;
  bool has_antenna() const;
  private:
  bool _internal_has_antenna() const;
  public:
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avatarid = 20;
  bool has_avatarid() const;
  private:
  bool _internal_has_avatarid() const;
  public:
  void clear_avatarid();
  ::PROTOBUF_NAMESPACE_ID::uint32 avatarid() const;
  void set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avatarid() const;
  void _internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.Memember)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > skill_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mememberid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sceneid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mark_;
  ::PROTOBUF_NAMESPACE_ID::uint32 occupation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 occupationlevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fight_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 privilege_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hairstyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 haircolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 headstyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bodystyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avatarid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_TeamMemeberList_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_TeamMemeberList_CS) */ {
 public:
  MSG_TeamMemeberList_CS();
  virtual ~MSG_TeamMemeberList_CS();

  MSG_TeamMemeberList_CS(const MSG_TeamMemeberList_CS& from);
  MSG_TeamMemeberList_CS(MSG_TeamMemeberList_CS&& from) noexcept
    : MSG_TeamMemeberList_CS() {
    *this = ::std::move(from);
  }

  inline MSG_TeamMemeberList_CS& operator=(const MSG_TeamMemeberList_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_TeamMemeberList_CS& operator=(MSG_TeamMemeberList_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_TeamMemeberList_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_TeamMemeberList_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_TeamMemeberList_CS*>(
               &_MSG_TeamMemeberList_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_TeamMemeberList_CS& a, MSG_TeamMemeberList_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_TeamMemeberList_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_TeamMemeberList_CS* New() const final {
    return CreateMaybeMessage<MSG_TeamMemeberList_CS>(nullptr);
  }

  MSG_TeamMemeberList_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_TeamMemeberList_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_TeamMemeberList_CS& from);
  void MergeFrom(const MSG_TeamMemeberList_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_TeamMemeberList_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_TeamMemeberList_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_TeamMemeberList_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_TeamMemeberList_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_TeamMemeberList_SC) */ {
 public:
  MSG_TeamMemeberList_SC();
  virtual ~MSG_TeamMemeberList_SC();

  MSG_TeamMemeberList_SC(const MSG_TeamMemeberList_SC& from);
  MSG_TeamMemeberList_SC(MSG_TeamMemeberList_SC&& from) noexcept
    : MSG_TeamMemeberList_SC() {
    *this = ::std::move(from);
  }

  inline MSG_TeamMemeberList_SC& operator=(const MSG_TeamMemeberList_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_TeamMemeberList_SC& operator=(MSG_TeamMemeberList_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_TeamMemeberList_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_TeamMemeberList_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_TeamMemeberList_SC*>(
               &_MSG_TeamMemeberList_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_TeamMemeberList_SC& a, MSG_TeamMemeberList_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_TeamMemeberList_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_TeamMemeberList_SC* New() const final {
    return CreateMaybeMessage<MSG_TeamMemeberList_SC>(nullptr);
  }

  MSG_TeamMemeberList_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_TeamMemeberList_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_TeamMemeberList_SC& from);
  void MergeFrom(const MSG_TeamMemeberList_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_TeamMemeberList_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_TeamMemeberList_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemFieldNumber = 4,
    kNameFieldNumber = 2,
    kLeaderidFieldNumber = 3,
    kNoteFieldNumber = 8,
    kIdFieldNumber = 1,
    kMaxmemberFieldNumber = 7,
    kActivityidFieldNumber = 9,
    kCurmemberFieldNumber = 10,
    kModeFieldNumber = 5,
    kCapTypeFieldNumber = 6,
  };
  // repeated .Team.Memember mem = 4;
  int mem_size() const;
  private:
  int _internal_mem_size() const;
  public:
  void clear_mem();
  ::Team::Memember* mutable_mem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >*
      mutable_mem();
  private:
  const ::Team::Memember& _internal_mem(int index) const;
  ::Team::Memember* _internal_add_mem();
  public:
  const ::Team::Memember& mem(int index) const;
  ::Team::Memember* add_mem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >&
      mem() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string leaderid = 3;
  bool has_leaderid() const;
  private:
  bool _internal_has_leaderid() const;
  public:
  void clear_leaderid();
  const std::string& leaderid() const;
  void set_leaderid(const std::string& value);
  void set_leaderid(std::string&& value);
  void set_leaderid(const char* value);
  void set_leaderid(const char* value, size_t size);
  std::string* mutable_leaderid();
  std::string* release_leaderid();
  void set_allocated_leaderid(std::string* leaderid);
  private:
  const std::string& _internal_leaderid() const;
  void _internal_set_leaderid(const std::string& value);
  std::string* _internal_mutable_leaderid();
  public:

  // optional string note = 8;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const std::string& note() const;
  void set_note(const std::string& value);
  void set_note(std::string&& value);
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  std::string* mutable_note();
  std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 maxmember = 7;
  bool has_maxmember() const;
  private:
  bool _internal_has_maxmember() const;
  public:
  void clear_maxmember();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxmember() const;
  void set_maxmember(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxmember() const;
  void _internal_set_maxmember(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 activityid = 9;
  bool has_activityid() const;
  private:
  bool _internal_has_activityid() const;
  public:
  void clear_activityid();
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid() const;
  void set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activityid() const;
  void _internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 curmember = 10;
  bool has_curmember() const;
  private:
  bool _internal_has_curmember() const;
  public:
  void clear_curmember();
  ::PROTOBUF_NAMESPACE_ID::uint32 curmember() const;
  void set_curmember(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_curmember() const;
  void _internal_set_curmember(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Team.RewardMode mode = 5;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::Team::RewardMode mode() const;
  void set_mode(::Team::RewardMode value);
  private:
  ::Team::RewardMode _internal_mode() const;
  void _internal_set_mode(::Team::RewardMode value);
  public:

  // optional .Team.CapacityType cap_type = 6;
  bool has_cap_type() const;
  private:
  bool _internal_has_cap_type() const;
  public:
  void clear_cap_type();
  ::Team::CapacityType cap_type() const;
  void set_cap_type(::Team::CapacityType value);
  private:
  ::Team::CapacityType _internal_cap_type() const;
  void _internal_set_cap_type(::Team::CapacityType value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_TeamMemeberList_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember > mem_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxmember_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 curmember_;
  int mode_;
  int cap_type_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class OneTeam :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.OneTeam) */ {
 public:
  OneTeam();
  virtual ~OneTeam();

  OneTeam(const OneTeam& from);
  OneTeam(OneTeam&& from) noexcept
    : OneTeam() {
    *this = ::std::move(from);
  }

  inline OneTeam& operator=(const OneTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneTeam& operator=(OneTeam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OneTeam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OneTeam* internal_default_instance() {
    return reinterpret_cast<const OneTeam*>(
               &_OneTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OneTeam& a, OneTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(OneTeam* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OneTeam* New() const final {
    return CreateMaybeMessage<OneTeam>(nullptr);
  }

  OneTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OneTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OneTeam& from);
  void MergeFrom(const OneTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.OneTeam";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kNoteFieldNumber = 6,
    kIdFieldNumber = 1,
    kSizeFieldNumber = 3,
    kCapacityFieldNumber = 4,
    kModeFieldNumber = 5,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string note = 6;
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const std::string& note() const;
  void set_note(const std::string& value);
  void set_note(std::string&& value);
  void set_note(const char* value);
  void set_note(const char* value, size_t size);
  std::string* mutable_note();
  std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 capacity = 4;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint32 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Team.RewardMode mode = 5;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::Team::RewardMode mode() const;
  void set_mode(::Team::RewardMode value);
  private:
  ::Team::RewardMode _internal_mode() const;
  void _internal_set_mode(::Team::RewardMode value);
  public:

  // @@protoc_insertion_point(class_scope:Team.OneTeam)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 capacity_;
  int mode_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_Team_List_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_Team_List_CS) */ {
 public:
  MSG_Team_List_CS();
  virtual ~MSG_Team_List_CS();

  MSG_Team_List_CS(const MSG_Team_List_CS& from);
  MSG_Team_List_CS(MSG_Team_List_CS&& from) noexcept
    : MSG_Team_List_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Team_List_CS& operator=(const MSG_Team_List_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Team_List_CS& operator=(MSG_Team_List_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Team_List_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Team_List_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Team_List_CS*>(
               &_MSG_Team_List_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_Team_List_CS& a, MSG_Team_List_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Team_List_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Team_List_CS* New() const final {
    return CreateMaybeMessage<MSG_Team_List_CS>(nullptr);
  }

  MSG_Team_List_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Team_List_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Team_List_CS& from);
  void MergeFrom(const MSG_Team_List_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Team_List_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_Team_List_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_Team_List_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_Team_List_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_Team_List_SC) */ {
 public:
  MSG_Team_List_SC();
  virtual ~MSG_Team_List_SC();

  MSG_Team_List_SC(const MSG_Team_List_SC& from);
  MSG_Team_List_SC(MSG_Team_List_SC&& from) noexcept
    : MSG_Team_List_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Team_List_SC& operator=(const MSG_Team_List_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Team_List_SC& operator=(MSG_Team_List_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Team_List_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Team_List_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Team_List_SC*>(
               &_MSG_Team_List_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MSG_Team_List_SC& a, MSG_Team_List_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Team_List_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Team_List_SC* New() const final {
    return CreateMaybeMessage<MSG_Team_List_SC>(nullptr);
  }

  MSG_Team_List_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Team_List_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Team_List_SC& from);
  void MergeFrom(const MSG_Team_List_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Team_List_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_Team_List_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneteamFieldNumber = 1,
  };
  // repeated .Team.MSG_TeamMemeberList_SC oneteam = 1;
  int oneteam_size() const;
  private:
  int _internal_oneteam_size() const;
  public:
  void clear_oneteam();
  ::Team::MSG_TeamMemeberList_SC* mutable_oneteam(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MSG_TeamMemeberList_SC >*
      mutable_oneteam();
  private:
  const ::Team::MSG_TeamMemeberList_SC& _internal_oneteam(int index) const;
  ::Team::MSG_TeamMemeberList_SC* _internal_add_oneteam();
  public:
  const ::Team::MSG_TeamMemeberList_SC& oneteam(int index) const;
  ::Team::MSG_TeamMemeberList_SC* add_oneteam();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MSG_TeamMemeberList_SC >&
      oneteam() const;

  // @@protoc_insertion_point(class_scope:Team.MSG_Team_List_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MSG_TeamMemeberList_SC > oneteam_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_Join_Team_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_Join_Team_CS) */ {
 public:
  MSG_Join_Team_CS();
  virtual ~MSG_Join_Team_CS();

  MSG_Join_Team_CS(const MSG_Join_Team_CS& from);
  MSG_Join_Team_CS(MSG_Join_Team_CS&& from) noexcept
    : MSG_Join_Team_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Join_Team_CS& operator=(const MSG_Join_Team_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Join_Team_CS& operator=(MSG_Join_Team_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Join_Team_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Join_Team_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Join_Team_CS*>(
               &_MSG_Join_Team_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_Join_Team_CS& a, MSG_Join_Team_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Join_Team_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Join_Team_CS* New() const final {
    return CreateMaybeMessage<MSG_Join_Team_CS>(nullptr);
  }

  MSG_Join_Team_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Join_Team_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Join_Team_CS& from);
  void MergeFrom(const MSG_Join_Team_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Join_Team_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_Join_Team_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamidFieldNumber = 1,
  };
  // required uint32 teamid = 1;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_Join_Team_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_Join_Team_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_Join_Team_SC) */ {
 public:
  MSG_Join_Team_SC();
  virtual ~MSG_Join_Team_SC();

  MSG_Join_Team_SC(const MSG_Join_Team_SC& from);
  MSG_Join_Team_SC(MSG_Join_Team_SC&& from) noexcept
    : MSG_Join_Team_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Join_Team_SC& operator=(const MSG_Join_Team_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Join_Team_SC& operator=(MSG_Join_Team_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Join_Team_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Join_Team_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Join_Team_SC*>(
               &_MSG_Join_Team_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MSG_Join_Team_SC& a, MSG_Join_Team_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Join_Team_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Join_Team_SC* New() const final {
    return CreateMaybeMessage<MSG_Join_Team_SC>(nullptr);
  }

  MSG_Join_Team_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Join_Team_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Join_Team_SC& from);
  void MergeFrom(const MSG_Join_Team_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Join_Team_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_Join_Team_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
  };
  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_Join_Team_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqJoinTeamNotifyLeader_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqJoinTeamNotifyLeader_SC) */ {
 public:
  MSG_ReqJoinTeamNotifyLeader_SC();
  virtual ~MSG_ReqJoinTeamNotifyLeader_SC();

  MSG_ReqJoinTeamNotifyLeader_SC(const MSG_ReqJoinTeamNotifyLeader_SC& from);
  MSG_ReqJoinTeamNotifyLeader_SC(MSG_ReqJoinTeamNotifyLeader_SC&& from) noexcept
    : MSG_ReqJoinTeamNotifyLeader_SC() {
    *this = ::std::move(from);
  }

  inline MSG_ReqJoinTeamNotifyLeader_SC& operator=(const MSG_ReqJoinTeamNotifyLeader_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqJoinTeamNotifyLeader_SC& operator=(MSG_ReqJoinTeamNotifyLeader_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqJoinTeamNotifyLeader_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqJoinTeamNotifyLeader_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqJoinTeamNotifyLeader_SC*>(
               &_MSG_ReqJoinTeamNotifyLeader_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_ReqJoinTeamNotifyLeader_SC& a, MSG_ReqJoinTeamNotifyLeader_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqJoinTeamNotifyLeader_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqJoinTeamNotifyLeader_SC* New() const final {
    return CreateMaybeMessage<MSG_ReqJoinTeamNotifyLeader_SC>(nullptr);
  }

  MSG_ReqJoinTeamNotifyLeader_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqJoinTeamNotifyLeader_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqJoinTeamNotifyLeader_SC& from);
  void MergeFrom(const MSG_ReqJoinTeamNotifyLeader_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqJoinTeamNotifyLeader_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqJoinTeamNotifyLeader_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequesteridFieldNumber = 1,
    kRequesternameFieldNumber = 2,
  };
  // required string requesterid = 1;
  bool has_requesterid() const;
  private:
  bool _internal_has_requesterid() const;
  public:
  void clear_requesterid();
  const std::string& requesterid() const;
  void set_requesterid(const std::string& value);
  void set_requesterid(std::string&& value);
  void set_requesterid(const char* value);
  void set_requesterid(const char* value, size_t size);
  std::string* mutable_requesterid();
  std::string* release_requesterid();
  void set_allocated_requesterid(std::string* requesterid);
  private:
  const std::string& _internal_requesterid() const;
  void _internal_set_requesterid(const std::string& value);
  std::string* _internal_mutable_requesterid();
  public:

  // optional string requestername = 2;
  bool has_requestername() const;
  private:
  bool _internal_has_requestername() const;
  public:
  void clear_requestername();
  const std::string& requestername() const;
  void set_requestername(const std::string& value);
  void set_requestername(std::string&& value);
  void set_requestername(const char* value);
  void set_requestername(const char* value, size_t size);
  std::string* mutable_requestername();
  std::string* release_requestername();
  void set_allocated_requestername(std::string* requestername);
  private:
  const std::string& _internal_requestername() const;
  void _internal_set_requestername(const std::string& value);
  std::string* _internal_mutable_requestername();
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqJoinTeamNotifyLeader_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesterid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestername_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_AnswerJoinTeam_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_AnswerJoinTeam_CS) */ {
 public:
  MSG_AnswerJoinTeam_CS();
  virtual ~MSG_AnswerJoinTeam_CS();

  MSG_AnswerJoinTeam_CS(const MSG_AnswerJoinTeam_CS& from);
  MSG_AnswerJoinTeam_CS(MSG_AnswerJoinTeam_CS&& from) noexcept
    : MSG_AnswerJoinTeam_CS() {
    *this = ::std::move(from);
  }

  inline MSG_AnswerJoinTeam_CS& operator=(const MSG_AnswerJoinTeam_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_AnswerJoinTeam_CS& operator=(MSG_AnswerJoinTeam_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_AnswerJoinTeam_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_AnswerJoinTeam_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_AnswerJoinTeam_CS*>(
               &_MSG_AnswerJoinTeam_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_AnswerJoinTeam_CS& a, MSG_AnswerJoinTeam_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_AnswerJoinTeam_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_AnswerJoinTeam_CS* New() const final {
    return CreateMaybeMessage<MSG_AnswerJoinTeam_CS>(nullptr);
  }

  MSG_AnswerJoinTeam_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_AnswerJoinTeam_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_AnswerJoinTeam_CS& from);
  void MergeFrom(const MSG_AnswerJoinTeam_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_AnswerJoinTeam_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_AnswerJoinTeam_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequesteridFieldNumber = 1,
    kAnswerTypeFieldNumber = 2,
  };
  // required string requesterid = 1;
  bool has_requesterid() const;
  private:
  bool _internal_has_requesterid() const;
  public:
  void clear_requesterid();
  const std::string& requesterid() const;
  void set_requesterid(const std::string& value);
  void set_requesterid(std::string&& value);
  void set_requesterid(const char* value);
  void set_requesterid(const char* value, size_t size);
  std::string* mutable_requesterid();
  std::string* release_requesterid();
  void set_allocated_requesterid(std::string* requesterid);
  private:
  const std::string& _internal_requesterid() const;
  void _internal_set_requesterid(const std::string& value);
  std::string* _internal_mutable_requesterid();
  public:

  // required .Team.AnswerType answer_type = 2;
  bool has_answer_type() const;
  private:
  bool _internal_has_answer_type() const;
  public:
  void clear_answer_type();
  ::Team::AnswerType answer_type() const;
  void set_answer_type(::Team::AnswerType value);
  private:
  ::Team::AnswerType _internal_answer_type() const;
  void _internal_set_answer_type(::Team::AnswerType value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_AnswerJoinTeam_CS)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requesterid_;
  int answer_type_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_AnswerJoinTeam_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_AnswerJoinTeam_SC) */ {
 public:
  MSG_AnswerJoinTeam_SC();
  virtual ~MSG_AnswerJoinTeam_SC();

  MSG_AnswerJoinTeam_SC(const MSG_AnswerJoinTeam_SC& from);
  MSG_AnswerJoinTeam_SC(MSG_AnswerJoinTeam_SC&& from) noexcept
    : MSG_AnswerJoinTeam_SC() {
    *this = ::std::move(from);
  }

  inline MSG_AnswerJoinTeam_SC& operator=(const MSG_AnswerJoinTeam_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_AnswerJoinTeam_SC& operator=(MSG_AnswerJoinTeam_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_AnswerJoinTeam_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_AnswerJoinTeam_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_AnswerJoinTeam_SC*>(
               &_MSG_AnswerJoinTeam_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MSG_AnswerJoinTeam_SC& a, MSG_AnswerJoinTeam_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_AnswerJoinTeam_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_AnswerJoinTeam_SC* New() const final {
    return CreateMaybeMessage<MSG_AnswerJoinTeam_SC>(nullptr);
  }

  MSG_AnswerJoinTeam_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_AnswerJoinTeam_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_AnswerJoinTeam_SC& from);
  void MergeFrom(const MSG_AnswerJoinTeam_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_AnswerJoinTeam_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_AnswerJoinTeam_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeaminfoFieldNumber = 3,
    kErrcodeFieldNumber = 1,
    kAnswerTypeFieldNumber = 2,
  };
  // optional .Team.MSG_TeamMemeberList_SC teaminfo = 3;
  bool has_teaminfo() const;
  private:
  bool _internal_has_teaminfo() const;
  public:
  void clear_teaminfo();
  const ::Team::MSG_TeamMemeberList_SC& teaminfo() const;
  ::Team::MSG_TeamMemeberList_SC* release_teaminfo();
  ::Team::MSG_TeamMemeberList_SC* mutable_teaminfo();
  void set_allocated_teaminfo(::Team::MSG_TeamMemeberList_SC* teaminfo);
  private:
  const ::Team::MSG_TeamMemeberList_SC& _internal_teaminfo() const;
  ::Team::MSG_TeamMemeberList_SC* _internal_mutable_teaminfo();
  public:

  // optional uint32 errcode = 1;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Team.AnswerType answer_type = 2;
  bool has_answer_type() const;
  private:
  bool _internal_has_answer_type() const;
  public:
  void clear_answer_type();
  ::Team::AnswerType answer_type() const;
  void set_answer_type(::Team::AnswerType value);
  private:
  ::Team::AnswerType _internal_answer_type() const;
  void _internal_set_answer_type(::Team::AnswerType value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_AnswerJoinTeam_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Team::MSG_TeamMemeberList_SC* teaminfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode_;
  int answer_type_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqApplyList_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqApplyList_CS) */ {
 public:
  MSG_ReqApplyList_CS();
  virtual ~MSG_ReqApplyList_CS();

  MSG_ReqApplyList_CS(const MSG_ReqApplyList_CS& from);
  MSG_ReqApplyList_CS(MSG_ReqApplyList_CS&& from) noexcept
    : MSG_ReqApplyList_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqApplyList_CS& operator=(const MSG_ReqApplyList_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqApplyList_CS& operator=(MSG_ReqApplyList_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqApplyList_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqApplyList_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqApplyList_CS*>(
               &_MSG_ReqApplyList_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MSG_ReqApplyList_CS& a, MSG_ReqApplyList_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqApplyList_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqApplyList_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqApplyList_CS>(nullptr);
  }

  MSG_ReqApplyList_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqApplyList_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqApplyList_CS& from);
  void MergeFrom(const MSG_ReqApplyList_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqApplyList_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqApplyList_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqApplyList_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqApplyList_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqApplyList_SC) */ {
 public:
  MSG_ReqApplyList_SC();
  virtual ~MSG_ReqApplyList_SC();

  MSG_ReqApplyList_SC(const MSG_ReqApplyList_SC& from);
  MSG_ReqApplyList_SC(MSG_ReqApplyList_SC&& from) noexcept
    : MSG_ReqApplyList_SC() {
    *this = ::std::move(from);
  }

  inline MSG_ReqApplyList_SC& operator=(const MSG_ReqApplyList_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqApplyList_SC& operator=(MSG_ReqApplyList_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqApplyList_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqApplyList_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqApplyList_SC*>(
               &_MSG_ReqApplyList_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MSG_ReqApplyList_SC& a, MSG_ReqApplyList_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqApplyList_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqApplyList_SC* New() const final {
    return CreateMaybeMessage<MSG_ReqApplyList_SC>(nullptr);
  }

  MSG_ReqApplyList_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqApplyList_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqApplyList_SC& from);
  void MergeFrom(const MSG_ReqApplyList_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqApplyList_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqApplyList_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplyerFieldNumber = 1,
    kLeaderidFieldNumber = 2,
  };
  // repeated .Team.Memember applyer = 1;
  int applyer_size() const;
  private:
  int _internal_applyer_size() const;
  public:
  void clear_applyer();
  ::Team::Memember* mutable_applyer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >*
      mutable_applyer();
  private:
  const ::Team::Memember& _internal_applyer(int index) const;
  ::Team::Memember* _internal_add_applyer();
  public:
  const ::Team::Memember& applyer(int index) const;
  ::Team::Memember* add_applyer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >&
      applyer() const;

  // optional string leaderid = 2;
  bool has_leaderid() const;
  private:
  bool _internal_has_leaderid() const;
  public:
  void clear_leaderid();
  const std::string& leaderid() const;
  void set_leaderid(const std::string& value);
  void set_leaderid(std::string&& value);
  void set_leaderid(const char* value);
  void set_leaderid(const char* value, size_t size);
  std::string* mutable_leaderid();
  std::string* release_leaderid();
  void set_allocated_leaderid(std::string* leaderid);
  private:
  const std::string& _internal_leaderid() const;
  void _internal_set_leaderid(const std::string& value);
  std::string* _internal_mutable_leaderid();
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqApplyList_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember > applyer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqDelMemember_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqDelMemember_CS) */ {
 public:
  MSG_ReqDelMemember_CS();
  virtual ~MSG_ReqDelMemember_CS();

  MSG_ReqDelMemember_CS(const MSG_ReqDelMemember_CS& from);
  MSG_ReqDelMemember_CS(MSG_ReqDelMemember_CS&& from) noexcept
    : MSG_ReqDelMemember_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqDelMemember_CS& operator=(const MSG_ReqDelMemember_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqDelMemember_CS& operator=(MSG_ReqDelMemember_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqDelMemember_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqDelMemember_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqDelMemember_CS*>(
               &_MSG_ReqDelMemember_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MSG_ReqDelMemember_CS& a, MSG_ReqDelMemember_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqDelMemember_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqDelMemember_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqDelMemember_CS>(nullptr);
  }

  MSG_ReqDelMemember_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqDelMemember_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqDelMemember_CS& from);
  void MergeFrom(const MSG_ReqDelMemember_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqDelMemember_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqDelMemember_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharidFieldNumber = 1,
  };
  // required string charid = 1;
  bool has_charid() const;
  private:
  bool _internal_has_charid() const;
  public:
  void clear_charid();
  const std::string& charid() const;
  void set_charid(const std::string& value);
  void set_charid(std::string&& value);
  void set_charid(const char* value);
  void set_charid(const char* value, size_t size);
  std::string* mutable_charid();
  std::string* release_charid();
  void set_allocated_charid(std::string* charid);
  private:
  const std::string& _internal_charid() const;
  void _internal_set_charid(const std::string& value);
  std::string* _internal_mutable_charid();
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqDelMemember_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr charid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqDelMemember_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqDelMemember_SC) */ {
 public:
  MSG_ReqDelMemember_SC();
  virtual ~MSG_ReqDelMemember_SC();

  MSG_ReqDelMemember_SC(const MSG_ReqDelMemember_SC& from);
  MSG_ReqDelMemember_SC(MSG_ReqDelMemember_SC&& from) noexcept
    : MSG_ReqDelMemember_SC() {
    *this = ::std::move(from);
  }

  inline MSG_ReqDelMemember_SC& operator=(const MSG_ReqDelMemember_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqDelMemember_SC& operator=(MSG_ReqDelMemember_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqDelMemember_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqDelMemember_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqDelMemember_SC*>(
               &_MSG_ReqDelMemember_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MSG_ReqDelMemember_SC& a, MSG_ReqDelMemember_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqDelMemember_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqDelMemember_SC* New() const final {
    return CreateMaybeMessage<MSG_ReqDelMemember_SC>(nullptr);
  }

  MSG_ReqDelMemember_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqDelMemember_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqDelMemember_SC& from);
  void MergeFrom(const MSG_ReqDelMemember_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqDelMemember_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqDelMemember_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharidFieldNumber = 1,
    kNameFieldNumber = 3,
    kOuttypeFieldNumber = 2,
  };
  // required string charid = 1;
  bool has_charid() const;
  private:
  bool _internal_has_charid() const;
  public:
  void clear_charid();
  const std::string& charid() const;
  void set_charid(const std::string& value);
  void set_charid(std::string&& value);
  void set_charid(const char* value);
  void set_charid(const char* value, size_t size);
  std::string* mutable_charid();
  std::string* release_charid();
  void set_allocated_charid(std::string* charid);
  private:
  const std::string& _internal_charid() const;
  void _internal_set_charid(const std::string& value);
  std::string* _internal_mutable_charid();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .Team.OutType outtype = 2;
  bool has_outtype() const;
  private:
  bool _internal_has_outtype() const;
  public:
  void clear_outtype();
  ::Team::OutType outtype() const;
  void set_outtype(::Team::OutType value);
  private:
  ::Team::OutType _internal_outtype() const;
  void _internal_set_outtype(::Team::OutType value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqDelMemember_SC)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr charid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int outtype_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqLanchVoteOut_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqLanchVoteOut_CS) */ {
 public:
  MSG_ReqLanchVoteOut_CS();
  virtual ~MSG_ReqLanchVoteOut_CS();

  MSG_ReqLanchVoteOut_CS(const MSG_ReqLanchVoteOut_CS& from);
  MSG_ReqLanchVoteOut_CS(MSG_ReqLanchVoteOut_CS&& from) noexcept
    : MSG_ReqLanchVoteOut_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqLanchVoteOut_CS& operator=(const MSG_ReqLanchVoteOut_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqLanchVoteOut_CS& operator=(MSG_ReqLanchVoteOut_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqLanchVoteOut_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqLanchVoteOut_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqLanchVoteOut_CS*>(
               &_MSG_ReqLanchVoteOut_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MSG_ReqLanchVoteOut_CS& a, MSG_ReqLanchVoteOut_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqLanchVoteOut_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqLanchVoteOut_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqLanchVoteOut_CS>(nullptr);
  }

  MSG_ReqLanchVoteOut_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqLanchVoteOut_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqLanchVoteOut_CS& from);
  void MergeFrom(const MSG_ReqLanchVoteOut_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqLanchVoteOut_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqLanchVoteOut_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutidFieldNumber = 1,
  };
  // required string outid = 1;
  bool has_outid() const;
  private:
  bool _internal_has_outid() const;
  public:
  void clear_outid();
  const std::string& outid() const;
  void set_outid(const std::string& value);
  void set_outid(std::string&& value);
  void set_outid(const char* value);
  void set_outid(const char* value, size_t size);
  std::string* mutable_outid();
  std::string* release_outid();
  void set_allocated_outid(std::string* outid);
  private:
  const std::string& _internal_outid() const;
  void _internal_set_outid(const std::string& value);
  std::string* _internal_mutable_outid();
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqLanchVoteOut_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqLanchVoteOut_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqLanchVoteOut_SC) */ {
 public:
  MSG_ReqLanchVoteOut_SC();
  virtual ~MSG_ReqLanchVoteOut_SC();

  MSG_ReqLanchVoteOut_SC(const MSG_ReqLanchVoteOut_SC& from);
  MSG_ReqLanchVoteOut_SC(MSG_ReqLanchVoteOut_SC&& from) noexcept
    : MSG_ReqLanchVoteOut_SC() {
    *this = ::std::move(from);
  }

  inline MSG_ReqLanchVoteOut_SC& operator=(const MSG_ReqLanchVoteOut_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqLanchVoteOut_SC& operator=(MSG_ReqLanchVoteOut_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqLanchVoteOut_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqLanchVoteOut_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqLanchVoteOut_SC*>(
               &_MSG_ReqLanchVoteOut_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MSG_ReqLanchVoteOut_SC& a, MSG_ReqLanchVoteOut_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqLanchVoteOut_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqLanchVoteOut_SC* New() const final {
    return CreateMaybeMessage<MSG_ReqLanchVoteOut_SC>(nullptr);
  }

  MSG_ReqLanchVoteOut_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqLanchVoteOut_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqLanchVoteOut_SC& from);
  void MergeFrom(const MSG_ReqLanchVoteOut_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqLanchVoteOut_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqLanchVoteOut_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLancheridFieldNumber = 2,
    kLanchernameFieldNumber = 3,
    kOuteridFieldNumber = 4,
    kOuternameFieldNumber = 5,
    kDurationFieldNumber = 6,
    kErrcodeFieldNumber = 1,
  };
  // optional string lancherid = 2;
  bool has_lancherid() const;
  private:
  bool _internal_has_lancherid() const;
  public:
  void clear_lancherid();
  const std::string& lancherid() const;
  void set_lancherid(const std::string& value);
  void set_lancherid(std::string&& value);
  void set_lancherid(const char* value);
  void set_lancherid(const char* value, size_t size);
  std::string* mutable_lancherid();
  std::string* release_lancherid();
  void set_allocated_lancherid(std::string* lancherid);
  private:
  const std::string& _internal_lancherid() const;
  void _internal_set_lancherid(const std::string& value);
  std::string* _internal_mutable_lancherid();
  public:

  // required string lanchername = 3;
  bool has_lanchername() const;
  private:
  bool _internal_has_lanchername() const;
  public:
  void clear_lanchername();
  const std::string& lanchername() const;
  void set_lanchername(const std::string& value);
  void set_lanchername(std::string&& value);
  void set_lanchername(const char* value);
  void set_lanchername(const char* value, size_t size);
  std::string* mutable_lanchername();
  std::string* release_lanchername();
  void set_allocated_lanchername(std::string* lanchername);
  private:
  const std::string& _internal_lanchername() const;
  void _internal_set_lanchername(const std::string& value);
  std::string* _internal_mutable_lanchername();
  public:

  // optional string outerid = 4;
  bool has_outerid() const;
  private:
  bool _internal_has_outerid() const;
  public:
  void clear_outerid();
  const std::string& outerid() const;
  void set_outerid(const std::string& value);
  void set_outerid(std::string&& value);
  void set_outerid(const char* value);
  void set_outerid(const char* value, size_t size);
  std::string* mutable_outerid();
  std::string* release_outerid();
  void set_allocated_outerid(std::string* outerid);
  private:
  const std::string& _internal_outerid() const;
  void _internal_set_outerid(const std::string& value);
  std::string* _internal_mutable_outerid();
  public:

  // required string outername = 5;
  bool has_outername() const;
  private:
  bool _internal_has_outername() const;
  public:
  void clear_outername();
  const std::string& outername() const;
  void set_outername(const std::string& value);
  void set_outername(std::string&& value);
  void set_outername(const char* value);
  void set_outername(const char* value, size_t size);
  std::string* mutable_outername();
  std::string* release_outername();
  void set_allocated_outername(std::string* outername);
  private:
  const std::string& _internal_outername() const;
  void _internal_set_outername(const std::string& value);
  std::string* _internal_mutable_outername();
  public:

  // required string duration = 6;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const std::string& duration() const;
  void set_duration(const std::string& value);
  void set_duration(std::string&& value);
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  std::string* mutable_duration();
  std::string* release_duration();
  void set_allocated_duration(std::string* duration);
  private:
  const std::string& _internal_duration() const;
  void _internal_set_duration(const std::string& value);
  std::string* _internal_mutable_duration();
  public:

  // required uint32 errcode = 1 [default = 0];
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqLanchVoteOut_SC)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lancherid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lanchername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqVote_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqVote_CS) */ {
 public:
  MSG_ReqVote_CS();
  virtual ~MSG_ReqVote_CS();

  MSG_ReqVote_CS(const MSG_ReqVote_CS& from);
  MSG_ReqVote_CS(MSG_ReqVote_CS&& from) noexcept
    : MSG_ReqVote_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqVote_CS& operator=(const MSG_ReqVote_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqVote_CS& operator=(MSG_ReqVote_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqVote_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqVote_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqVote_CS*>(
               &_MSG_ReqVote_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MSG_ReqVote_CS& a, MSG_ReqVote_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqVote_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqVote_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqVote_CS>(nullptr);
  }

  MSG_ReqVote_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqVote_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqVote_CS& from);
  void MergeFrom(const MSG_ReqVote_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqVote_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqVote_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYesornoFieldNumber = 1,
  };
  // required bool yesorno = 1 [default = false];
  bool has_yesorno() const;
  private:
  bool _internal_has_yesorno() const;
  public:
  void clear_yesorno();
  bool yesorno() const;
  void set_yesorno(bool value);
  private:
  bool _internal_yesorno() const;
  void _internal_set_yesorno(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqVote_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool yesorno_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqChangeLeader_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqChangeLeader_CS) */ {
 public:
  MSG_ReqChangeLeader_CS();
  virtual ~MSG_ReqChangeLeader_CS();

  MSG_ReqChangeLeader_CS(const MSG_ReqChangeLeader_CS& from);
  MSG_ReqChangeLeader_CS(MSG_ReqChangeLeader_CS&& from) noexcept
    : MSG_ReqChangeLeader_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqChangeLeader_CS& operator=(const MSG_ReqChangeLeader_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqChangeLeader_CS& operator=(MSG_ReqChangeLeader_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqChangeLeader_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqChangeLeader_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqChangeLeader_CS*>(
               &_MSG_ReqChangeLeader_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MSG_ReqChangeLeader_CS& a, MSG_ReqChangeLeader_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqChangeLeader_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqChangeLeader_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqChangeLeader_CS>(nullptr);
  }

  MSG_ReqChangeLeader_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqChangeLeader_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqChangeLeader_CS& from);
  void MergeFrom(const MSG_ReqChangeLeader_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqChangeLeader_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqChangeLeader_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToidFieldNumber = 1,
  };
  // required string toid = 1;
  bool has_toid() const;
  private:
  bool _internal_has_toid() const;
  public:
  void clear_toid();
  const std::string& toid() const;
  void set_toid(const std::string& value);
  void set_toid(std::string&& value);
  void set_toid(const char* value);
  void set_toid(const char* value, size_t size);
  std::string* mutable_toid();
  std::string* release_toid();
  void set_allocated_toid(std::string* toid);
  private:
  const std::string& _internal_toid() const;
  void _internal_set_toid(const std::string& value);
  std::string* _internal_mutable_toid();
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqChangeLeader_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqChangeLeader_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqChangeLeader_SC) */ {
 public:
  MSG_ReqChangeLeader_SC();
  virtual ~MSG_ReqChangeLeader_SC();

  MSG_ReqChangeLeader_SC(const MSG_ReqChangeLeader_SC& from);
  MSG_ReqChangeLeader_SC(MSG_ReqChangeLeader_SC&& from) noexcept
    : MSG_ReqChangeLeader_SC() {
    *this = ::std::move(from);
  }

  inline MSG_ReqChangeLeader_SC& operator=(const MSG_ReqChangeLeader_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqChangeLeader_SC& operator=(MSG_ReqChangeLeader_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqChangeLeader_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqChangeLeader_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqChangeLeader_SC*>(
               &_MSG_ReqChangeLeader_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MSG_ReqChangeLeader_SC& a, MSG_ReqChangeLeader_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqChangeLeader_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqChangeLeader_SC* New() const final {
    return CreateMaybeMessage<MSG_ReqChangeLeader_SC>(nullptr);
  }

  MSG_ReqChangeLeader_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqChangeLeader_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqChangeLeader_SC& from);
  void MergeFrom(const MSG_ReqChangeLeader_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqChangeLeader_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqChangeLeader_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewidFieldNumber = 1,
    kNewnameFieldNumber = 2,
  };
  // required string newid = 1;
  bool has_newid() const;
  private:
  bool _internal_has_newid() const;
  public:
  void clear_newid();
  const std::string& newid() const;
  void set_newid(const std::string& value);
  void set_newid(std::string&& value);
  void set_newid(const char* value);
  void set_newid(const char* value, size_t size);
  std::string* mutable_newid();
  std::string* release_newid();
  void set_allocated_newid(std::string* newid);
  private:
  const std::string& _internal_newid() const;
  void _internal_set_newid(const std::string& value);
  std::string* _internal_mutable_newid();
  public:

  // optional string newname = 2;
  bool has_newname() const;
  private:
  bool _internal_has_newname() const;
  public:
  void clear_newname();
  const std::string& newname() const;
  void set_newname(const std::string& value);
  void set_newname(std::string&& value);
  void set_newname(const char* value);
  void set_newname(const char* value, size_t size);
  std::string* mutable_newname();
  std::string* release_newname();
  void set_allocated_newname(std::string* newname);
  private:
  const std::string& _internal_newname() const;
  void _internal_set_newname(const std::string& value);
  std::string* _internal_mutable_newname();
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqChangeLeader_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newname_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqNearByUnteamedPlayer_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqNearByUnteamedPlayer_CS) */ {
 public:
  MSG_ReqNearByUnteamedPlayer_CS();
  virtual ~MSG_ReqNearByUnteamedPlayer_CS();

  MSG_ReqNearByUnteamedPlayer_CS(const MSG_ReqNearByUnteamedPlayer_CS& from);
  MSG_ReqNearByUnteamedPlayer_CS(MSG_ReqNearByUnteamedPlayer_CS&& from) noexcept
    : MSG_ReqNearByUnteamedPlayer_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqNearByUnteamedPlayer_CS& operator=(const MSG_ReqNearByUnteamedPlayer_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqNearByUnteamedPlayer_CS& operator=(MSG_ReqNearByUnteamedPlayer_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqNearByUnteamedPlayer_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqNearByUnteamedPlayer_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqNearByUnteamedPlayer_CS*>(
               &_MSG_ReqNearByUnteamedPlayer_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MSG_ReqNearByUnteamedPlayer_CS& a, MSG_ReqNearByUnteamedPlayer_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqNearByUnteamedPlayer_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqNearByUnteamedPlayer_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqNearByUnteamedPlayer_CS>(nullptr);
  }

  MSG_ReqNearByUnteamedPlayer_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqNearByUnteamedPlayer_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqNearByUnteamedPlayer_CS& from);
  void MergeFrom(const MSG_ReqNearByUnteamedPlayer_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqNearByUnteamedPlayer_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqNearByUnteamedPlayer_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqNearByUnteamedPlayer_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqNearByUnteamedPlayer_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqNearByUnteamedPlayer_SC) */ {
 public:
  MSG_ReqNearByUnteamedPlayer_SC();
  virtual ~MSG_ReqNearByUnteamedPlayer_SC();

  MSG_ReqNearByUnteamedPlayer_SC(const MSG_ReqNearByUnteamedPlayer_SC& from);
  MSG_ReqNearByUnteamedPlayer_SC(MSG_ReqNearByUnteamedPlayer_SC&& from) noexcept
    : MSG_ReqNearByUnteamedPlayer_SC() {
    *this = ::std::move(from);
  }

  inline MSG_ReqNearByUnteamedPlayer_SC& operator=(const MSG_ReqNearByUnteamedPlayer_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqNearByUnteamedPlayer_SC& operator=(MSG_ReqNearByUnteamedPlayer_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqNearByUnteamedPlayer_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqNearByUnteamedPlayer_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqNearByUnteamedPlayer_SC*>(
               &_MSG_ReqNearByUnteamedPlayer_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MSG_ReqNearByUnteamedPlayer_SC& a, MSG_ReqNearByUnteamedPlayer_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqNearByUnteamedPlayer_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqNearByUnteamedPlayer_SC* New() const final {
    return CreateMaybeMessage<MSG_ReqNearByUnteamedPlayer_SC>(nullptr);
  }

  MSG_ReqNearByUnteamedPlayer_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqNearByUnteamedPlayer_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqNearByUnteamedPlayer_SC& from);
  void MergeFrom(const MSG_ReqNearByUnteamedPlayer_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqNearByUnteamedPlayer_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqNearByUnteamedPlayer_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemFieldNumber = 1,
  };
  // repeated .Team.Memember mem = 1;
  int mem_size() const;
  private:
  int _internal_mem_size() const;
  public:
  void clear_mem();
  ::Team::Memember* mutable_mem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >*
      mutable_mem();
  private:
  const ::Team::Memember& _internal_mem(int index) const;
  ::Team::Memember* _internal_add_mem();
  public:
  const ::Team::Memember& mem(int index) const;
  ::Team::Memember* add_mem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >&
      mem() const;

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqNearByUnteamedPlayer_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember > mem_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_InviteIntoTeam_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_InviteIntoTeam_CS) */ {
 public:
  MSG_InviteIntoTeam_CS();
  virtual ~MSG_InviteIntoTeam_CS();

  MSG_InviteIntoTeam_CS(const MSG_InviteIntoTeam_CS& from);
  MSG_InviteIntoTeam_CS(MSG_InviteIntoTeam_CS&& from) noexcept
    : MSG_InviteIntoTeam_CS() {
    *this = ::std::move(from);
  }

  inline MSG_InviteIntoTeam_CS& operator=(const MSG_InviteIntoTeam_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_InviteIntoTeam_CS& operator=(MSG_InviteIntoTeam_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_InviteIntoTeam_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_InviteIntoTeam_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_InviteIntoTeam_CS*>(
               &_MSG_InviteIntoTeam_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MSG_InviteIntoTeam_CS& a, MSG_InviteIntoTeam_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_InviteIntoTeam_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_InviteIntoTeam_CS* New() const final {
    return CreateMaybeMessage<MSG_InviteIntoTeam_CS>(nullptr);
  }

  MSG_InviteIntoTeam_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_InviteIntoTeam_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_InviteIntoTeam_CS& from);
  void MergeFrom(const MSG_InviteIntoTeam_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_InviteIntoTeam_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_InviteIntoTeam_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteeidFieldNumber = 1,
  };
  // optional string inviteeid = 1;
  bool has_inviteeid() const;
  private:
  bool _internal_has_inviteeid() const;
  public:
  void clear_inviteeid();
  const std::string& inviteeid() const;
  void set_inviteeid(const std::string& value);
  void set_inviteeid(std::string&& value);
  void set_inviteeid(const char* value);
  void set_inviteeid(const char* value, size_t size);
  std::string* mutable_inviteeid();
  std::string* release_inviteeid();
  void set_allocated_inviteeid(std::string* inviteeid);
  private:
  const std::string& _internal_inviteeid() const;
  void _internal_set_inviteeid(const std::string& value);
  std::string* _internal_mutable_inviteeid();
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_InviteIntoTeam_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviteeid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_InviteIntoTeam_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_InviteIntoTeam_SC) */ {
 public:
  MSG_InviteIntoTeam_SC();
  virtual ~MSG_InviteIntoTeam_SC();

  MSG_InviteIntoTeam_SC(const MSG_InviteIntoTeam_SC& from);
  MSG_InviteIntoTeam_SC(MSG_InviteIntoTeam_SC&& from) noexcept
    : MSG_InviteIntoTeam_SC() {
    *this = ::std::move(from);
  }

  inline MSG_InviteIntoTeam_SC& operator=(const MSG_InviteIntoTeam_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_InviteIntoTeam_SC& operator=(MSG_InviteIntoTeam_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_InviteIntoTeam_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_InviteIntoTeam_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_InviteIntoTeam_SC*>(
               &_MSG_InviteIntoTeam_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MSG_InviteIntoTeam_SC& a, MSG_InviteIntoTeam_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_InviteIntoTeam_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_InviteIntoTeam_SC* New() const final {
    return CreateMaybeMessage<MSG_InviteIntoTeam_SC>(nullptr);
  }

  MSG_InviteIntoTeam_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_InviteIntoTeam_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_InviteIntoTeam_SC& from);
  void MergeFrom(const MSG_InviteIntoTeam_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_InviteIntoTeam_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_InviteIntoTeam_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrcodeFieldNumber = 1,
  };
  // optional uint32 errcode = 1 [default = 0];
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_InviteIntoTeam_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_AnswerInviteTeam_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_AnswerInviteTeam_CS) */ {
 public:
  MSG_AnswerInviteTeam_CS();
  virtual ~MSG_AnswerInviteTeam_CS();

  MSG_AnswerInviteTeam_CS(const MSG_AnswerInviteTeam_CS& from);
  MSG_AnswerInviteTeam_CS(MSG_AnswerInviteTeam_CS&& from) noexcept
    : MSG_AnswerInviteTeam_CS() {
    *this = ::std::move(from);
  }

  inline MSG_AnswerInviteTeam_CS& operator=(const MSG_AnswerInviteTeam_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_AnswerInviteTeam_CS& operator=(MSG_AnswerInviteTeam_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_AnswerInviteTeam_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_AnswerInviteTeam_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_AnswerInviteTeam_CS*>(
               &_MSG_AnswerInviteTeam_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MSG_AnswerInviteTeam_CS& a, MSG_AnswerInviteTeam_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_AnswerInviteTeam_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_AnswerInviteTeam_CS* New() const final {
    return CreateMaybeMessage<MSG_AnswerInviteTeam_CS>(nullptr);
  }

  MSG_AnswerInviteTeam_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_AnswerInviteTeam_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_AnswerInviteTeam_CS& from);
  void MergeFrom(const MSG_AnswerInviteTeam_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_AnswerInviteTeam_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_AnswerInviteTeam_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteridFieldNumber = 2,
    kInviteeidFieldNumber = 3,
    kYesornoFieldNumber = 1,
    kTeamidFieldNumber = 4,
  };
  // optional string inviterid = 2;
  bool has_inviterid() const;
  private:
  bool _internal_has_inviterid() const;
  public:
  void clear_inviterid();
  const std::string& inviterid() const;
  void set_inviterid(const std::string& value);
  void set_inviterid(std::string&& value);
  void set_inviterid(const char* value);
  void set_inviterid(const char* value, size_t size);
  std::string* mutable_inviterid();
  std::string* release_inviterid();
  void set_allocated_inviterid(std::string* inviterid);
  private:
  const std::string& _internal_inviterid() const;
  void _internal_set_inviterid(const std::string& value);
  std::string* _internal_mutable_inviterid();
  public:

  // optional string inviteeid = 3;
  bool has_inviteeid() const;
  private:
  bool _internal_has_inviteeid() const;
  public:
  void clear_inviteeid();
  const std::string& inviteeid() const;
  void set_inviteeid(const std::string& value);
  void set_inviteeid(std::string&& value);
  void set_inviteeid(const char* value);
  void set_inviteeid(const char* value, size_t size);
  std::string* mutable_inviteeid();
  std::string* release_inviteeid();
  void set_allocated_inviteeid(std::string* inviteeid);
  private:
  const std::string& _internal_inviteeid() const;
  void _internal_set_inviteeid(const std::string& value);
  std::string* _internal_mutable_inviteeid();
  public:

  // optional bool yesorno = 1 [default = false];
  bool has_yesorno() const;
  private:
  bool _internal_has_yesorno() const;
  public:
  void clear_yesorno();
  bool yesorno() const;
  void set_yesorno(bool value);
  private:
  bool _internal_yesorno() const;
  void _internal_set_yesorno(bool value);
  public:

  // optional uint32 teamid = 4;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_AnswerInviteTeam_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviterid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviteeid_;
  bool yesorno_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_AddMemember_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_AddMemember_SC) */ {
 public:
  MSG_AddMemember_SC();
  virtual ~MSG_AddMemember_SC();

  MSG_AddMemember_SC(const MSG_AddMemember_SC& from);
  MSG_AddMemember_SC(MSG_AddMemember_SC&& from) noexcept
    : MSG_AddMemember_SC() {
    *this = ::std::move(from);
  }

  inline MSG_AddMemember_SC& operator=(const MSG_AddMemember_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_AddMemember_SC& operator=(MSG_AddMemember_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_AddMemember_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_AddMemember_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_AddMemember_SC*>(
               &_MSG_AddMemember_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MSG_AddMemember_SC& a, MSG_AddMemember_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_AddMemember_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_AddMemember_SC* New() const final {
    return CreateMaybeMessage<MSG_AddMemember_SC>(nullptr);
  }

  MSG_AddMemember_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_AddMemember_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_AddMemember_SC& from);
  void MergeFrom(const MSG_AddMemember_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_AddMemember_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_AddMemember_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemFieldNumber = 1,
  };
  // optional .Team.Memember mem = 1;
  bool has_mem() const;
  private:
  bool _internal_has_mem() const;
  public:
  void clear_mem();
  const ::Team::Memember& mem() const;
  ::Team::Memember* release_mem();
  ::Team::Memember* mutable_mem();
  void set_allocated_mem(::Team::Memember* mem);
  private:
  const ::Team::Memember& _internal_mem() const;
  ::Team::Memember* _internal_mutable_mem();
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_AddMemember_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Team::Memember* mem_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_LeaderIgnoreNotice_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_LeaderIgnoreNotice_CS) */ {
 public:
  MSG_LeaderIgnoreNotice_CS();
  virtual ~MSG_LeaderIgnoreNotice_CS();

  MSG_LeaderIgnoreNotice_CS(const MSG_LeaderIgnoreNotice_CS& from);
  MSG_LeaderIgnoreNotice_CS(MSG_LeaderIgnoreNotice_CS&& from) noexcept
    : MSG_LeaderIgnoreNotice_CS() {
    *this = ::std::move(from);
  }

  inline MSG_LeaderIgnoreNotice_CS& operator=(const MSG_LeaderIgnoreNotice_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_LeaderIgnoreNotice_CS& operator=(MSG_LeaderIgnoreNotice_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_LeaderIgnoreNotice_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_LeaderIgnoreNotice_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_LeaderIgnoreNotice_CS*>(
               &_MSG_LeaderIgnoreNotice_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MSG_LeaderIgnoreNotice_CS& a, MSG_LeaderIgnoreNotice_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_LeaderIgnoreNotice_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_LeaderIgnoreNotice_CS* New() const final {
    return CreateMaybeMessage<MSG_LeaderIgnoreNotice_CS>(nullptr);
  }

  MSG_LeaderIgnoreNotice_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_LeaderIgnoreNotice_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_LeaderIgnoreNotice_CS& from);
  void MergeFrom(const MSG_LeaderIgnoreNotice_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_LeaderIgnoreNotice_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_LeaderIgnoreNotice_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_LeaderIgnoreNotice_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_updateTeamMememberHp_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_updateTeamMememberHp_SC) */ {
 public:
  MSG_updateTeamMememberHp_SC();
  virtual ~MSG_updateTeamMememberHp_SC();

  MSG_updateTeamMememberHp_SC(const MSG_updateTeamMememberHp_SC& from);
  MSG_updateTeamMememberHp_SC(MSG_updateTeamMememberHp_SC&& from) noexcept
    : MSG_updateTeamMememberHp_SC() {
    *this = ::std::move(from);
  }

  inline MSG_updateTeamMememberHp_SC& operator=(const MSG_updateTeamMememberHp_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_updateTeamMememberHp_SC& operator=(MSG_updateTeamMememberHp_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_updateTeamMememberHp_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_updateTeamMememberHp_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_updateTeamMememberHp_SC*>(
               &_MSG_updateTeamMememberHp_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MSG_updateTeamMememberHp_SC& a, MSG_updateTeamMememberHp_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_updateTeamMememberHp_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_updateTeamMememberHp_SC* New() const final {
    return CreateMaybeMessage<MSG_updateTeamMememberHp_SC>(nullptr);
  }

  MSG_updateTeamMememberHp_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_updateTeamMememberHp_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_updateTeamMememberHp_SC& from);
  void MergeFrom(const MSG_updateTeamMememberHp_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_updateTeamMememberHp_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_updateTeamMememberHp_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemidFieldNumber = 1,
    kHpFieldNumber = 2,
    kMaxhpFieldNumber = 3,
    kIsdeadFieldNumber = 4,
  };
  // optional string memid = 1;
  bool has_memid() const;
  private:
  bool _internal_has_memid() const;
  public:
  void clear_memid();
  const std::string& memid() const;
  void set_memid(const std::string& value);
  void set_memid(std::string&& value);
  void set_memid(const char* value);
  void set_memid(const char* value, size_t size);
  std::string* mutable_memid();
  std::string* release_memid();
  void set_allocated_memid(std::string* memid);
  private:
  const std::string& _internal_memid() const;
  void _internal_set_memid(const std::string& value);
  std::string* _internal_mutable_memid();
  public:

  // optional uint32 hp = 2;
  bool has_hp() const;
  private:
  bool _internal_has_hp() const;
  public:
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::uint32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 maxhp = 3;
  bool has_maxhp() const;
  private:
  bool _internal_has_maxhp() const;
  public:
  void clear_maxhp();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxhp() const;
  void _internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool isdead = 4 [default = false];
  bool has_isdead() const;
  private:
  bool _internal_has_isdead() const;
  public:
  void clear_isdead();
  bool isdead() const;
  void set_isdead(bool value);
  private:
  bool _internal_isdead() const;
  void _internal_set_isdead(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_updateTeamMememberHp_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxhp_;
  bool isdead_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_updateTeamMememberCareer_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_updateTeamMememberCareer_SC) */ {
 public:
  MSG_updateTeamMememberCareer_SC();
  virtual ~MSG_updateTeamMememberCareer_SC();

  MSG_updateTeamMememberCareer_SC(const MSG_updateTeamMememberCareer_SC& from);
  MSG_updateTeamMememberCareer_SC(MSG_updateTeamMememberCareer_SC&& from) noexcept
    : MSG_updateTeamMememberCareer_SC() {
    *this = ::std::move(from);
  }

  inline MSG_updateTeamMememberCareer_SC& operator=(const MSG_updateTeamMememberCareer_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_updateTeamMememberCareer_SC& operator=(MSG_updateTeamMememberCareer_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_updateTeamMememberCareer_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_updateTeamMememberCareer_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_updateTeamMememberCareer_SC*>(
               &_MSG_updateTeamMememberCareer_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MSG_updateTeamMememberCareer_SC& a, MSG_updateTeamMememberCareer_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_updateTeamMememberCareer_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_updateTeamMememberCareer_SC* New() const final {
    return CreateMaybeMessage<MSG_updateTeamMememberCareer_SC>(nullptr);
  }

  MSG_updateTeamMememberCareer_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_updateTeamMememberCareer_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_updateTeamMememberCareer_SC& from);
  void MergeFrom(const MSG_updateTeamMememberCareer_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_updateTeamMememberCareer_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_updateTeamMememberCareer_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMememberidFieldNumber = 1,
    kCareerFieldNumber = 2,
    kCareerlevelFieldNumber = 3,
  };
  // optional string mememberid = 1;
  bool has_mememberid() const;
  private:
  bool _internal_has_mememberid() const;
  public:
  void clear_mememberid();
  const std::string& mememberid() const;
  void set_mememberid(const std::string& value);
  void set_mememberid(std::string&& value);
  void set_mememberid(const char* value);
  void set_mememberid(const char* value, size_t size);
  std::string* mutable_mememberid();
  std::string* release_mememberid();
  void set_allocated_mememberid(std::string* mememberid);
  private:
  const std::string& _internal_mememberid() const;
  void _internal_set_mememberid(const std::string& value);
  std::string* _internal_mutable_mememberid();
  public:

  // optional uint32 career = 2;
  bool has_career() const;
  private:
  bool _internal_has_career() const;
  public:
  void clear_career();
  ::PROTOBUF_NAMESPACE_ID::uint32 career() const;
  void set_career(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_career() const;
  void _internal_set_career(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 careerlevel = 3;
  bool has_careerlevel() const;
  private:
  bool _internal_has_careerlevel() const;
  public:
  void clear_careerlevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 careerlevel() const;
  void set_careerlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_careerlevel() const;
  void _internal_set_careerlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_updateTeamMememberCareer_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mememberid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 career_;
  ::PROTOBUF_NAMESPACE_ID::uint32 careerlevel_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_updateTeamMemeberHero_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_updateTeamMemeberHero_SC) */ {
 public:
  MSG_updateTeamMemeberHero_SC();
  virtual ~MSG_updateTeamMemeberHero_SC();

  MSG_updateTeamMemeberHero_SC(const MSG_updateTeamMemeberHero_SC& from);
  MSG_updateTeamMemeberHero_SC(MSG_updateTeamMemeberHero_SC&& from) noexcept
    : MSG_updateTeamMemeberHero_SC() {
    *this = ::std::move(from);
  }

  inline MSG_updateTeamMemeberHero_SC& operator=(const MSG_updateTeamMemeberHero_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_updateTeamMemeberHero_SC& operator=(MSG_updateTeamMemeberHero_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_updateTeamMemeberHero_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_updateTeamMemeberHero_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_updateTeamMemeberHero_SC*>(
               &_MSG_updateTeamMemeberHero_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(MSG_updateTeamMemeberHero_SC& a, MSG_updateTeamMemeberHero_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_updateTeamMemeberHero_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_updateTeamMemeberHero_SC* New() const final {
    return CreateMaybeMessage<MSG_updateTeamMemeberHero_SC>(nullptr);
  }

  MSG_updateTeamMemeberHero_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_updateTeamMemeberHero_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_updateTeamMemeberHero_SC& from);
  void MergeFrom(const MSG_updateTeamMemeberHero_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_updateTeamMemeberHero_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_updateTeamMemeberHero_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemidFieldNumber = 1,
    kHeroidFieldNumber = 2,
  };
  // optional string memid = 1;
  bool has_memid() const;
  private:
  bool _internal_has_memid() const;
  public:
  void clear_memid();
  const std::string& memid() const;
  void set_memid(const std::string& value);
  void set_memid(std::string&& value);
  void set_memid(const char* value);
  void set_memid(const char* value, size_t size);
  std::string* mutable_memid();
  std::string* release_memid();
  void set_allocated_memid(std::string* memid);
  private:
  const std::string& _internal_memid() const;
  void _internal_set_memid(const std::string& value);
  std::string* _internal_mutable_memid();
  public:

  // optional uint32 heroid = 2;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid() const;
  void set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroid() const;
  void _internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_updateTeamMemeberHero_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_updateTeamMememberLevel_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_updateTeamMememberLevel_SC) */ {
 public:
  MSG_updateTeamMememberLevel_SC();
  virtual ~MSG_updateTeamMememberLevel_SC();

  MSG_updateTeamMememberLevel_SC(const MSG_updateTeamMememberLevel_SC& from);
  MSG_updateTeamMememberLevel_SC(MSG_updateTeamMememberLevel_SC&& from) noexcept
    : MSG_updateTeamMememberLevel_SC() {
    *this = ::std::move(from);
  }

  inline MSG_updateTeamMememberLevel_SC& operator=(const MSG_updateTeamMememberLevel_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_updateTeamMememberLevel_SC& operator=(MSG_updateTeamMememberLevel_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_updateTeamMememberLevel_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_updateTeamMememberLevel_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_updateTeamMememberLevel_SC*>(
               &_MSG_updateTeamMememberLevel_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(MSG_updateTeamMememberLevel_SC& a, MSG_updateTeamMememberLevel_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_updateTeamMememberLevel_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_updateTeamMememberLevel_SC* New() const final {
    return CreateMaybeMessage<MSG_updateTeamMememberLevel_SC>(nullptr);
  }

  MSG_updateTeamMememberLevel_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_updateTeamMememberLevel_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_updateTeamMememberLevel_SC& from);
  void MergeFrom(const MSG_updateTeamMememberLevel_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_updateTeamMememberLevel_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_updateTeamMememberLevel_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMememberidFieldNumber = 1,
    kMembernameFieldNumber = 3,
    kLevelFieldNumber = 2,
  };
  // optional string mememberid = 1;
  bool has_mememberid() const;
  private:
  bool _internal_has_mememberid() const;
  public:
  void clear_mememberid();
  const std::string& mememberid() const;
  void set_mememberid(const std::string& value);
  void set_mememberid(std::string&& value);
  void set_mememberid(const char* value);
  void set_mememberid(const char* value, size_t size);
  std::string* mutable_mememberid();
  std::string* release_mememberid();
  void set_allocated_mememberid(std::string* mememberid);
  private:
  const std::string& _internal_mememberid() const;
  void _internal_set_mememberid(const std::string& value);
  std::string* _internal_mutable_mememberid();
  public:

  // optional string membername = 3;
  bool has_membername() const;
  private:
  bool _internal_has_membername() const;
  public:
  void clear_membername();
  const std::string& membername() const;
  void set_membername(const std::string& value);
  void set_membername(std::string&& value);
  void set_membername(const char* value);
  void set_membername(const char* value, size_t size);
  std::string* mutable_membername();
  std::string* release_membername();
  void set_allocated_membername(std::string* membername);
  private:
  const std::string& _internal_membername() const;
  void _internal_set_membername(const std::string& value);
  std::string* _internal_mutable_membername();
  public:

  // optional uint32 level = 2;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_updateTeamMememberLevel_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mememberid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membername_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_updateTeamMemberFight_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_updateTeamMemberFight_SC) */ {
 public:
  MSG_updateTeamMemberFight_SC();
  virtual ~MSG_updateTeamMemberFight_SC();

  MSG_updateTeamMemberFight_SC(const MSG_updateTeamMemberFight_SC& from);
  MSG_updateTeamMemberFight_SC(MSG_updateTeamMemberFight_SC&& from) noexcept
    : MSG_updateTeamMemberFight_SC() {
    *this = ::std::move(from);
  }

  inline MSG_updateTeamMemberFight_SC& operator=(const MSG_updateTeamMemberFight_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_updateTeamMemberFight_SC& operator=(MSG_updateTeamMemberFight_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_updateTeamMemberFight_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_updateTeamMemberFight_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_updateTeamMemberFight_SC*>(
               &_MSG_updateTeamMemberFight_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(MSG_updateTeamMemberFight_SC& a, MSG_updateTeamMemberFight_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_updateTeamMemberFight_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_updateTeamMemberFight_SC* New() const final {
    return CreateMaybeMessage<MSG_updateTeamMemberFight_SC>(nullptr);
  }

  MSG_updateTeamMemberFight_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_updateTeamMemberFight_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_updateTeamMemberFight_SC& from);
  void MergeFrom(const MSG_updateTeamMemberFight_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_updateTeamMemberFight_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_updateTeamMemberFight_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMememberidFieldNumber = 1,
    kFightFieldNumber = 2,
    kHeroidFieldNumber = 3,
  };
  // optional string mememberid = 1;
  bool has_mememberid() const;
  private:
  bool _internal_has_mememberid() const;
  public:
  void clear_mememberid();
  const std::string& mememberid() const;
  void set_mememberid(const std::string& value);
  void set_mememberid(std::string&& value);
  void set_mememberid(const char* value);
  void set_mememberid(const char* value, size_t size);
  std::string* mutable_mememberid();
  std::string* release_mememberid();
  void set_allocated_mememberid(std::string* mememberid);
  private:
  const std::string& _internal_mememberid() const;
  void _internal_set_mememberid(const std::string& value);
  std::string* _internal_mutable_mememberid();
  public:

  // optional uint32 fight = 2;
  bool has_fight() const;
  private:
  bool _internal_has_fight() const;
  public:
  void clear_fight();
  ::PROTOBUF_NAMESPACE_ID::uint32 fight() const;
  void set_fight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fight() const;
  void _internal_set_fight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 heroid = 3;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid() const;
  void set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroid() const;
  void _internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_updateTeamMemberFight_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mememberid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqTeamMemberPos_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqTeamMemberPos_CS) */ {
 public:
  MSG_ReqTeamMemberPos_CS();
  virtual ~MSG_ReqTeamMemberPos_CS();

  MSG_ReqTeamMemberPos_CS(const MSG_ReqTeamMemberPos_CS& from);
  MSG_ReqTeamMemberPos_CS(MSG_ReqTeamMemberPos_CS&& from) noexcept
    : MSG_ReqTeamMemberPos_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqTeamMemberPos_CS& operator=(const MSG_ReqTeamMemberPos_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqTeamMemberPos_CS& operator=(MSG_ReqTeamMemberPos_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqTeamMemberPos_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqTeamMemberPos_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqTeamMemberPos_CS*>(
               &_MSG_ReqTeamMemberPos_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(MSG_ReqTeamMemberPos_CS& a, MSG_ReqTeamMemberPos_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqTeamMemberPos_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqTeamMemberPos_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqTeamMemberPos_CS>(nullptr);
  }

  MSG_ReqTeamMemberPos_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqTeamMemberPos_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqTeamMemberPos_CS& from);
  void MergeFrom(const MSG_ReqTeamMemberPos_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqTeamMemberPos_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqTeamMemberPos_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqTeamMemberPos_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MemberPos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MemberPos) */ {
 public:
  MemberPos();
  virtual ~MemberPos();

  MemberPos(const MemberPos& from);
  MemberPos(MemberPos&& from) noexcept
    : MemberPos() {
    *this = ::std::move(from);
  }

  inline MemberPos& operator=(const MemberPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemberPos& operator=(MemberPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemberPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberPos* internal_default_instance() {
    return reinterpret_cast<const MemberPos*>(
               &_MemberPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(MemberPos& a, MemberPos& b) {
    a.Swap(&b);
  }
  inline void Swap(MemberPos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemberPos* New() const final {
    return CreateMaybeMessage<MemberPos>(nullptr);
  }

  MemberPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemberPos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemberPos& from);
  void MergeFrom(const MemberPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemberPos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MemberPos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberidFieldNumber = 1,
    kSceneidFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // optional string memberid = 1;
  bool has_memberid() const;
  private:
  bool _internal_has_memberid() const;
  public:
  void clear_memberid();
  const std::string& memberid() const;
  void set_memberid(const std::string& value);
  void set_memberid(std::string&& value);
  void set_memberid(const char* value);
  void set_memberid(const char* value, size_t size);
  std::string* mutable_memberid();
  std::string* release_memberid();
  void set_allocated_memberid(std::string* memberid);
  private:
  const std::string& _internal_memberid() const;
  void _internal_set_memberid(const std::string& value);
  std::string* _internal_mutable_memberid();
  public:

  // optional string sceneid = 2;
  bool has_sceneid() const;
  private:
  bool _internal_has_sceneid() const;
  public:
  void clear_sceneid();
  const std::string& sceneid() const;
  void set_sceneid(const std::string& value);
  void set_sceneid(std::string&& value);
  void set_sceneid(const char* value);
  void set_sceneid(const char* value, size_t size);
  std::string* mutable_sceneid();
  std::string* release_sceneid();
  void set_allocated_sceneid(std::string* sceneid);
  private:
  const std::string& _internal_sceneid() const;
  void _internal_set_sceneid(const std::string& value);
  std::string* _internal_mutable_sceneid();
  public:

  // optional uint32 x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MemberPos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memberid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sceneid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetTeamMemberPos_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetTeamMemberPos_SC) */ {
 public:
  MSG_RetTeamMemberPos_SC();
  virtual ~MSG_RetTeamMemberPos_SC();

  MSG_RetTeamMemberPos_SC(const MSG_RetTeamMemberPos_SC& from);
  MSG_RetTeamMemberPos_SC(MSG_RetTeamMemberPos_SC&& from) noexcept
    : MSG_RetTeamMemberPos_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetTeamMemberPos_SC& operator=(const MSG_RetTeamMemberPos_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetTeamMemberPos_SC& operator=(MSG_RetTeamMemberPos_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetTeamMemberPos_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetTeamMemberPos_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetTeamMemberPos_SC*>(
               &_MSG_RetTeamMemberPos_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(MSG_RetTeamMemberPos_SC& a, MSG_RetTeamMemberPos_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetTeamMemberPos_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetTeamMemberPos_SC* New() const final {
    return CreateMaybeMessage<MSG_RetTeamMemberPos_SC>(nullptr);
  }

  MSG_RetTeamMemberPos_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetTeamMemberPos_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetTeamMemberPos_SC& from);
  void MergeFrom(const MSG_RetTeamMemberPos_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetTeamMemberPos_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetTeamMemberPos_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // repeated .Team.MemberPos members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::Team::MemberPos* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MemberPos >*
      mutable_members();
  private:
  const ::Team::MemberPos& _internal_members(int index) const;
  ::Team::MemberPos* _internal_add_members();
  public:
  const ::Team::MemberPos& members(int index) const;
  ::Team::MemberPos* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MemberPos >&
      members() const;

  // @@protoc_insertion_point(class_scope:Team.MSG_RetTeamMemberPos_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MemberPos > members_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetNearByUnteamedInvite_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetNearByUnteamedInvite_SC) */ {
 public:
  MSG_RetNearByUnteamedInvite_SC();
  virtual ~MSG_RetNearByUnteamedInvite_SC();

  MSG_RetNearByUnteamedInvite_SC(const MSG_RetNearByUnteamedInvite_SC& from);
  MSG_RetNearByUnteamedInvite_SC(MSG_RetNearByUnteamedInvite_SC&& from) noexcept
    : MSG_RetNearByUnteamedInvite_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetNearByUnteamedInvite_SC& operator=(const MSG_RetNearByUnteamedInvite_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetNearByUnteamedInvite_SC& operator=(MSG_RetNearByUnteamedInvite_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetNearByUnteamedInvite_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetNearByUnteamedInvite_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetNearByUnteamedInvite_SC*>(
               &_MSG_RetNearByUnteamedInvite_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(MSG_RetNearByUnteamedInvite_SC& a, MSG_RetNearByUnteamedInvite_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetNearByUnteamedInvite_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetNearByUnteamedInvite_SC* New() const final {
    return CreateMaybeMessage<MSG_RetNearByUnteamedInvite_SC>(nullptr);
  }

  MSG_RetNearByUnteamedInvite_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetNearByUnteamedInvite_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetNearByUnteamedInvite_SC& from);
  void MergeFrom(const MSG_RetNearByUnteamedInvite_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetNearByUnteamedInvite_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetNearByUnteamedInvite_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviternameFieldNumber = 2,
    kInviteridFieldNumber = 3,
    kInviteenameFieldNumber = 4,
    kInviteeidFieldNumber = 5,
    kTeamnameFieldNumber = 6,
    kInviterFieldNumber = 1,
    kTeamidFieldNumber = 7,
  };
  // optional string invitername = 2;
  bool has_invitername() const;
  private:
  bool _internal_has_invitername() const;
  public:
  void clear_invitername();
  const std::string& invitername() const;
  void set_invitername(const std::string& value);
  void set_invitername(std::string&& value);
  void set_invitername(const char* value);
  void set_invitername(const char* value, size_t size);
  std::string* mutable_invitername();
  std::string* release_invitername();
  void set_allocated_invitername(std::string* invitername);
  private:
  const std::string& _internal_invitername() const;
  void _internal_set_invitername(const std::string& value);
  std::string* _internal_mutable_invitername();
  public:

  // optional string inviterid = 3;
  bool has_inviterid() const;
  private:
  bool _internal_has_inviterid() const;
  public:
  void clear_inviterid();
  const std::string& inviterid() const;
  void set_inviterid(const std::string& value);
  void set_inviterid(std::string&& value);
  void set_inviterid(const char* value);
  void set_inviterid(const char* value, size_t size);
  std::string* mutable_inviterid();
  std::string* release_inviterid();
  void set_allocated_inviterid(std::string* inviterid);
  private:
  const std::string& _internal_inviterid() const;
  void _internal_set_inviterid(const std::string& value);
  std::string* _internal_mutable_inviterid();
  public:

  // optional string inviteename = 4;
  bool has_inviteename() const;
  private:
  bool _internal_has_inviteename() const;
  public:
  void clear_inviteename();
  const std::string& inviteename() const;
  void set_inviteename(const std::string& value);
  void set_inviteename(std::string&& value);
  void set_inviteename(const char* value);
  void set_inviteename(const char* value, size_t size);
  std::string* mutable_inviteename();
  std::string* release_inviteename();
  void set_allocated_inviteename(std::string* inviteename);
  private:
  const std::string& _internal_inviteename() const;
  void _internal_set_inviteename(const std::string& value);
  std::string* _internal_mutable_inviteename();
  public:

  // optional string inviteeid = 5;
  bool has_inviteeid() const;
  private:
  bool _internal_has_inviteeid() const;
  public:
  void clear_inviteeid();
  const std::string& inviteeid() const;
  void set_inviteeid(const std::string& value);
  void set_inviteeid(std::string&& value);
  void set_inviteeid(const char* value);
  void set_inviteeid(const char* value, size_t size);
  std::string* mutable_inviteeid();
  std::string* release_inviteeid();
  void set_allocated_inviteeid(std::string* inviteeid);
  private:
  const std::string& _internal_inviteeid() const;
  void _internal_set_inviteeid(const std::string& value);
  std::string* _internal_mutable_inviteeid();
  public:

  // optional string teamname = 6;
  bool has_teamname() const;
  private:
  bool _internal_has_teamname() const;
  public:
  void clear_teamname();
  const std::string& teamname() const;
  void set_teamname(const std::string& value);
  void set_teamname(std::string&& value);
  void set_teamname(const char* value);
  void set_teamname(const char* value, size_t size);
  std::string* mutable_teamname();
  std::string* release_teamname();
  void set_allocated_teamname(std::string* teamname);
  private:
  const std::string& _internal_teamname() const;
  void _internal_set_teamname(const std::string& value);
  std::string* _internal_mutable_teamname();
  public:

  // optional .Team.Memember inviter = 1;
  bool has_inviter() const;
  private:
  bool _internal_has_inviter() const;
  public:
  void clear_inviter();
  const ::Team::Memember& inviter() const;
  ::Team::Memember* release_inviter();
  ::Team::Memember* mutable_inviter();
  void set_allocated_inviter(::Team::Memember* inviter);
  private:
  const ::Team::Memember& _internal_inviter() const;
  ::Team::Memember* _internal_mutable_inviter();
  public:

  // optional uint32 teamid = 7;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_RetNearByUnteamedInvite_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviterid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviteename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviteeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamname_;
  ::Team::Memember* inviter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetNewApply_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetNewApply_SC) */ {
 public:
  MSG_RetNewApply_SC();
  virtual ~MSG_RetNewApply_SC();

  MSG_RetNewApply_SC(const MSG_RetNewApply_SC& from);
  MSG_RetNewApply_SC(MSG_RetNewApply_SC&& from) noexcept
    : MSG_RetNewApply_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetNewApply_SC& operator=(const MSG_RetNewApply_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetNewApply_SC& operator=(MSG_RetNewApply_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetNewApply_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetNewApply_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetNewApply_SC*>(
               &_MSG_RetNewApply_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(MSG_RetNewApply_SC& a, MSG_RetNewApply_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetNewApply_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetNewApply_SC* New() const final {
    return CreateMaybeMessage<MSG_RetNewApply_SC>(nullptr);
  }

  MSG_RetNewApply_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetNewApply_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetNewApply_SC& from);
  void MergeFrom(const MSG_RetNewApply_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetNewApply_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetNewApply_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // optional uint32 count = 1;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_RetNewApply_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class teamDropItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.teamDropItem) */ {
 public:
  teamDropItem();
  virtual ~teamDropItem();

  teamDropItem(const teamDropItem& from);
  teamDropItem(teamDropItem&& from) noexcept
    : teamDropItem() {
    *this = ::std::move(from);
  }

  inline teamDropItem& operator=(const teamDropItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline teamDropItem& operator=(teamDropItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const teamDropItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const teamDropItem* internal_default_instance() {
    return reinterpret_cast<const teamDropItem*>(
               &_teamDropItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(teamDropItem& a, teamDropItem& b) {
    a.Swap(&b);
  }
  inline void Swap(teamDropItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline teamDropItem* New() const final {
    return CreateMaybeMessage<teamDropItem>(nullptr);
  }

  teamDropItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<teamDropItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const teamDropItem& from);
  void MergeFrom(const teamDropItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(teamDropItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.teamDropItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThisidFieldNumber = 1,
    kObjidFieldNumber = 2,
    kNumFieldNumber = 3,
    kBindFieldNumber = 4,
    kDuetimeFieldNumber = 5,
  };
  // optional string thisid = 1;
  bool has_thisid() const;
  private:
  bool _internal_has_thisid() const;
  public:
  void clear_thisid();
  const std::string& thisid() const;
  void set_thisid(const std::string& value);
  void set_thisid(std::string&& value);
  void set_thisid(const char* value);
  void set_thisid(const char* value, size_t size);
  std::string* mutable_thisid();
  std::string* release_thisid();
  void set_allocated_thisid(std::string* thisid);
  private:
  const std::string& _internal_thisid() const;
  void _internal_set_thisid(const std::string& value);
  std::string* _internal_mutable_thisid();
  public:

  // optional uint32 objid = 2;
  bool has_objid() const;
  private:
  bool _internal_has_objid() const;
  public:
  void clear_objid();
  ::PROTOBUF_NAMESPACE_ID::uint32 objid() const;
  void set_objid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objid() const;
  void _internal_set_objid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num = 3;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bind = 4;
  bool has_bind() const;
  private:
  bool _internal_has_bind() const;
  public:
  void clear_bind();
  ::PROTOBUF_NAMESPACE_ID::uint32 bind() const;
  void set_bind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bind() const;
  void _internal_set_bind(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duetime = 5;
  bool has_duetime() const;
  private:
  bool _internal_has_duetime() const;
  public:
  void clear_duetime();
  ::PROTOBUF_NAMESPACE_ID::uint32 duetime() const;
  void set_duetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duetime() const;
  void _internal_set_duetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.teamDropItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thisid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duetime_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetTeamPublicDrop_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetTeamPublicDrop_SC) */ {
 public:
  MSG_RetTeamPublicDrop_SC();
  virtual ~MSG_RetTeamPublicDrop_SC();

  MSG_RetTeamPublicDrop_SC(const MSG_RetTeamPublicDrop_SC& from);
  MSG_RetTeamPublicDrop_SC(MSG_RetTeamPublicDrop_SC&& from) noexcept
    : MSG_RetTeamPublicDrop_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetTeamPublicDrop_SC& operator=(const MSG_RetTeamPublicDrop_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetTeamPublicDrop_SC& operator=(MSG_RetTeamPublicDrop_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetTeamPublicDrop_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetTeamPublicDrop_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetTeamPublicDrop_SC*>(
               &_MSG_RetTeamPublicDrop_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(MSG_RetTeamPublicDrop_SC& a, MSG_RetTeamPublicDrop_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetTeamPublicDrop_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetTeamPublicDrop_SC* New() const final {
    return CreateMaybeMessage<MSG_RetTeamPublicDrop_SC>(nullptr);
  }

  MSG_RetTeamPublicDrop_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetTeamPublicDrop_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetTeamPublicDrop_SC& from);
  void MergeFrom(const MSG_RetTeamPublicDrop_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetTeamPublicDrop_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetTeamPublicDrop_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneitemFieldNumber = 1,
  };
  // repeated .Team.teamDropItem oneitem = 1;
  int oneitem_size() const;
  private:
  int _internal_oneitem_size() const;
  public:
  void clear_oneitem();
  ::Team::teamDropItem* mutable_oneitem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::teamDropItem >*
      mutable_oneitem();
  private:
  const ::Team::teamDropItem& _internal_oneitem(int index) const;
  ::Team::teamDropItem* _internal_add_oneitem();
  public:
  const ::Team::teamDropItem& oneitem(int index) const;
  ::Team::teamDropItem* add_oneitem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::teamDropItem >&
      oneitem() const;

  // @@protoc_insertion_point(class_scope:Team.MSG_RetTeamPublicDrop_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::teamDropItem > oneitem_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class ChooseTeamDropItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.ChooseTeamDropItem) */ {
 public:
  ChooseTeamDropItem();
  virtual ~ChooseTeamDropItem();

  ChooseTeamDropItem(const ChooseTeamDropItem& from);
  ChooseTeamDropItem(ChooseTeamDropItem&& from) noexcept
    : ChooseTeamDropItem() {
    *this = ::std::move(from);
  }

  inline ChooseTeamDropItem& operator=(const ChooseTeamDropItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChooseTeamDropItem& operator=(ChooseTeamDropItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChooseTeamDropItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChooseTeamDropItem* internal_default_instance() {
    return reinterpret_cast<const ChooseTeamDropItem*>(
               &_ChooseTeamDropItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ChooseTeamDropItem& a, ChooseTeamDropItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ChooseTeamDropItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChooseTeamDropItem* New() const final {
    return CreateMaybeMessage<ChooseTeamDropItem>(nullptr);
  }

  ChooseTeamDropItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChooseTeamDropItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChooseTeamDropItem& from);
  void MergeFrom(const ChooseTeamDropItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChooseTeamDropItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.ChooseTeamDropItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThisidFieldNumber = 1,
    kErrcodeFieldNumber = 3,
    kChooseFieldNumber = 2,
  };
  // optional string thisid = 1;
  bool has_thisid() const;
  private:
  bool _internal_has_thisid() const;
  public:
  void clear_thisid();
  const std::string& thisid() const;
  void set_thisid(const std::string& value);
  void set_thisid(std::string&& value);
  void set_thisid(const char* value);
  void set_thisid(const char* value, size_t size);
  std::string* mutable_thisid();
  std::string* release_thisid();
  void set_allocated_thisid(std::string* thisid);
  private:
  const std::string& _internal_thisid() const;
  void _internal_set_thisid(const std::string& value);
  std::string* _internal_mutable_thisid();
  public:

  // optional uint32 errcode = 3;
  bool has_errcode() const;
  private:
  bool _internal_has_errcode() const;
  public:
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Team.ChooseType choose = 2;
  bool has_choose() const;
  private:
  bool _internal_has_choose() const;
  public:
  void clear_choose();
  ::Team::ChooseType choose() const;
  void set_choose(::Team::ChooseType value);
  private:
  ::Team::ChooseType _internal_choose() const;
  void _internal_set_choose(::Team::ChooseType value);
  public:

  // @@protoc_insertion_point(class_scope:Team.ChooseTeamDropItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thisid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 errcode_;
  int choose_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqChooseTeamDrop_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqChooseTeamDrop_CS) */ {
 public:
  MSG_ReqChooseTeamDrop_CS();
  virtual ~MSG_ReqChooseTeamDrop_CS();

  MSG_ReqChooseTeamDrop_CS(const MSG_ReqChooseTeamDrop_CS& from);
  MSG_ReqChooseTeamDrop_CS(MSG_ReqChooseTeamDrop_CS&& from) noexcept
    : MSG_ReqChooseTeamDrop_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqChooseTeamDrop_CS& operator=(const MSG_ReqChooseTeamDrop_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqChooseTeamDrop_CS& operator=(MSG_ReqChooseTeamDrop_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqChooseTeamDrop_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqChooseTeamDrop_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqChooseTeamDrop_CS*>(
               &_MSG_ReqChooseTeamDrop_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(MSG_ReqChooseTeamDrop_CS& a, MSG_ReqChooseTeamDrop_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqChooseTeamDrop_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqChooseTeamDrop_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqChooseTeamDrop_CS>(nullptr);
  }

  MSG_ReqChooseTeamDrop_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqChooseTeamDrop_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqChooseTeamDrop_CS& from);
  void MergeFrom(const MSG_ReqChooseTeamDrop_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqChooseTeamDrop_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqChooseTeamDrop_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated .Team.ChooseTeamDropItem item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::Team::ChooseTeamDropItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::ChooseTeamDropItem >*
      mutable_item();
  private:
  const ::Team::ChooseTeamDropItem& _internal_item(int index) const;
  ::Team::ChooseTeamDropItem* _internal_add_item();
  public:
  const ::Team::ChooseTeamDropItem& item(int index) const;
  ::Team::ChooseTeamDropItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::ChooseTeamDropItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqChooseTeamDrop_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::ChooseTeamDropItem > item_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetChooseTeamDrop_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetChooseTeamDrop_SC) */ {
 public:
  MSG_RetChooseTeamDrop_SC();
  virtual ~MSG_RetChooseTeamDrop_SC();

  MSG_RetChooseTeamDrop_SC(const MSG_RetChooseTeamDrop_SC& from);
  MSG_RetChooseTeamDrop_SC(MSG_RetChooseTeamDrop_SC&& from) noexcept
    : MSG_RetChooseTeamDrop_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetChooseTeamDrop_SC& operator=(const MSG_RetChooseTeamDrop_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetChooseTeamDrop_SC& operator=(MSG_RetChooseTeamDrop_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetChooseTeamDrop_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetChooseTeamDrop_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetChooseTeamDrop_SC*>(
               &_MSG_RetChooseTeamDrop_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(MSG_RetChooseTeamDrop_SC& a, MSG_RetChooseTeamDrop_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetChooseTeamDrop_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetChooseTeamDrop_SC* New() const final {
    return CreateMaybeMessage<MSG_RetChooseTeamDrop_SC>(nullptr);
  }

  MSG_RetChooseTeamDrop_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetChooseTeamDrop_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetChooseTeamDrop_SC& from);
  void MergeFrom(const MSG_RetChooseTeamDrop_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetChooseTeamDrop_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetChooseTeamDrop_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // repeated .Team.ChooseTeamDropItem item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::Team::ChooseTeamDropItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::ChooseTeamDropItem >*
      mutable_item();
  private:
  const ::Team::ChooseTeamDropItem& _internal_item(int index) const;
  ::Team::ChooseTeamDropItem* _internal_add_item();
  public:
  const ::Team::ChooseTeamDropItem& item(int index) const;
  ::Team::ChooseTeamDropItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::ChooseTeamDropItem >&
      item() const;

  // @@protoc_insertion_point(class_scope:Team.MSG_RetChooseTeamDrop_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::ChooseTeamDropItem > item_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqSearchTeam_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqSearchTeam_CS) */ {
 public:
  MSG_ReqSearchTeam_CS();
  virtual ~MSG_ReqSearchTeam_CS();

  MSG_ReqSearchTeam_CS(const MSG_ReqSearchTeam_CS& from);
  MSG_ReqSearchTeam_CS(MSG_ReqSearchTeam_CS&& from) noexcept
    : MSG_ReqSearchTeam_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqSearchTeam_CS& operator=(const MSG_ReqSearchTeam_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqSearchTeam_CS& operator=(MSG_ReqSearchTeam_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqSearchTeam_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqSearchTeam_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqSearchTeam_CS*>(
               &_MSG_ReqSearchTeam_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(MSG_ReqSearchTeam_CS& a, MSG_ReqSearchTeam_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqSearchTeam_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqSearchTeam_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqSearchTeam_CS>(nullptr);
  }

  MSG_ReqSearchTeam_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqSearchTeam_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqSearchTeam_CS& from);
  void MergeFrom(const MSG_ReqSearchTeam_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqSearchTeam_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqSearchTeam_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamidFieldNumber = 1,
    kActivityidFieldNumber = 2,
    kNearbyFieldNumber = 3,
  };
  // optional uint32 teamid = 1;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 activityid = 2;
  bool has_activityid() const;
  private:
  bool _internal_has_activityid() const;
  public:
  void clear_activityid();
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid() const;
  void set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activityid() const;
  void _internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool nearby = 3;
  bool has_nearby() const;
  private:
  bool _internal_has_nearby() const;
  public:
  void clear_nearby();
  bool nearby() const;
  void set_nearby(bool value);
  private:
  bool _internal_nearby() const;
  void _internal_set_nearby(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqSearchTeam_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 teamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid_;
  bool nearby_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqSearchTeamByPage_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqSearchTeamByPage_CS) */ {
 public:
  MSG_ReqSearchTeamByPage_CS();
  virtual ~MSG_ReqSearchTeamByPage_CS();

  MSG_ReqSearchTeamByPage_CS(const MSG_ReqSearchTeamByPage_CS& from);
  MSG_ReqSearchTeamByPage_CS(MSG_ReqSearchTeamByPage_CS&& from) noexcept
    : MSG_ReqSearchTeamByPage_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqSearchTeamByPage_CS& operator=(const MSG_ReqSearchTeamByPage_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqSearchTeamByPage_CS& operator=(MSG_ReqSearchTeamByPage_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqSearchTeamByPage_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqSearchTeamByPage_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqSearchTeamByPage_CS*>(
               &_MSG_ReqSearchTeamByPage_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(MSG_ReqSearchTeamByPage_CS& a, MSG_ReqSearchTeamByPage_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqSearchTeamByPage_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqSearchTeamByPage_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqSearchTeamByPage_CS>(nullptr);
  }

  MSG_ReqSearchTeamByPage_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqSearchTeamByPage_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqSearchTeamByPage_CS& from);
  void MergeFrom(const MSG_ReqSearchTeamByPage_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqSearchTeamByPage_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqSearchTeamByPage_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageFieldNumber = 1,
    kNearbyFieldNumber = 2,
  };
  // optional uint32 page = 1;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool nearby = 2;
  bool has_nearby() const;
  private:
  bool _internal_has_nearby() const;
  public:
  void clear_nearby();
  bool nearby() const;
  void set_nearby(bool value);
  private:
  bool _internal_nearby() const;
  void _internal_set_nearby(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqSearchTeamByPage_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  bool nearby_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetSearchTeam_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetSearchTeam_SC) */ {
 public:
  MSG_RetSearchTeam_SC();
  virtual ~MSG_RetSearchTeam_SC();

  MSG_RetSearchTeam_SC(const MSG_RetSearchTeam_SC& from);
  MSG_RetSearchTeam_SC(MSG_RetSearchTeam_SC&& from) noexcept
    : MSG_RetSearchTeam_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetSearchTeam_SC& operator=(const MSG_RetSearchTeam_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetSearchTeam_SC& operator=(MSG_RetSearchTeam_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetSearchTeam_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetSearchTeam_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetSearchTeam_SC*>(
               &_MSG_RetSearchTeam_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(MSG_RetSearchTeam_SC& a, MSG_RetSearchTeam_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetSearchTeam_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetSearchTeam_SC* New() const final {
    return CreateMaybeMessage<MSG_RetSearchTeam_SC>(nullptr);
  }

  MSG_RetSearchTeam_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetSearchTeam_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetSearchTeam_SC& from);
  void MergeFrom(const MSG_RetSearchTeam_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetSearchTeam_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetSearchTeam_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamlistFieldNumber = 3,
    kTotalpageFieldNumber = 1,
    kPageFieldNumber = 2,
  };
  // repeated .Team.MSG_TeamMemeberList_SC teamlist = 3;
  int teamlist_size() const;
  private:
  int _internal_teamlist_size() const;
  public:
  void clear_teamlist();
  ::Team::MSG_TeamMemeberList_SC* mutable_teamlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MSG_TeamMemeberList_SC >*
      mutable_teamlist();
  private:
  const ::Team::MSG_TeamMemeberList_SC& _internal_teamlist(int index) const;
  ::Team::MSG_TeamMemeberList_SC* _internal_add_teamlist();
  public:
  const ::Team::MSG_TeamMemeberList_SC& teamlist(int index) const;
  ::Team::MSG_TeamMemeberList_SC* add_teamlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MSG_TeamMemeberList_SC >&
      teamlist() const;

  // optional uint32 totalpage = 1;
  bool has_totalpage() const;
  private:
  bool _internal_has_totalpage() const;
  public:
  void clear_totalpage();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalpage() const;
  void set_totalpage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalpage() const;
  void _internal_set_totalpage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 page = 2;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_RetSearchTeam_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MSG_TeamMemeberList_SC > teamlist_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalpage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqChangeActivityTarget_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqChangeActivityTarget_CS) */ {
 public:
  MSG_ReqChangeActivityTarget_CS();
  virtual ~MSG_ReqChangeActivityTarget_CS();

  MSG_ReqChangeActivityTarget_CS(const MSG_ReqChangeActivityTarget_CS& from);
  MSG_ReqChangeActivityTarget_CS(MSG_ReqChangeActivityTarget_CS&& from) noexcept
    : MSG_ReqChangeActivityTarget_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqChangeActivityTarget_CS& operator=(const MSG_ReqChangeActivityTarget_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqChangeActivityTarget_CS& operator=(MSG_ReqChangeActivityTarget_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqChangeActivityTarget_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqChangeActivityTarget_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqChangeActivityTarget_CS*>(
               &_MSG_ReqChangeActivityTarget_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(MSG_ReqChangeActivityTarget_CS& a, MSG_ReqChangeActivityTarget_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqChangeActivityTarget_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqChangeActivityTarget_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqChangeActivityTarget_CS>(nullptr);
  }

  MSG_ReqChangeActivityTarget_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqChangeActivityTarget_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqChangeActivityTarget_CS& from);
  void MergeFrom(const MSG_ReqChangeActivityTarget_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqChangeActivityTarget_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqChangeActivityTarget_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityidFieldNumber = 1,
  };
  // optional uint32 activityid = 1;
  bool has_activityid() const;
  private:
  bool _internal_has_activityid() const;
  public:
  void clear_activityid();
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid() const;
  void set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activityid() const;
  void _internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqChangeActivityTarget_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetChangeActivityTarget_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetChangeActivityTarget_SC) */ {
 public:
  MSG_RetChangeActivityTarget_SC();
  virtual ~MSG_RetChangeActivityTarget_SC();

  MSG_RetChangeActivityTarget_SC(const MSG_RetChangeActivityTarget_SC& from);
  MSG_RetChangeActivityTarget_SC(MSG_RetChangeActivityTarget_SC&& from) noexcept
    : MSG_RetChangeActivityTarget_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetChangeActivityTarget_SC& operator=(const MSG_RetChangeActivityTarget_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetChangeActivityTarget_SC& operator=(MSG_RetChangeActivityTarget_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetChangeActivityTarget_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetChangeActivityTarget_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetChangeActivityTarget_SC*>(
               &_MSG_RetChangeActivityTarget_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(MSG_RetChangeActivityTarget_SC& a, MSG_RetChangeActivityTarget_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetChangeActivityTarget_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetChangeActivityTarget_SC* New() const final {
    return CreateMaybeMessage<MSG_RetChangeActivityTarget_SC>(nullptr);
  }

  MSG_RetChangeActivityTarget_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetChangeActivityTarget_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetChangeActivityTarget_SC& from);
  void MergeFrom(const MSG_RetChangeActivityTarget_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetChangeActivityTarget_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetChangeActivityTarget_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
    kActivityidFieldNumber = 2,
  };
  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 activityid = 2;
  bool has_activityid() const;
  private:
  bool _internal_has_activityid() const;
  public:
  void clear_activityid();
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid() const;
  void set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activityid() const;
  void _internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_RetChangeActivityTarget_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqMatch_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqMatch_CS) */ {
 public:
  MSG_ReqMatch_CS();
  virtual ~MSG_ReqMatch_CS();

  MSG_ReqMatch_CS(const MSG_ReqMatch_CS& from);
  MSG_ReqMatch_CS(MSG_ReqMatch_CS&& from) noexcept
    : MSG_ReqMatch_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqMatch_CS& operator=(const MSG_ReqMatch_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqMatch_CS& operator=(MSG_ReqMatch_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqMatch_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqMatch_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqMatch_CS*>(
               &_MSG_ReqMatch_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(MSG_ReqMatch_CS& a, MSG_ReqMatch_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqMatch_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqMatch_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqMatch_CS>(nullptr);
  }

  MSG_ReqMatch_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqMatch_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqMatch_CS& from);
  void MergeFrom(const MSG_ReqMatch_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqMatch_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqMatch_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityidFieldNumber = 1,
    kMinlevelFieldNumber = 2,
    kMaxlevelFieldNumber = 3,
  };
  // optional uint32 activityid = 1;
  bool has_activityid() const;
  private:
  bool _internal_has_activityid() const;
  public:
  void clear_activityid();
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid() const;
  void set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_activityid() const;
  void _internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 minlevel = 2;
  bool has_minlevel() const;
  private:
  bool _internal_has_minlevel() const;
  public:
  void clear_minlevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 minlevel() const;
  void set_minlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minlevel() const;
  void _internal_set_minlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 maxlevel = 3;
  bool has_maxlevel() const;
  private:
  bool _internal_has_maxlevel() const;
  public:
  void clear_maxlevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxlevel() const;
  void set_maxlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxlevel() const;
  void _internal_set_maxlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqMatch_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 activityid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minlevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxlevel_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetMatch_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetMatch_SC) */ {
 public:
  MSG_RetMatch_SC();
  virtual ~MSG_RetMatch_SC();

  MSG_RetMatch_SC(const MSG_RetMatch_SC& from);
  MSG_RetMatch_SC(MSG_RetMatch_SC&& from) noexcept
    : MSG_RetMatch_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetMatch_SC& operator=(const MSG_RetMatch_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetMatch_SC& operator=(MSG_RetMatch_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetMatch_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetMatch_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetMatch_SC*>(
               &_MSG_RetMatch_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(MSG_RetMatch_SC& a, MSG_RetMatch_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetMatch_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetMatch_SC* New() const final {
    return CreateMaybeMessage<MSG_RetMatch_SC>(nullptr);
  }

  MSG_RetMatch_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetMatch_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetMatch_SC& from);
  void MergeFrom(const MSG_RetMatch_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetMatch_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetMatch_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
    kNeedtimeFieldNumber = 2,
    kStarttimeFieldNumber = 3,
  };
  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 needtime = 2;
  bool has_needtime() const;
  private:
  bool _internal_has_needtime() const;
  public:
  void clear_needtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 needtime() const;
  void set_needtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_needtime() const;
  void _internal_set_needtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 starttime = 3;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_RetMatch_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 needtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 starttime_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqUnmatch_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqUnmatch_CS) */ {
 public:
  MSG_ReqUnmatch_CS();
  virtual ~MSG_ReqUnmatch_CS();

  MSG_ReqUnmatch_CS(const MSG_ReqUnmatch_CS& from);
  MSG_ReqUnmatch_CS(MSG_ReqUnmatch_CS&& from) noexcept
    : MSG_ReqUnmatch_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqUnmatch_CS& operator=(const MSG_ReqUnmatch_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqUnmatch_CS& operator=(MSG_ReqUnmatch_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqUnmatch_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqUnmatch_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqUnmatch_CS*>(
               &_MSG_ReqUnmatch_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(MSG_ReqUnmatch_CS& a, MSG_ReqUnmatch_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqUnmatch_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqUnmatch_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqUnmatch_CS>(nullptr);
  }

  MSG_ReqUnmatch_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqUnmatch_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqUnmatch_CS& from);
  void MergeFrom(const MSG_ReqUnmatch_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqUnmatch_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqUnmatch_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqUnmatch_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetUnmatch_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetUnmatch_SC) */ {
 public:
  MSG_RetUnmatch_SC();
  virtual ~MSG_RetUnmatch_SC();

  MSG_RetUnmatch_SC(const MSG_RetUnmatch_SC& from);
  MSG_RetUnmatch_SC(MSG_RetUnmatch_SC&& from) noexcept
    : MSG_RetUnmatch_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetUnmatch_SC& operator=(const MSG_RetUnmatch_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetUnmatch_SC& operator=(MSG_RetUnmatch_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetUnmatch_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetUnmatch_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetUnmatch_SC*>(
               &_MSG_RetUnmatch_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(MSG_RetUnmatch_SC& a, MSG_RetUnmatch_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetUnmatch_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetUnmatch_SC* New() const final {
    return CreateMaybeMessage<MSG_RetUnmatch_SC>(nullptr);
  }

  MSG_RetUnmatch_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetUnmatch_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetUnmatch_SC& from);
  void MergeFrom(const MSG_RetUnmatch_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetUnmatch_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetUnmatch_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetcodeFieldNumber = 1,
  };
  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_RetUnmatch_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetNotifyMatchSuccess_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetNotifyMatchSuccess_SC) */ {
 public:
  MSG_RetNotifyMatchSuccess_SC();
  virtual ~MSG_RetNotifyMatchSuccess_SC();

  MSG_RetNotifyMatchSuccess_SC(const MSG_RetNotifyMatchSuccess_SC& from);
  MSG_RetNotifyMatchSuccess_SC(MSG_RetNotifyMatchSuccess_SC&& from) noexcept
    : MSG_RetNotifyMatchSuccess_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetNotifyMatchSuccess_SC& operator=(const MSG_RetNotifyMatchSuccess_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetNotifyMatchSuccess_SC& operator=(MSG_RetNotifyMatchSuccess_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetNotifyMatchSuccess_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetNotifyMatchSuccess_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetNotifyMatchSuccess_SC*>(
               &_MSG_RetNotifyMatchSuccess_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(MSG_RetNotifyMatchSuccess_SC& a, MSG_RetNotifyMatchSuccess_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetNotifyMatchSuccess_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetNotifyMatchSuccess_SC* New() const final {
    return CreateMaybeMessage<MSG_RetNotifyMatchSuccess_SC>(nullptr);
  }

  MSG_RetNotifyMatchSuccess_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetNotifyMatchSuccess_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetNotifyMatchSuccess_SC& from);
  void MergeFrom(const MSG_RetNotifyMatchSuccess_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetNotifyMatchSuccess_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetNotifyMatchSuccess_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_RetNotifyMatchSuccess_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqMemberBackTeam_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqMemberBackTeam_CS) */ {
 public:
  MSG_ReqMemberBackTeam_CS();
  virtual ~MSG_ReqMemberBackTeam_CS();

  MSG_ReqMemberBackTeam_CS(const MSG_ReqMemberBackTeam_CS& from);
  MSG_ReqMemberBackTeam_CS(MSG_ReqMemberBackTeam_CS&& from) noexcept
    : MSG_ReqMemberBackTeam_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqMemberBackTeam_CS& operator=(const MSG_ReqMemberBackTeam_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqMemberBackTeam_CS& operator=(MSG_ReqMemberBackTeam_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqMemberBackTeam_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqMemberBackTeam_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqMemberBackTeam_CS*>(
               &_MSG_ReqMemberBackTeam_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(MSG_ReqMemberBackTeam_CS& a, MSG_ReqMemberBackTeam_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqMemberBackTeam_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqMemberBackTeam_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqMemberBackTeam_CS>(nullptr);
  }

  MSG_ReqMemberBackTeam_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqMemberBackTeam_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqMemberBackTeam_CS& from);
  void MergeFrom(const MSG_ReqMemberBackTeam_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqMemberBackTeam_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqMemberBackTeam_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqMemberBackTeam_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetMemberBackTeam_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetMemberBackTeam_SC) */ {
 public:
  MSG_RetMemberBackTeam_SC();
  virtual ~MSG_RetMemberBackTeam_SC();

  MSG_RetMemberBackTeam_SC(const MSG_RetMemberBackTeam_SC& from);
  MSG_RetMemberBackTeam_SC(MSG_RetMemberBackTeam_SC&& from) noexcept
    : MSG_RetMemberBackTeam_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetMemberBackTeam_SC& operator=(const MSG_RetMemberBackTeam_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetMemberBackTeam_SC& operator=(MSG_RetMemberBackTeam_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetMemberBackTeam_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetMemberBackTeam_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetMemberBackTeam_SC*>(
               &_MSG_RetMemberBackTeam_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(MSG_RetMemberBackTeam_SC& a, MSG_RetMemberBackTeam_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetMemberBackTeam_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetMemberBackTeam_SC* New() const final {
    return CreateMaybeMessage<MSG_RetMemberBackTeam_SC>(nullptr);
  }

  MSG_RetMemberBackTeam_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetMemberBackTeam_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetMemberBackTeam_SC& from);
  void MergeFrom(const MSG_RetMemberBackTeam_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetMemberBackTeam_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetMemberBackTeam_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRettypeFieldNumber = 1,
  };
  // optional uint32 rettype = 1;
  bool has_rettype() const;
  private:
  bool _internal_has_rettype() const;
  public:
  void clear_rettype();
  ::PROTOBUF_NAMESPACE_ID::uint32 rettype() const;
  void set_rettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rettype() const;
  void _internal_set_rettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_RetMemberBackTeam_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rettype_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_updateMemStateToTeam_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_updateMemStateToTeam_SC) */ {
 public:
  MSG_updateMemStateToTeam_SC();
  virtual ~MSG_updateMemStateToTeam_SC();

  MSG_updateMemStateToTeam_SC(const MSG_updateMemStateToTeam_SC& from);
  MSG_updateMemStateToTeam_SC(MSG_updateMemStateToTeam_SC&& from) noexcept
    : MSG_updateMemStateToTeam_SC() {
    *this = ::std::move(from);
  }

  inline MSG_updateMemStateToTeam_SC& operator=(const MSG_updateMemStateToTeam_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_updateMemStateToTeam_SC& operator=(MSG_updateMemStateToTeam_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_updateMemStateToTeam_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_updateMemStateToTeam_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_updateMemStateToTeam_SC*>(
               &_MSG_updateMemStateToTeam_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(MSG_updateMemStateToTeam_SC& a, MSG_updateMemStateToTeam_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_updateMemStateToTeam_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_updateMemStateToTeam_SC* New() const final {
    return CreateMaybeMessage<MSG_updateMemStateToTeam_SC>(nullptr);
  }

  MSG_updateMemStateToTeam_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_updateMemStateToTeam_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_updateMemStateToTeam_SC& from);
  void MergeFrom(const MSG_updateMemStateToTeam_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_updateMemStateToTeam_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_updateMemStateToTeam_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemidFieldNumber = 1,
    kSceneidFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // optional string memid = 1;
  bool has_memid() const;
  private:
  bool _internal_has_memid() const;
  public:
  void clear_memid();
  const std::string& memid() const;
  void set_memid(const std::string& value);
  void set_memid(std::string&& value);
  void set_memid(const char* value);
  void set_memid(const char* value, size_t size);
  std::string* mutable_memid();
  std::string* release_memid();
  void set_allocated_memid(std::string* memid);
  private:
  const std::string& _internal_memid() const;
  void _internal_set_memid(const std::string& value);
  std::string* _internal_mutable_memid();
  public:

  // optional string sceneid = 2;
  bool has_sceneid() const;
  private:
  bool _internal_has_sceneid() const;
  public:
  void clear_sceneid();
  const std::string& sceneid() const;
  void set_sceneid(const std::string& value);
  void set_sceneid(std::string&& value);
  void set_sceneid(const char* value);
  void set_sceneid(const char* value, size_t size);
  std::string* mutable_sceneid();
  std::string* release_sceneid();
  void set_allocated_sceneid(std::string* sceneid);
  private:
  const std::string& _internal_sceneid() const;
  void _internal_set_sceneid(const std::string& value);
  std::string* _internal_mutable_sceneid();
  public:

  // optional .Team.MemState state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::Team::MemState state() const;
  void set_state(::Team::MemState value);
  private:
  ::Team::MemState _internal_state() const;
  void _internal_set_state(::Team::MemState value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_updateMemStateToTeam_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sceneid_;
  int state_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqLeaderMapPos_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqLeaderMapPos_CS) */ {
 public:
  MSG_ReqLeaderMapPos_CS();
  virtual ~MSG_ReqLeaderMapPos_CS();

  MSG_ReqLeaderMapPos_CS(const MSG_ReqLeaderMapPos_CS& from);
  MSG_ReqLeaderMapPos_CS(MSG_ReqLeaderMapPos_CS&& from) noexcept
    : MSG_ReqLeaderMapPos_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqLeaderMapPos_CS& operator=(const MSG_ReqLeaderMapPos_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqLeaderMapPos_CS& operator=(MSG_ReqLeaderMapPos_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqLeaderMapPos_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqLeaderMapPos_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqLeaderMapPos_CS*>(
               &_MSG_ReqLeaderMapPos_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(MSG_ReqLeaderMapPos_CS& a, MSG_ReqLeaderMapPos_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqLeaderMapPos_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqLeaderMapPos_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqLeaderMapPos_CS>(nullptr);
  }

  MSG_ReqLeaderMapPos_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqLeaderMapPos_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqLeaderMapPos_CS& from);
  void MergeFrom(const MSG_ReqLeaderMapPos_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqLeaderMapPos_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqLeaderMapPos_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqLeaderMapPos_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetLeaderMapPos_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetLeaderMapPos_SC) */ {
 public:
  MSG_RetLeaderMapPos_SC();
  virtual ~MSG_RetLeaderMapPos_SC();

  MSG_RetLeaderMapPos_SC(const MSG_RetLeaderMapPos_SC& from);
  MSG_RetLeaderMapPos_SC(MSG_RetLeaderMapPos_SC&& from) noexcept
    : MSG_RetLeaderMapPos_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetLeaderMapPos_SC& operator=(const MSG_RetLeaderMapPos_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetLeaderMapPos_SC& operator=(MSG_RetLeaderMapPos_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetLeaderMapPos_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetLeaderMapPos_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetLeaderMapPos_SC*>(
               &_MSG_RetLeaderMapPos_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(MSG_RetLeaderMapPos_SC& a, MSG_RetLeaderMapPos_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetLeaderMapPos_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetLeaderMapPos_SC* New() const final {
    return CreateMaybeMessage<MSG_RetLeaderMapPos_SC>(nullptr);
  }

  MSG_RetLeaderMapPos_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetLeaderMapPos_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetLeaderMapPos_SC& from);
  void MergeFrom(const MSG_RetLeaderMapPos_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetLeaderMapPos_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetLeaderMapPos_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kRetcodeFieldNumber = 1,
  };
  // optional .Team.LeaderPosInfo pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Team::LeaderPosInfo& pos() const;
  ::Team::LeaderPosInfo* release_pos();
  ::Team::LeaderPosInfo* mutable_pos();
  void set_allocated_pos(::Team::LeaderPosInfo* pos);
  private:
  const ::Team::LeaderPosInfo& _internal_pos() const;
  ::Team::LeaderPosInfo* _internal_mutable_pos();
  public:

  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_RetLeaderMapPos_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Team::LeaderPosInfo* pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class LeaderPosInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.LeaderPosInfo) */ {
 public:
  LeaderPosInfo();
  virtual ~LeaderPosInfo();

  LeaderPosInfo(const LeaderPosInfo& from);
  LeaderPosInfo(LeaderPosInfo&& from) noexcept
    : LeaderPosInfo() {
    *this = ::std::move(from);
  }

  inline LeaderPosInfo& operator=(const LeaderPosInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderPosInfo& operator=(LeaderPosInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaderPosInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaderPosInfo* internal_default_instance() {
    return reinterpret_cast<const LeaderPosInfo*>(
               &_LeaderPosInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(LeaderPosInfo& a, LeaderPosInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderPosInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaderPosInfo* New() const final {
    return CreateMaybeMessage<LeaderPosInfo>(nullptr);
  }

  LeaderPosInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaderPosInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaderPosInfo& from);
  void MergeFrom(const LeaderPosInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderPosInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.LeaderPosInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneidFieldNumber = 2,
    kPosFieldNumber = 3,
    kValidFieldNumber = 1,
  };
  // optional string sceneid = 2;
  bool has_sceneid() const;
  private:
  bool _internal_has_sceneid() const;
  public:
  void clear_sceneid();
  const std::string& sceneid() const;
  void set_sceneid(const std::string& value);
  void set_sceneid(std::string&& value);
  void set_sceneid(const char* value);
  void set_sceneid(const char* value, size_t size);
  std::string* mutable_sceneid();
  std::string* release_sceneid();
  void set_allocated_sceneid(std::string* sceneid);
  private:
  const std::string& _internal_sceneid() const;
  void _internal_set_sceneid(const std::string& value);
  std::string* _internal_mutable_sceneid();
  public:

  // optional .Team.MemberPos pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Team::MemberPos& pos() const;
  ::Team::MemberPos* release_pos();
  ::Team::MemberPos* mutable_pos();
  void set_allocated_pos(::Team::MemberPos* pos);
  private:
  const ::Team::MemberPos& _internal_pos() const;
  ::Team::MemberPos* _internal_mutable_pos();
  public:

  // optional bool valid = 1 [default = false];
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Team.LeaderPosInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sceneid_;
  ::Team::MemberPos* pos_;
  bool valid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqChangeMapToLeader_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqChangeMapToLeader_CS) */ {
 public:
  MSG_ReqChangeMapToLeader_CS();
  virtual ~MSG_ReqChangeMapToLeader_CS();

  MSG_ReqChangeMapToLeader_CS(const MSG_ReqChangeMapToLeader_CS& from);
  MSG_ReqChangeMapToLeader_CS(MSG_ReqChangeMapToLeader_CS&& from) noexcept
    : MSG_ReqChangeMapToLeader_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqChangeMapToLeader_CS& operator=(const MSG_ReqChangeMapToLeader_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqChangeMapToLeader_CS& operator=(MSG_ReqChangeMapToLeader_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqChangeMapToLeader_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqChangeMapToLeader_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqChangeMapToLeader_CS*>(
               &_MSG_ReqChangeMapToLeader_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(MSG_ReqChangeMapToLeader_CS& a, MSG_ReqChangeMapToLeader_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqChangeMapToLeader_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqChangeMapToLeader_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqChangeMapToLeader_CS>(nullptr);
  }

  MSG_ReqChangeMapToLeader_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqChangeMapToLeader_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqChangeMapToLeader_CS& from);
  void MergeFrom(const MSG_ReqChangeMapToLeader_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqChangeMapToLeader_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqChangeMapToLeader_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneidFieldNumber = 1,
    kLeaderposFieldNumber = 2,
  };
  // optional string sceneid = 1;
  bool has_sceneid() const;
  private:
  bool _internal_has_sceneid() const;
  public:
  void clear_sceneid();
  const std::string& sceneid() const;
  void set_sceneid(const std::string& value);
  void set_sceneid(std::string&& value);
  void set_sceneid(const char* value);
  void set_sceneid(const char* value, size_t size);
  std::string* mutable_sceneid();
  std::string* release_sceneid();
  void set_allocated_sceneid(std::string* sceneid);
  private:
  const std::string& _internal_sceneid() const;
  void _internal_set_sceneid(const std::string& value);
  std::string* _internal_mutable_sceneid();
  public:

  // optional .Team.MemberPos leaderpos = 2;
  bool has_leaderpos() const;
  private:
  bool _internal_has_leaderpos() const;
  public:
  void clear_leaderpos();
  const ::Team::MemberPos& leaderpos() const;
  ::Team::MemberPos* release_leaderpos();
  ::Team::MemberPos* mutable_leaderpos();
  void set_allocated_leaderpos(::Team::MemberPos* leaderpos);
  private:
  const ::Team::MemberPos& _internal_leaderpos() const;
  ::Team::MemberPos* _internal_mutable_leaderpos();
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqChangeMapToLeader_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sceneid_;
  ::Team::MemberPos* leaderpos_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetChangeMapToLeader_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetChangeMapToLeader_SC) */ {
 public:
  MSG_RetChangeMapToLeader_SC();
  virtual ~MSG_RetChangeMapToLeader_SC();

  MSG_RetChangeMapToLeader_SC(const MSG_RetChangeMapToLeader_SC& from);
  MSG_RetChangeMapToLeader_SC(MSG_RetChangeMapToLeader_SC&& from) noexcept
    : MSG_RetChangeMapToLeader_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetChangeMapToLeader_SC& operator=(const MSG_RetChangeMapToLeader_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetChangeMapToLeader_SC& operator=(MSG_RetChangeMapToLeader_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetChangeMapToLeader_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetChangeMapToLeader_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetChangeMapToLeader_SC*>(
               &_MSG_RetChangeMapToLeader_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(MSG_RetChangeMapToLeader_SC& a, MSG_RetChangeMapToLeader_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetChangeMapToLeader_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetChangeMapToLeader_SC* New() const final {
    return CreateMaybeMessage<MSG_RetChangeMapToLeader_SC>(nullptr);
  }

  MSG_RetChangeMapToLeader_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetChangeMapToLeader_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetChangeMapToLeader_SC& from);
  void MergeFrom(const MSG_RetChangeMapToLeader_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetChangeMapToLeader_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetChangeMapToLeader_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kRetcodeFieldNumber = 1,
  };
  // optional .Team.LeaderPosInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::Team::LeaderPosInfo& info() const;
  ::Team::LeaderPosInfo* release_info();
  ::Team::LeaderPosInfo* mutable_info();
  void set_allocated_info(::Team::LeaderPosInfo* info);
  private:
  const ::Team::LeaderPosInfo& _internal_info() const;
  ::Team::LeaderPosInfo* _internal_mutable_info();
  public:

  // optional uint32 retcode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode() const;
  void set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_retcode() const;
  void _internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_RetChangeMapToLeader_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Team::LeaderPosInfo* info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 retcode_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_ReqLeaderAttackTarget_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_ReqLeaderAttackTarget_CS) */ {
 public:
  MSG_ReqLeaderAttackTarget_CS();
  virtual ~MSG_ReqLeaderAttackTarget_CS();

  MSG_ReqLeaderAttackTarget_CS(const MSG_ReqLeaderAttackTarget_CS& from);
  MSG_ReqLeaderAttackTarget_CS(MSG_ReqLeaderAttackTarget_CS&& from) noexcept
    : MSG_ReqLeaderAttackTarget_CS() {
    *this = ::std::move(from);
  }

  inline MSG_ReqLeaderAttackTarget_CS& operator=(const MSG_ReqLeaderAttackTarget_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ReqLeaderAttackTarget_CS& operator=(MSG_ReqLeaderAttackTarget_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ReqLeaderAttackTarget_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ReqLeaderAttackTarget_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_ReqLeaderAttackTarget_CS*>(
               &_MSG_ReqLeaderAttackTarget_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(MSG_ReqLeaderAttackTarget_CS& a, MSG_ReqLeaderAttackTarget_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ReqLeaderAttackTarget_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ReqLeaderAttackTarget_CS* New() const final {
    return CreateMaybeMessage<MSG_ReqLeaderAttackTarget_CS>(nullptr);
  }

  MSG_ReqLeaderAttackTarget_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ReqLeaderAttackTarget_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ReqLeaderAttackTarget_CS& from);
  void MergeFrom(const MSG_ReqLeaderAttackTarget_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ReqLeaderAttackTarget_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_ReqLeaderAttackTarget_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_ReqLeaderAttackTarget_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_RetLeaderAttackTarget_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_RetLeaderAttackTarget_SC) */ {
 public:
  MSG_RetLeaderAttackTarget_SC();
  virtual ~MSG_RetLeaderAttackTarget_SC();

  MSG_RetLeaderAttackTarget_SC(const MSG_RetLeaderAttackTarget_SC& from);
  MSG_RetLeaderAttackTarget_SC(MSG_RetLeaderAttackTarget_SC&& from) noexcept
    : MSG_RetLeaderAttackTarget_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RetLeaderAttackTarget_SC& operator=(const MSG_RetLeaderAttackTarget_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RetLeaderAttackTarget_SC& operator=(MSG_RetLeaderAttackTarget_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RetLeaderAttackTarget_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RetLeaderAttackTarget_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RetLeaderAttackTarget_SC*>(
               &_MSG_RetLeaderAttackTarget_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(MSG_RetLeaderAttackTarget_SC& a, MSG_RetLeaderAttackTarget_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RetLeaderAttackTarget_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RetLeaderAttackTarget_SC* New() const final {
    return CreateMaybeMessage<MSG_RetLeaderAttackTarget_SC>(nullptr);
  }

  MSG_RetLeaderAttackTarget_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RetLeaderAttackTarget_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RetLeaderAttackTarget_SC& from);
  void MergeFrom(const MSG_RetLeaderAttackTarget_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RetLeaderAttackTarget_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_RetLeaderAttackTarget_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // optional .Team.EntryIDType target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  ::Team::EntryIDType target() const;
  void set_target(::Team::EntryIDType value);
  private:
  ::Team::EntryIDType _internal_target() const;
  void _internal_set_target(::Team::EntryIDType value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_RetLeaderAttackTarget_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int target_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_notifyMemberLeaderIntoPublic_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_notifyMemberLeaderIntoPublic_SC) */ {
 public:
  MSG_notifyMemberLeaderIntoPublic_SC();
  virtual ~MSG_notifyMemberLeaderIntoPublic_SC();

  MSG_notifyMemberLeaderIntoPublic_SC(const MSG_notifyMemberLeaderIntoPublic_SC& from);
  MSG_notifyMemberLeaderIntoPublic_SC(MSG_notifyMemberLeaderIntoPublic_SC&& from) noexcept
    : MSG_notifyMemberLeaderIntoPublic_SC() {
    *this = ::std::move(from);
  }

  inline MSG_notifyMemberLeaderIntoPublic_SC& operator=(const MSG_notifyMemberLeaderIntoPublic_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_notifyMemberLeaderIntoPublic_SC& operator=(MSG_notifyMemberLeaderIntoPublic_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_notifyMemberLeaderIntoPublic_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_notifyMemberLeaderIntoPublic_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_notifyMemberLeaderIntoPublic_SC*>(
               &_MSG_notifyMemberLeaderIntoPublic_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(MSG_notifyMemberLeaderIntoPublic_SC& a, MSG_notifyMemberLeaderIntoPublic_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_notifyMemberLeaderIntoPublic_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_notifyMemberLeaderIntoPublic_SC* New() const final {
    return CreateMaybeMessage<MSG_notifyMemberLeaderIntoPublic_SC>(nullptr);
  }

  MSG_notifyMemberLeaderIntoPublic_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_notifyMemberLeaderIntoPublic_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_notifyMemberLeaderIntoPublic_SC& from);
  void MergeFrom(const MSG_notifyMemberLeaderIntoPublic_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_notifyMemberLeaderIntoPublic_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_notifyMemberLeaderIntoPublic_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_notifyMemberLeaderIntoPublic_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_notifyMemberOfflineHosting_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_notifyMemberOfflineHosting_SC) */ {
 public:
  MSG_notifyMemberOfflineHosting_SC();
  virtual ~MSG_notifyMemberOfflineHosting_SC();

  MSG_notifyMemberOfflineHosting_SC(const MSG_notifyMemberOfflineHosting_SC& from);
  MSG_notifyMemberOfflineHosting_SC(MSG_notifyMemberOfflineHosting_SC&& from) noexcept
    : MSG_notifyMemberOfflineHosting_SC() {
    *this = ::std::move(from);
  }

  inline MSG_notifyMemberOfflineHosting_SC& operator=(const MSG_notifyMemberOfflineHosting_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_notifyMemberOfflineHosting_SC& operator=(MSG_notifyMemberOfflineHosting_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_notifyMemberOfflineHosting_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_notifyMemberOfflineHosting_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_notifyMemberOfflineHosting_SC*>(
               &_MSG_notifyMemberOfflineHosting_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(MSG_notifyMemberOfflineHosting_SC& a, MSG_notifyMemberOfflineHosting_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_notifyMemberOfflineHosting_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_notifyMemberOfflineHosting_SC* New() const final {
    return CreateMaybeMessage<MSG_notifyMemberOfflineHosting_SC>(nullptr);
  }

  MSG_notifyMemberOfflineHosting_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_notifyMemberOfflineHosting_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_notifyMemberOfflineHosting_SC& from);
  void MergeFrom(const MSG_notifyMemberOfflineHosting_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_notifyMemberOfflineHosting_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_notifyMemberOfflineHosting_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_notifyMemberOfflineHosting_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_SetMemberPrivilege_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_Req_SetMemberPrivilege_CS) */ {
 public:
  MSG_Req_SetMemberPrivilege_CS();
  virtual ~MSG_Req_SetMemberPrivilege_CS();

  MSG_Req_SetMemberPrivilege_CS(const MSG_Req_SetMemberPrivilege_CS& from);
  MSG_Req_SetMemberPrivilege_CS(MSG_Req_SetMemberPrivilege_CS&& from) noexcept
    : MSG_Req_SetMemberPrivilege_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_SetMemberPrivilege_CS& operator=(const MSG_Req_SetMemberPrivilege_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_SetMemberPrivilege_CS& operator=(MSG_Req_SetMemberPrivilege_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_SetMemberPrivilege_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_SetMemberPrivilege_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_SetMemberPrivilege_CS*>(
               &_MSG_Req_SetMemberPrivilege_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(MSG_Req_SetMemberPrivilege_CS& a, MSG_Req_SetMemberPrivilege_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_SetMemberPrivilege_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_SetMemberPrivilege_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_SetMemberPrivilege_CS>(nullptr);
  }

  MSG_Req_SetMemberPrivilege_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_SetMemberPrivilege_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_SetMemberPrivilege_CS& from);
  void MergeFrom(const MSG_Req_SetMemberPrivilege_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_SetMemberPrivilege_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_Req_SetMemberPrivilege_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberidFieldNumber = 1,
    kSetFieldNumber = 3,
    kPrivilegeFieldNumber = 2,
  };
  // optional uint64 memberid = 1;
  bool has_memberid() const;
  private:
  bool _internal_has_memberid() const;
  public:
  void clear_memberid();
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid() const;
  void set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_memberid() const;
  void _internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool set = 3;
  bool has_set() const;
  private:
  bool _internal_has_set() const;
  public:
  void clear_set();
  bool set() const;
  void set_set(bool value);
  private:
  bool _internal_set() const;
  void _internal_set_set(bool value);
  public:

  // optional .Team.TeamPrivilege privilege = 2;
  bool has_privilege() const;
  private:
  bool _internal_has_privilege() const;
  public:
  void clear_privilege();
  ::Team::TeamPrivilege privilege() const;
  void set_privilege(::Team::TeamPrivilege value);
  private:
  ::Team::TeamPrivilege _internal_privilege() const;
  void _internal_set_privilege(::Team::TeamPrivilege value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_Req_SetMemberPrivilege_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid_;
  bool set_;
  int privilege_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_updateTeamMemberPrivilege_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_updateTeamMemberPrivilege_SC) */ {
 public:
  MSG_updateTeamMemberPrivilege_SC();
  virtual ~MSG_updateTeamMemberPrivilege_SC();

  MSG_updateTeamMemberPrivilege_SC(const MSG_updateTeamMemberPrivilege_SC& from);
  MSG_updateTeamMemberPrivilege_SC(MSG_updateTeamMemberPrivilege_SC&& from) noexcept
    : MSG_updateTeamMemberPrivilege_SC() {
    *this = ::std::move(from);
  }

  inline MSG_updateTeamMemberPrivilege_SC& operator=(const MSG_updateTeamMemberPrivilege_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_updateTeamMemberPrivilege_SC& operator=(MSG_updateTeamMemberPrivilege_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_updateTeamMemberPrivilege_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_updateTeamMemberPrivilege_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_updateTeamMemberPrivilege_SC*>(
               &_MSG_updateTeamMemberPrivilege_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(MSG_updateTeamMemberPrivilege_SC& a, MSG_updateTeamMemberPrivilege_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_updateTeamMemberPrivilege_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_updateTeamMemberPrivilege_SC* New() const final {
    return CreateMaybeMessage<MSG_updateTeamMemberPrivilege_SC>(nullptr);
  }

  MSG_updateTeamMemberPrivilege_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_updateTeamMemberPrivilege_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_updateTeamMemberPrivilege_SC& from);
  void MergeFrom(const MSG_updateTeamMemberPrivilege_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_updateTeamMemberPrivilege_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_updateTeamMemberPrivilege_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberidFieldNumber = 1,
    kPrivilegeFieldNumber = 2,
  };
  // optional uint64 memberid = 1;
  bool has_memberid() const;
  private:
  bool _internal_has_memberid() const;
  public:
  void clear_memberid();
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid() const;
  void set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_memberid() const;
  void _internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 privilege = 2;
  bool has_privilege() const;
  private:
  bool _internal_has_privilege() const;
  public:
  void clear_privilege();
  ::PROTOBUF_NAMESPACE_ID::uint32 privilege() const;
  void set_privilege(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_privilege() const;
  void _internal_set_privilege(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_updateTeamMemberPrivilege_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 privilege_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_checkUserTeamInfo_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_Req_checkUserTeamInfo_CS) */ {
 public:
  MSG_Req_checkUserTeamInfo_CS();
  virtual ~MSG_Req_checkUserTeamInfo_CS();

  MSG_Req_checkUserTeamInfo_CS(const MSG_Req_checkUserTeamInfo_CS& from);
  MSG_Req_checkUserTeamInfo_CS(MSG_Req_checkUserTeamInfo_CS&& from) noexcept
    : MSG_Req_checkUserTeamInfo_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_checkUserTeamInfo_CS& operator=(const MSG_Req_checkUserTeamInfo_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_checkUserTeamInfo_CS& operator=(MSG_Req_checkUserTeamInfo_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_checkUserTeamInfo_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_checkUserTeamInfo_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_checkUserTeamInfo_CS*>(
               &_MSG_Req_checkUserTeamInfo_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(MSG_Req_checkUserTeamInfo_CS& a, MSG_Req_checkUserTeamInfo_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_checkUserTeamInfo_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_checkUserTeamInfo_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_checkUserTeamInfo_CS>(nullptr);
  }

  MSG_Req_checkUserTeamInfo_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_checkUserTeamInfo_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_checkUserTeamInfo_CS& from);
  void MergeFrom(const MSG_Req_checkUserTeamInfo_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_checkUserTeamInfo_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_Req_checkUserTeamInfo_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberidFieldNumber = 1,
  };
  // optional uint64 memberid = 1;
  bool has_memberid() const;
  private:
  bool _internal_has_memberid() const;
  public:
  void clear_memberid();
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid() const;
  void set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_memberid() const;
  void _internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_Req_checkUserTeamInfo_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_Ret_checkUserTeamInfo_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_Ret_checkUserTeamInfo_SC) */ {
 public:
  MSG_Ret_checkUserTeamInfo_SC();
  virtual ~MSG_Ret_checkUserTeamInfo_SC();

  MSG_Ret_checkUserTeamInfo_SC(const MSG_Ret_checkUserTeamInfo_SC& from);
  MSG_Ret_checkUserTeamInfo_SC(MSG_Ret_checkUserTeamInfo_SC&& from) noexcept
    : MSG_Ret_checkUserTeamInfo_SC() {
    *this = ::std::move(from);
  }

  inline MSG_Ret_checkUserTeamInfo_SC& operator=(const MSG_Ret_checkUserTeamInfo_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Ret_checkUserTeamInfo_SC& operator=(MSG_Ret_checkUserTeamInfo_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Ret_checkUserTeamInfo_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Ret_checkUserTeamInfo_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_Ret_checkUserTeamInfo_SC*>(
               &_MSG_Ret_checkUserTeamInfo_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(MSG_Ret_checkUserTeamInfo_SC& a, MSG_Ret_checkUserTeamInfo_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Ret_checkUserTeamInfo_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Ret_checkUserTeamInfo_SC* New() const final {
    return CreateMaybeMessage<MSG_Ret_checkUserTeamInfo_SC>(nullptr);
  }

  MSG_Ret_checkUserTeamInfo_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Ret_checkUserTeamInfo_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Ret_checkUserTeamInfo_SC& from);
  void MergeFrom(const MSG_Ret_checkUserTeamInfo_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Ret_checkUserTeamInfo_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_Ret_checkUserTeamInfo_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberidFieldNumber = 1,
    kTeamidFieldNumber = 2,
    kOnlineFieldNumber = 3,
  };
  // optional uint64 memberid = 1;
  bool has_memberid() const;
  private:
  bool _internal_has_memberid() const;
  public:
  void clear_memberid();
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid() const;
  void set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_memberid() const;
  void _internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 teamid = 2;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 teamid() const;
  void set_teamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_teamid() const;
  void _internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool online = 3;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_Ret_checkUserTeamInfo_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 memberid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 teamid_;
  bool online_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_Req_DismissTeam_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_Req_DismissTeam_CS) */ {
 public:
  MSG_Req_DismissTeam_CS();
  virtual ~MSG_Req_DismissTeam_CS();

  MSG_Req_DismissTeam_CS(const MSG_Req_DismissTeam_CS& from);
  MSG_Req_DismissTeam_CS(MSG_Req_DismissTeam_CS&& from) noexcept
    : MSG_Req_DismissTeam_CS() {
    *this = ::std::move(from);
  }

  inline MSG_Req_DismissTeam_CS& operator=(const MSG_Req_DismissTeam_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_Req_DismissTeam_CS& operator=(MSG_Req_DismissTeam_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_Req_DismissTeam_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_Req_DismissTeam_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_Req_DismissTeam_CS*>(
               &_MSG_Req_DismissTeam_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(MSG_Req_DismissTeam_CS& a, MSG_Req_DismissTeam_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_Req_DismissTeam_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_Req_DismissTeam_CS* New() const final {
    return CreateMaybeMessage<MSG_Req_DismissTeam_CS>(nullptr);
  }

  MSG_Req_DismissTeam_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_Req_DismissTeam_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_Req_DismissTeam_CS& from);
  void MergeFrom(const MSG_Req_DismissTeam_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_Req_DismissTeam_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_Req_DismissTeam_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Team.MSG_Req_DismissTeam_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_NotifyTeamDismiss_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_NotifyTeamDismiss_SC) */ {
 public:
  MSG_NotifyTeamDismiss_SC();
  virtual ~MSG_NotifyTeamDismiss_SC();

  MSG_NotifyTeamDismiss_SC(const MSG_NotifyTeamDismiss_SC& from);
  MSG_NotifyTeamDismiss_SC(MSG_NotifyTeamDismiss_SC&& from) noexcept
    : MSG_NotifyTeamDismiss_SC() {
    *this = ::std::move(from);
  }

  inline MSG_NotifyTeamDismiss_SC& operator=(const MSG_NotifyTeamDismiss_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_NotifyTeamDismiss_SC& operator=(MSG_NotifyTeamDismiss_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_NotifyTeamDismiss_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_NotifyTeamDismiss_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_NotifyTeamDismiss_SC*>(
               &_MSG_NotifyTeamDismiss_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(MSG_NotifyTeamDismiss_SC& a, MSG_NotifyTeamDismiss_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_NotifyTeamDismiss_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_NotifyTeamDismiss_SC* New() const final {
    return CreateMaybeMessage<MSG_NotifyTeamDismiss_SC>(nullptr);
  }

  MSG_NotifyTeamDismiss_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_NotifyTeamDismiss_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_NotifyTeamDismiss_SC& from);
  void MergeFrom(const MSG_NotifyTeamDismiss_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_NotifyTeamDismiss_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_NotifyTeamDismiss_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSucFieldNumber = 1,
  };
  // optional bool suc = 1;
  bool has_suc() const;
  private:
  bool _internal_has_suc() const;
  public:
  void clear_suc();
  bool suc() const;
  void set_suc(bool value);
  private:
  bool _internal_suc() const;
  void _internal_set_suc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_NotifyTeamDismiss_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool suc_;
  friend struct ::TableStruct_team_2eproto;
};
// -------------------------------------------------------------------

class MSG_updateTeamMemberAvatar_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Team.MSG_updateTeamMemberAvatar_SC) */ {
 public:
  MSG_updateTeamMemberAvatar_SC();
  virtual ~MSG_updateTeamMemberAvatar_SC();

  MSG_updateTeamMemberAvatar_SC(const MSG_updateTeamMemberAvatar_SC& from);
  MSG_updateTeamMemberAvatar_SC(MSG_updateTeamMemberAvatar_SC&& from) noexcept
    : MSG_updateTeamMemberAvatar_SC() {
    *this = ::std::move(from);
  }

  inline MSG_updateTeamMemberAvatar_SC& operator=(const MSG_updateTeamMemberAvatar_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_updateTeamMemberAvatar_SC& operator=(MSG_updateTeamMemberAvatar_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_updateTeamMemberAvatar_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_updateTeamMemberAvatar_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_updateTeamMemberAvatar_SC*>(
               &_MSG_updateTeamMemberAvatar_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(MSG_updateTeamMemberAvatar_SC& a, MSG_updateTeamMemberAvatar_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_updateTeamMemberAvatar_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_updateTeamMemberAvatar_SC* New() const final {
    return CreateMaybeMessage<MSG_updateTeamMemberAvatar_SC>(nullptr);
  }

  MSG_updateTeamMemberAvatar_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_updateTeamMemberAvatar_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_updateTeamMemberAvatar_SC& from);
  void MergeFrom(const MSG_updateTeamMemberAvatar_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_updateTeamMemberAvatar_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Team.MSG_updateTeamMemberAvatar_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_team_2eproto);
    return ::descriptor_table_team_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMememberidFieldNumber = 1,
    kHairstyleFieldNumber = 2,
    kHaircolorFieldNumber = 3,
    kHeadstyleFieldNumber = 4,
    kBodystyleFieldNumber = 5,
    kAntennaFieldNumber = 6,
    kCoatFieldNumber = 7,
    kAvataridFieldNumber = 8,
  };
  // optional string mememberid = 1;
  bool has_mememberid() const;
  private:
  bool _internal_has_mememberid() const;
  public:
  void clear_mememberid();
  const std::string& mememberid() const;
  void set_mememberid(const std::string& value);
  void set_mememberid(std::string&& value);
  void set_mememberid(const char* value);
  void set_mememberid(const char* value, size_t size);
  std::string* mutable_mememberid();
  std::string* release_mememberid();
  void set_allocated_mememberid(std::string* mememberid);
  private:
  const std::string& _internal_mememberid() const;
  void _internal_set_mememberid(const std::string& value);
  std::string* _internal_mutable_mememberid();
  public:

  // optional uint32 hairstyle = 2;
  bool has_hairstyle() const;
  private:
  bool _internal_has_hairstyle() const;
  public:
  void clear_hairstyle();
  ::PROTOBUF_NAMESPACE_ID::uint32 hairstyle() const;
  void set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hairstyle() const;
  void _internal_set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 haircolor = 3;
  bool has_haircolor() const;
  private:
  bool _internal_has_haircolor() const;
  public:
  void clear_haircolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 haircolor() const;
  void set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_haircolor() const;
  void _internal_set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 headstyle = 4;
  bool has_headstyle() const;
  private:
  bool _internal_has_headstyle() const;
  public:
  void clear_headstyle();
  ::PROTOBUF_NAMESPACE_ID::uint32 headstyle() const;
  void set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_headstyle() const;
  void _internal_set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bodystyle = 5;
  bool has_bodystyle() const;
  private:
  bool _internal_has_bodystyle() const;
  public:
  void clear_bodystyle();
  ::PROTOBUF_NAMESPACE_ID::uint32 bodystyle() const;
  void set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bodystyle() const;
  void _internal_set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 antenna = 6;
  bool has_antenna() const;
  private:
  bool _internal_has_antenna() const;
  public:
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 coat = 7;
  bool has_coat() const;
  private:
  bool _internal_has_coat() const;
  public:
  void clear_coat();
  ::PROTOBUF_NAMESPACE_ID::uint32 coat() const;
  void set_coat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coat() const;
  void _internal_set_coat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avatarid = 8;
  bool has_avatarid() const;
  private:
  bool _internal_has_avatarid() const;
  public:
  void clear_avatarid();
  ::PROTOBUF_NAMESPACE_ID::uint32 avatarid() const;
  void set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avatarid() const;
  void _internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Team.MSG_updateTeamMemberAvatar_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mememberid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hairstyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 haircolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 headstyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bodystyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avatarid_;
  friend struct ::TableStruct_team_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_CreateTeam_CS

// required string name = 1;
inline bool MSG_CreateTeam_CS::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_CreateTeam_CS::has_name() const {
  return _internal_has_name();
}
inline void MSG_CreateTeam_CS::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_CreateTeam_CS::name() const {
  // @@protoc_insertion_point(field_get:Team.MSG_CreateTeam_CS.name)
  return _internal_name();
}
inline void MSG_CreateTeam_CS::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Team.MSG_CreateTeam_CS.name)
}
inline std::string* MSG_CreateTeam_CS::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_CreateTeam_CS.name)
  return _internal_mutable_name();
}
inline const std::string& MSG_CreateTeam_CS::_internal_name() const {
  return name_.GetNoArena();
}
inline void MSG_CreateTeam_CS::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_CreateTeam_CS::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_CreateTeam_CS.name)
}
inline void MSG_CreateTeam_CS::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_CreateTeam_CS.name)
}
inline void MSG_CreateTeam_CS::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_CreateTeam_CS.name)
}
inline std::string* MSG_CreateTeam_CS::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_CreateTeam_CS::release_name() {
  // @@protoc_insertion_point(field_release:Team.MSG_CreateTeam_CS.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_CreateTeam_CS::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_CreateTeam_CS.name)
}

// optional uint32 activityid = 2;
inline bool MSG_CreateTeam_CS::_internal_has_activityid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_CreateTeam_CS::has_activityid() const {
  return _internal_has_activityid();
}
inline void MSG_CreateTeam_CS::clear_activityid() {
  activityid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_CreateTeam_CS::_internal_activityid() const {
  return activityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_CreateTeam_CS::activityid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_CreateTeam_CS.activityid)
  return _internal_activityid();
}
inline void MSG_CreateTeam_CS::_internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  activityid_ = value;
}
inline void MSG_CreateTeam_CS::set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activityid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_CreateTeam_CS.activityid)
}

// -------------------------------------------------------------------

// Memember

// optional uint32 mark = 1;
inline bool Memember::_internal_has_mark() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Memember::has_mark() const {
  return _internal_has_mark();
}
inline void Memember::clear_mark() {
  mark_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_mark() const {
  return mark_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::mark() const {
  // @@protoc_insertion_point(field_get:Team.Memember.mark)
  return _internal_mark();
}
inline void Memember::_internal_set_mark(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  mark_ = value;
}
inline void Memember::set_mark(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mark(value);
  // @@protoc_insertion_point(field_set:Team.Memember.mark)
}

// optional string name = 2;
inline bool Memember::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Memember::has_name() const {
  return _internal_has_name();
}
inline void Memember::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Memember::name() const {
  // @@protoc_insertion_point(field_get:Team.Memember.name)
  return _internal_name();
}
inline void Memember::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Team.Memember.name)
}
inline std::string* Memember::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Team.Memember.name)
  return _internal_mutable_name();
}
inline const std::string& Memember::_internal_name() const {
  return name_.GetNoArena();
}
inline void Memember::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Memember::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.Memember.name)
}
inline void Memember::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.Memember.name)
}
inline void Memember::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.Memember.name)
}
inline std::string* Memember::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Memember::release_name() {
  // @@protoc_insertion_point(field_release:Team.Memember.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Memember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Team.Memember.name)
}

// optional uint32 occupation = 3;
inline bool Memember::_internal_has_occupation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Memember::has_occupation() const {
  return _internal_has_occupation();
}
inline void Memember::clear_occupation() {
  occupation_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_occupation() const {
  return occupation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::occupation() const {
  // @@protoc_insertion_point(field_get:Team.Memember.occupation)
  return _internal_occupation();
}
inline void Memember::_internal_set_occupation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  occupation_ = value;
}
inline void Memember::set_occupation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_occupation(value);
  // @@protoc_insertion_point(field_set:Team.Memember.occupation)
}

// optional uint32 level = 4;
inline bool Memember::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Memember::has_level() const {
  return _internal_has_level();
}
inline void Memember::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::level() const {
  // @@protoc_insertion_point(field_get:Team.Memember.level)
  return _internal_level();
}
inline void Memember::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  level_ = value;
}
inline void Memember::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Team.Memember.level)
}

// repeated uint32 skill = 5;
inline int Memember::_internal_skill_size() const {
  return skill_.size();
}
inline int Memember::skill_size() const {
  return _internal_skill_size();
}
inline void Memember::clear_skill() {
  skill_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_skill(int index) const {
  return skill_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::skill(int index) const {
  // @@protoc_insertion_point(field_get:Team.Memember.skill)
  return _internal_skill(index);
}
inline void Memember::set_skill(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  skill_.Set(index, value);
  // @@protoc_insertion_point(field_set:Team.Memember.skill)
}
inline void Memember::_internal_add_skill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  skill_.Add(value);
}
inline void Memember::add_skill(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_skill(value);
  // @@protoc_insertion_point(field_add:Team.Memember.skill)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Memember::_internal_skill() const {
  return skill_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Memember::skill() const {
  // @@protoc_insertion_point(field_list:Team.Memember.skill)
  return _internal_skill();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Memember::_internal_mutable_skill() {
  return &skill_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Memember::mutable_skill() {
  // @@protoc_insertion_point(field_mutable_list:Team.Memember.skill)
  return _internal_mutable_skill();
}

// optional string mememberid = 6;
inline bool Memember::_internal_has_mememberid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Memember::has_mememberid() const {
  return _internal_has_mememberid();
}
inline void Memember::clear_mememberid() {
  mememberid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Memember::mememberid() const {
  // @@protoc_insertion_point(field_get:Team.Memember.mememberid)
  return _internal_mememberid();
}
inline void Memember::set_mememberid(const std::string& value) {
  _internal_set_mememberid(value);
  // @@protoc_insertion_point(field_set:Team.Memember.mememberid)
}
inline std::string* Memember::mutable_mememberid() {
  // @@protoc_insertion_point(field_mutable:Team.Memember.mememberid)
  return _internal_mutable_mememberid();
}
inline const std::string& Memember::_internal_mememberid() const {
  return mememberid_.GetNoArena();
}
inline void Memember::_internal_set_mememberid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Memember::set_mememberid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mememberid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.Memember.mememberid)
}
inline void Memember::set_mememberid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.Memember.mememberid)
}
inline void Memember::set_mememberid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.Memember.mememberid)
}
inline std::string* Memember::_internal_mutable_mememberid() {
  _has_bits_[0] |= 0x00000002u;
  return mememberid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Memember::release_mememberid() {
  // @@protoc_insertion_point(field_release:Team.Memember.mememberid)
  if (!_internal_has_mememberid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mememberid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Memember::set_allocated_mememberid(std::string* mememberid) {
  if (mememberid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mememberid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mememberid);
  // @@protoc_insertion_point(field_set_allocated:Team.Memember.mememberid)
}

// optional uint32 hp = 7;
inline bool Memember::_internal_has_hp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Memember::has_hp() const {
  return _internal_has_hp();
}
inline void Memember::clear_hp() {
  hp_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::hp() const {
  // @@protoc_insertion_point(field_get:Team.Memember.hp)
  return _internal_hp();
}
inline void Memember::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  hp_ = value;
}
inline void Memember::set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Team.Memember.hp)
}

// optional uint32 maxhp = 8;
inline bool Memember::_internal_has_maxhp() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Memember::has_maxhp() const {
  return _internal_has_maxhp();
}
inline void Memember::clear_maxhp() {
  maxhp_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_maxhp() const {
  return maxhp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::maxhp() const {
  // @@protoc_insertion_point(field_get:Team.Memember.maxhp)
  return _internal_maxhp();
}
inline void Memember::_internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  maxhp_ = value;
}
inline void Memember::set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Team.Memember.maxhp)
}

// optional uint32 occupationlevel = 9;
inline bool Memember::_internal_has_occupationlevel() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Memember::has_occupationlevel() const {
  return _internal_has_occupationlevel();
}
inline void Memember::clear_occupationlevel() {
  occupationlevel_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_occupationlevel() const {
  return occupationlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::occupationlevel() const {
  // @@protoc_insertion_point(field_get:Team.Memember.occupationlevel)
  return _internal_occupationlevel();
}
inline void Memember::_internal_set_occupationlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  occupationlevel_ = value;
}
inline void Memember::set_occupationlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_occupationlevel(value);
  // @@protoc_insertion_point(field_set:Team.Memember.occupationlevel)
}

// optional uint32 heroid = 10;
inline bool Memember::_internal_has_heroid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Memember::has_heroid() const {
  return _internal_has_heroid();
}
inline void Memember::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_heroid() const {
  return heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::heroid() const {
  // @@protoc_insertion_point(field_get:Team.Memember.heroid)
  return _internal_heroid();
}
inline void Memember::_internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  heroid_ = value;
}
inline void Memember::set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:Team.Memember.heroid)
}

// optional uint32 fight = 11;
inline bool Memember::_internal_has_fight() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Memember::has_fight() const {
  return _internal_has_fight();
}
inline void Memember::clear_fight() {
  fight_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_fight() const {
  return fight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::fight() const {
  // @@protoc_insertion_point(field_get:Team.Memember.fight)
  return _internal_fight();
}
inline void Memember::_internal_set_fight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  fight_ = value;
}
inline void Memember::set_fight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fight(value);
  // @@protoc_insertion_point(field_set:Team.Memember.fight)
}

// optional string sceneid = 12;
inline bool Memember::_internal_has_sceneid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Memember::has_sceneid() const {
  return _internal_has_sceneid();
}
inline void Memember::clear_sceneid() {
  sceneid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Memember::sceneid() const {
  // @@protoc_insertion_point(field_get:Team.Memember.sceneid)
  return _internal_sceneid();
}
inline void Memember::set_sceneid(const std::string& value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:Team.Memember.sceneid)
}
inline std::string* Memember::mutable_sceneid() {
  // @@protoc_insertion_point(field_mutable:Team.Memember.sceneid)
  return _internal_mutable_sceneid();
}
inline const std::string& Memember::_internal_sceneid() const {
  return sceneid_.GetNoArena();
}
inline void Memember::_internal_set_sceneid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Memember::set_sceneid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sceneid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.Memember.sceneid)
}
inline void Memember::set_sceneid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.Memember.sceneid)
}
inline void Memember::set_sceneid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.Memember.sceneid)
}
inline std::string* Memember::_internal_mutable_sceneid() {
  _has_bits_[0] |= 0x00000004u;
  return sceneid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Memember::release_sceneid() {
  // @@protoc_insertion_point(field_release:Team.Memember.sceneid)
  if (!_internal_has_sceneid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sceneid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Memember::set_allocated_sceneid(std::string* sceneid) {
  if (sceneid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sceneid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sceneid);
  // @@protoc_insertion_point(field_set_allocated:Team.Memember.sceneid)
}

// optional .Team.MemState state = 13;
inline bool Memember::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Memember::has_state() const {
  return _internal_has_state();
}
inline void Memember::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::Team::MemState Memember::_internal_state() const {
  return static_cast< ::Team::MemState >(state_);
}
inline ::Team::MemState Memember::state() const {
  // @@protoc_insertion_point(field_get:Team.Memember.state)
  return _internal_state();
}
inline void Memember::_internal_set_state(::Team::MemState value) {
  assert(::Team::MemState_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  state_ = value;
}
inline void Memember::set_state(::Team::MemState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Team.Memember.state)
}

// optional uint32 privilege = 14;
inline bool Memember::_internal_has_privilege() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Memember::has_privilege() const {
  return _internal_has_privilege();
}
inline void Memember::clear_privilege() {
  privilege_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_privilege() const {
  return privilege_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::privilege() const {
  // @@protoc_insertion_point(field_get:Team.Memember.privilege)
  return _internal_privilege();
}
inline void Memember::_internal_set_privilege(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  privilege_ = value;
}
inline void Memember::set_privilege(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_privilege(value);
  // @@protoc_insertion_point(field_set:Team.Memember.privilege)
}

// optional uint32 hairstyle = 15;
inline bool Memember::_internal_has_hairstyle() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Memember::has_hairstyle() const {
  return _internal_has_hairstyle();
}
inline void Memember::clear_hairstyle() {
  hairstyle_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_hairstyle() const {
  return hairstyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::hairstyle() const {
  // @@protoc_insertion_point(field_get:Team.Memember.hairstyle)
  return _internal_hairstyle();
}
inline void Memember::_internal_set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  hairstyle_ = value;
}
inline void Memember::set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hairstyle(value);
  // @@protoc_insertion_point(field_set:Team.Memember.hairstyle)
}

// optional uint32 haircolor = 16;
inline bool Memember::_internal_has_haircolor() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Memember::has_haircolor() const {
  return _internal_has_haircolor();
}
inline void Memember::clear_haircolor() {
  haircolor_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_haircolor() const {
  return haircolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::haircolor() const {
  // @@protoc_insertion_point(field_get:Team.Memember.haircolor)
  return _internal_haircolor();
}
inline void Memember::_internal_set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  haircolor_ = value;
}
inline void Memember::set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_haircolor(value);
  // @@protoc_insertion_point(field_set:Team.Memember.haircolor)
}

// optional uint32 headstyle = 17;
inline bool Memember::_internal_has_headstyle() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Memember::has_headstyle() const {
  return _internal_has_headstyle();
}
inline void Memember::clear_headstyle() {
  headstyle_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_headstyle() const {
  return headstyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::headstyle() const {
  // @@protoc_insertion_point(field_get:Team.Memember.headstyle)
  return _internal_headstyle();
}
inline void Memember::_internal_set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  headstyle_ = value;
}
inline void Memember::set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_headstyle(value);
  // @@protoc_insertion_point(field_set:Team.Memember.headstyle)
}

// optional uint32 bodystyle = 18;
inline bool Memember::_internal_has_bodystyle() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Memember::has_bodystyle() const {
  return _internal_has_bodystyle();
}
inline void Memember::clear_bodystyle() {
  bodystyle_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_bodystyle() const {
  return bodystyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::bodystyle() const {
  // @@protoc_insertion_point(field_get:Team.Memember.bodystyle)
  return _internal_bodystyle();
}
inline void Memember::_internal_set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  bodystyle_ = value;
}
inline void Memember::set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bodystyle(value);
  // @@protoc_insertion_point(field_set:Team.Memember.bodystyle)
}

// optional uint32 antenna = 19;
inline bool Memember::_internal_has_antenna() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Memember::has_antenna() const {
  return _internal_has_antenna();
}
inline void Memember::clear_antenna() {
  antenna_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::antenna() const {
  // @@protoc_insertion_point(field_get:Team.Memember.antenna)
  return _internal_antenna();
}
inline void Memember::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  antenna_ = value;
}
inline void Memember::set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:Team.Memember.antenna)
}

// optional uint32 avatarid = 20;
inline bool Memember::_internal_has_avatarid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Memember::has_avatarid() const {
  return _internal_has_avatarid();
}
inline void Memember::clear_avatarid() {
  avatarid_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::_internal_avatarid() const {
  return avatarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Memember::avatarid() const {
  // @@protoc_insertion_point(field_get:Team.Memember.avatarid)
  return _internal_avatarid();
}
inline void Memember::_internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  avatarid_ = value;
}
inline void Memember::set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avatarid(value);
  // @@protoc_insertion_point(field_set:Team.Memember.avatarid)
}

// -------------------------------------------------------------------

// MSG_TeamMemeberList_CS

// -------------------------------------------------------------------

// MSG_TeamMemeberList_SC

// optional uint32 id = 1;
inline bool MSG_TeamMemeberList_SC::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_TeamMemeberList_SC::has_id() const {
  return _internal_has_id();
}
inline void MSG_TeamMemeberList_SC::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_TeamMemeberList_SC::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_TeamMemeberList_SC::id() const {
  // @@protoc_insertion_point(field_get:Team.MSG_TeamMemeberList_SC.id)
  return _internal_id();
}
inline void MSG_TeamMemeberList_SC::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void MSG_TeamMemeberList_SC::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Team.MSG_TeamMemeberList_SC.id)
}

// optional string name = 2;
inline bool MSG_TeamMemeberList_SC::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_TeamMemeberList_SC::has_name() const {
  return _internal_has_name();
}
inline void MSG_TeamMemeberList_SC::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_TeamMemeberList_SC::name() const {
  // @@protoc_insertion_point(field_get:Team.MSG_TeamMemeberList_SC.name)
  return _internal_name();
}
inline void MSG_TeamMemeberList_SC::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Team.MSG_TeamMemeberList_SC.name)
}
inline std::string* MSG_TeamMemeberList_SC::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_TeamMemeberList_SC.name)
  return _internal_mutable_name();
}
inline const std::string& MSG_TeamMemeberList_SC::_internal_name() const {
  return name_.GetNoArena();
}
inline void MSG_TeamMemeberList_SC::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_TeamMemeberList_SC::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_TeamMemeberList_SC.name)
}
inline void MSG_TeamMemeberList_SC::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_TeamMemeberList_SC.name)
}
inline void MSG_TeamMemeberList_SC::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_TeamMemeberList_SC.name)
}
inline std::string* MSG_TeamMemeberList_SC::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_TeamMemeberList_SC::release_name() {
  // @@protoc_insertion_point(field_release:Team.MSG_TeamMemeberList_SC.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_TeamMemeberList_SC::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_TeamMemeberList_SC.name)
}

// optional string leaderid = 3;
inline bool MSG_TeamMemeberList_SC::_internal_has_leaderid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_TeamMemeberList_SC::has_leaderid() const {
  return _internal_has_leaderid();
}
inline void MSG_TeamMemeberList_SC::clear_leaderid() {
  leaderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_TeamMemeberList_SC::leaderid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_TeamMemeberList_SC.leaderid)
  return _internal_leaderid();
}
inline void MSG_TeamMemeberList_SC::set_leaderid(const std::string& value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_TeamMemeberList_SC.leaderid)
}
inline std::string* MSG_TeamMemeberList_SC::mutable_leaderid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_TeamMemeberList_SC.leaderid)
  return _internal_mutable_leaderid();
}
inline const std::string& MSG_TeamMemeberList_SC::_internal_leaderid() const {
  return leaderid_.GetNoArena();
}
inline void MSG_TeamMemeberList_SC::_internal_set_leaderid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_TeamMemeberList_SC::set_leaderid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  leaderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_TeamMemeberList_SC.leaderid)
}
inline void MSG_TeamMemeberList_SC::set_leaderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_TeamMemeberList_SC.leaderid)
}
inline void MSG_TeamMemeberList_SC::set_leaderid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_TeamMemeberList_SC.leaderid)
}
inline std::string* MSG_TeamMemeberList_SC::_internal_mutable_leaderid() {
  _has_bits_[0] |= 0x00000002u;
  return leaderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_TeamMemeberList_SC::release_leaderid() {
  // @@protoc_insertion_point(field_release:Team.MSG_TeamMemeberList_SC.leaderid)
  if (!_internal_has_leaderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return leaderid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_TeamMemeberList_SC::set_allocated_leaderid(std::string* leaderid) {
  if (leaderid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  leaderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_TeamMemeberList_SC.leaderid)
}

// repeated .Team.Memember mem = 4;
inline int MSG_TeamMemeberList_SC::_internal_mem_size() const {
  return mem_.size();
}
inline int MSG_TeamMemeberList_SC::mem_size() const {
  return _internal_mem_size();
}
inline void MSG_TeamMemeberList_SC::clear_mem() {
  mem_.Clear();
}
inline ::Team::Memember* MSG_TeamMemeberList_SC::mutable_mem(int index) {
  // @@protoc_insertion_point(field_mutable:Team.MSG_TeamMemeberList_SC.mem)
  return mem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >*
MSG_TeamMemeberList_SC::mutable_mem() {
  // @@protoc_insertion_point(field_mutable_list:Team.MSG_TeamMemeberList_SC.mem)
  return &mem_;
}
inline const ::Team::Memember& MSG_TeamMemeberList_SC::_internal_mem(int index) const {
  return mem_.Get(index);
}
inline const ::Team::Memember& MSG_TeamMemeberList_SC::mem(int index) const {
  // @@protoc_insertion_point(field_get:Team.MSG_TeamMemeberList_SC.mem)
  return _internal_mem(index);
}
inline ::Team::Memember* MSG_TeamMemeberList_SC::_internal_add_mem() {
  return mem_.Add();
}
inline ::Team::Memember* MSG_TeamMemeberList_SC::add_mem() {
  // @@protoc_insertion_point(field_add:Team.MSG_TeamMemeberList_SC.mem)
  return _internal_add_mem();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >&
MSG_TeamMemeberList_SC::mem() const {
  // @@protoc_insertion_point(field_list:Team.MSG_TeamMemeberList_SC.mem)
  return mem_;
}

// optional .Team.RewardMode mode = 5;
inline bool MSG_TeamMemeberList_SC::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MSG_TeamMemeberList_SC::has_mode() const {
  return _internal_has_mode();
}
inline void MSG_TeamMemeberList_SC::clear_mode() {
  mode_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::Team::RewardMode MSG_TeamMemeberList_SC::_internal_mode() const {
  return static_cast< ::Team::RewardMode >(mode_);
}
inline ::Team::RewardMode MSG_TeamMemeberList_SC::mode() const {
  // @@protoc_insertion_point(field_get:Team.MSG_TeamMemeberList_SC.mode)
  return _internal_mode();
}
inline void MSG_TeamMemeberList_SC::_internal_set_mode(::Team::RewardMode value) {
  assert(::Team::RewardMode_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  mode_ = value;
}
inline void MSG_TeamMemeberList_SC::set_mode(::Team::RewardMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Team.MSG_TeamMemeberList_SC.mode)
}

// optional .Team.CapacityType cap_type = 6;
inline bool MSG_TeamMemeberList_SC::_internal_has_cap_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MSG_TeamMemeberList_SC::has_cap_type() const {
  return _internal_has_cap_type();
}
inline void MSG_TeamMemeberList_SC::clear_cap_type() {
  cap_type_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::Team::CapacityType MSG_TeamMemeberList_SC::_internal_cap_type() const {
  return static_cast< ::Team::CapacityType >(cap_type_);
}
inline ::Team::CapacityType MSG_TeamMemeberList_SC::cap_type() const {
  // @@protoc_insertion_point(field_get:Team.MSG_TeamMemeberList_SC.cap_type)
  return _internal_cap_type();
}
inline void MSG_TeamMemeberList_SC::_internal_set_cap_type(::Team::CapacityType value) {
  assert(::Team::CapacityType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  cap_type_ = value;
}
inline void MSG_TeamMemeberList_SC::set_cap_type(::Team::CapacityType value) {
  _internal_set_cap_type(value);
  // @@protoc_insertion_point(field_set:Team.MSG_TeamMemeberList_SC.cap_type)
}

// optional uint32 maxmember = 7;
inline bool MSG_TeamMemeberList_SC::_internal_has_maxmember() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MSG_TeamMemeberList_SC::has_maxmember() const {
  return _internal_has_maxmember();
}
inline void MSG_TeamMemeberList_SC::clear_maxmember() {
  maxmember_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_TeamMemeberList_SC::_internal_maxmember() const {
  return maxmember_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_TeamMemeberList_SC::maxmember() const {
  // @@protoc_insertion_point(field_get:Team.MSG_TeamMemeberList_SC.maxmember)
  return _internal_maxmember();
}
inline void MSG_TeamMemeberList_SC::_internal_set_maxmember(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  maxmember_ = value;
}
inline void MSG_TeamMemeberList_SC::set_maxmember(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxmember(value);
  // @@protoc_insertion_point(field_set:Team.MSG_TeamMemeberList_SC.maxmember)
}

// optional string note = 8;
inline bool MSG_TeamMemeberList_SC::_internal_has_note() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_TeamMemeberList_SC::has_note() const {
  return _internal_has_note();
}
inline void MSG_TeamMemeberList_SC::clear_note() {
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MSG_TeamMemeberList_SC::note() const {
  // @@protoc_insertion_point(field_get:Team.MSG_TeamMemeberList_SC.note)
  return _internal_note();
}
inline void MSG_TeamMemeberList_SC::set_note(const std::string& value) {
  _internal_set_note(value);
  // @@protoc_insertion_point(field_set:Team.MSG_TeamMemeberList_SC.note)
}
inline std::string* MSG_TeamMemeberList_SC::mutable_note() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_TeamMemeberList_SC.note)
  return _internal_mutable_note();
}
inline const std::string& MSG_TeamMemeberList_SC::_internal_note() const {
  return note_.GetNoArena();
}
inline void MSG_TeamMemeberList_SC::_internal_set_note(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_TeamMemeberList_SC::set_note(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  note_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_TeamMemeberList_SC.note)
}
inline void MSG_TeamMemeberList_SC::set_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_TeamMemeberList_SC.note)
}
inline void MSG_TeamMemeberList_SC::set_note(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_TeamMemeberList_SC.note)
}
inline std::string* MSG_TeamMemeberList_SC::_internal_mutable_note() {
  _has_bits_[0] |= 0x00000004u;
  return note_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_TeamMemeberList_SC::release_note() {
  // @@protoc_insertion_point(field_release:Team.MSG_TeamMemeberList_SC.note)
  if (!_internal_has_note()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return note_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_TeamMemeberList_SC::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  note_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_TeamMemeberList_SC.note)
}

// optional uint32 activityid = 9;
inline bool MSG_TeamMemeberList_SC::_internal_has_activityid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MSG_TeamMemeberList_SC::has_activityid() const {
  return _internal_has_activityid();
}
inline void MSG_TeamMemeberList_SC::clear_activityid() {
  activityid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_TeamMemeberList_SC::_internal_activityid() const {
  return activityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_TeamMemeberList_SC::activityid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_TeamMemeberList_SC.activityid)
  return _internal_activityid();
}
inline void MSG_TeamMemeberList_SC::_internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  activityid_ = value;
}
inline void MSG_TeamMemeberList_SC::set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activityid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_TeamMemeberList_SC.activityid)
}

// optional uint32 curmember = 10;
inline bool MSG_TeamMemeberList_SC::_internal_has_curmember() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MSG_TeamMemeberList_SC::has_curmember() const {
  return _internal_has_curmember();
}
inline void MSG_TeamMemeberList_SC::clear_curmember() {
  curmember_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_TeamMemeberList_SC::_internal_curmember() const {
  return curmember_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_TeamMemeberList_SC::curmember() const {
  // @@protoc_insertion_point(field_get:Team.MSG_TeamMemeberList_SC.curmember)
  return _internal_curmember();
}
inline void MSG_TeamMemeberList_SC::_internal_set_curmember(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  curmember_ = value;
}
inline void MSG_TeamMemeberList_SC::set_curmember(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_curmember(value);
  // @@protoc_insertion_point(field_set:Team.MSG_TeamMemeberList_SC.curmember)
}

// -------------------------------------------------------------------

// OneTeam

// optional uint32 id = 1;
inline bool OneTeam::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OneTeam::has_id() const {
  return _internal_has_id();
}
inline void OneTeam::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneTeam::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneTeam::id() const {
  // @@protoc_insertion_point(field_get:Team.OneTeam.id)
  return _internal_id();
}
inline void OneTeam::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void OneTeam::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Team.OneTeam.id)
}

// optional string name = 2;
inline bool OneTeam::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OneTeam::has_name() const {
  return _internal_has_name();
}
inline void OneTeam::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OneTeam::name() const {
  // @@protoc_insertion_point(field_get:Team.OneTeam.name)
  return _internal_name();
}
inline void OneTeam::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Team.OneTeam.name)
}
inline std::string* OneTeam::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Team.OneTeam.name)
  return _internal_mutable_name();
}
inline const std::string& OneTeam::_internal_name() const {
  return name_.GetNoArena();
}
inline void OneTeam::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OneTeam::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.OneTeam.name)
}
inline void OneTeam::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.OneTeam.name)
}
inline void OneTeam::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.OneTeam.name)
}
inline std::string* OneTeam::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OneTeam::release_name() {
  // @@protoc_insertion_point(field_release:Team.OneTeam.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OneTeam::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Team.OneTeam.name)
}

// optional uint32 size = 3;
inline bool OneTeam::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OneTeam::has_size() const {
  return _internal_has_size();
}
inline void OneTeam::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneTeam::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneTeam::size() const {
  // @@protoc_insertion_point(field_get:Team.OneTeam.size)
  return _internal_size();
}
inline void OneTeam::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
}
inline void OneTeam::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Team.OneTeam.size)
}

// optional uint32 capacity = 4;
inline bool OneTeam::_internal_has_capacity() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OneTeam::has_capacity() const {
  return _internal_has_capacity();
}
inline void OneTeam::clear_capacity() {
  capacity_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneTeam::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OneTeam::capacity() const {
  // @@protoc_insertion_point(field_get:Team.OneTeam.capacity)
  return _internal_capacity();
}
inline void OneTeam::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  capacity_ = value;
}
inline void OneTeam::set_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:Team.OneTeam.capacity)
}

// optional .Team.RewardMode mode = 5;
inline bool OneTeam::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OneTeam::has_mode() const {
  return _internal_has_mode();
}
inline void OneTeam::clear_mode() {
  mode_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::Team::RewardMode OneTeam::_internal_mode() const {
  return static_cast< ::Team::RewardMode >(mode_);
}
inline ::Team::RewardMode OneTeam::mode() const {
  // @@protoc_insertion_point(field_get:Team.OneTeam.mode)
  return _internal_mode();
}
inline void OneTeam::_internal_set_mode(::Team::RewardMode value) {
  assert(::Team::RewardMode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  mode_ = value;
}
inline void OneTeam::set_mode(::Team::RewardMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Team.OneTeam.mode)
}

// optional string note = 6;
inline bool OneTeam::_internal_has_note() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OneTeam::has_note() const {
  return _internal_has_note();
}
inline void OneTeam::clear_note() {
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OneTeam::note() const {
  // @@protoc_insertion_point(field_get:Team.OneTeam.note)
  return _internal_note();
}
inline void OneTeam::set_note(const std::string& value) {
  _internal_set_note(value);
  // @@protoc_insertion_point(field_set:Team.OneTeam.note)
}
inline std::string* OneTeam::mutable_note() {
  // @@protoc_insertion_point(field_mutable:Team.OneTeam.note)
  return _internal_mutable_note();
}
inline const std::string& OneTeam::_internal_note() const {
  return note_.GetNoArena();
}
inline void OneTeam::_internal_set_note(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OneTeam::set_note(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  note_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.OneTeam.note)
}
inline void OneTeam::set_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.OneTeam.note)
}
inline void OneTeam::set_note(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.OneTeam.note)
}
inline std::string* OneTeam::_internal_mutable_note() {
  _has_bits_[0] |= 0x00000002u;
  return note_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OneTeam::release_note() {
  // @@protoc_insertion_point(field_release:Team.OneTeam.note)
  if (!_internal_has_note()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return note_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OneTeam::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  note_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:Team.OneTeam.note)
}

// -------------------------------------------------------------------

// MSG_Team_List_CS

// -------------------------------------------------------------------

// MSG_Team_List_SC

// repeated .Team.MSG_TeamMemeberList_SC oneteam = 1;
inline int MSG_Team_List_SC::_internal_oneteam_size() const {
  return oneteam_.size();
}
inline int MSG_Team_List_SC::oneteam_size() const {
  return _internal_oneteam_size();
}
inline void MSG_Team_List_SC::clear_oneteam() {
  oneteam_.Clear();
}
inline ::Team::MSG_TeamMemeberList_SC* MSG_Team_List_SC::mutable_oneteam(int index) {
  // @@protoc_insertion_point(field_mutable:Team.MSG_Team_List_SC.oneteam)
  return oneteam_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MSG_TeamMemeberList_SC >*
MSG_Team_List_SC::mutable_oneteam() {
  // @@protoc_insertion_point(field_mutable_list:Team.MSG_Team_List_SC.oneteam)
  return &oneteam_;
}
inline const ::Team::MSG_TeamMemeberList_SC& MSG_Team_List_SC::_internal_oneteam(int index) const {
  return oneteam_.Get(index);
}
inline const ::Team::MSG_TeamMemeberList_SC& MSG_Team_List_SC::oneteam(int index) const {
  // @@protoc_insertion_point(field_get:Team.MSG_Team_List_SC.oneteam)
  return _internal_oneteam(index);
}
inline ::Team::MSG_TeamMemeberList_SC* MSG_Team_List_SC::_internal_add_oneteam() {
  return oneteam_.Add();
}
inline ::Team::MSG_TeamMemeberList_SC* MSG_Team_List_SC::add_oneteam() {
  // @@protoc_insertion_point(field_add:Team.MSG_Team_List_SC.oneteam)
  return _internal_add_oneteam();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MSG_TeamMemeberList_SC >&
MSG_Team_List_SC::oneteam() const {
  // @@protoc_insertion_point(field_list:Team.MSG_Team_List_SC.oneteam)
  return oneteam_;
}

// -------------------------------------------------------------------

// MSG_Join_Team_CS

// required uint32 teamid = 1;
inline bool MSG_Join_Team_CS::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Join_Team_CS::has_teamid() const {
  return _internal_has_teamid();
}
inline void MSG_Join_Team_CS::clear_teamid() {
  teamid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Join_Team_CS::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Join_Team_CS::teamid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_Join_Team_CS.teamid)
  return _internal_teamid();
}
inline void MSG_Join_Team_CS::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  teamid_ = value;
}
inline void MSG_Join_Team_CS::set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_Join_Team_CS.teamid)
}

// -------------------------------------------------------------------

// MSG_Join_Team_SC

// optional uint32 retcode = 1;
inline bool MSG_Join_Team_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Join_Team_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_Join_Team_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Join_Team_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_Join_Team_SC::retcode() const {
  // @@protoc_insertion_point(field_get:Team.MSG_Join_Team_SC.retcode)
  return _internal_retcode();
}
inline void MSG_Join_Team_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  retcode_ = value;
}
inline void MSG_Join_Team_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:Team.MSG_Join_Team_SC.retcode)
}

// -------------------------------------------------------------------

// MSG_ReqJoinTeamNotifyLeader_SC

// required string requesterid = 1;
inline bool MSG_ReqJoinTeamNotifyLeader_SC::_internal_has_requesterid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqJoinTeamNotifyLeader_SC::has_requesterid() const {
  return _internal_has_requesterid();
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::clear_requesterid() {
  requesterid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ReqJoinTeamNotifyLeader_SC::requesterid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqJoinTeamNotifyLeader_SC.requesterid)
  return _internal_requesterid();
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::set_requesterid(const std::string& value) {
  _internal_set_requesterid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqJoinTeamNotifyLeader_SC.requesterid)
}
inline std::string* MSG_ReqJoinTeamNotifyLeader_SC::mutable_requesterid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqJoinTeamNotifyLeader_SC.requesterid)
  return _internal_mutable_requesterid();
}
inline const std::string& MSG_ReqJoinTeamNotifyLeader_SC::_internal_requesterid() const {
  return requesterid_.GetNoArena();
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::_internal_set_requesterid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  requesterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::set_requesterid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  requesterid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqJoinTeamNotifyLeader_SC.requesterid)
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::set_requesterid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  requesterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqJoinTeamNotifyLeader_SC.requesterid)
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::set_requesterid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  requesterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqJoinTeamNotifyLeader_SC.requesterid)
}
inline std::string* MSG_ReqJoinTeamNotifyLeader_SC::_internal_mutable_requesterid() {
  _has_bits_[0] |= 0x00000001u;
  return requesterid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqJoinTeamNotifyLeader_SC::release_requesterid() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqJoinTeamNotifyLeader_SC.requesterid)
  if (!_internal_has_requesterid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return requesterid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::set_allocated_requesterid(std::string* requesterid) {
  if (requesterid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  requesterid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requesterid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqJoinTeamNotifyLeader_SC.requesterid)
}

// optional string requestername = 2;
inline bool MSG_ReqJoinTeamNotifyLeader_SC::_internal_has_requestername() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ReqJoinTeamNotifyLeader_SC::has_requestername() const {
  return _internal_has_requestername();
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::clear_requestername() {
  requestername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_ReqJoinTeamNotifyLeader_SC::requestername() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqJoinTeamNotifyLeader_SC.requestername)
  return _internal_requestername();
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::set_requestername(const std::string& value) {
  _internal_set_requestername(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqJoinTeamNotifyLeader_SC.requestername)
}
inline std::string* MSG_ReqJoinTeamNotifyLeader_SC::mutable_requestername() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqJoinTeamNotifyLeader_SC.requestername)
  return _internal_mutable_requestername();
}
inline const std::string& MSG_ReqJoinTeamNotifyLeader_SC::_internal_requestername() const {
  return requestername_.GetNoArena();
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::_internal_set_requestername(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  requestername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::set_requestername(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  requestername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqJoinTeamNotifyLeader_SC.requestername)
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::set_requestername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  requestername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqJoinTeamNotifyLeader_SC.requestername)
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::set_requestername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  requestername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqJoinTeamNotifyLeader_SC.requestername)
}
inline std::string* MSG_ReqJoinTeamNotifyLeader_SC::_internal_mutable_requestername() {
  _has_bits_[0] |= 0x00000002u;
  return requestername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqJoinTeamNotifyLeader_SC::release_requestername() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqJoinTeamNotifyLeader_SC.requestername)
  if (!_internal_has_requestername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return requestername_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqJoinTeamNotifyLeader_SC::set_allocated_requestername(std::string* requestername) {
  if (requestername != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  requestername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestername);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqJoinTeamNotifyLeader_SC.requestername)
}

// -------------------------------------------------------------------

// MSG_AnswerJoinTeam_CS

// required string requesterid = 1;
inline bool MSG_AnswerJoinTeam_CS::_internal_has_requesterid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_AnswerJoinTeam_CS::has_requesterid() const {
  return _internal_has_requesterid();
}
inline void MSG_AnswerJoinTeam_CS::clear_requesterid() {
  requesterid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_AnswerJoinTeam_CS::requesterid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_AnswerJoinTeam_CS.requesterid)
  return _internal_requesterid();
}
inline void MSG_AnswerJoinTeam_CS::set_requesterid(const std::string& value) {
  _internal_set_requesterid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_AnswerJoinTeam_CS.requesterid)
}
inline std::string* MSG_AnswerJoinTeam_CS::mutable_requesterid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_AnswerJoinTeam_CS.requesterid)
  return _internal_mutable_requesterid();
}
inline const std::string& MSG_AnswerJoinTeam_CS::_internal_requesterid() const {
  return requesterid_.GetNoArena();
}
inline void MSG_AnswerJoinTeam_CS::_internal_set_requesterid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  requesterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_AnswerJoinTeam_CS::set_requesterid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  requesterid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_AnswerJoinTeam_CS.requesterid)
}
inline void MSG_AnswerJoinTeam_CS::set_requesterid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  requesterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_AnswerJoinTeam_CS.requesterid)
}
inline void MSG_AnswerJoinTeam_CS::set_requesterid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  requesterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_AnswerJoinTeam_CS.requesterid)
}
inline std::string* MSG_AnswerJoinTeam_CS::_internal_mutable_requesterid() {
  _has_bits_[0] |= 0x00000001u;
  return requesterid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_AnswerJoinTeam_CS::release_requesterid() {
  // @@protoc_insertion_point(field_release:Team.MSG_AnswerJoinTeam_CS.requesterid)
  if (!_internal_has_requesterid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return requesterid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_AnswerJoinTeam_CS::set_allocated_requesterid(std::string* requesterid) {
  if (requesterid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  requesterid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requesterid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_AnswerJoinTeam_CS.requesterid)
}

// required .Team.AnswerType answer_type = 2;
inline bool MSG_AnswerJoinTeam_CS::_internal_has_answer_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_AnswerJoinTeam_CS::has_answer_type() const {
  return _internal_has_answer_type();
}
inline void MSG_AnswerJoinTeam_CS::clear_answer_type() {
  answer_type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Team::AnswerType MSG_AnswerJoinTeam_CS::_internal_answer_type() const {
  return static_cast< ::Team::AnswerType >(answer_type_);
}
inline ::Team::AnswerType MSG_AnswerJoinTeam_CS::answer_type() const {
  // @@protoc_insertion_point(field_get:Team.MSG_AnswerJoinTeam_CS.answer_type)
  return _internal_answer_type();
}
inline void MSG_AnswerJoinTeam_CS::_internal_set_answer_type(::Team::AnswerType value) {
  assert(::Team::AnswerType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  answer_type_ = value;
}
inline void MSG_AnswerJoinTeam_CS::set_answer_type(::Team::AnswerType value) {
  _internal_set_answer_type(value);
  // @@protoc_insertion_point(field_set:Team.MSG_AnswerJoinTeam_CS.answer_type)
}

// -------------------------------------------------------------------

// MSG_AnswerJoinTeam_SC

// optional uint32 errcode = 1;
inline bool MSG_AnswerJoinTeam_SC::_internal_has_errcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_AnswerJoinTeam_SC::has_errcode() const {
  return _internal_has_errcode();
}
inline void MSG_AnswerJoinTeam_SC::clear_errcode() {
  errcode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_AnswerJoinTeam_SC::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_AnswerJoinTeam_SC::errcode() const {
  // @@protoc_insertion_point(field_get:Team.MSG_AnswerJoinTeam_SC.errcode)
  return _internal_errcode();
}
inline void MSG_AnswerJoinTeam_SC::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errcode_ = value;
}
inline void MSG_AnswerJoinTeam_SC::set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:Team.MSG_AnswerJoinTeam_SC.errcode)
}

// optional .Team.AnswerType answer_type = 2;
inline bool MSG_AnswerJoinTeam_SC::_internal_has_answer_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_AnswerJoinTeam_SC::has_answer_type() const {
  return _internal_has_answer_type();
}
inline void MSG_AnswerJoinTeam_SC::clear_answer_type() {
  answer_type_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Team::AnswerType MSG_AnswerJoinTeam_SC::_internal_answer_type() const {
  return static_cast< ::Team::AnswerType >(answer_type_);
}
inline ::Team::AnswerType MSG_AnswerJoinTeam_SC::answer_type() const {
  // @@protoc_insertion_point(field_get:Team.MSG_AnswerJoinTeam_SC.answer_type)
  return _internal_answer_type();
}
inline void MSG_AnswerJoinTeam_SC::_internal_set_answer_type(::Team::AnswerType value) {
  assert(::Team::AnswerType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  answer_type_ = value;
}
inline void MSG_AnswerJoinTeam_SC::set_answer_type(::Team::AnswerType value) {
  _internal_set_answer_type(value);
  // @@protoc_insertion_point(field_set:Team.MSG_AnswerJoinTeam_SC.answer_type)
}

// optional .Team.MSG_TeamMemeberList_SC teaminfo = 3;
inline bool MSG_AnswerJoinTeam_SC::_internal_has_teaminfo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || teaminfo_ != nullptr);
  return value;
}
inline bool MSG_AnswerJoinTeam_SC::has_teaminfo() const {
  return _internal_has_teaminfo();
}
inline void MSG_AnswerJoinTeam_SC::clear_teaminfo() {
  if (teaminfo_ != nullptr) teaminfo_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Team::MSG_TeamMemeberList_SC& MSG_AnswerJoinTeam_SC::_internal_teaminfo() const {
  const ::Team::MSG_TeamMemeberList_SC* p = teaminfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Team::MSG_TeamMemeberList_SC*>(
      &::Team::_MSG_TeamMemeberList_SC_default_instance_);
}
inline const ::Team::MSG_TeamMemeberList_SC& MSG_AnswerJoinTeam_SC::teaminfo() const {
  // @@protoc_insertion_point(field_get:Team.MSG_AnswerJoinTeam_SC.teaminfo)
  return _internal_teaminfo();
}
inline ::Team::MSG_TeamMemeberList_SC* MSG_AnswerJoinTeam_SC::release_teaminfo() {
  // @@protoc_insertion_point(field_release:Team.MSG_AnswerJoinTeam_SC.teaminfo)
  _has_bits_[0] &= ~0x00000001u;
  ::Team::MSG_TeamMemeberList_SC* temp = teaminfo_;
  teaminfo_ = nullptr;
  return temp;
}
inline ::Team::MSG_TeamMemeberList_SC* MSG_AnswerJoinTeam_SC::_internal_mutable_teaminfo() {
  _has_bits_[0] |= 0x00000001u;
  if (teaminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Team::MSG_TeamMemeberList_SC>(GetArenaNoVirtual());
    teaminfo_ = p;
  }
  return teaminfo_;
}
inline ::Team::MSG_TeamMemeberList_SC* MSG_AnswerJoinTeam_SC::mutable_teaminfo() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_AnswerJoinTeam_SC.teaminfo)
  return _internal_mutable_teaminfo();
}
inline void MSG_AnswerJoinTeam_SC::set_allocated_teaminfo(::Team::MSG_TeamMemeberList_SC* teaminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete teaminfo_;
  }
  if (teaminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      teaminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teaminfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  teaminfo_ = teaminfo;
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_AnswerJoinTeam_SC.teaminfo)
}

// -------------------------------------------------------------------

// MSG_ReqApplyList_CS

// -------------------------------------------------------------------

// MSG_ReqApplyList_SC

// repeated .Team.Memember applyer = 1;
inline int MSG_ReqApplyList_SC::_internal_applyer_size() const {
  return applyer_.size();
}
inline int MSG_ReqApplyList_SC::applyer_size() const {
  return _internal_applyer_size();
}
inline void MSG_ReqApplyList_SC::clear_applyer() {
  applyer_.Clear();
}
inline ::Team::Memember* MSG_ReqApplyList_SC::mutable_applyer(int index) {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqApplyList_SC.applyer)
  return applyer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >*
MSG_ReqApplyList_SC::mutable_applyer() {
  // @@protoc_insertion_point(field_mutable_list:Team.MSG_ReqApplyList_SC.applyer)
  return &applyer_;
}
inline const ::Team::Memember& MSG_ReqApplyList_SC::_internal_applyer(int index) const {
  return applyer_.Get(index);
}
inline const ::Team::Memember& MSG_ReqApplyList_SC::applyer(int index) const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqApplyList_SC.applyer)
  return _internal_applyer(index);
}
inline ::Team::Memember* MSG_ReqApplyList_SC::_internal_add_applyer() {
  return applyer_.Add();
}
inline ::Team::Memember* MSG_ReqApplyList_SC::add_applyer() {
  // @@protoc_insertion_point(field_add:Team.MSG_ReqApplyList_SC.applyer)
  return _internal_add_applyer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >&
MSG_ReqApplyList_SC::applyer() const {
  // @@protoc_insertion_point(field_list:Team.MSG_ReqApplyList_SC.applyer)
  return applyer_;
}

// optional string leaderid = 2;
inline bool MSG_ReqApplyList_SC::_internal_has_leaderid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqApplyList_SC::has_leaderid() const {
  return _internal_has_leaderid();
}
inline void MSG_ReqApplyList_SC::clear_leaderid() {
  leaderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ReqApplyList_SC::leaderid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqApplyList_SC.leaderid)
  return _internal_leaderid();
}
inline void MSG_ReqApplyList_SC::set_leaderid(const std::string& value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqApplyList_SC.leaderid)
}
inline std::string* MSG_ReqApplyList_SC::mutable_leaderid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqApplyList_SC.leaderid)
  return _internal_mutable_leaderid();
}
inline const std::string& MSG_ReqApplyList_SC::_internal_leaderid() const {
  return leaderid_.GetNoArena();
}
inline void MSG_ReqApplyList_SC::_internal_set_leaderid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqApplyList_SC::set_leaderid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  leaderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqApplyList_SC.leaderid)
}
inline void MSG_ReqApplyList_SC::set_leaderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqApplyList_SC.leaderid)
}
inline void MSG_ReqApplyList_SC::set_leaderid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  leaderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqApplyList_SC.leaderid)
}
inline std::string* MSG_ReqApplyList_SC::_internal_mutable_leaderid() {
  _has_bits_[0] |= 0x00000001u;
  return leaderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqApplyList_SC::release_leaderid() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqApplyList_SC.leaderid)
  if (!_internal_has_leaderid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return leaderid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqApplyList_SC::set_allocated_leaderid(std::string* leaderid) {
  if (leaderid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  leaderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqApplyList_SC.leaderid)
}

// -------------------------------------------------------------------

// MSG_ReqDelMemember_CS

// required string charid = 1;
inline bool MSG_ReqDelMemember_CS::_internal_has_charid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqDelMemember_CS::has_charid() const {
  return _internal_has_charid();
}
inline void MSG_ReqDelMemember_CS::clear_charid() {
  charid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ReqDelMemember_CS::charid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqDelMemember_CS.charid)
  return _internal_charid();
}
inline void MSG_ReqDelMemember_CS::set_charid(const std::string& value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqDelMemember_CS.charid)
}
inline std::string* MSG_ReqDelMemember_CS::mutable_charid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqDelMemember_CS.charid)
  return _internal_mutable_charid();
}
inline const std::string& MSG_ReqDelMemember_CS::_internal_charid() const {
  return charid_.GetNoArena();
}
inline void MSG_ReqDelMemember_CS::_internal_set_charid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  charid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqDelMemember_CS::set_charid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  charid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqDelMemember_CS.charid)
}
inline void MSG_ReqDelMemember_CS::set_charid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  charid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqDelMemember_CS.charid)
}
inline void MSG_ReqDelMemember_CS::set_charid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  charid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqDelMemember_CS.charid)
}
inline std::string* MSG_ReqDelMemember_CS::_internal_mutable_charid() {
  _has_bits_[0] |= 0x00000001u;
  return charid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqDelMemember_CS::release_charid() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqDelMemember_CS.charid)
  if (!_internal_has_charid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return charid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqDelMemember_CS::set_allocated_charid(std::string* charid) {
  if (charid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  charid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), charid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqDelMemember_CS.charid)
}

// -------------------------------------------------------------------

// MSG_ReqDelMemember_SC

// required string charid = 1;
inline bool MSG_ReqDelMemember_SC::_internal_has_charid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqDelMemember_SC::has_charid() const {
  return _internal_has_charid();
}
inline void MSG_ReqDelMemember_SC::clear_charid() {
  charid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ReqDelMemember_SC::charid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqDelMemember_SC.charid)
  return _internal_charid();
}
inline void MSG_ReqDelMemember_SC::set_charid(const std::string& value) {
  _internal_set_charid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqDelMemember_SC.charid)
}
inline std::string* MSG_ReqDelMemember_SC::mutable_charid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqDelMemember_SC.charid)
  return _internal_mutable_charid();
}
inline const std::string& MSG_ReqDelMemember_SC::_internal_charid() const {
  return charid_.GetNoArena();
}
inline void MSG_ReqDelMemember_SC::_internal_set_charid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  charid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqDelMemember_SC::set_charid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  charid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqDelMemember_SC.charid)
}
inline void MSG_ReqDelMemember_SC::set_charid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  charid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqDelMemember_SC.charid)
}
inline void MSG_ReqDelMemember_SC::set_charid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  charid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqDelMemember_SC.charid)
}
inline std::string* MSG_ReqDelMemember_SC::_internal_mutable_charid() {
  _has_bits_[0] |= 0x00000001u;
  return charid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqDelMemember_SC::release_charid() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqDelMemember_SC.charid)
  if (!_internal_has_charid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return charid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqDelMemember_SC::set_allocated_charid(std::string* charid) {
  if (charid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  charid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), charid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqDelMemember_SC.charid)
}

// required .Team.OutType outtype = 2;
inline bool MSG_ReqDelMemember_SC::_internal_has_outtype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_ReqDelMemember_SC::has_outtype() const {
  return _internal_has_outtype();
}
inline void MSG_ReqDelMemember_SC::clear_outtype() {
  outtype_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Team::OutType MSG_ReqDelMemember_SC::_internal_outtype() const {
  return static_cast< ::Team::OutType >(outtype_);
}
inline ::Team::OutType MSG_ReqDelMemember_SC::outtype() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqDelMemember_SC.outtype)
  return _internal_outtype();
}
inline void MSG_ReqDelMemember_SC::_internal_set_outtype(::Team::OutType value) {
  assert(::Team::OutType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  outtype_ = value;
}
inline void MSG_ReqDelMemember_SC::set_outtype(::Team::OutType value) {
  _internal_set_outtype(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqDelMemember_SC.outtype)
}

// optional string name = 3;
inline bool MSG_ReqDelMemember_SC::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ReqDelMemember_SC::has_name() const {
  return _internal_has_name();
}
inline void MSG_ReqDelMemember_SC::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_ReqDelMemember_SC::name() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqDelMemember_SC.name)
  return _internal_name();
}
inline void MSG_ReqDelMemember_SC::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqDelMemember_SC.name)
}
inline std::string* MSG_ReqDelMemember_SC::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqDelMemember_SC.name)
  return _internal_mutable_name();
}
inline const std::string& MSG_ReqDelMemember_SC::_internal_name() const {
  return name_.GetNoArena();
}
inline void MSG_ReqDelMemember_SC::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqDelMemember_SC::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqDelMemember_SC.name)
}
inline void MSG_ReqDelMemember_SC::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqDelMemember_SC.name)
}
inline void MSG_ReqDelMemember_SC::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqDelMemember_SC.name)
}
inline std::string* MSG_ReqDelMemember_SC::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqDelMemember_SC::release_name() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqDelMemember_SC.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqDelMemember_SC::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqDelMemember_SC.name)
}

// -------------------------------------------------------------------

// MSG_ReqLanchVoteOut_CS

// required string outid = 1;
inline bool MSG_ReqLanchVoteOut_CS::_internal_has_outid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqLanchVoteOut_CS::has_outid() const {
  return _internal_has_outid();
}
inline void MSG_ReqLanchVoteOut_CS::clear_outid() {
  outid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ReqLanchVoteOut_CS::outid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqLanchVoteOut_CS.outid)
  return _internal_outid();
}
inline void MSG_ReqLanchVoteOut_CS::set_outid(const std::string& value) {
  _internal_set_outid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqLanchVoteOut_CS.outid)
}
inline std::string* MSG_ReqLanchVoteOut_CS::mutable_outid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqLanchVoteOut_CS.outid)
  return _internal_mutable_outid();
}
inline const std::string& MSG_ReqLanchVoteOut_CS::_internal_outid() const {
  return outid_.GetNoArena();
}
inline void MSG_ReqLanchVoteOut_CS::_internal_set_outid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  outid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqLanchVoteOut_CS::set_outid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  outid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqLanchVoteOut_CS.outid)
}
inline void MSG_ReqLanchVoteOut_CS::set_outid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  outid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqLanchVoteOut_CS.outid)
}
inline void MSG_ReqLanchVoteOut_CS::set_outid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  outid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqLanchVoteOut_CS.outid)
}
inline std::string* MSG_ReqLanchVoteOut_CS::_internal_mutable_outid() {
  _has_bits_[0] |= 0x00000001u;
  return outid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqLanchVoteOut_CS::release_outid() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqLanchVoteOut_CS.outid)
  if (!_internal_has_outid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return outid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqLanchVoteOut_CS::set_allocated_outid(std::string* outid) {
  if (outid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  outid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqLanchVoteOut_CS.outid)
}

// -------------------------------------------------------------------

// MSG_ReqLanchVoteOut_SC

// required uint32 errcode = 1 [default = 0];
inline bool MSG_ReqLanchVoteOut_SC::_internal_has_errcode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MSG_ReqLanchVoteOut_SC::has_errcode() const {
  return _internal_has_errcode();
}
inline void MSG_ReqLanchVoteOut_SC::clear_errcode() {
  errcode_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqLanchVoteOut_SC::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqLanchVoteOut_SC::errcode() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqLanchVoteOut_SC.errcode)
  return _internal_errcode();
}
inline void MSG_ReqLanchVoteOut_SC::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  errcode_ = value;
}
inline void MSG_ReqLanchVoteOut_SC::set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqLanchVoteOut_SC.errcode)
}

// optional string lancherid = 2;
inline bool MSG_ReqLanchVoteOut_SC::_internal_has_lancherid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqLanchVoteOut_SC::has_lancherid() const {
  return _internal_has_lancherid();
}
inline void MSG_ReqLanchVoteOut_SC::clear_lancherid() {
  lancherid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ReqLanchVoteOut_SC::lancherid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqLanchVoteOut_SC.lancherid)
  return _internal_lancherid();
}
inline void MSG_ReqLanchVoteOut_SC::set_lancherid(const std::string& value) {
  _internal_set_lancherid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqLanchVoteOut_SC.lancherid)
}
inline std::string* MSG_ReqLanchVoteOut_SC::mutable_lancherid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqLanchVoteOut_SC.lancherid)
  return _internal_mutable_lancherid();
}
inline const std::string& MSG_ReqLanchVoteOut_SC::_internal_lancherid() const {
  return lancherid_.GetNoArena();
}
inline void MSG_ReqLanchVoteOut_SC::_internal_set_lancherid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lancherid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqLanchVoteOut_SC::set_lancherid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lancherid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqLanchVoteOut_SC.lancherid)
}
inline void MSG_ReqLanchVoteOut_SC::set_lancherid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lancherid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqLanchVoteOut_SC.lancherid)
}
inline void MSG_ReqLanchVoteOut_SC::set_lancherid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lancherid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqLanchVoteOut_SC.lancherid)
}
inline std::string* MSG_ReqLanchVoteOut_SC::_internal_mutable_lancherid() {
  _has_bits_[0] |= 0x00000001u;
  return lancherid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqLanchVoteOut_SC::release_lancherid() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqLanchVoteOut_SC.lancherid)
  if (!_internal_has_lancherid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lancherid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqLanchVoteOut_SC::set_allocated_lancherid(std::string* lancherid) {
  if (lancherid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lancherid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lancherid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqLanchVoteOut_SC.lancherid)
}

// required string lanchername = 3;
inline bool MSG_ReqLanchVoteOut_SC::_internal_has_lanchername() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ReqLanchVoteOut_SC::has_lanchername() const {
  return _internal_has_lanchername();
}
inline void MSG_ReqLanchVoteOut_SC::clear_lanchername() {
  lanchername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_ReqLanchVoteOut_SC::lanchername() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqLanchVoteOut_SC.lanchername)
  return _internal_lanchername();
}
inline void MSG_ReqLanchVoteOut_SC::set_lanchername(const std::string& value) {
  _internal_set_lanchername(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqLanchVoteOut_SC.lanchername)
}
inline std::string* MSG_ReqLanchVoteOut_SC::mutable_lanchername() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqLanchVoteOut_SC.lanchername)
  return _internal_mutable_lanchername();
}
inline const std::string& MSG_ReqLanchVoteOut_SC::_internal_lanchername() const {
  return lanchername_.GetNoArena();
}
inline void MSG_ReqLanchVoteOut_SC::_internal_set_lanchername(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lanchername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqLanchVoteOut_SC::set_lanchername(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lanchername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqLanchVoteOut_SC.lanchername)
}
inline void MSG_ReqLanchVoteOut_SC::set_lanchername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lanchername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqLanchVoteOut_SC.lanchername)
}
inline void MSG_ReqLanchVoteOut_SC::set_lanchername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lanchername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqLanchVoteOut_SC.lanchername)
}
inline std::string* MSG_ReqLanchVoteOut_SC::_internal_mutable_lanchername() {
  _has_bits_[0] |= 0x00000002u;
  return lanchername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqLanchVoteOut_SC::release_lanchername() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqLanchVoteOut_SC.lanchername)
  if (!_internal_has_lanchername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lanchername_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqLanchVoteOut_SC::set_allocated_lanchername(std::string* lanchername) {
  if (lanchername != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lanchername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lanchername);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqLanchVoteOut_SC.lanchername)
}

// optional string outerid = 4;
inline bool MSG_ReqLanchVoteOut_SC::_internal_has_outerid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_ReqLanchVoteOut_SC::has_outerid() const {
  return _internal_has_outerid();
}
inline void MSG_ReqLanchVoteOut_SC::clear_outerid() {
  outerid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MSG_ReqLanchVoteOut_SC::outerid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqLanchVoteOut_SC.outerid)
  return _internal_outerid();
}
inline void MSG_ReqLanchVoteOut_SC::set_outerid(const std::string& value) {
  _internal_set_outerid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqLanchVoteOut_SC.outerid)
}
inline std::string* MSG_ReqLanchVoteOut_SC::mutable_outerid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqLanchVoteOut_SC.outerid)
  return _internal_mutable_outerid();
}
inline const std::string& MSG_ReqLanchVoteOut_SC::_internal_outerid() const {
  return outerid_.GetNoArena();
}
inline void MSG_ReqLanchVoteOut_SC::_internal_set_outerid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  outerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqLanchVoteOut_SC::set_outerid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  outerid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqLanchVoteOut_SC.outerid)
}
inline void MSG_ReqLanchVoteOut_SC::set_outerid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  outerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqLanchVoteOut_SC.outerid)
}
inline void MSG_ReqLanchVoteOut_SC::set_outerid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  outerid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqLanchVoteOut_SC.outerid)
}
inline std::string* MSG_ReqLanchVoteOut_SC::_internal_mutable_outerid() {
  _has_bits_[0] |= 0x00000004u;
  return outerid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqLanchVoteOut_SC::release_outerid() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqLanchVoteOut_SC.outerid)
  if (!_internal_has_outerid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return outerid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqLanchVoteOut_SC::set_allocated_outerid(std::string* outerid) {
  if (outerid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  outerid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outerid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqLanchVoteOut_SC.outerid)
}

// required string outername = 5;
inline bool MSG_ReqLanchVoteOut_SC::_internal_has_outername() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_ReqLanchVoteOut_SC::has_outername() const {
  return _internal_has_outername();
}
inline void MSG_ReqLanchVoteOut_SC::clear_outername() {
  outername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MSG_ReqLanchVoteOut_SC::outername() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqLanchVoteOut_SC.outername)
  return _internal_outername();
}
inline void MSG_ReqLanchVoteOut_SC::set_outername(const std::string& value) {
  _internal_set_outername(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqLanchVoteOut_SC.outername)
}
inline std::string* MSG_ReqLanchVoteOut_SC::mutable_outername() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqLanchVoteOut_SC.outername)
  return _internal_mutable_outername();
}
inline const std::string& MSG_ReqLanchVoteOut_SC::_internal_outername() const {
  return outername_.GetNoArena();
}
inline void MSG_ReqLanchVoteOut_SC::_internal_set_outername(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  outername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqLanchVoteOut_SC::set_outername(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  outername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqLanchVoteOut_SC.outername)
}
inline void MSG_ReqLanchVoteOut_SC::set_outername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  outername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqLanchVoteOut_SC.outername)
}
inline void MSG_ReqLanchVoteOut_SC::set_outername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  outername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqLanchVoteOut_SC.outername)
}
inline std::string* MSG_ReqLanchVoteOut_SC::_internal_mutable_outername() {
  _has_bits_[0] |= 0x00000008u;
  return outername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqLanchVoteOut_SC::release_outername() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqLanchVoteOut_SC.outername)
  if (!_internal_has_outername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return outername_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqLanchVoteOut_SC::set_allocated_outername(std::string* outername) {
  if (outername != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  outername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outername);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqLanchVoteOut_SC.outername)
}

// required string duration = 6;
inline bool MSG_ReqLanchVoteOut_SC::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MSG_ReqLanchVoteOut_SC::has_duration() const {
  return _internal_has_duration();
}
inline void MSG_ReqLanchVoteOut_SC::clear_duration() {
  duration_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& MSG_ReqLanchVoteOut_SC::duration() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqLanchVoteOut_SC.duration)
  return _internal_duration();
}
inline void MSG_ReqLanchVoteOut_SC::set_duration(const std::string& value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqLanchVoteOut_SC.duration)
}
inline std::string* MSG_ReqLanchVoteOut_SC::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqLanchVoteOut_SC.duration)
  return _internal_mutable_duration();
}
inline const std::string& MSG_ReqLanchVoteOut_SC::_internal_duration() const {
  return duration_.GetNoArena();
}
inline void MSG_ReqLanchVoteOut_SC::_internal_set_duration(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  duration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqLanchVoteOut_SC::set_duration(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  duration_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqLanchVoteOut_SC.duration)
}
inline void MSG_ReqLanchVoteOut_SC::set_duration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  duration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqLanchVoteOut_SC.duration)
}
inline void MSG_ReqLanchVoteOut_SC::set_duration(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  duration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqLanchVoteOut_SC.duration)
}
inline std::string* MSG_ReqLanchVoteOut_SC::_internal_mutable_duration() {
  _has_bits_[0] |= 0x00000010u;
  return duration_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqLanchVoteOut_SC::release_duration() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqLanchVoteOut_SC.duration)
  if (!_internal_has_duration()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return duration_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqLanchVoteOut_SC::set_allocated_duration(std::string* duration) {
  if (duration != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  duration_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqLanchVoteOut_SC.duration)
}

// -------------------------------------------------------------------

// MSG_ReqVote_CS

// required bool yesorno = 1 [default = false];
inline bool MSG_ReqVote_CS::_internal_has_yesorno() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqVote_CS::has_yesorno() const {
  return _internal_has_yesorno();
}
inline void MSG_ReqVote_CS::clear_yesorno() {
  yesorno_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MSG_ReqVote_CS::_internal_yesorno() const {
  return yesorno_;
}
inline bool MSG_ReqVote_CS::yesorno() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqVote_CS.yesorno)
  return _internal_yesorno();
}
inline void MSG_ReqVote_CS::_internal_set_yesorno(bool value) {
  _has_bits_[0] |= 0x00000001u;
  yesorno_ = value;
}
inline void MSG_ReqVote_CS::set_yesorno(bool value) {
  _internal_set_yesorno(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqVote_CS.yesorno)
}

// -------------------------------------------------------------------

// MSG_ReqChangeLeader_CS

// required string toid = 1;
inline bool MSG_ReqChangeLeader_CS::_internal_has_toid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqChangeLeader_CS::has_toid() const {
  return _internal_has_toid();
}
inline void MSG_ReqChangeLeader_CS::clear_toid() {
  toid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ReqChangeLeader_CS::toid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqChangeLeader_CS.toid)
  return _internal_toid();
}
inline void MSG_ReqChangeLeader_CS::set_toid(const std::string& value) {
  _internal_set_toid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqChangeLeader_CS.toid)
}
inline std::string* MSG_ReqChangeLeader_CS::mutable_toid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqChangeLeader_CS.toid)
  return _internal_mutable_toid();
}
inline const std::string& MSG_ReqChangeLeader_CS::_internal_toid() const {
  return toid_.GetNoArena();
}
inline void MSG_ReqChangeLeader_CS::_internal_set_toid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  toid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqChangeLeader_CS::set_toid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  toid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqChangeLeader_CS.toid)
}
inline void MSG_ReqChangeLeader_CS::set_toid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  toid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqChangeLeader_CS.toid)
}
inline void MSG_ReqChangeLeader_CS::set_toid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  toid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqChangeLeader_CS.toid)
}
inline std::string* MSG_ReqChangeLeader_CS::_internal_mutable_toid() {
  _has_bits_[0] |= 0x00000001u;
  return toid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqChangeLeader_CS::release_toid() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqChangeLeader_CS.toid)
  if (!_internal_has_toid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return toid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqChangeLeader_CS::set_allocated_toid(std::string* toid) {
  if (toid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  toid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqChangeLeader_CS.toid)
}

// -------------------------------------------------------------------

// MSG_ReqChangeLeader_SC

// required string newid = 1;
inline bool MSG_ReqChangeLeader_SC::_internal_has_newid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqChangeLeader_SC::has_newid() const {
  return _internal_has_newid();
}
inline void MSG_ReqChangeLeader_SC::clear_newid() {
  newid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ReqChangeLeader_SC::newid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqChangeLeader_SC.newid)
  return _internal_newid();
}
inline void MSG_ReqChangeLeader_SC::set_newid(const std::string& value) {
  _internal_set_newid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqChangeLeader_SC.newid)
}
inline std::string* MSG_ReqChangeLeader_SC::mutable_newid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqChangeLeader_SC.newid)
  return _internal_mutable_newid();
}
inline const std::string& MSG_ReqChangeLeader_SC::_internal_newid() const {
  return newid_.GetNoArena();
}
inline void MSG_ReqChangeLeader_SC::_internal_set_newid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  newid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqChangeLeader_SC::set_newid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  newid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqChangeLeader_SC.newid)
}
inline void MSG_ReqChangeLeader_SC::set_newid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  newid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqChangeLeader_SC.newid)
}
inline void MSG_ReqChangeLeader_SC::set_newid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  newid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqChangeLeader_SC.newid)
}
inline std::string* MSG_ReqChangeLeader_SC::_internal_mutable_newid() {
  _has_bits_[0] |= 0x00000001u;
  return newid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqChangeLeader_SC::release_newid() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqChangeLeader_SC.newid)
  if (!_internal_has_newid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return newid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqChangeLeader_SC::set_allocated_newid(std::string* newid) {
  if (newid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  newid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqChangeLeader_SC.newid)
}

// optional string newname = 2;
inline bool MSG_ReqChangeLeader_SC::_internal_has_newname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ReqChangeLeader_SC::has_newname() const {
  return _internal_has_newname();
}
inline void MSG_ReqChangeLeader_SC::clear_newname() {
  newname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_ReqChangeLeader_SC::newname() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqChangeLeader_SC.newname)
  return _internal_newname();
}
inline void MSG_ReqChangeLeader_SC::set_newname(const std::string& value) {
  _internal_set_newname(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqChangeLeader_SC.newname)
}
inline std::string* MSG_ReqChangeLeader_SC::mutable_newname() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqChangeLeader_SC.newname)
  return _internal_mutable_newname();
}
inline const std::string& MSG_ReqChangeLeader_SC::_internal_newname() const {
  return newname_.GetNoArena();
}
inline void MSG_ReqChangeLeader_SC::_internal_set_newname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  newname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqChangeLeader_SC::set_newname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  newname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqChangeLeader_SC.newname)
}
inline void MSG_ReqChangeLeader_SC::set_newname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  newname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqChangeLeader_SC.newname)
}
inline void MSG_ReqChangeLeader_SC::set_newname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  newname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqChangeLeader_SC.newname)
}
inline std::string* MSG_ReqChangeLeader_SC::_internal_mutable_newname() {
  _has_bits_[0] |= 0x00000002u;
  return newname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqChangeLeader_SC::release_newname() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqChangeLeader_SC.newname)
  if (!_internal_has_newname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return newname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqChangeLeader_SC::set_allocated_newname(std::string* newname) {
  if (newname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  newname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newname);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqChangeLeader_SC.newname)
}

// -------------------------------------------------------------------

// MSG_ReqNearByUnteamedPlayer_CS

// -------------------------------------------------------------------

// MSG_ReqNearByUnteamedPlayer_SC

// repeated .Team.Memember mem = 1;
inline int MSG_ReqNearByUnteamedPlayer_SC::_internal_mem_size() const {
  return mem_.size();
}
inline int MSG_ReqNearByUnteamedPlayer_SC::mem_size() const {
  return _internal_mem_size();
}
inline void MSG_ReqNearByUnteamedPlayer_SC::clear_mem() {
  mem_.Clear();
}
inline ::Team::Memember* MSG_ReqNearByUnteamedPlayer_SC::mutable_mem(int index) {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqNearByUnteamedPlayer_SC.mem)
  return mem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >*
MSG_ReqNearByUnteamedPlayer_SC::mutable_mem() {
  // @@protoc_insertion_point(field_mutable_list:Team.MSG_ReqNearByUnteamedPlayer_SC.mem)
  return &mem_;
}
inline const ::Team::Memember& MSG_ReqNearByUnteamedPlayer_SC::_internal_mem(int index) const {
  return mem_.Get(index);
}
inline const ::Team::Memember& MSG_ReqNearByUnteamedPlayer_SC::mem(int index) const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqNearByUnteamedPlayer_SC.mem)
  return _internal_mem(index);
}
inline ::Team::Memember* MSG_ReqNearByUnteamedPlayer_SC::_internal_add_mem() {
  return mem_.Add();
}
inline ::Team::Memember* MSG_ReqNearByUnteamedPlayer_SC::add_mem() {
  // @@protoc_insertion_point(field_add:Team.MSG_ReqNearByUnteamedPlayer_SC.mem)
  return _internal_add_mem();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::Memember >&
MSG_ReqNearByUnteamedPlayer_SC::mem() const {
  // @@protoc_insertion_point(field_list:Team.MSG_ReqNearByUnteamedPlayer_SC.mem)
  return mem_;
}

// -------------------------------------------------------------------

// MSG_InviteIntoTeam_CS

// optional string inviteeid = 1;
inline bool MSG_InviteIntoTeam_CS::_internal_has_inviteeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_InviteIntoTeam_CS::has_inviteeid() const {
  return _internal_has_inviteeid();
}
inline void MSG_InviteIntoTeam_CS::clear_inviteeid() {
  inviteeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_InviteIntoTeam_CS::inviteeid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_InviteIntoTeam_CS.inviteeid)
  return _internal_inviteeid();
}
inline void MSG_InviteIntoTeam_CS::set_inviteeid(const std::string& value) {
  _internal_set_inviteeid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_InviteIntoTeam_CS.inviteeid)
}
inline std::string* MSG_InviteIntoTeam_CS::mutable_inviteeid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_InviteIntoTeam_CS.inviteeid)
  return _internal_mutable_inviteeid();
}
inline const std::string& MSG_InviteIntoTeam_CS::_internal_inviteeid() const {
  return inviteeid_.GetNoArena();
}
inline void MSG_InviteIntoTeam_CS::_internal_set_inviteeid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  inviteeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_InviteIntoTeam_CS::set_inviteeid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  inviteeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_InviteIntoTeam_CS.inviteeid)
}
inline void MSG_InviteIntoTeam_CS::set_inviteeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  inviteeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_InviteIntoTeam_CS.inviteeid)
}
inline void MSG_InviteIntoTeam_CS::set_inviteeid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  inviteeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_InviteIntoTeam_CS.inviteeid)
}
inline std::string* MSG_InviteIntoTeam_CS::_internal_mutable_inviteeid() {
  _has_bits_[0] |= 0x00000001u;
  return inviteeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_InviteIntoTeam_CS::release_inviteeid() {
  // @@protoc_insertion_point(field_release:Team.MSG_InviteIntoTeam_CS.inviteeid)
  if (!_internal_has_inviteeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return inviteeid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_InviteIntoTeam_CS::set_allocated_inviteeid(std::string* inviteeid) {
  if (inviteeid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inviteeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviteeid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_InviteIntoTeam_CS.inviteeid)
}

// -------------------------------------------------------------------

// MSG_InviteIntoTeam_SC

// optional uint32 errcode = 1 [default = 0];
inline bool MSG_InviteIntoTeam_SC::_internal_has_errcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_InviteIntoTeam_SC::has_errcode() const {
  return _internal_has_errcode();
}
inline void MSG_InviteIntoTeam_SC::clear_errcode() {
  errcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_InviteIntoTeam_SC::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_InviteIntoTeam_SC::errcode() const {
  // @@protoc_insertion_point(field_get:Team.MSG_InviteIntoTeam_SC.errcode)
  return _internal_errcode();
}
inline void MSG_InviteIntoTeam_SC::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  errcode_ = value;
}
inline void MSG_InviteIntoTeam_SC::set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:Team.MSG_InviteIntoTeam_SC.errcode)
}

// -------------------------------------------------------------------

// MSG_AnswerInviteTeam_CS

// optional bool yesorno = 1 [default = false];
inline bool MSG_AnswerInviteTeam_CS::_internal_has_yesorno() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_AnswerInviteTeam_CS::has_yesorno() const {
  return _internal_has_yesorno();
}
inline void MSG_AnswerInviteTeam_CS::clear_yesorno() {
  yesorno_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MSG_AnswerInviteTeam_CS::_internal_yesorno() const {
  return yesorno_;
}
inline bool MSG_AnswerInviteTeam_CS::yesorno() const {
  // @@protoc_insertion_point(field_get:Team.MSG_AnswerInviteTeam_CS.yesorno)
  return _internal_yesorno();
}
inline void MSG_AnswerInviteTeam_CS::_internal_set_yesorno(bool value) {
  _has_bits_[0] |= 0x00000004u;
  yesorno_ = value;
}
inline void MSG_AnswerInviteTeam_CS::set_yesorno(bool value) {
  _internal_set_yesorno(value);
  // @@protoc_insertion_point(field_set:Team.MSG_AnswerInviteTeam_CS.yesorno)
}

// optional string inviterid = 2;
inline bool MSG_AnswerInviteTeam_CS::_internal_has_inviterid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_AnswerInviteTeam_CS::has_inviterid() const {
  return _internal_has_inviterid();
}
inline void MSG_AnswerInviteTeam_CS::clear_inviterid() {
  inviterid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_AnswerInviteTeam_CS::inviterid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_AnswerInviteTeam_CS.inviterid)
  return _internal_inviterid();
}
inline void MSG_AnswerInviteTeam_CS::set_inviterid(const std::string& value) {
  _internal_set_inviterid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_AnswerInviteTeam_CS.inviterid)
}
inline std::string* MSG_AnswerInviteTeam_CS::mutable_inviterid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_AnswerInviteTeam_CS.inviterid)
  return _internal_mutable_inviterid();
}
inline const std::string& MSG_AnswerInviteTeam_CS::_internal_inviterid() const {
  return inviterid_.GetNoArena();
}
inline void MSG_AnswerInviteTeam_CS::_internal_set_inviterid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  inviterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_AnswerInviteTeam_CS::set_inviterid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  inviterid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_AnswerInviteTeam_CS.inviterid)
}
inline void MSG_AnswerInviteTeam_CS::set_inviterid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  inviterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_AnswerInviteTeam_CS.inviterid)
}
inline void MSG_AnswerInviteTeam_CS::set_inviterid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  inviterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_AnswerInviteTeam_CS.inviterid)
}
inline std::string* MSG_AnswerInviteTeam_CS::_internal_mutable_inviterid() {
  _has_bits_[0] |= 0x00000001u;
  return inviterid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_AnswerInviteTeam_CS::release_inviterid() {
  // @@protoc_insertion_point(field_release:Team.MSG_AnswerInviteTeam_CS.inviterid)
  if (!_internal_has_inviterid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return inviterid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_AnswerInviteTeam_CS::set_allocated_inviterid(std::string* inviterid) {
  if (inviterid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inviterid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviterid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_AnswerInviteTeam_CS.inviterid)
}

// optional string inviteeid = 3;
inline bool MSG_AnswerInviteTeam_CS::_internal_has_inviteeid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_AnswerInviteTeam_CS::has_inviteeid() const {
  return _internal_has_inviteeid();
}
inline void MSG_AnswerInviteTeam_CS::clear_inviteeid() {
  inviteeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_AnswerInviteTeam_CS::inviteeid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_AnswerInviteTeam_CS.inviteeid)
  return _internal_inviteeid();
}
inline void MSG_AnswerInviteTeam_CS::set_inviteeid(const std::string& value) {
  _internal_set_inviteeid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_AnswerInviteTeam_CS.inviteeid)
}
inline std::string* MSG_AnswerInviteTeam_CS::mutable_inviteeid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_AnswerInviteTeam_CS.inviteeid)
  return _internal_mutable_inviteeid();
}
inline const std::string& MSG_AnswerInviteTeam_CS::_internal_inviteeid() const {
  return inviteeid_.GetNoArena();
}
inline void MSG_AnswerInviteTeam_CS::_internal_set_inviteeid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  inviteeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_AnswerInviteTeam_CS::set_inviteeid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  inviteeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_AnswerInviteTeam_CS.inviteeid)
}
inline void MSG_AnswerInviteTeam_CS::set_inviteeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  inviteeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_AnswerInviteTeam_CS.inviteeid)
}
inline void MSG_AnswerInviteTeam_CS::set_inviteeid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  inviteeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_AnswerInviteTeam_CS.inviteeid)
}
inline std::string* MSG_AnswerInviteTeam_CS::_internal_mutable_inviteeid() {
  _has_bits_[0] |= 0x00000002u;
  return inviteeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_AnswerInviteTeam_CS::release_inviteeid() {
  // @@protoc_insertion_point(field_release:Team.MSG_AnswerInviteTeam_CS.inviteeid)
  if (!_internal_has_inviteeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return inviteeid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_AnswerInviteTeam_CS::set_allocated_inviteeid(std::string* inviteeid) {
  if (inviteeid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  inviteeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviteeid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_AnswerInviteTeam_CS.inviteeid)
}

// optional uint32 teamid = 4;
inline bool MSG_AnswerInviteTeam_CS::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_AnswerInviteTeam_CS::has_teamid() const {
  return _internal_has_teamid();
}
inline void MSG_AnswerInviteTeam_CS::clear_teamid() {
  teamid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_AnswerInviteTeam_CS::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_AnswerInviteTeam_CS::teamid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_AnswerInviteTeam_CS.teamid)
  return _internal_teamid();
}
inline void MSG_AnswerInviteTeam_CS::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  teamid_ = value;
}
inline void MSG_AnswerInviteTeam_CS::set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_AnswerInviteTeam_CS.teamid)
}

// -------------------------------------------------------------------

// MSG_AddMemember_SC

// optional .Team.Memember mem = 1;
inline bool MSG_AddMemember_SC::_internal_has_mem() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || mem_ != nullptr);
  return value;
}
inline bool MSG_AddMemember_SC::has_mem() const {
  return _internal_has_mem();
}
inline void MSG_AddMemember_SC::clear_mem() {
  if (mem_ != nullptr) mem_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Team::Memember& MSG_AddMemember_SC::_internal_mem() const {
  const ::Team::Memember* p = mem_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Team::Memember*>(
      &::Team::_Memember_default_instance_);
}
inline const ::Team::Memember& MSG_AddMemember_SC::mem() const {
  // @@protoc_insertion_point(field_get:Team.MSG_AddMemember_SC.mem)
  return _internal_mem();
}
inline ::Team::Memember* MSG_AddMemember_SC::release_mem() {
  // @@protoc_insertion_point(field_release:Team.MSG_AddMemember_SC.mem)
  _has_bits_[0] &= ~0x00000001u;
  ::Team::Memember* temp = mem_;
  mem_ = nullptr;
  return temp;
}
inline ::Team::Memember* MSG_AddMemember_SC::_internal_mutable_mem() {
  _has_bits_[0] |= 0x00000001u;
  if (mem_ == nullptr) {
    auto* p = CreateMaybeMessage<::Team::Memember>(GetArenaNoVirtual());
    mem_ = p;
  }
  return mem_;
}
inline ::Team::Memember* MSG_AddMemember_SC::mutable_mem() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_AddMemember_SC.mem)
  return _internal_mutable_mem();
}
inline void MSG_AddMemember_SC::set_allocated_mem(::Team::Memember* mem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mem_;
  }
  if (mem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mem_ = mem;
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_AddMemember_SC.mem)
}

// -------------------------------------------------------------------

// MSG_LeaderIgnoreNotice_CS

// -------------------------------------------------------------------

// MSG_updateTeamMememberHp_SC

// optional string memid = 1;
inline bool MSG_updateTeamMememberHp_SC::_internal_has_memid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_updateTeamMememberHp_SC::has_memid() const {
  return _internal_has_memid();
}
inline void MSG_updateTeamMememberHp_SC::clear_memid() {
  memid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_updateTeamMememberHp_SC::memid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMememberHp_SC.memid)
  return _internal_memid();
}
inline void MSG_updateTeamMememberHp_SC::set_memid(const std::string& value) {
  _internal_set_memid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMememberHp_SC.memid)
}
inline std::string* MSG_updateTeamMememberHp_SC::mutable_memid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_updateTeamMememberHp_SC.memid)
  return _internal_mutable_memid();
}
inline const std::string& MSG_updateTeamMememberHp_SC::_internal_memid() const {
  return memid_.GetNoArena();
}
inline void MSG_updateTeamMememberHp_SC::_internal_set_memid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_updateTeamMememberHp_SC::set_memid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_updateTeamMememberHp_SC.memid)
}
inline void MSG_updateTeamMememberHp_SC::set_memid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_updateTeamMememberHp_SC.memid)
}
inline void MSG_updateTeamMememberHp_SC::set_memid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_updateTeamMememberHp_SC.memid)
}
inline std::string* MSG_updateTeamMememberHp_SC::_internal_mutable_memid() {
  _has_bits_[0] |= 0x00000001u;
  return memid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_updateTeamMememberHp_SC::release_memid() {
  // @@protoc_insertion_point(field_release:Team.MSG_updateTeamMememberHp_SC.memid)
  if (!_internal_has_memid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_updateTeamMememberHp_SC::set_allocated_memid(std::string* memid) {
  if (memid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_updateTeamMememberHp_SC.memid)
}

// optional uint32 hp = 2;
inline bool MSG_updateTeamMememberHp_SC::_internal_has_hp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_updateTeamMememberHp_SC::has_hp() const {
  return _internal_has_hp();
}
inline void MSG_updateTeamMememberHp_SC::clear_hp() {
  hp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMememberHp_SC::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMememberHp_SC::hp() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMememberHp_SC.hp)
  return _internal_hp();
}
inline void MSG_updateTeamMememberHp_SC::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  hp_ = value;
}
inline void MSG_updateTeamMememberHp_SC::set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMememberHp_SC.hp)
}

// optional uint32 maxhp = 3;
inline bool MSG_updateTeamMememberHp_SC::_internal_has_maxhp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_updateTeamMememberHp_SC::has_maxhp() const {
  return _internal_has_maxhp();
}
inline void MSG_updateTeamMememberHp_SC::clear_maxhp() {
  maxhp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMememberHp_SC::_internal_maxhp() const {
  return maxhp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMememberHp_SC::maxhp() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMememberHp_SC.maxhp)
  return _internal_maxhp();
}
inline void MSG_updateTeamMememberHp_SC::_internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  maxhp_ = value;
}
inline void MSG_updateTeamMememberHp_SC::set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMememberHp_SC.maxhp)
}

// optional bool isdead = 4 [default = false];
inline bool MSG_updateTeamMememberHp_SC::_internal_has_isdead() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_updateTeamMememberHp_SC::has_isdead() const {
  return _internal_has_isdead();
}
inline void MSG_updateTeamMememberHp_SC::clear_isdead() {
  isdead_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool MSG_updateTeamMememberHp_SC::_internal_isdead() const {
  return isdead_;
}
inline bool MSG_updateTeamMememberHp_SC::isdead() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMememberHp_SC.isdead)
  return _internal_isdead();
}
inline void MSG_updateTeamMememberHp_SC::_internal_set_isdead(bool value) {
  _has_bits_[0] |= 0x00000008u;
  isdead_ = value;
}
inline void MSG_updateTeamMememberHp_SC::set_isdead(bool value) {
  _internal_set_isdead(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMememberHp_SC.isdead)
}

// -------------------------------------------------------------------

// MSG_updateTeamMememberCareer_SC

// optional string mememberid = 1;
inline bool MSG_updateTeamMememberCareer_SC::_internal_has_mememberid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_updateTeamMememberCareer_SC::has_mememberid() const {
  return _internal_has_mememberid();
}
inline void MSG_updateTeamMememberCareer_SC::clear_mememberid() {
  mememberid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_updateTeamMememberCareer_SC::mememberid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMememberCareer_SC.mememberid)
  return _internal_mememberid();
}
inline void MSG_updateTeamMememberCareer_SC::set_mememberid(const std::string& value) {
  _internal_set_mememberid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMememberCareer_SC.mememberid)
}
inline std::string* MSG_updateTeamMememberCareer_SC::mutable_mememberid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_updateTeamMememberCareer_SC.mememberid)
  return _internal_mutable_mememberid();
}
inline const std::string& MSG_updateTeamMememberCareer_SC::_internal_mememberid() const {
  return mememberid_.GetNoArena();
}
inline void MSG_updateTeamMememberCareer_SC::_internal_set_mememberid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_updateTeamMememberCareer_SC::set_mememberid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_updateTeamMememberCareer_SC.mememberid)
}
inline void MSG_updateTeamMememberCareer_SC::set_mememberid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_updateTeamMememberCareer_SC.mememberid)
}
inline void MSG_updateTeamMememberCareer_SC::set_mememberid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_updateTeamMememberCareer_SC.mememberid)
}
inline std::string* MSG_updateTeamMememberCareer_SC::_internal_mutable_mememberid() {
  _has_bits_[0] |= 0x00000001u;
  return mememberid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_updateTeamMememberCareer_SC::release_mememberid() {
  // @@protoc_insertion_point(field_release:Team.MSG_updateTeamMememberCareer_SC.mememberid)
  if (!_internal_has_mememberid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mememberid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_updateTeamMememberCareer_SC::set_allocated_mememberid(std::string* mememberid) {
  if (mememberid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mememberid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mememberid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_updateTeamMememberCareer_SC.mememberid)
}

// optional uint32 career = 2;
inline bool MSG_updateTeamMememberCareer_SC::_internal_has_career() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_updateTeamMememberCareer_SC::has_career() const {
  return _internal_has_career();
}
inline void MSG_updateTeamMememberCareer_SC::clear_career() {
  career_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMememberCareer_SC::_internal_career() const {
  return career_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMememberCareer_SC::career() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMememberCareer_SC.career)
  return _internal_career();
}
inline void MSG_updateTeamMememberCareer_SC::_internal_set_career(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  career_ = value;
}
inline void MSG_updateTeamMememberCareer_SC::set_career(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_career(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMememberCareer_SC.career)
}

// optional uint32 careerlevel = 3;
inline bool MSG_updateTeamMememberCareer_SC::_internal_has_careerlevel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_updateTeamMememberCareer_SC::has_careerlevel() const {
  return _internal_has_careerlevel();
}
inline void MSG_updateTeamMememberCareer_SC::clear_careerlevel() {
  careerlevel_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMememberCareer_SC::_internal_careerlevel() const {
  return careerlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMememberCareer_SC::careerlevel() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMememberCareer_SC.careerlevel)
  return _internal_careerlevel();
}
inline void MSG_updateTeamMememberCareer_SC::_internal_set_careerlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  careerlevel_ = value;
}
inline void MSG_updateTeamMememberCareer_SC::set_careerlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_careerlevel(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMememberCareer_SC.careerlevel)
}

// -------------------------------------------------------------------

// MSG_updateTeamMemeberHero_SC

// optional string memid = 1;
inline bool MSG_updateTeamMemeberHero_SC::_internal_has_memid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_updateTeamMemeberHero_SC::has_memid() const {
  return _internal_has_memid();
}
inline void MSG_updateTeamMemeberHero_SC::clear_memid() {
  memid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_updateTeamMemeberHero_SC::memid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemeberHero_SC.memid)
  return _internal_memid();
}
inline void MSG_updateTeamMemeberHero_SC::set_memid(const std::string& value) {
  _internal_set_memid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemeberHero_SC.memid)
}
inline std::string* MSG_updateTeamMemeberHero_SC::mutable_memid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_updateTeamMemeberHero_SC.memid)
  return _internal_mutable_memid();
}
inline const std::string& MSG_updateTeamMemeberHero_SC::_internal_memid() const {
  return memid_.GetNoArena();
}
inline void MSG_updateTeamMemeberHero_SC::_internal_set_memid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_updateTeamMemeberHero_SC::set_memid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_updateTeamMemeberHero_SC.memid)
}
inline void MSG_updateTeamMemeberHero_SC::set_memid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_updateTeamMemeberHero_SC.memid)
}
inline void MSG_updateTeamMemeberHero_SC::set_memid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_updateTeamMemeberHero_SC.memid)
}
inline std::string* MSG_updateTeamMemeberHero_SC::_internal_mutable_memid() {
  _has_bits_[0] |= 0x00000001u;
  return memid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_updateTeamMemeberHero_SC::release_memid() {
  // @@protoc_insertion_point(field_release:Team.MSG_updateTeamMemeberHero_SC.memid)
  if (!_internal_has_memid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_updateTeamMemeberHero_SC::set_allocated_memid(std::string* memid) {
  if (memid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_updateTeamMemeberHero_SC.memid)
}

// optional uint32 heroid = 2;
inline bool MSG_updateTeamMemeberHero_SC::_internal_has_heroid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_updateTeamMemeberHero_SC::has_heroid() const {
  return _internal_has_heroid();
}
inline void MSG_updateTeamMemeberHero_SC::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemeberHero_SC::_internal_heroid() const {
  return heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemeberHero_SC::heroid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemeberHero_SC.heroid)
  return _internal_heroid();
}
inline void MSG_updateTeamMemeberHero_SC::_internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  heroid_ = value;
}
inline void MSG_updateTeamMemeberHero_SC::set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemeberHero_SC.heroid)
}

// -------------------------------------------------------------------

// MSG_updateTeamMememberLevel_SC

// optional string mememberid = 1;
inline bool MSG_updateTeamMememberLevel_SC::_internal_has_mememberid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_updateTeamMememberLevel_SC::has_mememberid() const {
  return _internal_has_mememberid();
}
inline void MSG_updateTeamMememberLevel_SC::clear_mememberid() {
  mememberid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_updateTeamMememberLevel_SC::mememberid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMememberLevel_SC.mememberid)
  return _internal_mememberid();
}
inline void MSG_updateTeamMememberLevel_SC::set_mememberid(const std::string& value) {
  _internal_set_mememberid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMememberLevel_SC.mememberid)
}
inline std::string* MSG_updateTeamMememberLevel_SC::mutable_mememberid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_updateTeamMememberLevel_SC.mememberid)
  return _internal_mutable_mememberid();
}
inline const std::string& MSG_updateTeamMememberLevel_SC::_internal_mememberid() const {
  return mememberid_.GetNoArena();
}
inline void MSG_updateTeamMememberLevel_SC::_internal_set_mememberid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_updateTeamMememberLevel_SC::set_mememberid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_updateTeamMememberLevel_SC.mememberid)
}
inline void MSG_updateTeamMememberLevel_SC::set_mememberid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_updateTeamMememberLevel_SC.mememberid)
}
inline void MSG_updateTeamMememberLevel_SC::set_mememberid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_updateTeamMememberLevel_SC.mememberid)
}
inline std::string* MSG_updateTeamMememberLevel_SC::_internal_mutable_mememberid() {
  _has_bits_[0] |= 0x00000001u;
  return mememberid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_updateTeamMememberLevel_SC::release_mememberid() {
  // @@protoc_insertion_point(field_release:Team.MSG_updateTeamMememberLevel_SC.mememberid)
  if (!_internal_has_mememberid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mememberid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_updateTeamMememberLevel_SC::set_allocated_mememberid(std::string* mememberid) {
  if (mememberid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mememberid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mememberid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_updateTeamMememberLevel_SC.mememberid)
}

// optional uint32 level = 2;
inline bool MSG_updateTeamMememberLevel_SC::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_updateTeamMememberLevel_SC::has_level() const {
  return _internal_has_level();
}
inline void MSG_updateTeamMememberLevel_SC::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMememberLevel_SC::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMememberLevel_SC::level() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMememberLevel_SC.level)
  return _internal_level();
}
inline void MSG_updateTeamMememberLevel_SC::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
}
inline void MSG_updateTeamMememberLevel_SC::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMememberLevel_SC.level)
}

// optional string membername = 3;
inline bool MSG_updateTeamMememberLevel_SC::_internal_has_membername() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_updateTeamMememberLevel_SC::has_membername() const {
  return _internal_has_membername();
}
inline void MSG_updateTeamMememberLevel_SC::clear_membername() {
  membername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_updateTeamMememberLevel_SC::membername() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMememberLevel_SC.membername)
  return _internal_membername();
}
inline void MSG_updateTeamMememberLevel_SC::set_membername(const std::string& value) {
  _internal_set_membername(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMememberLevel_SC.membername)
}
inline std::string* MSG_updateTeamMememberLevel_SC::mutable_membername() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_updateTeamMememberLevel_SC.membername)
  return _internal_mutable_membername();
}
inline const std::string& MSG_updateTeamMememberLevel_SC::_internal_membername() const {
  return membername_.GetNoArena();
}
inline void MSG_updateTeamMememberLevel_SC::_internal_set_membername(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  membername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_updateTeamMememberLevel_SC::set_membername(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  membername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_updateTeamMememberLevel_SC.membername)
}
inline void MSG_updateTeamMememberLevel_SC::set_membername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  membername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_updateTeamMememberLevel_SC.membername)
}
inline void MSG_updateTeamMememberLevel_SC::set_membername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  membername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_updateTeamMememberLevel_SC.membername)
}
inline std::string* MSG_updateTeamMememberLevel_SC::_internal_mutable_membername() {
  _has_bits_[0] |= 0x00000002u;
  return membername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_updateTeamMememberLevel_SC::release_membername() {
  // @@protoc_insertion_point(field_release:Team.MSG_updateTeamMememberLevel_SC.membername)
  if (!_internal_has_membername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return membername_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_updateTeamMememberLevel_SC::set_allocated_membername(std::string* membername) {
  if (membername != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  membername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), membername);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_updateTeamMememberLevel_SC.membername)
}

// -------------------------------------------------------------------

// MSG_updateTeamMemberFight_SC

// optional string mememberid = 1;
inline bool MSG_updateTeamMemberFight_SC::_internal_has_mememberid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberFight_SC::has_mememberid() const {
  return _internal_has_mememberid();
}
inline void MSG_updateTeamMemberFight_SC::clear_mememberid() {
  mememberid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_updateTeamMemberFight_SC::mememberid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberFight_SC.mememberid)
  return _internal_mememberid();
}
inline void MSG_updateTeamMemberFight_SC::set_mememberid(const std::string& value) {
  _internal_set_mememberid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberFight_SC.mememberid)
}
inline std::string* MSG_updateTeamMemberFight_SC::mutable_mememberid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_updateTeamMemberFight_SC.mememberid)
  return _internal_mutable_mememberid();
}
inline const std::string& MSG_updateTeamMemberFight_SC::_internal_mememberid() const {
  return mememberid_.GetNoArena();
}
inline void MSG_updateTeamMemberFight_SC::_internal_set_mememberid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_updateTeamMemberFight_SC::set_mememberid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_updateTeamMemberFight_SC.mememberid)
}
inline void MSG_updateTeamMemberFight_SC::set_mememberid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_updateTeamMemberFight_SC.mememberid)
}
inline void MSG_updateTeamMemberFight_SC::set_mememberid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_updateTeamMemberFight_SC.mememberid)
}
inline std::string* MSG_updateTeamMemberFight_SC::_internal_mutable_mememberid() {
  _has_bits_[0] |= 0x00000001u;
  return mememberid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_updateTeamMemberFight_SC::release_mememberid() {
  // @@protoc_insertion_point(field_release:Team.MSG_updateTeamMemberFight_SC.mememberid)
  if (!_internal_has_mememberid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mememberid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_updateTeamMemberFight_SC::set_allocated_mememberid(std::string* mememberid) {
  if (mememberid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mememberid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mememberid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_updateTeamMemberFight_SC.mememberid)
}

// optional uint32 fight = 2;
inline bool MSG_updateTeamMemberFight_SC::_internal_has_fight() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberFight_SC::has_fight() const {
  return _internal_has_fight();
}
inline void MSG_updateTeamMemberFight_SC::clear_fight() {
  fight_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberFight_SC::_internal_fight() const {
  return fight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberFight_SC::fight() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberFight_SC.fight)
  return _internal_fight();
}
inline void MSG_updateTeamMemberFight_SC::_internal_set_fight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fight_ = value;
}
inline void MSG_updateTeamMemberFight_SC::set_fight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fight(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberFight_SC.fight)
}

// optional uint32 heroid = 3;
inline bool MSG_updateTeamMemberFight_SC::_internal_has_heroid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberFight_SC::has_heroid() const {
  return _internal_has_heroid();
}
inline void MSG_updateTeamMemberFight_SC::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberFight_SC::_internal_heroid() const {
  return heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberFight_SC::heroid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberFight_SC.heroid)
  return _internal_heroid();
}
inline void MSG_updateTeamMemberFight_SC::_internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  heroid_ = value;
}
inline void MSG_updateTeamMemberFight_SC::set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberFight_SC.heroid)
}

// -------------------------------------------------------------------

// MSG_ReqTeamMemberPos_CS

// -------------------------------------------------------------------

// MemberPos

// optional string memberid = 1;
inline bool MemberPos::_internal_has_memberid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MemberPos::has_memberid() const {
  return _internal_has_memberid();
}
inline void MemberPos::clear_memberid() {
  memberid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MemberPos::memberid() const {
  // @@protoc_insertion_point(field_get:Team.MemberPos.memberid)
  return _internal_memberid();
}
inline void MemberPos::set_memberid(const std::string& value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:Team.MemberPos.memberid)
}
inline std::string* MemberPos::mutable_memberid() {
  // @@protoc_insertion_point(field_mutable:Team.MemberPos.memberid)
  return _internal_mutable_memberid();
}
inline const std::string& MemberPos::_internal_memberid() const {
  return memberid_.GetNoArena();
}
inline void MemberPos::_internal_set_memberid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MemberPos::set_memberid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  memberid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MemberPos.memberid)
}
inline void MemberPos::set_memberid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  memberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MemberPos.memberid)
}
inline void MemberPos::set_memberid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  memberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MemberPos.memberid)
}
inline std::string* MemberPos::_internal_mutable_memberid() {
  _has_bits_[0] |= 0x00000001u;
  return memberid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemberPos::release_memberid() {
  // @@protoc_insertion_point(field_release:Team.MemberPos.memberid)
  if (!_internal_has_memberid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memberid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemberPos::set_allocated_memberid(std::string* memberid) {
  if (memberid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memberid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memberid);
  // @@protoc_insertion_point(field_set_allocated:Team.MemberPos.memberid)
}

// optional string sceneid = 2;
inline bool MemberPos::_internal_has_sceneid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MemberPos::has_sceneid() const {
  return _internal_has_sceneid();
}
inline void MemberPos::clear_sceneid() {
  sceneid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MemberPos::sceneid() const {
  // @@protoc_insertion_point(field_get:Team.MemberPos.sceneid)
  return _internal_sceneid();
}
inline void MemberPos::set_sceneid(const std::string& value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:Team.MemberPos.sceneid)
}
inline std::string* MemberPos::mutable_sceneid() {
  // @@protoc_insertion_point(field_mutable:Team.MemberPos.sceneid)
  return _internal_mutable_sceneid();
}
inline const std::string& MemberPos::_internal_sceneid() const {
  return sceneid_.GetNoArena();
}
inline void MemberPos::_internal_set_sceneid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MemberPos::set_sceneid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sceneid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MemberPos.sceneid)
}
inline void MemberPos::set_sceneid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MemberPos.sceneid)
}
inline void MemberPos::set_sceneid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MemberPos.sceneid)
}
inline std::string* MemberPos::_internal_mutable_sceneid() {
  _has_bits_[0] |= 0x00000002u;
  return sceneid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MemberPos::release_sceneid() {
  // @@protoc_insertion_point(field_release:Team.MemberPos.sceneid)
  if (!_internal_has_sceneid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sceneid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MemberPos::set_allocated_sceneid(std::string* sceneid) {
  if (sceneid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sceneid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sceneid);
  // @@protoc_insertion_point(field_set_allocated:Team.MemberPos.sceneid)
}

// optional uint32 x = 3;
inline bool MemberPos::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MemberPos::has_x() const {
  return _internal_has_x();
}
inline void MemberPos::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberPos::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberPos::x() const {
  // @@protoc_insertion_point(field_get:Team.MemberPos.x)
  return _internal_x();
}
inline void MemberPos::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  x_ = value;
}
inline void MemberPos::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Team.MemberPos.x)
}

// optional uint32 y = 4;
inline bool MemberPos::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MemberPos::has_y() const {
  return _internal_has_y();
}
inline void MemberPos::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberPos::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemberPos::y() const {
  // @@protoc_insertion_point(field_get:Team.MemberPos.y)
  return _internal_y();
}
inline void MemberPos::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  y_ = value;
}
inline void MemberPos::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Team.MemberPos.y)
}

// -------------------------------------------------------------------

// MSG_RetTeamMemberPos_SC

// repeated .Team.MemberPos members = 1;
inline int MSG_RetTeamMemberPos_SC::_internal_members_size() const {
  return members_.size();
}
inline int MSG_RetTeamMemberPos_SC::members_size() const {
  return _internal_members_size();
}
inline void MSG_RetTeamMemberPos_SC::clear_members() {
  members_.Clear();
}
inline ::Team::MemberPos* MSG_RetTeamMemberPos_SC::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetTeamMemberPos_SC.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MemberPos >*
MSG_RetTeamMemberPos_SC::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:Team.MSG_RetTeamMemberPos_SC.members)
  return &members_;
}
inline const ::Team::MemberPos& MSG_RetTeamMemberPos_SC::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::Team::MemberPos& MSG_RetTeamMemberPos_SC::members(int index) const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetTeamMemberPos_SC.members)
  return _internal_members(index);
}
inline ::Team::MemberPos* MSG_RetTeamMemberPos_SC::_internal_add_members() {
  return members_.Add();
}
inline ::Team::MemberPos* MSG_RetTeamMemberPos_SC::add_members() {
  // @@protoc_insertion_point(field_add:Team.MSG_RetTeamMemberPos_SC.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MemberPos >&
MSG_RetTeamMemberPos_SC::members() const {
  // @@protoc_insertion_point(field_list:Team.MSG_RetTeamMemberPos_SC.members)
  return members_;
}

// -------------------------------------------------------------------

// MSG_RetNearByUnteamedInvite_SC

// optional .Team.Memember inviter = 1;
inline bool MSG_RetNearByUnteamedInvite_SC::_internal_has_inviter() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || inviter_ != nullptr);
  return value;
}
inline bool MSG_RetNearByUnteamedInvite_SC::has_inviter() const {
  return _internal_has_inviter();
}
inline void MSG_RetNearByUnteamedInvite_SC::clear_inviter() {
  if (inviter_ != nullptr) inviter_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Team::Memember& MSG_RetNearByUnteamedInvite_SC::_internal_inviter() const {
  const ::Team::Memember* p = inviter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Team::Memember*>(
      &::Team::_Memember_default_instance_);
}
inline const ::Team::Memember& MSG_RetNearByUnteamedInvite_SC::inviter() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetNearByUnteamedInvite_SC.inviter)
  return _internal_inviter();
}
inline ::Team::Memember* MSG_RetNearByUnteamedInvite_SC::release_inviter() {
  // @@protoc_insertion_point(field_release:Team.MSG_RetNearByUnteamedInvite_SC.inviter)
  _has_bits_[0] &= ~0x00000020u;
  ::Team::Memember* temp = inviter_;
  inviter_ = nullptr;
  return temp;
}
inline ::Team::Memember* MSG_RetNearByUnteamedInvite_SC::_internal_mutable_inviter() {
  _has_bits_[0] |= 0x00000020u;
  if (inviter_ == nullptr) {
    auto* p = CreateMaybeMessage<::Team::Memember>(GetArenaNoVirtual());
    inviter_ = p;
  }
  return inviter_;
}
inline ::Team::Memember* MSG_RetNearByUnteamedInvite_SC::mutable_inviter() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetNearByUnteamedInvite_SC.inviter)
  return _internal_mutable_inviter();
}
inline void MSG_RetNearByUnteamedInvite_SC::set_allocated_inviter(::Team::Memember* inviter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete inviter_;
  }
  if (inviter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inviter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  inviter_ = inviter;
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_RetNearByUnteamedInvite_SC.inviter)
}

// optional string invitername = 2;
inline bool MSG_RetNearByUnteamedInvite_SC::_internal_has_invitername() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetNearByUnteamedInvite_SC::has_invitername() const {
  return _internal_has_invitername();
}
inline void MSG_RetNearByUnteamedInvite_SC::clear_invitername() {
  invitername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_RetNearByUnteamedInvite_SC::invitername() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetNearByUnteamedInvite_SC.invitername)
  return _internal_invitername();
}
inline void MSG_RetNearByUnteamedInvite_SC::set_invitername(const std::string& value) {
  _internal_set_invitername(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetNearByUnteamedInvite_SC.invitername)
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::mutable_invitername() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetNearByUnteamedInvite_SC.invitername)
  return _internal_mutable_invitername();
}
inline const std::string& MSG_RetNearByUnteamedInvite_SC::_internal_invitername() const {
  return invitername_.GetNoArena();
}
inline void MSG_RetNearByUnteamedInvite_SC::_internal_set_invitername(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  invitername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RetNearByUnteamedInvite_SC::set_invitername(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  invitername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_RetNearByUnteamedInvite_SC.invitername)
}
inline void MSG_RetNearByUnteamedInvite_SC::set_invitername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  invitername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_RetNearByUnteamedInvite_SC.invitername)
}
inline void MSG_RetNearByUnteamedInvite_SC::set_invitername(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  invitername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_RetNearByUnteamedInvite_SC.invitername)
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::_internal_mutable_invitername() {
  _has_bits_[0] |= 0x00000001u;
  return invitername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::release_invitername() {
  // @@protoc_insertion_point(field_release:Team.MSG_RetNearByUnteamedInvite_SC.invitername)
  if (!_internal_has_invitername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return invitername_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RetNearByUnteamedInvite_SC::set_allocated_invitername(std::string* invitername) {
  if (invitername != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  invitername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitername);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_RetNearByUnteamedInvite_SC.invitername)
}

// optional string inviterid = 3;
inline bool MSG_RetNearByUnteamedInvite_SC::_internal_has_inviterid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetNearByUnteamedInvite_SC::has_inviterid() const {
  return _internal_has_inviterid();
}
inline void MSG_RetNearByUnteamedInvite_SC::clear_inviterid() {
  inviterid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_RetNearByUnteamedInvite_SC::inviterid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetNearByUnteamedInvite_SC.inviterid)
  return _internal_inviterid();
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviterid(const std::string& value) {
  _internal_set_inviterid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetNearByUnteamedInvite_SC.inviterid)
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::mutable_inviterid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetNearByUnteamedInvite_SC.inviterid)
  return _internal_mutable_inviterid();
}
inline const std::string& MSG_RetNearByUnteamedInvite_SC::_internal_inviterid() const {
  return inviterid_.GetNoArena();
}
inline void MSG_RetNearByUnteamedInvite_SC::_internal_set_inviterid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  inviterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviterid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  inviterid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_RetNearByUnteamedInvite_SC.inviterid)
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviterid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  inviterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_RetNearByUnteamedInvite_SC.inviterid)
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviterid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  inviterid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_RetNearByUnteamedInvite_SC.inviterid)
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::_internal_mutable_inviterid() {
  _has_bits_[0] |= 0x00000002u;
  return inviterid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::release_inviterid() {
  // @@protoc_insertion_point(field_release:Team.MSG_RetNearByUnteamedInvite_SC.inviterid)
  if (!_internal_has_inviterid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return inviterid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RetNearByUnteamedInvite_SC::set_allocated_inviterid(std::string* inviterid) {
  if (inviterid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  inviterid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviterid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_RetNearByUnteamedInvite_SC.inviterid)
}

// optional string inviteename = 4;
inline bool MSG_RetNearByUnteamedInvite_SC::_internal_has_inviteename() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_RetNearByUnteamedInvite_SC::has_inviteename() const {
  return _internal_has_inviteename();
}
inline void MSG_RetNearByUnteamedInvite_SC::clear_inviteename() {
  inviteename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MSG_RetNearByUnteamedInvite_SC::inviteename() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetNearByUnteamedInvite_SC.inviteename)
  return _internal_inviteename();
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviteename(const std::string& value) {
  _internal_set_inviteename(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetNearByUnteamedInvite_SC.inviteename)
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::mutable_inviteename() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetNearByUnteamedInvite_SC.inviteename)
  return _internal_mutable_inviteename();
}
inline const std::string& MSG_RetNearByUnteamedInvite_SC::_internal_inviteename() const {
  return inviteename_.GetNoArena();
}
inline void MSG_RetNearByUnteamedInvite_SC::_internal_set_inviteename(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  inviteename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviteename(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  inviteename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_RetNearByUnteamedInvite_SC.inviteename)
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviteename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  inviteename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_RetNearByUnteamedInvite_SC.inviteename)
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviteename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  inviteename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_RetNearByUnteamedInvite_SC.inviteename)
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::_internal_mutable_inviteename() {
  _has_bits_[0] |= 0x00000004u;
  return inviteename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::release_inviteename() {
  // @@protoc_insertion_point(field_release:Team.MSG_RetNearByUnteamedInvite_SC.inviteename)
  if (!_internal_has_inviteename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return inviteename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RetNearByUnteamedInvite_SC::set_allocated_inviteename(std::string* inviteename) {
  if (inviteename != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  inviteename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviteename);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_RetNearByUnteamedInvite_SC.inviteename)
}

// optional string inviteeid = 5;
inline bool MSG_RetNearByUnteamedInvite_SC::_internal_has_inviteeid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_RetNearByUnteamedInvite_SC::has_inviteeid() const {
  return _internal_has_inviteeid();
}
inline void MSG_RetNearByUnteamedInvite_SC::clear_inviteeid() {
  inviteeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MSG_RetNearByUnteamedInvite_SC::inviteeid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetNearByUnteamedInvite_SC.inviteeid)
  return _internal_inviteeid();
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviteeid(const std::string& value) {
  _internal_set_inviteeid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetNearByUnteamedInvite_SC.inviteeid)
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::mutable_inviteeid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetNearByUnteamedInvite_SC.inviteeid)
  return _internal_mutable_inviteeid();
}
inline const std::string& MSG_RetNearByUnteamedInvite_SC::_internal_inviteeid() const {
  return inviteeid_.GetNoArena();
}
inline void MSG_RetNearByUnteamedInvite_SC::_internal_set_inviteeid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  inviteeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviteeid(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  inviteeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_RetNearByUnteamedInvite_SC.inviteeid)
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviteeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  inviteeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_RetNearByUnteamedInvite_SC.inviteeid)
}
inline void MSG_RetNearByUnteamedInvite_SC::set_inviteeid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  inviteeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_RetNearByUnteamedInvite_SC.inviteeid)
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::_internal_mutable_inviteeid() {
  _has_bits_[0] |= 0x00000008u;
  return inviteeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::release_inviteeid() {
  // @@protoc_insertion_point(field_release:Team.MSG_RetNearByUnteamedInvite_SC.inviteeid)
  if (!_internal_has_inviteeid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return inviteeid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RetNearByUnteamedInvite_SC::set_allocated_inviteeid(std::string* inviteeid) {
  if (inviteeid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  inviteeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviteeid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_RetNearByUnteamedInvite_SC.inviteeid)
}

// optional string teamname = 6;
inline bool MSG_RetNearByUnteamedInvite_SC::_internal_has_teamname() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MSG_RetNearByUnteamedInvite_SC::has_teamname() const {
  return _internal_has_teamname();
}
inline void MSG_RetNearByUnteamedInvite_SC::clear_teamname() {
  teamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& MSG_RetNearByUnteamedInvite_SC::teamname() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetNearByUnteamedInvite_SC.teamname)
  return _internal_teamname();
}
inline void MSG_RetNearByUnteamedInvite_SC::set_teamname(const std::string& value) {
  _internal_set_teamname(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetNearByUnteamedInvite_SC.teamname)
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::mutable_teamname() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetNearByUnteamedInvite_SC.teamname)
  return _internal_mutable_teamname();
}
inline const std::string& MSG_RetNearByUnteamedInvite_SC::_internal_teamname() const {
  return teamname_.GetNoArena();
}
inline void MSG_RetNearByUnteamedInvite_SC::_internal_set_teamname(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  teamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_RetNearByUnteamedInvite_SC::set_teamname(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  teamname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_RetNearByUnteamedInvite_SC.teamname)
}
inline void MSG_RetNearByUnteamedInvite_SC::set_teamname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  teamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_RetNearByUnteamedInvite_SC.teamname)
}
inline void MSG_RetNearByUnteamedInvite_SC::set_teamname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  teamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_RetNearByUnteamedInvite_SC.teamname)
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::_internal_mutable_teamname() {
  _has_bits_[0] |= 0x00000010u;
  return teamname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_RetNearByUnteamedInvite_SC::release_teamname() {
  // @@protoc_insertion_point(field_release:Team.MSG_RetNearByUnteamedInvite_SC.teamname)
  if (!_internal_has_teamname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return teamname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_RetNearByUnteamedInvite_SC::set_allocated_teamname(std::string* teamname) {
  if (teamname != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  teamname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teamname);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_RetNearByUnteamedInvite_SC.teamname)
}

// optional uint32 teamid = 7;
inline bool MSG_RetNearByUnteamedInvite_SC::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MSG_RetNearByUnteamedInvite_SC::has_teamid() const {
  return _internal_has_teamid();
}
inline void MSG_RetNearByUnteamedInvite_SC::clear_teamid() {
  teamid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetNearByUnteamedInvite_SC::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetNearByUnteamedInvite_SC::teamid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetNearByUnteamedInvite_SC.teamid)
  return _internal_teamid();
}
inline void MSG_RetNearByUnteamedInvite_SC::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  teamid_ = value;
}
inline void MSG_RetNearByUnteamedInvite_SC::set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetNearByUnteamedInvite_SC.teamid)
}

// -------------------------------------------------------------------

// MSG_RetNewApply_SC

// optional uint32 count = 1;
inline bool MSG_RetNewApply_SC::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetNewApply_SC::has_count() const {
  return _internal_has_count();
}
inline void MSG_RetNewApply_SC::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetNewApply_SC::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetNewApply_SC::count() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetNewApply_SC.count)
  return _internal_count();
}
inline void MSG_RetNewApply_SC::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
}
inline void MSG_RetNewApply_SC::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetNewApply_SC.count)
}

// -------------------------------------------------------------------

// teamDropItem

// optional string thisid = 1;
inline bool teamDropItem::_internal_has_thisid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool teamDropItem::has_thisid() const {
  return _internal_has_thisid();
}
inline void teamDropItem::clear_thisid() {
  thisid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& teamDropItem::thisid() const {
  // @@protoc_insertion_point(field_get:Team.teamDropItem.thisid)
  return _internal_thisid();
}
inline void teamDropItem::set_thisid(const std::string& value) {
  _internal_set_thisid(value);
  // @@protoc_insertion_point(field_set:Team.teamDropItem.thisid)
}
inline std::string* teamDropItem::mutable_thisid() {
  // @@protoc_insertion_point(field_mutable:Team.teamDropItem.thisid)
  return _internal_mutable_thisid();
}
inline const std::string& teamDropItem::_internal_thisid() const {
  return thisid_.GetNoArena();
}
inline void teamDropItem::_internal_set_thisid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void teamDropItem::set_thisid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.teamDropItem.thisid)
}
inline void teamDropItem::set_thisid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.teamDropItem.thisid)
}
inline void teamDropItem::set_thisid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.teamDropItem.thisid)
}
inline std::string* teamDropItem::_internal_mutable_thisid() {
  _has_bits_[0] |= 0x00000001u;
  return thisid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* teamDropItem::release_thisid() {
  // @@protoc_insertion_point(field_release:Team.teamDropItem.thisid)
  if (!_internal_has_thisid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return thisid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void teamDropItem::set_allocated_thisid(std::string* thisid) {
  if (thisid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thisid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thisid);
  // @@protoc_insertion_point(field_set_allocated:Team.teamDropItem.thisid)
}

// optional uint32 objid = 2;
inline bool teamDropItem::_internal_has_objid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool teamDropItem::has_objid() const {
  return _internal_has_objid();
}
inline void teamDropItem::clear_objid() {
  objid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teamDropItem::_internal_objid() const {
  return objid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teamDropItem::objid() const {
  // @@protoc_insertion_point(field_get:Team.teamDropItem.objid)
  return _internal_objid();
}
inline void teamDropItem::_internal_set_objid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  objid_ = value;
}
inline void teamDropItem::set_objid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objid(value);
  // @@protoc_insertion_point(field_set:Team.teamDropItem.objid)
}

// optional uint32 num = 3;
inline bool teamDropItem::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool teamDropItem::has_num() const {
  return _internal_has_num();
}
inline void teamDropItem::clear_num() {
  num_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teamDropItem::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teamDropItem::num() const {
  // @@protoc_insertion_point(field_get:Team.teamDropItem.num)
  return _internal_num();
}
inline void teamDropItem::_internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_ = value;
}
inline void teamDropItem::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:Team.teamDropItem.num)
}

// optional uint32 bind = 4;
inline bool teamDropItem::_internal_has_bind() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool teamDropItem::has_bind() const {
  return _internal_has_bind();
}
inline void teamDropItem::clear_bind() {
  bind_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teamDropItem::_internal_bind() const {
  return bind_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teamDropItem::bind() const {
  // @@protoc_insertion_point(field_get:Team.teamDropItem.bind)
  return _internal_bind();
}
inline void teamDropItem::_internal_set_bind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  bind_ = value;
}
inline void teamDropItem::set_bind(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bind(value);
  // @@protoc_insertion_point(field_set:Team.teamDropItem.bind)
}

// optional uint32 duetime = 5;
inline bool teamDropItem::_internal_has_duetime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool teamDropItem::has_duetime() const {
  return _internal_has_duetime();
}
inline void teamDropItem::clear_duetime() {
  duetime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teamDropItem::_internal_duetime() const {
  return duetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 teamDropItem::duetime() const {
  // @@protoc_insertion_point(field_get:Team.teamDropItem.duetime)
  return _internal_duetime();
}
inline void teamDropItem::_internal_set_duetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  duetime_ = value;
}
inline void teamDropItem::set_duetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duetime(value);
  // @@protoc_insertion_point(field_set:Team.teamDropItem.duetime)
}

// -------------------------------------------------------------------

// MSG_RetTeamPublicDrop_SC

// repeated .Team.teamDropItem oneitem = 1;
inline int MSG_RetTeamPublicDrop_SC::_internal_oneitem_size() const {
  return oneitem_.size();
}
inline int MSG_RetTeamPublicDrop_SC::oneitem_size() const {
  return _internal_oneitem_size();
}
inline void MSG_RetTeamPublicDrop_SC::clear_oneitem() {
  oneitem_.Clear();
}
inline ::Team::teamDropItem* MSG_RetTeamPublicDrop_SC::mutable_oneitem(int index) {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetTeamPublicDrop_SC.oneitem)
  return oneitem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::teamDropItem >*
MSG_RetTeamPublicDrop_SC::mutable_oneitem() {
  // @@protoc_insertion_point(field_mutable_list:Team.MSG_RetTeamPublicDrop_SC.oneitem)
  return &oneitem_;
}
inline const ::Team::teamDropItem& MSG_RetTeamPublicDrop_SC::_internal_oneitem(int index) const {
  return oneitem_.Get(index);
}
inline const ::Team::teamDropItem& MSG_RetTeamPublicDrop_SC::oneitem(int index) const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetTeamPublicDrop_SC.oneitem)
  return _internal_oneitem(index);
}
inline ::Team::teamDropItem* MSG_RetTeamPublicDrop_SC::_internal_add_oneitem() {
  return oneitem_.Add();
}
inline ::Team::teamDropItem* MSG_RetTeamPublicDrop_SC::add_oneitem() {
  // @@protoc_insertion_point(field_add:Team.MSG_RetTeamPublicDrop_SC.oneitem)
  return _internal_add_oneitem();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::teamDropItem >&
MSG_RetTeamPublicDrop_SC::oneitem() const {
  // @@protoc_insertion_point(field_list:Team.MSG_RetTeamPublicDrop_SC.oneitem)
  return oneitem_;
}

// -------------------------------------------------------------------

// ChooseTeamDropItem

// optional string thisid = 1;
inline bool ChooseTeamDropItem::_internal_has_thisid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChooseTeamDropItem::has_thisid() const {
  return _internal_has_thisid();
}
inline void ChooseTeamDropItem::clear_thisid() {
  thisid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChooseTeamDropItem::thisid() const {
  // @@protoc_insertion_point(field_get:Team.ChooseTeamDropItem.thisid)
  return _internal_thisid();
}
inline void ChooseTeamDropItem::set_thisid(const std::string& value) {
  _internal_set_thisid(value);
  // @@protoc_insertion_point(field_set:Team.ChooseTeamDropItem.thisid)
}
inline std::string* ChooseTeamDropItem::mutable_thisid() {
  // @@protoc_insertion_point(field_mutable:Team.ChooseTeamDropItem.thisid)
  return _internal_mutable_thisid();
}
inline const std::string& ChooseTeamDropItem::_internal_thisid() const {
  return thisid_.GetNoArena();
}
inline void ChooseTeamDropItem::_internal_set_thisid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChooseTeamDropItem::set_thisid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.ChooseTeamDropItem.thisid)
}
inline void ChooseTeamDropItem::set_thisid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.ChooseTeamDropItem.thisid)
}
inline void ChooseTeamDropItem::set_thisid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.ChooseTeamDropItem.thisid)
}
inline std::string* ChooseTeamDropItem::_internal_mutable_thisid() {
  _has_bits_[0] |= 0x00000001u;
  return thisid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChooseTeamDropItem::release_thisid() {
  // @@protoc_insertion_point(field_release:Team.ChooseTeamDropItem.thisid)
  if (!_internal_has_thisid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return thisid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChooseTeamDropItem::set_allocated_thisid(std::string* thisid) {
  if (thisid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thisid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thisid);
  // @@protoc_insertion_point(field_set_allocated:Team.ChooseTeamDropItem.thisid)
}

// optional .Team.ChooseType choose = 2;
inline bool ChooseTeamDropItem::_internal_has_choose() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChooseTeamDropItem::has_choose() const {
  return _internal_has_choose();
}
inline void ChooseTeamDropItem::clear_choose() {
  choose_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Team::ChooseType ChooseTeamDropItem::_internal_choose() const {
  return static_cast< ::Team::ChooseType >(choose_);
}
inline ::Team::ChooseType ChooseTeamDropItem::choose() const {
  // @@protoc_insertion_point(field_get:Team.ChooseTeamDropItem.choose)
  return _internal_choose();
}
inline void ChooseTeamDropItem::_internal_set_choose(::Team::ChooseType value) {
  assert(::Team::ChooseType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  choose_ = value;
}
inline void ChooseTeamDropItem::set_choose(::Team::ChooseType value) {
  _internal_set_choose(value);
  // @@protoc_insertion_point(field_set:Team.ChooseTeamDropItem.choose)
}

// optional uint32 errcode = 3;
inline bool ChooseTeamDropItem::_internal_has_errcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChooseTeamDropItem::has_errcode() const {
  return _internal_has_errcode();
}
inline void ChooseTeamDropItem::clear_errcode() {
  errcode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChooseTeamDropItem::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChooseTeamDropItem::errcode() const {
  // @@protoc_insertion_point(field_get:Team.ChooseTeamDropItem.errcode)
  return _internal_errcode();
}
inline void ChooseTeamDropItem::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  errcode_ = value;
}
inline void ChooseTeamDropItem::set_errcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:Team.ChooseTeamDropItem.errcode)
}

// -------------------------------------------------------------------

// MSG_ReqChooseTeamDrop_CS

// repeated .Team.ChooseTeamDropItem item = 1;
inline int MSG_ReqChooseTeamDrop_CS::_internal_item_size() const {
  return item_.size();
}
inline int MSG_ReqChooseTeamDrop_CS::item_size() const {
  return _internal_item_size();
}
inline void MSG_ReqChooseTeamDrop_CS::clear_item() {
  item_.Clear();
}
inline ::Team::ChooseTeamDropItem* MSG_ReqChooseTeamDrop_CS::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqChooseTeamDrop_CS.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::ChooseTeamDropItem >*
MSG_ReqChooseTeamDrop_CS::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Team.MSG_ReqChooseTeamDrop_CS.item)
  return &item_;
}
inline const ::Team::ChooseTeamDropItem& MSG_ReqChooseTeamDrop_CS::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::Team::ChooseTeamDropItem& MSG_ReqChooseTeamDrop_CS::item(int index) const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqChooseTeamDrop_CS.item)
  return _internal_item(index);
}
inline ::Team::ChooseTeamDropItem* MSG_ReqChooseTeamDrop_CS::_internal_add_item() {
  return item_.Add();
}
inline ::Team::ChooseTeamDropItem* MSG_ReqChooseTeamDrop_CS::add_item() {
  // @@protoc_insertion_point(field_add:Team.MSG_ReqChooseTeamDrop_CS.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::ChooseTeamDropItem >&
MSG_ReqChooseTeamDrop_CS::item() const {
  // @@protoc_insertion_point(field_list:Team.MSG_ReqChooseTeamDrop_CS.item)
  return item_;
}

// -------------------------------------------------------------------

// MSG_RetChooseTeamDrop_SC

// repeated .Team.ChooseTeamDropItem item = 1;
inline int MSG_RetChooseTeamDrop_SC::_internal_item_size() const {
  return item_.size();
}
inline int MSG_RetChooseTeamDrop_SC::item_size() const {
  return _internal_item_size();
}
inline void MSG_RetChooseTeamDrop_SC::clear_item() {
  item_.Clear();
}
inline ::Team::ChooseTeamDropItem* MSG_RetChooseTeamDrop_SC::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetChooseTeamDrop_SC.item)
  return item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::ChooseTeamDropItem >*
MSG_RetChooseTeamDrop_SC::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Team.MSG_RetChooseTeamDrop_SC.item)
  return &item_;
}
inline const ::Team::ChooseTeamDropItem& MSG_RetChooseTeamDrop_SC::_internal_item(int index) const {
  return item_.Get(index);
}
inline const ::Team::ChooseTeamDropItem& MSG_RetChooseTeamDrop_SC::item(int index) const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetChooseTeamDrop_SC.item)
  return _internal_item(index);
}
inline ::Team::ChooseTeamDropItem* MSG_RetChooseTeamDrop_SC::_internal_add_item() {
  return item_.Add();
}
inline ::Team::ChooseTeamDropItem* MSG_RetChooseTeamDrop_SC::add_item() {
  // @@protoc_insertion_point(field_add:Team.MSG_RetChooseTeamDrop_SC.item)
  return _internal_add_item();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::ChooseTeamDropItem >&
MSG_RetChooseTeamDrop_SC::item() const {
  // @@protoc_insertion_point(field_list:Team.MSG_RetChooseTeamDrop_SC.item)
  return item_;
}

// -------------------------------------------------------------------

// MSG_ReqSearchTeam_CS

// optional uint32 teamid = 1;
inline bool MSG_ReqSearchTeam_CS::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqSearchTeam_CS::has_teamid() const {
  return _internal_has_teamid();
}
inline void MSG_ReqSearchTeam_CS::clear_teamid() {
  teamid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqSearchTeam_CS::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqSearchTeam_CS::teamid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqSearchTeam_CS.teamid)
  return _internal_teamid();
}
inline void MSG_ReqSearchTeam_CS::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  teamid_ = value;
}
inline void MSG_ReqSearchTeam_CS::set_teamid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqSearchTeam_CS.teamid)
}

// optional uint32 activityid = 2;
inline bool MSG_ReqSearchTeam_CS::_internal_has_activityid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ReqSearchTeam_CS::has_activityid() const {
  return _internal_has_activityid();
}
inline void MSG_ReqSearchTeam_CS::clear_activityid() {
  activityid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqSearchTeam_CS::_internal_activityid() const {
  return activityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqSearchTeam_CS::activityid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqSearchTeam_CS.activityid)
  return _internal_activityid();
}
inline void MSG_ReqSearchTeam_CS::_internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  activityid_ = value;
}
inline void MSG_ReqSearchTeam_CS::set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activityid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqSearchTeam_CS.activityid)
}

// optional bool nearby = 3;
inline bool MSG_ReqSearchTeam_CS::_internal_has_nearby() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_ReqSearchTeam_CS::has_nearby() const {
  return _internal_has_nearby();
}
inline void MSG_ReqSearchTeam_CS::clear_nearby() {
  nearby_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MSG_ReqSearchTeam_CS::_internal_nearby() const {
  return nearby_;
}
inline bool MSG_ReqSearchTeam_CS::nearby() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqSearchTeam_CS.nearby)
  return _internal_nearby();
}
inline void MSG_ReqSearchTeam_CS::_internal_set_nearby(bool value) {
  _has_bits_[0] |= 0x00000004u;
  nearby_ = value;
}
inline void MSG_ReqSearchTeam_CS::set_nearby(bool value) {
  _internal_set_nearby(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqSearchTeam_CS.nearby)
}

// -------------------------------------------------------------------

// MSG_ReqSearchTeamByPage_CS

// optional uint32 page = 1;
inline bool MSG_ReqSearchTeamByPage_CS::_internal_has_page() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqSearchTeamByPage_CS::has_page() const {
  return _internal_has_page();
}
inline void MSG_ReqSearchTeamByPage_CS::clear_page() {
  page_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqSearchTeamByPage_CS::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqSearchTeamByPage_CS::page() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqSearchTeamByPage_CS.page)
  return _internal_page();
}
inline void MSG_ReqSearchTeamByPage_CS::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  page_ = value;
}
inline void MSG_ReqSearchTeamByPage_CS::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqSearchTeamByPage_CS.page)
}

// optional bool nearby = 2;
inline bool MSG_ReqSearchTeamByPage_CS::_internal_has_nearby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ReqSearchTeamByPage_CS::has_nearby() const {
  return _internal_has_nearby();
}
inline void MSG_ReqSearchTeamByPage_CS::clear_nearby() {
  nearby_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MSG_ReqSearchTeamByPage_CS::_internal_nearby() const {
  return nearby_;
}
inline bool MSG_ReqSearchTeamByPage_CS::nearby() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqSearchTeamByPage_CS.nearby)
  return _internal_nearby();
}
inline void MSG_ReqSearchTeamByPage_CS::_internal_set_nearby(bool value) {
  _has_bits_[0] |= 0x00000002u;
  nearby_ = value;
}
inline void MSG_ReqSearchTeamByPage_CS::set_nearby(bool value) {
  _internal_set_nearby(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqSearchTeamByPage_CS.nearby)
}

// -------------------------------------------------------------------

// MSG_RetSearchTeam_SC

// optional uint32 totalpage = 1;
inline bool MSG_RetSearchTeam_SC::_internal_has_totalpage() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetSearchTeam_SC::has_totalpage() const {
  return _internal_has_totalpage();
}
inline void MSG_RetSearchTeam_SC::clear_totalpage() {
  totalpage_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetSearchTeam_SC::_internal_totalpage() const {
  return totalpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetSearchTeam_SC::totalpage() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetSearchTeam_SC.totalpage)
  return _internal_totalpage();
}
inline void MSG_RetSearchTeam_SC::_internal_set_totalpage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  totalpage_ = value;
}
inline void MSG_RetSearchTeam_SC::set_totalpage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalpage(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetSearchTeam_SC.totalpage)
}

// optional uint32 page = 2;
inline bool MSG_RetSearchTeam_SC::_internal_has_page() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetSearchTeam_SC::has_page() const {
  return _internal_has_page();
}
inline void MSG_RetSearchTeam_SC::clear_page() {
  page_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetSearchTeam_SC::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetSearchTeam_SC::page() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetSearchTeam_SC.page)
  return _internal_page();
}
inline void MSG_RetSearchTeam_SC::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_ = value;
}
inline void MSG_RetSearchTeam_SC::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetSearchTeam_SC.page)
}

// repeated .Team.MSG_TeamMemeberList_SC teamlist = 3;
inline int MSG_RetSearchTeam_SC::_internal_teamlist_size() const {
  return teamlist_.size();
}
inline int MSG_RetSearchTeam_SC::teamlist_size() const {
  return _internal_teamlist_size();
}
inline void MSG_RetSearchTeam_SC::clear_teamlist() {
  teamlist_.Clear();
}
inline ::Team::MSG_TeamMemeberList_SC* MSG_RetSearchTeam_SC::mutable_teamlist(int index) {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetSearchTeam_SC.teamlist)
  return teamlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MSG_TeamMemeberList_SC >*
MSG_RetSearchTeam_SC::mutable_teamlist() {
  // @@protoc_insertion_point(field_mutable_list:Team.MSG_RetSearchTeam_SC.teamlist)
  return &teamlist_;
}
inline const ::Team::MSG_TeamMemeberList_SC& MSG_RetSearchTeam_SC::_internal_teamlist(int index) const {
  return teamlist_.Get(index);
}
inline const ::Team::MSG_TeamMemeberList_SC& MSG_RetSearchTeam_SC::teamlist(int index) const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetSearchTeam_SC.teamlist)
  return _internal_teamlist(index);
}
inline ::Team::MSG_TeamMemeberList_SC* MSG_RetSearchTeam_SC::_internal_add_teamlist() {
  return teamlist_.Add();
}
inline ::Team::MSG_TeamMemeberList_SC* MSG_RetSearchTeam_SC::add_teamlist() {
  // @@protoc_insertion_point(field_add:Team.MSG_RetSearchTeam_SC.teamlist)
  return _internal_add_teamlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Team::MSG_TeamMemeberList_SC >&
MSG_RetSearchTeam_SC::teamlist() const {
  // @@protoc_insertion_point(field_list:Team.MSG_RetSearchTeam_SC.teamlist)
  return teamlist_;
}

// -------------------------------------------------------------------

// MSG_ReqChangeActivityTarget_CS

// optional uint32 activityid = 1;
inline bool MSG_ReqChangeActivityTarget_CS::_internal_has_activityid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqChangeActivityTarget_CS::has_activityid() const {
  return _internal_has_activityid();
}
inline void MSG_ReqChangeActivityTarget_CS::clear_activityid() {
  activityid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqChangeActivityTarget_CS::_internal_activityid() const {
  return activityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqChangeActivityTarget_CS::activityid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqChangeActivityTarget_CS.activityid)
  return _internal_activityid();
}
inline void MSG_ReqChangeActivityTarget_CS::_internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  activityid_ = value;
}
inline void MSG_ReqChangeActivityTarget_CS::set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activityid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqChangeActivityTarget_CS.activityid)
}

// -------------------------------------------------------------------

// MSG_RetChangeActivityTarget_SC

// optional uint32 retcode = 1;
inline bool MSG_RetChangeActivityTarget_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetChangeActivityTarget_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_RetChangeActivityTarget_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetChangeActivityTarget_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetChangeActivityTarget_SC::retcode() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetChangeActivityTarget_SC.retcode)
  return _internal_retcode();
}
inline void MSG_RetChangeActivityTarget_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  retcode_ = value;
}
inline void MSG_RetChangeActivityTarget_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetChangeActivityTarget_SC.retcode)
}

// optional uint32 activityid = 2;
inline bool MSG_RetChangeActivityTarget_SC::_internal_has_activityid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetChangeActivityTarget_SC::has_activityid() const {
  return _internal_has_activityid();
}
inline void MSG_RetChangeActivityTarget_SC::clear_activityid() {
  activityid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetChangeActivityTarget_SC::_internal_activityid() const {
  return activityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetChangeActivityTarget_SC::activityid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetChangeActivityTarget_SC.activityid)
  return _internal_activityid();
}
inline void MSG_RetChangeActivityTarget_SC::_internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  activityid_ = value;
}
inline void MSG_RetChangeActivityTarget_SC::set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activityid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetChangeActivityTarget_SC.activityid)
}

// -------------------------------------------------------------------

// MSG_ReqMatch_CS

// optional uint32 activityid = 1;
inline bool MSG_ReqMatch_CS::_internal_has_activityid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqMatch_CS::has_activityid() const {
  return _internal_has_activityid();
}
inline void MSG_ReqMatch_CS::clear_activityid() {
  activityid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqMatch_CS::_internal_activityid() const {
  return activityid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqMatch_CS::activityid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqMatch_CS.activityid)
  return _internal_activityid();
}
inline void MSG_ReqMatch_CS::_internal_set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  activityid_ = value;
}
inline void MSG_ReqMatch_CS::set_activityid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_activityid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqMatch_CS.activityid)
}

// optional uint32 minlevel = 2;
inline bool MSG_ReqMatch_CS::_internal_has_minlevel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ReqMatch_CS::has_minlevel() const {
  return _internal_has_minlevel();
}
inline void MSG_ReqMatch_CS::clear_minlevel() {
  minlevel_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqMatch_CS::_internal_minlevel() const {
  return minlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqMatch_CS::minlevel() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqMatch_CS.minlevel)
  return _internal_minlevel();
}
inline void MSG_ReqMatch_CS::_internal_set_minlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  minlevel_ = value;
}
inline void MSG_ReqMatch_CS::set_minlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minlevel(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqMatch_CS.minlevel)
}

// optional uint32 maxlevel = 3;
inline bool MSG_ReqMatch_CS::_internal_has_maxlevel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_ReqMatch_CS::has_maxlevel() const {
  return _internal_has_maxlevel();
}
inline void MSG_ReqMatch_CS::clear_maxlevel() {
  maxlevel_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqMatch_CS::_internal_maxlevel() const {
  return maxlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ReqMatch_CS::maxlevel() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqMatch_CS.maxlevel)
  return _internal_maxlevel();
}
inline void MSG_ReqMatch_CS::_internal_set_maxlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  maxlevel_ = value;
}
inline void MSG_ReqMatch_CS::set_maxlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxlevel(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqMatch_CS.maxlevel)
}

// -------------------------------------------------------------------

// MSG_RetMatch_SC

// optional uint32 retcode = 1;
inline bool MSG_RetMatch_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetMatch_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_RetMatch_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetMatch_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetMatch_SC::retcode() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetMatch_SC.retcode)
  return _internal_retcode();
}
inline void MSG_RetMatch_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  retcode_ = value;
}
inline void MSG_RetMatch_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetMatch_SC.retcode)
}

// optional uint32 needtime = 2;
inline bool MSG_RetMatch_SC::_internal_has_needtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetMatch_SC::has_needtime() const {
  return _internal_has_needtime();
}
inline void MSG_RetMatch_SC::clear_needtime() {
  needtime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetMatch_SC::_internal_needtime() const {
  return needtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetMatch_SC::needtime() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetMatch_SC.needtime)
  return _internal_needtime();
}
inline void MSG_RetMatch_SC::_internal_set_needtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  needtime_ = value;
}
inline void MSG_RetMatch_SC::set_needtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_needtime(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetMatch_SC.needtime)
}

// optional uint32 starttime = 3;
inline bool MSG_RetMatch_SC::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_RetMatch_SC::has_starttime() const {
  return _internal_has_starttime();
}
inline void MSG_RetMatch_SC::clear_starttime() {
  starttime_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetMatch_SC::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetMatch_SC::starttime() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetMatch_SC.starttime)
  return _internal_starttime();
}
inline void MSG_RetMatch_SC::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  starttime_ = value;
}
inline void MSG_RetMatch_SC::set_starttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetMatch_SC.starttime)
}

// -------------------------------------------------------------------

// MSG_ReqUnmatch_CS

// -------------------------------------------------------------------

// MSG_RetUnmatch_SC

// optional uint32 retcode = 1;
inline bool MSG_RetUnmatch_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetUnmatch_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_RetUnmatch_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetUnmatch_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetUnmatch_SC::retcode() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetUnmatch_SC.retcode)
  return _internal_retcode();
}
inline void MSG_RetUnmatch_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  retcode_ = value;
}
inline void MSG_RetUnmatch_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetUnmatch_SC.retcode)
}

// -------------------------------------------------------------------

// MSG_RetNotifyMatchSuccess_SC

// -------------------------------------------------------------------

// MSG_ReqMemberBackTeam_CS

// -------------------------------------------------------------------

// MSG_RetMemberBackTeam_SC

// optional uint32 rettype = 1;
inline bool MSG_RetMemberBackTeam_SC::_internal_has_rettype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetMemberBackTeam_SC::has_rettype() const {
  return _internal_has_rettype();
}
inline void MSG_RetMemberBackTeam_SC::clear_rettype() {
  rettype_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetMemberBackTeam_SC::_internal_rettype() const {
  return rettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetMemberBackTeam_SC::rettype() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetMemberBackTeam_SC.rettype)
  return _internal_rettype();
}
inline void MSG_RetMemberBackTeam_SC::_internal_set_rettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rettype_ = value;
}
inline void MSG_RetMemberBackTeam_SC::set_rettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rettype(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetMemberBackTeam_SC.rettype)
}

// -------------------------------------------------------------------

// MSG_updateMemStateToTeam_SC

// optional string memid = 1;
inline bool MSG_updateMemStateToTeam_SC::_internal_has_memid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_updateMemStateToTeam_SC::has_memid() const {
  return _internal_has_memid();
}
inline void MSG_updateMemStateToTeam_SC::clear_memid() {
  memid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_updateMemStateToTeam_SC::memid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateMemStateToTeam_SC.memid)
  return _internal_memid();
}
inline void MSG_updateMemStateToTeam_SC::set_memid(const std::string& value) {
  _internal_set_memid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateMemStateToTeam_SC.memid)
}
inline std::string* MSG_updateMemStateToTeam_SC::mutable_memid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_updateMemStateToTeam_SC.memid)
  return _internal_mutable_memid();
}
inline const std::string& MSG_updateMemStateToTeam_SC::_internal_memid() const {
  return memid_.GetNoArena();
}
inline void MSG_updateMemStateToTeam_SC::_internal_set_memid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_updateMemStateToTeam_SC::set_memid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_updateMemStateToTeam_SC.memid)
}
inline void MSG_updateMemStateToTeam_SC::set_memid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_updateMemStateToTeam_SC.memid)
}
inline void MSG_updateMemStateToTeam_SC::set_memid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  memid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_updateMemStateToTeam_SC.memid)
}
inline std::string* MSG_updateMemStateToTeam_SC::_internal_mutable_memid() {
  _has_bits_[0] |= 0x00000001u;
  return memid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_updateMemStateToTeam_SC::release_memid() {
  // @@protoc_insertion_point(field_release:Team.MSG_updateMemStateToTeam_SC.memid)
  if (!_internal_has_memid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return memid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_updateMemStateToTeam_SC::set_allocated_memid(std::string* memid) {
  if (memid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  memid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_updateMemStateToTeam_SC.memid)
}

// optional string sceneid = 2;
inline bool MSG_updateMemStateToTeam_SC::_internal_has_sceneid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_updateMemStateToTeam_SC::has_sceneid() const {
  return _internal_has_sceneid();
}
inline void MSG_updateMemStateToTeam_SC::clear_sceneid() {
  sceneid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MSG_updateMemStateToTeam_SC::sceneid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateMemStateToTeam_SC.sceneid)
  return _internal_sceneid();
}
inline void MSG_updateMemStateToTeam_SC::set_sceneid(const std::string& value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateMemStateToTeam_SC.sceneid)
}
inline std::string* MSG_updateMemStateToTeam_SC::mutable_sceneid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_updateMemStateToTeam_SC.sceneid)
  return _internal_mutable_sceneid();
}
inline const std::string& MSG_updateMemStateToTeam_SC::_internal_sceneid() const {
  return sceneid_.GetNoArena();
}
inline void MSG_updateMemStateToTeam_SC::_internal_set_sceneid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_updateMemStateToTeam_SC::set_sceneid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sceneid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_updateMemStateToTeam_SC.sceneid)
}
inline void MSG_updateMemStateToTeam_SC::set_sceneid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_updateMemStateToTeam_SC.sceneid)
}
inline void MSG_updateMemStateToTeam_SC::set_sceneid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_updateMemStateToTeam_SC.sceneid)
}
inline std::string* MSG_updateMemStateToTeam_SC::_internal_mutable_sceneid() {
  _has_bits_[0] |= 0x00000002u;
  return sceneid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_updateMemStateToTeam_SC::release_sceneid() {
  // @@protoc_insertion_point(field_release:Team.MSG_updateMemStateToTeam_SC.sceneid)
  if (!_internal_has_sceneid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sceneid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_updateMemStateToTeam_SC::set_allocated_sceneid(std::string* sceneid) {
  if (sceneid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sceneid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sceneid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_updateMemStateToTeam_SC.sceneid)
}

// optional .Team.MemState state = 3;
inline bool MSG_updateMemStateToTeam_SC::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_updateMemStateToTeam_SC::has_state() const {
  return _internal_has_state();
}
inline void MSG_updateMemStateToTeam_SC::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Team::MemState MSG_updateMemStateToTeam_SC::_internal_state() const {
  return static_cast< ::Team::MemState >(state_);
}
inline ::Team::MemState MSG_updateMemStateToTeam_SC::state() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateMemStateToTeam_SC.state)
  return _internal_state();
}
inline void MSG_updateMemStateToTeam_SC::_internal_set_state(::Team::MemState value) {
  assert(::Team::MemState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void MSG_updateMemStateToTeam_SC::set_state(::Team::MemState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateMemStateToTeam_SC.state)
}

// -------------------------------------------------------------------

// MSG_ReqLeaderMapPos_CS

// -------------------------------------------------------------------

// MSG_RetLeaderMapPos_SC

// optional uint32 retcode = 1;
inline bool MSG_RetLeaderMapPos_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetLeaderMapPos_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_RetLeaderMapPos_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetLeaderMapPos_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetLeaderMapPos_SC::retcode() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetLeaderMapPos_SC.retcode)
  return _internal_retcode();
}
inline void MSG_RetLeaderMapPos_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  retcode_ = value;
}
inline void MSG_RetLeaderMapPos_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetLeaderMapPos_SC.retcode)
}

// optional .Team.LeaderPosInfo pos = 2;
inline bool MSG_RetLeaderMapPos_SC::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool MSG_RetLeaderMapPos_SC::has_pos() const {
  return _internal_has_pos();
}
inline void MSG_RetLeaderMapPos_SC::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Team::LeaderPosInfo& MSG_RetLeaderMapPos_SC::_internal_pos() const {
  const ::Team::LeaderPosInfo* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Team::LeaderPosInfo*>(
      &::Team::_LeaderPosInfo_default_instance_);
}
inline const ::Team::LeaderPosInfo& MSG_RetLeaderMapPos_SC::pos() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetLeaderMapPos_SC.pos)
  return _internal_pos();
}
inline ::Team::LeaderPosInfo* MSG_RetLeaderMapPos_SC::release_pos() {
  // @@protoc_insertion_point(field_release:Team.MSG_RetLeaderMapPos_SC.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::Team::LeaderPosInfo* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Team::LeaderPosInfo* MSG_RetLeaderMapPos_SC::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Team::LeaderPosInfo>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::Team::LeaderPosInfo* MSG_RetLeaderMapPos_SC::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetLeaderMapPos_SC.pos)
  return _internal_mutable_pos();
}
inline void MSG_RetLeaderMapPos_SC::set_allocated_pos(::Team::LeaderPosInfo* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_RetLeaderMapPos_SC.pos)
}

// -------------------------------------------------------------------

// LeaderPosInfo

// optional bool valid = 1 [default = false];
inline bool LeaderPosInfo::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LeaderPosInfo::has_valid() const {
  return _internal_has_valid();
}
inline void LeaderPosInfo::clear_valid() {
  valid_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LeaderPosInfo::_internal_valid() const {
  return valid_;
}
inline bool LeaderPosInfo::valid() const {
  // @@protoc_insertion_point(field_get:Team.LeaderPosInfo.valid)
  return _internal_valid();
}
inline void LeaderPosInfo::_internal_set_valid(bool value) {
  _has_bits_[0] |= 0x00000004u;
  valid_ = value;
}
inline void LeaderPosInfo::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:Team.LeaderPosInfo.valid)
}

// optional string sceneid = 2;
inline bool LeaderPosInfo::_internal_has_sceneid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LeaderPosInfo::has_sceneid() const {
  return _internal_has_sceneid();
}
inline void LeaderPosInfo::clear_sceneid() {
  sceneid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LeaderPosInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:Team.LeaderPosInfo.sceneid)
  return _internal_sceneid();
}
inline void LeaderPosInfo::set_sceneid(const std::string& value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:Team.LeaderPosInfo.sceneid)
}
inline std::string* LeaderPosInfo::mutable_sceneid() {
  // @@protoc_insertion_point(field_mutable:Team.LeaderPosInfo.sceneid)
  return _internal_mutable_sceneid();
}
inline const std::string& LeaderPosInfo::_internal_sceneid() const {
  return sceneid_.GetNoArena();
}
inline void LeaderPosInfo::_internal_set_sceneid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LeaderPosInfo::set_sceneid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sceneid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.LeaderPosInfo.sceneid)
}
inline void LeaderPosInfo::set_sceneid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.LeaderPosInfo.sceneid)
}
inline void LeaderPosInfo::set_sceneid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.LeaderPosInfo.sceneid)
}
inline std::string* LeaderPosInfo::_internal_mutable_sceneid() {
  _has_bits_[0] |= 0x00000001u;
  return sceneid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LeaderPosInfo::release_sceneid() {
  // @@protoc_insertion_point(field_release:Team.LeaderPosInfo.sceneid)
  if (!_internal_has_sceneid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sceneid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LeaderPosInfo::set_allocated_sceneid(std::string* sceneid) {
  if (sceneid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sceneid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sceneid);
  // @@protoc_insertion_point(field_set_allocated:Team.LeaderPosInfo.sceneid)
}

// optional .Team.MemberPos pos = 3;
inline bool LeaderPosInfo::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool LeaderPosInfo::has_pos() const {
  return _internal_has_pos();
}
inline void LeaderPosInfo::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Team::MemberPos& LeaderPosInfo::_internal_pos() const {
  const ::Team::MemberPos* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Team::MemberPos*>(
      &::Team::_MemberPos_default_instance_);
}
inline const ::Team::MemberPos& LeaderPosInfo::pos() const {
  // @@protoc_insertion_point(field_get:Team.LeaderPosInfo.pos)
  return _internal_pos();
}
inline ::Team::MemberPos* LeaderPosInfo::release_pos() {
  // @@protoc_insertion_point(field_release:Team.LeaderPosInfo.pos)
  _has_bits_[0] &= ~0x00000002u;
  ::Team::MemberPos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Team::MemberPos* LeaderPosInfo::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000002u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Team::MemberPos>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::Team::MemberPos* LeaderPosInfo::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Team.LeaderPosInfo.pos)
  return _internal_mutable_pos();
}
inline void LeaderPosInfo::set_allocated_pos(::Team::MemberPos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Team.LeaderPosInfo.pos)
}

// -------------------------------------------------------------------

// MSG_ReqChangeMapToLeader_CS

// optional string sceneid = 1;
inline bool MSG_ReqChangeMapToLeader_CS::_internal_has_sceneid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ReqChangeMapToLeader_CS::has_sceneid() const {
  return _internal_has_sceneid();
}
inline void MSG_ReqChangeMapToLeader_CS::clear_sceneid() {
  sceneid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ReqChangeMapToLeader_CS::sceneid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqChangeMapToLeader_CS.sceneid)
  return _internal_sceneid();
}
inline void MSG_ReqChangeMapToLeader_CS::set_sceneid(const std::string& value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_ReqChangeMapToLeader_CS.sceneid)
}
inline std::string* MSG_ReqChangeMapToLeader_CS::mutable_sceneid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqChangeMapToLeader_CS.sceneid)
  return _internal_mutable_sceneid();
}
inline const std::string& MSG_ReqChangeMapToLeader_CS::_internal_sceneid() const {
  return sceneid_.GetNoArena();
}
inline void MSG_ReqChangeMapToLeader_CS::_internal_set_sceneid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ReqChangeMapToLeader_CS::set_sceneid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sceneid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_ReqChangeMapToLeader_CS.sceneid)
}
inline void MSG_ReqChangeMapToLeader_CS::set_sceneid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_ReqChangeMapToLeader_CS.sceneid)
}
inline void MSG_ReqChangeMapToLeader_CS::set_sceneid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sceneid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_ReqChangeMapToLeader_CS.sceneid)
}
inline std::string* MSG_ReqChangeMapToLeader_CS::_internal_mutable_sceneid() {
  _has_bits_[0] |= 0x00000001u;
  return sceneid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ReqChangeMapToLeader_CS::release_sceneid() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqChangeMapToLeader_CS.sceneid)
  if (!_internal_has_sceneid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sceneid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ReqChangeMapToLeader_CS::set_allocated_sceneid(std::string* sceneid) {
  if (sceneid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sceneid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sceneid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqChangeMapToLeader_CS.sceneid)
}

// optional .Team.MemberPos leaderpos = 2;
inline bool MSG_ReqChangeMapToLeader_CS::_internal_has_leaderpos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || leaderpos_ != nullptr);
  return value;
}
inline bool MSG_ReqChangeMapToLeader_CS::has_leaderpos() const {
  return _internal_has_leaderpos();
}
inline void MSG_ReqChangeMapToLeader_CS::clear_leaderpos() {
  if (leaderpos_ != nullptr) leaderpos_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Team::MemberPos& MSG_ReqChangeMapToLeader_CS::_internal_leaderpos() const {
  const ::Team::MemberPos* p = leaderpos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Team::MemberPos*>(
      &::Team::_MemberPos_default_instance_);
}
inline const ::Team::MemberPos& MSG_ReqChangeMapToLeader_CS::leaderpos() const {
  // @@protoc_insertion_point(field_get:Team.MSG_ReqChangeMapToLeader_CS.leaderpos)
  return _internal_leaderpos();
}
inline ::Team::MemberPos* MSG_ReqChangeMapToLeader_CS::release_leaderpos() {
  // @@protoc_insertion_point(field_release:Team.MSG_ReqChangeMapToLeader_CS.leaderpos)
  _has_bits_[0] &= ~0x00000002u;
  ::Team::MemberPos* temp = leaderpos_;
  leaderpos_ = nullptr;
  return temp;
}
inline ::Team::MemberPos* MSG_ReqChangeMapToLeader_CS::_internal_mutable_leaderpos() {
  _has_bits_[0] |= 0x00000002u;
  if (leaderpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Team::MemberPos>(GetArenaNoVirtual());
    leaderpos_ = p;
  }
  return leaderpos_;
}
inline ::Team::MemberPos* MSG_ReqChangeMapToLeader_CS::mutable_leaderpos() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_ReqChangeMapToLeader_CS.leaderpos)
  return _internal_mutable_leaderpos();
}
inline void MSG_ReqChangeMapToLeader_CS::set_allocated_leaderpos(::Team::MemberPos* leaderpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete leaderpos_;
  }
  if (leaderpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leaderpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaderpos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  leaderpos_ = leaderpos;
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_ReqChangeMapToLeader_CS.leaderpos)
}

// -------------------------------------------------------------------

// MSG_RetChangeMapToLeader_SC

// optional uint32 retcode = 1;
inline bool MSG_RetChangeMapToLeader_SC::_internal_has_retcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_RetChangeMapToLeader_SC::has_retcode() const {
  return _internal_has_retcode();
}
inline void MSG_RetChangeMapToLeader_SC::clear_retcode() {
  retcode_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetChangeMapToLeader_SC::_internal_retcode() const {
  return retcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RetChangeMapToLeader_SC::retcode() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetChangeMapToLeader_SC.retcode)
  return _internal_retcode();
}
inline void MSG_RetChangeMapToLeader_SC::_internal_set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  retcode_ = value;
}
inline void MSG_RetChangeMapToLeader_SC::set_retcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetChangeMapToLeader_SC.retcode)
}

// optional .Team.LeaderPosInfo info = 2;
inline bool MSG_RetChangeMapToLeader_SC::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool MSG_RetChangeMapToLeader_SC::has_info() const {
  return _internal_has_info();
}
inline void MSG_RetChangeMapToLeader_SC::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Team::LeaderPosInfo& MSG_RetChangeMapToLeader_SC::_internal_info() const {
  const ::Team::LeaderPosInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Team::LeaderPosInfo*>(
      &::Team::_LeaderPosInfo_default_instance_);
}
inline const ::Team::LeaderPosInfo& MSG_RetChangeMapToLeader_SC::info() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetChangeMapToLeader_SC.info)
  return _internal_info();
}
inline ::Team::LeaderPosInfo* MSG_RetChangeMapToLeader_SC::release_info() {
  // @@protoc_insertion_point(field_release:Team.MSG_RetChangeMapToLeader_SC.info)
  _has_bits_[0] &= ~0x00000001u;
  ::Team::LeaderPosInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::Team::LeaderPosInfo* MSG_RetChangeMapToLeader_SC::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Team::LeaderPosInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::Team::LeaderPosInfo* MSG_RetChangeMapToLeader_SC::mutable_info() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_RetChangeMapToLeader_SC.info)
  return _internal_mutable_info();
}
inline void MSG_RetChangeMapToLeader_SC::set_allocated_info(::Team::LeaderPosInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_RetChangeMapToLeader_SC.info)
}

// -------------------------------------------------------------------

// MSG_ReqLeaderAttackTarget_CS

// -------------------------------------------------------------------

// MSG_RetLeaderAttackTarget_SC

// optional .Team.EntryIDType target = 1;
inline bool MSG_RetLeaderAttackTarget_SC::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RetLeaderAttackTarget_SC::has_target() const {
  return _internal_has_target();
}
inline void MSG_RetLeaderAttackTarget_SC::clear_target() {
  target_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Team::EntryIDType MSG_RetLeaderAttackTarget_SC::_internal_target() const {
  return static_cast< ::Team::EntryIDType >(target_);
}
inline ::Team::EntryIDType MSG_RetLeaderAttackTarget_SC::target() const {
  // @@protoc_insertion_point(field_get:Team.MSG_RetLeaderAttackTarget_SC.target)
  return _internal_target();
}
inline void MSG_RetLeaderAttackTarget_SC::_internal_set_target(::Team::EntryIDType value) {
  assert(::Team::EntryIDType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  target_ = value;
}
inline void MSG_RetLeaderAttackTarget_SC::set_target(::Team::EntryIDType value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:Team.MSG_RetLeaderAttackTarget_SC.target)
}

// -------------------------------------------------------------------

// MSG_notifyMemberLeaderIntoPublic_SC

// -------------------------------------------------------------------

// MSG_notifyMemberOfflineHosting_SC

// -------------------------------------------------------------------

// MSG_Req_SetMemberPrivilege_CS

// optional uint64 memberid = 1;
inline bool MSG_Req_SetMemberPrivilege_CS::_internal_has_memberid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_SetMemberPrivilege_CS::has_memberid() const {
  return _internal_has_memberid();
}
inline void MSG_Req_SetMemberPrivilege_CS::clear_memberid() {
  memberid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_SetMemberPrivilege_CS::_internal_memberid() const {
  return memberid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_SetMemberPrivilege_CS::memberid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_Req_SetMemberPrivilege_CS.memberid)
  return _internal_memberid();
}
inline void MSG_Req_SetMemberPrivilege_CS::_internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  memberid_ = value;
}
inline void MSG_Req_SetMemberPrivilege_CS::set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_Req_SetMemberPrivilege_CS.memberid)
}

// optional .Team.TeamPrivilege privilege = 2;
inline bool MSG_Req_SetMemberPrivilege_CS::_internal_has_privilege() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_Req_SetMemberPrivilege_CS::has_privilege() const {
  return _internal_has_privilege();
}
inline void MSG_Req_SetMemberPrivilege_CS::clear_privilege() {
  privilege_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Team::TeamPrivilege MSG_Req_SetMemberPrivilege_CS::_internal_privilege() const {
  return static_cast< ::Team::TeamPrivilege >(privilege_);
}
inline ::Team::TeamPrivilege MSG_Req_SetMemberPrivilege_CS::privilege() const {
  // @@protoc_insertion_point(field_get:Team.MSG_Req_SetMemberPrivilege_CS.privilege)
  return _internal_privilege();
}
inline void MSG_Req_SetMemberPrivilege_CS::_internal_set_privilege(::Team::TeamPrivilege value) {
  assert(::Team::TeamPrivilege_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  privilege_ = value;
}
inline void MSG_Req_SetMemberPrivilege_CS::set_privilege(::Team::TeamPrivilege value) {
  _internal_set_privilege(value);
  // @@protoc_insertion_point(field_set:Team.MSG_Req_SetMemberPrivilege_CS.privilege)
}

// optional bool set = 3;
inline bool MSG_Req_SetMemberPrivilege_CS::_internal_has_set() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Req_SetMemberPrivilege_CS::has_set() const {
  return _internal_has_set();
}
inline void MSG_Req_SetMemberPrivilege_CS::clear_set() {
  set_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool MSG_Req_SetMemberPrivilege_CS::_internal_set() const {
  return set_;
}
inline bool MSG_Req_SetMemberPrivilege_CS::set() const {
  // @@protoc_insertion_point(field_get:Team.MSG_Req_SetMemberPrivilege_CS.set)
  return _internal_set();
}
inline void MSG_Req_SetMemberPrivilege_CS::_internal_set_set(bool value) {
  _has_bits_[0] |= 0x00000002u;
  set_ = value;
}
inline void MSG_Req_SetMemberPrivilege_CS::set_set(bool value) {
  _internal_set_set(value);
  // @@protoc_insertion_point(field_set:Team.MSG_Req_SetMemberPrivilege_CS.set)
}

// -------------------------------------------------------------------

// MSG_updateTeamMemberPrivilege_SC

// optional uint64 memberid = 1;
inline bool MSG_updateTeamMemberPrivilege_SC::_internal_has_memberid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberPrivilege_SC::has_memberid() const {
  return _internal_has_memberid();
}
inline void MSG_updateTeamMemberPrivilege_SC::clear_memberid() {
  memberid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_updateTeamMemberPrivilege_SC::_internal_memberid() const {
  return memberid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_updateTeamMemberPrivilege_SC::memberid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberPrivilege_SC.memberid)
  return _internal_memberid();
}
inline void MSG_updateTeamMemberPrivilege_SC::_internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  memberid_ = value;
}
inline void MSG_updateTeamMemberPrivilege_SC::set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberPrivilege_SC.memberid)
}

// optional uint32 privilege = 2;
inline bool MSG_updateTeamMemberPrivilege_SC::_internal_has_privilege() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberPrivilege_SC::has_privilege() const {
  return _internal_has_privilege();
}
inline void MSG_updateTeamMemberPrivilege_SC::clear_privilege() {
  privilege_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberPrivilege_SC::_internal_privilege() const {
  return privilege_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberPrivilege_SC::privilege() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberPrivilege_SC.privilege)
  return _internal_privilege();
}
inline void MSG_updateTeamMemberPrivilege_SC::_internal_set_privilege(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  privilege_ = value;
}
inline void MSG_updateTeamMemberPrivilege_SC::set_privilege(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_privilege(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberPrivilege_SC.privilege)
}

// -------------------------------------------------------------------

// MSG_Req_checkUserTeamInfo_CS

// optional uint64 memberid = 1;
inline bool MSG_Req_checkUserTeamInfo_CS::_internal_has_memberid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Req_checkUserTeamInfo_CS::has_memberid() const {
  return _internal_has_memberid();
}
inline void MSG_Req_checkUserTeamInfo_CS::clear_memberid() {
  memberid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_checkUserTeamInfo_CS::_internal_memberid() const {
  return memberid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Req_checkUserTeamInfo_CS::memberid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_Req_checkUserTeamInfo_CS.memberid)
  return _internal_memberid();
}
inline void MSG_Req_checkUserTeamInfo_CS::_internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  memberid_ = value;
}
inline void MSG_Req_checkUserTeamInfo_CS::set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_Req_checkUserTeamInfo_CS.memberid)
}

// -------------------------------------------------------------------

// MSG_Ret_checkUserTeamInfo_SC

// optional uint64 memberid = 1;
inline bool MSG_Ret_checkUserTeamInfo_SC::_internal_has_memberid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_Ret_checkUserTeamInfo_SC::has_memberid() const {
  return _internal_has_memberid();
}
inline void MSG_Ret_checkUserTeamInfo_SC::clear_memberid() {
  memberid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Ret_checkUserTeamInfo_SC::_internal_memberid() const {
  return memberid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Ret_checkUserTeamInfo_SC::memberid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_Ret_checkUserTeamInfo_SC.memberid)
  return _internal_memberid();
}
inline void MSG_Ret_checkUserTeamInfo_SC::_internal_set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  memberid_ = value;
}
inline void MSG_Ret_checkUserTeamInfo_SC::set_memberid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_Ret_checkUserTeamInfo_SC.memberid)
}

// optional uint64 teamid = 2;
inline bool MSG_Ret_checkUserTeamInfo_SC::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_Ret_checkUserTeamInfo_SC::has_teamid() const {
  return _internal_has_teamid();
}
inline void MSG_Ret_checkUserTeamInfo_SC::clear_teamid() {
  teamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Ret_checkUserTeamInfo_SC::_internal_teamid() const {
  return teamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_Ret_checkUserTeamInfo_SC::teamid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_Ret_checkUserTeamInfo_SC.teamid)
  return _internal_teamid();
}
inline void MSG_Ret_checkUserTeamInfo_SC::_internal_set_teamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  teamid_ = value;
}
inline void MSG_Ret_checkUserTeamInfo_SC::set_teamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_Ret_checkUserTeamInfo_SC.teamid)
}

// optional bool online = 3;
inline bool MSG_Ret_checkUserTeamInfo_SC::_internal_has_online() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_Ret_checkUserTeamInfo_SC::has_online() const {
  return _internal_has_online();
}
inline void MSG_Ret_checkUserTeamInfo_SC::clear_online() {
  online_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool MSG_Ret_checkUserTeamInfo_SC::_internal_online() const {
  return online_;
}
inline bool MSG_Ret_checkUserTeamInfo_SC::online() const {
  // @@protoc_insertion_point(field_get:Team.MSG_Ret_checkUserTeamInfo_SC.online)
  return _internal_online();
}
inline void MSG_Ret_checkUserTeamInfo_SC::_internal_set_online(bool value) {
  _has_bits_[0] |= 0x00000004u;
  online_ = value;
}
inline void MSG_Ret_checkUserTeamInfo_SC::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:Team.MSG_Ret_checkUserTeamInfo_SC.online)
}

// -------------------------------------------------------------------

// MSG_Req_DismissTeam_CS

// -------------------------------------------------------------------

// MSG_NotifyTeamDismiss_SC

// optional bool suc = 1;
inline bool MSG_NotifyTeamDismiss_SC::_internal_has_suc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_NotifyTeamDismiss_SC::has_suc() const {
  return _internal_has_suc();
}
inline void MSG_NotifyTeamDismiss_SC::clear_suc() {
  suc_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MSG_NotifyTeamDismiss_SC::_internal_suc() const {
  return suc_;
}
inline bool MSG_NotifyTeamDismiss_SC::suc() const {
  // @@protoc_insertion_point(field_get:Team.MSG_NotifyTeamDismiss_SC.suc)
  return _internal_suc();
}
inline void MSG_NotifyTeamDismiss_SC::_internal_set_suc(bool value) {
  _has_bits_[0] |= 0x00000001u;
  suc_ = value;
}
inline void MSG_NotifyTeamDismiss_SC::set_suc(bool value) {
  _internal_set_suc(value);
  // @@protoc_insertion_point(field_set:Team.MSG_NotifyTeamDismiss_SC.suc)
}

// -------------------------------------------------------------------

// MSG_updateTeamMemberAvatar_SC

// optional string mememberid = 1;
inline bool MSG_updateTeamMemberAvatar_SC::_internal_has_mememberid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberAvatar_SC::has_mememberid() const {
  return _internal_has_mememberid();
}
inline void MSG_updateTeamMemberAvatar_SC::clear_mememberid() {
  mememberid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_updateTeamMemberAvatar_SC::mememberid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberAvatar_SC.mememberid)
  return _internal_mememberid();
}
inline void MSG_updateTeamMemberAvatar_SC::set_mememberid(const std::string& value) {
  _internal_set_mememberid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberAvatar_SC.mememberid)
}
inline std::string* MSG_updateTeamMemberAvatar_SC::mutable_mememberid() {
  // @@protoc_insertion_point(field_mutable:Team.MSG_updateTeamMemberAvatar_SC.mememberid)
  return _internal_mutable_mememberid();
}
inline const std::string& MSG_updateTeamMemberAvatar_SC::_internal_mememberid() const {
  return mememberid_.GetNoArena();
}
inline void MSG_updateTeamMemberAvatar_SC::_internal_set_mememberid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_updateTeamMemberAvatar_SC::set_mememberid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Team.MSG_updateTeamMemberAvatar_SC.mememberid)
}
inline void MSG_updateTeamMemberAvatar_SC::set_mememberid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Team.MSG_updateTeamMemberAvatar_SC.mememberid)
}
inline void MSG_updateTeamMemberAvatar_SC::set_mememberid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mememberid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Team.MSG_updateTeamMemberAvatar_SC.mememberid)
}
inline std::string* MSG_updateTeamMemberAvatar_SC::_internal_mutable_mememberid() {
  _has_bits_[0] |= 0x00000001u;
  return mememberid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_updateTeamMemberAvatar_SC::release_mememberid() {
  // @@protoc_insertion_point(field_release:Team.MSG_updateTeamMemberAvatar_SC.mememberid)
  if (!_internal_has_mememberid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mememberid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_updateTeamMemberAvatar_SC::set_allocated_mememberid(std::string* mememberid) {
  if (mememberid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mememberid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mememberid);
  // @@protoc_insertion_point(field_set_allocated:Team.MSG_updateTeamMemberAvatar_SC.mememberid)
}

// optional uint32 hairstyle = 2;
inline bool MSG_updateTeamMemberAvatar_SC::_internal_has_hairstyle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberAvatar_SC::has_hairstyle() const {
  return _internal_has_hairstyle();
}
inline void MSG_updateTeamMemberAvatar_SC::clear_hairstyle() {
  hairstyle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::_internal_hairstyle() const {
  return hairstyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::hairstyle() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberAvatar_SC.hairstyle)
  return _internal_hairstyle();
}
inline void MSG_updateTeamMemberAvatar_SC::_internal_set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  hairstyle_ = value;
}
inline void MSG_updateTeamMemberAvatar_SC::set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hairstyle(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberAvatar_SC.hairstyle)
}

// optional uint32 haircolor = 3;
inline bool MSG_updateTeamMemberAvatar_SC::_internal_has_haircolor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberAvatar_SC::has_haircolor() const {
  return _internal_has_haircolor();
}
inline void MSG_updateTeamMemberAvatar_SC::clear_haircolor() {
  haircolor_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::_internal_haircolor() const {
  return haircolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::haircolor() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberAvatar_SC.haircolor)
  return _internal_haircolor();
}
inline void MSG_updateTeamMemberAvatar_SC::_internal_set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  haircolor_ = value;
}
inline void MSG_updateTeamMemberAvatar_SC::set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_haircolor(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberAvatar_SC.haircolor)
}

// optional uint32 headstyle = 4;
inline bool MSG_updateTeamMemberAvatar_SC::_internal_has_headstyle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberAvatar_SC::has_headstyle() const {
  return _internal_has_headstyle();
}
inline void MSG_updateTeamMemberAvatar_SC::clear_headstyle() {
  headstyle_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::_internal_headstyle() const {
  return headstyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::headstyle() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberAvatar_SC.headstyle)
  return _internal_headstyle();
}
inline void MSG_updateTeamMemberAvatar_SC::_internal_set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  headstyle_ = value;
}
inline void MSG_updateTeamMemberAvatar_SC::set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_headstyle(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberAvatar_SC.headstyle)
}

// optional uint32 bodystyle = 5;
inline bool MSG_updateTeamMemberAvatar_SC::_internal_has_bodystyle() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberAvatar_SC::has_bodystyle() const {
  return _internal_has_bodystyle();
}
inline void MSG_updateTeamMemberAvatar_SC::clear_bodystyle() {
  bodystyle_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::_internal_bodystyle() const {
  return bodystyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::bodystyle() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberAvatar_SC.bodystyle)
  return _internal_bodystyle();
}
inline void MSG_updateTeamMemberAvatar_SC::_internal_set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  bodystyle_ = value;
}
inline void MSG_updateTeamMemberAvatar_SC::set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bodystyle(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberAvatar_SC.bodystyle)
}

// optional uint32 antenna = 6;
inline bool MSG_updateTeamMemberAvatar_SC::_internal_has_antenna() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberAvatar_SC::has_antenna() const {
  return _internal_has_antenna();
}
inline void MSG_updateTeamMemberAvatar_SC::clear_antenna() {
  antenna_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::antenna() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberAvatar_SC.antenna)
  return _internal_antenna();
}
inline void MSG_updateTeamMemberAvatar_SC::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  antenna_ = value;
}
inline void MSG_updateTeamMemberAvatar_SC::set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberAvatar_SC.antenna)
}

// optional uint32 coat = 7;
inline bool MSG_updateTeamMemberAvatar_SC::_internal_has_coat() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberAvatar_SC::has_coat() const {
  return _internal_has_coat();
}
inline void MSG_updateTeamMemberAvatar_SC::clear_coat() {
  coat_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::_internal_coat() const {
  return coat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::coat() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberAvatar_SC.coat)
  return _internal_coat();
}
inline void MSG_updateTeamMemberAvatar_SC::_internal_set_coat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  coat_ = value;
}
inline void MSG_updateTeamMemberAvatar_SC::set_coat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coat(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberAvatar_SC.coat)
}

// optional uint32 avatarid = 8;
inline bool MSG_updateTeamMemberAvatar_SC::_internal_has_avatarid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MSG_updateTeamMemberAvatar_SC::has_avatarid() const {
  return _internal_has_avatarid();
}
inline void MSG_updateTeamMemberAvatar_SC::clear_avatarid() {
  avatarid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::_internal_avatarid() const {
  return avatarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_updateTeamMemberAvatar_SC::avatarid() const {
  // @@protoc_insertion_point(field_get:Team.MSG_updateTeamMemberAvatar_SC.avatarid)
  return _internal_avatarid();
}
inline void MSG_updateTeamMemberAvatar_SC::_internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  avatarid_ = value;
}
inline void MSG_updateTeamMemberAvatar_SC::set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avatarid(value);
  // @@protoc_insertion_point(field_set:Team.MSG_updateTeamMemberAvatar_SC.avatarid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Team

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Team::EntryIDType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Team::EntryIDType>() {
  return ::Team::EntryIDType_descriptor();
}
template <> struct is_proto_enum< ::Team::Position> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Team::Position>() {
  return ::Team::Position_descriptor();
}
template <> struct is_proto_enum< ::Team::CapacityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Team::CapacityType>() {
  return ::Team::CapacityType_descriptor();
}
template <> struct is_proto_enum< ::Team::RewardMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Team::RewardMode>() {
  return ::Team::RewardMode_descriptor();
}
template <> struct is_proto_enum< ::Team::OutType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Team::OutType>() {
  return ::Team::OutType_descriptor();
}
template <> struct is_proto_enum< ::Team::TeamPrivilege> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Team::TeamPrivilege>() {
  return ::Team::TeamPrivilege_descriptor();
}
template <> struct is_proto_enum< ::Team::AnswerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Team::AnswerType>() {
  return ::Team::AnswerType_descriptor();
}
template <> struct is_proto_enum< ::Team::ChooseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Team::ChooseType>() {
  return ::Team::ChooseType_descriptor();
}
template <> struct is_proto_enum< ::Team::MemState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Team::MemState>() {
  return ::Team::MemState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_team_2eproto
