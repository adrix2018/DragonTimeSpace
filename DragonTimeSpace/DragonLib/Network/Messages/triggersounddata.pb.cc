// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: triggersounddata.proto

#include "triggersounddata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_triggersounddata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TriggerSoundData_triggersounddata_2eproto;
namespace triggersounddata {
class TriggerSoundDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TriggerSoundData> _instance;
} _TriggerSoundData_default_instance_;
class TriggerSoundDataListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TriggerSoundDataList> _instance;
} _TriggerSoundDataList_default_instance_;
}  // namespace triggersounddata
static void InitDefaultsscc_info_TriggerSoundData_triggersounddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::triggersounddata::_TriggerSoundData_default_instance_;
    new (ptr) ::triggersounddata::TriggerSoundData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::triggersounddata::TriggerSoundData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TriggerSoundData_triggersounddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TriggerSoundData_triggersounddata_2eproto}, {}};

static void InitDefaultsscc_info_TriggerSoundDataList_triggersounddata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::triggersounddata::_TriggerSoundDataList_default_instance_;
    new (ptr) ::triggersounddata::TriggerSoundDataList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::triggersounddata::TriggerSoundDataList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TriggerSoundDataList_triggersounddata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TriggerSoundDataList_triggersounddata_2eproto}, {
      &scc_info_TriggerSoundData_triggersounddata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_triggersounddata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_triggersounddata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_triggersounddata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_triggersounddata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, path_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, buttonsound_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, buttonclickevent_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, togglesound_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, toggleclickevent_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, setactive_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, setactiveevent_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, setdisactive_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, setdisactiveevent_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, effectsound_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, effectbeginevent_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundData, effectendevent_),
  0,
  7,
  1,
  8,
  2,
  9,
  3,
  10,
  4,
  11,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundDataList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::triggersounddata::TriggerSoundDataList, tsd_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::triggersounddata::TriggerSoundData)},
  { 29, 35, sizeof(::triggersounddata::TriggerSoundDataList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::triggersounddata::_TriggerSoundData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::triggersounddata::_TriggerSoundDataList_default_instance_),
};

const char descriptor_table_protodef_triggersounddata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026triggersounddata.proto\022\020triggersoundda"
  "ta\"\241\002\n\020TriggerSoundData\022\014\n\004path\030\001 \001(\t\022\023\n"
  "\013ButtonSound\030\002 \001(\010\022\030\n\020ButtonClickEvent\030\003"
  " \001(\t\022\023\n\013ToggleSound\030\004 \001(\010\022\030\n\020ToggleClick"
  "Event\030\005 \001(\t\022\021\n\tSetActive\030\006 \001(\010\022\026\n\016SetAct"
  "iveEvent\030\007 \001(\t\022\024\n\014SetDisActive\030\010 \001(\010\022\031\n\021"
  "SetDisActiveEvent\030\t \001(\t\022\023\n\013EffectSound\030\n"
  " \001(\010\022\030\n\020EffectBeginEvent\030\013 \001(\t\022\026\n\016Effect"
  "EndEvent\030\014 \001(\t\"G\n\024TriggerSoundDataList\022/"
  "\n\003tsd\030\001 \003(\0132\".triggersounddata.TriggerSo"
  "undData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_triggersounddata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_triggersounddata_2eproto_sccs[2] = {
  &scc_info_TriggerSoundData_triggersounddata_2eproto.base,
  &scc_info_TriggerSoundDataList_triggersounddata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_triggersounddata_2eproto_once;
static bool descriptor_table_triggersounddata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_triggersounddata_2eproto = {
  &descriptor_table_triggersounddata_2eproto_initialized, descriptor_table_protodef_triggersounddata_2eproto, "triggersounddata.proto", 407,
  &descriptor_table_triggersounddata_2eproto_once, descriptor_table_triggersounddata_2eproto_sccs, descriptor_table_triggersounddata_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_triggersounddata_2eproto::offsets,
  file_level_metadata_triggersounddata_2eproto, 2, file_level_enum_descriptors_triggersounddata_2eproto, file_level_service_descriptors_triggersounddata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_triggersounddata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_triggersounddata_2eproto)), true);
namespace triggersounddata {

// ===================================================================

void TriggerSoundData::InitAsDefaultInstance() {
}
class TriggerSoundData::_Internal {
 public:
  using HasBits = decltype(std::declval<TriggerSoundData>()._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_buttonsound(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_buttonclickevent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_togglesound(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_toggleclickevent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_setactive(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_setactiveevent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_setdisactive(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_setdisactiveevent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_effectsound(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_effectbeginevent(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_effectendevent(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

TriggerSoundData::TriggerSoundData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:triggersounddata.TriggerSoundData)
}
TriggerSoundData::TriggerSoundData(const TriggerSoundData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  buttonclickevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_buttonclickevent()) {
    buttonclickevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buttonclickevent_);
  }
  toggleclickevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_toggleclickevent()) {
    toggleclickevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toggleclickevent_);
  }
  setactiveevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_setactiveevent()) {
    setactiveevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.setactiveevent_);
  }
  setdisactiveevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_setdisactiveevent()) {
    setdisactiveevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.setdisactiveevent_);
  }
  effectbeginevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_effectbeginevent()) {
    effectbeginevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectbeginevent_);
  }
  effectendevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_effectendevent()) {
    effectendevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectendevent_);
  }
  ::memcpy(&buttonsound_, &from.buttonsound_,
    static_cast<size_t>(reinterpret_cast<char*>(&effectsound_) -
    reinterpret_cast<char*>(&buttonsound_)) + sizeof(effectsound_));
  // @@protoc_insertion_point(copy_constructor:triggersounddata.TriggerSoundData)
}

void TriggerSoundData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TriggerSoundData_triggersounddata_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buttonclickevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toggleclickevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  setactiveevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  setdisactiveevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effectbeginevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effectendevent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&buttonsound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effectsound_) -
      reinterpret_cast<char*>(&buttonsound_)) + sizeof(effectsound_));
}

TriggerSoundData::~TriggerSoundData() {
  // @@protoc_insertion_point(destructor:triggersounddata.TriggerSoundData)
  SharedDtor();
}

void TriggerSoundData::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buttonclickevent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toggleclickevent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  setactiveevent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  setdisactiveevent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effectbeginevent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effectendevent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TriggerSoundData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TriggerSoundData& TriggerSoundData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TriggerSoundData_triggersounddata_2eproto.base);
  return *internal_default_instance();
}


void TriggerSoundData::Clear() {
// @@protoc_insertion_point(message_clear_start:triggersounddata.TriggerSoundData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      buttonclickevent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      toggleclickevent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      setactiveevent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      setdisactiveevent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      effectbeginevent_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      effectendevent_.ClearNonDefaultToEmptyNoArena();
    }
  }
  buttonsound_ = false;
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&togglesound_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effectsound_) -
        reinterpret_cast<char*>(&togglesound_)) + sizeof(effectsound_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TriggerSoundData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "triggersounddata.TriggerSoundData.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ButtonSound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_buttonsound(&has_bits);
          buttonsound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ButtonClickEvent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_buttonclickevent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "triggersounddata.TriggerSoundData.ButtonClickEvent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ToggleSound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_togglesound(&has_bits);
          togglesound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ToggleClickEvent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_toggleclickevent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "triggersounddata.TriggerSoundData.ToggleClickEvent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool SetActive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_setactive(&has_bits);
          setactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string SetActiveEvent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_setactiveevent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "triggersounddata.TriggerSoundData.SetActiveEvent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool SetDisActive = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_setdisactive(&has_bits);
          setdisactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string SetDisActiveEvent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_setdisactiveevent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "triggersounddata.TriggerSoundData.SetDisActiveEvent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool EffectSound = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_effectsound(&has_bits);
          effectsound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string EffectBeginEvent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_effectbeginevent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "triggersounddata.TriggerSoundData.EffectBeginEvent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string EffectEndEvent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_effectendevent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "triggersounddata.TriggerSoundData.EffectEndEvent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TriggerSoundData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:triggersounddata.TriggerSoundData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "triggersounddata.TriggerSoundData.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // optional bool ButtonSound = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_buttonsound(), target);
  }

  // optional string ButtonClickEvent = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buttonclickevent().data(), static_cast<int>(this->_internal_buttonclickevent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "triggersounddata.TriggerSoundData.ButtonClickEvent");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_buttonclickevent(), target);
  }

  // optional bool ToggleSound = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_togglesound(), target);
  }

  // optional string ToggleClickEvent = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toggleclickevent().data(), static_cast<int>(this->_internal_toggleclickevent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "triggersounddata.TriggerSoundData.ToggleClickEvent");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_toggleclickevent(), target);
  }

  // optional bool SetActive = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_setactive(), target);
  }

  // optional string SetActiveEvent = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_setactiveevent().data(), static_cast<int>(this->_internal_setactiveevent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "triggersounddata.TriggerSoundData.SetActiveEvent");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_setactiveevent(), target);
  }

  // optional bool SetDisActive = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_setdisactive(), target);
  }

  // optional string SetDisActiveEvent = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_setdisactiveevent().data(), static_cast<int>(this->_internal_setdisactiveevent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "triggersounddata.TriggerSoundData.SetDisActiveEvent");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_setdisactiveevent(), target);
  }

  // optional bool EffectSound = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_effectsound(), target);
  }

  // optional string EffectBeginEvent = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_effectbeginevent().data(), static_cast<int>(this->_internal_effectbeginevent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "triggersounddata.TriggerSoundData.EffectBeginEvent");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_effectbeginevent(), target);
  }

  // optional string EffectEndEvent = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_effectendevent().data(), static_cast<int>(this->_internal_effectendevent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "triggersounddata.TriggerSoundData.EffectEndEvent");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_effectendevent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:triggersounddata.TriggerSoundData)
  return target;
}

size_t TriggerSoundData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:triggersounddata.TriggerSoundData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional string ButtonClickEvent = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buttonclickevent());
    }

    // optional string ToggleClickEvent = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_toggleclickevent());
    }

    // optional string SetActiveEvent = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_setactiveevent());
    }

    // optional string SetDisActiveEvent = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_setdisactiveevent());
    }

    // optional string EffectBeginEvent = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_effectbeginevent());
    }

    // optional string EffectEndEvent = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_effectendevent());
    }

    // optional bool ButtonSound = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool ToggleSound = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool SetActive = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool SetDisActive = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool EffectSound = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerSoundData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:triggersounddata.TriggerSoundData)
  GOOGLE_DCHECK_NE(&from, this);
  const TriggerSoundData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TriggerSoundData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:triggersounddata.TriggerSoundData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:triggersounddata.TriggerSoundData)
    MergeFrom(*source);
  }
}

void TriggerSoundData::MergeFrom(const TriggerSoundData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:triggersounddata.TriggerSoundData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      buttonclickevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buttonclickevent_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      toggleclickevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toggleclickevent_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      setactiveevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.setactiveevent_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      setdisactiveevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.setdisactiveevent_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      effectbeginevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectbeginevent_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      effectendevent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.effectendevent_);
    }
    if (cached_has_bits & 0x00000080u) {
      buttonsound_ = from.buttonsound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      togglesound_ = from.togglesound_;
    }
    if (cached_has_bits & 0x00000200u) {
      setactive_ = from.setactive_;
    }
    if (cached_has_bits & 0x00000400u) {
      setdisactive_ = from.setdisactive_;
    }
    if (cached_has_bits & 0x00000800u) {
      effectsound_ = from.effectsound_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TriggerSoundData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:triggersounddata.TriggerSoundData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerSoundData::CopyFrom(const TriggerSoundData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:triggersounddata.TriggerSoundData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerSoundData::IsInitialized() const {
  return true;
}

void TriggerSoundData::InternalSwap(TriggerSoundData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buttonclickevent_.Swap(&other->buttonclickevent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  toggleclickevent_.Swap(&other->toggleclickevent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  setactiveevent_.Swap(&other->setactiveevent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  setdisactiveevent_.Swap(&other->setdisactiveevent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  effectbeginevent_.Swap(&other->effectbeginevent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  effectendevent_.Swap(&other->effectendevent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buttonsound_, other->buttonsound_);
  swap(togglesound_, other->togglesound_);
  swap(setactive_, other->setactive_);
  swap(setdisactive_, other->setdisactive_);
  swap(effectsound_, other->effectsound_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TriggerSoundData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TriggerSoundDataList::InitAsDefaultInstance() {
}
class TriggerSoundDataList::_Internal {
 public:
  using HasBits = decltype(std::declval<TriggerSoundDataList>()._has_bits_);
};

TriggerSoundDataList::TriggerSoundDataList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:triggersounddata.TriggerSoundDataList)
}
TriggerSoundDataList::TriggerSoundDataList(const TriggerSoundDataList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tsd_(from.tsd_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:triggersounddata.TriggerSoundDataList)
}

void TriggerSoundDataList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TriggerSoundDataList_triggersounddata_2eproto.base);
}

TriggerSoundDataList::~TriggerSoundDataList() {
  // @@protoc_insertion_point(destructor:triggersounddata.TriggerSoundDataList)
  SharedDtor();
}

void TriggerSoundDataList::SharedDtor() {
}

void TriggerSoundDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TriggerSoundDataList& TriggerSoundDataList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TriggerSoundDataList_triggersounddata_2eproto.base);
  return *internal_default_instance();
}


void TriggerSoundDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:triggersounddata.TriggerSoundDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tsd_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TriggerSoundDataList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .triggersounddata.TriggerSoundData tsd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tsd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TriggerSoundDataList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:triggersounddata.TriggerSoundDataList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .triggersounddata.TriggerSoundData tsd = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tsd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tsd(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:triggersounddata.TriggerSoundDataList)
  return target;
}

size_t TriggerSoundDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:triggersounddata.TriggerSoundDataList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .triggersounddata.TriggerSoundData tsd = 1;
  total_size += 1UL * this->_internal_tsd_size();
  for (const auto& msg : this->tsd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerSoundDataList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:triggersounddata.TriggerSoundDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const TriggerSoundDataList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TriggerSoundDataList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:triggersounddata.TriggerSoundDataList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:triggersounddata.TriggerSoundDataList)
    MergeFrom(*source);
  }
}

void TriggerSoundDataList::MergeFrom(const TriggerSoundDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:triggersounddata.TriggerSoundDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tsd_.MergeFrom(from.tsd_);
}

void TriggerSoundDataList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:triggersounddata.TriggerSoundDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerSoundDataList::CopyFrom(const TriggerSoundDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:triggersounddata.TriggerSoundDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerSoundDataList::IsInitialized() const {
  return true;
}

void TriggerSoundDataList::InternalSwap(TriggerSoundDataList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tsd_.InternalSwap(&other->tsd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TriggerSoundDataList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace triggersounddata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::triggersounddata::TriggerSoundData* Arena::CreateMaybeMessage< ::triggersounddata::TriggerSoundData >(Arena* arena) {
  return Arena::CreateInternal< ::triggersounddata::TriggerSoundData >(arena);
}
template<> PROTOBUF_NOINLINE ::triggersounddata::TriggerSoundDataList* Arena::CreateMaybeMessage< ::triggersounddata::TriggerSoundDataList >(Arena* arena) {
  return Arena::CreateInternal< ::triggersounddata::TriggerSoundDataList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
