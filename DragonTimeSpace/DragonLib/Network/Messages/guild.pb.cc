// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guild.proto

#include "guild.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CiTanEnemyGuildItem_guild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GoodsInfo_guild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildPositionInfo_guild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapGuildPosInfo_guild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TechniqueInfo_guild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViceMaster_guild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_guildInfo_guild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_guildListItem_guild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_guildMember_guild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_guildSkill_guild_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_guild_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_stApplyForItem_guild_2eproto;
namespace guild {
class guildMemberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<guildMember> _instance;
} _guildMember_default_instance_;
class guildInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<guildInfo> _instance;
} _guildInfo_default_instance_;
class MSG_Req_PreCreateGuild_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_PreCreateGuild_CS> _instance;
} _MSG_Req_PreCreateGuild_CS_default_instance_;
class MSG_Ret_PreCreateGuild_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_PreCreateGuild_SC> _instance;
} _MSG_Ret_PreCreateGuild_SC_default_instance_;
class MSG_Req_CreateGuild_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CreateGuild_CS> _instance;
} _MSG_Req_CreateGuild_CS_default_instance_;
class MSG_Ret_CreateGuild_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CreateGuild_SC> _instance;
} _MSG_Ret_CreateGuild_SC_default_instance_;
class MSG_Req_SetGuildNotify_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_SetGuildNotify_CS> _instance;
} _MSG_Req_SetGuildNotify_CS_default_instance_;
class MSG_Ret_SetGuildNotify_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_SetGuildNotify_SC> _instance;
} _MSG_Ret_SetGuildNotify_SC_default_instance_;
class MSG_Req_GuildInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildInfo_CS> _instance;
} _MSG_Req_GuildInfo_CS_default_instance_;
class MSG_Ret_GuildInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildInfo_SC> _instance;
} _MSG_Ret_GuildInfo_SC_default_instance_;
class MSG_Req_GuildList_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildList_CS> _instance;
} _MSG_Req_GuildList_CS_default_instance_;
class guildListItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<guildListItem> _instance;
} _guildListItem_default_instance_;
class MSG_Ret_GuildList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildList_SC> _instance;
} _MSG_Ret_GuildList_SC_default_instance_;
class MSG_Req_ApplyForGuild_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ApplyForGuild_CS> _instance;
} _MSG_Req_ApplyForGuild_CS_default_instance_;
class MSG_Ret_ApplyForGuild_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_ApplyForGuild_SC> _instance;
} _MSG_Ret_ApplyForGuild_SC_default_instance_;
class stApplyForItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<stApplyForItem> _instance;
} _stApplyForItem_default_instance_;
class MSG_Req_AnswerApplyForGuild_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_AnswerApplyForGuild_CS> _instance;
} _MSG_Req_AnswerApplyForGuild_CS_default_instance_;
class MSG_Ret_AnswerApplyForGuild_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_AnswerApplyForGuild_SC> _instance;
} _MSG_Ret_AnswerApplyForGuild_SC_default_instance_;
class MSG_Ret_MyGuildApply_Result_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MyGuildApply_Result_SC> _instance;
} _MSG_Ret_MyGuildApply_Result_SC_default_instance_;
class MSG_Req_GuildMemberList_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildMemberList_CS> _instance;
} _MSG_Req_GuildMemberList_CS_default_instance_;
class MSG_Ret_GuildMemberList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildMemberList_SC> _instance;
} _MSG_Ret_GuildMemberList_SC_default_instance_;
class MSG_Req_IntoGuildMap_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_IntoGuildMap_CS> _instance;
} _MSG_Req_IntoGuildMap_CS_default_instance_;
class MSG_Req_CiTanEnemyGuildList_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CiTanEnemyGuildList_CS> _instance;
} _MSG_Req_CiTanEnemyGuildList_CS_default_instance_;
class CiTanEnemyGuildItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CiTanEnemyGuildItem> _instance;
} _CiTanEnemyGuildItem_default_instance_;
class MSG_Ret_CiTanEnemyGuildList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CiTanEnemyGuildList_SC> _instance;
} _MSG_Ret_CiTanEnemyGuildList_SC_default_instance_;
class MSG_Req_ChooseCiTanEnemyGuild_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ChooseCiTanEnemyGuild_CS> _instance;
} _MSG_Req_ChooseCiTanEnemyGuild_CS_default_instance_;
class MSG_Req_TargetCiTanEnemyGuild_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_TargetCiTanEnemyGuild_CS> _instance;
} _MSG_Req_TargetCiTanEnemyGuild_CS_default_instance_;
class MSG_Ret_ChoosedCiTanEnemyGuild_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_ChoosedCiTanEnemyGuild_SC> _instance;
} _MSG_Ret_ChoosedCiTanEnemyGuild_SC_default_instance_;
class MSG_Req_IntoCiTanEnemyGuild_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_IntoCiTanEnemyGuild_CS> _instance;
} _MSG_Req_IntoCiTanEnemyGuild_CS_default_instance_;
class MSG_Req_CiTanBacktoMyGuild_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CiTanBacktoMyGuild_CS> _instance;
} _MSG_Req_CiTanBacktoMyGuild_CS_default_instance_;
class GuildPositionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GuildPositionInfo> _instance;
} _GuildPositionInfo_default_instance_;
class MSG_Req_AddGuildPosition_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_AddGuildPosition_CS> _instance;
} _MSG_Req_AddGuildPosition_CS_default_instance_;
class MSG_Req_DeleteGuildPosition_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_DeleteGuildPosition_CS> _instance;
} _MSG_Req_DeleteGuildPosition_CS_default_instance_;
class SwapGuildPosInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapGuildPosInfo> _instance;
} _SwapGuildPosInfo_default_instance_;
class MSG_Req_SwapGuildPosOrder_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_SwapGuildPosOrder_CS> _instance;
} _MSG_Req_SwapGuildPosOrder_CS_default_instance_;
class MSG_Req_ChangePositionName_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ChangePositionName_CS> _instance;
} _MSG_Req_ChangePositionName_CS_default_instance_;
class MSG_Req_ChangePositionPri_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ChangePositionPri_CS> _instance;
} _MSG_Req_ChangePositionPri_CS_default_instance_;
class MSG_Req_AssignPosition_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_AssignPosition_CS> _instance;
} _MSG_Req_AssignPosition_CS_default_instance_;
class MSG_Ret_AssignPosition_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_AssignPosition_SC> _instance;
} _MSG_Ret_AssignPosition_SC_default_instance_;
class MSG_Ret_PositionInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_PositionInfo_SC> _instance;
} _MSG_Ret_PositionInfo_SC_default_instance_;
class MSG_Req_GuildLevelup_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildLevelup_CS> _instance;
} _MSG_Req_GuildLevelup_CS_default_instance_;
class MSG_Ret_GuildLevelup_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildLevelup_SC> _instance;
} _MSG_Ret_GuildLevelup_SC_default_instance_;
class MSG_Req_GuildSetInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildSetInfo_CS> _instance;
} _MSG_Req_GuildSetInfo_CS_default_instance_;
class MSG_Ret_GuildSetInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildSetInfo_SC> _instance;
} _MSG_Ret_GuildSetInfo_SC_default_instance_;
class MSG_Ret_CheckDayWelfare_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CheckDayWelfare_SC> _instance;
} _MSG_Ret_CheckDayWelfare_SC_default_instance_;
class MSG_Req_GetDayWelfare_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GetDayWelfare_CS> _instance;
} _MSG_Req_GetDayWelfare_CS_default_instance_;
class MSG_Ret_GetDayWelfare_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GetDayWelfare_SC> _instance;
} _MSG_Ret_GetDayWelfare_SC_default_instance_;
class MSG_Req_GuildGoods_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildGoods_CS> _instance;
} _MSG_Req_GuildGoods_CS_default_instance_;
class GoodsInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GoodsInfo> _instance;
} _GoodsInfo_default_instance_;
class MSG_Ret_GuildGoods_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildGoods_SC> _instance;
} _MSG_Ret_GuildGoods_SC_default_instance_;
class MSG_Req_SubmitGuildGoods_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_SubmitGuildGoods_CS> _instance;
} _MSG_Req_SubmitGuildGoods_CS_default_instance_;
class MSG_Ret_SubmitGuildGoods_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_SubmitGuildGoods_SC> _instance;
} _MSG_Ret_SubmitGuildGoods_SC_default_instance_;
class MSG_Req_QuitGuild_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_QuitGuild_CS> _instance;
} _MSG_Req_QuitGuild_CS_default_instance_;
class MSG_Ret_QuitGuild_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_QuitGuild_SC> _instance;
} _MSG_Ret_QuitGuild_SC_default_instance_;
class MSG_Req_FireGuildMember_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_FireGuildMember_CS> _instance;
} _MSG_Req_FireGuildMember_CS_default_instance_;
class MSG_Ret_FireGuildMember_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_FireGuildMember_SC> _instance;
} _MSG_Ret_FireGuildMember_SC_default_instance_;
class MSG_Ret_BeFiredGuildMember_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_BeFiredGuildMember_SC> _instance;
} _MSG_Ret_BeFiredGuildMember_SC_default_instance_;
class MSG_Req_GuildInvite_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildInvite_CS> _instance;
} _MSG_Req_GuildInvite_CS_default_instance_;
class MSG_Ret_GuildInvite_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildInvite_SC> _instance;
} _MSG_Ret_GuildInvite_SC_default_instance_;
class MSG_Req_GuildInviteConfirm_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildInviteConfirm_CS> _instance;
} _MSG_Req_GuildInviteConfirm_CS_default_instance_;
class MSG_Ret_GuildInviteConfirm_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildInviteConfirm_SC> _instance;
} _MSG_Ret_GuildInviteConfirm_SC_default_instance_;
class MSG_Req_DismissGuild_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_DismissGuild_CS> _instance;
} _MSG_Req_DismissGuild_CS_default_instance_;
class MSG_Ret_DismissGuild_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_DismissGuild_SC> _instance;
} _MSG_Ret_DismissGuild_SC_default_instance_;
class MSG_Req_ChangeGuildMaster_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ChangeGuildMaster_CS> _instance;
} _MSG_Req_ChangeGuildMaster_CS_default_instance_;
class MSG_Ret_ChangeGuildMaster_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_ChangeGuildMaster_SC> _instance;
} _MSG_Ret_ChangeGuildMaster_SC_default_instance_;
class ViceMasterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ViceMaster> _instance;
} _ViceMaster_default_instance_;
class MSG_Req_GuildViceMaster_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildViceMaster_CS> _instance;
} _MSG_Req_GuildViceMaster_CS_default_instance_;
class MSG_Ret_GuildViceMaster_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildViceMaster_SC> _instance;
} _MSG_Ret_GuildViceMaster_SC_default_instance_;
class MSG_Req_GuildExtension_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildExtension_CS> _instance;
} _MSG_Req_GuildExtension_CS_default_instance_;
class MSG_Ret_GuildExtension_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildExtension_SC> _instance;
} _MSG_Ret_GuildExtension_SC_default_instance_;
class MSG_Req_OneKeyApply_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_OneKeyApply_CS> _instance;
} _MSG_Req_OneKeyApply_CS_default_instance_;
class MSG_Ret_OneKeyApply_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_OneKeyApply_SC> _instance;
} _MSG_Ret_OneKeyApply_SC_default_instance_;
class MSG_Req_RecrutCondition_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_RecrutCondition_CS> _instance;
} _MSG_Req_RecrutCondition_CS_default_instance_;
class MSG_RetRecrutCondition_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRecrutCondition_SC> _instance;
} _MSG_RetRecrutCondition_SC_default_instance_;
class MSG_Req_ModifyRecrutCondition_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ModifyRecrutCondition_CS> _instance;
} _MSG_Req_ModifyRecrutCondition_CS_default_instance_;
class MSG_Req_GuildTechnique_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildTechnique_CS> _instance;
} _MSG_Req_GuildTechnique_CS_default_instance_;
class TechniqueInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TechniqueInfo> _instance;
} _TechniqueInfo_default_instance_;
class MSG_Ret_GuildTechnique_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildTechnique_SC> _instance;
} _MSG_Ret_GuildTechnique_SC_default_instance_;
class MSG_Req_TechniqueUpGrade_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_TechniqueUpGrade_CS> _instance;
} _MSG_Req_TechniqueUpGrade_CS_default_instance_;
class MSG_Ret_TechniqueUpGrade_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_TechniqueUpGrade_SC> _instance;
} _MSG_Ret_TechniqueUpGrade_SC_default_instance_;
class MSG_Ret_RefreshTechniqueInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_RefreshTechniqueInfo_SC> _instance;
} _MSG_Ret_RefreshTechniqueInfo_SC_default_instance_;
class MSG_Req_TechniqueDevelop_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_TechniqueDevelop_CS> _instance;
} _MSG_Req_TechniqueDevelop_CS_default_instance_;
class MSG_Ret_TechniqueDevelop_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_TechniqueDevelop_SC> _instance;
} _MSG_Ret_TechniqueDevelop_SC_default_instance_;
class MSG_Req_GuildPartyActivityInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildPartyActivityInfo_CS> _instance;
} _MSG_Req_GuildPartyActivityInfo_CS_default_instance_;
class MSG_Ret_GuildPartyActivityInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildPartyActivityInfo_SC> _instance;
} _MSG_Ret_GuildPartyActivityInfo_SC_default_instance_;
class MSG_Req_StartGuildParty_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_StartGuildParty_CS> _instance;
} _MSG_Req_StartGuildParty_CS_default_instance_;
class MSG_Ret_GuildPartyActivityData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildPartyActivityData_SC> _instance;
} _MSG_Ret_GuildPartyActivityData_SC_default_instance_;
class MSG_Ret_FellowshipSurvey_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_FellowshipSurvey_SC> _instance;
} _MSG_Ret_FellowshipSurvey_SC_default_instance_;
class MSG_Req_SubmitFellowshipSurvey_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_SubmitFellowshipSurvey_CS> _instance;
} _MSG_Req_SubmitFellowshipSurvey_CS_default_instance_;
class MSG_ReqDonateSalary_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqDonateSalary_CS> _instance;
} _MSG_ReqDonateSalary_CS_default_instance_;
class MSG_ReqUserCntData_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqUserCntData_CSC> _instance;
} _MSG_ReqUserCntData_CSC_default_instance_;
class guildSkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<guildSkill> _instance;
} _guildSkill_default_instance_;
class MSG_Req_GuildSkill_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GuildSkill_CS> _instance;
} _MSG_Req_GuildSkill_CS_default_instance_;
class MSG_Ret_GuildSkill_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GuildSkill_SC> _instance;
} _MSG_Ret_GuildSkill_SC_default_instance_;
class MSG_Req_LearnGuildSkill_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_LearnGuildSkill_CSC> _instance;
} _MSG_Req_LearnGuildSkill_CSC_default_instance_;
}  // namespace guild
static void InitDefaultsscc_info_CiTanEnemyGuildItem_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_CiTanEnemyGuildItem_default_instance_;
    new (ptr) ::guild::CiTanEnemyGuildItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::CiTanEnemyGuildItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CiTanEnemyGuildItem_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CiTanEnemyGuildItem_guild_2eproto}, {}};

static void InitDefaultsscc_info_GoodsInfo_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_GoodsInfo_default_instance_;
    new (ptr) ::guild::GoodsInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::GoodsInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GoodsInfo_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GoodsInfo_guild_2eproto}, {}};

static void InitDefaultsscc_info_GuildPositionInfo_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_GuildPositionInfo_default_instance_;
    new (ptr) ::guild::GuildPositionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::GuildPositionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GuildPositionInfo_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GuildPositionInfo_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqDonateSalary_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_ReqDonateSalary_CS_default_instance_;
    new (ptr) ::guild::MSG_ReqDonateSalary_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_ReqDonateSalary_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqDonateSalary_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqDonateSalary_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqUserCntData_CSC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_ReqUserCntData_CSC_default_instance_;
    new (ptr) ::guild::MSG_ReqUserCntData_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_ReqUserCntData_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqUserCntData_CSC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqUserCntData_CSC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_AddGuildPosition_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_AddGuildPosition_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_AddGuildPosition_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_AddGuildPosition_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_AddGuildPosition_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_AddGuildPosition_CS_guild_2eproto}, {
      &scc_info_GuildPositionInfo_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_AnswerApplyForGuild_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_AnswerApplyForGuild_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_AnswerApplyForGuild_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_AnswerApplyForGuild_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_AnswerApplyForGuild_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_AnswerApplyForGuild_CS_guild_2eproto}, {
      &scc_info_stApplyForItem_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_ApplyForGuild_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_ApplyForGuild_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_ApplyForGuild_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_ApplyForGuild_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ApplyForGuild_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ApplyForGuild_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_AssignPosition_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_AssignPosition_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_AssignPosition_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_AssignPosition_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_AssignPosition_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_AssignPosition_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_ChangeGuildMaster_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_ChangeGuildMaster_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_ChangeGuildMaster_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_ChangeGuildMaster_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ChangeGuildMaster_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ChangeGuildMaster_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_ChangePositionName_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_ChangePositionName_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_ChangePositionName_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_ChangePositionName_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ChangePositionName_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ChangePositionName_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_ChangePositionPri_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_ChangePositionPri_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_ChangePositionPri_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_ChangePositionPri_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ChangePositionPri_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ChangePositionPri_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_ChooseCiTanEnemyGuild_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_ChooseCiTanEnemyGuild_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_ChooseCiTanEnemyGuild_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_ChooseCiTanEnemyGuild_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ChooseCiTanEnemyGuild_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ChooseCiTanEnemyGuild_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CiTanBacktoMyGuild_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_CiTanBacktoMyGuild_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_CiTanBacktoMyGuild_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_CiTanBacktoMyGuild_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CiTanBacktoMyGuild_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CiTanBacktoMyGuild_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CiTanEnemyGuildList_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_CiTanEnemyGuildList_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_CiTanEnemyGuildList_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_CiTanEnemyGuildList_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CiTanEnemyGuildList_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CiTanEnemyGuildList_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CreateGuild_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_CreateGuild_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_CreateGuild_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_CreateGuild_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CreateGuild_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CreateGuild_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_DeleteGuildPosition_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_DeleteGuildPosition_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_DeleteGuildPosition_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_DeleteGuildPosition_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_DeleteGuildPosition_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_DeleteGuildPosition_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_DismissGuild_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_DismissGuild_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_DismissGuild_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_DismissGuild_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_DismissGuild_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_DismissGuild_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_FireGuildMember_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_FireGuildMember_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_FireGuildMember_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_FireGuildMember_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_FireGuildMember_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_FireGuildMember_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GetDayWelfare_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GetDayWelfare_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GetDayWelfare_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GetDayWelfare_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GetDayWelfare_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GetDayWelfare_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildExtension_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildExtension_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildExtension_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildExtension_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildExtension_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildExtension_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildGoods_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildGoods_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildGoods_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildGoods_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildGoods_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildGoods_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildInfo_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildInfo_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildInfo_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildInfo_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildInviteConfirm_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildInviteConfirm_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildInviteConfirm_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildInviteConfirm_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildInviteConfirm_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildInviteConfirm_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildInvite_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildInvite_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildInvite_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildInvite_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildInvite_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildInvite_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildLevelup_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildLevelup_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildLevelup_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildLevelup_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildLevelup_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildLevelup_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildList_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildList_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildList_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildList_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildList_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildList_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildMemberList_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildMemberList_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildMemberList_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildMemberList_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildMemberList_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildMemberList_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildPartyActivityInfo_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildPartyActivityInfo_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildPartyActivityInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildPartyActivityInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildPartyActivityInfo_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildPartyActivityInfo_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildSetInfo_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildSetInfo_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildSetInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildSetInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildSetInfo_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildSetInfo_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildSkill_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildSkill_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildSkill_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildSkill_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildSkill_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildSkill_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildTechnique_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildTechnique_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildTechnique_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildTechnique_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildTechnique_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildTechnique_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GuildViceMaster_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_GuildViceMaster_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_GuildViceMaster_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_GuildViceMaster_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GuildViceMaster_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GuildViceMaster_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_IntoCiTanEnemyGuild_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_IntoCiTanEnemyGuild_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_IntoCiTanEnemyGuild_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_IntoCiTanEnemyGuild_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_IntoCiTanEnemyGuild_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_IntoCiTanEnemyGuild_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_IntoGuildMap_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_IntoGuildMap_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_IntoGuildMap_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_IntoGuildMap_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_IntoGuildMap_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_IntoGuildMap_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_LearnGuildSkill_CSC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_LearnGuildSkill_CSC_default_instance_;
    new (ptr) ::guild::MSG_Req_LearnGuildSkill_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_LearnGuildSkill_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_LearnGuildSkill_CSC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_LearnGuildSkill_CSC_guild_2eproto}, {
      &scc_info_guildSkill_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_ModifyRecrutCondition_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_ModifyRecrutCondition_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_ModifyRecrutCondition_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_ModifyRecrutCondition_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ModifyRecrutCondition_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ModifyRecrutCondition_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_OneKeyApply_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_OneKeyApply_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_OneKeyApply_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_OneKeyApply_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_OneKeyApply_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_OneKeyApply_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_PreCreateGuild_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_PreCreateGuild_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_PreCreateGuild_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_PreCreateGuild_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_PreCreateGuild_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_PreCreateGuild_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_QuitGuild_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_QuitGuild_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_QuitGuild_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_QuitGuild_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_QuitGuild_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_QuitGuild_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_RecrutCondition_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_RecrutCondition_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_RecrutCondition_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_RecrutCondition_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_RecrutCondition_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_RecrutCondition_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_SetGuildNotify_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_SetGuildNotify_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_SetGuildNotify_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_SetGuildNotify_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_SetGuildNotify_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_SetGuildNotify_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_StartGuildParty_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_StartGuildParty_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_StartGuildParty_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_StartGuildParty_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_StartGuildParty_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_StartGuildParty_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_SubmitFellowshipSurvey_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_SubmitFellowshipSurvey_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_SubmitFellowshipSurvey_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_SubmitFellowshipSurvey_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_SubmitFellowshipSurvey_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_SubmitFellowshipSurvey_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_SubmitGuildGoods_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_SubmitGuildGoods_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_SubmitGuildGoods_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_SubmitGuildGoods_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_SubmitGuildGoods_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_SubmitGuildGoods_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_SwapGuildPosOrder_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_SwapGuildPosOrder_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_SwapGuildPosOrder_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_SwapGuildPosOrder_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_SwapGuildPosOrder_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_SwapGuildPosOrder_CS_guild_2eproto}, {
      &scc_info_SwapGuildPosInfo_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_TargetCiTanEnemyGuild_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_TargetCiTanEnemyGuild_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_TargetCiTanEnemyGuild_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_TargetCiTanEnemyGuild_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_TargetCiTanEnemyGuild_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_TargetCiTanEnemyGuild_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_TechniqueDevelop_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_TechniqueDevelop_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_TechniqueDevelop_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_TechniqueDevelop_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_TechniqueDevelop_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_TechniqueDevelop_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_TechniqueUpGrade_CS_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Req_TechniqueUpGrade_CS_default_instance_;
    new (ptr) ::guild::MSG_Req_TechniqueUpGrade_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Req_TechniqueUpGrade_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_TechniqueUpGrade_CS_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_TechniqueUpGrade_CS_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetRecrutCondition_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_RetRecrutCondition_SC_default_instance_;
    new (ptr) ::guild::MSG_RetRecrutCondition_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_RetRecrutCondition_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetRecrutCondition_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetRecrutCondition_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_AnswerApplyForGuild_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_AnswerApplyForGuild_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_AnswerApplyForGuild_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_AnswerApplyForGuild_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_AnswerApplyForGuild_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_AnswerApplyForGuild_SC_guild_2eproto}, {
      &scc_info_stApplyForItem_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_ApplyForGuild_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_ApplyForGuild_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_ApplyForGuild_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_ApplyForGuild_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_ApplyForGuild_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_ApplyForGuild_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_AssignPosition_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_AssignPosition_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_AssignPosition_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_AssignPosition_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_AssignPosition_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_AssignPosition_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_BeFiredGuildMember_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_BeFiredGuildMember_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_BeFiredGuildMember_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_BeFiredGuildMember_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_BeFiredGuildMember_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_BeFiredGuildMember_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_ChangeGuildMaster_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_ChangeGuildMaster_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_ChangeGuildMaster_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_ChangeGuildMaster_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_ChangeGuildMaster_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_ChangeGuildMaster_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_CheckDayWelfare_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_CheckDayWelfare_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_CheckDayWelfare_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_CheckDayWelfare_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_CheckDayWelfare_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_CheckDayWelfare_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_ChoosedCiTanEnemyGuild_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_ChoosedCiTanEnemyGuild_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_ChoosedCiTanEnemyGuild_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_ChoosedCiTanEnemyGuild_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_ChoosedCiTanEnemyGuild_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_ChoosedCiTanEnemyGuild_SC_guild_2eproto}, {
      &scc_info_CiTanEnemyGuildItem_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_CiTanEnemyGuildList_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_CiTanEnemyGuildList_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_CiTanEnemyGuildList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_CiTanEnemyGuildList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_CiTanEnemyGuildList_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_CiTanEnemyGuildList_SC_guild_2eproto}, {
      &scc_info_CiTanEnemyGuildItem_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_CreateGuild_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_CreateGuild_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_CreateGuild_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_CreateGuild_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_CreateGuild_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_CreateGuild_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_DismissGuild_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_DismissGuild_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_DismissGuild_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_DismissGuild_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_DismissGuild_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_DismissGuild_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_FellowshipSurvey_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_FellowshipSurvey_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_FellowshipSurvey_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_FellowshipSurvey_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_FellowshipSurvey_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_FellowshipSurvey_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_FireGuildMember_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_FireGuildMember_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_FireGuildMember_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_FireGuildMember_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_FireGuildMember_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_FireGuildMember_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GetDayWelfare_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GetDayWelfare_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GetDayWelfare_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GetDayWelfare_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GetDayWelfare_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GetDayWelfare_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildExtension_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildExtension_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildExtension_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildExtension_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildExtension_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildExtension_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildGoods_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildGoods_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildGoods_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildGoods_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_GuildGoods_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_GuildGoods_SC_guild_2eproto}, {
      &scc_info_GoodsInfo_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_GuildInfo_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildInfo_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MSG_Ret_GuildInfo_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MSG_Ret_GuildInfo_SC_guild_2eproto}, {
      &scc_info_guildInfo_guild_2eproto.base,
      &scc_info_guildMember_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_GuildInviteConfirm_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildInviteConfirm_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildInviteConfirm_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildInviteConfirm_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildInviteConfirm_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildInviteConfirm_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildInvite_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildInvite_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildInvite_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildInvite_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildInvite_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildInvite_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildLevelup_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildLevelup_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildLevelup_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildLevelup_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildLevelup_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildLevelup_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildList_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildList_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_GuildList_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_GuildList_SC_guild_2eproto}, {
      &scc_info_guildListItem_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_GuildMemberList_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildMemberList_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildMemberList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildMemberList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MSG_Ret_GuildMemberList_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MSG_Ret_GuildMemberList_SC_guild_2eproto}, {
      &scc_info_guildInfo_guild_2eproto.base,
      &scc_info_guildMember_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_GuildPartyActivityData_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildPartyActivityData_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildPartyActivityData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildPartyActivityData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildPartyActivityData_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildPartyActivityData_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildPartyActivityInfo_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildPartyActivityInfo_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildPartyActivityInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildPartyActivityInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildPartyActivityInfo_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildPartyActivityInfo_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildSetInfo_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildSetInfo_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildSetInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildSetInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GuildSetInfo_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GuildSetInfo_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GuildSkill_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildSkill_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildSkill_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildSkill_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_GuildSkill_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_GuildSkill_SC_guild_2eproto}, {
      &scc_info_guildSkill_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_GuildTechnique_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildTechnique_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildTechnique_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildTechnique_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_GuildTechnique_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_GuildTechnique_SC_guild_2eproto}, {
      &scc_info_TechniqueInfo_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_GuildViceMaster_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_GuildViceMaster_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_GuildViceMaster_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_GuildViceMaster_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_GuildViceMaster_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_GuildViceMaster_SC_guild_2eproto}, {
      &scc_info_ViceMaster_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_MyGuildApply_Result_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_MyGuildApply_Result_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_MyGuildApply_Result_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_MyGuildApply_Result_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_MyGuildApply_Result_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_MyGuildApply_Result_SC_guild_2eproto}, {
      &scc_info_stApplyForItem_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_OneKeyApply_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_OneKeyApply_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_OneKeyApply_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_OneKeyApply_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_OneKeyApply_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_OneKeyApply_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_PositionInfo_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_PositionInfo_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_PositionInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_PositionInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_PositionInfo_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_PositionInfo_SC_guild_2eproto}, {
      &scc_info_GuildPositionInfo_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_PreCreateGuild_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_PreCreateGuild_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_PreCreateGuild_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_PreCreateGuild_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_PreCreateGuild_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_PreCreateGuild_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_QuitGuild_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_QuitGuild_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_QuitGuild_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_QuitGuild_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_QuitGuild_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_QuitGuild_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_RefreshTechniqueInfo_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_RefreshTechniqueInfo_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_RefreshTechniqueInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_RefreshTechniqueInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_RefreshTechniqueInfo_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_RefreshTechniqueInfo_SC_guild_2eproto}, {
      &scc_info_TechniqueInfo_guild_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_SetGuildNotify_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_SetGuildNotify_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_SetGuildNotify_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_SetGuildNotify_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_SetGuildNotify_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_SetGuildNotify_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_SubmitGuildGoods_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_SubmitGuildGoods_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_SubmitGuildGoods_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_SubmitGuildGoods_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_SubmitGuildGoods_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_SubmitGuildGoods_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_TechniqueDevelop_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_TechniqueDevelop_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_TechniqueDevelop_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_TechniqueDevelop_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_TechniqueDevelop_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_TechniqueDevelop_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_TechniqueUpGrade_SC_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_MSG_Ret_TechniqueUpGrade_SC_default_instance_;
    new (ptr) ::guild::MSG_Ret_TechniqueUpGrade_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::MSG_Ret_TechniqueUpGrade_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_TechniqueUpGrade_SC_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_TechniqueUpGrade_SC_guild_2eproto}, {}};

static void InitDefaultsscc_info_SwapGuildPosInfo_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_SwapGuildPosInfo_default_instance_;
    new (ptr) ::guild::SwapGuildPosInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::SwapGuildPosInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapGuildPosInfo_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwapGuildPosInfo_guild_2eproto}, {}};

static void InitDefaultsscc_info_TechniqueInfo_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_TechniqueInfo_default_instance_;
    new (ptr) ::guild::TechniqueInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::TechniqueInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TechniqueInfo_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TechniqueInfo_guild_2eproto}, {}};

static void InitDefaultsscc_info_ViceMaster_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_ViceMaster_default_instance_;
    new (ptr) ::guild::ViceMaster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::ViceMaster::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViceMaster_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ViceMaster_guild_2eproto}, {}};

static void InitDefaultsscc_info_guildInfo_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_guildInfo_default_instance_;
    new (ptr) ::guild::guildInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::guildInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_guildInfo_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_guildInfo_guild_2eproto}, {
      &scc_info_GuildPositionInfo_guild_2eproto.base,}};

static void InitDefaultsscc_info_guildListItem_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_guildListItem_default_instance_;
    new (ptr) ::guild::guildListItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::guildListItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_guildListItem_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_guildListItem_guild_2eproto}, {
      &scc_info_guildInfo_guild_2eproto.base,}};

static void InitDefaultsscc_info_guildMember_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_guildMember_default_instance_;
    new (ptr) ::guild::guildMember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::guildMember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_guildMember_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_guildMember_guild_2eproto}, {}};

static void InitDefaultsscc_info_guildSkill_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_guildSkill_default_instance_;
    new (ptr) ::guild::guildSkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::guildSkill::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_guildSkill_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_guildSkill_guild_2eproto}, {}};

static void InitDefaultsscc_info_stApplyForItem_guild_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::guild::_stApplyForItem_default_instance_;
    new (ptr) ::guild::stApplyForItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::guild::stApplyForItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_stApplyForItem_guild_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_stApplyForItem_guild_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_guild_2eproto[95];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_guild_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_guild_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_guild_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, memberid_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, membername_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, memberlevel_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, memberstatus_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, contribute_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, donatesalary_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, isonline_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, lastonlinetime_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, career_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, positionid_),
  PROTOBUF_FIELD_OFFSET(::guild::guildMember, applytime_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, guildid_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, guildname_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, guildlevel_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, active_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, mastername_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, exp_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, nextexp_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, salary_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, sumcount_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, onlinecount_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, countlimit_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, notify_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, countryid_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, rank_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, posinfo_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, guildsetinfo_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, lastactive_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, lastcountlimit_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, icon_),
  PROTOBUF_FIELD_OFFSET(::guild::guildInfo, salary_rest_day_),
  5,
  0,
  6,
  7,
  1,
  8,
  9,
  10,
  11,
  12,
  13,
  2,
  14,
  15,
  ~0u,
  3,
  16,
  17,
  4,
  18,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_PreCreateGuild_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_PreCreateGuild_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_PreCreateGuild_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_PreCreateGuild_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_PreCreateGuild_SC, cost_objid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_PreCreateGuild_SC, cost_objnum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_CreateGuild_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_CreateGuild_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_CreateGuild_CS, guildname_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_CreateGuild_CS, icon_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_CreateGuild_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_CreateGuild_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_CreateGuild_SC, guildname_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_CreateGuild_SC, issucc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SetGuildNotify_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SetGuildNotify_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SetGuildNotify_CS, notify_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_SetGuildNotify_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_SetGuildNotify_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_SetGuildNotify_SC, issucc_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildInfo_CS, guildid_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInfo_SC, guildinfo_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInfo_SC, myinfo_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildList_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildList_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildList_CS, page_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildList_CS, countryid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::guildListItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::guildListItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::guildListItem, guild_),
  PROTOBUF_FIELD_OFFSET(::guild::guildListItem, guildtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildList_SC, guildlist_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildList_SC, allpage_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildList_SC, page_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildList_SC, countryid_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ApplyForGuild_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ApplyForGuild_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ApplyForGuild_CS, guildid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ApplyForGuild_CS, flag_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ApplyForGuild_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ApplyForGuild_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ApplyForGuild_SC, guildid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ApplyForGuild_SC, issucc_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ApplyForGuild_SC, flag_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::guild::stApplyForItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::stApplyForItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::stApplyForItem, applyid_),
  PROTOBUF_FIELD_OFFSET(::guild::stApplyForItem, applyname_),
  PROTOBUF_FIELD_OFFSET(::guild::stApplyForItem, issucc_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AnswerApplyForGuild_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AnswerApplyForGuild_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AnswerApplyForGuild_CS, applyinfo_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AnswerApplyForGuild_CS, accept_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_AnswerApplyForGuild_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_AnswerApplyForGuild_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_AnswerApplyForGuild_SC, retlist_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_MyGuildApply_Result_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_MyGuildApply_Result_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_MyGuildApply_Result_SC, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildMemberList_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildMemberList_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildMemberList_CS, page_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildMemberList_CS, reqtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildMemberList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildMemberList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildMemberList_SC, guildinfo_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildMemberList_SC, members_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildMemberList_SC, reqtype_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildMemberList_SC, page_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildMemberList_SC, allpage_),
  0,
  ~0u,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_IntoGuildMap_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_IntoGuildMap_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_CiTanEnemyGuildList_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_CiTanEnemyGuildList_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::CiTanEnemyGuildItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::CiTanEnemyGuildItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::CiTanEnemyGuildItem, guildid_),
  PROTOBUF_FIELD_OFFSET(::guild::CiTanEnemyGuildItem, guildlevel_),
  PROTOBUF_FIELD_OFFSET(::guild::CiTanEnemyGuildItem, guildname_),
  PROTOBUF_FIELD_OFFSET(::guild::CiTanEnemyGuildItem, mastername_),
  PROTOBUF_FIELD_OFFSET(::guild::CiTanEnemyGuildItem, isvalid_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_CiTanEnemyGuildList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_CiTanEnemyGuildList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_CiTanEnemyGuildList_SC, guildlist_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChooseCiTanEnemyGuild_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChooseCiTanEnemyGuild_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChooseCiTanEnemyGuild_CS, guildid_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_TargetCiTanEnemyGuild_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_TargetCiTanEnemyGuild_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ChoosedCiTanEnemyGuild_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ChoosedCiTanEnemyGuild_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ChoosedCiTanEnemyGuild_SC, guild_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_IntoCiTanEnemyGuild_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_IntoCiTanEnemyGuild_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_CiTanBacktoMyGuild_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_CiTanBacktoMyGuild_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::GuildPositionInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::GuildPositionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::GuildPositionInfo, positionid_),
  PROTOBUF_FIELD_OFFSET(::guild::GuildPositionInfo, name_),
  PROTOBUF_FIELD_OFFSET(::guild::GuildPositionInfo, orderid_),
  PROTOBUF_FIELD_OFFSET(::guild::GuildPositionInfo, privilege_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AddGuildPosition_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AddGuildPosition_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AddGuildPosition_CS, posinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_DeleteGuildPosition_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_DeleteGuildPosition_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_DeleteGuildPosition_CS, positionid_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::SwapGuildPosInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::SwapGuildPosInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::SwapGuildPosInfo, posidfrom_),
  PROTOBUF_FIELD_OFFSET(::guild::SwapGuildPosInfo, posidto_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SwapGuildPosOrder_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SwapGuildPosOrder_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SwapGuildPosOrder_CS, swapinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangePositionName_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangePositionName_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangePositionName_CS, positionid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangePositionName_CS, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangePositionPri_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangePositionPri_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangePositionPri_CS, positionid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangePositionPri_CS, privilege_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AssignPosition_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AssignPosition_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AssignPosition_CS, memberid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_AssignPosition_CS, positionid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_AssignPosition_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_AssignPosition_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_AssignPosition_SC, memberid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_AssignPosition_SC, positionid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_PositionInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_PositionInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_PositionInfo_SC, posinfos_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildLevelup_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildLevelup_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildLevelup_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildLevelup_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildLevelup_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildSetInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildSetInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildSetInfo_CS, guildsetinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildSetInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildSetInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildSetInfo_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_CheckDayWelfare_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_CheckDayWelfare_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_CheckDayWelfare_SC, canreceive_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GetDayWelfare_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GetDayWelfare_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GetDayWelfare_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GetDayWelfare_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GetDayWelfare_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildGoods_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildGoods_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildGoods_CS, goodstype_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::GoodsInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::GoodsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::GoodsInfo, tagid_),
  PROTOBUF_FIELD_OFFSET(::guild::GoodsInfo, itemid_),
  PROTOBUF_FIELD_OFFSET(::guild::GoodsInfo, submitnum_),
  PROTOBUF_FIELD_OFFSET(::guild::GoodsInfo, award_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildGoods_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildGoods_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildGoods_SC, items_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildGoods_SC, multireward_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildGoods_SC, remain_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildGoods_SC, nexttime_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildGoods_SC, goodstype_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitGuildGoods_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitGuildGoods_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitGuildGoods_CS, tagid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitGuildGoods_CS, goodstype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_SubmitGuildGoods_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_SubmitGuildGoods_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_SubmitGuildGoods_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_SubmitGuildGoods_SC, goodstype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_QuitGuild_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_QuitGuild_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_QuitGuild_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_QuitGuild_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_QuitGuild_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_FireGuildMember_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_FireGuildMember_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_FireGuildMember_CS, leavememberid_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_FireGuildMember_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_FireGuildMember_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_FireGuildMember_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_FireGuildMember_SC, leavememberid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_BeFiredGuildMember_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_BeFiredGuildMember_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildInvite_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildInvite_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildInvite_CS, joinmemberid_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInvite_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInvite_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInvite_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInvite_SC, id_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInvite_SC, name_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInvite_SC, guildname_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildInviteConfirm_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildInviteConfirm_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildInviteConfirm_CS, inviterid_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInviteConfirm_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInviteConfirm_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildInviteConfirm_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_DismissGuild_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_DismissGuild_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_DismissGuild_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_DismissGuild_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_DismissGuild_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangeGuildMaster_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangeGuildMaster_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ChangeGuildMaster_CS, newmasterid_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ChangeGuildMaster_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ChangeGuildMaster_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_ChangeGuildMaster_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::ViceMaster, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::ViceMaster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::ViceMaster, id_),
  PROTOBUF_FIELD_OFFSET(::guild::ViceMaster, level_),
  PROTOBUF_FIELD_OFFSET(::guild::ViceMaster, fightvalue_),
  PROTOBUF_FIELD_OFFSET(::guild::ViceMaster, name_),
  PROTOBUF_FIELD_OFFSET(::guild::ViceMaster, headicon_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildViceMaster_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildViceMaster_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildViceMaster_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildViceMaster_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildViceMaster_SC, vicemaster_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildExtension_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildExtension_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildExtension_CS, isfree_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildExtension_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildExtension_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildExtension_SC, extensionover_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildExtension_SC, retcode_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_OneKeyApply_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_OneKeyApply_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_OneKeyApply_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_OneKeyApply_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_OneKeyApply_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_RecrutCondition_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_RecrutCondition_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_RetRecrutCondition_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_RetRecrutCondition_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_RetRecrutCondition_SC, levelvalid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_RetRecrutCondition_SC, fightvalid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_RetRecrutCondition_SC, level_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_RetRecrutCondition_SC, fight_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ModifyRecrutCondition_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ModifyRecrutCondition_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ModifyRecrutCondition_CS, levelvalid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ModifyRecrutCondition_CS, fightvalid_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ModifyRecrutCondition_CS, level_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_ModifyRecrutCondition_CS, fight_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildTechnique_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildTechnique_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::TechniqueInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::TechniqueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::TechniqueInfo, techid_),
  PROTOBUF_FIELD_OFFSET(::guild::TechniqueInfo, personallevel_),
  PROTOBUF_FIELD_OFFSET(::guild::TechniqueInfo, developlevel_),
  PROTOBUF_FIELD_OFFSET(::guild::TechniqueInfo, validlevel_),
  PROTOBUF_FIELD_OFFSET(::guild::TechniqueInfo, unlock_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildTechnique_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildTechnique_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildTechnique_SC, info_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_TechniqueUpGrade_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_TechniqueUpGrade_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_TechniqueUpGrade_CS, techid_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_TechniqueUpGrade_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_TechniqueUpGrade_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_TechniqueUpGrade_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_RefreshTechniqueInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_RefreshTechniqueInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_RefreshTechniqueInfo_SC, info_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_TechniqueDevelop_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_TechniqueDevelop_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_TechniqueDevelop_CS, techid_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_TechniqueDevelop_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_TechniqueDevelop_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_TechniqueDevelop_SC, salary_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildPartyActivityInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildPartyActivityInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildPartyActivityInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildPartyActivityInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildPartyActivityInfo_SC, lefttimes_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_StartGuildParty_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_StartGuildParty_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildPartyActivityData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildPartyActivityData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildPartyActivityData_SC, endtime_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_FellowshipSurvey_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_FellowshipSurvey_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_FellowshipSurvey_SC, question_a_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_FellowshipSurvey_SC, question_b_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_FellowshipSurvey_SC, question_c_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitFellowshipSurvey_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitFellowshipSurvey_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitFellowshipSurvey_CS, question_a_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitFellowshipSurvey_CS, question_b_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitFellowshipSurvey_CS, question_c_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitFellowshipSurvey_CS, answer_a_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitFellowshipSurvey_CS, answer_b_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_SubmitFellowshipSurvey_CS, answer_c_),
  1,
  2,
  3,
  4,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_ReqDonateSalary_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_ReqDonateSalary_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_ReqDonateSalary_CS, value_),
  0,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_ReqUserCntData_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_ReqUserCntData_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_ReqUserCntData_CSC, type_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_ReqUserCntData_CSC, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::guild::guildSkill, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::guildSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::guildSkill, skillid_),
  PROTOBUF_FIELD_OFFSET(::guild::guildSkill, skilllv_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildSkill_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_GuildSkill_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildSkill_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildSkill_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Ret_GuildSkill_SC, skillinfo_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_LearnGuildSkill_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_LearnGuildSkill_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::guild::MSG_Req_LearnGuildSkill_CSC, skillinfo_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::guild::guildMember)},
  { 27, 52, sizeof(::guild::guildInfo)},
  { 72, 77, sizeof(::guild::MSG_Req_PreCreateGuild_CS)},
  { 77, 84, sizeof(::guild::MSG_Ret_PreCreateGuild_SC)},
  { 86, 93, sizeof(::guild::MSG_Req_CreateGuild_CS)},
  { 95, 102, sizeof(::guild::MSG_Ret_CreateGuild_SC)},
  { 104, 110, sizeof(::guild::MSG_Req_SetGuildNotify_CS)},
  { 111, 117, sizeof(::guild::MSG_Ret_SetGuildNotify_SC)},
  { 118, 124, sizeof(::guild::MSG_Req_GuildInfo_CS)},
  { 125, 132, sizeof(::guild::MSG_Ret_GuildInfo_SC)},
  { 134, 141, sizeof(::guild::MSG_Req_GuildList_CS)},
  { 143, 150, sizeof(::guild::guildListItem)},
  { 152, 161, sizeof(::guild::MSG_Ret_GuildList_SC)},
  { 165, 172, sizeof(::guild::MSG_Req_ApplyForGuild_CS)},
  { 174, 182, sizeof(::guild::MSG_Ret_ApplyForGuild_SC)},
  { 185, 193, sizeof(::guild::stApplyForItem)},
  { 196, 203, sizeof(::guild::MSG_Req_AnswerApplyForGuild_CS)},
  { 205, 211, sizeof(::guild::MSG_Ret_AnswerApplyForGuild_SC)},
  { 212, 218, sizeof(::guild::MSG_Ret_MyGuildApply_Result_SC)},
  { 219, 226, sizeof(::guild::MSG_Req_GuildMemberList_CS)},
  { 228, 238, sizeof(::guild::MSG_Ret_GuildMemberList_SC)},
  { 243, 248, sizeof(::guild::MSG_Req_IntoGuildMap_CS)},
  { 248, 253, sizeof(::guild::MSG_Req_CiTanEnemyGuildList_CS)},
  { 253, 263, sizeof(::guild::CiTanEnemyGuildItem)},
  { 268, 274, sizeof(::guild::MSG_Ret_CiTanEnemyGuildList_SC)},
  { 275, 281, sizeof(::guild::MSG_Req_ChooseCiTanEnemyGuild_CS)},
  { 282, 287, sizeof(::guild::MSG_Req_TargetCiTanEnemyGuild_CS)},
  { 287, 293, sizeof(::guild::MSG_Ret_ChoosedCiTanEnemyGuild_SC)},
  { 294, 299, sizeof(::guild::MSG_Req_IntoCiTanEnemyGuild_CS)},
  { 299, 304, sizeof(::guild::MSG_Req_CiTanBacktoMyGuild_CS)},
  { 304, 313, sizeof(::guild::GuildPositionInfo)},
  { 317, 323, sizeof(::guild::MSG_Req_AddGuildPosition_CS)},
  { 324, 330, sizeof(::guild::MSG_Req_DeleteGuildPosition_CS)},
  { 331, 338, sizeof(::guild::SwapGuildPosInfo)},
  { 340, 346, sizeof(::guild::MSG_Req_SwapGuildPosOrder_CS)},
  { 347, 354, sizeof(::guild::MSG_Req_ChangePositionName_CS)},
  { 356, 363, sizeof(::guild::MSG_Req_ChangePositionPri_CS)},
  { 365, 372, sizeof(::guild::MSG_Req_AssignPosition_CS)},
  { 374, 381, sizeof(::guild::MSG_Ret_AssignPosition_SC)},
  { 383, 389, sizeof(::guild::MSG_Ret_PositionInfo_SC)},
  { 390, 395, sizeof(::guild::MSG_Req_GuildLevelup_CS)},
  { 395, 401, sizeof(::guild::MSG_Ret_GuildLevelup_SC)},
  { 402, 408, sizeof(::guild::MSG_Req_GuildSetInfo_CS)},
  { 409, 415, sizeof(::guild::MSG_Ret_GuildSetInfo_SC)},
  { 416, 422, sizeof(::guild::MSG_Ret_CheckDayWelfare_SC)},
  { 423, 428, sizeof(::guild::MSG_Req_GetDayWelfare_CS)},
  { 428, 434, sizeof(::guild::MSG_Ret_GetDayWelfare_SC)},
  { 435, 441, sizeof(::guild::MSG_Req_GuildGoods_CS)},
  { 442, 451, sizeof(::guild::GoodsInfo)},
  { 455, 465, sizeof(::guild::MSG_Ret_GuildGoods_SC)},
  { 470, 477, sizeof(::guild::MSG_Req_SubmitGuildGoods_CS)},
  { 479, 486, sizeof(::guild::MSG_Ret_SubmitGuildGoods_SC)},
  { 488, 493, sizeof(::guild::MSG_Req_QuitGuild_CS)},
  { 493, 499, sizeof(::guild::MSG_Ret_QuitGuild_SC)},
  { 500, 506, sizeof(::guild::MSG_Req_FireGuildMember_CS)},
  { 507, 514, sizeof(::guild::MSG_Ret_FireGuildMember_SC)},
  { 516, 521, sizeof(::guild::MSG_Ret_BeFiredGuildMember_SC)},
  { 521, 527, sizeof(::guild::MSG_Req_GuildInvite_CS)},
  { 528, 537, sizeof(::guild::MSG_Ret_GuildInvite_SC)},
  { 541, 547, sizeof(::guild::MSG_Req_GuildInviteConfirm_CS)},
  { 548, 554, sizeof(::guild::MSG_Ret_GuildInviteConfirm_SC)},
  { 555, 560, sizeof(::guild::MSG_Req_DismissGuild_CS)},
  { 560, 566, sizeof(::guild::MSG_Ret_DismissGuild_SC)},
  { 567, 573, sizeof(::guild::MSG_Req_ChangeGuildMaster_CS)},
  { 574, 580, sizeof(::guild::MSG_Ret_ChangeGuildMaster_SC)},
  { 581, 591, sizeof(::guild::ViceMaster)},
  { 596, 601, sizeof(::guild::MSG_Req_GuildViceMaster_CS)},
  { 601, 607, sizeof(::guild::MSG_Ret_GuildViceMaster_SC)},
  { 608, 614, sizeof(::guild::MSG_Req_GuildExtension_CS)},
  { 615, 622, sizeof(::guild::MSG_Ret_GuildExtension_SC)},
  { 624, 629, sizeof(::guild::MSG_Req_OneKeyApply_CS)},
  { 629, 635, sizeof(::guild::MSG_Ret_OneKeyApply_SC)},
  { 636, 641, sizeof(::guild::MSG_Req_RecrutCondition_CS)},
  { 641, 650, sizeof(::guild::MSG_RetRecrutCondition_SC)},
  { 654, 663, sizeof(::guild::MSG_Req_ModifyRecrutCondition_CS)},
  { 667, 672, sizeof(::guild::MSG_Req_GuildTechnique_CS)},
  { 672, 682, sizeof(::guild::TechniqueInfo)},
  { 687, 693, sizeof(::guild::MSG_Ret_GuildTechnique_SC)},
  { 694, 700, sizeof(::guild::MSG_Req_TechniqueUpGrade_CS)},
  { 701, 707, sizeof(::guild::MSG_Ret_TechniqueUpGrade_SC)},
  { 708, 714, sizeof(::guild::MSG_Ret_RefreshTechniqueInfo_SC)},
  { 715, 721, sizeof(::guild::MSG_Req_TechniqueDevelop_CS)},
  { 722, 728, sizeof(::guild::MSG_Ret_TechniqueDevelop_SC)},
  { 729, 734, sizeof(::guild::MSG_Req_GuildPartyActivityInfo_CS)},
  { 734, 740, sizeof(::guild::MSG_Ret_GuildPartyActivityInfo_SC)},
  { 741, 746, sizeof(::guild::MSG_Req_StartGuildParty_CS)},
  { 746, 752, sizeof(::guild::MSG_Ret_GuildPartyActivityData_SC)},
  { 753, 761, sizeof(::guild::MSG_Ret_FellowshipSurvey_SC)},
  { 764, 775, sizeof(::guild::MSG_Req_SubmitFellowshipSurvey_CS)},
  { 781, 787, sizeof(::guild::MSG_ReqDonateSalary_CS)},
  { 788, 795, sizeof(::guild::MSG_ReqUserCntData_CSC)},
  { 797, 804, sizeof(::guild::guildSkill)},
  { 806, 811, sizeof(::guild::MSG_Req_GuildSkill_CS)},
  { 811, 817, sizeof(::guild::MSG_Ret_GuildSkill_SC)},
  { 818, 824, sizeof(::guild::MSG_Req_LearnGuildSkill_CSC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_guildMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_guildInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_PreCreateGuild_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_PreCreateGuild_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_CreateGuild_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_CreateGuild_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_SetGuildNotify_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_SetGuildNotify_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildList_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_guildListItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_ApplyForGuild_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_ApplyForGuild_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_stApplyForItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_AnswerApplyForGuild_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_AnswerApplyForGuild_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_MyGuildApply_Result_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildMemberList_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildMemberList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_IntoGuildMap_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_CiTanEnemyGuildList_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_CiTanEnemyGuildItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_CiTanEnemyGuildList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_ChooseCiTanEnemyGuild_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_TargetCiTanEnemyGuild_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_ChoosedCiTanEnemyGuild_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_IntoCiTanEnemyGuild_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_CiTanBacktoMyGuild_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_GuildPositionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_AddGuildPosition_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_DeleteGuildPosition_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_SwapGuildPosInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_SwapGuildPosOrder_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_ChangePositionName_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_ChangePositionPri_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_AssignPosition_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_AssignPosition_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_PositionInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildLevelup_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildLevelup_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildSetInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildSetInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_CheckDayWelfare_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GetDayWelfare_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GetDayWelfare_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildGoods_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_GoodsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildGoods_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_SubmitGuildGoods_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_SubmitGuildGoods_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_QuitGuild_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_QuitGuild_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_FireGuildMember_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_FireGuildMember_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_BeFiredGuildMember_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildInvite_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildInvite_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildInviteConfirm_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildInviteConfirm_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_DismissGuild_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_DismissGuild_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_ChangeGuildMaster_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_ChangeGuildMaster_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_ViceMaster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildViceMaster_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildViceMaster_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildExtension_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildExtension_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_OneKeyApply_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_OneKeyApply_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_RecrutCondition_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_RetRecrutCondition_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_ModifyRecrutCondition_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildTechnique_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_TechniqueInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildTechnique_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_TechniqueUpGrade_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_TechniqueUpGrade_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_RefreshTechniqueInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_TechniqueDevelop_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_TechniqueDevelop_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildPartyActivityInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildPartyActivityInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_StartGuildParty_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildPartyActivityData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_FellowshipSurvey_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_SubmitFellowshipSurvey_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_ReqDonateSalary_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_ReqUserCntData_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_guildSkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_GuildSkill_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Ret_GuildSkill_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::guild::_MSG_Req_LearnGuildSkill_CSC_default_instance_),
};

const char descriptor_table_protodef_guild_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013guild.proto\022\005guild\"\351\001\n\013guildMember\022\020\n\010"
  "memberid\030\001 \001(\004\022\022\n\nmembername\030\002 \001(\t\022\023\n\013me"
  "mberlevel\030\003 \001(\r\022\024\n\014memberstatus\030\004 \001(\r\022\022\n"
  "\ncontribute\030\005 \001(\r\022\024\n\014donatesalary\030\006 \001(\r\022"
  "\020\n\010isonline\030\007 \001(\010\022\026\n\016lastonlinetime\030\010 \001("
  "\r\022\016\n\006career\030\t \001(\r\022\022\n\npositionid\030\n \001(\r\022\021\n"
  "\tapplytime\030\013 \001(\r\"\225\003\n\tguildInfo\022\017\n\007guildi"
  "d\030\001 \001(\004\022\021\n\tguildname\030\002 \001(\t\022\022\n\nguildlevel"
  "\030\003 \001(\r\022\016\n\006active\030\004 \001(\r\022\022\n\nmastername\030\005 \001"
  "(\t\022\013\n\003exp\030\006 \001(\r\022\017\n\007nextexp\030\007 \001(\r\022\016\n\006sala"
  "ry\030\010 \001(\r\022\020\n\010sumcount\030\t \001(\r\022\023\n\013onlinecoun"
  "t\030\n \001(\r\022\022\n\ncountlimit\030\013 \001(\r\022\016\n\006notify\030\014 "
  "\001(\t\022\021\n\tcountryid\030\r \001(\r\022\014\n\004rank\030\016 \001(\r\022)\n\007"
  "posinfo\030\017 \003(\0132\030.guild.GuildPositionInfo\022"
  "\024\n\014guildsetinfo\030\020 \001(\t\022\022\n\nlastactive\030\021 \001("
  "\r\022\026\n\016lastcountlimit\030\022 \001(\r\022\014\n\004icon\030\023 \001(\t\022"
  "\027\n\017salary_rest_day\030\024 \001(\r\"\033\n\031MSG_Req_PreC"
  "reateGuild_CS\"D\n\031MSG_Ret_PreCreateGuild_"
  "SC\022\022\n\ncost_objid\030\001 \001(\r\022\023\n\013cost_objnum\030\002 "
  "\001(\r\"9\n\026MSG_Req_CreateGuild_CS\022\021\n\tguildna"
  "me\030\001 \001(\t\022\014\n\004icon\030\002 \001(\t\";\n\026MSG_Ret_Create"
  "Guild_SC\022\021\n\tguildname\030\001 \001(\t\022\016\n\006issucc\030\002 "
  "\001(\010\"+\n\031MSG_Req_SetGuildNotify_CS\022\016\n\006noti"
  "fy\030\003 \001(\t\"+\n\031MSG_Ret_SetGuildNotify_SC\022\016\n"
  "\006issucc\030\001 \001(\010\"\'\n\024MSG_Req_GuildInfo_CS\022\017\n"
  "\007guildid\030\001 \001(\004\"_\n\024MSG_Ret_GuildInfo_SC\022#"
  "\n\tguildinfo\030\001 \001(\0132\020.guild.guildInfo\022\"\n\006m"
  "yinfo\030\002 \001(\0132\022.guild.guildMember\"7\n\024MSG_R"
  "eq_GuildList_CS\022\014\n\004page\030\001 \002(\r\022\021\n\tcountry"
  "id\030\002 \001(\r\"C\n\rguildListItem\022\037\n\005guild\030\001 \001(\013"
  "2\020.guild.guildInfo\022\021\n\tguildtype\030\002 \001(\r\"q\n"
  "\024MSG_Ret_GuildList_SC\022\'\n\tguildList\030\001 \003(\013"
  "2\024.guild.guildListItem\022\017\n\007allpage\030\002 \001(\r\022"
  "\014\n\004page\030\003 \001(\r\022\021\n\tcountryid\030\004 \001(\r\"9\n\030MSG_"
  "Req_ApplyForGuild_CS\022\017\n\007guildid\030\001 \001(\004\022\014\n"
  "\004flag\030\002 \001(\010\"I\n\030MSG_Ret_ApplyForGuild_SC\022"
  "\017\n\007guildid\030\001 \001(\004\022\016\n\006issucc\030\002 \001(\010\022\014\n\004flag"
  "\030\003 \001(\010\"K\n\016stApplyForItem\022\017\n\007applyid\030\001 \001("
  "\004\022\021\n\tapplyname\030\002 \001(\t\022\025\n\006issucc\030\003 \001(\010:\005fa"
  "lse\"Z\n\036MSG_Req_AnswerApplyForGuild_CS\022(\n"
  "\tapplyinfo\030\001 \003(\0132\025.guild.stApplyForItem\022"
  "\016\n\006accept\030\002 \001(\010\"H\n\036MSG_Ret_AnswerApplyFo"
  "rGuild_SC\022&\n\007retlist\030\001 \003(\0132\025.guild.stApp"
  "lyForItem\"G\n\036MSG_Ret_MyGuildApply_Result"
  "_SC\022%\n\006result\030\001 \001(\0132\025.guild.stApplyForIt"
  "em\"U\n\032MSG_Req_GuildMemberList_CS\022\014\n\004page"
  "\030\001 \002(\r\022)\n\007reqtype\030\002 \001(\0162\030.guild.ReqMembe"
  "rListType\"\260\001\n\032MSG_Ret_GuildMemberList_SC"
  "\022#\n\tguildinfo\030\001 \001(\0132\020.guild.guildInfo\022#\n"
  "\007members\030\002 \003(\0132\022.guild.guildMember\022)\n\007re"
  "qtype\030\003 \001(\0162\030.guild.ReqMemberListType\022\014\n"
  "\004page\030\004 \001(\r\022\017\n\007allpage\030\005 \001(\r\"\031\n\027MSG_Req_"
  "IntoGuildMap_CS\" \n\036MSG_Req_CiTanEnemyGui"
  "ldList_CS\"r\n\023CiTanEnemyGuildItem\022\017\n\007guil"
  "did\030\001 \001(\004\022\022\n\nguildlevel\030\002 \001(\r\022\021\n\tguildna"
  "me\030\003 \001(\t\022\022\n\nmastername\030\004 \001(\t\022\017\n\007isvalid\030"
  "\005 \001(\r\"O\n\036MSG_Ret_CiTanEnemyGuildList_SC\022"
  "-\n\tguildlist\030\001 \003(\0132\032.guild.CiTanEnemyGui"
  "ldItem\"3\n MSG_Req_ChooseCiTanEnemyGuild_"
  "CS\022\017\n\007guildid\030\001 \001(\004\"\"\n MSG_Req_TargetCiT"
  "anEnemyGuild_CS\"N\n!MSG_Ret_ChoosedCiTanE"
  "nemyGuild_SC\022)\n\005guild\030\001 \001(\0132\032.guild.CiTa"
  "nEnemyGuildItem\" \n\036MSG_Req_IntoCiTanEnem"
  "yGuild_CS\"\037\n\035MSG_Req_CiTanBacktoMyGuild_"
  "CS\"Y\n\021GuildPositionInfo\022\022\n\npositionid\030\001 "
  "\001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007orderid\030\003 \001(\r\022\021\n\tpr"
  "ivilege\030\004 \001(\r\"H\n\033MSG_Req_AddGuildPositio"
  "n_CS\022)\n\007posinfo\030\001 \001(\0132\030.guild.GuildPosit"
  "ionInfo\"4\n\036MSG_Req_DeleteGuildPosition_C"
  "S\022\022\n\npositionid\030\001 \001(\r\"6\n\020SwapGuildPosInf"
  "o\022\021\n\tposidfrom\030\001 \001(\r\022\017\n\007posidto\030\002 \001(\r\"I\n"
  "\034MSG_Req_SwapGuildPosOrder_CS\022)\n\010swapinf"
  "o\030\001 \001(\0132\027.guild.SwapGuildPosInfo\"A\n\035MSG_"
  "Req_ChangePositionName_CS\022\022\n\npositionid\030"
  "\001 \001(\r\022\014\n\004name\030\002 \001(\t\"E\n\034MSG_Req_ChangePos"
  "itionPri_CS\022\022\n\npositionid\030\001 \001(\r\022\021\n\tprivi"
  "lege\030\002 \001(\r\"A\n\031MSG_Req_AssignPosition_CS\022"
  "\020\n\010memberid\030\001 \001(\004\022\022\n\npositionid\030\002 \001(\r\"A\n"
  "\031MSG_Ret_AssignPosition_SC\022\020\n\010memberid\030\001"
  " \001(\004\022\022\n\npositionid\030\002 \001(\r\"E\n\027MSG_Ret_Posi"
  "tionInfo_SC\022*\n\010posinfos\030\001 \003(\0132\030.guild.Gu"
  "ildPositionInfo\"\031\n\027MSG_Req_GuildLevelup_"
  "CS\"*\n\027MSG_Ret_GuildLevelup_SC\022\017\n\007retcode"
  "\030\001 \001(\r\"/\n\027MSG_Req_GuildSetInfo_CS\022\024\n\014gui"
  "ldsetinfo\030\001 \001(\t\"*\n\027MSG_Ret_GuildSetInfo_"
  "SC\022\017\n\007retcode\030\001 \001(\r\"0\n\032MSG_Ret_CheckDayW"
  "elfare_SC\022\022\n\ncanreceive\030\001 \001(\010\"\032\n\030MSG_Req"
  "_GetDayWelfare_CS\"+\n\030MSG_Ret_GetDayWelfa"
  "re_SC\022\017\n\007retcode\030\001 \001(\r\"*\n\025MSG_Req_GuildG"
  "oods_CS\022\021\n\tgoodstype\030\001 \001(\r\"L\n\tGoodsInfo\022"
  "\r\n\005tagid\030\001 \001(\r\022\016\n\006itemid\030\002 \001(\r\022\021\n\tsubmit"
  "num\030\003 \001(\r\022\r\n\005award\030\004 \001(\r\"\202\001\n\025MSG_Ret_Gui"
  "ldGoods_SC\022\037\n\005items\030\001 \003(\0132\020.guild.GoodsI"
  "nfo\022\023\n\013multireward\030\002 \001(\r\022\016\n\006remain\030\003 \001(\r"
  "\022\020\n\010nexttime\030\004 \001(\r\022\021\n\tgoodstype\030\005 \001(\r\"\?\n"
  "\033MSG_Req_SubmitGuildGoods_CS\022\r\n\005tagid\030\001 "
  "\001(\r\022\021\n\tgoodstype\030\002 \001(\r\"A\n\033MSG_Ret_Submit"
  "GuildGoods_SC\022\017\n\007retcode\030\001 \001(\r\022\021\n\tgoodst"
  "ype\030\002 \001(\r\"\026\n\024MSG_Req_QuitGuild_CS\"\'\n\024MSG"
  "_Ret_QuitGuild_SC\022\017\n\007retcode\030\001 \001(\r\"3\n\032MS"
  "G_Req_FireGuildMember_CS\022\025\n\rleavememberi"
  "d\030\001 \001(\t\"D\n\032MSG_Ret_FireGuildMember_SC\022\017\n"
  "\007retcode\030\001 \001(\r\022\025\n\rleavememberid\030\002 \001(\t\"\037\n"
  "\035MSG_Ret_BeFiredGuildMember_SC\".\n\026MSG_Re"
  "q_GuildInvite_CS\022\024\n\014joinmemberid\030\001 \001(\t\"V"
  "\n\026MSG_Ret_GuildInvite_SC\022\017\n\007retcode\030\001 \001("
  "\r\022\n\n\002id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\021\n\tguildname"
  "\030\004 \001(\t\"2\n\035MSG_Req_GuildInviteConfirm_CS\022"
  "\021\n\tinviterid\030\001 \001(\t\"0\n\035MSG_Ret_GuildInvit"
  "eConfirm_SC\022\017\n\007retcode\030\001 \001(\r\"\031\n\027MSG_Req_"
  "DismissGuild_CS\"*\n\027MSG_Ret_DismissGuild_"
  "SC\022\017\n\007retcode\030\001 \001(\r\"3\n\034MSG_Req_ChangeGui"
  "ldMaster_CS\022\023\n\013newmasterid\030\001 \001(\t\"/\n\034MSG_"
  "Ret_ChangeGuildMaster_SC\022\017\n\007retcode\030\001 \001("
  "\r\"[\n\nViceMaster\022\n\n\002id\030\001 \001(\t\022\r\n\005level\030\002 \001"
  "(\r\022\022\n\nfightvalue\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\022\020\n\010"
  "headicon\030\005 \001(\t\"\034\n\032MSG_Req_GuildViceMaste"
  "r_CS\"C\n\032MSG_Ret_GuildViceMaster_SC\022%\n\nvi"
  "cemaster\030\001 \003(\0132\021.guild.ViceMaster\"+\n\031MSG"
  "_Req_GuildExtension_CS\022\016\n\006isfree\030\001 \001(\010\"C"
  "\n\031MSG_Ret_GuildExtension_SC\022\025\n\rextension"
  "over\030\001 \001(\r\022\017\n\007retcode\030\002 \001(\r\"\030\n\026MSG_Req_O"
  "neKeyApply_CS\")\n\026MSG_Ret_OneKeyApply_SC\022"
  "\017\n\007retcode\030\001 \001(\r\"\034\n\032MSG_Req_RecrutCondit"
  "ion_CS\"a\n\031MSG_RetRecrutCondition_SC\022\022\n\nl"
  "evelvalid\030\001 \001(\010\022\022\n\nfightvalid\030\002 \001(\010\022\r\n\005l"
  "evel\030\003 \001(\r\022\r\n\005fight\030\004 \001(\r\"h\n MSG_Req_Mod"
  "ifyRecrutCondition_CS\022\022\n\nlevelvalid\030\001 \001("
  "\010\022\022\n\nfightvalid\030\002 \001(\010\022\r\n\005level\030\003 \001(\r\022\r\n\005"
  "fight\030\004 \001(\r\"\033\n\031MSG_Req_GuildTechnique_CS"
  "\"p\n\rTechniqueInfo\022\016\n\006techid\030\001 \001(\r\022\025\n\rper"
  "sonallevel\030\002 \001(\r\022\024\n\014developlevel\030\003 \001(\r\022\022"
  "\n\nvalidlevel\030\004 \001(\r\022\016\n\006unlock\030\005 \001(\010\"\?\n\031MS"
  "G_Ret_GuildTechnique_SC\022\"\n\004info\030\001 \003(\0132\024."
  "guild.TechniqueInfo\"-\n\033MSG_Req_Technique"
  "UpGrade_CS\022\016\n\006techid\030\001 \001(\r\".\n\033MSG_Ret_Te"
  "chniqueUpGrade_SC\022\017\n\007retcode\030\001 \001(\r\"E\n\037MS"
  "G_Ret_RefreshTechniqueInfo_SC\022\"\n\004info\030\001 "
  "\001(\0132\024.guild.TechniqueInfo\"-\n\033MSG_Req_Tec"
  "hniqueDevelop_CS\022\016\n\006techid\030\001 \001(\r\"-\n\033MSG_"
  "Ret_TechniqueDevelop_SC\022\016\n\006salary\030\001 \001(\r\""
  "#\n!MSG_Req_GuildPartyActivityInfo_CS\"6\n!"
  "MSG_Ret_GuildPartyActivityInfo_SC\022\021\n\tlef"
  "ttimes\030\001 \001(\r\"\034\n\032MSG_Req_StartGuildParty_"
  "CS\"4\n!MSG_Ret_GuildPartyActivityData_SC\022"
  "\017\n\007endtime\030\001 \001(\r\"Y\n\033MSG_Ret_FellowshipSu"
  "rvey_SC\022\022\n\nquestion_a\030\001 \001(\r\022\022\n\nquestion_"
  "b\030\002 \001(\r\022\022\n\nquestion_c\030\003 \001(\r\"\225\001\n!MSG_Req_"
  "SubmitFellowshipSurvey_CS\022\022\n\nquestion_a\030"
  "\001 \001(\r\022\022\n\nquestion_b\030\002 \001(\r\022\022\n\nquestion_c\030"
  "\003 \001(\r\022\020\n\010answer_a\030\004 \001(\r\022\020\n\010answer_b\030\005 \001("
  "\r\022\020\n\010answer_c\030\006 \001(\t\"\'\n\026MSG_ReqDonateSala"
  "ry_CS\022\r\n\005value\030\001 \001(\r\"J\n\026MSG_ReqUserCntDa"
  "ta_CSC\022!\n\004type\030\001 \001(\0162\023.guild.UserDataTyp"
  "e\022\r\n\005value\030\002 \001(\r\".\n\nguildSkill\022\017\n\007skilli"
  "d\030\001 \001(\r\022\017\n\007skilllv\030\002 \001(\r\"\027\n\025MSG_Req_Guil"
  "dSkill_CS\"=\n\025MSG_Ret_GuildSkill_SC\022$\n\tsk"
  "illinfo\030\001 \003(\0132\021.guild.guildSkill\"C\n\033MSG_"
  "Req_LearnGuildSkill_CSC\022$\n\tskillinfo\030\001 \001"
  "(\0132\021.guild.guildSkill*s\n\016GuildValueType\022"
  "\032\n\026GUILD_VALUE_CONTRIBUTE\020\001\022\026\n\022GUILD_VAL"
  "UE_SALARY\020\002\022\030\n\024GUILD_VALUE_VITALITY\020\003\022\023\n"
  "\017GUILD_VALUE_EXP\020\004*j\n\023GuildMemberPositio"
  "n\022\031\n\025GUILD_POSITION_MASTER\020\001\022\035\n\031GUILD_PO"
  "SITION_VICEMASTER\020\002\022\031\n\025GUILD_POSITION_NO"
  "RMAL\020c*>\n\013GuildStatus\022\026\n\022GUILD_STATUS_AP"
  "PLY\020\001\022\027\n\023GUILD_STATUS_NORMAL\020\002*\341\001\n\016Guild"
  "Privilege\022\034\n\030GUILDPRI_MANAGE_POSITION\020\001\022"
  "\032\n\026GUILDPRI_REMOVE_MEMBER\020\002\022 \n\034GUILDPRI_"
  "MODIFY_POSITIONNAME\020\004\022\032\n\026GUILDPRI_MODIFY"
  "_NOTIFY\020\010\022\037\n\033GUILDPRI_MANAGE_BUILDINGDEV"
  "\020\020\022\030\n\024GUILDPRI_ACCEPT_JOIN\020 \022\034\n\030GUILDPRI"
  "_ASSIGN_POSITION\020@*+\n\014UserDataType\022\033\n\027GU"
  "ILD_DAILY_COUNTRIBUTE\020\001*-\n\021ReqMemberList"
  "Type\022\n\n\006NORMAL\020\001\022\014\n\010APPLYFOR\020\002*M\n\021GuildB"
  "uildingType\022\032\n\026GuildBuildingType_Main\020\001\022"
  "\034\n\030GuildBuildingType_DaTing\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_guild_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_guild_2eproto_sccs[95] = {
  &scc_info_CiTanEnemyGuildItem_guild_2eproto.base,
  &scc_info_GoodsInfo_guild_2eproto.base,
  &scc_info_GuildPositionInfo_guild_2eproto.base,
  &scc_info_MSG_ReqDonateSalary_CS_guild_2eproto.base,
  &scc_info_MSG_ReqUserCntData_CSC_guild_2eproto.base,
  &scc_info_MSG_Req_AddGuildPosition_CS_guild_2eproto.base,
  &scc_info_MSG_Req_AnswerApplyForGuild_CS_guild_2eproto.base,
  &scc_info_MSG_Req_ApplyForGuild_CS_guild_2eproto.base,
  &scc_info_MSG_Req_AssignPosition_CS_guild_2eproto.base,
  &scc_info_MSG_Req_ChangeGuildMaster_CS_guild_2eproto.base,
  &scc_info_MSG_Req_ChangePositionName_CS_guild_2eproto.base,
  &scc_info_MSG_Req_ChangePositionPri_CS_guild_2eproto.base,
  &scc_info_MSG_Req_ChooseCiTanEnemyGuild_CS_guild_2eproto.base,
  &scc_info_MSG_Req_CiTanBacktoMyGuild_CS_guild_2eproto.base,
  &scc_info_MSG_Req_CiTanEnemyGuildList_CS_guild_2eproto.base,
  &scc_info_MSG_Req_CreateGuild_CS_guild_2eproto.base,
  &scc_info_MSG_Req_DeleteGuildPosition_CS_guild_2eproto.base,
  &scc_info_MSG_Req_DismissGuild_CS_guild_2eproto.base,
  &scc_info_MSG_Req_FireGuildMember_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GetDayWelfare_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildExtension_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildGoods_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildInfo_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildInviteConfirm_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildInvite_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildLevelup_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildList_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildMemberList_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildPartyActivityInfo_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildSetInfo_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildSkill_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildTechnique_CS_guild_2eproto.base,
  &scc_info_MSG_Req_GuildViceMaster_CS_guild_2eproto.base,
  &scc_info_MSG_Req_IntoCiTanEnemyGuild_CS_guild_2eproto.base,
  &scc_info_MSG_Req_IntoGuildMap_CS_guild_2eproto.base,
  &scc_info_MSG_Req_LearnGuildSkill_CSC_guild_2eproto.base,
  &scc_info_MSG_Req_ModifyRecrutCondition_CS_guild_2eproto.base,
  &scc_info_MSG_Req_OneKeyApply_CS_guild_2eproto.base,
  &scc_info_MSG_Req_PreCreateGuild_CS_guild_2eproto.base,
  &scc_info_MSG_Req_QuitGuild_CS_guild_2eproto.base,
  &scc_info_MSG_Req_RecrutCondition_CS_guild_2eproto.base,
  &scc_info_MSG_Req_SetGuildNotify_CS_guild_2eproto.base,
  &scc_info_MSG_Req_StartGuildParty_CS_guild_2eproto.base,
  &scc_info_MSG_Req_SubmitFellowshipSurvey_CS_guild_2eproto.base,
  &scc_info_MSG_Req_SubmitGuildGoods_CS_guild_2eproto.base,
  &scc_info_MSG_Req_SwapGuildPosOrder_CS_guild_2eproto.base,
  &scc_info_MSG_Req_TargetCiTanEnemyGuild_CS_guild_2eproto.base,
  &scc_info_MSG_Req_TechniqueDevelop_CS_guild_2eproto.base,
  &scc_info_MSG_Req_TechniqueUpGrade_CS_guild_2eproto.base,
  &scc_info_MSG_RetRecrutCondition_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_AnswerApplyForGuild_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_ApplyForGuild_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_AssignPosition_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_BeFiredGuildMember_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_ChangeGuildMaster_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_CheckDayWelfare_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_ChoosedCiTanEnemyGuild_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_CiTanEnemyGuildList_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_CreateGuild_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_DismissGuild_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_FellowshipSurvey_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_FireGuildMember_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GetDayWelfare_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildExtension_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildGoods_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildInfo_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildInviteConfirm_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildInvite_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildLevelup_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildList_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildMemberList_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildPartyActivityData_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildPartyActivityInfo_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildSetInfo_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildSkill_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildTechnique_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_GuildViceMaster_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_MyGuildApply_Result_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_OneKeyApply_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_PositionInfo_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_PreCreateGuild_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_QuitGuild_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_RefreshTechniqueInfo_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_SetGuildNotify_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_SubmitGuildGoods_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_TechniqueDevelop_SC_guild_2eproto.base,
  &scc_info_MSG_Ret_TechniqueUpGrade_SC_guild_2eproto.base,
  &scc_info_SwapGuildPosInfo_guild_2eproto.base,
  &scc_info_TechniqueInfo_guild_2eproto.base,
  &scc_info_ViceMaster_guild_2eproto.base,
  &scc_info_guildInfo_guild_2eproto.base,
  &scc_info_guildListItem_guild_2eproto.base,
  &scc_info_guildMember_guild_2eproto.base,
  &scc_info_guildSkill_guild_2eproto.base,
  &scc_info_stApplyForItem_guild_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_guild_2eproto_once;
static bool descriptor_table_guild_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_guild_2eproto = {
  &descriptor_table_guild_2eproto_initialized, descriptor_table_protodef_guild_2eproto, "guild.proto", 7069,
  &descriptor_table_guild_2eproto_once, descriptor_table_guild_2eproto_sccs, descriptor_table_guild_2eproto_deps, 95, 0,
  schemas, file_default_instances, TableStruct_guild_2eproto::offsets,
  file_level_metadata_guild_2eproto, 95, file_level_enum_descriptors_guild_2eproto, file_level_service_descriptors_guild_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_guild_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_guild_2eproto)), true);
namespace guild {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuildValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_guild_2eproto);
  return file_level_enum_descriptors_guild_2eproto[0];
}
bool GuildValueType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuildMemberPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_guild_2eproto);
  return file_level_enum_descriptors_guild_2eproto[1];
}
bool GuildMemberPosition_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuildStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_guild_2eproto);
  return file_level_enum_descriptors_guild_2eproto[2];
}
bool GuildStatus_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuildPrivilege_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_guild_2eproto);
  return file_level_enum_descriptors_guild_2eproto[3];
}
bool GuildPrivilege_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_guild_2eproto);
  return file_level_enum_descriptors_guild_2eproto[4];
}
bool UserDataType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqMemberListType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_guild_2eproto);
  return file_level_enum_descriptors_guild_2eproto[5];
}
bool ReqMemberListType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GuildBuildingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_guild_2eproto);
  return file_level_enum_descriptors_guild_2eproto[6];
}
bool GuildBuildingType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void guildMember::InitAsDefaultInstance() {
}
class guildMember::_Internal {
 public:
  using HasBits = decltype(std::declval<guildMember>()._has_bits_);
  static void set_has_memberid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_membername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_memberlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_memberstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contribute(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_donatesalary(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_isonline(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lastonlinetime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_career(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_positionid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_applytime(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

guildMember::guildMember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.guildMember)
}
guildMember::guildMember(const guildMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  membername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_membername()) {
    membername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.membername_);
  }
  ::memcpy(&memberid_, &from.memberid_,
    static_cast<size_t>(reinterpret_cast<char*>(&applytime_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(applytime_));
  // @@protoc_insertion_point(copy_constructor:guild.guildMember)
}

void guildMember::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_guildMember_guild_2eproto.base);
  membername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&applytime_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(applytime_));
}

guildMember::~guildMember() {
  // @@protoc_insertion_point(destructor:guild.guildMember)
  SharedDtor();
}

void guildMember::SharedDtor() {
  membername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void guildMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const guildMember& guildMember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_guildMember_guild_2eproto.base);
  return *internal_default_instance();
}


void guildMember::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.guildMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    membername_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&memberid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastonlinetime_) -
        reinterpret_cast<char*>(&memberid_)) + sizeof(lastonlinetime_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&career_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&applytime_) -
        reinterpret_cast<char*>(&career_)) + sizeof(applytime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* guildMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 memberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_memberid(&has_bits);
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string membername = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_membername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.guildMember.membername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 memberlevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_memberlevel(&has_bits);
          memberlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 memberstatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_memberstatus(&has_bits);
          memberstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 contribute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_contribute(&has_bits);
          contribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 donatesalary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_donatesalary(&has_bits);
          donatesalary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isonline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_isonline(&has_bits);
          isonline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lastonlinetime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_lastonlinetime(&has_bits);
          lastonlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 career = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_career(&has_bits);
          career_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 positionid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_positionid(&has_bits);
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 applytime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_applytime(&has_bits);
          applytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* guildMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.guildMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 memberid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memberid(), target);
  }

  // optional string membername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_membername().data(), static_cast<int>(this->_internal_membername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.guildMember.membername");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_membername(), target);
  }

  // optional uint32 memberlevel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_memberlevel(), target);
  }

  // optional uint32 memberstatus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_memberstatus(), target);
  }

  // optional uint32 contribute = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_contribute(), target);
  }

  // optional uint32 donatesalary = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_donatesalary(), target);
  }

  // optional bool isonline = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_isonline(), target);
  }

  // optional uint32 lastonlinetime = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_lastonlinetime(), target);
  }

  // optional uint32 career = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_career(), target);
  }

  // optional uint32 positionid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_positionid(), target);
  }

  // optional uint32 applytime = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_applytime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.guildMember)
  return target;
}

size_t guildMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.guildMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string membername = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_membername());
    }

    // optional uint64 memberid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_memberid());
    }

    // optional uint32 memberlevel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_memberlevel());
    }

    // optional uint32 memberstatus = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_memberstatus());
    }

    // optional uint32 contribute = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contribute());
    }

    // optional uint32 donatesalary = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_donatesalary());
    }

    // optional bool isonline = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 lastonlinetime = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lastonlinetime());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 career = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_career());
    }

    // optional uint32 positionid = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_positionid());
    }

    // optional uint32 applytime = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_applytime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void guildMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.guildMember)
  GOOGLE_DCHECK_NE(&from, this);
  const guildMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<guildMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.guildMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.guildMember)
    MergeFrom(*source);
  }
}

void guildMember::MergeFrom(const guildMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.guildMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      membername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.membername_);
    }
    if (cached_has_bits & 0x00000002u) {
      memberid_ = from.memberid_;
    }
    if (cached_has_bits & 0x00000004u) {
      memberlevel_ = from.memberlevel_;
    }
    if (cached_has_bits & 0x00000008u) {
      memberstatus_ = from.memberstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      contribute_ = from.contribute_;
    }
    if (cached_has_bits & 0x00000020u) {
      donatesalary_ = from.donatesalary_;
    }
    if (cached_has_bits & 0x00000040u) {
      isonline_ = from.isonline_;
    }
    if (cached_has_bits & 0x00000080u) {
      lastonlinetime_ = from.lastonlinetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      career_ = from.career_;
    }
    if (cached_has_bits & 0x00000200u) {
      positionid_ = from.positionid_;
    }
    if (cached_has_bits & 0x00000400u) {
      applytime_ = from.applytime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void guildMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.guildMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildMember::CopyFrom(const guildMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.guildMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildMember::IsInitialized() const {
  return true;
}

void guildMember::InternalSwap(guildMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  membername_.Swap(&other->membername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(memberid_, other->memberid_);
  swap(memberlevel_, other->memberlevel_);
  swap(memberstatus_, other->memberstatus_);
  swap(contribute_, other->contribute_);
  swap(donatesalary_, other->donatesalary_);
  swap(isonline_, other->isonline_);
  swap(lastonlinetime_, other->lastonlinetime_);
  swap(career_, other->career_);
  swap(positionid_, other->positionid_);
  swap(applytime_, other->applytime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata guildMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void guildInfo::InitAsDefaultInstance() {
}
class guildInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<guildInfo>()._has_bits_);
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_guildname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guildlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mastername(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_nextexp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_salary(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sumcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_onlinecount(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_countlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_notify(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_countryid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_guildsetinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lastactive(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_lastcountlimit(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_salary_rest_day(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

guildInfo::guildInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.guildInfo)
}
guildInfo::guildInfo(const guildInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      posinfo_(from.posinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildname()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  mastername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mastername()) {
    mastername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mastername_);
  }
  notify_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notify()) {
    notify_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notify_);
  }
  guildsetinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildsetinfo()) {
    guildsetinfo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildsetinfo_);
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon()) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&salary_rest_day_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(salary_rest_day_));
  // @@protoc_insertion_point(copy_constructor:guild.guildInfo)
}

void guildInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_guildInfo_guild_2eproto.base);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mastername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notify_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guildsetinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guildid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&salary_rest_day_) -
      reinterpret_cast<char*>(&guildid_)) + sizeof(salary_rest_day_));
}

guildInfo::~guildInfo() {
  // @@protoc_insertion_point(destructor:guild.guildInfo)
  SharedDtor();
}

void guildInfo::SharedDtor() {
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mastername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notify_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guildsetinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void guildInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const guildInfo& guildInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_guildInfo_guild_2eproto.base);
  return *internal_default_instance();
}


void guildInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.guildInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  posinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      guildname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mastername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      notify_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      guildsetinfo_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      icon_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&guildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&guildid_)) + sizeof(active_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&exp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_) -
        reinterpret_cast<char*>(&exp_)) + sizeof(rank_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&lastactive_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&salary_rest_day_) -
        reinterpret_cast<char*>(&lastactive_)) + sizeof(salary_rest_day_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* guildInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 guildid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guildname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.guildInfo.guildname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guildlevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_guildlevel(&has_bits);
          guildlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mastername = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mastername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.guildInfo.mastername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 exp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nextexp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_nextexp(&has_bits);
          nextexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 salary = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_salary(&has_bits);
          salary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sumcount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_sumcount(&has_bits);
          sumcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 onlinecount = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_onlinecount(&has_bits);
          onlinecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 countlimit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_countlimit(&has_bits);
          countlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string notify = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_notify();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.guildInfo.notify");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 countryid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_countryid(&has_bits);
          countryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .guild.GuildPositionInfo posinfo = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string guildsetinfo = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_guildsetinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.guildInfo.guildsetinfo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lastactive = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_lastactive(&has_bits);
          lastactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lastcountlimit = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_lastcountlimit(&has_bits);
          lastcountlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string icon = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.guildInfo.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 salary_rest_day = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_salary_rest_day(&has_bits);
          salary_rest_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* guildInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.guildInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guildid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guildid(), target);
  }

  // optional string guildname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.guildInfo.guildname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_guildname(), target);
  }

  // optional uint32 guildlevel = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guildlevel(), target);
  }

  // optional uint32 active = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_active(), target);
  }

  // optional string mastername = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mastername().data(), static_cast<int>(this->_internal_mastername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.guildInfo.mastername");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mastername(), target);
  }

  // optional uint32 exp = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_exp(), target);
  }

  // optional uint32 nextexp = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_nextexp(), target);
  }

  // optional uint32 salary = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_salary(), target);
  }

  // optional uint32 sumcount = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sumcount(), target);
  }

  // optional uint32 onlinecount = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_onlinecount(), target);
  }

  // optional uint32 countlimit = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_countlimit(), target);
  }

  // optional string notify = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notify().data(), static_cast<int>(this->_internal_notify().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.guildInfo.notify");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_notify(), target);
  }

  // optional uint32 countryid = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_countryid(), target);
  }

  // optional uint32 rank = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rank(), target);
  }

  // repeated .guild.GuildPositionInfo posinfo = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_posinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_posinfo(i), target, stream);
  }

  // optional string guildsetinfo = 16;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildsetinfo().data(), static_cast<int>(this->_internal_guildsetinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.guildInfo.guildsetinfo");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_guildsetinfo(), target);
  }

  // optional uint32 lastactive = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_lastactive(), target);
  }

  // optional uint32 lastcountlimit = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_lastcountlimit(), target);
  }

  // optional string icon = 19;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.guildInfo.icon");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_icon(), target);
  }

  // optional uint32 salary_rest_day = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_salary_rest_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.guildInfo)
  return target;
}

size_t guildInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.guildInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.GuildPositionInfo posinfo = 15;
  total_size += 1UL * this->_internal_posinfo_size();
  for (const auto& msg : this->posinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string guildname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildname());
    }

    // optional string mastername = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mastername());
    }

    // optional string notify = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notify());
    }

    // optional string guildsetinfo = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildsetinfo());
    }

    // optional string icon = 19;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional uint64 guildid = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guildid());
    }

    // optional uint32 guildlevel = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guildlevel());
    }

    // optional uint32 active = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_active());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 exp = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_exp());
    }

    // optional uint32 nextexp = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nextexp());
    }

    // optional uint32 salary = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_salary());
    }

    // optional uint32 sumcount = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sumcount());
    }

    // optional uint32 onlinecount = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_onlinecount());
    }

    // optional uint32 countlimit = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_countlimit());
    }

    // optional uint32 countryid = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_countryid());
    }

    // optional uint32 rank = 14;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint32 lastactive = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lastactive());
    }

    // optional uint32 lastcountlimit = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lastcountlimit());
    }

    // optional uint32 salary_rest_day = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_salary_rest_day());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void guildInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.guildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const guildInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<guildInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.guildInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.guildInfo)
    MergeFrom(*source);
  }
}

void guildInfo::MergeFrom(const guildInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.guildInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  posinfo_.MergeFrom(from.posinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mastername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mastername_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      notify_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notify_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      guildsetinfo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildsetinfo_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000020u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000040u) {
      guildlevel_ = from.guildlevel_;
    }
    if (cached_has_bits & 0x00000080u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000200u) {
      nextexp_ = from.nextexp_;
    }
    if (cached_has_bits & 0x00000400u) {
      salary_ = from.salary_;
    }
    if (cached_has_bits & 0x00000800u) {
      sumcount_ = from.sumcount_;
    }
    if (cached_has_bits & 0x00001000u) {
      onlinecount_ = from.onlinecount_;
    }
    if (cached_has_bits & 0x00002000u) {
      countlimit_ = from.countlimit_;
    }
    if (cached_has_bits & 0x00004000u) {
      countryid_ = from.countryid_;
    }
    if (cached_has_bits & 0x00008000u) {
      rank_ = from.rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      lastactive_ = from.lastactive_;
    }
    if (cached_has_bits & 0x00020000u) {
      lastcountlimit_ = from.lastcountlimit_;
    }
    if (cached_has_bits & 0x00040000u) {
      salary_rest_day_ = from.salary_rest_day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void guildInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.guildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildInfo::CopyFrom(const guildInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.guildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildInfo::IsInitialized() const {
  return true;
}

void guildInfo::InternalSwap(guildInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  posinfo_.InternalSwap(&other->posinfo_);
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mastername_.Swap(&other->mastername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notify_.Swap(&other->notify_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guildsetinfo_.Swap(&other->guildsetinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guildid_, other->guildid_);
  swap(guildlevel_, other->guildlevel_);
  swap(active_, other->active_);
  swap(exp_, other->exp_);
  swap(nextexp_, other->nextexp_);
  swap(salary_, other->salary_);
  swap(sumcount_, other->sumcount_);
  swap(onlinecount_, other->onlinecount_);
  swap(countlimit_, other->countlimit_);
  swap(countryid_, other->countryid_);
  swap(rank_, other->rank_);
  swap(lastactive_, other->lastactive_);
  swap(lastcountlimit_, other->lastcountlimit_);
  swap(salary_rest_day_, other->salary_rest_day_);
}

::PROTOBUF_NAMESPACE_ID::Metadata guildInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_PreCreateGuild_CS::InitAsDefaultInstance() {
}
class MSG_Req_PreCreateGuild_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_PreCreateGuild_CS>()._has_bits_);
};

MSG_Req_PreCreateGuild_CS::MSG_Req_PreCreateGuild_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_PreCreateGuild_CS)
}
MSG_Req_PreCreateGuild_CS::MSG_Req_PreCreateGuild_CS(const MSG_Req_PreCreateGuild_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_PreCreateGuild_CS)
}

void MSG_Req_PreCreateGuild_CS::SharedCtor() {
}

MSG_Req_PreCreateGuild_CS::~MSG_Req_PreCreateGuild_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_PreCreateGuild_CS)
  SharedDtor();
}

void MSG_Req_PreCreateGuild_CS::SharedDtor() {
}

void MSG_Req_PreCreateGuild_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_PreCreateGuild_CS& MSG_Req_PreCreateGuild_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_PreCreateGuild_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_PreCreateGuild_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_PreCreateGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_PreCreateGuild_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_PreCreateGuild_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_PreCreateGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_PreCreateGuild_CS)
  return target;
}

size_t MSG_Req_PreCreateGuild_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_PreCreateGuild_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_PreCreateGuild_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_PreCreateGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_PreCreateGuild_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_PreCreateGuild_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_PreCreateGuild_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_PreCreateGuild_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_PreCreateGuild_CS::MergeFrom(const MSG_Req_PreCreateGuild_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_PreCreateGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_PreCreateGuild_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_PreCreateGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_PreCreateGuild_CS::CopyFrom(const MSG_Req_PreCreateGuild_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_PreCreateGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_PreCreateGuild_CS::IsInitialized() const {
  return true;
}

void MSG_Req_PreCreateGuild_CS::InternalSwap(MSG_Req_PreCreateGuild_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_PreCreateGuild_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_PreCreateGuild_SC::InitAsDefaultInstance() {
}
class MSG_Ret_PreCreateGuild_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_PreCreateGuild_SC>()._has_bits_);
  static void set_has_cost_objid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cost_objnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_PreCreateGuild_SC::MSG_Ret_PreCreateGuild_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_PreCreateGuild_SC)
}
MSG_Ret_PreCreateGuild_SC::MSG_Ret_PreCreateGuild_SC(const MSG_Ret_PreCreateGuild_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cost_objid_, &from.cost_objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cost_objnum_) -
    reinterpret_cast<char*>(&cost_objid_)) + sizeof(cost_objnum_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_PreCreateGuild_SC)
}

void MSG_Ret_PreCreateGuild_SC::SharedCtor() {
  ::memset(&cost_objid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_objnum_) -
      reinterpret_cast<char*>(&cost_objid_)) + sizeof(cost_objnum_));
}

MSG_Ret_PreCreateGuild_SC::~MSG_Ret_PreCreateGuild_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_PreCreateGuild_SC)
  SharedDtor();
}

void MSG_Ret_PreCreateGuild_SC::SharedDtor() {
}

void MSG_Ret_PreCreateGuild_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_PreCreateGuild_SC& MSG_Ret_PreCreateGuild_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_PreCreateGuild_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_PreCreateGuild_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_PreCreateGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cost_objid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cost_objnum_) -
        reinterpret_cast<char*>(&cost_objid_)) + sizeof(cost_objnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_PreCreateGuild_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cost_objid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cost_objid(&has_bits);
          cost_objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cost_objnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cost_objnum(&has_bits);
          cost_objnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_PreCreateGuild_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_PreCreateGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cost_objid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cost_objid(), target);
  }

  // optional uint32 cost_objnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cost_objnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_PreCreateGuild_SC)
  return target;
}

size_t MSG_Ret_PreCreateGuild_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_PreCreateGuild_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 cost_objid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cost_objid());
    }

    // optional uint32 cost_objnum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cost_objnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_PreCreateGuild_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_PreCreateGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_PreCreateGuild_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_PreCreateGuild_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_PreCreateGuild_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_PreCreateGuild_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_PreCreateGuild_SC::MergeFrom(const MSG_Ret_PreCreateGuild_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_PreCreateGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cost_objid_ = from.cost_objid_;
    }
    if (cached_has_bits & 0x00000002u) {
      cost_objnum_ = from.cost_objnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_PreCreateGuild_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_PreCreateGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_PreCreateGuild_SC::CopyFrom(const MSG_Ret_PreCreateGuild_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_PreCreateGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_PreCreateGuild_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_PreCreateGuild_SC::InternalSwap(MSG_Ret_PreCreateGuild_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cost_objid_, other->cost_objid_);
  swap(cost_objnum_, other->cost_objnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_PreCreateGuild_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CreateGuild_CS::InitAsDefaultInstance() {
}
class MSG_Req_CreateGuild_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CreateGuild_CS>()._has_bits_);
  static void set_has_guildname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_CreateGuild_CS::MSG_Req_CreateGuild_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_CreateGuild_CS)
}
MSG_Req_CreateGuild_CS::MSG_Req_CreateGuild_CS(const MSG_Req_CreateGuild_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildname()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_icon()) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_CreateGuild_CS)
}

void MSG_Req_CreateGuild_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_CreateGuild_CS_guild_2eproto.base);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Req_CreateGuild_CS::~MSG_Req_CreateGuild_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_CreateGuild_CS)
  SharedDtor();
}

void MSG_Req_CreateGuild_CS::SharedDtor() {
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_CreateGuild_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CreateGuild_CS& MSG_Req_CreateGuild_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CreateGuild_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CreateGuild_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_CreateGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guildname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CreateGuild_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string guildname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Req_CreateGuild_CS.guildname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Req_CreateGuild_CS.icon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CreateGuild_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_CreateGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guildname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Req_CreateGuild_CS.guildname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guildname(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Req_CreateGuild_CS.icon");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_CreateGuild_CS)
  return target;
}

size_t MSG_Req_CreateGuild_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_CreateGuild_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string guildname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildname());
    }

    // optional string icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CreateGuild_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_CreateGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CreateGuild_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CreateGuild_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_CreateGuild_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_CreateGuild_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CreateGuild_CS::MergeFrom(const MSG_Req_CreateGuild_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_CreateGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
  }
}

void MSG_Req_CreateGuild_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_CreateGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CreateGuild_CS::CopyFrom(const MSG_Req_CreateGuild_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_CreateGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CreateGuild_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CreateGuild_CS::InternalSwap(MSG_Req_CreateGuild_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CreateGuild_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CreateGuild_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CreateGuild_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CreateGuild_SC>()._has_bits_);
  static void set_has_guildname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_issucc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_CreateGuild_SC::MSG_Ret_CreateGuild_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_CreateGuild_SC)
}
MSG_Ret_CreateGuild_SC::MSG_Ret_CreateGuild_SC(const MSG_Ret_CreateGuild_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildname()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  issucc_ = from.issucc_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_CreateGuild_SC)
}

void MSG_Ret_CreateGuild_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_CreateGuild_SC_guild_2eproto.base);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issucc_ = false;
}

MSG_Ret_CreateGuild_SC::~MSG_Ret_CreateGuild_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_CreateGuild_SC)
  SharedDtor();
}

void MSG_Ret_CreateGuild_SC::SharedDtor() {
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_CreateGuild_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CreateGuild_SC& MSG_Ret_CreateGuild_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CreateGuild_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CreateGuild_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_CreateGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guildname_.ClearNonDefaultToEmptyNoArena();
  }
  issucc_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CreateGuild_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string guildname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Ret_CreateGuild_SC.guildname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool issucc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_issucc(&has_bits);
          issucc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CreateGuild_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_CreateGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guildname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Ret_CreateGuild_SC.guildname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guildname(), target);
  }

  // optional bool issucc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_issucc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_CreateGuild_SC)
  return target;
}

size_t MSG_Ret_CreateGuild_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_CreateGuild_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string guildname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildname());
    }

    // optional bool issucc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CreateGuild_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_CreateGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CreateGuild_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CreateGuild_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_CreateGuild_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_CreateGuild_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CreateGuild_SC::MergeFrom(const MSG_Ret_CreateGuild_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_CreateGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000002u) {
      issucc_ = from.issucc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_CreateGuild_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_CreateGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CreateGuild_SC::CopyFrom(const MSG_Ret_CreateGuild_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_CreateGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CreateGuild_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CreateGuild_SC::InternalSwap(MSG_Ret_CreateGuild_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(issucc_, other->issucc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CreateGuild_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_SetGuildNotify_CS::InitAsDefaultInstance() {
}
class MSG_Req_SetGuildNotify_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_SetGuildNotify_CS>()._has_bits_);
  static void set_has_notify(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_SetGuildNotify_CS::MSG_Req_SetGuildNotify_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_SetGuildNotify_CS)
}
MSG_Req_SetGuildNotify_CS::MSG_Req_SetGuildNotify_CS(const MSG_Req_SetGuildNotify_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notify_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notify()) {
    notify_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notify_);
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_SetGuildNotify_CS)
}

void MSG_Req_SetGuildNotify_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_SetGuildNotify_CS_guild_2eproto.base);
  notify_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Req_SetGuildNotify_CS::~MSG_Req_SetGuildNotify_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_SetGuildNotify_CS)
  SharedDtor();
}

void MSG_Req_SetGuildNotify_CS::SharedDtor() {
  notify_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_SetGuildNotify_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_SetGuildNotify_CS& MSG_Req_SetGuildNotify_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_SetGuildNotify_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_SetGuildNotify_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_SetGuildNotify_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    notify_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_SetGuildNotify_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string notify = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_notify();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Req_SetGuildNotify_CS.notify");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_SetGuildNotify_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_SetGuildNotify_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notify = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notify().data(), static_cast<int>(this->_internal_notify().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Req_SetGuildNotify_CS.notify");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_notify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_SetGuildNotify_CS)
  return target;
}

size_t MSG_Req_SetGuildNotify_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_SetGuildNotify_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string notify = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notify());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_SetGuildNotify_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_SetGuildNotify_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_SetGuildNotify_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_SetGuildNotify_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_SetGuildNotify_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_SetGuildNotify_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_SetGuildNotify_CS::MergeFrom(const MSG_Req_SetGuildNotify_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_SetGuildNotify_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_notify()) {
    _has_bits_[0] |= 0x00000001u;
    notify_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notify_);
  }
}

void MSG_Req_SetGuildNotify_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_SetGuildNotify_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_SetGuildNotify_CS::CopyFrom(const MSG_Req_SetGuildNotify_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_SetGuildNotify_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_SetGuildNotify_CS::IsInitialized() const {
  return true;
}

void MSG_Req_SetGuildNotify_CS::InternalSwap(MSG_Req_SetGuildNotify_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notify_.Swap(&other->notify_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_SetGuildNotify_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_SetGuildNotify_SC::InitAsDefaultInstance() {
}
class MSG_Ret_SetGuildNotify_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_SetGuildNotify_SC>()._has_bits_);
  static void set_has_issucc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_SetGuildNotify_SC::MSG_Ret_SetGuildNotify_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_SetGuildNotify_SC)
}
MSG_Ret_SetGuildNotify_SC::MSG_Ret_SetGuildNotify_SC(const MSG_Ret_SetGuildNotify_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issucc_ = from.issucc_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_SetGuildNotify_SC)
}

void MSG_Ret_SetGuildNotify_SC::SharedCtor() {
  issucc_ = false;
}

MSG_Ret_SetGuildNotify_SC::~MSG_Ret_SetGuildNotify_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_SetGuildNotify_SC)
  SharedDtor();
}

void MSG_Ret_SetGuildNotify_SC::SharedDtor() {
}

void MSG_Ret_SetGuildNotify_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_SetGuildNotify_SC& MSG_Ret_SetGuildNotify_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_SetGuildNotify_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_SetGuildNotify_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_SetGuildNotify_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  issucc_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_SetGuildNotify_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool issucc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_issucc(&has_bits);
          issucc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_SetGuildNotify_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_SetGuildNotify_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool issucc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_issucc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_SetGuildNotify_SC)
  return target;
}

size_t MSG_Ret_SetGuildNotify_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_SetGuildNotify_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool issucc = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_SetGuildNotify_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_SetGuildNotify_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_SetGuildNotify_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_SetGuildNotify_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_SetGuildNotify_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_SetGuildNotify_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_SetGuildNotify_SC::MergeFrom(const MSG_Ret_SetGuildNotify_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_SetGuildNotify_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_issucc()) {
    _internal_set_issucc(from._internal_issucc());
  }
}

void MSG_Ret_SetGuildNotify_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_SetGuildNotify_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_SetGuildNotify_SC::CopyFrom(const MSG_Ret_SetGuildNotify_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_SetGuildNotify_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_SetGuildNotify_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_SetGuildNotify_SC::InternalSwap(MSG_Ret_SetGuildNotify_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(issucc_, other->issucc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_SetGuildNotify_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildInfo_CS>()._has_bits_);
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_GuildInfo_CS::MSG_Req_GuildInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildInfo_CS)
}
MSG_Req_GuildInfo_CS::MSG_Req_GuildInfo_CS(const MSG_Req_GuildInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildid_ = from.guildid_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildInfo_CS)
}

void MSG_Req_GuildInfo_CS::SharedCtor() {
  guildid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Req_GuildInfo_CS::~MSG_Req_GuildInfo_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildInfo_CS)
  SharedDtor();
}

void MSG_Req_GuildInfo_CS::SharedDtor() {
}

void MSG_Req_GuildInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildInfo_CS& MSG_Req_GuildInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildInfo_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guildid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 guildid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guildid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guildid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildInfo_CS)
  return target;
}

size_t MSG_Req_GuildInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 guildid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guildid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildInfo_CS::MergeFrom(const MSG_Req_GuildInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guildid()) {
    _internal_set_guildid(from._internal_guildid());
  }
}

void MSG_Req_GuildInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildInfo_CS::CopyFrom(const MSG_Req_GuildInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildInfo_CS::InternalSwap(MSG_Req_GuildInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guildid_, other->guildid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildInfo_SC::InitAsDefaultInstance() {
  ::guild::_MSG_Ret_GuildInfo_SC_default_instance_._instance.get_mutable()->guildinfo_ = const_cast< ::guild::guildInfo*>(
      ::guild::guildInfo::internal_default_instance());
  ::guild::_MSG_Ret_GuildInfo_SC_default_instance_._instance.get_mutable()->myinfo_ = const_cast< ::guild::guildMember*>(
      ::guild::guildMember::internal_default_instance());
}
class MSG_Ret_GuildInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildInfo_SC>()._has_bits_);
  static const ::guild::guildInfo& guildinfo(const MSG_Ret_GuildInfo_SC* msg);
  static void set_has_guildinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::guild::guildMember& myinfo(const MSG_Ret_GuildInfo_SC* msg);
  static void set_has_myinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::guild::guildInfo&
MSG_Ret_GuildInfo_SC::_Internal::guildinfo(const MSG_Ret_GuildInfo_SC* msg) {
  return *msg->guildinfo_;
}
const ::guild::guildMember&
MSG_Ret_GuildInfo_SC::_Internal::myinfo(const MSG_Ret_GuildInfo_SC* msg) {
  return *msg->myinfo_;
}
MSG_Ret_GuildInfo_SC::MSG_Ret_GuildInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildInfo_SC)
}
MSG_Ret_GuildInfo_SC::MSG_Ret_GuildInfo_SC(const MSG_Ret_GuildInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_guildinfo()) {
    guildinfo_ = new ::guild::guildInfo(*from.guildinfo_);
  } else {
    guildinfo_ = nullptr;
  }
  if (from._internal_has_myinfo()) {
    myinfo_ = new ::guild::guildMember(*from.myinfo_);
  } else {
    myinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildInfo_SC)
}

void MSG_Ret_GuildInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildInfo_SC_guild_2eproto.base);
  ::memset(&guildinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&myinfo_) -
      reinterpret_cast<char*>(&guildinfo_)) + sizeof(myinfo_));
}

MSG_Ret_GuildInfo_SC::~MSG_Ret_GuildInfo_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildInfo_SC)
  SharedDtor();
}

void MSG_Ret_GuildInfo_SC::SharedDtor() {
  if (this != internal_default_instance()) delete guildinfo_;
  if (this != internal_default_instance()) delete myinfo_;
}

void MSG_Ret_GuildInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildInfo_SC& MSG_Ret_GuildInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildInfo_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(guildinfo_ != nullptr);
      guildinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(myinfo_ != nullptr);
      myinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guild.guildInfo guildinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .guild.guildMember myinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_myinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guild.guildInfo guildinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::guildinfo(this), target, stream);
  }

  // optional .guild.guildMember myinfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::myinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildInfo_SC)
  return target;
}

size_t MSG_Ret_GuildInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .guild.guildInfo guildinfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *guildinfo_);
    }

    // optional .guild.guildMember myinfo = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *myinfo_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildInfo_SC::MergeFrom(const MSG_Ret_GuildInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_guildinfo()->::guild::guildInfo::MergeFrom(from._internal_guildinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_myinfo()->::guild::guildMember::MergeFrom(from._internal_myinfo());
    }
  }
}

void MSG_Ret_GuildInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildInfo_SC::CopyFrom(const MSG_Ret_GuildInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildInfo_SC::InternalSwap(MSG_Ret_GuildInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guildinfo_, other->guildinfo_);
  swap(myinfo_, other->myinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildList_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildList_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildList_CS>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_countryid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_GuildList_CS::MSG_Req_GuildList_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildList_CS)
}
MSG_Req_GuildList_CS::MSG_Req_GuildList_CS(const MSG_Req_GuildList_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&countryid_) -
    reinterpret_cast<char*>(&page_)) + sizeof(countryid_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildList_CS)
}

void MSG_Req_GuildList_CS::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&countryid_) -
      reinterpret_cast<char*>(&page_)) + sizeof(countryid_));
}

MSG_Req_GuildList_CS::~MSG_Req_GuildList_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildList_CS)
  SharedDtor();
}

void MSG_Req_GuildList_CS::SharedDtor() {
}

void MSG_Req_GuildList_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildList_CS& MSG_Req_GuildList_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildList_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildList_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&countryid_) -
        reinterpret_cast<char*>(&page_)) + sizeof(countryid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildList_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 countryid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_countryid(&has_bits);
          countryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildList_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // optional uint32 countryid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_countryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildList_CS)
  return target;
}

size_t MSG_Req_GuildList_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildList_CS)
  size_t total_size = 0;

  // required uint32 page = 1;
  if (_internal_has_page()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 countryid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_countryid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildList_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildList_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildList_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildList_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildList_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildList_CS::MergeFrom(const MSG_Req_GuildList_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      countryid_ = from.countryid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_GuildList_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildList_CS::CopyFrom(const MSG_Req_GuildList_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildList_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_Req_GuildList_CS::InternalSwap(MSG_Req_GuildList_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_, other->page_);
  swap(countryid_, other->countryid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildList_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void guildListItem::InitAsDefaultInstance() {
  ::guild::_guildListItem_default_instance_._instance.get_mutable()->guild_ = const_cast< ::guild::guildInfo*>(
      ::guild::guildInfo::internal_default_instance());
}
class guildListItem::_Internal {
 public:
  using HasBits = decltype(std::declval<guildListItem>()._has_bits_);
  static const ::guild::guildInfo& guild(const guildListItem* msg);
  static void set_has_guild(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guildtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::guild::guildInfo&
guildListItem::_Internal::guild(const guildListItem* msg) {
  return *msg->guild_;
}
guildListItem::guildListItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.guildListItem)
}
guildListItem::guildListItem(const guildListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_guild()) {
    guild_ = new ::guild::guildInfo(*from.guild_);
  } else {
    guild_ = nullptr;
  }
  guildtype_ = from.guildtype_;
  // @@protoc_insertion_point(copy_constructor:guild.guildListItem)
}

void guildListItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_guildListItem_guild_2eproto.base);
  ::memset(&guild_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guildtype_) -
      reinterpret_cast<char*>(&guild_)) + sizeof(guildtype_));
}

guildListItem::~guildListItem() {
  // @@protoc_insertion_point(destructor:guild.guildListItem)
  SharedDtor();
}

void guildListItem::SharedDtor() {
  if (this != internal_default_instance()) delete guild_;
}

void guildListItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const guildListItem& guildListItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_guildListItem_guild_2eproto.base);
  return *internal_default_instance();
}


void guildListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.guildListItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(guild_ != nullptr);
    guild_->Clear();
  }
  guildtype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* guildListItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guild.guildInfo guild = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guildtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_guildtype(&has_bits);
          guildtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* guildListItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.guildListItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guild.guildInfo guild = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::guild(this), target, stream);
  }

  // optional uint32 guildtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guildtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.guildListItem)
  return target;
}

size_t guildListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.guildListItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .guild.guildInfo guild = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *guild_);
    }

    // optional uint32 guildtype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guildtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void guildListItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.guildListItem)
  GOOGLE_DCHECK_NE(&from, this);
  const guildListItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<guildListItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.guildListItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.guildListItem)
    MergeFrom(*source);
  }
}

void guildListItem::MergeFrom(const guildListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.guildListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_guild()->::guild::guildInfo::MergeFrom(from._internal_guild());
    }
    if (cached_has_bits & 0x00000002u) {
      guildtype_ = from.guildtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void guildListItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.guildListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildListItem::CopyFrom(const guildListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.guildListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildListItem::IsInitialized() const {
  return true;
}

void guildListItem::InternalSwap(guildListItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guild_, other->guild_);
  swap(guildtype_, other->guildtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata guildListItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildList_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildList_SC>()._has_bits_);
  static void set_has_allpage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_countryid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_GuildList_SC::MSG_Ret_GuildList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildList_SC)
}
MSG_Ret_GuildList_SC::MSG_Ret_GuildList_SC(const MSG_Ret_GuildList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      guildlist_(from.guildlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&allpage_, &from.allpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&countryid_) -
    reinterpret_cast<char*>(&allpage_)) + sizeof(countryid_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildList_SC)
}

void MSG_Ret_GuildList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildList_SC_guild_2eproto.base);
  ::memset(&allpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&countryid_) -
      reinterpret_cast<char*>(&allpage_)) + sizeof(countryid_));
}

MSG_Ret_GuildList_SC::~MSG_Ret_GuildList_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildList_SC)
  SharedDtor();
}

void MSG_Ret_GuildList_SC::SharedDtor() {
}

void MSG_Ret_GuildList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildList_SC& MSG_Ret_GuildList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildList_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guildlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&allpage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&countryid_) -
        reinterpret_cast<char*>(&allpage_)) + sizeof(countryid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guild.guildListItem guildList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guildlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 allpage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_allpage(&has_bits);
          allpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 countryid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_countryid(&has_bits);
          countryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guild.guildListItem guildList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guildlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_guildlist(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 allpage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_allpage(), target);
  }

  // optional uint32 page = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_page(), target);
  }

  // optional uint32 countryid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_countryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildList_SC)
  return target;
}

size_t MSG_Ret_GuildList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.guildListItem guildList = 1;
  total_size += 1UL * this->_internal_guildlist_size();
  for (const auto& msg : this->guildlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 allpage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_allpage());
    }

    // optional uint32 page = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page());
    }

    // optional uint32 countryid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_countryid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildList_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildList_SC::MergeFrom(const MSG_Ret_GuildList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guildlist_.MergeFrom(from.guildlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      allpage_ = from.allpage_;
    }
    if (cached_has_bits & 0x00000002u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000004u) {
      countryid_ = from.countryid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_GuildList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildList_SC::CopyFrom(const MSG_Ret_GuildList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildList_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildList_SC::InternalSwap(MSG_Ret_GuildList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guildlist_.InternalSwap(&other->guildlist_);
  swap(allpage_, other->allpage_);
  swap(page_, other->page_);
  swap(countryid_, other->countryid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ApplyForGuild_CS::InitAsDefaultInstance() {
}
class MSG_Req_ApplyForGuild_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ApplyForGuild_CS>()._has_bits_);
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_ApplyForGuild_CS::MSG_Req_ApplyForGuild_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_ApplyForGuild_CS)
}
MSG_Req_ApplyForGuild_CS::MSG_Req_ApplyForGuild_CS(const MSG_Req_ApplyForGuild_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_ApplyForGuild_CS)
}

void MSG_Req_ApplyForGuild_CS::SharedCtor() {
  ::memset(&guildid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&guildid_)) + sizeof(flag_));
}

MSG_Req_ApplyForGuild_CS::~MSG_Req_ApplyForGuild_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_ApplyForGuild_CS)
  SharedDtor();
}

void MSG_Req_ApplyForGuild_CS::SharedDtor() {
}

void MSG_Req_ApplyForGuild_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ApplyForGuild_CS& MSG_Req_ApplyForGuild_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ApplyForGuild_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ApplyForGuild_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_ApplyForGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&guildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_) -
        reinterpret_cast<char*>(&guildid_)) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ApplyForGuild_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 guildid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ApplyForGuild_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_ApplyForGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guildid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guildid(), target);
  }

  // optional bool flag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_ApplyForGuild_CS)
  return target;
}

size_t MSG_Req_ApplyForGuild_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_ApplyForGuild_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 guildid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guildid());
    }

    // optional bool flag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ApplyForGuild_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_ApplyForGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ApplyForGuild_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ApplyForGuild_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_ApplyForGuild_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_ApplyForGuild_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ApplyForGuild_CS::MergeFrom(const MSG_Req_ApplyForGuild_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_ApplyForGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000002u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_ApplyForGuild_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_ApplyForGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ApplyForGuild_CS::CopyFrom(const MSG_Req_ApplyForGuild_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_ApplyForGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ApplyForGuild_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ApplyForGuild_CS::InternalSwap(MSG_Req_ApplyForGuild_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guildid_, other->guildid_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ApplyForGuild_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_ApplyForGuild_SC::InitAsDefaultInstance() {
}
class MSG_Ret_ApplyForGuild_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_ApplyForGuild_SC>()._has_bits_);
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_issucc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_ApplyForGuild_SC::MSG_Ret_ApplyForGuild_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_ApplyForGuild_SC)
}
MSG_Ret_ApplyForGuild_SC::MSG_Ret_ApplyForGuild_SC(const MSG_Ret_ApplyForGuild_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_ApplyForGuild_SC)
}

void MSG_Ret_ApplyForGuild_SC::SharedCtor() {
  ::memset(&guildid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&guildid_)) + sizeof(flag_));
}

MSG_Ret_ApplyForGuild_SC::~MSG_Ret_ApplyForGuild_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_ApplyForGuild_SC)
  SharedDtor();
}

void MSG_Ret_ApplyForGuild_SC::SharedDtor() {
}

void MSG_Ret_ApplyForGuild_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_ApplyForGuild_SC& MSG_Ret_ApplyForGuild_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_ApplyForGuild_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_ApplyForGuild_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_ApplyForGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&guildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_) -
        reinterpret_cast<char*>(&guildid_)) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_ApplyForGuild_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 guildid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool issucc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_issucc(&has_bits);
          issucc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_ApplyForGuild_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_ApplyForGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guildid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guildid(), target);
  }

  // optional bool issucc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_issucc(), target);
  }

  // optional bool flag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_ApplyForGuild_SC)
  return target;
}

size_t MSG_Ret_ApplyForGuild_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_ApplyForGuild_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 guildid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guildid());
    }

    // optional bool issucc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool flag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_ApplyForGuild_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_ApplyForGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_ApplyForGuild_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_ApplyForGuild_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_ApplyForGuild_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_ApplyForGuild_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_ApplyForGuild_SC::MergeFrom(const MSG_Ret_ApplyForGuild_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_ApplyForGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000002u) {
      issucc_ = from.issucc_;
    }
    if (cached_has_bits & 0x00000004u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_ApplyForGuild_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_ApplyForGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_ApplyForGuild_SC::CopyFrom(const MSG_Ret_ApplyForGuild_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_ApplyForGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_ApplyForGuild_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_ApplyForGuild_SC::InternalSwap(MSG_Ret_ApplyForGuild_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guildid_, other->guildid_);
  swap(issucc_, other->issucc_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_ApplyForGuild_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void stApplyForItem::InitAsDefaultInstance() {
}
class stApplyForItem::_Internal {
 public:
  using HasBits = decltype(std::declval<stApplyForItem>()._has_bits_);
  static void set_has_applyid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_applyname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_issucc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

stApplyForItem::stApplyForItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.stApplyForItem)
}
stApplyForItem::stApplyForItem(const stApplyForItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  applyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_applyname()) {
    applyname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.applyname_);
  }
  ::memcpy(&applyid_, &from.applyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&issucc_) -
    reinterpret_cast<char*>(&applyid_)) + sizeof(issucc_));
  // @@protoc_insertion_point(copy_constructor:guild.stApplyForItem)
}

void stApplyForItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_stApplyForItem_guild_2eproto.base);
  applyname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&applyid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&issucc_) -
      reinterpret_cast<char*>(&applyid_)) + sizeof(issucc_));
}

stApplyForItem::~stApplyForItem() {
  // @@protoc_insertion_point(destructor:guild.stApplyForItem)
  SharedDtor();
}

void stApplyForItem::SharedDtor() {
  applyname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void stApplyForItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const stApplyForItem& stApplyForItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_stApplyForItem_guild_2eproto.base);
  return *internal_default_instance();
}


void stApplyForItem::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.stApplyForItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    applyname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&applyid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&issucc_) -
        reinterpret_cast<char*>(&applyid_)) + sizeof(issucc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* stApplyForItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 applyid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_applyid(&has_bits);
          applyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string applyname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_applyname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.stApplyForItem.applyname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool issucc = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_issucc(&has_bits);
          issucc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* stApplyForItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.stApplyForItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 applyid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_applyid(), target);
  }

  // optional string applyname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_applyname().data(), static_cast<int>(this->_internal_applyname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.stApplyForItem.applyname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_applyname(), target);
  }

  // optional bool issucc = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_issucc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.stApplyForItem)
  return target;
}

size_t stApplyForItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.stApplyForItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string applyname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_applyname());
    }

    // optional uint64 applyid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_applyid());
    }

    // optional bool issucc = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stApplyForItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.stApplyForItem)
  GOOGLE_DCHECK_NE(&from, this);
  const stApplyForItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<stApplyForItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.stApplyForItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.stApplyForItem)
    MergeFrom(*source);
  }
}

void stApplyForItem::MergeFrom(const stApplyForItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.stApplyForItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      applyname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.applyname_);
    }
    if (cached_has_bits & 0x00000002u) {
      applyid_ = from.applyid_;
    }
    if (cached_has_bits & 0x00000004u) {
      issucc_ = from.issucc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void stApplyForItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.stApplyForItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stApplyForItem::CopyFrom(const stApplyForItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.stApplyForItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stApplyForItem::IsInitialized() const {
  return true;
}

void stApplyForItem::InternalSwap(stApplyForItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  applyname_.Swap(&other->applyname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(applyid_, other->applyid_);
  swap(issucc_, other->issucc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stApplyForItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_AnswerApplyForGuild_CS::InitAsDefaultInstance() {
}
class MSG_Req_AnswerApplyForGuild_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_AnswerApplyForGuild_CS>()._has_bits_);
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_AnswerApplyForGuild_CS::MSG_Req_AnswerApplyForGuild_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_AnswerApplyForGuild_CS)
}
MSG_Req_AnswerApplyForGuild_CS::MSG_Req_AnswerApplyForGuild_CS(const MSG_Req_AnswerApplyForGuild_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      applyinfo_(from.applyinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accept_ = from.accept_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_AnswerApplyForGuild_CS)
}

void MSG_Req_AnswerApplyForGuild_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_AnswerApplyForGuild_CS_guild_2eproto.base);
  accept_ = false;
}

MSG_Req_AnswerApplyForGuild_CS::~MSG_Req_AnswerApplyForGuild_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_AnswerApplyForGuild_CS)
  SharedDtor();
}

void MSG_Req_AnswerApplyForGuild_CS::SharedDtor() {
}

void MSG_Req_AnswerApplyForGuild_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_AnswerApplyForGuild_CS& MSG_Req_AnswerApplyForGuild_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_AnswerApplyForGuild_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_AnswerApplyForGuild_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_AnswerApplyForGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applyinfo_.Clear();
  accept_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_AnswerApplyForGuild_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guild.stApplyForItem applyinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applyinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_accept(&has_bits);
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_AnswerApplyForGuild_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_AnswerApplyForGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guild.stApplyForItem applyinfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_applyinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_applyinfo(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool accept = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_AnswerApplyForGuild_CS)
  return target;
}

size_t MSG_Req_AnswerApplyForGuild_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_AnswerApplyForGuild_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.stApplyForItem applyinfo = 1;
  total_size += 1UL * this->_internal_applyinfo_size();
  for (const auto& msg : this->applyinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool accept = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_AnswerApplyForGuild_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_AnswerApplyForGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_AnswerApplyForGuild_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_AnswerApplyForGuild_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_AnswerApplyForGuild_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_AnswerApplyForGuild_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_AnswerApplyForGuild_CS::MergeFrom(const MSG_Req_AnswerApplyForGuild_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_AnswerApplyForGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applyinfo_.MergeFrom(from.applyinfo_);
  if (from._internal_has_accept()) {
    _internal_set_accept(from._internal_accept());
  }
}

void MSG_Req_AnswerApplyForGuild_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_AnswerApplyForGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_AnswerApplyForGuild_CS::CopyFrom(const MSG_Req_AnswerApplyForGuild_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_AnswerApplyForGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_AnswerApplyForGuild_CS::IsInitialized() const {
  return true;
}

void MSG_Req_AnswerApplyForGuild_CS::InternalSwap(MSG_Req_AnswerApplyForGuild_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  applyinfo_.InternalSwap(&other->applyinfo_);
  swap(accept_, other->accept_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_AnswerApplyForGuild_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_AnswerApplyForGuild_SC::InitAsDefaultInstance() {
}
class MSG_Ret_AnswerApplyForGuild_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_AnswerApplyForGuild_SC>()._has_bits_);
};

MSG_Ret_AnswerApplyForGuild_SC::MSG_Ret_AnswerApplyForGuild_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_AnswerApplyForGuild_SC)
}
MSG_Ret_AnswerApplyForGuild_SC::MSG_Ret_AnswerApplyForGuild_SC(const MSG_Ret_AnswerApplyForGuild_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      retlist_(from.retlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_AnswerApplyForGuild_SC)
}

void MSG_Ret_AnswerApplyForGuild_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_AnswerApplyForGuild_SC_guild_2eproto.base);
}

MSG_Ret_AnswerApplyForGuild_SC::~MSG_Ret_AnswerApplyForGuild_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_AnswerApplyForGuild_SC)
  SharedDtor();
}

void MSG_Ret_AnswerApplyForGuild_SC::SharedDtor() {
}

void MSG_Ret_AnswerApplyForGuild_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_AnswerApplyForGuild_SC& MSG_Ret_AnswerApplyForGuild_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_AnswerApplyForGuild_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_AnswerApplyForGuild_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_AnswerApplyForGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retlist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_AnswerApplyForGuild_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guild.stApplyForItem retlist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_retlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_AnswerApplyForGuild_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_AnswerApplyForGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guild.stApplyForItem retlist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_retlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_retlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_AnswerApplyForGuild_SC)
  return target;
}

size_t MSG_Ret_AnswerApplyForGuild_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_AnswerApplyForGuild_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.stApplyForItem retlist = 1;
  total_size += 1UL * this->_internal_retlist_size();
  for (const auto& msg : this->retlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_AnswerApplyForGuild_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_AnswerApplyForGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_AnswerApplyForGuild_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_AnswerApplyForGuild_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_AnswerApplyForGuild_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_AnswerApplyForGuild_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_AnswerApplyForGuild_SC::MergeFrom(const MSG_Ret_AnswerApplyForGuild_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_AnswerApplyForGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  retlist_.MergeFrom(from.retlist_);
}

void MSG_Ret_AnswerApplyForGuild_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_AnswerApplyForGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_AnswerApplyForGuild_SC::CopyFrom(const MSG_Ret_AnswerApplyForGuild_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_AnswerApplyForGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_AnswerApplyForGuild_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_AnswerApplyForGuild_SC::InternalSwap(MSG_Ret_AnswerApplyForGuild_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  retlist_.InternalSwap(&other->retlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_AnswerApplyForGuild_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MyGuildApply_Result_SC::InitAsDefaultInstance() {
  ::guild::_MSG_Ret_MyGuildApply_Result_SC_default_instance_._instance.get_mutable()->result_ = const_cast< ::guild::stApplyForItem*>(
      ::guild::stApplyForItem::internal_default_instance());
}
class MSG_Ret_MyGuildApply_Result_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MyGuildApply_Result_SC>()._has_bits_);
  static const ::guild::stApplyForItem& result(const MSG_Ret_MyGuildApply_Result_SC* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::guild::stApplyForItem&
MSG_Ret_MyGuildApply_Result_SC::_Internal::result(const MSG_Ret_MyGuildApply_Result_SC* msg) {
  return *msg->result_;
}
MSG_Ret_MyGuildApply_Result_SC::MSG_Ret_MyGuildApply_Result_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_MyGuildApply_Result_SC)
}
MSG_Ret_MyGuildApply_Result_SC::MSG_Ret_MyGuildApply_Result_SC(const MSG_Ret_MyGuildApply_Result_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::guild::stApplyForItem(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_MyGuildApply_Result_SC)
}

void MSG_Ret_MyGuildApply_Result_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_MyGuildApply_Result_SC_guild_2eproto.base);
  result_ = nullptr;
}

MSG_Ret_MyGuildApply_Result_SC::~MSG_Ret_MyGuildApply_Result_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_MyGuildApply_Result_SC)
  SharedDtor();
}

void MSG_Ret_MyGuildApply_Result_SC::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void MSG_Ret_MyGuildApply_Result_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MyGuildApply_Result_SC& MSG_Ret_MyGuildApply_Result_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MyGuildApply_Result_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MyGuildApply_Result_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_MyGuildApply_Result_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != nullptr);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MyGuildApply_Result_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guild.stApplyForItem result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MyGuildApply_Result_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_MyGuildApply_Result_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guild.stApplyForItem result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_MyGuildApply_Result_SC)
  return target;
}

size_t MSG_Ret_MyGuildApply_Result_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_MyGuildApply_Result_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .guild.stApplyForItem result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MyGuildApply_Result_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_MyGuildApply_Result_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MyGuildApply_Result_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MyGuildApply_Result_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_MyGuildApply_Result_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_MyGuildApply_Result_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MyGuildApply_Result_SC::MergeFrom(const MSG_Ret_MyGuildApply_Result_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_MyGuildApply_Result_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::guild::stApplyForItem::MergeFrom(from._internal_result());
  }
}

void MSG_Ret_MyGuildApply_Result_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_MyGuildApply_Result_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MyGuildApply_Result_SC::CopyFrom(const MSG_Ret_MyGuildApply_Result_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_MyGuildApply_Result_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MyGuildApply_Result_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MyGuildApply_Result_SC::InternalSwap(MSG_Ret_MyGuildApply_Result_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MyGuildApply_Result_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildMemberList_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildMemberList_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildMemberList_CS>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_GuildMemberList_CS::MSG_Req_GuildMemberList_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildMemberList_CS)
}
MSG_Req_GuildMemberList_CS::MSG_Req_GuildMemberList_CS(const MSG_Req_GuildMemberList_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&reqtype_) -
    reinterpret_cast<char*>(&page_)) + sizeof(reqtype_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildMemberList_CS)
}

void MSG_Req_GuildMemberList_CS::SharedCtor() {
  page_ = 0u;
  reqtype_ = 1;
}

MSG_Req_GuildMemberList_CS::~MSG_Req_GuildMemberList_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildMemberList_CS)
  SharedDtor();
}

void MSG_Req_GuildMemberList_CS::SharedDtor() {
}

void MSG_Req_GuildMemberList_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildMemberList_CS& MSG_Req_GuildMemberList_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildMemberList_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildMemberList_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildMemberList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    page_ = 0u;
    reqtype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildMemberList_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .guild.ReqMemberListType reqtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::guild::ReqMemberListType_IsValid(val))) {
            _internal_set_reqtype(static_cast<::guild::ReqMemberListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildMemberList_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildMemberList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // optional .guild.ReqMemberListType reqtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reqtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildMemberList_CS)
  return target;
}

size_t MSG_Req_GuildMemberList_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildMemberList_CS)
  size_t total_size = 0;

  // required uint32 page = 1;
  if (_internal_has_page()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .guild.ReqMemberListType reqtype = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reqtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildMemberList_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildMemberList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildMemberList_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildMemberList_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildMemberList_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildMemberList_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildMemberList_CS::MergeFrom(const MSG_Req_GuildMemberList_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildMemberList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      reqtype_ = from.reqtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_GuildMemberList_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildMemberList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildMemberList_CS::CopyFrom(const MSG_Req_GuildMemberList_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildMemberList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildMemberList_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_Req_GuildMemberList_CS::InternalSwap(MSG_Req_GuildMemberList_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_, other->page_);
  swap(reqtype_, other->reqtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildMemberList_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildMemberList_SC::InitAsDefaultInstance() {
  ::guild::_MSG_Ret_GuildMemberList_SC_default_instance_._instance.get_mutable()->guildinfo_ = const_cast< ::guild::guildInfo*>(
      ::guild::guildInfo::internal_default_instance());
}
class MSG_Ret_GuildMemberList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildMemberList_SC>()._has_bits_);
  static const ::guild::guildInfo& guildinfo(const MSG_Ret_GuildMemberList_SC* msg);
  static void set_has_guildinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reqtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allpage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::guild::guildInfo&
MSG_Ret_GuildMemberList_SC::_Internal::guildinfo(const MSG_Ret_GuildMemberList_SC* msg) {
  return *msg->guildinfo_;
}
MSG_Ret_GuildMemberList_SC::MSG_Ret_GuildMemberList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildMemberList_SC)
}
MSG_Ret_GuildMemberList_SC::MSG_Ret_GuildMemberList_SC(const MSG_Ret_GuildMemberList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_guildinfo()) {
    guildinfo_ = new ::guild::guildInfo(*from.guildinfo_);
  } else {
    guildinfo_ = nullptr;
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&reqtype_) -
    reinterpret_cast<char*>(&page_)) + sizeof(reqtype_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildMemberList_SC)
}

void MSG_Ret_GuildMemberList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildMemberList_SC_guild_2eproto.base);
  ::memset(&guildinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allpage_) -
      reinterpret_cast<char*>(&guildinfo_)) + sizeof(allpage_));
  reqtype_ = 1;
}

MSG_Ret_GuildMemberList_SC::~MSG_Ret_GuildMemberList_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildMemberList_SC)
  SharedDtor();
}

void MSG_Ret_GuildMemberList_SC::SharedDtor() {
  if (this != internal_default_instance()) delete guildinfo_;
}

void MSG_Ret_GuildMemberList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildMemberList_SC& MSG_Ret_GuildMemberList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildMemberList_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildMemberList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildMemberList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(guildinfo_ != nullptr);
    guildinfo_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allpage_) -
        reinterpret_cast<char*>(&page_)) + sizeof(allpage_));
    reqtype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildMemberList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guild.guildInfo guildinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .guild.guildMember members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .guild.ReqMemberListType reqtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::guild::ReqMemberListType_IsValid(val))) {
            _internal_set_reqtype(static_cast<::guild::ReqMemberListType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 allpage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_allpage(&has_bits);
          allpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildMemberList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildMemberList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guild.guildInfo guildinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::guildinfo(this), target, stream);
  }

  // repeated .guild.guildMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_members(i), target, stream);
  }

  // optional .guild.ReqMemberListType reqtype = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reqtype(), target);
  }

  // optional uint32 page = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // optional uint32 allpage = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_allpage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildMemberList_SC)
  return target;
}

size_t MSG_Ret_GuildMemberList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildMemberList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.guildMember members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .guild.guildInfo guildinfo = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *guildinfo_);
    }

    // optional uint32 page = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page());
    }

    // optional uint32 allpage = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_allpage());
    }

    // optional .guild.ReqMemberListType reqtype = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reqtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildMemberList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildMemberList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildMemberList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildMemberList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildMemberList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildMemberList_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildMemberList_SC::MergeFrom(const MSG_Ret_GuildMemberList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildMemberList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_guildinfo()->::guild::guildInfo::MergeFrom(from._internal_guildinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000004u) {
      allpage_ = from.allpage_;
    }
    if (cached_has_bits & 0x00000008u) {
      reqtype_ = from.reqtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_GuildMemberList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildMemberList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildMemberList_SC::CopyFrom(const MSG_Ret_GuildMemberList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildMemberList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildMemberList_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildMemberList_SC::InternalSwap(MSG_Ret_GuildMemberList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  swap(guildinfo_, other->guildinfo_);
  swap(page_, other->page_);
  swap(allpage_, other->allpage_);
  swap(reqtype_, other->reqtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildMemberList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_IntoGuildMap_CS::InitAsDefaultInstance() {
}
class MSG_Req_IntoGuildMap_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_IntoGuildMap_CS>()._has_bits_);
};

MSG_Req_IntoGuildMap_CS::MSG_Req_IntoGuildMap_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_IntoGuildMap_CS)
}
MSG_Req_IntoGuildMap_CS::MSG_Req_IntoGuildMap_CS(const MSG_Req_IntoGuildMap_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_IntoGuildMap_CS)
}

void MSG_Req_IntoGuildMap_CS::SharedCtor() {
}

MSG_Req_IntoGuildMap_CS::~MSG_Req_IntoGuildMap_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_IntoGuildMap_CS)
  SharedDtor();
}

void MSG_Req_IntoGuildMap_CS::SharedDtor() {
}

void MSG_Req_IntoGuildMap_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_IntoGuildMap_CS& MSG_Req_IntoGuildMap_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_IntoGuildMap_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_IntoGuildMap_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_IntoGuildMap_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_IntoGuildMap_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_IntoGuildMap_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_IntoGuildMap_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_IntoGuildMap_CS)
  return target;
}

size_t MSG_Req_IntoGuildMap_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_IntoGuildMap_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_IntoGuildMap_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_IntoGuildMap_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_IntoGuildMap_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_IntoGuildMap_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_IntoGuildMap_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_IntoGuildMap_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_IntoGuildMap_CS::MergeFrom(const MSG_Req_IntoGuildMap_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_IntoGuildMap_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_IntoGuildMap_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_IntoGuildMap_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_IntoGuildMap_CS::CopyFrom(const MSG_Req_IntoGuildMap_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_IntoGuildMap_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_IntoGuildMap_CS::IsInitialized() const {
  return true;
}

void MSG_Req_IntoGuildMap_CS::InternalSwap(MSG_Req_IntoGuildMap_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_IntoGuildMap_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CiTanEnemyGuildList_CS::InitAsDefaultInstance() {
}
class MSG_Req_CiTanEnemyGuildList_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CiTanEnemyGuildList_CS>()._has_bits_);
};

MSG_Req_CiTanEnemyGuildList_CS::MSG_Req_CiTanEnemyGuildList_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_CiTanEnemyGuildList_CS)
}
MSG_Req_CiTanEnemyGuildList_CS::MSG_Req_CiTanEnemyGuildList_CS(const MSG_Req_CiTanEnemyGuildList_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_CiTanEnemyGuildList_CS)
}

void MSG_Req_CiTanEnemyGuildList_CS::SharedCtor() {
}

MSG_Req_CiTanEnemyGuildList_CS::~MSG_Req_CiTanEnemyGuildList_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_CiTanEnemyGuildList_CS)
  SharedDtor();
}

void MSG_Req_CiTanEnemyGuildList_CS::SharedDtor() {
}

void MSG_Req_CiTanEnemyGuildList_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CiTanEnemyGuildList_CS& MSG_Req_CiTanEnemyGuildList_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CiTanEnemyGuildList_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CiTanEnemyGuildList_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_CiTanEnemyGuildList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CiTanEnemyGuildList_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CiTanEnemyGuildList_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_CiTanEnemyGuildList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_CiTanEnemyGuildList_CS)
  return target;
}

size_t MSG_Req_CiTanEnemyGuildList_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_CiTanEnemyGuildList_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CiTanEnemyGuildList_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_CiTanEnemyGuildList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CiTanEnemyGuildList_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CiTanEnemyGuildList_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_CiTanEnemyGuildList_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_CiTanEnemyGuildList_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CiTanEnemyGuildList_CS::MergeFrom(const MSG_Req_CiTanEnemyGuildList_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_CiTanEnemyGuildList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_CiTanEnemyGuildList_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_CiTanEnemyGuildList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CiTanEnemyGuildList_CS::CopyFrom(const MSG_Req_CiTanEnemyGuildList_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_CiTanEnemyGuildList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CiTanEnemyGuildList_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CiTanEnemyGuildList_CS::InternalSwap(MSG_Req_CiTanEnemyGuildList_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CiTanEnemyGuildList_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CiTanEnemyGuildItem::InitAsDefaultInstance() {
}
class CiTanEnemyGuildItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CiTanEnemyGuildItem>()._has_bits_);
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_guildlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guildname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mastername(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CiTanEnemyGuildItem::CiTanEnemyGuildItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.CiTanEnemyGuildItem)
}
CiTanEnemyGuildItem::CiTanEnemyGuildItem(const CiTanEnemyGuildItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildname()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  mastername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mastername()) {
    mastername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mastername_);
  }
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isvalid_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(isvalid_));
  // @@protoc_insertion_point(copy_constructor:guild.CiTanEnemyGuildItem)
}

void CiTanEnemyGuildItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CiTanEnemyGuildItem_guild_2eproto.base);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mastername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&guildid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isvalid_) -
      reinterpret_cast<char*>(&guildid_)) + sizeof(isvalid_));
}

CiTanEnemyGuildItem::~CiTanEnemyGuildItem() {
  // @@protoc_insertion_point(destructor:guild.CiTanEnemyGuildItem)
  SharedDtor();
}

void CiTanEnemyGuildItem::SharedDtor() {
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mastername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CiTanEnemyGuildItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CiTanEnemyGuildItem& CiTanEnemyGuildItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CiTanEnemyGuildItem_guild_2eproto.base);
  return *internal_default_instance();
}


void CiTanEnemyGuildItem::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.CiTanEnemyGuildItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guildname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mastername_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&guildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isvalid_) -
        reinterpret_cast<char*>(&guildid_)) + sizeof(isvalid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CiTanEnemyGuildItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 guildid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guildlevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_guildlevel(&has_bits);
          guildlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guildname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.CiTanEnemyGuildItem.guildname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mastername = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mastername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.CiTanEnemyGuildItem.mastername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 isvalid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_isvalid(&has_bits);
          isvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CiTanEnemyGuildItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.CiTanEnemyGuildItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guildid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guildid(), target);
  }

  // optional uint32 guildlevel = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guildlevel(), target);
  }

  // optional string guildname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.CiTanEnemyGuildItem.guildname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_guildname(), target);
  }

  // optional string mastername = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mastername().data(), static_cast<int>(this->_internal_mastername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.CiTanEnemyGuildItem.mastername");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mastername(), target);
  }

  // optional uint32 isvalid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_isvalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.CiTanEnemyGuildItem)
  return target;
}

size_t CiTanEnemyGuildItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.CiTanEnemyGuildItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string guildname = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildname());
    }

    // optional string mastername = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mastername());
    }

    // optional uint64 guildid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guildid());
    }

    // optional uint32 guildlevel = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guildlevel());
    }

    // optional uint32 isvalid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_isvalid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CiTanEnemyGuildItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.CiTanEnemyGuildItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CiTanEnemyGuildItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CiTanEnemyGuildItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.CiTanEnemyGuildItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.CiTanEnemyGuildItem)
    MergeFrom(*source);
  }
}

void CiTanEnemyGuildItem::MergeFrom(const CiTanEnemyGuildItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.CiTanEnemyGuildItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mastername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mastername_);
    }
    if (cached_has_bits & 0x00000004u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000008u) {
      guildlevel_ = from.guildlevel_;
    }
    if (cached_has_bits & 0x00000010u) {
      isvalid_ = from.isvalid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CiTanEnemyGuildItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.CiTanEnemyGuildItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CiTanEnemyGuildItem::CopyFrom(const CiTanEnemyGuildItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.CiTanEnemyGuildItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CiTanEnemyGuildItem::IsInitialized() const {
  return true;
}

void CiTanEnemyGuildItem::InternalSwap(CiTanEnemyGuildItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mastername_.Swap(&other->mastername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(guildid_, other->guildid_);
  swap(guildlevel_, other->guildlevel_);
  swap(isvalid_, other->isvalid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CiTanEnemyGuildItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CiTanEnemyGuildList_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CiTanEnemyGuildList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CiTanEnemyGuildList_SC>()._has_bits_);
};

MSG_Ret_CiTanEnemyGuildList_SC::MSG_Ret_CiTanEnemyGuildList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_CiTanEnemyGuildList_SC)
}
MSG_Ret_CiTanEnemyGuildList_SC::MSG_Ret_CiTanEnemyGuildList_SC(const MSG_Ret_CiTanEnemyGuildList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      guildlist_(from.guildlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_CiTanEnemyGuildList_SC)
}

void MSG_Ret_CiTanEnemyGuildList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_CiTanEnemyGuildList_SC_guild_2eproto.base);
}

MSG_Ret_CiTanEnemyGuildList_SC::~MSG_Ret_CiTanEnemyGuildList_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_CiTanEnemyGuildList_SC)
  SharedDtor();
}

void MSG_Ret_CiTanEnemyGuildList_SC::SharedDtor() {
}

void MSG_Ret_CiTanEnemyGuildList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CiTanEnemyGuildList_SC& MSG_Ret_CiTanEnemyGuildList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CiTanEnemyGuildList_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CiTanEnemyGuildList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_CiTanEnemyGuildList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guildlist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CiTanEnemyGuildList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guild.CiTanEnemyGuildItem guildlist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guildlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CiTanEnemyGuildList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_CiTanEnemyGuildList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guild.CiTanEnemyGuildItem guildlist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guildlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_guildlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_CiTanEnemyGuildList_SC)
  return target;
}

size_t MSG_Ret_CiTanEnemyGuildList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_CiTanEnemyGuildList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.CiTanEnemyGuildItem guildlist = 1;
  total_size += 1UL * this->_internal_guildlist_size();
  for (const auto& msg : this->guildlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CiTanEnemyGuildList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_CiTanEnemyGuildList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CiTanEnemyGuildList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CiTanEnemyGuildList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_CiTanEnemyGuildList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_CiTanEnemyGuildList_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CiTanEnemyGuildList_SC::MergeFrom(const MSG_Ret_CiTanEnemyGuildList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_CiTanEnemyGuildList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guildlist_.MergeFrom(from.guildlist_);
}

void MSG_Ret_CiTanEnemyGuildList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_CiTanEnemyGuildList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CiTanEnemyGuildList_SC::CopyFrom(const MSG_Ret_CiTanEnemyGuildList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_CiTanEnemyGuildList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CiTanEnemyGuildList_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CiTanEnemyGuildList_SC::InternalSwap(MSG_Ret_CiTanEnemyGuildList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guildlist_.InternalSwap(&other->guildlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CiTanEnemyGuildList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ChooseCiTanEnemyGuild_CS::InitAsDefaultInstance() {
}
class MSG_Req_ChooseCiTanEnemyGuild_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ChooseCiTanEnemyGuild_CS>()._has_bits_);
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_ChooseCiTanEnemyGuild_CS::MSG_Req_ChooseCiTanEnemyGuild_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
}
MSG_Req_ChooseCiTanEnemyGuild_CS::MSG_Req_ChooseCiTanEnemyGuild_CS(const MSG_Req_ChooseCiTanEnemyGuild_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildid_ = from.guildid_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
}

void MSG_Req_ChooseCiTanEnemyGuild_CS::SharedCtor() {
  guildid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Req_ChooseCiTanEnemyGuild_CS::~MSG_Req_ChooseCiTanEnemyGuild_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
  SharedDtor();
}

void MSG_Req_ChooseCiTanEnemyGuild_CS::SharedDtor() {
}

void MSG_Req_ChooseCiTanEnemyGuild_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ChooseCiTanEnemyGuild_CS& MSG_Req_ChooseCiTanEnemyGuild_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ChooseCiTanEnemyGuild_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ChooseCiTanEnemyGuild_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  guildid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ChooseCiTanEnemyGuild_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 guildid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ChooseCiTanEnemyGuild_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 guildid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guildid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
  return target;
}

size_t MSG_Req_ChooseCiTanEnemyGuild_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 guildid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_guildid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ChooseCiTanEnemyGuild_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ChooseCiTanEnemyGuild_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ChooseCiTanEnemyGuild_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ChooseCiTanEnemyGuild_CS::MergeFrom(const MSG_Req_ChooseCiTanEnemyGuild_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guildid()) {
    _internal_set_guildid(from._internal_guildid());
  }
}

void MSG_Req_ChooseCiTanEnemyGuild_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ChooseCiTanEnemyGuild_CS::CopyFrom(const MSG_Req_ChooseCiTanEnemyGuild_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_ChooseCiTanEnemyGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ChooseCiTanEnemyGuild_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ChooseCiTanEnemyGuild_CS::InternalSwap(MSG_Req_ChooseCiTanEnemyGuild_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guildid_, other->guildid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ChooseCiTanEnemyGuild_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_TargetCiTanEnemyGuild_CS::InitAsDefaultInstance() {
}
class MSG_Req_TargetCiTanEnemyGuild_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_TargetCiTanEnemyGuild_CS>()._has_bits_);
};

MSG_Req_TargetCiTanEnemyGuild_CS::MSG_Req_TargetCiTanEnemyGuild_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
}
MSG_Req_TargetCiTanEnemyGuild_CS::MSG_Req_TargetCiTanEnemyGuild_CS(const MSG_Req_TargetCiTanEnemyGuild_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
}

void MSG_Req_TargetCiTanEnemyGuild_CS::SharedCtor() {
}

MSG_Req_TargetCiTanEnemyGuild_CS::~MSG_Req_TargetCiTanEnemyGuild_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
  SharedDtor();
}

void MSG_Req_TargetCiTanEnemyGuild_CS::SharedDtor() {
}

void MSG_Req_TargetCiTanEnemyGuild_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_TargetCiTanEnemyGuild_CS& MSG_Req_TargetCiTanEnemyGuild_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_TargetCiTanEnemyGuild_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_TargetCiTanEnemyGuild_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_TargetCiTanEnemyGuild_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_TargetCiTanEnemyGuild_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
  return target;
}

size_t MSG_Req_TargetCiTanEnemyGuild_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_TargetCiTanEnemyGuild_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_TargetCiTanEnemyGuild_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_TargetCiTanEnemyGuild_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_TargetCiTanEnemyGuild_CS::MergeFrom(const MSG_Req_TargetCiTanEnemyGuild_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_TargetCiTanEnemyGuild_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_TargetCiTanEnemyGuild_CS::CopyFrom(const MSG_Req_TargetCiTanEnemyGuild_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_TargetCiTanEnemyGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_TargetCiTanEnemyGuild_CS::IsInitialized() const {
  return true;
}

void MSG_Req_TargetCiTanEnemyGuild_CS::InternalSwap(MSG_Req_TargetCiTanEnemyGuild_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_TargetCiTanEnemyGuild_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_ChoosedCiTanEnemyGuild_SC::InitAsDefaultInstance() {
  ::guild::_MSG_Ret_ChoosedCiTanEnemyGuild_SC_default_instance_._instance.get_mutable()->guild_ = const_cast< ::guild::CiTanEnemyGuildItem*>(
      ::guild::CiTanEnemyGuildItem::internal_default_instance());
}
class MSG_Ret_ChoosedCiTanEnemyGuild_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_ChoosedCiTanEnemyGuild_SC>()._has_bits_);
  static const ::guild::CiTanEnemyGuildItem& guild(const MSG_Ret_ChoosedCiTanEnemyGuild_SC* msg);
  static void set_has_guild(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::guild::CiTanEnemyGuildItem&
MSG_Ret_ChoosedCiTanEnemyGuild_SC::_Internal::guild(const MSG_Ret_ChoosedCiTanEnemyGuild_SC* msg) {
  return *msg->guild_;
}
MSG_Ret_ChoosedCiTanEnemyGuild_SC::MSG_Ret_ChoosedCiTanEnemyGuild_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
}
MSG_Ret_ChoosedCiTanEnemyGuild_SC::MSG_Ret_ChoosedCiTanEnemyGuild_SC(const MSG_Ret_ChoosedCiTanEnemyGuild_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_guild()) {
    guild_ = new ::guild::CiTanEnemyGuildItem(*from.guild_);
  } else {
    guild_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
}

void MSG_Ret_ChoosedCiTanEnemyGuild_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_ChoosedCiTanEnemyGuild_SC_guild_2eproto.base);
  guild_ = nullptr;
}

MSG_Ret_ChoosedCiTanEnemyGuild_SC::~MSG_Ret_ChoosedCiTanEnemyGuild_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
  SharedDtor();
}

void MSG_Ret_ChoosedCiTanEnemyGuild_SC::SharedDtor() {
  if (this != internal_default_instance()) delete guild_;
}

void MSG_Ret_ChoosedCiTanEnemyGuild_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_ChoosedCiTanEnemyGuild_SC& MSG_Ret_ChoosedCiTanEnemyGuild_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_ChoosedCiTanEnemyGuild_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_ChoosedCiTanEnemyGuild_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(guild_ != nullptr);
    guild_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_ChoosedCiTanEnemyGuild_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guild.CiTanEnemyGuildItem guild = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_ChoosedCiTanEnemyGuild_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guild.CiTanEnemyGuildItem guild = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::guild(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
  return target;
}

size_t MSG_Ret_ChoosedCiTanEnemyGuild_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .guild.CiTanEnemyGuildItem guild = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guild_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_ChoosedCiTanEnemyGuild_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_ChoosedCiTanEnemyGuild_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_ChoosedCiTanEnemyGuild_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_ChoosedCiTanEnemyGuild_SC::MergeFrom(const MSG_Ret_ChoosedCiTanEnemyGuild_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guild()) {
    _internal_mutable_guild()->::guild::CiTanEnemyGuildItem::MergeFrom(from._internal_guild());
  }
}

void MSG_Ret_ChoosedCiTanEnemyGuild_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_ChoosedCiTanEnemyGuild_SC::CopyFrom(const MSG_Ret_ChoosedCiTanEnemyGuild_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_ChoosedCiTanEnemyGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_ChoosedCiTanEnemyGuild_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_ChoosedCiTanEnemyGuild_SC::InternalSwap(MSG_Ret_ChoosedCiTanEnemyGuild_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(guild_, other->guild_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_ChoosedCiTanEnemyGuild_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_IntoCiTanEnemyGuild_CS::InitAsDefaultInstance() {
}
class MSG_Req_IntoCiTanEnemyGuild_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_IntoCiTanEnemyGuild_CS>()._has_bits_);
};

MSG_Req_IntoCiTanEnemyGuild_CS::MSG_Req_IntoCiTanEnemyGuild_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
}
MSG_Req_IntoCiTanEnemyGuild_CS::MSG_Req_IntoCiTanEnemyGuild_CS(const MSG_Req_IntoCiTanEnemyGuild_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
}

void MSG_Req_IntoCiTanEnemyGuild_CS::SharedCtor() {
}

MSG_Req_IntoCiTanEnemyGuild_CS::~MSG_Req_IntoCiTanEnemyGuild_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
  SharedDtor();
}

void MSG_Req_IntoCiTanEnemyGuild_CS::SharedDtor() {
}

void MSG_Req_IntoCiTanEnemyGuild_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_IntoCiTanEnemyGuild_CS& MSG_Req_IntoCiTanEnemyGuild_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_IntoCiTanEnemyGuild_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_IntoCiTanEnemyGuild_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_IntoCiTanEnemyGuild_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_IntoCiTanEnemyGuild_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
  return target;
}

size_t MSG_Req_IntoCiTanEnemyGuild_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_IntoCiTanEnemyGuild_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_IntoCiTanEnemyGuild_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_IntoCiTanEnemyGuild_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_IntoCiTanEnemyGuild_CS::MergeFrom(const MSG_Req_IntoCiTanEnemyGuild_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_IntoCiTanEnemyGuild_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_IntoCiTanEnemyGuild_CS::CopyFrom(const MSG_Req_IntoCiTanEnemyGuild_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_IntoCiTanEnemyGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_IntoCiTanEnemyGuild_CS::IsInitialized() const {
  return true;
}

void MSG_Req_IntoCiTanEnemyGuild_CS::InternalSwap(MSG_Req_IntoCiTanEnemyGuild_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_IntoCiTanEnemyGuild_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CiTanBacktoMyGuild_CS::InitAsDefaultInstance() {
}
class MSG_Req_CiTanBacktoMyGuild_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CiTanBacktoMyGuild_CS>()._has_bits_);
};

MSG_Req_CiTanBacktoMyGuild_CS::MSG_Req_CiTanBacktoMyGuild_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_CiTanBacktoMyGuild_CS)
}
MSG_Req_CiTanBacktoMyGuild_CS::MSG_Req_CiTanBacktoMyGuild_CS(const MSG_Req_CiTanBacktoMyGuild_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_CiTanBacktoMyGuild_CS)
}

void MSG_Req_CiTanBacktoMyGuild_CS::SharedCtor() {
}

MSG_Req_CiTanBacktoMyGuild_CS::~MSG_Req_CiTanBacktoMyGuild_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_CiTanBacktoMyGuild_CS)
  SharedDtor();
}

void MSG_Req_CiTanBacktoMyGuild_CS::SharedDtor() {
}

void MSG_Req_CiTanBacktoMyGuild_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CiTanBacktoMyGuild_CS& MSG_Req_CiTanBacktoMyGuild_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CiTanBacktoMyGuild_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CiTanBacktoMyGuild_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_CiTanBacktoMyGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CiTanBacktoMyGuild_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CiTanBacktoMyGuild_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_CiTanBacktoMyGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_CiTanBacktoMyGuild_CS)
  return target;
}

size_t MSG_Req_CiTanBacktoMyGuild_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_CiTanBacktoMyGuild_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CiTanBacktoMyGuild_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_CiTanBacktoMyGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CiTanBacktoMyGuild_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CiTanBacktoMyGuild_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_CiTanBacktoMyGuild_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_CiTanBacktoMyGuild_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CiTanBacktoMyGuild_CS::MergeFrom(const MSG_Req_CiTanBacktoMyGuild_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_CiTanBacktoMyGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_CiTanBacktoMyGuild_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_CiTanBacktoMyGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CiTanBacktoMyGuild_CS::CopyFrom(const MSG_Req_CiTanBacktoMyGuild_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_CiTanBacktoMyGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CiTanBacktoMyGuild_CS::IsInitialized() const {
  return true;
}

void MSG_Req_CiTanBacktoMyGuild_CS::InternalSwap(MSG_Req_CiTanBacktoMyGuild_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CiTanBacktoMyGuild_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GuildPositionInfo::InitAsDefaultInstance() {
}
class GuildPositionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GuildPositionInfo>()._has_bits_);
  static void set_has_positionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_orderid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_privilege(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GuildPositionInfo::GuildPositionInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.GuildPositionInfo)
}
GuildPositionInfo::GuildPositionInfo(const GuildPositionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&privilege_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(privilege_));
  // @@protoc_insertion_point(copy_constructor:guild.GuildPositionInfo)
}

void GuildPositionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GuildPositionInfo_guild_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privilege_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(privilege_));
}

GuildPositionInfo::~GuildPositionInfo() {
  // @@protoc_insertion_point(destructor:guild.GuildPositionInfo)
  SharedDtor();
}

void GuildPositionInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GuildPositionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GuildPositionInfo& GuildPositionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GuildPositionInfo_guild_2eproto.base);
  return *internal_default_instance();
}


void GuildPositionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.GuildPositionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&positionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&privilege_) -
        reinterpret_cast<char*>(&positionid_)) + sizeof(privilege_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GuildPositionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 positionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_positionid(&has_bits);
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.GuildPositionInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 orderid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_orderid(&has_bits);
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 privilege = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_privilege(&has_bits);
          privilege_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GuildPositionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.GuildPositionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 positionid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_positionid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.GuildPositionInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 orderid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_orderid(), target);
  }

  // optional uint32 privilege = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_privilege(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.GuildPositionInfo)
  return target;
}

size_t GuildPositionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.GuildPositionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 positionid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_positionid());
    }

    // optional uint32 orderid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_orderid());
    }

    // optional uint32 privilege = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_privilege());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GuildPositionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.GuildPositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GuildPositionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GuildPositionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.GuildPositionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.GuildPositionInfo)
    MergeFrom(*source);
  }
}

void GuildPositionInfo::MergeFrom(const GuildPositionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.GuildPositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      positionid_ = from.positionid_;
    }
    if (cached_has_bits & 0x00000004u) {
      orderid_ = from.orderid_;
    }
    if (cached_has_bits & 0x00000008u) {
      privilege_ = from.privilege_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GuildPositionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.GuildPositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPositionInfo::CopyFrom(const GuildPositionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.GuildPositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPositionInfo::IsInitialized() const {
  return true;
}

void GuildPositionInfo::InternalSwap(GuildPositionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(positionid_, other->positionid_);
  swap(orderid_, other->orderid_);
  swap(privilege_, other->privilege_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildPositionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_AddGuildPosition_CS::InitAsDefaultInstance() {
  ::guild::_MSG_Req_AddGuildPosition_CS_default_instance_._instance.get_mutable()->posinfo_ = const_cast< ::guild::GuildPositionInfo*>(
      ::guild::GuildPositionInfo::internal_default_instance());
}
class MSG_Req_AddGuildPosition_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_AddGuildPosition_CS>()._has_bits_);
  static const ::guild::GuildPositionInfo& posinfo(const MSG_Req_AddGuildPosition_CS* msg);
  static void set_has_posinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::guild::GuildPositionInfo&
MSG_Req_AddGuildPosition_CS::_Internal::posinfo(const MSG_Req_AddGuildPosition_CS* msg) {
  return *msg->posinfo_;
}
MSG_Req_AddGuildPosition_CS::MSG_Req_AddGuildPosition_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_AddGuildPosition_CS)
}
MSG_Req_AddGuildPosition_CS::MSG_Req_AddGuildPosition_CS(const MSG_Req_AddGuildPosition_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_posinfo()) {
    posinfo_ = new ::guild::GuildPositionInfo(*from.posinfo_);
  } else {
    posinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_AddGuildPosition_CS)
}

void MSG_Req_AddGuildPosition_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_AddGuildPosition_CS_guild_2eproto.base);
  posinfo_ = nullptr;
}

MSG_Req_AddGuildPosition_CS::~MSG_Req_AddGuildPosition_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_AddGuildPosition_CS)
  SharedDtor();
}

void MSG_Req_AddGuildPosition_CS::SharedDtor() {
  if (this != internal_default_instance()) delete posinfo_;
}

void MSG_Req_AddGuildPosition_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_AddGuildPosition_CS& MSG_Req_AddGuildPosition_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_AddGuildPosition_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_AddGuildPosition_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_AddGuildPosition_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(posinfo_ != nullptr);
    posinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_AddGuildPosition_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guild.GuildPositionInfo posinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_posinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_AddGuildPosition_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_AddGuildPosition_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guild.GuildPositionInfo posinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::posinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_AddGuildPosition_CS)
  return target;
}

size_t MSG_Req_AddGuildPosition_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_AddGuildPosition_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .guild.GuildPositionInfo posinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_AddGuildPosition_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_AddGuildPosition_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_AddGuildPosition_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_AddGuildPosition_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_AddGuildPosition_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_AddGuildPosition_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_AddGuildPosition_CS::MergeFrom(const MSG_Req_AddGuildPosition_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_AddGuildPosition_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_posinfo()) {
    _internal_mutable_posinfo()->::guild::GuildPositionInfo::MergeFrom(from._internal_posinfo());
  }
}

void MSG_Req_AddGuildPosition_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_AddGuildPosition_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_AddGuildPosition_CS::CopyFrom(const MSG_Req_AddGuildPosition_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_AddGuildPosition_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_AddGuildPosition_CS::IsInitialized() const {
  return true;
}

void MSG_Req_AddGuildPosition_CS::InternalSwap(MSG_Req_AddGuildPosition_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(posinfo_, other->posinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_AddGuildPosition_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_DeleteGuildPosition_CS::InitAsDefaultInstance() {
}
class MSG_Req_DeleteGuildPosition_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_DeleteGuildPosition_CS>()._has_bits_);
  static void set_has_positionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_DeleteGuildPosition_CS::MSG_Req_DeleteGuildPosition_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_DeleteGuildPosition_CS)
}
MSG_Req_DeleteGuildPosition_CS::MSG_Req_DeleteGuildPosition_CS(const MSG_Req_DeleteGuildPosition_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  positionid_ = from.positionid_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_DeleteGuildPosition_CS)
}

void MSG_Req_DeleteGuildPosition_CS::SharedCtor() {
  positionid_ = 0u;
}

MSG_Req_DeleteGuildPosition_CS::~MSG_Req_DeleteGuildPosition_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_DeleteGuildPosition_CS)
  SharedDtor();
}

void MSG_Req_DeleteGuildPosition_CS::SharedDtor() {
}

void MSG_Req_DeleteGuildPosition_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_DeleteGuildPosition_CS& MSG_Req_DeleteGuildPosition_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_DeleteGuildPosition_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_DeleteGuildPosition_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_DeleteGuildPosition_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positionid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_DeleteGuildPosition_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 positionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_positionid(&has_bits);
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_DeleteGuildPosition_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_DeleteGuildPosition_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 positionid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_positionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_DeleteGuildPosition_CS)
  return target;
}

size_t MSG_Req_DeleteGuildPosition_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_DeleteGuildPosition_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 positionid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_positionid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_DeleteGuildPosition_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_DeleteGuildPosition_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_DeleteGuildPosition_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_DeleteGuildPosition_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_DeleteGuildPosition_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_DeleteGuildPosition_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_DeleteGuildPosition_CS::MergeFrom(const MSG_Req_DeleteGuildPosition_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_DeleteGuildPosition_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_positionid()) {
    _internal_set_positionid(from._internal_positionid());
  }
}

void MSG_Req_DeleteGuildPosition_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_DeleteGuildPosition_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_DeleteGuildPosition_CS::CopyFrom(const MSG_Req_DeleteGuildPosition_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_DeleteGuildPosition_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_DeleteGuildPosition_CS::IsInitialized() const {
  return true;
}

void MSG_Req_DeleteGuildPosition_CS::InternalSwap(MSG_Req_DeleteGuildPosition_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(positionid_, other->positionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_DeleteGuildPosition_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapGuildPosInfo::InitAsDefaultInstance() {
}
class SwapGuildPosInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SwapGuildPosInfo>()._has_bits_);
  static void set_has_posidfrom(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posidto(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SwapGuildPosInfo::SwapGuildPosInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.SwapGuildPosInfo)
}
SwapGuildPosInfo::SwapGuildPosInfo(const SwapGuildPosInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&posidfrom_, &from.posidfrom_,
    static_cast<size_t>(reinterpret_cast<char*>(&posidto_) -
    reinterpret_cast<char*>(&posidfrom_)) + sizeof(posidto_));
  // @@protoc_insertion_point(copy_constructor:guild.SwapGuildPosInfo)
}

void SwapGuildPosInfo::SharedCtor() {
  ::memset(&posidfrom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posidto_) -
      reinterpret_cast<char*>(&posidfrom_)) + sizeof(posidto_));
}

SwapGuildPosInfo::~SwapGuildPosInfo() {
  // @@protoc_insertion_point(destructor:guild.SwapGuildPosInfo)
  SharedDtor();
}

void SwapGuildPosInfo::SharedDtor() {
}

void SwapGuildPosInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapGuildPosInfo& SwapGuildPosInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapGuildPosInfo_guild_2eproto.base);
  return *internal_default_instance();
}


void SwapGuildPosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.SwapGuildPosInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&posidfrom_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&posidto_) -
        reinterpret_cast<char*>(&posidfrom_)) + sizeof(posidto_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SwapGuildPosInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 posidfrom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_posidfrom(&has_bits);
          posidfrom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 posidto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_posidto(&has_bits);
          posidto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapGuildPosInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.SwapGuildPosInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 posidfrom = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_posidfrom(), target);
  }

  // optional uint32 posidto = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posidto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.SwapGuildPosInfo)
  return target;
}

size_t SwapGuildPosInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.SwapGuildPosInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 posidfrom = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posidfrom());
    }

    // optional uint32 posidto = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posidto());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapGuildPosInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.SwapGuildPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapGuildPosInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapGuildPosInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.SwapGuildPosInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.SwapGuildPosInfo)
    MergeFrom(*source);
  }
}

void SwapGuildPosInfo::MergeFrom(const SwapGuildPosInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.SwapGuildPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      posidfrom_ = from.posidfrom_;
    }
    if (cached_has_bits & 0x00000002u) {
      posidto_ = from.posidto_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SwapGuildPosInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.SwapGuildPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapGuildPosInfo::CopyFrom(const SwapGuildPosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.SwapGuildPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapGuildPosInfo::IsInitialized() const {
  return true;
}

void SwapGuildPosInfo::InternalSwap(SwapGuildPosInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(posidfrom_, other->posidfrom_);
  swap(posidto_, other->posidto_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapGuildPosInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_SwapGuildPosOrder_CS::InitAsDefaultInstance() {
  ::guild::_MSG_Req_SwapGuildPosOrder_CS_default_instance_._instance.get_mutable()->swapinfo_ = const_cast< ::guild::SwapGuildPosInfo*>(
      ::guild::SwapGuildPosInfo::internal_default_instance());
}
class MSG_Req_SwapGuildPosOrder_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_SwapGuildPosOrder_CS>()._has_bits_);
  static const ::guild::SwapGuildPosInfo& swapinfo(const MSG_Req_SwapGuildPosOrder_CS* msg);
  static void set_has_swapinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::guild::SwapGuildPosInfo&
MSG_Req_SwapGuildPosOrder_CS::_Internal::swapinfo(const MSG_Req_SwapGuildPosOrder_CS* msg) {
  return *msg->swapinfo_;
}
MSG_Req_SwapGuildPosOrder_CS::MSG_Req_SwapGuildPosOrder_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_SwapGuildPosOrder_CS)
}
MSG_Req_SwapGuildPosOrder_CS::MSG_Req_SwapGuildPosOrder_CS(const MSG_Req_SwapGuildPosOrder_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_swapinfo()) {
    swapinfo_ = new ::guild::SwapGuildPosInfo(*from.swapinfo_);
  } else {
    swapinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_SwapGuildPosOrder_CS)
}

void MSG_Req_SwapGuildPosOrder_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_SwapGuildPosOrder_CS_guild_2eproto.base);
  swapinfo_ = nullptr;
}

MSG_Req_SwapGuildPosOrder_CS::~MSG_Req_SwapGuildPosOrder_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_SwapGuildPosOrder_CS)
  SharedDtor();
}

void MSG_Req_SwapGuildPosOrder_CS::SharedDtor() {
  if (this != internal_default_instance()) delete swapinfo_;
}

void MSG_Req_SwapGuildPosOrder_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_SwapGuildPosOrder_CS& MSG_Req_SwapGuildPosOrder_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_SwapGuildPosOrder_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_SwapGuildPosOrder_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_SwapGuildPosOrder_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(swapinfo_ != nullptr);
    swapinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_SwapGuildPosOrder_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guild.SwapGuildPosInfo swapinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_SwapGuildPosOrder_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_SwapGuildPosOrder_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guild.SwapGuildPosInfo swapinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::swapinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_SwapGuildPosOrder_CS)
  return target;
}

size_t MSG_Req_SwapGuildPosOrder_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_SwapGuildPosOrder_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .guild.SwapGuildPosInfo swapinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *swapinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_SwapGuildPosOrder_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_SwapGuildPosOrder_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_SwapGuildPosOrder_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_SwapGuildPosOrder_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_SwapGuildPosOrder_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_SwapGuildPosOrder_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_SwapGuildPosOrder_CS::MergeFrom(const MSG_Req_SwapGuildPosOrder_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_SwapGuildPosOrder_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_swapinfo()) {
    _internal_mutable_swapinfo()->::guild::SwapGuildPosInfo::MergeFrom(from._internal_swapinfo());
  }
}

void MSG_Req_SwapGuildPosOrder_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_SwapGuildPosOrder_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_SwapGuildPosOrder_CS::CopyFrom(const MSG_Req_SwapGuildPosOrder_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_SwapGuildPosOrder_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_SwapGuildPosOrder_CS::IsInitialized() const {
  return true;
}

void MSG_Req_SwapGuildPosOrder_CS::InternalSwap(MSG_Req_SwapGuildPosOrder_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(swapinfo_, other->swapinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_SwapGuildPosOrder_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ChangePositionName_CS::InitAsDefaultInstance() {
}
class MSG_Req_ChangePositionName_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ChangePositionName_CS>()._has_bits_);
  static void set_has_positionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_ChangePositionName_CS::MSG_Req_ChangePositionName_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_ChangePositionName_CS)
}
MSG_Req_ChangePositionName_CS::MSG_Req_ChangePositionName_CS(const MSG_Req_ChangePositionName_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  positionid_ = from.positionid_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_ChangePositionName_CS)
}

void MSG_Req_ChangePositionName_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_ChangePositionName_CS_guild_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  positionid_ = 0u;
}

MSG_Req_ChangePositionName_CS::~MSG_Req_ChangePositionName_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_ChangePositionName_CS)
  SharedDtor();
}

void MSG_Req_ChangePositionName_CS::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_ChangePositionName_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ChangePositionName_CS& MSG_Req_ChangePositionName_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ChangePositionName_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ChangePositionName_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_ChangePositionName_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  positionid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ChangePositionName_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 positionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_positionid(&has_bits);
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Req_ChangePositionName_CS.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ChangePositionName_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_ChangePositionName_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 positionid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_positionid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Req_ChangePositionName_CS.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_ChangePositionName_CS)
  return target;
}

size_t MSG_Req_ChangePositionName_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_ChangePositionName_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 positionid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_positionid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ChangePositionName_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_ChangePositionName_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ChangePositionName_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ChangePositionName_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_ChangePositionName_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_ChangePositionName_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ChangePositionName_CS::MergeFrom(const MSG_Req_ChangePositionName_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_ChangePositionName_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      positionid_ = from.positionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_ChangePositionName_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_ChangePositionName_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ChangePositionName_CS::CopyFrom(const MSG_Req_ChangePositionName_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_ChangePositionName_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ChangePositionName_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ChangePositionName_CS::InternalSwap(MSG_Req_ChangePositionName_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(positionid_, other->positionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ChangePositionName_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ChangePositionPri_CS::InitAsDefaultInstance() {
}
class MSG_Req_ChangePositionPri_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ChangePositionPri_CS>()._has_bits_);
  static void set_has_positionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privilege(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_ChangePositionPri_CS::MSG_Req_ChangePositionPri_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_ChangePositionPri_CS)
}
MSG_Req_ChangePositionPri_CS::MSG_Req_ChangePositionPri_CS(const MSG_Req_ChangePositionPri_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&positionid_, &from.positionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&privilege_) -
    reinterpret_cast<char*>(&positionid_)) + sizeof(privilege_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_ChangePositionPri_CS)
}

void MSG_Req_ChangePositionPri_CS::SharedCtor() {
  ::memset(&positionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privilege_) -
      reinterpret_cast<char*>(&positionid_)) + sizeof(privilege_));
}

MSG_Req_ChangePositionPri_CS::~MSG_Req_ChangePositionPri_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_ChangePositionPri_CS)
  SharedDtor();
}

void MSG_Req_ChangePositionPri_CS::SharedDtor() {
}

void MSG_Req_ChangePositionPri_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ChangePositionPri_CS& MSG_Req_ChangePositionPri_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ChangePositionPri_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ChangePositionPri_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_ChangePositionPri_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&positionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&privilege_) -
        reinterpret_cast<char*>(&positionid_)) + sizeof(privilege_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ChangePositionPri_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 positionid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_positionid(&has_bits);
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 privilege = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_privilege(&has_bits);
          privilege_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ChangePositionPri_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_ChangePositionPri_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 positionid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_positionid(), target);
  }

  // optional uint32 privilege = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_privilege(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_ChangePositionPri_CS)
  return target;
}

size_t MSG_Req_ChangePositionPri_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_ChangePositionPri_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 positionid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_positionid());
    }

    // optional uint32 privilege = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_privilege());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ChangePositionPri_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_ChangePositionPri_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ChangePositionPri_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ChangePositionPri_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_ChangePositionPri_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_ChangePositionPri_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ChangePositionPri_CS::MergeFrom(const MSG_Req_ChangePositionPri_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_ChangePositionPri_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      positionid_ = from.positionid_;
    }
    if (cached_has_bits & 0x00000002u) {
      privilege_ = from.privilege_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_ChangePositionPri_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_ChangePositionPri_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ChangePositionPri_CS::CopyFrom(const MSG_Req_ChangePositionPri_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_ChangePositionPri_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ChangePositionPri_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ChangePositionPri_CS::InternalSwap(MSG_Req_ChangePositionPri_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(positionid_, other->positionid_);
  swap(privilege_, other->privilege_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ChangePositionPri_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_AssignPosition_CS::InitAsDefaultInstance() {
}
class MSG_Req_AssignPosition_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_AssignPosition_CS>()._has_bits_);
  static void set_has_memberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_positionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_AssignPosition_CS::MSG_Req_AssignPosition_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_AssignPosition_CS)
}
MSG_Req_AssignPosition_CS::MSG_Req_AssignPosition_CS(const MSG_Req_AssignPosition_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    static_cast<size_t>(reinterpret_cast<char*>(&positionid_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(positionid_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_AssignPosition_CS)
}

void MSG_Req_AssignPosition_CS::SharedCtor() {
  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(positionid_));
}

MSG_Req_AssignPosition_CS::~MSG_Req_AssignPosition_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_AssignPosition_CS)
  SharedDtor();
}

void MSG_Req_AssignPosition_CS::SharedDtor() {
}

void MSG_Req_AssignPosition_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_AssignPosition_CS& MSG_Req_AssignPosition_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_AssignPosition_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_AssignPosition_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_AssignPosition_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&memberid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&positionid_) -
        reinterpret_cast<char*>(&memberid_)) + sizeof(positionid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_AssignPosition_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 memberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_memberid(&has_bits);
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 positionid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_positionid(&has_bits);
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_AssignPosition_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_AssignPosition_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 memberid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memberid(), target);
  }

  // optional uint32 positionid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_positionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_AssignPosition_CS)
  return target;
}

size_t MSG_Req_AssignPosition_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_AssignPosition_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 memberid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_memberid());
    }

    // optional uint32 positionid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_positionid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_AssignPosition_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_AssignPosition_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_AssignPosition_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_AssignPosition_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_AssignPosition_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_AssignPosition_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_AssignPosition_CS::MergeFrom(const MSG_Req_AssignPosition_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_AssignPosition_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      memberid_ = from.memberid_;
    }
    if (cached_has_bits & 0x00000002u) {
      positionid_ = from.positionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_AssignPosition_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_AssignPosition_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_AssignPosition_CS::CopyFrom(const MSG_Req_AssignPosition_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_AssignPosition_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_AssignPosition_CS::IsInitialized() const {
  return true;
}

void MSG_Req_AssignPosition_CS::InternalSwap(MSG_Req_AssignPosition_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(memberid_, other->memberid_);
  swap(positionid_, other->positionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_AssignPosition_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_AssignPosition_SC::InitAsDefaultInstance() {
}
class MSG_Ret_AssignPosition_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_AssignPosition_SC>()._has_bits_);
  static void set_has_memberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_positionid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_AssignPosition_SC::MSG_Ret_AssignPosition_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_AssignPosition_SC)
}
MSG_Ret_AssignPosition_SC::MSG_Ret_AssignPosition_SC(const MSG_Ret_AssignPosition_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    static_cast<size_t>(reinterpret_cast<char*>(&positionid_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(positionid_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_AssignPosition_SC)
}

void MSG_Ret_AssignPosition_SC::SharedCtor() {
  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&positionid_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(positionid_));
}

MSG_Ret_AssignPosition_SC::~MSG_Ret_AssignPosition_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_AssignPosition_SC)
  SharedDtor();
}

void MSG_Ret_AssignPosition_SC::SharedDtor() {
}

void MSG_Ret_AssignPosition_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_AssignPosition_SC& MSG_Ret_AssignPosition_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_AssignPosition_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_AssignPosition_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_AssignPosition_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&memberid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&positionid_) -
        reinterpret_cast<char*>(&memberid_)) + sizeof(positionid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_AssignPosition_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 memberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_memberid(&has_bits);
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 positionid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_positionid(&has_bits);
          positionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_AssignPosition_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_AssignPosition_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 memberid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memberid(), target);
  }

  // optional uint32 positionid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_positionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_AssignPosition_SC)
  return target;
}

size_t MSG_Ret_AssignPosition_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_AssignPosition_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 memberid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_memberid());
    }

    // optional uint32 positionid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_positionid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_AssignPosition_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_AssignPosition_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_AssignPosition_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_AssignPosition_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_AssignPosition_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_AssignPosition_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_AssignPosition_SC::MergeFrom(const MSG_Ret_AssignPosition_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_AssignPosition_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      memberid_ = from.memberid_;
    }
    if (cached_has_bits & 0x00000002u) {
      positionid_ = from.positionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_AssignPosition_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_AssignPosition_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_AssignPosition_SC::CopyFrom(const MSG_Ret_AssignPosition_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_AssignPosition_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_AssignPosition_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_AssignPosition_SC::InternalSwap(MSG_Ret_AssignPosition_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(memberid_, other->memberid_);
  swap(positionid_, other->positionid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_AssignPosition_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_PositionInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_PositionInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_PositionInfo_SC>()._has_bits_);
};

MSG_Ret_PositionInfo_SC::MSG_Ret_PositionInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_PositionInfo_SC)
}
MSG_Ret_PositionInfo_SC::MSG_Ret_PositionInfo_SC(const MSG_Ret_PositionInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      posinfos_(from.posinfos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_PositionInfo_SC)
}

void MSG_Ret_PositionInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_PositionInfo_SC_guild_2eproto.base);
}

MSG_Ret_PositionInfo_SC::~MSG_Ret_PositionInfo_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_PositionInfo_SC)
  SharedDtor();
}

void MSG_Ret_PositionInfo_SC::SharedDtor() {
}

void MSG_Ret_PositionInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_PositionInfo_SC& MSG_Ret_PositionInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_PositionInfo_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_PositionInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_PositionInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  posinfos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_PositionInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guild.GuildPositionInfo posinfos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posinfos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_PositionInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_PositionInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guild.GuildPositionInfo posinfos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_posinfos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_posinfos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_PositionInfo_SC)
  return target;
}

size_t MSG_Ret_PositionInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_PositionInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.GuildPositionInfo posinfos = 1;
  total_size += 1UL * this->_internal_posinfos_size();
  for (const auto& msg : this->posinfos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_PositionInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_PositionInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_PositionInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_PositionInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_PositionInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_PositionInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_PositionInfo_SC::MergeFrom(const MSG_Ret_PositionInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_PositionInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  posinfos_.MergeFrom(from.posinfos_);
}

void MSG_Ret_PositionInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_PositionInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_PositionInfo_SC::CopyFrom(const MSG_Ret_PositionInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_PositionInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_PositionInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_PositionInfo_SC::InternalSwap(MSG_Ret_PositionInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  posinfos_.InternalSwap(&other->posinfos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_PositionInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildLevelup_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildLevelup_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildLevelup_CS>()._has_bits_);
};

MSG_Req_GuildLevelup_CS::MSG_Req_GuildLevelup_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildLevelup_CS)
}
MSG_Req_GuildLevelup_CS::MSG_Req_GuildLevelup_CS(const MSG_Req_GuildLevelup_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildLevelup_CS)
}

void MSG_Req_GuildLevelup_CS::SharedCtor() {
}

MSG_Req_GuildLevelup_CS::~MSG_Req_GuildLevelup_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildLevelup_CS)
  SharedDtor();
}

void MSG_Req_GuildLevelup_CS::SharedDtor() {
}

void MSG_Req_GuildLevelup_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildLevelup_CS& MSG_Req_GuildLevelup_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildLevelup_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildLevelup_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildLevelup_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildLevelup_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildLevelup_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildLevelup_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildLevelup_CS)
  return target;
}

size_t MSG_Req_GuildLevelup_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildLevelup_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildLevelup_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildLevelup_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildLevelup_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildLevelup_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildLevelup_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildLevelup_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildLevelup_CS::MergeFrom(const MSG_Req_GuildLevelup_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildLevelup_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GuildLevelup_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildLevelup_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildLevelup_CS::CopyFrom(const MSG_Req_GuildLevelup_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildLevelup_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildLevelup_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildLevelup_CS::InternalSwap(MSG_Req_GuildLevelup_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildLevelup_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildLevelup_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildLevelup_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildLevelup_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_GuildLevelup_SC::MSG_Ret_GuildLevelup_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildLevelup_SC)
}
MSG_Ret_GuildLevelup_SC::MSG_Ret_GuildLevelup_SC(const MSG_Ret_GuildLevelup_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildLevelup_SC)
}

void MSG_Ret_GuildLevelup_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_GuildLevelup_SC::~MSG_Ret_GuildLevelup_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildLevelup_SC)
  SharedDtor();
}

void MSG_Ret_GuildLevelup_SC::SharedDtor() {
}

void MSG_Ret_GuildLevelup_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildLevelup_SC& MSG_Ret_GuildLevelup_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildLevelup_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildLevelup_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildLevelup_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildLevelup_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildLevelup_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildLevelup_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildLevelup_SC)
  return target;
}

size_t MSG_Ret_GuildLevelup_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildLevelup_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildLevelup_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildLevelup_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildLevelup_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildLevelup_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildLevelup_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildLevelup_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildLevelup_SC::MergeFrom(const MSG_Ret_GuildLevelup_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildLevelup_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_GuildLevelup_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildLevelup_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildLevelup_SC::CopyFrom(const MSG_Ret_GuildLevelup_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildLevelup_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildLevelup_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildLevelup_SC::InternalSwap(MSG_Ret_GuildLevelup_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildLevelup_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildSetInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildSetInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildSetInfo_CS>()._has_bits_);
  static void set_has_guildsetinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_GuildSetInfo_CS::MSG_Req_GuildSetInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildSetInfo_CS)
}
MSG_Req_GuildSetInfo_CS::MSG_Req_GuildSetInfo_CS(const MSG_Req_GuildSetInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildsetinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildsetinfo()) {
    guildsetinfo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildsetinfo_);
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildSetInfo_CS)
}

void MSG_Req_GuildSetInfo_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_GuildSetInfo_CS_guild_2eproto.base);
  guildsetinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Req_GuildSetInfo_CS::~MSG_Req_GuildSetInfo_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildSetInfo_CS)
  SharedDtor();
}

void MSG_Req_GuildSetInfo_CS::SharedDtor() {
  guildsetinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_GuildSetInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildSetInfo_CS& MSG_Req_GuildSetInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildSetInfo_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildSetInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildSetInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guildsetinfo_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildSetInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string guildsetinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_guildsetinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Req_GuildSetInfo_CS.guildsetinfo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildSetInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildSetInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guildsetinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildsetinfo().data(), static_cast<int>(this->_internal_guildsetinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Req_GuildSetInfo_CS.guildsetinfo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guildsetinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildSetInfo_CS)
  return target;
}

size_t MSG_Req_GuildSetInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildSetInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string guildsetinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guildsetinfo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildSetInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildSetInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildSetInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildSetInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildSetInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildSetInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildSetInfo_CS::MergeFrom(const MSG_Req_GuildSetInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildSetInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guildsetinfo()) {
    _has_bits_[0] |= 0x00000001u;
    guildsetinfo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildsetinfo_);
  }
}

void MSG_Req_GuildSetInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildSetInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildSetInfo_CS::CopyFrom(const MSG_Req_GuildSetInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildSetInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildSetInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildSetInfo_CS::InternalSwap(MSG_Req_GuildSetInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guildsetinfo_.Swap(&other->guildsetinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildSetInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildSetInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildSetInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildSetInfo_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_GuildSetInfo_SC::MSG_Ret_GuildSetInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildSetInfo_SC)
}
MSG_Ret_GuildSetInfo_SC::MSG_Ret_GuildSetInfo_SC(const MSG_Ret_GuildSetInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildSetInfo_SC)
}

void MSG_Ret_GuildSetInfo_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_GuildSetInfo_SC::~MSG_Ret_GuildSetInfo_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildSetInfo_SC)
  SharedDtor();
}

void MSG_Ret_GuildSetInfo_SC::SharedDtor() {
}

void MSG_Ret_GuildSetInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildSetInfo_SC& MSG_Ret_GuildSetInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildSetInfo_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildSetInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildSetInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildSetInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildSetInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildSetInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildSetInfo_SC)
  return target;
}

size_t MSG_Ret_GuildSetInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildSetInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildSetInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildSetInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildSetInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildSetInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildSetInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildSetInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildSetInfo_SC::MergeFrom(const MSG_Ret_GuildSetInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildSetInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_GuildSetInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildSetInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildSetInfo_SC::CopyFrom(const MSG_Ret_GuildSetInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildSetInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildSetInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildSetInfo_SC::InternalSwap(MSG_Ret_GuildSetInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildSetInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CheckDayWelfare_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CheckDayWelfare_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CheckDayWelfare_SC>()._has_bits_);
  static void set_has_canreceive(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_CheckDayWelfare_SC::MSG_Ret_CheckDayWelfare_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_CheckDayWelfare_SC)
}
MSG_Ret_CheckDayWelfare_SC::MSG_Ret_CheckDayWelfare_SC(const MSG_Ret_CheckDayWelfare_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  canreceive_ = from.canreceive_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_CheckDayWelfare_SC)
}

void MSG_Ret_CheckDayWelfare_SC::SharedCtor() {
  canreceive_ = false;
}

MSG_Ret_CheckDayWelfare_SC::~MSG_Ret_CheckDayWelfare_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_CheckDayWelfare_SC)
  SharedDtor();
}

void MSG_Ret_CheckDayWelfare_SC::SharedDtor() {
}

void MSG_Ret_CheckDayWelfare_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CheckDayWelfare_SC& MSG_Ret_CheckDayWelfare_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CheckDayWelfare_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CheckDayWelfare_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_CheckDayWelfare_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  canreceive_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CheckDayWelfare_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool canreceive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_canreceive(&has_bits);
          canreceive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CheckDayWelfare_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_CheckDayWelfare_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool canreceive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_canreceive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_CheckDayWelfare_SC)
  return target;
}

size_t MSG_Ret_CheckDayWelfare_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_CheckDayWelfare_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool canreceive = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CheckDayWelfare_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_CheckDayWelfare_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CheckDayWelfare_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CheckDayWelfare_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_CheckDayWelfare_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_CheckDayWelfare_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CheckDayWelfare_SC::MergeFrom(const MSG_Ret_CheckDayWelfare_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_CheckDayWelfare_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_canreceive()) {
    _internal_set_canreceive(from._internal_canreceive());
  }
}

void MSG_Ret_CheckDayWelfare_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_CheckDayWelfare_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CheckDayWelfare_SC::CopyFrom(const MSG_Ret_CheckDayWelfare_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_CheckDayWelfare_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CheckDayWelfare_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_CheckDayWelfare_SC::InternalSwap(MSG_Ret_CheckDayWelfare_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(canreceive_, other->canreceive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CheckDayWelfare_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GetDayWelfare_CS::InitAsDefaultInstance() {
}
class MSG_Req_GetDayWelfare_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GetDayWelfare_CS>()._has_bits_);
};

MSG_Req_GetDayWelfare_CS::MSG_Req_GetDayWelfare_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GetDayWelfare_CS)
}
MSG_Req_GetDayWelfare_CS::MSG_Req_GetDayWelfare_CS(const MSG_Req_GetDayWelfare_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GetDayWelfare_CS)
}

void MSG_Req_GetDayWelfare_CS::SharedCtor() {
}

MSG_Req_GetDayWelfare_CS::~MSG_Req_GetDayWelfare_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GetDayWelfare_CS)
  SharedDtor();
}

void MSG_Req_GetDayWelfare_CS::SharedDtor() {
}

void MSG_Req_GetDayWelfare_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GetDayWelfare_CS& MSG_Req_GetDayWelfare_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GetDayWelfare_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GetDayWelfare_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GetDayWelfare_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GetDayWelfare_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GetDayWelfare_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GetDayWelfare_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GetDayWelfare_CS)
  return target;
}

size_t MSG_Req_GetDayWelfare_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GetDayWelfare_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GetDayWelfare_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GetDayWelfare_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GetDayWelfare_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GetDayWelfare_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GetDayWelfare_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GetDayWelfare_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GetDayWelfare_CS::MergeFrom(const MSG_Req_GetDayWelfare_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GetDayWelfare_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GetDayWelfare_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GetDayWelfare_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GetDayWelfare_CS::CopyFrom(const MSG_Req_GetDayWelfare_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GetDayWelfare_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GetDayWelfare_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GetDayWelfare_CS::InternalSwap(MSG_Req_GetDayWelfare_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GetDayWelfare_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GetDayWelfare_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GetDayWelfare_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GetDayWelfare_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_GetDayWelfare_SC::MSG_Ret_GetDayWelfare_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GetDayWelfare_SC)
}
MSG_Ret_GetDayWelfare_SC::MSG_Ret_GetDayWelfare_SC(const MSG_Ret_GetDayWelfare_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GetDayWelfare_SC)
}

void MSG_Ret_GetDayWelfare_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_GetDayWelfare_SC::~MSG_Ret_GetDayWelfare_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GetDayWelfare_SC)
  SharedDtor();
}

void MSG_Ret_GetDayWelfare_SC::SharedDtor() {
}

void MSG_Ret_GetDayWelfare_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GetDayWelfare_SC& MSG_Ret_GetDayWelfare_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GetDayWelfare_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GetDayWelfare_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GetDayWelfare_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GetDayWelfare_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GetDayWelfare_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GetDayWelfare_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GetDayWelfare_SC)
  return target;
}

size_t MSG_Ret_GetDayWelfare_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GetDayWelfare_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GetDayWelfare_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GetDayWelfare_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GetDayWelfare_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GetDayWelfare_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GetDayWelfare_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GetDayWelfare_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GetDayWelfare_SC::MergeFrom(const MSG_Ret_GetDayWelfare_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GetDayWelfare_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_GetDayWelfare_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GetDayWelfare_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GetDayWelfare_SC::CopyFrom(const MSG_Ret_GetDayWelfare_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GetDayWelfare_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GetDayWelfare_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GetDayWelfare_SC::InternalSwap(MSG_Ret_GetDayWelfare_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GetDayWelfare_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildGoods_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildGoods_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildGoods_CS>()._has_bits_);
  static void set_has_goodstype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_GuildGoods_CS::MSG_Req_GuildGoods_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildGoods_CS)
}
MSG_Req_GuildGoods_CS::MSG_Req_GuildGoods_CS(const MSG_Req_GuildGoods_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  goodstype_ = from.goodstype_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildGoods_CS)
}

void MSG_Req_GuildGoods_CS::SharedCtor() {
  goodstype_ = 0u;
}

MSG_Req_GuildGoods_CS::~MSG_Req_GuildGoods_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildGoods_CS)
  SharedDtor();
}

void MSG_Req_GuildGoods_CS::SharedDtor() {
}

void MSG_Req_GuildGoods_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildGoods_CS& MSG_Req_GuildGoods_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildGoods_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildGoods_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildGoods_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  goodstype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildGoods_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 goodstype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_goodstype(&has_bits);
          goodstype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildGoods_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildGoods_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 goodstype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_goodstype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildGoods_CS)
  return target;
}

size_t MSG_Req_GuildGoods_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildGoods_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 goodstype = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_goodstype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildGoods_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildGoods_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildGoods_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildGoods_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildGoods_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildGoods_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildGoods_CS::MergeFrom(const MSG_Req_GuildGoods_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildGoods_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_goodstype()) {
    _internal_set_goodstype(from._internal_goodstype());
  }
}

void MSG_Req_GuildGoods_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildGoods_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildGoods_CS::CopyFrom(const MSG_Req_GuildGoods_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildGoods_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildGoods_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildGoods_CS::InternalSwap(MSG_Req_GuildGoods_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(goodstype_, other->goodstype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildGoods_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GoodsInfo::InitAsDefaultInstance() {
}
class GoodsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GoodsInfo>()._has_bits_);
  static void set_has_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_submitnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_award(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GoodsInfo::GoodsInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.GoodsInfo)
}
GoodsInfo::GoodsInfo(const GoodsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tagid_, &from.tagid_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_) -
    reinterpret_cast<char*>(&tagid_)) + sizeof(award_));
  // @@protoc_insertion_point(copy_constructor:guild.GoodsInfo)
}

void GoodsInfo::SharedCtor() {
  ::memset(&tagid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_) -
      reinterpret_cast<char*>(&tagid_)) + sizeof(award_));
}

GoodsInfo::~GoodsInfo() {
  // @@protoc_insertion_point(destructor:guild.GoodsInfo)
  SharedDtor();
}

void GoodsInfo::SharedDtor() {
}

void GoodsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GoodsInfo& GoodsInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GoodsInfo_guild_2eproto.base);
  return *internal_default_instance();
}


void GoodsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.GoodsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&tagid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&award_) -
        reinterpret_cast<char*>(&tagid_)) + sizeof(award_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GoodsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tagid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tagid(&has_bits);
          tagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 submitnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_submitnum(&has_bits);
          submitnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 award = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_award(&has_bits);
          award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GoodsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.GoodsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tagid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tagid(), target);
  }

  // optional uint32 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_itemid(), target);
  }

  // optional uint32 submitnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_submitnum(), target);
  }

  // optional uint32 award = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_award(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.GoodsInfo)
  return target;
}

size_t GoodsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.GoodsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 tagid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tagid());
    }

    // optional uint32 itemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_itemid());
    }

    // optional uint32 submitnum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_submitnum());
    }

    // optional uint32 award = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_award());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GoodsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.GoodsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GoodsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GoodsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.GoodsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.GoodsInfo)
    MergeFrom(*source);
  }
}

void GoodsInfo::MergeFrom(const GoodsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.GoodsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tagid_ = from.tagid_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      submitnum_ = from.submitnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      award_ = from.award_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GoodsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.GoodsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsInfo::CopyFrom(const GoodsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.GoodsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsInfo::IsInitialized() const {
  return true;
}

void GoodsInfo::InternalSwap(GoodsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tagid_, other->tagid_);
  swap(itemid_, other->itemid_);
  swap(submitnum_, other->submitnum_);
  swap(award_, other->award_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GoodsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildGoods_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildGoods_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildGoods_SC>()._has_bits_);
  static void set_has_multireward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nexttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_goodstype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_Ret_GuildGoods_SC::MSG_Ret_GuildGoods_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildGoods_SC)
}
MSG_Ret_GuildGoods_SC::MSG_Ret_GuildGoods_SC(const MSG_Ret_GuildGoods_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&multireward_, &from.multireward_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodstype_) -
    reinterpret_cast<char*>(&multireward_)) + sizeof(goodstype_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildGoods_SC)
}

void MSG_Ret_GuildGoods_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildGoods_SC_guild_2eproto.base);
  ::memset(&multireward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodstype_) -
      reinterpret_cast<char*>(&multireward_)) + sizeof(goodstype_));
}

MSG_Ret_GuildGoods_SC::~MSG_Ret_GuildGoods_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildGoods_SC)
  SharedDtor();
}

void MSG_Ret_GuildGoods_SC::SharedDtor() {
}

void MSG_Ret_GuildGoods_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildGoods_SC& MSG_Ret_GuildGoods_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildGoods_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildGoods_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildGoods_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&multireward_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goodstype_) -
        reinterpret_cast<char*>(&multireward_)) + sizeof(goodstype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildGoods_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guild.GoodsInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 multireward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_multireward(&has_bits);
          multireward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 remain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_remain(&has_bits);
          remain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nexttime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_nexttime(&has_bits);
          nexttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 goodstype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_goodstype(&has_bits);
          goodstype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildGoods_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildGoods_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guild.GoodsInfo items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 multireward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_multireward(), target);
  }

  // optional uint32 remain = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_remain(), target);
  }

  // optional uint32 nexttime = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nexttime(), target);
  }

  // optional uint32 goodstype = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_goodstype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildGoods_SC)
  return target;
}

size_t MSG_Ret_GuildGoods_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildGoods_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.GoodsInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 multireward = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_multireward());
    }

    // optional uint32 remain = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_remain());
    }

    // optional uint32 nexttime = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nexttime());
    }

    // optional uint32 goodstype = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_goodstype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildGoods_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildGoods_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildGoods_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildGoods_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildGoods_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildGoods_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildGoods_SC::MergeFrom(const MSG_Ret_GuildGoods_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildGoods_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      multireward_ = from.multireward_;
    }
    if (cached_has_bits & 0x00000002u) {
      remain_ = from.remain_;
    }
    if (cached_has_bits & 0x00000004u) {
      nexttime_ = from.nexttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      goodstype_ = from.goodstype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_GuildGoods_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildGoods_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildGoods_SC::CopyFrom(const MSG_Ret_GuildGoods_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildGoods_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildGoods_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildGoods_SC::InternalSwap(MSG_Ret_GuildGoods_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(multireward_, other->multireward_);
  swap(remain_, other->remain_);
  swap(nexttime_, other->nexttime_);
  swap(goodstype_, other->goodstype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildGoods_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_SubmitGuildGoods_CS::InitAsDefaultInstance() {
}
class MSG_Req_SubmitGuildGoods_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_SubmitGuildGoods_CS>()._has_bits_);
  static void set_has_tagid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_goodstype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_SubmitGuildGoods_CS::MSG_Req_SubmitGuildGoods_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_SubmitGuildGoods_CS)
}
MSG_Req_SubmitGuildGoods_CS::MSG_Req_SubmitGuildGoods_CS(const MSG_Req_SubmitGuildGoods_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tagid_, &from.tagid_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodstype_) -
    reinterpret_cast<char*>(&tagid_)) + sizeof(goodstype_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_SubmitGuildGoods_CS)
}

void MSG_Req_SubmitGuildGoods_CS::SharedCtor() {
  ::memset(&tagid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodstype_) -
      reinterpret_cast<char*>(&tagid_)) + sizeof(goodstype_));
}

MSG_Req_SubmitGuildGoods_CS::~MSG_Req_SubmitGuildGoods_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_SubmitGuildGoods_CS)
  SharedDtor();
}

void MSG_Req_SubmitGuildGoods_CS::SharedDtor() {
}

void MSG_Req_SubmitGuildGoods_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_SubmitGuildGoods_CS& MSG_Req_SubmitGuildGoods_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_SubmitGuildGoods_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_SubmitGuildGoods_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_SubmitGuildGoods_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tagid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goodstype_) -
        reinterpret_cast<char*>(&tagid_)) + sizeof(goodstype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_SubmitGuildGoods_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tagid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tagid(&has_bits);
          tagid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 goodstype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_goodstype(&has_bits);
          goodstype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_SubmitGuildGoods_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_SubmitGuildGoods_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tagid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tagid(), target);
  }

  // optional uint32 goodstype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_goodstype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_SubmitGuildGoods_CS)
  return target;
}

size_t MSG_Req_SubmitGuildGoods_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_SubmitGuildGoods_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 tagid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tagid());
    }

    // optional uint32 goodstype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_goodstype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_SubmitGuildGoods_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_SubmitGuildGoods_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_SubmitGuildGoods_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_SubmitGuildGoods_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_SubmitGuildGoods_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_SubmitGuildGoods_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_SubmitGuildGoods_CS::MergeFrom(const MSG_Req_SubmitGuildGoods_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_SubmitGuildGoods_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tagid_ = from.tagid_;
    }
    if (cached_has_bits & 0x00000002u) {
      goodstype_ = from.goodstype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_SubmitGuildGoods_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_SubmitGuildGoods_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_SubmitGuildGoods_CS::CopyFrom(const MSG_Req_SubmitGuildGoods_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_SubmitGuildGoods_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_SubmitGuildGoods_CS::IsInitialized() const {
  return true;
}

void MSG_Req_SubmitGuildGoods_CS::InternalSwap(MSG_Req_SubmitGuildGoods_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tagid_, other->tagid_);
  swap(goodstype_, other->goodstype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_SubmitGuildGoods_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_SubmitGuildGoods_SC::InitAsDefaultInstance() {
}
class MSG_Ret_SubmitGuildGoods_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_SubmitGuildGoods_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_goodstype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_SubmitGuildGoods_SC::MSG_Ret_SubmitGuildGoods_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_SubmitGuildGoods_SC)
}
MSG_Ret_SubmitGuildGoods_SC::MSG_Ret_SubmitGuildGoods_SC(const MSG_Ret_SubmitGuildGoods_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodstype_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(goodstype_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_SubmitGuildGoods_SC)
}

void MSG_Ret_SubmitGuildGoods_SC::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodstype_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(goodstype_));
}

MSG_Ret_SubmitGuildGoods_SC::~MSG_Ret_SubmitGuildGoods_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_SubmitGuildGoods_SC)
  SharedDtor();
}

void MSG_Ret_SubmitGuildGoods_SC::SharedDtor() {
}

void MSG_Ret_SubmitGuildGoods_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_SubmitGuildGoods_SC& MSG_Ret_SubmitGuildGoods_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_SubmitGuildGoods_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_SubmitGuildGoods_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_SubmitGuildGoods_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goodstype_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(goodstype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_SubmitGuildGoods_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 goodstype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_goodstype(&has_bits);
          goodstype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_SubmitGuildGoods_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_SubmitGuildGoods_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional uint32 goodstype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_goodstype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_SubmitGuildGoods_SC)
  return target;
}

size_t MSG_Ret_SubmitGuildGoods_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_SubmitGuildGoods_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

    // optional uint32 goodstype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_goodstype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_SubmitGuildGoods_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_SubmitGuildGoods_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_SubmitGuildGoods_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_SubmitGuildGoods_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_SubmitGuildGoods_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_SubmitGuildGoods_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_SubmitGuildGoods_SC::MergeFrom(const MSG_Ret_SubmitGuildGoods_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_SubmitGuildGoods_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      goodstype_ = from.goodstype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_SubmitGuildGoods_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_SubmitGuildGoods_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_SubmitGuildGoods_SC::CopyFrom(const MSG_Ret_SubmitGuildGoods_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_SubmitGuildGoods_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_SubmitGuildGoods_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_SubmitGuildGoods_SC::InternalSwap(MSG_Ret_SubmitGuildGoods_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
  swap(goodstype_, other->goodstype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_SubmitGuildGoods_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_QuitGuild_CS::InitAsDefaultInstance() {
}
class MSG_Req_QuitGuild_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_QuitGuild_CS>()._has_bits_);
};

MSG_Req_QuitGuild_CS::MSG_Req_QuitGuild_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_QuitGuild_CS)
}
MSG_Req_QuitGuild_CS::MSG_Req_QuitGuild_CS(const MSG_Req_QuitGuild_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_QuitGuild_CS)
}

void MSG_Req_QuitGuild_CS::SharedCtor() {
}

MSG_Req_QuitGuild_CS::~MSG_Req_QuitGuild_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_QuitGuild_CS)
  SharedDtor();
}

void MSG_Req_QuitGuild_CS::SharedDtor() {
}

void MSG_Req_QuitGuild_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_QuitGuild_CS& MSG_Req_QuitGuild_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_QuitGuild_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_QuitGuild_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_QuitGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_QuitGuild_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_QuitGuild_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_QuitGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_QuitGuild_CS)
  return target;
}

size_t MSG_Req_QuitGuild_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_QuitGuild_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_QuitGuild_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_QuitGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_QuitGuild_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_QuitGuild_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_QuitGuild_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_QuitGuild_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_QuitGuild_CS::MergeFrom(const MSG_Req_QuitGuild_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_QuitGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_QuitGuild_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_QuitGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_QuitGuild_CS::CopyFrom(const MSG_Req_QuitGuild_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_QuitGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_QuitGuild_CS::IsInitialized() const {
  return true;
}

void MSG_Req_QuitGuild_CS::InternalSwap(MSG_Req_QuitGuild_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_QuitGuild_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_QuitGuild_SC::InitAsDefaultInstance() {
}
class MSG_Ret_QuitGuild_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_QuitGuild_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_QuitGuild_SC::MSG_Ret_QuitGuild_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_QuitGuild_SC)
}
MSG_Ret_QuitGuild_SC::MSG_Ret_QuitGuild_SC(const MSG_Ret_QuitGuild_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_QuitGuild_SC)
}

void MSG_Ret_QuitGuild_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_QuitGuild_SC::~MSG_Ret_QuitGuild_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_QuitGuild_SC)
  SharedDtor();
}

void MSG_Ret_QuitGuild_SC::SharedDtor() {
}

void MSG_Ret_QuitGuild_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_QuitGuild_SC& MSG_Ret_QuitGuild_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_QuitGuild_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_QuitGuild_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_QuitGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_QuitGuild_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_QuitGuild_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_QuitGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_QuitGuild_SC)
  return target;
}

size_t MSG_Ret_QuitGuild_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_QuitGuild_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_QuitGuild_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_QuitGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_QuitGuild_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_QuitGuild_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_QuitGuild_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_QuitGuild_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_QuitGuild_SC::MergeFrom(const MSG_Ret_QuitGuild_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_QuitGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_QuitGuild_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_QuitGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_QuitGuild_SC::CopyFrom(const MSG_Ret_QuitGuild_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_QuitGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_QuitGuild_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_QuitGuild_SC::InternalSwap(MSG_Ret_QuitGuild_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_QuitGuild_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_FireGuildMember_CS::InitAsDefaultInstance() {
}
class MSG_Req_FireGuildMember_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_FireGuildMember_CS>()._has_bits_);
  static void set_has_leavememberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_FireGuildMember_CS::MSG_Req_FireGuildMember_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_FireGuildMember_CS)
}
MSG_Req_FireGuildMember_CS::MSG_Req_FireGuildMember_CS(const MSG_Req_FireGuildMember_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leavememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_leavememberid()) {
    leavememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leavememberid_);
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_FireGuildMember_CS)
}

void MSG_Req_FireGuildMember_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_FireGuildMember_CS_guild_2eproto.base);
  leavememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Req_FireGuildMember_CS::~MSG_Req_FireGuildMember_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_FireGuildMember_CS)
  SharedDtor();
}

void MSG_Req_FireGuildMember_CS::SharedDtor() {
  leavememberid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_FireGuildMember_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_FireGuildMember_CS& MSG_Req_FireGuildMember_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_FireGuildMember_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_FireGuildMember_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_FireGuildMember_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leavememberid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_FireGuildMember_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string leavememberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_leavememberid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Req_FireGuildMember_CS.leavememberid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_FireGuildMember_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_FireGuildMember_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string leavememberid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leavememberid().data(), static_cast<int>(this->_internal_leavememberid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Req_FireGuildMember_CS.leavememberid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_leavememberid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_FireGuildMember_CS)
  return target;
}

size_t MSG_Req_FireGuildMember_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_FireGuildMember_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string leavememberid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leavememberid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_FireGuildMember_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_FireGuildMember_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_FireGuildMember_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_FireGuildMember_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_FireGuildMember_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_FireGuildMember_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_FireGuildMember_CS::MergeFrom(const MSG_Req_FireGuildMember_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_FireGuildMember_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_leavememberid()) {
    _has_bits_[0] |= 0x00000001u;
    leavememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leavememberid_);
  }
}

void MSG_Req_FireGuildMember_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_FireGuildMember_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_FireGuildMember_CS::CopyFrom(const MSG_Req_FireGuildMember_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_FireGuildMember_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_FireGuildMember_CS::IsInitialized() const {
  return true;
}

void MSG_Req_FireGuildMember_CS::InternalSwap(MSG_Req_FireGuildMember_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  leavememberid_.Swap(&other->leavememberid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_FireGuildMember_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_FireGuildMember_SC::InitAsDefaultInstance() {
}
class MSG_Ret_FireGuildMember_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_FireGuildMember_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leavememberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_FireGuildMember_SC::MSG_Ret_FireGuildMember_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_FireGuildMember_SC)
}
MSG_Ret_FireGuildMember_SC::MSG_Ret_FireGuildMember_SC(const MSG_Ret_FireGuildMember_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leavememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_leavememberid()) {
    leavememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leavememberid_);
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_FireGuildMember_SC)
}

void MSG_Ret_FireGuildMember_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_FireGuildMember_SC_guild_2eproto.base);
  leavememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
}

MSG_Ret_FireGuildMember_SC::~MSG_Ret_FireGuildMember_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_FireGuildMember_SC)
  SharedDtor();
}

void MSG_Ret_FireGuildMember_SC::SharedDtor() {
  leavememberid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_FireGuildMember_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_FireGuildMember_SC& MSG_Ret_FireGuildMember_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_FireGuildMember_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_FireGuildMember_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_FireGuildMember_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leavememberid_.ClearNonDefaultToEmptyNoArena();
  }
  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_FireGuildMember_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string leavememberid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_leavememberid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Ret_FireGuildMember_SC.leavememberid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_FireGuildMember_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_FireGuildMember_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional string leavememberid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leavememberid().data(), static_cast<int>(this->_internal_leavememberid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Ret_FireGuildMember_SC.leavememberid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leavememberid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_FireGuildMember_SC)
  return target;
}

size_t MSG_Ret_FireGuildMember_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_FireGuildMember_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string leavememberid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leavememberid());
    }

    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_FireGuildMember_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_FireGuildMember_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_FireGuildMember_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_FireGuildMember_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_FireGuildMember_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_FireGuildMember_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_FireGuildMember_SC::MergeFrom(const MSG_Ret_FireGuildMember_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_FireGuildMember_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      leavememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leavememberid_);
    }
    if (cached_has_bits & 0x00000002u) {
      retcode_ = from.retcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_FireGuildMember_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_FireGuildMember_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_FireGuildMember_SC::CopyFrom(const MSG_Ret_FireGuildMember_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_FireGuildMember_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_FireGuildMember_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_FireGuildMember_SC::InternalSwap(MSG_Ret_FireGuildMember_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  leavememberid_.Swap(&other->leavememberid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_FireGuildMember_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_BeFiredGuildMember_SC::InitAsDefaultInstance() {
}
class MSG_Ret_BeFiredGuildMember_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_BeFiredGuildMember_SC>()._has_bits_);
};

MSG_Ret_BeFiredGuildMember_SC::MSG_Ret_BeFiredGuildMember_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_BeFiredGuildMember_SC)
}
MSG_Ret_BeFiredGuildMember_SC::MSG_Ret_BeFiredGuildMember_SC(const MSG_Ret_BeFiredGuildMember_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_BeFiredGuildMember_SC)
}

void MSG_Ret_BeFiredGuildMember_SC::SharedCtor() {
}

MSG_Ret_BeFiredGuildMember_SC::~MSG_Ret_BeFiredGuildMember_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_BeFiredGuildMember_SC)
  SharedDtor();
}

void MSG_Ret_BeFiredGuildMember_SC::SharedDtor() {
}

void MSG_Ret_BeFiredGuildMember_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_BeFiredGuildMember_SC& MSG_Ret_BeFiredGuildMember_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_BeFiredGuildMember_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_BeFiredGuildMember_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_BeFiredGuildMember_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_BeFiredGuildMember_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_BeFiredGuildMember_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_BeFiredGuildMember_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_BeFiredGuildMember_SC)
  return target;
}

size_t MSG_Ret_BeFiredGuildMember_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_BeFiredGuildMember_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_BeFiredGuildMember_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_BeFiredGuildMember_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_BeFiredGuildMember_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_BeFiredGuildMember_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_BeFiredGuildMember_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_BeFiredGuildMember_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_BeFiredGuildMember_SC::MergeFrom(const MSG_Ret_BeFiredGuildMember_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_BeFiredGuildMember_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Ret_BeFiredGuildMember_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_BeFiredGuildMember_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_BeFiredGuildMember_SC::CopyFrom(const MSG_Ret_BeFiredGuildMember_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_BeFiredGuildMember_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_BeFiredGuildMember_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_BeFiredGuildMember_SC::InternalSwap(MSG_Ret_BeFiredGuildMember_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_BeFiredGuildMember_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildInvite_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildInvite_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildInvite_CS>()._has_bits_);
  static void set_has_joinmemberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_GuildInvite_CS::MSG_Req_GuildInvite_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildInvite_CS)
}
MSG_Req_GuildInvite_CS::MSG_Req_GuildInvite_CS(const MSG_Req_GuildInvite_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  joinmemberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_joinmemberid()) {
    joinmemberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.joinmemberid_);
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildInvite_CS)
}

void MSG_Req_GuildInvite_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_GuildInvite_CS_guild_2eproto.base);
  joinmemberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Req_GuildInvite_CS::~MSG_Req_GuildInvite_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildInvite_CS)
  SharedDtor();
}

void MSG_Req_GuildInvite_CS::SharedDtor() {
  joinmemberid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_GuildInvite_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildInvite_CS& MSG_Req_GuildInvite_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildInvite_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildInvite_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildInvite_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    joinmemberid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildInvite_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string joinmemberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_joinmemberid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Req_GuildInvite_CS.joinmemberid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildInvite_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildInvite_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string joinmemberid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_joinmemberid().data(), static_cast<int>(this->_internal_joinmemberid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Req_GuildInvite_CS.joinmemberid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_joinmemberid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildInvite_CS)
  return target;
}

size_t MSG_Req_GuildInvite_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildInvite_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string joinmemberid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_joinmemberid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildInvite_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildInvite_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildInvite_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildInvite_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildInvite_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildInvite_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildInvite_CS::MergeFrom(const MSG_Req_GuildInvite_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildInvite_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_joinmemberid()) {
    _has_bits_[0] |= 0x00000001u;
    joinmemberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.joinmemberid_);
  }
}

void MSG_Req_GuildInvite_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildInvite_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildInvite_CS::CopyFrom(const MSG_Req_GuildInvite_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildInvite_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildInvite_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildInvite_CS::InternalSwap(MSG_Req_GuildInvite_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  joinmemberid_.Swap(&other->joinmemberid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildInvite_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildInvite_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildInvite_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildInvite_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guildname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_GuildInvite_SC::MSG_Ret_GuildInvite_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildInvite_SC)
}
MSG_Ret_GuildInvite_SC::MSG_Ret_GuildInvite_SC(const MSG_Ret_GuildInvite_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildname()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildInvite_SC)
}

void MSG_Ret_GuildInvite_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildInvite_SC_guild_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
}

MSG_Ret_GuildInvite_SC::~MSG_Ret_GuildInvite_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildInvite_SC)
  SharedDtor();
}

void MSG_Ret_GuildInvite_SC::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_GuildInvite_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildInvite_SC& MSG_Ret_GuildInvite_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildInvite_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildInvite_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildInvite_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      guildname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildInvite_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Ret_GuildInvite_SC.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Ret_GuildInvite_SC.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guildname = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Ret_GuildInvite_SC.guildname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildInvite_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildInvite_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Ret_GuildInvite_SC.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Ret_GuildInvite_SC.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string guildname = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Ret_GuildInvite_SC.guildname");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_guildname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildInvite_SC)
  return target;
}

size_t MSG_Ret_GuildInvite_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildInvite_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string guildname = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildname());
    }

    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildInvite_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildInvite_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildInvite_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildInvite_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildInvite_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildInvite_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildInvite_SC::MergeFrom(const MSG_Ret_GuildInvite_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildInvite_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000008u) {
      retcode_ = from.retcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_GuildInvite_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildInvite_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildInvite_SC::CopyFrom(const MSG_Ret_GuildInvite_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildInvite_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildInvite_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildInvite_SC::InternalSwap(MSG_Ret_GuildInvite_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildInvite_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildInviteConfirm_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildInviteConfirm_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildInviteConfirm_CS>()._has_bits_);
  static void set_has_inviterid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_GuildInviteConfirm_CS::MSG_Req_GuildInviteConfirm_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildInviteConfirm_CS)
}
MSG_Req_GuildInviteConfirm_CS::MSG_Req_GuildInviteConfirm_CS(const MSG_Req_GuildInviteConfirm_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inviterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inviterid()) {
    inviterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildInviteConfirm_CS)
}

void MSG_Req_GuildInviteConfirm_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_GuildInviteConfirm_CS_guild_2eproto.base);
  inviterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Req_GuildInviteConfirm_CS::~MSG_Req_GuildInviteConfirm_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildInviteConfirm_CS)
  SharedDtor();
}

void MSG_Req_GuildInviteConfirm_CS::SharedDtor() {
  inviterid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_GuildInviteConfirm_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildInviteConfirm_CS& MSG_Req_GuildInviteConfirm_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildInviteConfirm_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildInviteConfirm_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildInviteConfirm_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    inviterid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildInviteConfirm_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string inviterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_inviterid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Req_GuildInviteConfirm_CS.inviterid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildInviteConfirm_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildInviteConfirm_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string inviterid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inviterid().data(), static_cast<int>(this->_internal_inviterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Req_GuildInviteConfirm_CS.inviterid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inviterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildInviteConfirm_CS)
  return target;
}

size_t MSG_Req_GuildInviteConfirm_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildInviteConfirm_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string inviterid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inviterid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildInviteConfirm_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildInviteConfirm_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildInviteConfirm_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildInviteConfirm_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildInviteConfirm_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildInviteConfirm_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildInviteConfirm_CS::MergeFrom(const MSG_Req_GuildInviteConfirm_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildInviteConfirm_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inviterid()) {
    _has_bits_[0] |= 0x00000001u;
    inviterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
  }
}

void MSG_Req_GuildInviteConfirm_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildInviteConfirm_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildInviteConfirm_CS::CopyFrom(const MSG_Req_GuildInviteConfirm_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildInviteConfirm_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildInviteConfirm_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildInviteConfirm_CS::InternalSwap(MSG_Req_GuildInviteConfirm_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inviterid_.Swap(&other->inviterid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildInviteConfirm_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildInviteConfirm_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildInviteConfirm_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildInviteConfirm_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_GuildInviteConfirm_SC::MSG_Ret_GuildInviteConfirm_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildInviteConfirm_SC)
}
MSG_Ret_GuildInviteConfirm_SC::MSG_Ret_GuildInviteConfirm_SC(const MSG_Ret_GuildInviteConfirm_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildInviteConfirm_SC)
}

void MSG_Ret_GuildInviteConfirm_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_GuildInviteConfirm_SC::~MSG_Ret_GuildInviteConfirm_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildInviteConfirm_SC)
  SharedDtor();
}

void MSG_Ret_GuildInviteConfirm_SC::SharedDtor() {
}

void MSG_Ret_GuildInviteConfirm_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildInviteConfirm_SC& MSG_Ret_GuildInviteConfirm_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildInviteConfirm_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildInviteConfirm_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildInviteConfirm_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildInviteConfirm_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildInviteConfirm_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildInviteConfirm_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildInviteConfirm_SC)
  return target;
}

size_t MSG_Ret_GuildInviteConfirm_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildInviteConfirm_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildInviteConfirm_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildInviteConfirm_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildInviteConfirm_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildInviteConfirm_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildInviteConfirm_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildInviteConfirm_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildInviteConfirm_SC::MergeFrom(const MSG_Ret_GuildInviteConfirm_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildInviteConfirm_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_GuildInviteConfirm_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildInviteConfirm_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildInviteConfirm_SC::CopyFrom(const MSG_Ret_GuildInviteConfirm_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildInviteConfirm_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildInviteConfirm_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildInviteConfirm_SC::InternalSwap(MSG_Ret_GuildInviteConfirm_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildInviteConfirm_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_DismissGuild_CS::InitAsDefaultInstance() {
}
class MSG_Req_DismissGuild_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_DismissGuild_CS>()._has_bits_);
};

MSG_Req_DismissGuild_CS::MSG_Req_DismissGuild_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_DismissGuild_CS)
}
MSG_Req_DismissGuild_CS::MSG_Req_DismissGuild_CS(const MSG_Req_DismissGuild_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_DismissGuild_CS)
}

void MSG_Req_DismissGuild_CS::SharedCtor() {
}

MSG_Req_DismissGuild_CS::~MSG_Req_DismissGuild_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_DismissGuild_CS)
  SharedDtor();
}

void MSG_Req_DismissGuild_CS::SharedDtor() {
}

void MSG_Req_DismissGuild_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_DismissGuild_CS& MSG_Req_DismissGuild_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_DismissGuild_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_DismissGuild_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_DismissGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_DismissGuild_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_DismissGuild_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_DismissGuild_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_DismissGuild_CS)
  return target;
}

size_t MSG_Req_DismissGuild_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_DismissGuild_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_DismissGuild_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_DismissGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_DismissGuild_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_DismissGuild_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_DismissGuild_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_DismissGuild_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_DismissGuild_CS::MergeFrom(const MSG_Req_DismissGuild_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_DismissGuild_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_DismissGuild_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_DismissGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_DismissGuild_CS::CopyFrom(const MSG_Req_DismissGuild_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_DismissGuild_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_DismissGuild_CS::IsInitialized() const {
  return true;
}

void MSG_Req_DismissGuild_CS::InternalSwap(MSG_Req_DismissGuild_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_DismissGuild_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_DismissGuild_SC::InitAsDefaultInstance() {
}
class MSG_Ret_DismissGuild_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_DismissGuild_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_DismissGuild_SC::MSG_Ret_DismissGuild_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_DismissGuild_SC)
}
MSG_Ret_DismissGuild_SC::MSG_Ret_DismissGuild_SC(const MSG_Ret_DismissGuild_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_DismissGuild_SC)
}

void MSG_Ret_DismissGuild_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_DismissGuild_SC::~MSG_Ret_DismissGuild_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_DismissGuild_SC)
  SharedDtor();
}

void MSG_Ret_DismissGuild_SC::SharedDtor() {
}

void MSG_Ret_DismissGuild_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_DismissGuild_SC& MSG_Ret_DismissGuild_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_DismissGuild_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_DismissGuild_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_DismissGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_DismissGuild_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_DismissGuild_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_DismissGuild_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_DismissGuild_SC)
  return target;
}

size_t MSG_Ret_DismissGuild_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_DismissGuild_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_DismissGuild_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_DismissGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_DismissGuild_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_DismissGuild_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_DismissGuild_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_DismissGuild_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_DismissGuild_SC::MergeFrom(const MSG_Ret_DismissGuild_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_DismissGuild_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_DismissGuild_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_DismissGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_DismissGuild_SC::CopyFrom(const MSG_Ret_DismissGuild_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_DismissGuild_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_DismissGuild_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_DismissGuild_SC::InternalSwap(MSG_Ret_DismissGuild_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_DismissGuild_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ChangeGuildMaster_CS::InitAsDefaultInstance() {
}
class MSG_Req_ChangeGuildMaster_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ChangeGuildMaster_CS>()._has_bits_);
  static void set_has_newmasterid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_ChangeGuildMaster_CS::MSG_Req_ChangeGuildMaster_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_ChangeGuildMaster_CS)
}
MSG_Req_ChangeGuildMaster_CS::MSG_Req_ChangeGuildMaster_CS(const MSG_Req_ChangeGuildMaster_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  newmasterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_newmasterid()) {
    newmasterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newmasterid_);
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_ChangeGuildMaster_CS)
}

void MSG_Req_ChangeGuildMaster_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_ChangeGuildMaster_CS_guild_2eproto.base);
  newmasterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Req_ChangeGuildMaster_CS::~MSG_Req_ChangeGuildMaster_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_ChangeGuildMaster_CS)
  SharedDtor();
}

void MSG_Req_ChangeGuildMaster_CS::SharedDtor() {
  newmasterid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_ChangeGuildMaster_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ChangeGuildMaster_CS& MSG_Req_ChangeGuildMaster_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ChangeGuildMaster_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ChangeGuildMaster_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_ChangeGuildMaster_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    newmasterid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ChangeGuildMaster_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string newmasterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_newmasterid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Req_ChangeGuildMaster_CS.newmasterid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ChangeGuildMaster_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_ChangeGuildMaster_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string newmasterid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newmasterid().data(), static_cast<int>(this->_internal_newmasterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Req_ChangeGuildMaster_CS.newmasterid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newmasterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_ChangeGuildMaster_CS)
  return target;
}

size_t MSG_Req_ChangeGuildMaster_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_ChangeGuildMaster_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string newmasterid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newmasterid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ChangeGuildMaster_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_ChangeGuildMaster_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ChangeGuildMaster_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ChangeGuildMaster_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_ChangeGuildMaster_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_ChangeGuildMaster_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ChangeGuildMaster_CS::MergeFrom(const MSG_Req_ChangeGuildMaster_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_ChangeGuildMaster_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_newmasterid()) {
    _has_bits_[0] |= 0x00000001u;
    newmasterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newmasterid_);
  }
}

void MSG_Req_ChangeGuildMaster_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_ChangeGuildMaster_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ChangeGuildMaster_CS::CopyFrom(const MSG_Req_ChangeGuildMaster_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_ChangeGuildMaster_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ChangeGuildMaster_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ChangeGuildMaster_CS::InternalSwap(MSG_Req_ChangeGuildMaster_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  newmasterid_.Swap(&other->newmasterid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ChangeGuildMaster_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_ChangeGuildMaster_SC::InitAsDefaultInstance() {
}
class MSG_Ret_ChangeGuildMaster_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_ChangeGuildMaster_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_ChangeGuildMaster_SC::MSG_Ret_ChangeGuildMaster_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_ChangeGuildMaster_SC)
}
MSG_Ret_ChangeGuildMaster_SC::MSG_Ret_ChangeGuildMaster_SC(const MSG_Ret_ChangeGuildMaster_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_ChangeGuildMaster_SC)
}

void MSG_Ret_ChangeGuildMaster_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_ChangeGuildMaster_SC::~MSG_Ret_ChangeGuildMaster_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_ChangeGuildMaster_SC)
  SharedDtor();
}

void MSG_Ret_ChangeGuildMaster_SC::SharedDtor() {
}

void MSG_Ret_ChangeGuildMaster_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_ChangeGuildMaster_SC& MSG_Ret_ChangeGuildMaster_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_ChangeGuildMaster_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_ChangeGuildMaster_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_ChangeGuildMaster_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_ChangeGuildMaster_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_ChangeGuildMaster_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_ChangeGuildMaster_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_ChangeGuildMaster_SC)
  return target;
}

size_t MSG_Ret_ChangeGuildMaster_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_ChangeGuildMaster_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_ChangeGuildMaster_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_ChangeGuildMaster_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_ChangeGuildMaster_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_ChangeGuildMaster_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_ChangeGuildMaster_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_ChangeGuildMaster_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_ChangeGuildMaster_SC::MergeFrom(const MSG_Ret_ChangeGuildMaster_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_ChangeGuildMaster_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_ChangeGuildMaster_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_ChangeGuildMaster_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_ChangeGuildMaster_SC::CopyFrom(const MSG_Ret_ChangeGuildMaster_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_ChangeGuildMaster_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_ChangeGuildMaster_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_ChangeGuildMaster_SC::InternalSwap(MSG_Ret_ChangeGuildMaster_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_ChangeGuildMaster_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ViceMaster::InitAsDefaultInstance() {
}
class ViceMaster::_Internal {
 public:
  using HasBits = decltype(std::declval<ViceMaster>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fightvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_headicon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ViceMaster::ViceMaster()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.ViceMaster)
}
ViceMaster::ViceMaster(const ViceMaster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  headicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_headicon()) {
    headicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headicon_);
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&fightvalue_) -
    reinterpret_cast<char*>(&level_)) + sizeof(fightvalue_));
  // @@protoc_insertion_point(copy_constructor:guild.ViceMaster)
}

void ViceMaster::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ViceMaster_guild_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headicon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fightvalue_) -
      reinterpret_cast<char*>(&level_)) + sizeof(fightvalue_));
}

ViceMaster::~ViceMaster() {
  // @@protoc_insertion_point(destructor:guild.ViceMaster)
  SharedDtor();
}

void ViceMaster::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headicon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ViceMaster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ViceMaster& ViceMaster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ViceMaster_guild_2eproto.base);
  return *internal_default_instance();
}


void ViceMaster::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.ViceMaster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      headicon_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fightvalue_) -
        reinterpret_cast<char*>(&level_)) + sizeof(fightvalue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ViceMaster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.ViceMaster.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fightvalue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fightvalue(&has_bits);
          fightvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.ViceMaster.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string headicon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_headicon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.ViceMaster.headicon");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViceMaster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.ViceMaster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.ViceMaster.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // optional uint32 fightvalue = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fightvalue(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.ViceMaster.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional string headicon = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_headicon().data(), static_cast<int>(this->_internal_headicon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.ViceMaster.headicon");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_headicon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.ViceMaster)
  return target;
}

size_t ViceMaster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.ViceMaster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string headicon = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_headicon());
    }

    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 fightvalue = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fightvalue());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViceMaster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.ViceMaster)
  GOOGLE_DCHECK_NE(&from, this);
  const ViceMaster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViceMaster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.ViceMaster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.ViceMaster)
    MergeFrom(*source);
  }
}

void ViceMaster::MergeFrom(const ViceMaster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.ViceMaster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      headicon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headicon_);
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      fightvalue_ = from.fightvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ViceMaster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.ViceMaster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViceMaster::CopyFrom(const ViceMaster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.ViceMaster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViceMaster::IsInitialized() const {
  return true;
}

void ViceMaster::InternalSwap(ViceMaster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headicon_.Swap(&other->headicon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  swap(fightvalue_, other->fightvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViceMaster::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildViceMaster_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildViceMaster_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildViceMaster_CS>()._has_bits_);
};

MSG_Req_GuildViceMaster_CS::MSG_Req_GuildViceMaster_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildViceMaster_CS)
}
MSG_Req_GuildViceMaster_CS::MSG_Req_GuildViceMaster_CS(const MSG_Req_GuildViceMaster_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildViceMaster_CS)
}

void MSG_Req_GuildViceMaster_CS::SharedCtor() {
}

MSG_Req_GuildViceMaster_CS::~MSG_Req_GuildViceMaster_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildViceMaster_CS)
  SharedDtor();
}

void MSG_Req_GuildViceMaster_CS::SharedDtor() {
}

void MSG_Req_GuildViceMaster_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildViceMaster_CS& MSG_Req_GuildViceMaster_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildViceMaster_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildViceMaster_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildViceMaster_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildViceMaster_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildViceMaster_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildViceMaster_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildViceMaster_CS)
  return target;
}

size_t MSG_Req_GuildViceMaster_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildViceMaster_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildViceMaster_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildViceMaster_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildViceMaster_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildViceMaster_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildViceMaster_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildViceMaster_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildViceMaster_CS::MergeFrom(const MSG_Req_GuildViceMaster_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildViceMaster_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GuildViceMaster_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildViceMaster_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildViceMaster_CS::CopyFrom(const MSG_Req_GuildViceMaster_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildViceMaster_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildViceMaster_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildViceMaster_CS::InternalSwap(MSG_Req_GuildViceMaster_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildViceMaster_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildViceMaster_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildViceMaster_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildViceMaster_SC>()._has_bits_);
};

MSG_Ret_GuildViceMaster_SC::MSG_Ret_GuildViceMaster_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildViceMaster_SC)
}
MSG_Ret_GuildViceMaster_SC::MSG_Ret_GuildViceMaster_SC(const MSG_Ret_GuildViceMaster_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      vicemaster_(from.vicemaster_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildViceMaster_SC)
}

void MSG_Ret_GuildViceMaster_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildViceMaster_SC_guild_2eproto.base);
}

MSG_Ret_GuildViceMaster_SC::~MSG_Ret_GuildViceMaster_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildViceMaster_SC)
  SharedDtor();
}

void MSG_Ret_GuildViceMaster_SC::SharedDtor() {
}

void MSG_Ret_GuildViceMaster_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildViceMaster_SC& MSG_Ret_GuildViceMaster_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildViceMaster_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildViceMaster_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildViceMaster_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vicemaster_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildViceMaster_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guild.ViceMaster vicemaster = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vicemaster(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildViceMaster_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildViceMaster_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guild.ViceMaster vicemaster = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vicemaster_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vicemaster(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildViceMaster_SC)
  return target;
}

size_t MSG_Ret_GuildViceMaster_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildViceMaster_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.ViceMaster vicemaster = 1;
  total_size += 1UL * this->_internal_vicemaster_size();
  for (const auto& msg : this->vicemaster_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildViceMaster_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildViceMaster_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildViceMaster_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildViceMaster_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildViceMaster_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildViceMaster_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildViceMaster_SC::MergeFrom(const MSG_Ret_GuildViceMaster_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildViceMaster_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vicemaster_.MergeFrom(from.vicemaster_);
}

void MSG_Ret_GuildViceMaster_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildViceMaster_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildViceMaster_SC::CopyFrom(const MSG_Ret_GuildViceMaster_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildViceMaster_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildViceMaster_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildViceMaster_SC::InternalSwap(MSG_Ret_GuildViceMaster_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vicemaster_.InternalSwap(&other->vicemaster_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildViceMaster_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildExtension_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildExtension_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildExtension_CS>()._has_bits_);
  static void set_has_isfree(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_GuildExtension_CS::MSG_Req_GuildExtension_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildExtension_CS)
}
MSG_Req_GuildExtension_CS::MSG_Req_GuildExtension_CS(const MSG_Req_GuildExtension_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isfree_ = from.isfree_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildExtension_CS)
}

void MSG_Req_GuildExtension_CS::SharedCtor() {
  isfree_ = false;
}

MSG_Req_GuildExtension_CS::~MSG_Req_GuildExtension_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildExtension_CS)
  SharedDtor();
}

void MSG_Req_GuildExtension_CS::SharedDtor() {
}

void MSG_Req_GuildExtension_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildExtension_CS& MSG_Req_GuildExtension_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildExtension_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildExtension_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildExtension_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isfree_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildExtension_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool isfree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_isfree(&has_bits);
          isfree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildExtension_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildExtension_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isfree = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isfree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildExtension_CS)
  return target;
}

size_t MSG_Req_GuildExtension_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildExtension_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isfree = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildExtension_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildExtension_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildExtension_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildExtension_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildExtension_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildExtension_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildExtension_CS::MergeFrom(const MSG_Req_GuildExtension_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildExtension_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_isfree()) {
    _internal_set_isfree(from._internal_isfree());
  }
}

void MSG_Req_GuildExtension_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildExtension_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildExtension_CS::CopyFrom(const MSG_Req_GuildExtension_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildExtension_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildExtension_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildExtension_CS::InternalSwap(MSG_Req_GuildExtension_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(isfree_, other->isfree_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildExtension_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildExtension_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildExtension_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildExtension_SC>()._has_bits_);
  static void set_has_extensionover(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_GuildExtension_SC::MSG_Ret_GuildExtension_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildExtension_SC)
}
MSG_Ret_GuildExtension_SC::MSG_Ret_GuildExtension_SC(const MSG_Ret_GuildExtension_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&extensionover_, &from.extensionover_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&extensionover_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildExtension_SC)
}

void MSG_Ret_GuildExtension_SC::SharedCtor() {
  ::memset(&extensionover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&extensionover_)) + sizeof(retcode_));
}

MSG_Ret_GuildExtension_SC::~MSG_Ret_GuildExtension_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildExtension_SC)
  SharedDtor();
}

void MSG_Ret_GuildExtension_SC::SharedDtor() {
}

void MSG_Ret_GuildExtension_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildExtension_SC& MSG_Ret_GuildExtension_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildExtension_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildExtension_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildExtension_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&extensionover_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retcode_) -
        reinterpret_cast<char*>(&extensionover_)) + sizeof(retcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildExtension_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 extensionover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_extensionover(&has_bits);
          extensionover_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 retcode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildExtension_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildExtension_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 extensionover = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extensionover(), target);
  }

  // optional uint32 retcode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildExtension_SC)
  return target;
}

size_t MSG_Ret_GuildExtension_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildExtension_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 extensionover = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_extensionover());
    }

    // optional uint32 retcode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildExtension_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildExtension_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildExtension_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildExtension_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildExtension_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildExtension_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildExtension_SC::MergeFrom(const MSG_Ret_GuildExtension_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildExtension_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      extensionover_ = from.extensionover_;
    }
    if (cached_has_bits & 0x00000002u) {
      retcode_ = from.retcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_GuildExtension_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildExtension_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildExtension_SC::CopyFrom(const MSG_Ret_GuildExtension_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildExtension_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildExtension_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildExtension_SC::InternalSwap(MSG_Ret_GuildExtension_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(extensionover_, other->extensionover_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildExtension_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_OneKeyApply_CS::InitAsDefaultInstance() {
}
class MSG_Req_OneKeyApply_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_OneKeyApply_CS>()._has_bits_);
};

MSG_Req_OneKeyApply_CS::MSG_Req_OneKeyApply_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_OneKeyApply_CS)
}
MSG_Req_OneKeyApply_CS::MSG_Req_OneKeyApply_CS(const MSG_Req_OneKeyApply_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_OneKeyApply_CS)
}

void MSG_Req_OneKeyApply_CS::SharedCtor() {
}

MSG_Req_OneKeyApply_CS::~MSG_Req_OneKeyApply_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_OneKeyApply_CS)
  SharedDtor();
}

void MSG_Req_OneKeyApply_CS::SharedDtor() {
}

void MSG_Req_OneKeyApply_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_OneKeyApply_CS& MSG_Req_OneKeyApply_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_OneKeyApply_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_OneKeyApply_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_OneKeyApply_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_OneKeyApply_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_OneKeyApply_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_OneKeyApply_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_OneKeyApply_CS)
  return target;
}

size_t MSG_Req_OneKeyApply_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_OneKeyApply_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_OneKeyApply_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_OneKeyApply_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_OneKeyApply_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_OneKeyApply_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_OneKeyApply_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_OneKeyApply_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_OneKeyApply_CS::MergeFrom(const MSG_Req_OneKeyApply_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_OneKeyApply_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_OneKeyApply_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_OneKeyApply_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_OneKeyApply_CS::CopyFrom(const MSG_Req_OneKeyApply_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_OneKeyApply_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_OneKeyApply_CS::IsInitialized() const {
  return true;
}

void MSG_Req_OneKeyApply_CS::InternalSwap(MSG_Req_OneKeyApply_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_OneKeyApply_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_OneKeyApply_SC::InitAsDefaultInstance() {
}
class MSG_Ret_OneKeyApply_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_OneKeyApply_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_OneKeyApply_SC::MSG_Ret_OneKeyApply_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_OneKeyApply_SC)
}
MSG_Ret_OneKeyApply_SC::MSG_Ret_OneKeyApply_SC(const MSG_Ret_OneKeyApply_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_OneKeyApply_SC)
}

void MSG_Ret_OneKeyApply_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_OneKeyApply_SC::~MSG_Ret_OneKeyApply_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_OneKeyApply_SC)
  SharedDtor();
}

void MSG_Ret_OneKeyApply_SC::SharedDtor() {
}

void MSG_Ret_OneKeyApply_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_OneKeyApply_SC& MSG_Ret_OneKeyApply_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_OneKeyApply_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_OneKeyApply_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_OneKeyApply_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_OneKeyApply_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_OneKeyApply_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_OneKeyApply_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_OneKeyApply_SC)
  return target;
}

size_t MSG_Ret_OneKeyApply_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_OneKeyApply_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_OneKeyApply_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_OneKeyApply_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_OneKeyApply_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_OneKeyApply_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_OneKeyApply_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_OneKeyApply_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_OneKeyApply_SC::MergeFrom(const MSG_Ret_OneKeyApply_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_OneKeyApply_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_OneKeyApply_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_OneKeyApply_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_OneKeyApply_SC::CopyFrom(const MSG_Ret_OneKeyApply_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_OneKeyApply_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_OneKeyApply_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_OneKeyApply_SC::InternalSwap(MSG_Ret_OneKeyApply_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_OneKeyApply_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_RecrutCondition_CS::InitAsDefaultInstance() {
}
class MSG_Req_RecrutCondition_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_RecrutCondition_CS>()._has_bits_);
};

MSG_Req_RecrutCondition_CS::MSG_Req_RecrutCondition_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_RecrutCondition_CS)
}
MSG_Req_RecrutCondition_CS::MSG_Req_RecrutCondition_CS(const MSG_Req_RecrutCondition_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_RecrutCondition_CS)
}

void MSG_Req_RecrutCondition_CS::SharedCtor() {
}

MSG_Req_RecrutCondition_CS::~MSG_Req_RecrutCondition_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_RecrutCondition_CS)
  SharedDtor();
}

void MSG_Req_RecrutCondition_CS::SharedDtor() {
}

void MSG_Req_RecrutCondition_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_RecrutCondition_CS& MSG_Req_RecrutCondition_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_RecrutCondition_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_RecrutCondition_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_RecrutCondition_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_RecrutCondition_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_RecrutCondition_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_RecrutCondition_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_RecrutCondition_CS)
  return target;
}

size_t MSG_Req_RecrutCondition_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_RecrutCondition_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_RecrutCondition_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_RecrutCondition_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_RecrutCondition_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_RecrutCondition_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_RecrutCondition_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_RecrutCondition_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_RecrutCondition_CS::MergeFrom(const MSG_Req_RecrutCondition_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_RecrutCondition_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_RecrutCondition_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_RecrutCondition_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_RecrutCondition_CS::CopyFrom(const MSG_Req_RecrutCondition_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_RecrutCondition_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_RecrutCondition_CS::IsInitialized() const {
  return true;
}

void MSG_Req_RecrutCondition_CS::InternalSwap(MSG_Req_RecrutCondition_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_RecrutCondition_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRecrutCondition_SC::InitAsDefaultInstance() {
}
class MSG_RetRecrutCondition_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRecrutCondition_SC>()._has_bits_);
  static void set_has_levelvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fightvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_RetRecrutCondition_SC::MSG_RetRecrutCondition_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_RetRecrutCondition_SC)
}
MSG_RetRecrutCondition_SC::MSG_RetRecrutCondition_SC(const MSG_RetRecrutCondition_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&levelvalid_, &from.levelvalid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fight_) -
    reinterpret_cast<char*>(&levelvalid_)) + sizeof(fight_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_RetRecrutCondition_SC)
}

void MSG_RetRecrutCondition_SC::SharedCtor() {
  ::memset(&levelvalid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fight_) -
      reinterpret_cast<char*>(&levelvalid_)) + sizeof(fight_));
}

MSG_RetRecrutCondition_SC::~MSG_RetRecrutCondition_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_RetRecrutCondition_SC)
  SharedDtor();
}

void MSG_RetRecrutCondition_SC::SharedDtor() {
}

void MSG_RetRecrutCondition_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRecrutCondition_SC& MSG_RetRecrutCondition_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRecrutCondition_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRecrutCondition_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_RetRecrutCondition_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&levelvalid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fight_) -
        reinterpret_cast<char*>(&levelvalid_)) + sizeof(fight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRecrutCondition_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool levelvalid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_levelvalid(&has_bits);
          levelvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fightvalid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fightvalid(&has_bits);
          fightvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fight(&has_bits);
          fight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRecrutCondition_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_RetRecrutCondition_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool levelvalid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_levelvalid(), target);
  }

  // optional bool fightvalid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_fightvalid(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 fight = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_RetRecrutCondition_SC)
  return target;
}

size_t MSG_RetRecrutCondition_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_RetRecrutCondition_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool levelvalid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool fightvalid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 fight = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fight());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRecrutCondition_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_RetRecrutCondition_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRecrutCondition_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRecrutCondition_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_RetRecrutCondition_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_RetRecrutCondition_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRecrutCondition_SC::MergeFrom(const MSG_RetRecrutCondition_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_RetRecrutCondition_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      levelvalid_ = from.levelvalid_;
    }
    if (cached_has_bits & 0x00000002u) {
      fightvalid_ = from.fightvalid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      fight_ = from.fight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetRecrutCondition_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_RetRecrutCondition_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRecrutCondition_SC::CopyFrom(const MSG_RetRecrutCondition_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_RetRecrutCondition_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRecrutCondition_SC::IsInitialized() const {
  return true;
}

void MSG_RetRecrutCondition_SC::InternalSwap(MSG_RetRecrutCondition_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(levelvalid_, other->levelvalid_);
  swap(fightvalid_, other->fightvalid_);
  swap(level_, other->level_);
  swap(fight_, other->fight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRecrutCondition_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ModifyRecrutCondition_CS::InitAsDefaultInstance() {
}
class MSG_Req_ModifyRecrutCondition_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ModifyRecrutCondition_CS>()._has_bits_);
  static void set_has_levelvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fightvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_Req_ModifyRecrutCondition_CS::MSG_Req_ModifyRecrutCondition_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_ModifyRecrutCondition_CS)
}
MSG_Req_ModifyRecrutCondition_CS::MSG_Req_ModifyRecrutCondition_CS(const MSG_Req_ModifyRecrutCondition_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&levelvalid_, &from.levelvalid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fight_) -
    reinterpret_cast<char*>(&levelvalid_)) + sizeof(fight_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_ModifyRecrutCondition_CS)
}

void MSG_Req_ModifyRecrutCondition_CS::SharedCtor() {
  ::memset(&levelvalid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fight_) -
      reinterpret_cast<char*>(&levelvalid_)) + sizeof(fight_));
}

MSG_Req_ModifyRecrutCondition_CS::~MSG_Req_ModifyRecrutCondition_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_ModifyRecrutCondition_CS)
  SharedDtor();
}

void MSG_Req_ModifyRecrutCondition_CS::SharedDtor() {
}

void MSG_Req_ModifyRecrutCondition_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ModifyRecrutCondition_CS& MSG_Req_ModifyRecrutCondition_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ModifyRecrutCondition_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ModifyRecrutCondition_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_ModifyRecrutCondition_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&levelvalid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fight_) -
        reinterpret_cast<char*>(&levelvalid_)) + sizeof(fight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ModifyRecrutCondition_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool levelvalid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_levelvalid(&has_bits);
          levelvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fightvalid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fightvalid(&has_bits);
          fightvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_fight(&has_bits);
          fight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ModifyRecrutCondition_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_ModifyRecrutCondition_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool levelvalid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_levelvalid(), target);
  }

  // optional bool fightvalid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_fightvalid(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 fight = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_ModifyRecrutCondition_CS)
  return target;
}

size_t MSG_Req_ModifyRecrutCondition_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_ModifyRecrutCondition_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool levelvalid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool fightvalid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 fight = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fight());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ModifyRecrutCondition_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_ModifyRecrutCondition_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ModifyRecrutCondition_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ModifyRecrutCondition_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_ModifyRecrutCondition_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_ModifyRecrutCondition_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ModifyRecrutCondition_CS::MergeFrom(const MSG_Req_ModifyRecrutCondition_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_ModifyRecrutCondition_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      levelvalid_ = from.levelvalid_;
    }
    if (cached_has_bits & 0x00000002u) {
      fightvalid_ = from.fightvalid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      fight_ = from.fight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_ModifyRecrutCondition_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_ModifyRecrutCondition_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ModifyRecrutCondition_CS::CopyFrom(const MSG_Req_ModifyRecrutCondition_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_ModifyRecrutCondition_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ModifyRecrutCondition_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ModifyRecrutCondition_CS::InternalSwap(MSG_Req_ModifyRecrutCondition_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(levelvalid_, other->levelvalid_);
  swap(fightvalid_, other->fightvalid_);
  swap(level_, other->level_);
  swap(fight_, other->fight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ModifyRecrutCondition_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildTechnique_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildTechnique_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildTechnique_CS>()._has_bits_);
};

MSG_Req_GuildTechnique_CS::MSG_Req_GuildTechnique_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildTechnique_CS)
}
MSG_Req_GuildTechnique_CS::MSG_Req_GuildTechnique_CS(const MSG_Req_GuildTechnique_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildTechnique_CS)
}

void MSG_Req_GuildTechnique_CS::SharedCtor() {
}

MSG_Req_GuildTechnique_CS::~MSG_Req_GuildTechnique_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildTechnique_CS)
  SharedDtor();
}

void MSG_Req_GuildTechnique_CS::SharedDtor() {
}

void MSG_Req_GuildTechnique_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildTechnique_CS& MSG_Req_GuildTechnique_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildTechnique_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildTechnique_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildTechnique_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildTechnique_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildTechnique_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildTechnique_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildTechnique_CS)
  return target;
}

size_t MSG_Req_GuildTechnique_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildTechnique_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildTechnique_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildTechnique_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildTechnique_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildTechnique_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildTechnique_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildTechnique_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildTechnique_CS::MergeFrom(const MSG_Req_GuildTechnique_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildTechnique_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GuildTechnique_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildTechnique_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildTechnique_CS::CopyFrom(const MSG_Req_GuildTechnique_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildTechnique_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildTechnique_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildTechnique_CS::InternalSwap(MSG_Req_GuildTechnique_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildTechnique_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TechniqueInfo::InitAsDefaultInstance() {
}
class TechniqueInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TechniqueInfo>()._has_bits_);
  static void set_has_techid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_personallevel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_developlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_validlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unlock(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TechniqueInfo::TechniqueInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.TechniqueInfo)
}
TechniqueInfo::TechniqueInfo(const TechniqueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&techid_, &from.techid_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlock_) -
    reinterpret_cast<char*>(&techid_)) + sizeof(unlock_));
  // @@protoc_insertion_point(copy_constructor:guild.TechniqueInfo)
}

void TechniqueInfo::SharedCtor() {
  ::memset(&techid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unlock_) -
      reinterpret_cast<char*>(&techid_)) + sizeof(unlock_));
}

TechniqueInfo::~TechniqueInfo() {
  // @@protoc_insertion_point(destructor:guild.TechniqueInfo)
  SharedDtor();
}

void TechniqueInfo::SharedDtor() {
}

void TechniqueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TechniqueInfo& TechniqueInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TechniqueInfo_guild_2eproto.base);
  return *internal_default_instance();
}


void TechniqueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.TechniqueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&techid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unlock_) -
        reinterpret_cast<char*>(&techid_)) + sizeof(unlock_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TechniqueInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 techid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_techid(&has_bits);
          techid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 personallevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_personallevel(&has_bits);
          personallevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 developlevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_developlevel(&has_bits);
          developlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 validlevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_validlevel(&has_bits);
          validlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool unlock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_unlock(&has_bits);
          unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TechniqueInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.TechniqueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 techid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_techid(), target);
  }

  // optional uint32 personallevel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_personallevel(), target);
  }

  // optional uint32 developlevel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_developlevel(), target);
  }

  // optional uint32 validlevel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_validlevel(), target);
  }

  // optional bool unlock = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_unlock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.TechniqueInfo)
  return target;
}

size_t TechniqueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.TechniqueInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 techid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_techid());
    }

    // optional uint32 personallevel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_personallevel());
    }

    // optional uint32 developlevel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_developlevel());
    }

    // optional uint32 validlevel = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_validlevel());
    }

    // optional bool unlock = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TechniqueInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.TechniqueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TechniqueInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TechniqueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.TechniqueInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.TechniqueInfo)
    MergeFrom(*source);
  }
}

void TechniqueInfo::MergeFrom(const TechniqueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.TechniqueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      techid_ = from.techid_;
    }
    if (cached_has_bits & 0x00000002u) {
      personallevel_ = from.personallevel_;
    }
    if (cached_has_bits & 0x00000004u) {
      developlevel_ = from.developlevel_;
    }
    if (cached_has_bits & 0x00000008u) {
      validlevel_ = from.validlevel_;
    }
    if (cached_has_bits & 0x00000010u) {
      unlock_ = from.unlock_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TechniqueInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.TechniqueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TechniqueInfo::CopyFrom(const TechniqueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.TechniqueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TechniqueInfo::IsInitialized() const {
  return true;
}

void TechniqueInfo::InternalSwap(TechniqueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(techid_, other->techid_);
  swap(personallevel_, other->personallevel_);
  swap(developlevel_, other->developlevel_);
  swap(validlevel_, other->validlevel_);
  swap(unlock_, other->unlock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TechniqueInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildTechnique_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildTechnique_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildTechnique_SC>()._has_bits_);
};

MSG_Ret_GuildTechnique_SC::MSG_Ret_GuildTechnique_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildTechnique_SC)
}
MSG_Ret_GuildTechnique_SC::MSG_Ret_GuildTechnique_SC(const MSG_Ret_GuildTechnique_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      info_(from.info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildTechnique_SC)
}

void MSG_Ret_GuildTechnique_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildTechnique_SC_guild_2eproto.base);
}

MSG_Ret_GuildTechnique_SC::~MSG_Ret_GuildTechnique_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildTechnique_SC)
  SharedDtor();
}

void MSG_Ret_GuildTechnique_SC::SharedDtor() {
}

void MSG_Ret_GuildTechnique_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildTechnique_SC& MSG_Ret_GuildTechnique_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildTechnique_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildTechnique_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildTechnique_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildTechnique_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guild.TechniqueInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildTechnique_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildTechnique_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guild.TechniqueInfo info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildTechnique_SC)
  return target;
}

size_t MSG_Ret_GuildTechnique_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildTechnique_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.TechniqueInfo info = 1;
  total_size += 1UL * this->_internal_info_size();
  for (const auto& msg : this->info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildTechnique_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildTechnique_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildTechnique_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildTechnique_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildTechnique_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildTechnique_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildTechnique_SC::MergeFrom(const MSG_Ret_GuildTechnique_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildTechnique_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_.MergeFrom(from.info_);
}

void MSG_Ret_GuildTechnique_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildTechnique_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildTechnique_SC::CopyFrom(const MSG_Ret_GuildTechnique_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildTechnique_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildTechnique_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildTechnique_SC::InternalSwap(MSG_Ret_GuildTechnique_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  info_.InternalSwap(&other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildTechnique_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_TechniqueUpGrade_CS::InitAsDefaultInstance() {
}
class MSG_Req_TechniqueUpGrade_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_TechniqueUpGrade_CS>()._has_bits_);
  static void set_has_techid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_TechniqueUpGrade_CS::MSG_Req_TechniqueUpGrade_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_TechniqueUpGrade_CS)
}
MSG_Req_TechniqueUpGrade_CS::MSG_Req_TechniqueUpGrade_CS(const MSG_Req_TechniqueUpGrade_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  techid_ = from.techid_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_TechniqueUpGrade_CS)
}

void MSG_Req_TechniqueUpGrade_CS::SharedCtor() {
  techid_ = 0u;
}

MSG_Req_TechniqueUpGrade_CS::~MSG_Req_TechniqueUpGrade_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_TechniqueUpGrade_CS)
  SharedDtor();
}

void MSG_Req_TechniqueUpGrade_CS::SharedDtor() {
}

void MSG_Req_TechniqueUpGrade_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_TechniqueUpGrade_CS& MSG_Req_TechniqueUpGrade_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_TechniqueUpGrade_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_TechniqueUpGrade_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_TechniqueUpGrade_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  techid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_TechniqueUpGrade_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 techid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_techid(&has_bits);
          techid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_TechniqueUpGrade_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_TechniqueUpGrade_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 techid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_techid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_TechniqueUpGrade_CS)
  return target;
}

size_t MSG_Req_TechniqueUpGrade_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_TechniqueUpGrade_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 techid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_techid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_TechniqueUpGrade_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_TechniqueUpGrade_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_TechniqueUpGrade_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_TechniqueUpGrade_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_TechniqueUpGrade_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_TechniqueUpGrade_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_TechniqueUpGrade_CS::MergeFrom(const MSG_Req_TechniqueUpGrade_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_TechniqueUpGrade_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_techid()) {
    _internal_set_techid(from._internal_techid());
  }
}

void MSG_Req_TechniqueUpGrade_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_TechniqueUpGrade_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_TechniqueUpGrade_CS::CopyFrom(const MSG_Req_TechniqueUpGrade_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_TechniqueUpGrade_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_TechniqueUpGrade_CS::IsInitialized() const {
  return true;
}

void MSG_Req_TechniqueUpGrade_CS::InternalSwap(MSG_Req_TechniqueUpGrade_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(techid_, other->techid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_TechniqueUpGrade_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_TechniqueUpGrade_SC::InitAsDefaultInstance() {
}
class MSG_Ret_TechniqueUpGrade_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_TechniqueUpGrade_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_TechniqueUpGrade_SC::MSG_Ret_TechniqueUpGrade_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_TechniqueUpGrade_SC)
}
MSG_Ret_TechniqueUpGrade_SC::MSG_Ret_TechniqueUpGrade_SC(const MSG_Ret_TechniqueUpGrade_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_TechniqueUpGrade_SC)
}

void MSG_Ret_TechniqueUpGrade_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Ret_TechniqueUpGrade_SC::~MSG_Ret_TechniqueUpGrade_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_TechniqueUpGrade_SC)
  SharedDtor();
}

void MSG_Ret_TechniqueUpGrade_SC::SharedDtor() {
}

void MSG_Ret_TechniqueUpGrade_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_TechniqueUpGrade_SC& MSG_Ret_TechniqueUpGrade_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_TechniqueUpGrade_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_TechniqueUpGrade_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_TechniqueUpGrade_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_TechniqueUpGrade_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_TechniqueUpGrade_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_TechniqueUpGrade_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_TechniqueUpGrade_SC)
  return target;
}

size_t MSG_Ret_TechniqueUpGrade_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_TechniqueUpGrade_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_TechniqueUpGrade_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_TechniqueUpGrade_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_TechniqueUpGrade_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_TechniqueUpGrade_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_TechniqueUpGrade_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_TechniqueUpGrade_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_TechniqueUpGrade_SC::MergeFrom(const MSG_Ret_TechniqueUpGrade_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_TechniqueUpGrade_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Ret_TechniqueUpGrade_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_TechniqueUpGrade_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_TechniqueUpGrade_SC::CopyFrom(const MSG_Ret_TechniqueUpGrade_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_TechniqueUpGrade_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_TechniqueUpGrade_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_TechniqueUpGrade_SC::InternalSwap(MSG_Ret_TechniqueUpGrade_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_TechniqueUpGrade_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_RefreshTechniqueInfo_SC::InitAsDefaultInstance() {
  ::guild::_MSG_Ret_RefreshTechniqueInfo_SC_default_instance_._instance.get_mutable()->info_ = const_cast< ::guild::TechniqueInfo*>(
      ::guild::TechniqueInfo::internal_default_instance());
}
class MSG_Ret_RefreshTechniqueInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_RefreshTechniqueInfo_SC>()._has_bits_);
  static const ::guild::TechniqueInfo& info(const MSG_Ret_RefreshTechniqueInfo_SC* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::guild::TechniqueInfo&
MSG_Ret_RefreshTechniqueInfo_SC::_Internal::info(const MSG_Ret_RefreshTechniqueInfo_SC* msg) {
  return *msg->info_;
}
MSG_Ret_RefreshTechniqueInfo_SC::MSG_Ret_RefreshTechniqueInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_RefreshTechniqueInfo_SC)
}
MSG_Ret_RefreshTechniqueInfo_SC::MSG_Ret_RefreshTechniqueInfo_SC(const MSG_Ret_RefreshTechniqueInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::guild::TechniqueInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_RefreshTechniqueInfo_SC)
}

void MSG_Ret_RefreshTechniqueInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_RefreshTechniqueInfo_SC_guild_2eproto.base);
  info_ = nullptr;
}

MSG_Ret_RefreshTechniqueInfo_SC::~MSG_Ret_RefreshTechniqueInfo_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_RefreshTechniqueInfo_SC)
  SharedDtor();
}

void MSG_Ret_RefreshTechniqueInfo_SC::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void MSG_Ret_RefreshTechniqueInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_RefreshTechniqueInfo_SC& MSG_Ret_RefreshTechniqueInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_RefreshTechniqueInfo_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_RefreshTechniqueInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_RefreshTechniqueInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_RefreshTechniqueInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guild.TechniqueInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_RefreshTechniqueInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_RefreshTechniqueInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guild.TechniqueInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_RefreshTechniqueInfo_SC)
  return target;
}

size_t MSG_Ret_RefreshTechniqueInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_RefreshTechniqueInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .guild.TechniqueInfo info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_RefreshTechniqueInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_RefreshTechniqueInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_RefreshTechniqueInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_RefreshTechniqueInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_RefreshTechniqueInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_RefreshTechniqueInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_RefreshTechniqueInfo_SC::MergeFrom(const MSG_Ret_RefreshTechniqueInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_RefreshTechniqueInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::guild::TechniqueInfo::MergeFrom(from._internal_info());
  }
}

void MSG_Ret_RefreshTechniqueInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_RefreshTechniqueInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_RefreshTechniqueInfo_SC::CopyFrom(const MSG_Ret_RefreshTechniqueInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_RefreshTechniqueInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_RefreshTechniqueInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_RefreshTechniqueInfo_SC::InternalSwap(MSG_Ret_RefreshTechniqueInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_RefreshTechniqueInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_TechniqueDevelop_CS::InitAsDefaultInstance() {
}
class MSG_Req_TechniqueDevelop_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_TechniqueDevelop_CS>()._has_bits_);
  static void set_has_techid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_TechniqueDevelop_CS::MSG_Req_TechniqueDevelop_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_TechniqueDevelop_CS)
}
MSG_Req_TechniqueDevelop_CS::MSG_Req_TechniqueDevelop_CS(const MSG_Req_TechniqueDevelop_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  techid_ = from.techid_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_TechniqueDevelop_CS)
}

void MSG_Req_TechniqueDevelop_CS::SharedCtor() {
  techid_ = 0u;
}

MSG_Req_TechniqueDevelop_CS::~MSG_Req_TechniqueDevelop_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_TechniqueDevelop_CS)
  SharedDtor();
}

void MSG_Req_TechniqueDevelop_CS::SharedDtor() {
}

void MSG_Req_TechniqueDevelop_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_TechniqueDevelop_CS& MSG_Req_TechniqueDevelop_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_TechniqueDevelop_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_TechniqueDevelop_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_TechniqueDevelop_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  techid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_TechniqueDevelop_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 techid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_techid(&has_bits);
          techid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_TechniqueDevelop_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_TechniqueDevelop_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 techid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_techid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_TechniqueDevelop_CS)
  return target;
}

size_t MSG_Req_TechniqueDevelop_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_TechniqueDevelop_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 techid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_techid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_TechniqueDevelop_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_TechniqueDevelop_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_TechniqueDevelop_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_TechniqueDevelop_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_TechniqueDevelop_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_TechniqueDevelop_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_TechniqueDevelop_CS::MergeFrom(const MSG_Req_TechniqueDevelop_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_TechniqueDevelop_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_techid()) {
    _internal_set_techid(from._internal_techid());
  }
}

void MSG_Req_TechniqueDevelop_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_TechniqueDevelop_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_TechniqueDevelop_CS::CopyFrom(const MSG_Req_TechniqueDevelop_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_TechniqueDevelop_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_TechniqueDevelop_CS::IsInitialized() const {
  return true;
}

void MSG_Req_TechniqueDevelop_CS::InternalSwap(MSG_Req_TechniqueDevelop_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(techid_, other->techid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_TechniqueDevelop_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_TechniqueDevelop_SC::InitAsDefaultInstance() {
}
class MSG_Ret_TechniqueDevelop_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_TechniqueDevelop_SC>()._has_bits_);
  static void set_has_salary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_TechniqueDevelop_SC::MSG_Ret_TechniqueDevelop_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_TechniqueDevelop_SC)
}
MSG_Ret_TechniqueDevelop_SC::MSG_Ret_TechniqueDevelop_SC(const MSG_Ret_TechniqueDevelop_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  salary_ = from.salary_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_TechniqueDevelop_SC)
}

void MSG_Ret_TechniqueDevelop_SC::SharedCtor() {
  salary_ = 0u;
}

MSG_Ret_TechniqueDevelop_SC::~MSG_Ret_TechniqueDevelop_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_TechniqueDevelop_SC)
  SharedDtor();
}

void MSG_Ret_TechniqueDevelop_SC::SharedDtor() {
}

void MSG_Ret_TechniqueDevelop_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_TechniqueDevelop_SC& MSG_Ret_TechniqueDevelop_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_TechniqueDevelop_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_TechniqueDevelop_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_TechniqueDevelop_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  salary_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_TechniqueDevelop_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 salary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_salary(&has_bits);
          salary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_TechniqueDevelop_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_TechniqueDevelop_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 salary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_salary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_TechniqueDevelop_SC)
  return target;
}

size_t MSG_Ret_TechniqueDevelop_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_TechniqueDevelop_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 salary = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_salary());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_TechniqueDevelop_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_TechniqueDevelop_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_TechniqueDevelop_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_TechniqueDevelop_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_TechniqueDevelop_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_TechniqueDevelop_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_TechniqueDevelop_SC::MergeFrom(const MSG_Ret_TechniqueDevelop_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_TechniqueDevelop_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_salary()) {
    _internal_set_salary(from._internal_salary());
  }
}

void MSG_Ret_TechniqueDevelop_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_TechniqueDevelop_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_TechniqueDevelop_SC::CopyFrom(const MSG_Ret_TechniqueDevelop_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_TechniqueDevelop_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_TechniqueDevelop_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_TechniqueDevelop_SC::InternalSwap(MSG_Ret_TechniqueDevelop_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(salary_, other->salary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_TechniqueDevelop_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildPartyActivityInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildPartyActivityInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildPartyActivityInfo_CS>()._has_bits_);
};

MSG_Req_GuildPartyActivityInfo_CS::MSG_Req_GuildPartyActivityInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildPartyActivityInfo_CS)
}
MSG_Req_GuildPartyActivityInfo_CS::MSG_Req_GuildPartyActivityInfo_CS(const MSG_Req_GuildPartyActivityInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildPartyActivityInfo_CS)
}

void MSG_Req_GuildPartyActivityInfo_CS::SharedCtor() {
}

MSG_Req_GuildPartyActivityInfo_CS::~MSG_Req_GuildPartyActivityInfo_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildPartyActivityInfo_CS)
  SharedDtor();
}

void MSG_Req_GuildPartyActivityInfo_CS::SharedDtor() {
}

void MSG_Req_GuildPartyActivityInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildPartyActivityInfo_CS& MSG_Req_GuildPartyActivityInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildPartyActivityInfo_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildPartyActivityInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildPartyActivityInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildPartyActivityInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildPartyActivityInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildPartyActivityInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildPartyActivityInfo_CS)
  return target;
}

size_t MSG_Req_GuildPartyActivityInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildPartyActivityInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildPartyActivityInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildPartyActivityInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildPartyActivityInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildPartyActivityInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildPartyActivityInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildPartyActivityInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildPartyActivityInfo_CS::MergeFrom(const MSG_Req_GuildPartyActivityInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildPartyActivityInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GuildPartyActivityInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildPartyActivityInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildPartyActivityInfo_CS::CopyFrom(const MSG_Req_GuildPartyActivityInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildPartyActivityInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildPartyActivityInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildPartyActivityInfo_CS::InternalSwap(MSG_Req_GuildPartyActivityInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildPartyActivityInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildPartyActivityInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildPartyActivityInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildPartyActivityInfo_SC>()._has_bits_);
  static void set_has_lefttimes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_GuildPartyActivityInfo_SC::MSG_Ret_GuildPartyActivityInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildPartyActivityInfo_SC)
}
MSG_Ret_GuildPartyActivityInfo_SC::MSG_Ret_GuildPartyActivityInfo_SC(const MSG_Ret_GuildPartyActivityInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lefttimes_ = from.lefttimes_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildPartyActivityInfo_SC)
}

void MSG_Ret_GuildPartyActivityInfo_SC::SharedCtor() {
  lefttimes_ = 0u;
}

MSG_Ret_GuildPartyActivityInfo_SC::~MSG_Ret_GuildPartyActivityInfo_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildPartyActivityInfo_SC)
  SharedDtor();
}

void MSG_Ret_GuildPartyActivityInfo_SC::SharedDtor() {
}

void MSG_Ret_GuildPartyActivityInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildPartyActivityInfo_SC& MSG_Ret_GuildPartyActivityInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildPartyActivityInfo_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildPartyActivityInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildPartyActivityInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lefttimes_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildPartyActivityInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 lefttimes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lefttimes(&has_bits);
          lefttimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildPartyActivityInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildPartyActivityInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lefttimes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lefttimes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildPartyActivityInfo_SC)
  return target;
}

size_t MSG_Ret_GuildPartyActivityInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildPartyActivityInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 lefttimes = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lefttimes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildPartyActivityInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildPartyActivityInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildPartyActivityInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildPartyActivityInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildPartyActivityInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildPartyActivityInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildPartyActivityInfo_SC::MergeFrom(const MSG_Ret_GuildPartyActivityInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildPartyActivityInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lefttimes()) {
    _internal_set_lefttimes(from._internal_lefttimes());
  }
}

void MSG_Ret_GuildPartyActivityInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildPartyActivityInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildPartyActivityInfo_SC::CopyFrom(const MSG_Ret_GuildPartyActivityInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildPartyActivityInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildPartyActivityInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildPartyActivityInfo_SC::InternalSwap(MSG_Ret_GuildPartyActivityInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lefttimes_, other->lefttimes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildPartyActivityInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_StartGuildParty_CS::InitAsDefaultInstance() {
}
class MSG_Req_StartGuildParty_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_StartGuildParty_CS>()._has_bits_);
};

MSG_Req_StartGuildParty_CS::MSG_Req_StartGuildParty_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_StartGuildParty_CS)
}
MSG_Req_StartGuildParty_CS::MSG_Req_StartGuildParty_CS(const MSG_Req_StartGuildParty_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_StartGuildParty_CS)
}

void MSG_Req_StartGuildParty_CS::SharedCtor() {
}

MSG_Req_StartGuildParty_CS::~MSG_Req_StartGuildParty_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_StartGuildParty_CS)
  SharedDtor();
}

void MSG_Req_StartGuildParty_CS::SharedDtor() {
}

void MSG_Req_StartGuildParty_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_StartGuildParty_CS& MSG_Req_StartGuildParty_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_StartGuildParty_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_StartGuildParty_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_StartGuildParty_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_StartGuildParty_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_StartGuildParty_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_StartGuildParty_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_StartGuildParty_CS)
  return target;
}

size_t MSG_Req_StartGuildParty_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_StartGuildParty_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_StartGuildParty_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_StartGuildParty_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_StartGuildParty_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_StartGuildParty_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_StartGuildParty_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_StartGuildParty_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_StartGuildParty_CS::MergeFrom(const MSG_Req_StartGuildParty_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_StartGuildParty_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_StartGuildParty_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_StartGuildParty_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_StartGuildParty_CS::CopyFrom(const MSG_Req_StartGuildParty_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_StartGuildParty_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_StartGuildParty_CS::IsInitialized() const {
  return true;
}

void MSG_Req_StartGuildParty_CS::InternalSwap(MSG_Req_StartGuildParty_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_StartGuildParty_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildPartyActivityData_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildPartyActivityData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildPartyActivityData_SC>()._has_bits_);
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_GuildPartyActivityData_SC::MSG_Ret_GuildPartyActivityData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildPartyActivityData_SC)
}
MSG_Ret_GuildPartyActivityData_SC::MSG_Ret_GuildPartyActivityData_SC(const MSG_Ret_GuildPartyActivityData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endtime_ = from.endtime_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildPartyActivityData_SC)
}

void MSG_Ret_GuildPartyActivityData_SC::SharedCtor() {
  endtime_ = 0u;
}

MSG_Ret_GuildPartyActivityData_SC::~MSG_Ret_GuildPartyActivityData_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildPartyActivityData_SC)
  SharedDtor();
}

void MSG_Ret_GuildPartyActivityData_SC::SharedDtor() {
}

void MSG_Ret_GuildPartyActivityData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildPartyActivityData_SC& MSG_Ret_GuildPartyActivityData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildPartyActivityData_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildPartyActivityData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildPartyActivityData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endtime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildPartyActivityData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 endtime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_endtime(&has_bits);
          endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildPartyActivityData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildPartyActivityData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 endtime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildPartyActivityData_SC)
  return target;
}

size_t MSG_Ret_GuildPartyActivityData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildPartyActivityData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 endtime = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_endtime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildPartyActivityData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildPartyActivityData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildPartyActivityData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildPartyActivityData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildPartyActivityData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildPartyActivityData_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildPartyActivityData_SC::MergeFrom(const MSG_Ret_GuildPartyActivityData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildPartyActivityData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_endtime()) {
    _internal_set_endtime(from._internal_endtime());
  }
}

void MSG_Ret_GuildPartyActivityData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildPartyActivityData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildPartyActivityData_SC::CopyFrom(const MSG_Ret_GuildPartyActivityData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildPartyActivityData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildPartyActivityData_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildPartyActivityData_SC::InternalSwap(MSG_Ret_GuildPartyActivityData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(endtime_, other->endtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildPartyActivityData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_FellowshipSurvey_SC::InitAsDefaultInstance() {
}
class MSG_Ret_FellowshipSurvey_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_FellowshipSurvey_SC>()._has_bits_);
  static void set_has_question_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_question_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_question_c(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_FellowshipSurvey_SC::MSG_Ret_FellowshipSurvey_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_FellowshipSurvey_SC)
}
MSG_Ret_FellowshipSurvey_SC::MSG_Ret_FellowshipSurvey_SC(const MSG_Ret_FellowshipSurvey_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&question_a_, &from.question_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&question_c_) -
    reinterpret_cast<char*>(&question_a_)) + sizeof(question_c_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_FellowshipSurvey_SC)
}

void MSG_Ret_FellowshipSurvey_SC::SharedCtor() {
  ::memset(&question_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&question_c_) -
      reinterpret_cast<char*>(&question_a_)) + sizeof(question_c_));
}

MSG_Ret_FellowshipSurvey_SC::~MSG_Ret_FellowshipSurvey_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_FellowshipSurvey_SC)
  SharedDtor();
}

void MSG_Ret_FellowshipSurvey_SC::SharedDtor() {
}

void MSG_Ret_FellowshipSurvey_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_FellowshipSurvey_SC& MSG_Ret_FellowshipSurvey_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_FellowshipSurvey_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_FellowshipSurvey_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_FellowshipSurvey_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&question_a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&question_c_) -
        reinterpret_cast<char*>(&question_a_)) + sizeof(question_c_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_FellowshipSurvey_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 question_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_question_a(&has_bits);
          question_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 question_b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_question_b(&has_bits);
          question_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 question_c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_question_c(&has_bits);
          question_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_FellowshipSurvey_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_FellowshipSurvey_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 question_a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_question_a(), target);
  }

  // optional uint32 question_b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_question_b(), target);
  }

  // optional uint32 question_c = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_question_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_FellowshipSurvey_SC)
  return target;
}

size_t MSG_Ret_FellowshipSurvey_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_FellowshipSurvey_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 question_a = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_question_a());
    }

    // optional uint32 question_b = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_question_b());
    }

    // optional uint32 question_c = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_question_c());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_FellowshipSurvey_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_FellowshipSurvey_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_FellowshipSurvey_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_FellowshipSurvey_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_FellowshipSurvey_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_FellowshipSurvey_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_FellowshipSurvey_SC::MergeFrom(const MSG_Ret_FellowshipSurvey_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_FellowshipSurvey_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      question_a_ = from.question_a_;
    }
    if (cached_has_bits & 0x00000002u) {
      question_b_ = from.question_b_;
    }
    if (cached_has_bits & 0x00000004u) {
      question_c_ = from.question_c_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_FellowshipSurvey_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_FellowshipSurvey_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_FellowshipSurvey_SC::CopyFrom(const MSG_Ret_FellowshipSurvey_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_FellowshipSurvey_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_FellowshipSurvey_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_FellowshipSurvey_SC::InternalSwap(MSG_Ret_FellowshipSurvey_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(question_a_, other->question_a_);
  swap(question_b_, other->question_b_);
  swap(question_c_, other->question_c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_FellowshipSurvey_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_SubmitFellowshipSurvey_CS::InitAsDefaultInstance() {
}
class MSG_Req_SubmitFellowshipSurvey_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_SubmitFellowshipSurvey_CS>()._has_bits_);
  static void set_has_question_a(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_question_b(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_question_c(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_answer_a(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_answer_b(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_answer_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_SubmitFellowshipSurvey_CS::MSG_Req_SubmitFellowshipSurvey_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_SubmitFellowshipSurvey_CS)
}
MSG_Req_SubmitFellowshipSurvey_CS::MSG_Req_SubmitFellowshipSurvey_CS(const MSG_Req_SubmitFellowshipSurvey_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_answer_c()) {
    answer_c_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.answer_c_);
  }
  ::memcpy(&question_a_, &from.question_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&answer_b_) -
    reinterpret_cast<char*>(&question_a_)) + sizeof(answer_b_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_SubmitFellowshipSurvey_CS)
}

void MSG_Req_SubmitFellowshipSurvey_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_SubmitFellowshipSurvey_CS_guild_2eproto.base);
  answer_c_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&question_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&answer_b_) -
      reinterpret_cast<char*>(&question_a_)) + sizeof(answer_b_));
}

MSG_Req_SubmitFellowshipSurvey_CS::~MSG_Req_SubmitFellowshipSurvey_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_SubmitFellowshipSurvey_CS)
  SharedDtor();
}

void MSG_Req_SubmitFellowshipSurvey_CS::SharedDtor() {
  answer_c_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_SubmitFellowshipSurvey_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_SubmitFellowshipSurvey_CS& MSG_Req_SubmitFellowshipSurvey_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_SubmitFellowshipSurvey_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_SubmitFellowshipSurvey_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_SubmitFellowshipSurvey_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    answer_c_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&question_a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&answer_b_) -
        reinterpret_cast<char*>(&question_a_)) + sizeof(answer_b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_SubmitFellowshipSurvey_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 question_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_question_a(&has_bits);
          question_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 question_b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_question_b(&has_bits);
          question_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 question_c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_question_c(&has_bits);
          question_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 answer_a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_answer_a(&has_bits);
          answer_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 answer_b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_answer_b(&has_bits);
          answer_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string answer_c = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_answer_c();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "guild.MSG_Req_SubmitFellowshipSurvey_CS.answer_c");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_SubmitFellowshipSurvey_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_SubmitFellowshipSurvey_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 question_a = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_question_a(), target);
  }

  // optional uint32 question_b = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_question_b(), target);
  }

  // optional uint32 question_c = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_question_c(), target);
  }

  // optional uint32 answer_a = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_answer_a(), target);
  }

  // optional uint32 answer_b = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_answer_b(), target);
  }

  // optional string answer_c = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_answer_c().data(), static_cast<int>(this->_internal_answer_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "guild.MSG_Req_SubmitFellowshipSurvey_CS.answer_c");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_answer_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_SubmitFellowshipSurvey_CS)
  return target;
}

size_t MSG_Req_SubmitFellowshipSurvey_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_SubmitFellowshipSurvey_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string answer_c = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_answer_c());
    }

    // optional uint32 question_a = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_question_a());
    }

    // optional uint32 question_b = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_question_b());
    }

    // optional uint32 question_c = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_question_c());
    }

    // optional uint32 answer_a = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_answer_a());
    }

    // optional uint32 answer_b = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_answer_b());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_SubmitFellowshipSurvey_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_SubmitFellowshipSurvey_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_SubmitFellowshipSurvey_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_SubmitFellowshipSurvey_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_SubmitFellowshipSurvey_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_SubmitFellowshipSurvey_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_SubmitFellowshipSurvey_CS::MergeFrom(const MSG_Req_SubmitFellowshipSurvey_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_SubmitFellowshipSurvey_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      answer_c_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.answer_c_);
    }
    if (cached_has_bits & 0x00000002u) {
      question_a_ = from.question_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      question_b_ = from.question_b_;
    }
    if (cached_has_bits & 0x00000008u) {
      question_c_ = from.question_c_;
    }
    if (cached_has_bits & 0x00000010u) {
      answer_a_ = from.answer_a_;
    }
    if (cached_has_bits & 0x00000020u) {
      answer_b_ = from.answer_b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_SubmitFellowshipSurvey_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_SubmitFellowshipSurvey_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_SubmitFellowshipSurvey_CS::CopyFrom(const MSG_Req_SubmitFellowshipSurvey_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_SubmitFellowshipSurvey_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_SubmitFellowshipSurvey_CS::IsInitialized() const {
  return true;
}

void MSG_Req_SubmitFellowshipSurvey_CS::InternalSwap(MSG_Req_SubmitFellowshipSurvey_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  answer_c_.Swap(&other->answer_c_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(question_a_, other->question_a_);
  swap(question_b_, other->question_b_);
  swap(question_c_, other->question_c_);
  swap(answer_a_, other->answer_a_);
  swap(answer_b_, other->answer_b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_SubmitFellowshipSurvey_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqDonateSalary_CS::InitAsDefaultInstance() {
}
class MSG_ReqDonateSalary_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqDonateSalary_CS>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqDonateSalary_CS::MSG_ReqDonateSalary_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_ReqDonateSalary_CS)
}
MSG_ReqDonateSalary_CS::MSG_ReqDonateSalary_CS(const MSG_ReqDonateSalary_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:guild.MSG_ReqDonateSalary_CS)
}

void MSG_ReqDonateSalary_CS::SharedCtor() {
  value_ = 0u;
}

MSG_ReqDonateSalary_CS::~MSG_ReqDonateSalary_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_ReqDonateSalary_CS)
  SharedDtor();
}

void MSG_ReqDonateSalary_CS::SharedDtor() {
}

void MSG_ReqDonateSalary_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqDonateSalary_CS& MSG_ReqDonateSalary_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqDonateSalary_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqDonateSalary_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_ReqDonateSalary_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqDonateSalary_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqDonateSalary_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_ReqDonateSalary_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_ReqDonateSalary_CS)
  return target;
}

size_t MSG_ReqDonateSalary_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_ReqDonateSalary_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 value = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqDonateSalary_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_ReqDonateSalary_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqDonateSalary_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqDonateSalary_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_ReqDonateSalary_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_ReqDonateSalary_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqDonateSalary_CS::MergeFrom(const MSG_ReqDonateSalary_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_ReqDonateSalary_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_value()) {
    _internal_set_value(from._internal_value());
  }
}

void MSG_ReqDonateSalary_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_ReqDonateSalary_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqDonateSalary_CS::CopyFrom(const MSG_ReqDonateSalary_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_ReqDonateSalary_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqDonateSalary_CS::IsInitialized() const {
  return true;
}

void MSG_ReqDonateSalary_CS::InternalSwap(MSG_ReqDonateSalary_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqDonateSalary_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqUserCntData_CSC::InitAsDefaultInstance() {
}
class MSG_ReqUserCntData_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqUserCntData_CSC>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqUserCntData_CSC::MSG_ReqUserCntData_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_ReqUserCntData_CSC)
}
MSG_ReqUserCntData_CSC::MSG_ReqUserCntData_CSC(const MSG_ReqUserCntData_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:guild.MSG_ReqUserCntData_CSC)
}

void MSG_ReqUserCntData_CSC::SharedCtor() {
  value_ = 0u;
  type_ = 1;
}

MSG_ReqUserCntData_CSC::~MSG_ReqUserCntData_CSC() {
  // @@protoc_insertion_point(destructor:guild.MSG_ReqUserCntData_CSC)
  SharedDtor();
}

void MSG_ReqUserCntData_CSC::SharedDtor() {
}

void MSG_ReqUserCntData_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqUserCntData_CSC& MSG_ReqUserCntData_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqUserCntData_CSC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqUserCntData_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_ReqUserCntData_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    value_ = 0u;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqUserCntData_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guild.UserDataType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::guild::UserDataType_IsValid(val))) {
            _internal_set_type(static_cast<::guild::UserDataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqUserCntData_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_ReqUserCntData_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guild.UserDataType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_ReqUserCntData_CSC)
  return target;
}

size_t MSG_ReqUserCntData_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_ReqUserCntData_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

    // optional .guild.UserDataType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqUserCntData_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_ReqUserCntData_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqUserCntData_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqUserCntData_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_ReqUserCntData_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_ReqUserCntData_CSC)
    MergeFrom(*source);
  }
}

void MSG_ReqUserCntData_CSC::MergeFrom(const MSG_ReqUserCntData_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_ReqUserCntData_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqUserCntData_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_ReqUserCntData_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqUserCntData_CSC::CopyFrom(const MSG_ReqUserCntData_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_ReqUserCntData_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqUserCntData_CSC::IsInitialized() const {
  return true;
}

void MSG_ReqUserCntData_CSC::InternalSwap(MSG_ReqUserCntData_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqUserCntData_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void guildSkill::InitAsDefaultInstance() {
}
class guildSkill::_Internal {
 public:
  using HasBits = decltype(std::declval<guildSkill>()._has_bits_);
  static void set_has_skillid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skilllv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

guildSkill::guildSkill()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.guildSkill)
}
guildSkill::guildSkill(const guildSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skillid_, &from.skillid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skilllv_) -
    reinterpret_cast<char*>(&skillid_)) + sizeof(skilllv_));
  // @@protoc_insertion_point(copy_constructor:guild.guildSkill)
}

void guildSkill::SharedCtor() {
  ::memset(&skillid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skilllv_) -
      reinterpret_cast<char*>(&skillid_)) + sizeof(skilllv_));
}

guildSkill::~guildSkill() {
  // @@protoc_insertion_point(destructor:guild.guildSkill)
  SharedDtor();
}

void guildSkill::SharedDtor() {
}

void guildSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const guildSkill& guildSkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_guildSkill_guild_2eproto.base);
  return *internal_default_instance();
}


void guildSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.guildSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&skillid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skilllv_) -
        reinterpret_cast<char*>(&skillid_)) + sizeof(skilllv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* guildSkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 skillid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_skillid(&has_bits);
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skilllv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_skilllv(&has_bits);
          skilllv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* guildSkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.guildSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 skillid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skillid(), target);
  }

  // optional uint32 skilllv = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skilllv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.guildSkill)
  return target;
}

size_t guildSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.guildSkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 skillid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skillid());
    }

    // optional uint32 skilllv = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skilllv());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void guildSkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.guildSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const guildSkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<guildSkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.guildSkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.guildSkill)
    MergeFrom(*source);
  }
}

void guildSkill::MergeFrom(const guildSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.guildSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000002u) {
      skilllv_ = from.skilllv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void guildSkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.guildSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildSkill::CopyFrom(const guildSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.guildSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildSkill::IsInitialized() const {
  return true;
}

void guildSkill::InternalSwap(guildSkill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(skillid_, other->skillid_);
  swap(skilllv_, other->skilllv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata guildSkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GuildSkill_CS::InitAsDefaultInstance() {
}
class MSG_Req_GuildSkill_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GuildSkill_CS>()._has_bits_);
};

MSG_Req_GuildSkill_CS::MSG_Req_GuildSkill_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_GuildSkill_CS)
}
MSG_Req_GuildSkill_CS::MSG_Req_GuildSkill_CS(const MSG_Req_GuildSkill_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_GuildSkill_CS)
}

void MSG_Req_GuildSkill_CS::SharedCtor() {
}

MSG_Req_GuildSkill_CS::~MSG_Req_GuildSkill_CS() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_GuildSkill_CS)
  SharedDtor();
}

void MSG_Req_GuildSkill_CS::SharedDtor() {
}

void MSG_Req_GuildSkill_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GuildSkill_CS& MSG_Req_GuildSkill_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GuildSkill_CS_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GuildSkill_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_GuildSkill_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GuildSkill_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GuildSkill_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_GuildSkill_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_GuildSkill_CS)
  return target;
}

size_t MSG_Req_GuildSkill_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_GuildSkill_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GuildSkill_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_GuildSkill_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GuildSkill_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GuildSkill_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_GuildSkill_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_GuildSkill_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GuildSkill_CS::MergeFrom(const MSG_Req_GuildSkill_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_GuildSkill_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_GuildSkill_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_GuildSkill_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GuildSkill_CS::CopyFrom(const MSG_Req_GuildSkill_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_GuildSkill_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GuildSkill_CS::IsInitialized() const {
  return true;
}

void MSG_Req_GuildSkill_CS::InternalSwap(MSG_Req_GuildSkill_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GuildSkill_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GuildSkill_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GuildSkill_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GuildSkill_SC>()._has_bits_);
};

MSG_Ret_GuildSkill_SC::MSG_Ret_GuildSkill_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Ret_GuildSkill_SC)
}
MSG_Ret_GuildSkill_SC::MSG_Ret_GuildSkill_SC(const MSG_Ret_GuildSkill_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      skillinfo_(from.skillinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Ret_GuildSkill_SC)
}

void MSG_Ret_GuildSkill_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_GuildSkill_SC_guild_2eproto.base);
}

MSG_Ret_GuildSkill_SC::~MSG_Ret_GuildSkill_SC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Ret_GuildSkill_SC)
  SharedDtor();
}

void MSG_Ret_GuildSkill_SC::SharedDtor() {
}

void MSG_Ret_GuildSkill_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GuildSkill_SC& MSG_Ret_GuildSkill_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GuildSkill_SC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GuildSkill_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Ret_GuildSkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skillinfo_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GuildSkill_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .guild.guildSkill skillinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skillinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GuildSkill_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Ret_GuildSkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .guild.guildSkill skillinfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skillinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_skillinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Ret_GuildSkill_SC)
  return target;
}

size_t MSG_Ret_GuildSkill_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Ret_GuildSkill_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .guild.guildSkill skillinfo = 1;
  total_size += 1UL * this->_internal_skillinfo_size();
  for (const auto& msg : this->skillinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GuildSkill_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Ret_GuildSkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GuildSkill_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GuildSkill_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Ret_GuildSkill_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Ret_GuildSkill_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GuildSkill_SC::MergeFrom(const MSG_Ret_GuildSkill_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Ret_GuildSkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skillinfo_.MergeFrom(from.skillinfo_);
}

void MSG_Ret_GuildSkill_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Ret_GuildSkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GuildSkill_SC::CopyFrom(const MSG_Ret_GuildSkill_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Ret_GuildSkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GuildSkill_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GuildSkill_SC::InternalSwap(MSG_Ret_GuildSkill_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  skillinfo_.InternalSwap(&other->skillinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GuildSkill_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_LearnGuildSkill_CSC::InitAsDefaultInstance() {
  ::guild::_MSG_Req_LearnGuildSkill_CSC_default_instance_._instance.get_mutable()->skillinfo_ = const_cast< ::guild::guildSkill*>(
      ::guild::guildSkill::internal_default_instance());
}
class MSG_Req_LearnGuildSkill_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_LearnGuildSkill_CSC>()._has_bits_);
  static const ::guild::guildSkill& skillinfo(const MSG_Req_LearnGuildSkill_CSC* msg);
  static void set_has_skillinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::guild::guildSkill&
MSG_Req_LearnGuildSkill_CSC::_Internal::skillinfo(const MSG_Req_LearnGuildSkill_CSC* msg) {
  return *msg->skillinfo_;
}
MSG_Req_LearnGuildSkill_CSC::MSG_Req_LearnGuildSkill_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:guild.MSG_Req_LearnGuildSkill_CSC)
}
MSG_Req_LearnGuildSkill_CSC::MSG_Req_LearnGuildSkill_CSC(const MSG_Req_LearnGuildSkill_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_skillinfo()) {
    skillinfo_ = new ::guild::guildSkill(*from.skillinfo_);
  } else {
    skillinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:guild.MSG_Req_LearnGuildSkill_CSC)
}

void MSG_Req_LearnGuildSkill_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_LearnGuildSkill_CSC_guild_2eproto.base);
  skillinfo_ = nullptr;
}

MSG_Req_LearnGuildSkill_CSC::~MSG_Req_LearnGuildSkill_CSC() {
  // @@protoc_insertion_point(destructor:guild.MSG_Req_LearnGuildSkill_CSC)
  SharedDtor();
}

void MSG_Req_LearnGuildSkill_CSC::SharedDtor() {
  if (this != internal_default_instance()) delete skillinfo_;
}

void MSG_Req_LearnGuildSkill_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_LearnGuildSkill_CSC& MSG_Req_LearnGuildSkill_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_LearnGuildSkill_CSC_guild_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_LearnGuildSkill_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:guild.MSG_Req_LearnGuildSkill_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(skillinfo_ != nullptr);
    skillinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_LearnGuildSkill_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .guild.guildSkill skillinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_skillinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_LearnGuildSkill_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:guild.MSG_Req_LearnGuildSkill_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .guild.guildSkill skillinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::skillinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:guild.MSG_Req_LearnGuildSkill_CSC)
  return target;
}

size_t MSG_Req_LearnGuildSkill_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:guild.MSG_Req_LearnGuildSkill_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .guild.guildSkill skillinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skillinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_LearnGuildSkill_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:guild.MSG_Req_LearnGuildSkill_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_LearnGuildSkill_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_LearnGuildSkill_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:guild.MSG_Req_LearnGuildSkill_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:guild.MSG_Req_LearnGuildSkill_CSC)
    MergeFrom(*source);
  }
}

void MSG_Req_LearnGuildSkill_CSC::MergeFrom(const MSG_Req_LearnGuildSkill_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:guild.MSG_Req_LearnGuildSkill_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_skillinfo()) {
    _internal_mutable_skillinfo()->::guild::guildSkill::MergeFrom(from._internal_skillinfo());
  }
}

void MSG_Req_LearnGuildSkill_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:guild.MSG_Req_LearnGuildSkill_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_LearnGuildSkill_CSC::CopyFrom(const MSG_Req_LearnGuildSkill_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:guild.MSG_Req_LearnGuildSkill_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_LearnGuildSkill_CSC::IsInitialized() const {
  return true;
}

void MSG_Req_LearnGuildSkill_CSC::InternalSwap(MSG_Req_LearnGuildSkill_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(skillinfo_, other->skillinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_LearnGuildSkill_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace guild
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::guild::guildMember* Arena::CreateMaybeMessage< ::guild::guildMember >(Arena* arena) {
  return Arena::CreateInternal< ::guild::guildMember >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::guildInfo* Arena::CreateMaybeMessage< ::guild::guildInfo >(Arena* arena) {
  return Arena::CreateInternal< ::guild::guildInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_PreCreateGuild_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_PreCreateGuild_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_PreCreateGuild_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_PreCreateGuild_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_PreCreateGuild_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_PreCreateGuild_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_CreateGuild_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_CreateGuild_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_CreateGuild_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_CreateGuild_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_CreateGuild_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_CreateGuild_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_SetGuildNotify_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_SetGuildNotify_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_SetGuildNotify_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_SetGuildNotify_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_SetGuildNotify_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_SetGuildNotify_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildInfo_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildInfo_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildList_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildList_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildList_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::guildListItem* Arena::CreateMaybeMessage< ::guild::guildListItem >(Arena* arena) {
  return Arena::CreateInternal< ::guild::guildListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildList_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_ApplyForGuild_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_ApplyForGuild_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_ApplyForGuild_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_ApplyForGuild_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_ApplyForGuild_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_ApplyForGuild_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::stApplyForItem* Arena::CreateMaybeMessage< ::guild::stApplyForItem >(Arena* arena) {
  return Arena::CreateInternal< ::guild::stApplyForItem >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_AnswerApplyForGuild_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_AnswerApplyForGuild_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_AnswerApplyForGuild_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_AnswerApplyForGuild_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_AnswerApplyForGuild_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_AnswerApplyForGuild_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_MyGuildApply_Result_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_MyGuildApply_Result_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_MyGuildApply_Result_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildMemberList_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildMemberList_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildMemberList_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildMemberList_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildMemberList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildMemberList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_IntoGuildMap_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_IntoGuildMap_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_IntoGuildMap_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_CiTanEnemyGuildList_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_CiTanEnemyGuildList_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_CiTanEnemyGuildList_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::CiTanEnemyGuildItem* Arena::CreateMaybeMessage< ::guild::CiTanEnemyGuildItem >(Arena* arena) {
  return Arena::CreateInternal< ::guild::CiTanEnemyGuildItem >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_CiTanEnemyGuildList_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_CiTanEnemyGuildList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_CiTanEnemyGuildList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_ChooseCiTanEnemyGuild_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_ChooseCiTanEnemyGuild_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_ChooseCiTanEnemyGuild_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_TargetCiTanEnemyGuild_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_TargetCiTanEnemyGuild_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_TargetCiTanEnemyGuild_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_ChoosedCiTanEnemyGuild_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_ChoosedCiTanEnemyGuild_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_ChoosedCiTanEnemyGuild_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_IntoCiTanEnemyGuild_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_IntoCiTanEnemyGuild_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_IntoCiTanEnemyGuild_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_CiTanBacktoMyGuild_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_CiTanBacktoMyGuild_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_CiTanBacktoMyGuild_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::GuildPositionInfo* Arena::CreateMaybeMessage< ::guild::GuildPositionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::guild::GuildPositionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_AddGuildPosition_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_AddGuildPosition_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_AddGuildPosition_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_DeleteGuildPosition_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_DeleteGuildPosition_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_DeleteGuildPosition_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::SwapGuildPosInfo* Arena::CreateMaybeMessage< ::guild::SwapGuildPosInfo >(Arena* arena) {
  return Arena::CreateInternal< ::guild::SwapGuildPosInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_SwapGuildPosOrder_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_SwapGuildPosOrder_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_SwapGuildPosOrder_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_ChangePositionName_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_ChangePositionName_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_ChangePositionName_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_ChangePositionPri_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_ChangePositionPri_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_ChangePositionPri_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_AssignPosition_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_AssignPosition_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_AssignPosition_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_AssignPosition_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_AssignPosition_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_AssignPosition_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_PositionInfo_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_PositionInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_PositionInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildLevelup_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildLevelup_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildLevelup_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildLevelup_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildLevelup_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildLevelup_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildSetInfo_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildSetInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildSetInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildSetInfo_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildSetInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildSetInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_CheckDayWelfare_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_CheckDayWelfare_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_CheckDayWelfare_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GetDayWelfare_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GetDayWelfare_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GetDayWelfare_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GetDayWelfare_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GetDayWelfare_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GetDayWelfare_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildGoods_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildGoods_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildGoods_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::GoodsInfo* Arena::CreateMaybeMessage< ::guild::GoodsInfo >(Arena* arena) {
  return Arena::CreateInternal< ::guild::GoodsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildGoods_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildGoods_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildGoods_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_SubmitGuildGoods_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_SubmitGuildGoods_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_SubmitGuildGoods_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_SubmitGuildGoods_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_SubmitGuildGoods_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_SubmitGuildGoods_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_QuitGuild_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_QuitGuild_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_QuitGuild_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_QuitGuild_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_QuitGuild_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_QuitGuild_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_FireGuildMember_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_FireGuildMember_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_FireGuildMember_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_FireGuildMember_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_FireGuildMember_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_FireGuildMember_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_BeFiredGuildMember_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_BeFiredGuildMember_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_BeFiredGuildMember_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildInvite_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildInvite_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildInvite_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildInvite_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildInvite_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildInvite_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildInviteConfirm_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildInviteConfirm_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildInviteConfirm_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildInviteConfirm_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildInviteConfirm_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildInviteConfirm_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_DismissGuild_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_DismissGuild_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_DismissGuild_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_DismissGuild_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_DismissGuild_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_DismissGuild_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_ChangeGuildMaster_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_ChangeGuildMaster_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_ChangeGuildMaster_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_ChangeGuildMaster_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_ChangeGuildMaster_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_ChangeGuildMaster_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::ViceMaster* Arena::CreateMaybeMessage< ::guild::ViceMaster >(Arena* arena) {
  return Arena::CreateInternal< ::guild::ViceMaster >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildViceMaster_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildViceMaster_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildViceMaster_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildViceMaster_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildViceMaster_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildViceMaster_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildExtension_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildExtension_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildExtension_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildExtension_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildExtension_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildExtension_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_OneKeyApply_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_OneKeyApply_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_OneKeyApply_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_OneKeyApply_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_OneKeyApply_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_OneKeyApply_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_RecrutCondition_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_RecrutCondition_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_RecrutCondition_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_RetRecrutCondition_SC* Arena::CreateMaybeMessage< ::guild::MSG_RetRecrutCondition_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_RetRecrutCondition_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_ModifyRecrutCondition_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_ModifyRecrutCondition_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_ModifyRecrutCondition_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildTechnique_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildTechnique_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildTechnique_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::TechniqueInfo* Arena::CreateMaybeMessage< ::guild::TechniqueInfo >(Arena* arena) {
  return Arena::CreateInternal< ::guild::TechniqueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildTechnique_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildTechnique_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildTechnique_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_TechniqueUpGrade_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_TechniqueUpGrade_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_TechniqueUpGrade_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_TechniqueUpGrade_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_TechniqueUpGrade_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_TechniqueUpGrade_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_RefreshTechniqueInfo_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_RefreshTechniqueInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_RefreshTechniqueInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_TechniqueDevelop_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_TechniqueDevelop_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_TechniqueDevelop_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_TechniqueDevelop_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_TechniqueDevelop_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_TechniqueDevelop_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildPartyActivityInfo_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildPartyActivityInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildPartyActivityInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildPartyActivityInfo_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildPartyActivityInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildPartyActivityInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_StartGuildParty_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_StartGuildParty_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_StartGuildParty_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildPartyActivityData_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildPartyActivityData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildPartyActivityData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_FellowshipSurvey_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_FellowshipSurvey_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_FellowshipSurvey_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_SubmitFellowshipSurvey_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_SubmitFellowshipSurvey_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_SubmitFellowshipSurvey_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_ReqDonateSalary_CS* Arena::CreateMaybeMessage< ::guild::MSG_ReqDonateSalary_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_ReqDonateSalary_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_ReqUserCntData_CSC* Arena::CreateMaybeMessage< ::guild::MSG_ReqUserCntData_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_ReqUserCntData_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::guildSkill* Arena::CreateMaybeMessage< ::guild::guildSkill >(Arena* arena) {
  return Arena::CreateInternal< ::guild::guildSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_GuildSkill_CS* Arena::CreateMaybeMessage< ::guild::MSG_Req_GuildSkill_CS >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_GuildSkill_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Ret_GuildSkill_SC* Arena::CreateMaybeMessage< ::guild::MSG_Ret_GuildSkill_SC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Ret_GuildSkill_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::guild::MSG_Req_LearnGuildSkill_CSC* Arena::CreateMaybeMessage< ::guild::MSG_Req_LearnGuildSkill_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::guild::MSG_Req_LearnGuildSkill_CSC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
