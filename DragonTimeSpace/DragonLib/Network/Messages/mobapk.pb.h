// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mobapk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mobapk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mobapk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mobapk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mobapk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mobapk_2eproto;
namespace mobapk {
class GetBagInfo;
class GetBagInfoDefaultTypeInternal;
extern GetBagInfoDefaultTypeInternal _GetBagInfo_default_instance_;
class MSG_BstUserTeamInfo_SC;
class MSG_BstUserTeamInfo_SCDefaultTypeInternal;
extern MSG_BstUserTeamInfo_SCDefaultTypeInternal _MSG_BstUserTeamInfo_SC_default_instance_;
class MSG_ClientEffect_SC;
class MSG_ClientEffect_SCDefaultTypeInternal;
extern MSG_ClientEffect_SCDefaultTypeInternal _MSG_ClientEffect_SC_default_instance_;
class MSG_DismissGroup_SC;
class MSG_DismissGroup_SCDefaultTypeInternal;
extern MSG_DismissGroup_SCDefaultTypeInternal _MSG_DismissGroup_SC_default_instance_;
class MSG_GameOver_SC;
class MSG_GameOver_SCDefaultTypeInternal;
extern MSG_GameOver_SCDefaultTypeInternal _MSG_GameOver_SC_default_instance_;
class MSG_MatchInfo_SC;
class MSG_MatchInfo_SCDefaultTypeInternal;
extern MSG_MatchInfo_SCDefaultTypeInternal _MSG_MatchInfo_SC_default_instance_;
class MSG_MatchReady_CS;
class MSG_MatchReady_CSDefaultTypeInternal;
extern MSG_MatchReady_CSDefaultTypeInternal _MSG_MatchReady_CS_default_instance_;
class MSG_MobaLevelUp_SC;
class MSG_MobaLevelUp_SCDefaultTypeInternal;
extern MSG_MobaLevelUp_SCDefaultTypeInternal _MSG_MobaLevelUp_SC_default_instance_;
class MSG_MyTeamInfo_SC;
class MSG_MyTeamInfo_SCDefaultTypeInternal;
extern MSG_MyTeamInfo_SCDefaultTypeInternal _MSG_MyTeamInfo_SC_default_instance_;
class MSG_RefreshPowerRank_SC;
class MSG_RefreshPowerRank_SCDefaultTypeInternal;
extern MSG_RefreshPowerRank_SCDefaultTypeInternal _MSG_RefreshPowerRank_SC_default_instance_;
class MSG_RefreshRadarPos_CSC;
class MSG_RefreshRadarPos_CSCDefaultTypeInternal;
extern MSG_RefreshRadarPos_CSCDefaultTypeInternal _MSG_RefreshRadarPos_CSC_default_instance_;
class MSG_RewardBagInfo_SC;
class MSG_RewardBagInfo_SCDefaultTypeInternal;
extern MSG_RewardBagInfo_SCDefaultTypeInternal _MSG_RewardBagInfo_SC_default_instance_;
class MSG_SelectHopes_CS;
class MSG_SelectHopes_CSDefaultTypeInternal;
extern MSG_SelectHopes_CSDefaultTypeInternal _MSG_SelectHopes_CS_default_instance_;
class MSG_ServerTimer_SC;
class MSG_ServerTimer_SCDefaultTypeInternal;
extern MSG_ServerTimer_SCDefaultTypeInternal _MSG_ServerTimer_SC_default_instance_;
class MSG_StartPray_SC;
class MSG_StartPray_SCDefaultTypeInternal;
extern MSG_StartPray_SCDefaultTypeInternal _MSG_StartPray_SC_default_instance_;
class MSG_UseSpecialCapsule_CS;
class MSG_UseSpecialCapsule_CSDefaultTypeInternal;
extern MSG_UseSpecialCapsule_CSDefaultTypeInternal _MSG_UseSpecialCapsule_CS_default_instance_;
class MSG_UserGetAwardReq_CS;
class MSG_UserGetAwardReq_CSDefaultTypeInternal;
extern MSG_UserGetAwardReq_CSDefaultTypeInternal _MSG_UserGetAwardReq_CS_default_instance_;
class MSG_UserMatchReq_CS;
class MSG_UserMatchReq_CSDefaultTypeInternal;
extern MSG_UserMatchReq_CSDefaultTypeInternal _MSG_UserMatchReq_CS_default_instance_;
class PowerItem;
class PowerItemDefaultTypeInternal;
extern PowerItemDefaultTypeInternal _PowerItem_default_instance_;
class RadarPos;
class RadarPosDefaultTypeInternal;
extern RadarPosDefaultTypeInternal _RadarPos_default_instance_;
class TeamUser;
class TeamUserDefaultTypeInternal;
extern TeamUserDefaultTypeInternal _TeamUser_default_instance_;
class UserTeamInfo;
class UserTeamInfoDefaultTypeInternal;
extern UserTeamInfoDefaultTypeInternal _UserTeamInfo_default_instance_;
}  // namespace mobapk
PROTOBUF_NAMESPACE_OPEN
template<> ::mobapk::GetBagInfo* Arena::CreateMaybeMessage<::mobapk::GetBagInfo>(Arena*);
template<> ::mobapk::MSG_BstUserTeamInfo_SC* Arena::CreateMaybeMessage<::mobapk::MSG_BstUserTeamInfo_SC>(Arena*);
template<> ::mobapk::MSG_ClientEffect_SC* Arena::CreateMaybeMessage<::mobapk::MSG_ClientEffect_SC>(Arena*);
template<> ::mobapk::MSG_DismissGroup_SC* Arena::CreateMaybeMessage<::mobapk::MSG_DismissGroup_SC>(Arena*);
template<> ::mobapk::MSG_GameOver_SC* Arena::CreateMaybeMessage<::mobapk::MSG_GameOver_SC>(Arena*);
template<> ::mobapk::MSG_MatchInfo_SC* Arena::CreateMaybeMessage<::mobapk::MSG_MatchInfo_SC>(Arena*);
template<> ::mobapk::MSG_MatchReady_CS* Arena::CreateMaybeMessage<::mobapk::MSG_MatchReady_CS>(Arena*);
template<> ::mobapk::MSG_MobaLevelUp_SC* Arena::CreateMaybeMessage<::mobapk::MSG_MobaLevelUp_SC>(Arena*);
template<> ::mobapk::MSG_MyTeamInfo_SC* Arena::CreateMaybeMessage<::mobapk::MSG_MyTeamInfo_SC>(Arena*);
template<> ::mobapk::MSG_RefreshPowerRank_SC* Arena::CreateMaybeMessage<::mobapk::MSG_RefreshPowerRank_SC>(Arena*);
template<> ::mobapk::MSG_RefreshRadarPos_CSC* Arena::CreateMaybeMessage<::mobapk::MSG_RefreshRadarPos_CSC>(Arena*);
template<> ::mobapk::MSG_RewardBagInfo_SC* Arena::CreateMaybeMessage<::mobapk::MSG_RewardBagInfo_SC>(Arena*);
template<> ::mobapk::MSG_SelectHopes_CS* Arena::CreateMaybeMessage<::mobapk::MSG_SelectHopes_CS>(Arena*);
template<> ::mobapk::MSG_ServerTimer_SC* Arena::CreateMaybeMessage<::mobapk::MSG_ServerTimer_SC>(Arena*);
template<> ::mobapk::MSG_StartPray_SC* Arena::CreateMaybeMessage<::mobapk::MSG_StartPray_SC>(Arena*);
template<> ::mobapk::MSG_UseSpecialCapsule_CS* Arena::CreateMaybeMessage<::mobapk::MSG_UseSpecialCapsule_CS>(Arena*);
template<> ::mobapk::MSG_UserGetAwardReq_CS* Arena::CreateMaybeMessage<::mobapk::MSG_UserGetAwardReq_CS>(Arena*);
template<> ::mobapk::MSG_UserMatchReq_CS* Arena::CreateMaybeMessage<::mobapk::MSG_UserMatchReq_CS>(Arena*);
template<> ::mobapk::PowerItem* Arena::CreateMaybeMessage<::mobapk::PowerItem>(Arena*);
template<> ::mobapk::RadarPos* Arena::CreateMaybeMessage<::mobapk::RadarPos>(Arena*);
template<> ::mobapk::TeamUser* Arena::CreateMaybeMessage<::mobapk::TeamUser>(Arena*);
template<> ::mobapk::UserTeamInfo* Arena::CreateMaybeMessage<::mobapk::UserTeamInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mobapk {

enum ServerTimer : int {
  MobaPk_Confirm_RestTime = 1,
  MobaPk_Start_RestTime = 2,
  MobaPk_Relive_RestTime = 3,
  MobaPk_KickoutLastOne_RestTime = 4,
  MobaPk_Pray_RestTime = 5
};
bool ServerTimer_IsValid(int value);
constexpr ServerTimer ServerTimer_MIN = MobaPk_Confirm_RestTime;
constexpr ServerTimer ServerTimer_MAX = MobaPk_Pray_RestTime;
constexpr int ServerTimer_ARRAYSIZE = ServerTimer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerTimer_descriptor();
template<typename T>
inline const std::string& ServerTimer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerTimer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerTimer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerTimer_descriptor(), enum_t_value);
}
inline bool ServerTimer_Parse(
    const std::string& name, ServerTimer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerTimer>(
    ServerTimer_descriptor(), name, value);
}
// ===================================================================

class MSG_UserMatchReq_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_UserMatchReq_CS) */ {
 public:
  MSG_UserMatchReq_CS();
  virtual ~MSG_UserMatchReq_CS();

  MSG_UserMatchReq_CS(const MSG_UserMatchReq_CS& from);
  MSG_UserMatchReq_CS(MSG_UserMatchReq_CS&& from) noexcept
    : MSG_UserMatchReq_CS() {
    *this = ::std::move(from);
  }

  inline MSG_UserMatchReq_CS& operator=(const MSG_UserMatchReq_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_UserMatchReq_CS& operator=(MSG_UserMatchReq_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_UserMatchReq_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_UserMatchReq_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_UserMatchReq_CS*>(
               &_MSG_UserMatchReq_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MSG_UserMatchReq_CS& a, MSG_UserMatchReq_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_UserMatchReq_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_UserMatchReq_CS* New() const final {
    return CreateMaybeMessage<MSG_UserMatchReq_CS>(nullptr);
  }

  MSG_UserMatchReq_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_UserMatchReq_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_UserMatchReq_CS& from);
  void MergeFrom(const MSG_UserMatchReq_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_UserMatchReq_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_UserMatchReq_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsMatchFieldNumber = 1,
  };
  // optional bool is_match = 1;
  bool has_is_match() const;
  private:
  bool _internal_has_is_match() const;
  public:
  void clear_is_match();
  bool is_match() const;
  void set_is_match(bool value);
  private:
  bool _internal_is_match() const;
  void _internal_set_is_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_UserMatchReq_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool is_match_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_MatchInfo_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_MatchInfo_SC) */ {
 public:
  MSG_MatchInfo_SC();
  virtual ~MSG_MatchInfo_SC();

  MSG_MatchInfo_SC(const MSG_MatchInfo_SC& from);
  MSG_MatchInfo_SC(MSG_MatchInfo_SC&& from) noexcept
    : MSG_MatchInfo_SC() {
    *this = ::std::move(from);
  }

  inline MSG_MatchInfo_SC& operator=(const MSG_MatchInfo_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_MatchInfo_SC& operator=(MSG_MatchInfo_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_MatchInfo_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_MatchInfo_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_MatchInfo_SC*>(
               &_MSG_MatchInfo_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MSG_MatchInfo_SC& a, MSG_MatchInfo_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_MatchInfo_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_MatchInfo_SC* New() const final {
    return CreateMaybeMessage<MSG_MatchInfo_SC>(nullptr);
  }

  MSG_MatchInfo_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_MatchInfo_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_MatchInfo_SC& from);
  void MergeFrom(const MSG_MatchInfo_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_MatchInfo_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_MatchInfo_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kReadyNumFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // optional uint32 num = 1;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ready_num = 2;
  bool has_ready_num() const;
  private:
  bool _internal_has_ready_num() const;
  public:
  void clear_ready_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 ready_num() const;
  void set_ready_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ready_num() const;
  void _internal_set_ready_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_MatchInfo_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ready_num_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_MatchReady_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_MatchReady_CS) */ {
 public:
  MSG_MatchReady_CS();
  virtual ~MSG_MatchReady_CS();

  MSG_MatchReady_CS(const MSG_MatchReady_CS& from);
  MSG_MatchReady_CS(MSG_MatchReady_CS&& from) noexcept
    : MSG_MatchReady_CS() {
    *this = ::std::move(from);
  }

  inline MSG_MatchReady_CS& operator=(const MSG_MatchReady_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_MatchReady_CS& operator=(MSG_MatchReady_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_MatchReady_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_MatchReady_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_MatchReady_CS*>(
               &_MSG_MatchReady_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MSG_MatchReady_CS& a, MSG_MatchReady_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_MatchReady_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_MatchReady_CS* New() const final {
    return CreateMaybeMessage<MSG_MatchReady_CS>(nullptr);
  }

  MSG_MatchReady_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_MatchReady_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_MatchReady_CS& from);
  void MergeFrom(const MSG_MatchReady_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_MatchReady_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_MatchReady_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_MatchReady_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_DismissGroup_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_DismissGroup_SC) */ {
 public:
  MSG_DismissGroup_SC();
  virtual ~MSG_DismissGroup_SC();

  MSG_DismissGroup_SC(const MSG_DismissGroup_SC& from);
  MSG_DismissGroup_SC(MSG_DismissGroup_SC&& from) noexcept
    : MSG_DismissGroup_SC() {
    *this = ::std::move(from);
  }

  inline MSG_DismissGroup_SC& operator=(const MSG_DismissGroup_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_DismissGroup_SC& operator=(MSG_DismissGroup_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_DismissGroup_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_DismissGroup_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_DismissGroup_SC*>(
               &_MSG_DismissGroup_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MSG_DismissGroup_SC& a, MSG_DismissGroup_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_DismissGroup_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_DismissGroup_SC* New() const final {
    return CreateMaybeMessage<MSG_DismissGroup_SC>(nullptr);
  }

  MSG_DismissGroup_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_DismissGroup_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_DismissGroup_SC& from);
  void MergeFrom(const MSG_DismissGroup_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_DismissGroup_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_DismissGroup_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mobapk.MSG_DismissGroup_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class TeamUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.TeamUser) */ {
 public:
  TeamUser();
  virtual ~TeamUser();

  TeamUser(const TeamUser& from);
  TeamUser(TeamUser&& from) noexcept
    : TeamUser() {
    *this = ::std::move(from);
  }

  inline TeamUser& operator=(const TeamUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamUser& operator=(TeamUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TeamUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamUser* internal_default_instance() {
    return reinterpret_cast<const TeamUser*>(
               &_TeamUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TeamUser& a, TeamUser& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamUser* New() const final {
    return CreateMaybeMessage<TeamUser>(nullptr);
  }

  TeamUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TeamUser& from);
  void MergeFrom(const TeamUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.TeamUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUidFieldNumber = 1,
    kLevelFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kOnlineFieldNumber = 6,
    kHairstyleFieldNumber = 7,
    kHaircolorFieldNumber = 8,
    kHeadstyleFieldNumber = 9,
    kBodystyleFieldNumber = 10,
    kAntennaFieldNumber = 11,
    kCoatFieldNumber = 12,
    kAvataridFieldNumber = 13,
    kMaxhpFieldNumber = 14,
    kHpFieldNumber = 15,
    kHeroidFieldNumber = 16,
    kExpFieldNumber = 17,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 x = 4;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 y = 5;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool online = 6;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  bool online() const;
  void set_online(bool value);
  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);
  public:

  // optional uint32 hairstyle = 7;
  bool has_hairstyle() const;
  private:
  bool _internal_has_hairstyle() const;
  public:
  void clear_hairstyle();
  ::PROTOBUF_NAMESPACE_ID::uint32 hairstyle() const;
  void set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hairstyle() const;
  void _internal_set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 haircolor = 8;
  bool has_haircolor() const;
  private:
  bool _internal_has_haircolor() const;
  public:
  void clear_haircolor();
  ::PROTOBUF_NAMESPACE_ID::uint32 haircolor() const;
  void set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_haircolor() const;
  void _internal_set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 headstyle = 9;
  bool has_headstyle() const;
  private:
  bool _internal_has_headstyle() const;
  public:
  void clear_headstyle();
  ::PROTOBUF_NAMESPACE_ID::uint32 headstyle() const;
  void set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_headstyle() const;
  void _internal_set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bodystyle = 10;
  bool has_bodystyle() const;
  private:
  bool _internal_has_bodystyle() const;
  public:
  void clear_bodystyle();
  ::PROTOBUF_NAMESPACE_ID::uint32 bodystyle() const;
  void set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bodystyle() const;
  void _internal_set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 antenna = 11;
  bool has_antenna() const;
  private:
  bool _internal_has_antenna() const;
  public:
  void clear_antenna();
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna() const;
  void set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_antenna() const;
  void _internal_set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 coat = 12;
  bool has_coat() const;
  private:
  bool _internal_has_coat() const;
  public:
  void clear_coat();
  ::PROTOBUF_NAMESPACE_ID::uint32 coat() const;
  void set_coat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coat() const;
  void _internal_set_coat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 avatarid = 13;
  bool has_avatarid() const;
  private:
  bool _internal_has_avatarid() const;
  public:
  void clear_avatarid();
  ::PROTOBUF_NAMESPACE_ID::uint32 avatarid() const;
  void set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avatarid() const;
  void _internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 maxhp = 14;
  bool has_maxhp() const;
  private:
  bool _internal_has_maxhp() const;
  public:
  void clear_maxhp();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxhp() const;
  void set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxhp() const;
  void _internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hp = 15;
  bool has_hp() const;
  private:
  bool _internal_has_hp() const;
  public:
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::uint32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 heroid = 16;
  bool has_heroid() const;
  private:
  bool _internal_has_heroid() const;
  public:
  void clear_heroid();
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid() const;
  void set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heroid() const;
  void _internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 exp = 17;
  bool has_exp() const;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.TeamUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  bool online_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hairstyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 haircolor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 headstyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bodystyle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avatarid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxhp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heroid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exp_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_MyTeamInfo_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_MyTeamInfo_SC) */ {
 public:
  MSG_MyTeamInfo_SC();
  virtual ~MSG_MyTeamInfo_SC();

  MSG_MyTeamInfo_SC(const MSG_MyTeamInfo_SC& from);
  MSG_MyTeamInfo_SC(MSG_MyTeamInfo_SC&& from) noexcept
    : MSG_MyTeamInfo_SC() {
    *this = ::std::move(from);
  }

  inline MSG_MyTeamInfo_SC& operator=(const MSG_MyTeamInfo_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_MyTeamInfo_SC& operator=(MSG_MyTeamInfo_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_MyTeamInfo_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_MyTeamInfo_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_MyTeamInfo_SC*>(
               &_MSG_MyTeamInfo_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MSG_MyTeamInfo_SC& a, MSG_MyTeamInfo_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_MyTeamInfo_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_MyTeamInfo_SC* New() const final {
    return CreateMaybeMessage<MSG_MyTeamInfo_SC>(nullptr);
  }

  MSG_MyTeamInfo_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_MyTeamInfo_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_MyTeamInfo_SC& from);
  void MergeFrom(const MSG_MyTeamInfo_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_MyTeamInfo_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_MyTeamInfo_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
    kTeamidFieldNumber = 3,
    kCreateTimeFieldNumber = 2,
  };
  // repeated .mobapk.TeamUser users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::mobapk::TeamUser* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::TeamUser >*
      mutable_users();
  private:
  const ::mobapk::TeamUser& _internal_users(int index) const;
  ::mobapk::TeamUser* _internal_add_users();
  public:
  const ::mobapk::TeamUser& users(int index) const;
  ::mobapk::TeamUser* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::TeamUser >&
      users() const;

  // optional string teamid = 3;
  bool has_teamid() const;
  private:
  bool _internal_has_teamid() const;
  public:
  void clear_teamid();
  const std::string& teamid() const;
  void set_teamid(const std::string& value);
  void set_teamid(std::string&& value);
  void set_teamid(const char* value);
  void set_teamid(const char* value, size_t size);
  std::string* mutable_teamid();
  std::string* release_teamid();
  void set_allocated_teamid(std::string* teamid);
  private:
  const std::string& _internal_teamid() const;
  void _internal_set_teamid(const std::string& value);
  std::string* _internal_mutable_teamid();
  public:

  // optional uint32 create_time = 2;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_create_time() const;
  void _internal_set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_MyTeamInfo_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::TeamUser > users_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 create_time_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class PowerItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.PowerItem) */ {
 public:
  PowerItem();
  virtual ~PowerItem();

  PowerItem(const PowerItem& from);
  PowerItem(PowerItem&& from) noexcept
    : PowerItem() {
    *this = ::std::move(from);
  }

  inline PowerItem& operator=(const PowerItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerItem& operator=(PowerItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerItem* internal_default_instance() {
    return reinterpret_cast<const PowerItem*>(
               &_PowerItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PowerItem& a, PowerItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerItem* New() const final {
    return CreateMaybeMessage<PowerItem>(nullptr);
  }

  PowerItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerItem& from);
  void MergeFrom(const PowerItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.PowerItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
    kPowerFieldNumber = 2,
  };
  // optional string color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // optional uint32 power = 2;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  ::PROTOBUF_NAMESPACE_ID::uint32 power() const;
  void set_power(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_power() const;
  void _internal_set_power(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.PowerItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 power_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_RefreshPowerRank_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_RefreshPowerRank_SC) */ {
 public:
  MSG_RefreshPowerRank_SC();
  virtual ~MSG_RefreshPowerRank_SC();

  MSG_RefreshPowerRank_SC(const MSG_RefreshPowerRank_SC& from);
  MSG_RefreshPowerRank_SC(MSG_RefreshPowerRank_SC&& from) noexcept
    : MSG_RefreshPowerRank_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RefreshPowerRank_SC& operator=(const MSG_RefreshPowerRank_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RefreshPowerRank_SC& operator=(MSG_RefreshPowerRank_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RefreshPowerRank_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RefreshPowerRank_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RefreshPowerRank_SC*>(
               &_MSG_RefreshPowerRank_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MSG_RefreshPowerRank_SC& a, MSG_RefreshPowerRank_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RefreshPowerRank_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RefreshPowerRank_SC* New() const final {
    return CreateMaybeMessage<MSG_RefreshPowerRank_SC>(nullptr);
  }

  MSG_RefreshPowerRank_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RefreshPowerRank_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RefreshPowerRank_SC& from);
  void MergeFrom(const MSG_RefreshPowerRank_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RefreshPowerRank_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_RefreshPowerRank_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .mobapk.PowerItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::mobapk::PowerItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::PowerItem >*
      mutable_items();
  private:
  const ::mobapk::PowerItem& _internal_items(int index) const;
  ::mobapk::PowerItem* _internal_add_items();
  public:
  const ::mobapk::PowerItem& items(int index) const;
  ::mobapk::PowerItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::PowerItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:mobapk.MSG_RefreshPowerRank_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::PowerItem > items_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class RadarPos :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.RadarPos) */ {
 public:
  RadarPos();
  virtual ~RadarPos();

  RadarPos(const RadarPos& from);
  RadarPos(RadarPos&& from) noexcept
    : RadarPos() {
    *this = ::std::move(from);
  }

  inline RadarPos& operator=(const RadarPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarPos& operator=(RadarPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarPos* internal_default_instance() {
    return reinterpret_cast<const RadarPos*>(
               &_RadarPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RadarPos& a, RadarPos& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarPos* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarPos* New() const final {
    return CreateMaybeMessage<RadarPos>(nullptr);
  }

  RadarPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarPos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarPos& from);
  void MergeFrom(const RadarPos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarPos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.RadarPos";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kNumFieldNumber = 3,
    kUidFieldNumber = 4,
  };
  // optional uint32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num = 3;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uid = 4;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.RadarPos)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uid_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_RefreshRadarPos_CSC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_RefreshRadarPos_CSC) */ {
 public:
  MSG_RefreshRadarPos_CSC();
  virtual ~MSG_RefreshRadarPos_CSC();

  MSG_RefreshRadarPos_CSC(const MSG_RefreshRadarPos_CSC& from);
  MSG_RefreshRadarPos_CSC(MSG_RefreshRadarPos_CSC&& from) noexcept
    : MSG_RefreshRadarPos_CSC() {
    *this = ::std::move(from);
  }

  inline MSG_RefreshRadarPos_CSC& operator=(const MSG_RefreshRadarPos_CSC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RefreshRadarPos_CSC& operator=(MSG_RefreshRadarPos_CSC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RefreshRadarPos_CSC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RefreshRadarPos_CSC* internal_default_instance() {
    return reinterpret_cast<const MSG_RefreshRadarPos_CSC*>(
               &_MSG_RefreshRadarPos_CSC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MSG_RefreshRadarPos_CSC& a, MSG_RefreshRadarPos_CSC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RefreshRadarPos_CSC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RefreshRadarPos_CSC* New() const final {
    return CreateMaybeMessage<MSG_RefreshRadarPos_CSC>(nullptr);
  }

  MSG_RefreshRadarPos_CSC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RefreshRadarPos_CSC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RefreshRadarPos_CSC& from);
  void MergeFrom(const MSG_RefreshRadarPos_CSC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RefreshRadarPos_CSC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_RefreshRadarPos_CSC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // repeated .mobapk.RadarPos pos = 1;
  int pos_size() const;
  private:
  int _internal_pos_size() const;
  public:
  void clear_pos();
  ::mobapk::RadarPos* mutable_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::RadarPos >*
      mutable_pos();
  private:
  const ::mobapk::RadarPos& _internal_pos(int index) const;
  ::mobapk::RadarPos* _internal_add_pos();
  public:
  const ::mobapk::RadarPos& pos(int index) const;
  ::mobapk::RadarPos* add_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::RadarPos >&
      pos() const;

  // optional uint32 radius = 2;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  ::PROTOBUF_NAMESPACE_ID::uint32 radius() const;
  void set_radius(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_radius() const;
  void _internal_set_radius(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_RefreshRadarPos_CSC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::RadarPos > pos_;
  ::PROTOBUF_NAMESPACE_ID::uint32 radius_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_StartPray_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_StartPray_SC) */ {
 public:
  MSG_StartPray_SC();
  virtual ~MSG_StartPray_SC();

  MSG_StartPray_SC(const MSG_StartPray_SC& from);
  MSG_StartPray_SC(MSG_StartPray_SC&& from) noexcept
    : MSG_StartPray_SC() {
    *this = ::std::move(from);
  }

  inline MSG_StartPray_SC& operator=(const MSG_StartPray_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_StartPray_SC& operator=(MSG_StartPray_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_StartPray_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_StartPray_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_StartPray_SC*>(
               &_MSG_StartPray_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MSG_StartPray_SC& a, MSG_StartPray_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_StartPray_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_StartPray_SC* New() const final {
    return CreateMaybeMessage<MSG_StartPray_SC>(nullptr);
  }

  MSG_StartPray_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_StartPray_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_StartPray_SC& from);
  void MergeFrom(const MSG_StartPray_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_StartPray_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_StartPray_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHopesFieldNumber = 1,
  };
  // repeated string hopes = 1;
  int hopes_size() const;
  private:
  int _internal_hopes_size() const;
  public:
  void clear_hopes();
  const std::string& hopes(int index) const;
  std::string* mutable_hopes(int index);
  void set_hopes(int index, const std::string& value);
  void set_hopes(int index, std::string&& value);
  void set_hopes(int index, const char* value);
  void set_hopes(int index, const char* value, size_t size);
  std::string* add_hopes();
  void add_hopes(const std::string& value);
  void add_hopes(std::string&& value);
  void add_hopes(const char* value);
  void add_hopes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hopes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hopes();
  private:
  const std::string& _internal_hopes(int index) const;
  std::string* _internal_add_hopes();
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_StartPray_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hopes_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_SelectHopes_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_SelectHopes_CS) */ {
 public:
  MSG_SelectHopes_CS();
  virtual ~MSG_SelectHopes_CS();

  MSG_SelectHopes_CS(const MSG_SelectHopes_CS& from);
  MSG_SelectHopes_CS(MSG_SelectHopes_CS&& from) noexcept
    : MSG_SelectHopes_CS() {
    *this = ::std::move(from);
  }

  inline MSG_SelectHopes_CS& operator=(const MSG_SelectHopes_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_SelectHopes_CS& operator=(MSG_SelectHopes_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_SelectHopes_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_SelectHopes_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_SelectHopes_CS*>(
               &_MSG_SelectHopes_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MSG_SelectHopes_CS& a, MSG_SelectHopes_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_SelectHopes_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_SelectHopes_CS* New() const final {
    return CreateMaybeMessage<MSG_SelectHopes_CS>(nullptr);
  }

  MSG_SelectHopes_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_SelectHopes_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_SelectHopes_CS& from);
  void MergeFrom(const MSG_SelectHopes_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_SelectHopes_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_SelectHopes_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdx1StFieldNumber = 1,
    kIdx2NdFieldNumber = 2,
    kIdx3RdFieldNumber = 3,
  };
  // optional uint32 idx_1st = 1;
  bool has_idx_1st() const;
  private:
  bool _internal_has_idx_1st() const;
  public:
  void clear_idx_1st();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_1st() const;
  void set_idx_1st(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx_1st() const;
  void _internal_set_idx_1st(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 idx_2nd = 2;
  bool has_idx_2nd() const;
  private:
  bool _internal_has_idx_2nd() const;
  public:
  void clear_idx_2nd();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_2nd() const;
  void set_idx_2nd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx_2nd() const;
  void _internal_set_idx_2nd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 idx_3rd = 3;
  bool has_idx_3rd() const;
  private:
  bool _internal_has_idx_3rd() const;
  public:
  void clear_idx_3rd();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_3rd() const;
  void set_idx_3rd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx_3rd() const;
  void _internal_set_idx_3rd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_SelectHopes_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_1st_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_2nd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_3rd_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_ServerTimer_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_ServerTimer_SC) */ {
 public:
  MSG_ServerTimer_SC();
  virtual ~MSG_ServerTimer_SC();

  MSG_ServerTimer_SC(const MSG_ServerTimer_SC& from);
  MSG_ServerTimer_SC(MSG_ServerTimer_SC&& from) noexcept
    : MSG_ServerTimer_SC() {
    *this = ::std::move(from);
  }

  inline MSG_ServerTimer_SC& operator=(const MSG_ServerTimer_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ServerTimer_SC& operator=(MSG_ServerTimer_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ServerTimer_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ServerTimer_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_ServerTimer_SC*>(
               &_MSG_ServerTimer_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MSG_ServerTimer_SC& a, MSG_ServerTimer_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ServerTimer_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ServerTimer_SC* New() const final {
    return CreateMaybeMessage<MSG_ServerTimer_SC>(nullptr);
  }

  MSG_ServerTimer_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ServerTimer_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ServerTimer_SC& from);
  void MergeFrom(const MSG_ServerTimer_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ServerTimer_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_ServerTimer_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptionFieldNumber = 2,
    kResttimeFieldNumber = 3,
    kStyleFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // optional string caption = 2;
  bool has_caption() const;
  private:
  bool _internal_has_caption() const;
  public:
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);
  private:
  const std::string& _internal_caption() const;
  void _internal_set_caption(const std::string& value);
  std::string* _internal_mutable_caption();
  public:

  // optional uint32 resttime = 3;
  bool has_resttime() const;
  private:
  bool _internal_has_resttime() const;
  public:
  void clear_resttime();
  ::PROTOBUF_NAMESPACE_ID::uint32 resttime() const;
  void set_resttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_resttime() const;
  void _internal_set_resttime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 style = 4;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  ::PROTOBUF_NAMESPACE_ID::uint32 style() const;
  void set_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_style() const;
  void _internal_set_style(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .mobapk.ServerTimer id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::mobapk::ServerTimer id() const;
  void set_id(::mobapk::ServerTimer value);
  private:
  ::mobapk::ServerTimer _internal_id() const;
  void _internal_set_id(::mobapk::ServerTimer value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_ServerTimer_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  ::PROTOBUF_NAMESPACE_ID::uint32 resttime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 style_;
  int id_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class UserTeamInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.UserTeamInfo) */ {
 public:
  UserTeamInfo();
  virtual ~UserTeamInfo();

  UserTeamInfo(const UserTeamInfo& from);
  UserTeamInfo(UserTeamInfo&& from) noexcept
    : UserTeamInfo() {
    *this = ::std::move(from);
  }

  inline UserTeamInfo& operator=(const UserTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserTeamInfo& operator=(UserTeamInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserTeamInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTeamInfo* internal_default_instance() {
    return reinterpret_cast<const UserTeamInfo*>(
               &_UserTeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UserTeamInfo& a, UserTeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserTeamInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserTeamInfo* New() const final {
    return CreateMaybeMessage<UserTeamInfo>(nullptr);
  }

  UserTeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserTeamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserTeamInfo& from);
  void MergeFrom(const UserTeamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTeamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.UserTeamInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamColorFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // optional string team_color = 2;
  bool has_team_color() const;
  private:
  bool _internal_has_team_color() const;
  public:
  void clear_team_color();
  const std::string& team_color() const;
  void set_team_color(const std::string& value);
  void set_team_color(std::string&& value);
  void set_team_color(const char* value);
  void set_team_color(const char* value, size_t size);
  std::string* mutable_team_color();
  std::string* release_team_color();
  void set_allocated_team_color(std::string* team_color);
  private:
  const std::string& _internal_team_color() const;
  void _internal_set_team_color(const std::string& value);
  std::string* _internal_mutable_team_color();
  public:

  // optional uint64 uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.UserTeamInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_color_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_BstUserTeamInfo_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_BstUserTeamInfo_SC) */ {
 public:
  MSG_BstUserTeamInfo_SC();
  virtual ~MSG_BstUserTeamInfo_SC();

  MSG_BstUserTeamInfo_SC(const MSG_BstUserTeamInfo_SC& from);
  MSG_BstUserTeamInfo_SC(MSG_BstUserTeamInfo_SC&& from) noexcept
    : MSG_BstUserTeamInfo_SC() {
    *this = ::std::move(from);
  }

  inline MSG_BstUserTeamInfo_SC& operator=(const MSG_BstUserTeamInfo_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_BstUserTeamInfo_SC& operator=(MSG_BstUserTeamInfo_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_BstUserTeamInfo_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_BstUserTeamInfo_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_BstUserTeamInfo_SC*>(
               &_MSG_BstUserTeamInfo_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MSG_BstUserTeamInfo_SC& a, MSG_BstUserTeamInfo_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_BstUserTeamInfo_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_BstUserTeamInfo_SC* New() const final {
    return CreateMaybeMessage<MSG_BstUserTeamInfo_SC>(nullptr);
  }

  MSG_BstUserTeamInfo_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_BstUserTeamInfo_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_BstUserTeamInfo_SC& from);
  void MergeFrom(const MSG_BstUserTeamInfo_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_BstUserTeamInfo_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_BstUserTeamInfo_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .mobapk.UserTeamInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::mobapk::UserTeamInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::UserTeamInfo >*
      mutable_infos();
  private:
  const ::mobapk::UserTeamInfo& _internal_infos(int index) const;
  ::mobapk::UserTeamInfo* _internal_add_infos();
  public:
  const ::mobapk::UserTeamInfo& infos(int index) const;
  ::mobapk::UserTeamInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::UserTeamInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:mobapk.MSG_BstUserTeamInfo_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::UserTeamInfo > infos_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_UseSpecialCapsule_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_UseSpecialCapsule_CS) */ {
 public:
  MSG_UseSpecialCapsule_CS();
  virtual ~MSG_UseSpecialCapsule_CS();

  MSG_UseSpecialCapsule_CS(const MSG_UseSpecialCapsule_CS& from);
  MSG_UseSpecialCapsule_CS(MSG_UseSpecialCapsule_CS&& from) noexcept
    : MSG_UseSpecialCapsule_CS() {
    *this = ::std::move(from);
  }

  inline MSG_UseSpecialCapsule_CS& operator=(const MSG_UseSpecialCapsule_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_UseSpecialCapsule_CS& operator=(MSG_UseSpecialCapsule_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_UseSpecialCapsule_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_UseSpecialCapsule_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_UseSpecialCapsule_CS*>(
               &_MSG_UseSpecialCapsule_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MSG_UseSpecialCapsule_CS& a, MSG_UseSpecialCapsule_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_UseSpecialCapsule_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_UseSpecialCapsule_CS* New() const final {
    return CreateMaybeMessage<MSG_UseSpecialCapsule_CS>(nullptr);
  }

  MSG_UseSpecialCapsule_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_UseSpecialCapsule_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_UseSpecialCapsule_CS& from);
  void MergeFrom(const MSG_UseSpecialCapsule_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_UseSpecialCapsule_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_UseSpecialCapsule_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThisidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // optional string thisid = 1;
  bool has_thisid() const;
  private:
  bool _internal_has_thisid() const;
  public:
  void clear_thisid();
  const std::string& thisid() const;
  void set_thisid(const std::string& value);
  void set_thisid(std::string&& value);
  void set_thisid(const char* value);
  void set_thisid(const char* value, size_t size);
  std::string* mutable_thisid();
  std::string* release_thisid();
  void set_allocated_thisid(std::string* thisid);
  private:
  const std::string& _internal_thisid() const;
  void _internal_set_thisid(const std::string& value);
  std::string* _internal_mutable_thisid();
  public:

  // optional uint32 x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_UseSpecialCapsule_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thisid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_GameOver_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_GameOver_SC) */ {
 public:
  MSG_GameOver_SC();
  virtual ~MSG_GameOver_SC();

  MSG_GameOver_SC(const MSG_GameOver_SC& from);
  MSG_GameOver_SC(MSG_GameOver_SC&& from) noexcept
    : MSG_GameOver_SC() {
    *this = ::std::move(from);
  }

  inline MSG_GameOver_SC& operator=(const MSG_GameOver_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_GameOver_SC& operator=(MSG_GameOver_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_GameOver_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_GameOver_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_GameOver_SC*>(
               &_MSG_GameOver_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MSG_GameOver_SC& a, MSG_GameOver_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_GameOver_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_GameOver_SC* New() const final {
    return CreateMaybeMessage<MSG_GameOver_SC>(nullptr);
  }

  MSG_GameOver_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_GameOver_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_GameOver_SC& from);
  void MergeFrom(const MSG_GameOver_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_GameOver_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_GameOver_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankFieldNumber = 1,
  };
  // optional uint32 rank = 1;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_GameOver_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_UserGetAwardReq_CS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_UserGetAwardReq_CS) */ {
 public:
  MSG_UserGetAwardReq_CS();
  virtual ~MSG_UserGetAwardReq_CS();

  MSG_UserGetAwardReq_CS(const MSG_UserGetAwardReq_CS& from);
  MSG_UserGetAwardReq_CS(MSG_UserGetAwardReq_CS&& from) noexcept
    : MSG_UserGetAwardReq_CS() {
    *this = ::std::move(from);
  }

  inline MSG_UserGetAwardReq_CS& operator=(const MSG_UserGetAwardReq_CS& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_UserGetAwardReq_CS& operator=(MSG_UserGetAwardReq_CS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_UserGetAwardReq_CS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_UserGetAwardReq_CS* internal_default_instance() {
    return reinterpret_cast<const MSG_UserGetAwardReq_CS*>(
               &_MSG_UserGetAwardReq_CS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MSG_UserGetAwardReq_CS& a, MSG_UserGetAwardReq_CS& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_UserGetAwardReq_CS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_UserGetAwardReq_CS* New() const final {
    return CreateMaybeMessage<MSG_UserGetAwardReq_CS>(nullptr);
  }

  MSG_UserGetAwardReq_CS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_UserGetAwardReq_CS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_UserGetAwardReq_CS& from);
  void MergeFrom(const MSG_UserGetAwardReq_CS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_UserGetAwardReq_CS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_UserGetAwardReq_CS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdxFieldNumber = 1,
  };
  // optional uint32 idx = 1;
  bool has_idx() const;
  private:
  bool _internal_has_idx() const;
  public:
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_UserGetAwardReq_CS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class GetBagInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.GetBagInfo) */ {
 public:
  GetBagInfo();
  virtual ~GetBagInfo();

  GetBagInfo(const GetBagInfo& from);
  GetBagInfo(GetBagInfo&& from) noexcept
    : GetBagInfo() {
    *this = ::std::move(from);
  }

  inline GetBagInfo& operator=(const GetBagInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBagInfo& operator=(GetBagInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBagInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBagInfo* internal_default_instance() {
    return reinterpret_cast<const GetBagInfo*>(
               &_GetBagInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetBagInfo& a, GetBagInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBagInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBagInfo* New() const final {
    return CreateMaybeMessage<GetBagInfo>(nullptr);
  }

  GetBagInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBagInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBagInfo& from);
  void MergeFrom(const GetBagInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBagInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.GetBagInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kUidFieldNumber = 2,
    kIdxFieldNumber = 1,
    kObjectidFieldNumber = 4,
    kCountFieldNumber = 5,
  };
  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 uid = 2;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 idx = 1;
  bool has_idx() const;
  private:
  bool _internal_has_idx() const;
  public:
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 objectid = 4;
  bool has_objectid() const;
  private:
  bool _internal_has_objectid() const;
  public:
  void clear_objectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid() const;
  void set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_objectid() const;
  void _internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 count = 5;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.GetBagInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 objectid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_RewardBagInfo_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_RewardBagInfo_SC) */ {
 public:
  MSG_RewardBagInfo_SC();
  virtual ~MSG_RewardBagInfo_SC();

  MSG_RewardBagInfo_SC(const MSG_RewardBagInfo_SC& from);
  MSG_RewardBagInfo_SC(MSG_RewardBagInfo_SC&& from) noexcept
    : MSG_RewardBagInfo_SC() {
    *this = ::std::move(from);
  }

  inline MSG_RewardBagInfo_SC& operator=(const MSG_RewardBagInfo_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_RewardBagInfo_SC& operator=(MSG_RewardBagInfo_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_RewardBagInfo_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_RewardBagInfo_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_RewardBagInfo_SC*>(
               &_MSG_RewardBagInfo_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MSG_RewardBagInfo_SC& a, MSG_RewardBagInfo_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_RewardBagInfo_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_RewardBagInfo_SC* New() const final {
    return CreateMaybeMessage<MSG_RewardBagInfo_SC>(nullptr);
  }

  MSG_RewardBagInfo_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_RewardBagInfo_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_RewardBagInfo_SC& from);
  void MergeFrom(const MSG_RewardBagInfo_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_RewardBagInfo_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_RewardBagInfo_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .mobapk.GetBagInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::mobapk::GetBagInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::GetBagInfo >*
      mutable_infos();
  private:
  const ::mobapk::GetBagInfo& _internal_infos(int index) const;
  ::mobapk::GetBagInfo* _internal_add_infos();
  public:
  const ::mobapk::GetBagInfo& infos(int index) const;
  ::mobapk::GetBagInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::GetBagInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:mobapk.MSG_RewardBagInfo_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::GetBagInfo > infos_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_MobaLevelUp_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_MobaLevelUp_SC) */ {
 public:
  MSG_MobaLevelUp_SC();
  virtual ~MSG_MobaLevelUp_SC();

  MSG_MobaLevelUp_SC(const MSG_MobaLevelUp_SC& from);
  MSG_MobaLevelUp_SC(MSG_MobaLevelUp_SC&& from) noexcept
    : MSG_MobaLevelUp_SC() {
    *this = ::std::move(from);
  }

  inline MSG_MobaLevelUp_SC& operator=(const MSG_MobaLevelUp_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_MobaLevelUp_SC& operator=(MSG_MobaLevelUp_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_MobaLevelUp_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_MobaLevelUp_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_MobaLevelUp_SC*>(
               &_MSG_MobaLevelUp_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MSG_MobaLevelUp_SC& a, MSG_MobaLevelUp_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_MobaLevelUp_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_MobaLevelUp_SC* New() const final {
    return CreateMaybeMessage<MSG_MobaLevelUp_SC>(nullptr);
  }

  MSG_MobaLevelUp_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_MobaLevelUp_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_MobaLevelUp_SC& from);
  void MergeFrom(const MSG_MobaLevelUp_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_MobaLevelUp_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_MobaLevelUp_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldlevelFieldNumber = 1,
    kNewlevelFieldNumber = 2,
    kUidFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // optional uint32 oldlevel = 1;
  bool has_oldlevel() const;
  private:
  bool _internal_has_oldlevel() const;
  public:
  void clear_oldlevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 oldlevel() const;
  void set_oldlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_oldlevel() const;
  void _internal_set_oldlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 newlevel = 2;
  bool has_newlevel() const;
  private:
  bool _internal_has_newlevel() const;
  public:
  void clear_newlevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 newlevel() const;
  void set_newlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_newlevel() const;
  void _internal_set_newlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 uid = 3;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 type = 4;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_MobaLevelUp_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 oldlevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 newlevel_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// -------------------------------------------------------------------

class MSG_ClientEffect_SC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mobapk.MSG_ClientEffect_SC) */ {
 public:
  MSG_ClientEffect_SC();
  virtual ~MSG_ClientEffect_SC();

  MSG_ClientEffect_SC(const MSG_ClientEffect_SC& from);
  MSG_ClientEffect_SC(MSG_ClientEffect_SC&& from) noexcept
    : MSG_ClientEffect_SC() {
    *this = ::std::move(from);
  }

  inline MSG_ClientEffect_SC& operator=(const MSG_ClientEffect_SC& from) {
    CopyFrom(from);
    return *this;
  }
  inline MSG_ClientEffect_SC& operator=(MSG_ClientEffect_SC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MSG_ClientEffect_SC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MSG_ClientEffect_SC* internal_default_instance() {
    return reinterpret_cast<const MSG_ClientEffect_SC*>(
               &_MSG_ClientEffect_SC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MSG_ClientEffect_SC& a, MSG_ClientEffect_SC& b) {
    a.Swap(&b);
  }
  inline void Swap(MSG_ClientEffect_SC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MSG_ClientEffect_SC* New() const final {
    return CreateMaybeMessage<MSG_ClientEffect_SC>(nullptr);
  }

  MSG_ClientEffect_SC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MSG_ClientEffect_SC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MSG_ClientEffect_SC& from);
  void MergeFrom(const MSG_ClientEffect_SC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MSG_ClientEffect_SC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mobapk.MSG_ClientEffect_SC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mobapk_2eproto);
    return ::descriptor_table_mobapk_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kEffectidFieldNumber = 2,
    kPosxFieldNumber = 3,
    kPosyFieldNumber = 4,
    kRFieldNumber = 5,
  };
  // optional uint64 uid = 1;
  bool has_uid() const;
  private:
  bool _internal_has_uid() const;
  public:
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::uint64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 effectid = 2;
  bool has_effectid() const;
  private:
  bool _internal_has_effectid() const;
  public:
  void clear_effectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 effectid() const;
  void set_effectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_effectid() const;
  void _internal_set_effectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 posx = 3;
  bool has_posx() const;
  private:
  bool _internal_has_posx() const;
  public:
  void clear_posx();
  ::PROTOBUF_NAMESPACE_ID::uint32 posx() const;
  void set_posx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_posx() const;
  void _internal_set_posx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 posy = 4;
  bool has_posy() const;
  private:
  bool _internal_has_posy() const;
  public:
  void clear_posy();
  ::PROTOBUF_NAMESPACE_ID::uint32 posy() const;
  void set_posy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_posy() const;
  void _internal_set_posy(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 r = 5;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::uint32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mobapk.MSG_ClientEffect_SC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 effectid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 posy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 r_;
  friend struct ::TableStruct_mobapk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MSG_UserMatchReq_CS

// optional bool is_match = 1;
inline bool MSG_UserMatchReq_CS::_internal_has_is_match() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_UserMatchReq_CS::has_is_match() const {
  return _internal_has_is_match();
}
inline void MSG_UserMatchReq_CS::clear_is_match() {
  is_match_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MSG_UserMatchReq_CS::_internal_is_match() const {
  return is_match_;
}
inline bool MSG_UserMatchReq_CS::is_match() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_UserMatchReq_CS.is_match)
  return _internal_is_match();
}
inline void MSG_UserMatchReq_CS::_internal_set_is_match(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is_match_ = value;
}
inline void MSG_UserMatchReq_CS::set_is_match(bool value) {
  _internal_set_is_match(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_UserMatchReq_CS.is_match)
}

// -------------------------------------------------------------------

// MSG_MatchInfo_SC

// optional uint32 num = 1;
inline bool MSG_MatchInfo_SC::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_MatchInfo_SC::has_num() const {
  return _internal_has_num();
}
inline void MSG_MatchInfo_SC::clear_num() {
  num_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MatchInfo_SC::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MatchInfo_SC::num() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MatchInfo_SC.num)
  return _internal_num();
}
inline void MSG_MatchInfo_SC::_internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_ = value;
}
inline void MSG_MatchInfo_SC::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_MatchInfo_SC.num)
}

// optional uint32 ready_num = 2;
inline bool MSG_MatchInfo_SC::_internal_has_ready_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_MatchInfo_SC::has_ready_num() const {
  return _internal_has_ready_num();
}
inline void MSG_MatchInfo_SC::clear_ready_num() {
  ready_num_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MatchInfo_SC::_internal_ready_num() const {
  return ready_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MatchInfo_SC::ready_num() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MatchInfo_SC.ready_num)
  return _internal_ready_num();
}
inline void MSG_MatchInfo_SC::_internal_set_ready_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ready_num_ = value;
}
inline void MSG_MatchInfo_SC::set_ready_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ready_num(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_MatchInfo_SC.ready_num)
}

// optional uint64 id = 3;
inline bool MSG_MatchInfo_SC::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_MatchInfo_SC::has_id() const {
  return _internal_has_id();
}
inline void MSG_MatchInfo_SC::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_MatchInfo_SC::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_MatchInfo_SC::id() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MatchInfo_SC.id)
  return _internal_id();
}
inline void MSG_MatchInfo_SC::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void MSG_MatchInfo_SC::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_MatchInfo_SC.id)
}

// -------------------------------------------------------------------

// MSG_MatchReady_CS

// optional uint64 id = 1;
inline bool MSG_MatchReady_CS::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_MatchReady_CS::has_id() const {
  return _internal_has_id();
}
inline void MSG_MatchReady_CS::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_MatchReady_CS::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_MatchReady_CS::id() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MatchReady_CS.id)
  return _internal_id();
}
inline void MSG_MatchReady_CS::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void MSG_MatchReady_CS::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_MatchReady_CS.id)
}

// -------------------------------------------------------------------

// MSG_DismissGroup_SC

// -------------------------------------------------------------------

// TeamUser

// optional uint64 uid = 1;
inline bool TeamUser::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TeamUser::has_uid() const {
  return _internal_has_uid();
}
inline void TeamUser::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TeamUser::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TeamUser::uid() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.uid)
  return _internal_uid();
}
inline void TeamUser::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
}
inline void TeamUser::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.uid)
}

// optional string name = 2;
inline bool TeamUser::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TeamUser::has_name() const {
  return _internal_has_name();
}
inline void TeamUser::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TeamUser::name() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.name)
  return _internal_name();
}
inline void TeamUser::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.name)
}
inline std::string* TeamUser::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mobapk.TeamUser.name)
  return _internal_mutable_name();
}
inline const std::string& TeamUser::_internal_name() const {
  return name_.GetNoArena();
}
inline void TeamUser::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TeamUser::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mobapk.TeamUser.name)
}
inline void TeamUser::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mobapk.TeamUser.name)
}
inline void TeamUser::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mobapk.TeamUser.name)
}
inline std::string* TeamUser::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TeamUser::release_name() {
  // @@protoc_insertion_point(field_release:mobapk.TeamUser.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TeamUser::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mobapk.TeamUser.name)
}

// optional uint32 level = 3;
inline bool TeamUser::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TeamUser::has_level() const {
  return _internal_has_level();
}
inline void TeamUser::clear_level() {
  level_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::level() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.level)
  return _internal_level();
}
inline void TeamUser::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  level_ = value;
}
inline void TeamUser::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.level)
}

// optional uint32 x = 4;
inline bool TeamUser::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TeamUser::has_x() const {
  return _internal_has_x();
}
inline void TeamUser::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::x() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.x)
  return _internal_x();
}
inline void TeamUser::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
}
inline void TeamUser::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.x)
}

// optional uint32 y = 5;
inline bool TeamUser::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TeamUser::has_y() const {
  return _internal_has_y();
}
inline void TeamUser::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::y() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.y)
  return _internal_y();
}
inline void TeamUser::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
}
inline void TeamUser::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.y)
}

// optional bool online = 6;
inline bool TeamUser::_internal_has_online() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TeamUser::has_online() const {
  return _internal_has_online();
}
inline void TeamUser::clear_online() {
  online_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TeamUser::_internal_online() const {
  return online_;
}
inline bool TeamUser::online() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.online)
  return _internal_online();
}
inline void TeamUser::_internal_set_online(bool value) {
  _has_bits_[0] |= 0x00000020u;
  online_ = value;
}
inline void TeamUser::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.online)
}

// optional uint32 hairstyle = 7;
inline bool TeamUser::_internal_has_hairstyle() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TeamUser::has_hairstyle() const {
  return _internal_has_hairstyle();
}
inline void TeamUser::clear_hairstyle() {
  hairstyle_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_hairstyle() const {
  return hairstyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::hairstyle() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.hairstyle)
  return _internal_hairstyle();
}
inline void TeamUser::_internal_set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  hairstyle_ = value;
}
inline void TeamUser::set_hairstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hairstyle(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.hairstyle)
}

// optional uint32 haircolor = 8;
inline bool TeamUser::_internal_has_haircolor() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TeamUser::has_haircolor() const {
  return _internal_has_haircolor();
}
inline void TeamUser::clear_haircolor() {
  haircolor_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_haircolor() const {
  return haircolor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::haircolor() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.haircolor)
  return _internal_haircolor();
}
inline void TeamUser::_internal_set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  haircolor_ = value;
}
inline void TeamUser::set_haircolor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_haircolor(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.haircolor)
}

// optional uint32 headstyle = 9;
inline bool TeamUser::_internal_has_headstyle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TeamUser::has_headstyle() const {
  return _internal_has_headstyle();
}
inline void TeamUser::clear_headstyle() {
  headstyle_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_headstyle() const {
  return headstyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::headstyle() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.headstyle)
  return _internal_headstyle();
}
inline void TeamUser::_internal_set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  headstyle_ = value;
}
inline void TeamUser::set_headstyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_headstyle(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.headstyle)
}

// optional uint32 bodystyle = 10;
inline bool TeamUser::_internal_has_bodystyle() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TeamUser::has_bodystyle() const {
  return _internal_has_bodystyle();
}
inline void TeamUser::clear_bodystyle() {
  bodystyle_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_bodystyle() const {
  return bodystyle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::bodystyle() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.bodystyle)
  return _internal_bodystyle();
}
inline void TeamUser::_internal_set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  bodystyle_ = value;
}
inline void TeamUser::set_bodystyle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bodystyle(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.bodystyle)
}

// optional uint32 antenna = 11;
inline bool TeamUser::_internal_has_antenna() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TeamUser::has_antenna() const {
  return _internal_has_antenna();
}
inline void TeamUser::clear_antenna() {
  antenna_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_antenna() const {
  return antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::antenna() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.antenna)
  return _internal_antenna();
}
inline void TeamUser::_internal_set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  antenna_ = value;
}
inline void TeamUser::set_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_antenna(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.antenna)
}

// optional uint32 coat = 12;
inline bool TeamUser::_internal_has_coat() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TeamUser::has_coat() const {
  return _internal_has_coat();
}
inline void TeamUser::clear_coat() {
  coat_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_coat() const {
  return coat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::coat() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.coat)
  return _internal_coat();
}
inline void TeamUser::_internal_set_coat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  coat_ = value;
}
inline void TeamUser::set_coat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coat(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.coat)
}

// optional uint32 avatarid = 13;
inline bool TeamUser::_internal_has_avatarid() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TeamUser::has_avatarid() const {
  return _internal_has_avatarid();
}
inline void TeamUser::clear_avatarid() {
  avatarid_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_avatarid() const {
  return avatarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::avatarid() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.avatarid)
  return _internal_avatarid();
}
inline void TeamUser::_internal_set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  avatarid_ = value;
}
inline void TeamUser::set_avatarid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avatarid(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.avatarid)
}

// optional uint32 maxhp = 14;
inline bool TeamUser::_internal_has_maxhp() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TeamUser::has_maxhp() const {
  return _internal_has_maxhp();
}
inline void TeamUser::clear_maxhp() {
  maxhp_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_maxhp() const {
  return maxhp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::maxhp() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.maxhp)
  return _internal_maxhp();
}
inline void TeamUser::_internal_set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  maxhp_ = value;
}
inline void TeamUser::set_maxhp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxhp(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.maxhp)
}

// optional uint32 hp = 15;
inline bool TeamUser::_internal_has_hp() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TeamUser::has_hp() const {
  return _internal_has_hp();
}
inline void TeamUser::clear_hp() {
  hp_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::hp() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.hp)
  return _internal_hp();
}
inline void TeamUser::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  hp_ = value;
}
inline void TeamUser::set_hp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.hp)
}

// optional uint32 heroid = 16;
inline bool TeamUser::_internal_has_heroid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TeamUser::has_heroid() const {
  return _internal_has_heroid();
}
inline void TeamUser::clear_heroid() {
  heroid_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_heroid() const {
  return heroid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::heroid() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.heroid)
  return _internal_heroid();
}
inline void TeamUser::_internal_set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  heroid_ = value;
}
inline void TeamUser::set_heroid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heroid(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.heroid)
}

// optional uint32 exp = 17;
inline bool TeamUser::_internal_has_exp() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TeamUser::has_exp() const {
  return _internal_has_exp();
}
inline void TeamUser::clear_exp() {
  exp_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TeamUser::exp() const {
  // @@protoc_insertion_point(field_get:mobapk.TeamUser.exp)
  return _internal_exp();
}
inline void TeamUser::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  exp_ = value;
}
inline void TeamUser::set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:mobapk.TeamUser.exp)
}

// -------------------------------------------------------------------

// MSG_MyTeamInfo_SC

// repeated .mobapk.TeamUser users = 1;
inline int MSG_MyTeamInfo_SC::_internal_users_size() const {
  return users_.size();
}
inline int MSG_MyTeamInfo_SC::users_size() const {
  return _internal_users_size();
}
inline void MSG_MyTeamInfo_SC::clear_users() {
  users_.Clear();
}
inline ::mobapk::TeamUser* MSG_MyTeamInfo_SC::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:mobapk.MSG_MyTeamInfo_SC.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::TeamUser >*
MSG_MyTeamInfo_SC::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:mobapk.MSG_MyTeamInfo_SC.users)
  return &users_;
}
inline const ::mobapk::TeamUser& MSG_MyTeamInfo_SC::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::mobapk::TeamUser& MSG_MyTeamInfo_SC::users(int index) const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MyTeamInfo_SC.users)
  return _internal_users(index);
}
inline ::mobapk::TeamUser* MSG_MyTeamInfo_SC::_internal_add_users() {
  return users_.Add();
}
inline ::mobapk::TeamUser* MSG_MyTeamInfo_SC::add_users() {
  // @@protoc_insertion_point(field_add:mobapk.MSG_MyTeamInfo_SC.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::TeamUser >&
MSG_MyTeamInfo_SC::users() const {
  // @@protoc_insertion_point(field_list:mobapk.MSG_MyTeamInfo_SC.users)
  return users_;
}

// optional uint32 create_time = 2;
inline bool MSG_MyTeamInfo_SC::_internal_has_create_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_MyTeamInfo_SC::has_create_time() const {
  return _internal_has_create_time();
}
inline void MSG_MyTeamInfo_SC::clear_create_time() {
  create_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MyTeamInfo_SC::_internal_create_time() const {
  return create_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MyTeamInfo_SC::create_time() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MyTeamInfo_SC.create_time)
  return _internal_create_time();
}
inline void MSG_MyTeamInfo_SC::_internal_set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  create_time_ = value;
}
inline void MSG_MyTeamInfo_SC::set_create_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_create_time(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_MyTeamInfo_SC.create_time)
}

// optional string teamid = 3;
inline bool MSG_MyTeamInfo_SC::_internal_has_teamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_MyTeamInfo_SC::has_teamid() const {
  return _internal_has_teamid();
}
inline void MSG_MyTeamInfo_SC::clear_teamid() {
  teamid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_MyTeamInfo_SC::teamid() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MyTeamInfo_SC.teamid)
  return _internal_teamid();
}
inline void MSG_MyTeamInfo_SC::set_teamid(const std::string& value) {
  _internal_set_teamid(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_MyTeamInfo_SC.teamid)
}
inline std::string* MSG_MyTeamInfo_SC::mutable_teamid() {
  // @@protoc_insertion_point(field_mutable:mobapk.MSG_MyTeamInfo_SC.teamid)
  return _internal_mutable_teamid();
}
inline const std::string& MSG_MyTeamInfo_SC::_internal_teamid() const {
  return teamid_.GetNoArena();
}
inline void MSG_MyTeamInfo_SC::_internal_set_teamid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  teamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_MyTeamInfo_SC::set_teamid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  teamid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mobapk.MSG_MyTeamInfo_SC.teamid)
}
inline void MSG_MyTeamInfo_SC::set_teamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  teamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mobapk.MSG_MyTeamInfo_SC.teamid)
}
inline void MSG_MyTeamInfo_SC::set_teamid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  teamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mobapk.MSG_MyTeamInfo_SC.teamid)
}
inline std::string* MSG_MyTeamInfo_SC::_internal_mutable_teamid() {
  _has_bits_[0] |= 0x00000001u;
  return teamid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_MyTeamInfo_SC::release_teamid() {
  // @@protoc_insertion_point(field_release:mobapk.MSG_MyTeamInfo_SC.teamid)
  if (!_internal_has_teamid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return teamid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_MyTeamInfo_SC::set_allocated_teamid(std::string* teamid) {
  if (teamid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  teamid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teamid);
  // @@protoc_insertion_point(field_set_allocated:mobapk.MSG_MyTeamInfo_SC.teamid)
}

// -------------------------------------------------------------------

// PowerItem

// optional string color = 1;
inline bool PowerItem::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PowerItem::has_color() const {
  return _internal_has_color();
}
inline void PowerItem::clear_color() {
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PowerItem::color() const {
  // @@protoc_insertion_point(field_get:mobapk.PowerItem.color)
  return _internal_color();
}
inline void PowerItem::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:mobapk.PowerItem.color)
}
inline std::string* PowerItem::mutable_color() {
  // @@protoc_insertion_point(field_mutable:mobapk.PowerItem.color)
  return _internal_mutable_color();
}
inline const std::string& PowerItem::_internal_color() const {
  return color_.GetNoArena();
}
inline void PowerItem::_internal_set_color(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PowerItem::set_color(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mobapk.PowerItem.color)
}
inline void PowerItem::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mobapk.PowerItem.color)
}
inline void PowerItem::set_color(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mobapk.PowerItem.color)
}
inline std::string* PowerItem::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000001u;
  return color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PowerItem::release_color() {
  // @@protoc_insertion_point(field_release:mobapk.PowerItem.color)
  if (!_internal_has_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return color_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PowerItem::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:mobapk.PowerItem.color)
}

// optional uint32 power = 2;
inline bool PowerItem::_internal_has_power() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PowerItem::has_power() const {
  return _internal_has_power();
}
inline void PowerItem::clear_power() {
  power_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PowerItem::_internal_power() const {
  return power_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PowerItem::power() const {
  // @@protoc_insertion_point(field_get:mobapk.PowerItem.power)
  return _internal_power();
}
inline void PowerItem::_internal_set_power(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  power_ = value;
}
inline void PowerItem::set_power(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:mobapk.PowerItem.power)
}

// -------------------------------------------------------------------

// MSG_RefreshPowerRank_SC

// repeated .mobapk.PowerItem items = 1;
inline int MSG_RefreshPowerRank_SC::_internal_items_size() const {
  return items_.size();
}
inline int MSG_RefreshPowerRank_SC::items_size() const {
  return _internal_items_size();
}
inline void MSG_RefreshPowerRank_SC::clear_items() {
  items_.Clear();
}
inline ::mobapk::PowerItem* MSG_RefreshPowerRank_SC::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:mobapk.MSG_RefreshPowerRank_SC.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::PowerItem >*
MSG_RefreshPowerRank_SC::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:mobapk.MSG_RefreshPowerRank_SC.items)
  return &items_;
}
inline const ::mobapk::PowerItem& MSG_RefreshPowerRank_SC::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::mobapk::PowerItem& MSG_RefreshPowerRank_SC::items(int index) const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_RefreshPowerRank_SC.items)
  return _internal_items(index);
}
inline ::mobapk::PowerItem* MSG_RefreshPowerRank_SC::_internal_add_items() {
  return items_.Add();
}
inline ::mobapk::PowerItem* MSG_RefreshPowerRank_SC::add_items() {
  // @@protoc_insertion_point(field_add:mobapk.MSG_RefreshPowerRank_SC.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::PowerItem >&
MSG_RefreshPowerRank_SC::items() const {
  // @@protoc_insertion_point(field_list:mobapk.MSG_RefreshPowerRank_SC.items)
  return items_;
}

// -------------------------------------------------------------------

// RadarPos

// optional uint32 x = 1;
inline bool RadarPos::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarPos::has_x() const {
  return _internal_has_x();
}
inline void RadarPos::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarPos::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarPos::x() const {
  // @@protoc_insertion_point(field_get:mobapk.RadarPos.x)
  return _internal_x();
}
inline void RadarPos::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void RadarPos::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mobapk.RadarPos.x)
}

// optional uint32 y = 2;
inline bool RadarPos::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarPos::has_y() const {
  return _internal_has_y();
}
inline void RadarPos::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarPos::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarPos::y() const {
  // @@protoc_insertion_point(field_get:mobapk.RadarPos.y)
  return _internal_y();
}
inline void RadarPos::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void RadarPos::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mobapk.RadarPos.y)
}

// optional uint32 num = 3;
inline bool RadarPos::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarPos::has_num() const {
  return _internal_has_num();
}
inline void RadarPos::clear_num() {
  num_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarPos::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarPos::num() const {
  // @@protoc_insertion_point(field_get:mobapk.RadarPos.num)
  return _internal_num();
}
inline void RadarPos::_internal_set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_ = value;
}
inline void RadarPos::set_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:mobapk.RadarPos.num)
}

// optional uint32 uid = 4;
inline bool RadarPos::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarPos::has_uid() const {
  return _internal_has_uid();
}
inline void RadarPos::clear_uid() {
  uid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarPos::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarPos::uid() const {
  // @@protoc_insertion_point(field_get:mobapk.RadarPos.uid)
  return _internal_uid();
}
inline void RadarPos::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  uid_ = value;
}
inline void RadarPos::set_uid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mobapk.RadarPos.uid)
}

// -------------------------------------------------------------------

// MSG_RefreshRadarPos_CSC

// repeated .mobapk.RadarPos pos = 1;
inline int MSG_RefreshRadarPos_CSC::_internal_pos_size() const {
  return pos_.size();
}
inline int MSG_RefreshRadarPos_CSC::pos_size() const {
  return _internal_pos_size();
}
inline void MSG_RefreshRadarPos_CSC::clear_pos() {
  pos_.Clear();
}
inline ::mobapk::RadarPos* MSG_RefreshRadarPos_CSC::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:mobapk.MSG_RefreshRadarPos_CSC.pos)
  return pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::RadarPos >*
MSG_RefreshRadarPos_CSC::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:mobapk.MSG_RefreshRadarPos_CSC.pos)
  return &pos_;
}
inline const ::mobapk::RadarPos& MSG_RefreshRadarPos_CSC::_internal_pos(int index) const {
  return pos_.Get(index);
}
inline const ::mobapk::RadarPos& MSG_RefreshRadarPos_CSC::pos(int index) const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_RefreshRadarPos_CSC.pos)
  return _internal_pos(index);
}
inline ::mobapk::RadarPos* MSG_RefreshRadarPos_CSC::_internal_add_pos() {
  return pos_.Add();
}
inline ::mobapk::RadarPos* MSG_RefreshRadarPos_CSC::add_pos() {
  // @@protoc_insertion_point(field_add:mobapk.MSG_RefreshRadarPos_CSC.pos)
  return _internal_add_pos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::RadarPos >&
MSG_RefreshRadarPos_CSC::pos() const {
  // @@protoc_insertion_point(field_list:mobapk.MSG_RefreshRadarPos_CSC.pos)
  return pos_;
}

// optional uint32 radius = 2;
inline bool MSG_RefreshRadarPos_CSC::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_RefreshRadarPos_CSC::has_radius() const {
  return _internal_has_radius();
}
inline void MSG_RefreshRadarPos_CSC::clear_radius() {
  radius_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RefreshRadarPos_CSC::_internal_radius() const {
  return radius_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_RefreshRadarPos_CSC::radius() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_RefreshRadarPos_CSC.radius)
  return _internal_radius();
}
inline void MSG_RefreshRadarPos_CSC::_internal_set_radius(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  radius_ = value;
}
inline void MSG_RefreshRadarPos_CSC::set_radius(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_RefreshRadarPos_CSC.radius)
}

// -------------------------------------------------------------------

// MSG_StartPray_SC

// repeated string hopes = 1;
inline int MSG_StartPray_SC::_internal_hopes_size() const {
  return hopes_.size();
}
inline int MSG_StartPray_SC::hopes_size() const {
  return _internal_hopes_size();
}
inline void MSG_StartPray_SC::clear_hopes() {
  hopes_.Clear();
}
inline std::string* MSG_StartPray_SC::add_hopes() {
  // @@protoc_insertion_point(field_add_mutable:mobapk.MSG_StartPray_SC.hopes)
  return _internal_add_hopes();
}
inline const std::string& MSG_StartPray_SC::_internal_hopes(int index) const {
  return hopes_.Get(index);
}
inline const std::string& MSG_StartPray_SC::hopes(int index) const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_StartPray_SC.hopes)
  return _internal_hopes(index);
}
inline std::string* MSG_StartPray_SC::mutable_hopes(int index) {
  // @@protoc_insertion_point(field_mutable:mobapk.MSG_StartPray_SC.hopes)
  return hopes_.Mutable(index);
}
inline void MSG_StartPray_SC::set_hopes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mobapk.MSG_StartPray_SC.hopes)
  hopes_.Mutable(index)->assign(value);
}
inline void MSG_StartPray_SC::set_hopes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mobapk.MSG_StartPray_SC.hopes)
  hopes_.Mutable(index)->assign(std::move(value));
}
inline void MSG_StartPray_SC::set_hopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mobapk.MSG_StartPray_SC.hopes)
}
inline void MSG_StartPray_SC::set_hopes(int index, const char* value, size_t size) {
  hopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mobapk.MSG_StartPray_SC.hopes)
}
inline std::string* MSG_StartPray_SC::_internal_add_hopes() {
  return hopes_.Add();
}
inline void MSG_StartPray_SC::add_hopes(const std::string& value) {
  hopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mobapk.MSG_StartPray_SC.hopes)
}
inline void MSG_StartPray_SC::add_hopes(std::string&& value) {
  hopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mobapk.MSG_StartPray_SC.hopes)
}
inline void MSG_StartPray_SC::add_hopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mobapk.MSG_StartPray_SC.hopes)
}
inline void MSG_StartPray_SC::add_hopes(const char* value, size_t size) {
  hopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mobapk.MSG_StartPray_SC.hopes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MSG_StartPray_SC::hopes() const {
  // @@protoc_insertion_point(field_list:mobapk.MSG_StartPray_SC.hopes)
  return hopes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MSG_StartPray_SC::mutable_hopes() {
  // @@protoc_insertion_point(field_mutable_list:mobapk.MSG_StartPray_SC.hopes)
  return &hopes_;
}

// -------------------------------------------------------------------

// MSG_SelectHopes_CS

// optional uint32 idx_1st = 1;
inline bool MSG_SelectHopes_CS::_internal_has_idx_1st() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_SelectHopes_CS::has_idx_1st() const {
  return _internal_has_idx_1st();
}
inline void MSG_SelectHopes_CS::clear_idx_1st() {
  idx_1st_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_SelectHopes_CS::_internal_idx_1st() const {
  return idx_1st_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_SelectHopes_CS::idx_1st() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_SelectHopes_CS.idx_1st)
  return _internal_idx_1st();
}
inline void MSG_SelectHopes_CS::_internal_set_idx_1st(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  idx_1st_ = value;
}
inline void MSG_SelectHopes_CS::set_idx_1st(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx_1st(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_SelectHopes_CS.idx_1st)
}

// optional uint32 idx_2nd = 2;
inline bool MSG_SelectHopes_CS::_internal_has_idx_2nd() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_SelectHopes_CS::has_idx_2nd() const {
  return _internal_has_idx_2nd();
}
inline void MSG_SelectHopes_CS::clear_idx_2nd() {
  idx_2nd_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_SelectHopes_CS::_internal_idx_2nd() const {
  return idx_2nd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_SelectHopes_CS::idx_2nd() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_SelectHopes_CS.idx_2nd)
  return _internal_idx_2nd();
}
inline void MSG_SelectHopes_CS::_internal_set_idx_2nd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  idx_2nd_ = value;
}
inline void MSG_SelectHopes_CS::set_idx_2nd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx_2nd(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_SelectHopes_CS.idx_2nd)
}

// optional uint32 idx_3rd = 3;
inline bool MSG_SelectHopes_CS::_internal_has_idx_3rd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_SelectHopes_CS::has_idx_3rd() const {
  return _internal_has_idx_3rd();
}
inline void MSG_SelectHopes_CS::clear_idx_3rd() {
  idx_3rd_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_SelectHopes_CS::_internal_idx_3rd() const {
  return idx_3rd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_SelectHopes_CS::idx_3rd() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_SelectHopes_CS.idx_3rd)
  return _internal_idx_3rd();
}
inline void MSG_SelectHopes_CS::_internal_set_idx_3rd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  idx_3rd_ = value;
}
inline void MSG_SelectHopes_CS::set_idx_3rd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx_3rd(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_SelectHopes_CS.idx_3rd)
}

// -------------------------------------------------------------------

// MSG_ServerTimer_SC

// optional .mobapk.ServerTimer id = 1;
inline bool MSG_ServerTimer_SC::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_ServerTimer_SC::has_id() const {
  return _internal_has_id();
}
inline void MSG_ServerTimer_SC::clear_id() {
  id_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::mobapk::ServerTimer MSG_ServerTimer_SC::_internal_id() const {
  return static_cast< ::mobapk::ServerTimer >(id_);
}
inline ::mobapk::ServerTimer MSG_ServerTimer_SC::id() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_ServerTimer_SC.id)
  return _internal_id();
}
inline void MSG_ServerTimer_SC::_internal_set_id(::mobapk::ServerTimer value) {
  assert(::mobapk::ServerTimer_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void MSG_ServerTimer_SC::set_id(::mobapk::ServerTimer value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_ServerTimer_SC.id)
}

// optional string caption = 2;
inline bool MSG_ServerTimer_SC::_internal_has_caption() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ServerTimer_SC::has_caption() const {
  return _internal_has_caption();
}
inline void MSG_ServerTimer_SC::clear_caption() {
  caption_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_ServerTimer_SC::caption() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_ServerTimer_SC.caption)
  return _internal_caption();
}
inline void MSG_ServerTimer_SC::set_caption(const std::string& value) {
  _internal_set_caption(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_ServerTimer_SC.caption)
}
inline std::string* MSG_ServerTimer_SC::mutable_caption() {
  // @@protoc_insertion_point(field_mutable:mobapk.MSG_ServerTimer_SC.caption)
  return _internal_mutable_caption();
}
inline const std::string& MSG_ServerTimer_SC::_internal_caption() const {
  return caption_.GetNoArena();
}
inline void MSG_ServerTimer_SC::_internal_set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_ServerTimer_SC::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mobapk.MSG_ServerTimer_SC.caption)
}
inline void MSG_ServerTimer_SC::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mobapk.MSG_ServerTimer_SC.caption)
}
inline void MSG_ServerTimer_SC::set_caption(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mobapk.MSG_ServerTimer_SC.caption)
}
inline std::string* MSG_ServerTimer_SC::_internal_mutable_caption() {
  _has_bits_[0] |= 0x00000001u;
  return caption_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_ServerTimer_SC::release_caption() {
  // @@protoc_insertion_point(field_release:mobapk.MSG_ServerTimer_SC.caption)
  if (!_internal_has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return caption_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_ServerTimer_SC::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caption_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:mobapk.MSG_ServerTimer_SC.caption)
}

// optional uint32 resttime = 3;
inline bool MSG_ServerTimer_SC::_internal_has_resttime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ServerTimer_SC::has_resttime() const {
  return _internal_has_resttime();
}
inline void MSG_ServerTimer_SC::clear_resttime() {
  resttime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ServerTimer_SC::_internal_resttime() const {
  return resttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ServerTimer_SC::resttime() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_ServerTimer_SC.resttime)
  return _internal_resttime();
}
inline void MSG_ServerTimer_SC::_internal_set_resttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  resttime_ = value;
}
inline void MSG_ServerTimer_SC::set_resttime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_resttime(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_ServerTimer_SC.resttime)
}

// optional uint32 style = 4;
inline bool MSG_ServerTimer_SC::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_ServerTimer_SC::has_style() const {
  return _internal_has_style();
}
inline void MSG_ServerTimer_SC::clear_style() {
  style_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ServerTimer_SC::_internal_style() const {
  return style_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ServerTimer_SC::style() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_ServerTimer_SC.style)
  return _internal_style();
}
inline void MSG_ServerTimer_SC::_internal_set_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  style_ = value;
}
inline void MSG_ServerTimer_SC::set_style(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_ServerTimer_SC.style)
}

// -------------------------------------------------------------------

// UserTeamInfo

// optional uint64 uid = 1;
inline bool UserTeamInfo::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserTeamInfo::has_uid() const {
  return _internal_has_uid();
}
inline void UserTeamInfo::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserTeamInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UserTeamInfo::uid() const {
  // @@protoc_insertion_point(field_get:mobapk.UserTeamInfo.uid)
  return _internal_uid();
}
inline void UserTeamInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
}
inline void UserTeamInfo::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mobapk.UserTeamInfo.uid)
}

// optional string team_color = 2;
inline bool UserTeamInfo::_internal_has_team_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserTeamInfo::has_team_color() const {
  return _internal_has_team_color();
}
inline void UserTeamInfo::clear_team_color() {
  team_color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserTeamInfo::team_color() const {
  // @@protoc_insertion_point(field_get:mobapk.UserTeamInfo.team_color)
  return _internal_team_color();
}
inline void UserTeamInfo::set_team_color(const std::string& value) {
  _internal_set_team_color(value);
  // @@protoc_insertion_point(field_set:mobapk.UserTeamInfo.team_color)
}
inline std::string* UserTeamInfo::mutable_team_color() {
  // @@protoc_insertion_point(field_mutable:mobapk.UserTeamInfo.team_color)
  return _internal_mutable_team_color();
}
inline const std::string& UserTeamInfo::_internal_team_color() const {
  return team_color_.GetNoArena();
}
inline void UserTeamInfo::_internal_set_team_color(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserTeamInfo::set_team_color(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mobapk.UserTeamInfo.team_color)
}
inline void UserTeamInfo::set_team_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mobapk.UserTeamInfo.team_color)
}
inline void UserTeamInfo::set_team_color(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mobapk.UserTeamInfo.team_color)
}
inline std::string* UserTeamInfo::_internal_mutable_team_color() {
  _has_bits_[0] |= 0x00000001u;
  return team_color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserTeamInfo::release_team_color() {
  // @@protoc_insertion_point(field_release:mobapk.UserTeamInfo.team_color)
  if (!_internal_has_team_color()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_color_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserTeamInfo::set_allocated_team_color(std::string* team_color) {
  if (team_color != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_color);
  // @@protoc_insertion_point(field_set_allocated:mobapk.UserTeamInfo.team_color)
}

// -------------------------------------------------------------------

// MSG_BstUserTeamInfo_SC

// repeated .mobapk.UserTeamInfo infos = 1;
inline int MSG_BstUserTeamInfo_SC::_internal_infos_size() const {
  return infos_.size();
}
inline int MSG_BstUserTeamInfo_SC::infos_size() const {
  return _internal_infos_size();
}
inline void MSG_BstUserTeamInfo_SC::clear_infos() {
  infos_.Clear();
}
inline ::mobapk::UserTeamInfo* MSG_BstUserTeamInfo_SC::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:mobapk.MSG_BstUserTeamInfo_SC.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::UserTeamInfo >*
MSG_BstUserTeamInfo_SC::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:mobapk.MSG_BstUserTeamInfo_SC.infos)
  return &infos_;
}
inline const ::mobapk::UserTeamInfo& MSG_BstUserTeamInfo_SC::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::mobapk::UserTeamInfo& MSG_BstUserTeamInfo_SC::infos(int index) const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_BstUserTeamInfo_SC.infos)
  return _internal_infos(index);
}
inline ::mobapk::UserTeamInfo* MSG_BstUserTeamInfo_SC::_internal_add_infos() {
  return infos_.Add();
}
inline ::mobapk::UserTeamInfo* MSG_BstUserTeamInfo_SC::add_infos() {
  // @@protoc_insertion_point(field_add:mobapk.MSG_BstUserTeamInfo_SC.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::UserTeamInfo >&
MSG_BstUserTeamInfo_SC::infos() const {
  // @@protoc_insertion_point(field_list:mobapk.MSG_BstUserTeamInfo_SC.infos)
  return infos_;
}

// -------------------------------------------------------------------

// MSG_UseSpecialCapsule_CS

// optional string thisid = 1;
inline bool MSG_UseSpecialCapsule_CS::_internal_has_thisid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_UseSpecialCapsule_CS::has_thisid() const {
  return _internal_has_thisid();
}
inline void MSG_UseSpecialCapsule_CS::clear_thisid() {
  thisid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MSG_UseSpecialCapsule_CS::thisid() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_UseSpecialCapsule_CS.thisid)
  return _internal_thisid();
}
inline void MSG_UseSpecialCapsule_CS::set_thisid(const std::string& value) {
  _internal_set_thisid(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_UseSpecialCapsule_CS.thisid)
}
inline std::string* MSG_UseSpecialCapsule_CS::mutable_thisid() {
  // @@protoc_insertion_point(field_mutable:mobapk.MSG_UseSpecialCapsule_CS.thisid)
  return _internal_mutable_thisid();
}
inline const std::string& MSG_UseSpecialCapsule_CS::_internal_thisid() const {
  return thisid_.GetNoArena();
}
inline void MSG_UseSpecialCapsule_CS::_internal_set_thisid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MSG_UseSpecialCapsule_CS::set_thisid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mobapk.MSG_UseSpecialCapsule_CS.thisid)
}
inline void MSG_UseSpecialCapsule_CS::set_thisid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mobapk.MSG_UseSpecialCapsule_CS.thisid)
}
inline void MSG_UseSpecialCapsule_CS::set_thisid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  thisid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mobapk.MSG_UseSpecialCapsule_CS.thisid)
}
inline std::string* MSG_UseSpecialCapsule_CS::_internal_mutable_thisid() {
  _has_bits_[0] |= 0x00000001u;
  return thisid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MSG_UseSpecialCapsule_CS::release_thisid() {
  // @@protoc_insertion_point(field_release:mobapk.MSG_UseSpecialCapsule_CS.thisid)
  if (!_internal_has_thisid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return thisid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MSG_UseSpecialCapsule_CS::set_allocated_thisid(std::string* thisid) {
  if (thisid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  thisid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thisid);
  // @@protoc_insertion_point(field_set_allocated:mobapk.MSG_UseSpecialCapsule_CS.thisid)
}

// optional uint32 x = 2;
inline bool MSG_UseSpecialCapsule_CS::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_UseSpecialCapsule_CS::has_x() const {
  return _internal_has_x();
}
inline void MSG_UseSpecialCapsule_CS::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_UseSpecialCapsule_CS::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_UseSpecialCapsule_CS::x() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_UseSpecialCapsule_CS.x)
  return _internal_x();
}
inline void MSG_UseSpecialCapsule_CS::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void MSG_UseSpecialCapsule_CS::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_UseSpecialCapsule_CS.x)
}

// optional uint32 y = 3;
inline bool MSG_UseSpecialCapsule_CS::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_UseSpecialCapsule_CS::has_y() const {
  return _internal_has_y();
}
inline void MSG_UseSpecialCapsule_CS::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_UseSpecialCapsule_CS::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_UseSpecialCapsule_CS::y() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_UseSpecialCapsule_CS.y)
  return _internal_y();
}
inline void MSG_UseSpecialCapsule_CS::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void MSG_UseSpecialCapsule_CS::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_UseSpecialCapsule_CS.y)
}

// -------------------------------------------------------------------

// MSG_GameOver_SC

// optional uint32 rank = 1;
inline bool MSG_GameOver_SC::_internal_has_rank() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_GameOver_SC::has_rank() const {
  return _internal_has_rank();
}
inline void MSG_GameOver_SC::clear_rank() {
  rank_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_GameOver_SC::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_GameOver_SC::rank() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_GameOver_SC.rank)
  return _internal_rank();
}
inline void MSG_GameOver_SC::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rank_ = value;
}
inline void MSG_GameOver_SC::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_GameOver_SC.rank)
}

// -------------------------------------------------------------------

// MSG_UserGetAwardReq_CS

// optional uint32 idx = 1;
inline bool MSG_UserGetAwardReq_CS::_internal_has_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_UserGetAwardReq_CS::has_idx() const {
  return _internal_has_idx();
}
inline void MSG_UserGetAwardReq_CS::clear_idx() {
  idx_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_UserGetAwardReq_CS::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_UserGetAwardReq_CS::idx() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_UserGetAwardReq_CS.idx)
  return _internal_idx();
}
inline void MSG_UserGetAwardReq_CS::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  idx_ = value;
}
inline void MSG_UserGetAwardReq_CS::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_UserGetAwardReq_CS.idx)
}

// -------------------------------------------------------------------

// GetBagInfo

// optional uint32 idx = 1;
inline bool GetBagInfo::_internal_has_idx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetBagInfo::has_idx() const {
  return _internal_has_idx();
}
inline void GetBagInfo::clear_idx() {
  idx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBagInfo::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBagInfo::idx() const {
  // @@protoc_insertion_point(field_get:mobapk.GetBagInfo.idx)
  return _internal_idx();
}
inline void GetBagInfo::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  idx_ = value;
}
inline void GetBagInfo::set_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:mobapk.GetBagInfo.idx)
}

// optional uint64 uid = 2;
inline bool GetBagInfo::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetBagInfo::has_uid() const {
  return _internal_has_uid();
}
inline void GetBagInfo::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBagInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBagInfo::uid() const {
  // @@protoc_insertion_point(field_get:mobapk.GetBagInfo.uid)
  return _internal_uid();
}
inline void GetBagInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
}
inline void GetBagInfo::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mobapk.GetBagInfo.uid)
}

// optional string name = 3;
inline bool GetBagInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetBagInfo::has_name() const {
  return _internal_has_name();
}
inline void GetBagInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetBagInfo::name() const {
  // @@protoc_insertion_point(field_get:mobapk.GetBagInfo.name)
  return _internal_name();
}
inline void GetBagInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mobapk.GetBagInfo.name)
}
inline std::string* GetBagInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mobapk.GetBagInfo.name)
  return _internal_mutable_name();
}
inline const std::string& GetBagInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void GetBagInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBagInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mobapk.GetBagInfo.name)
}
inline void GetBagInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mobapk.GetBagInfo.name)
}
inline void GetBagInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mobapk.GetBagInfo.name)
}
inline std::string* GetBagInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBagInfo::release_name() {
  // @@protoc_insertion_point(field_release:mobapk.GetBagInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBagInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mobapk.GetBagInfo.name)
}

// optional uint32 objectid = 4;
inline bool GetBagInfo::_internal_has_objectid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GetBagInfo::has_objectid() const {
  return _internal_has_objectid();
}
inline void GetBagInfo::clear_objectid() {
  objectid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBagInfo::_internal_objectid() const {
  return objectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBagInfo::objectid() const {
  // @@protoc_insertion_point(field_get:mobapk.GetBagInfo.objectid)
  return _internal_objectid();
}
inline void GetBagInfo::_internal_set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  objectid_ = value;
}
inline void GetBagInfo::set_objectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:mobapk.GetBagInfo.objectid)
}

// optional uint32 count = 5;
inline bool GetBagInfo::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GetBagInfo::has_count() const {
  return _internal_has_count();
}
inline void GetBagInfo::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBagInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetBagInfo::count() const {
  // @@protoc_insertion_point(field_get:mobapk.GetBagInfo.count)
  return _internal_count();
}
inline void GetBagInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  count_ = value;
}
inline void GetBagInfo::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:mobapk.GetBagInfo.count)
}

// -------------------------------------------------------------------

// MSG_RewardBagInfo_SC

// repeated .mobapk.GetBagInfo infos = 1;
inline int MSG_RewardBagInfo_SC::_internal_infos_size() const {
  return infos_.size();
}
inline int MSG_RewardBagInfo_SC::infos_size() const {
  return _internal_infos_size();
}
inline void MSG_RewardBagInfo_SC::clear_infos() {
  infos_.Clear();
}
inline ::mobapk::GetBagInfo* MSG_RewardBagInfo_SC::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:mobapk.MSG_RewardBagInfo_SC.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::GetBagInfo >*
MSG_RewardBagInfo_SC::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:mobapk.MSG_RewardBagInfo_SC.infos)
  return &infos_;
}
inline const ::mobapk::GetBagInfo& MSG_RewardBagInfo_SC::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::mobapk::GetBagInfo& MSG_RewardBagInfo_SC::infos(int index) const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_RewardBagInfo_SC.infos)
  return _internal_infos(index);
}
inline ::mobapk::GetBagInfo* MSG_RewardBagInfo_SC::_internal_add_infos() {
  return infos_.Add();
}
inline ::mobapk::GetBagInfo* MSG_RewardBagInfo_SC::add_infos() {
  // @@protoc_insertion_point(field_add:mobapk.MSG_RewardBagInfo_SC.infos)
  return _internal_add_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mobapk::GetBagInfo >&
MSG_RewardBagInfo_SC::infos() const {
  // @@protoc_insertion_point(field_list:mobapk.MSG_RewardBagInfo_SC.infos)
  return infos_;
}

// -------------------------------------------------------------------

// MSG_MobaLevelUp_SC

// optional uint32 oldlevel = 1;
inline bool MSG_MobaLevelUp_SC::_internal_has_oldlevel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_MobaLevelUp_SC::has_oldlevel() const {
  return _internal_has_oldlevel();
}
inline void MSG_MobaLevelUp_SC::clear_oldlevel() {
  oldlevel_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MobaLevelUp_SC::_internal_oldlevel() const {
  return oldlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MobaLevelUp_SC::oldlevel() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MobaLevelUp_SC.oldlevel)
  return _internal_oldlevel();
}
inline void MSG_MobaLevelUp_SC::_internal_set_oldlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  oldlevel_ = value;
}
inline void MSG_MobaLevelUp_SC::set_oldlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_oldlevel(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_MobaLevelUp_SC.oldlevel)
}

// optional uint32 newlevel = 2;
inline bool MSG_MobaLevelUp_SC::_internal_has_newlevel() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_MobaLevelUp_SC::has_newlevel() const {
  return _internal_has_newlevel();
}
inline void MSG_MobaLevelUp_SC::clear_newlevel() {
  newlevel_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MobaLevelUp_SC::_internal_newlevel() const {
  return newlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MobaLevelUp_SC::newlevel() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MobaLevelUp_SC.newlevel)
  return _internal_newlevel();
}
inline void MSG_MobaLevelUp_SC::_internal_set_newlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  newlevel_ = value;
}
inline void MSG_MobaLevelUp_SC::set_newlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_newlevel(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_MobaLevelUp_SC.newlevel)
}

// optional uint64 uid = 3;
inline bool MSG_MobaLevelUp_SC::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_MobaLevelUp_SC::has_uid() const {
  return _internal_has_uid();
}
inline void MSG_MobaLevelUp_SC::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_MobaLevelUp_SC::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_MobaLevelUp_SC::uid() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MobaLevelUp_SC.uid)
  return _internal_uid();
}
inline void MSG_MobaLevelUp_SC::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
}
inline void MSG_MobaLevelUp_SC::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_MobaLevelUp_SC.uid)
}

// optional uint32 type = 4;
inline bool MSG_MobaLevelUp_SC::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_MobaLevelUp_SC::has_type() const {
  return _internal_has_type();
}
inline void MSG_MobaLevelUp_SC::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MobaLevelUp_SC::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_MobaLevelUp_SC::type() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_MobaLevelUp_SC.type)
  return _internal_type();
}
inline void MSG_MobaLevelUp_SC::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void MSG_MobaLevelUp_SC::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_MobaLevelUp_SC.type)
}

// -------------------------------------------------------------------

// MSG_ClientEffect_SC

// optional uint64 uid = 1;
inline bool MSG_ClientEffect_SC::_internal_has_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MSG_ClientEffect_SC::has_uid() const {
  return _internal_has_uid();
}
inline void MSG_ClientEffect_SC::clear_uid() {
  uid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_ClientEffect_SC::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MSG_ClientEffect_SC::uid() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_ClientEffect_SC.uid)
  return _internal_uid();
}
inline void MSG_ClientEffect_SC::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  uid_ = value;
}
inline void MSG_ClientEffect_SC::set_uid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_ClientEffect_SC.uid)
}

// optional uint32 effectid = 2;
inline bool MSG_ClientEffect_SC::_internal_has_effectid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MSG_ClientEffect_SC::has_effectid() const {
  return _internal_has_effectid();
}
inline void MSG_ClientEffect_SC::clear_effectid() {
  effectid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ClientEffect_SC::_internal_effectid() const {
  return effectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ClientEffect_SC::effectid() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_ClientEffect_SC.effectid)
  return _internal_effectid();
}
inline void MSG_ClientEffect_SC::_internal_set_effectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  effectid_ = value;
}
inline void MSG_ClientEffect_SC::set_effectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_effectid(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_ClientEffect_SC.effectid)
}

// optional uint32 posx = 3;
inline bool MSG_ClientEffect_SC::_internal_has_posx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MSG_ClientEffect_SC::has_posx() const {
  return _internal_has_posx();
}
inline void MSG_ClientEffect_SC::clear_posx() {
  posx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ClientEffect_SC::_internal_posx() const {
  return posx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ClientEffect_SC::posx() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_ClientEffect_SC.posx)
  return _internal_posx();
}
inline void MSG_ClientEffect_SC::_internal_set_posx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  posx_ = value;
}
inline void MSG_ClientEffect_SC::set_posx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_ClientEffect_SC.posx)
}

// optional uint32 posy = 4;
inline bool MSG_ClientEffect_SC::_internal_has_posy() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MSG_ClientEffect_SC::has_posy() const {
  return _internal_has_posy();
}
inline void MSG_ClientEffect_SC::clear_posy() {
  posy_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ClientEffect_SC::_internal_posy() const {
  return posy_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ClientEffect_SC::posy() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_ClientEffect_SC.posy)
  return _internal_posy();
}
inline void MSG_ClientEffect_SC::_internal_set_posy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  posy_ = value;
}
inline void MSG_ClientEffect_SC::set_posy(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_ClientEffect_SC.posy)
}

// optional uint32 r = 5;
inline bool MSG_ClientEffect_SC::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MSG_ClientEffect_SC::has_r() const {
  return _internal_has_r();
}
inline void MSG_ClientEffect_SC::clear_r() {
  r_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ClientEffect_SC::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MSG_ClientEffect_SC::r() const {
  // @@protoc_insertion_point(field_get:mobapk.MSG_ClientEffect_SC.r)
  return _internal_r();
}
inline void MSG_ClientEffect_SC::_internal_set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  r_ = value;
}
inline void MSG_ClientEffect_SC::set_r(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:mobapk.MSG_ClientEffect_SC.r)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mobapk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mobapk::ServerTimer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mobapk::ServerTimer>() {
  return ::mobapk::ServerTimer_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mobapk_2eproto
