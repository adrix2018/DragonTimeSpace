// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto

#include "team.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_team_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChooseTeamDropItem_team_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_team_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaderPosInfo_team_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_team_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_TeamMemeberList_SC_team_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_team_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberPos_team_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_team_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Memember_team_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_team_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_teamDropItem_team_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_5fenum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntryIDType_msg_5fenum_2eproto;
namespace Team {
class MSG_CreateTeam_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_CreateTeam_CS> _instance;
} _MSG_CreateTeam_CS_default_instance_;
class MememberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Memember> _instance;
} _Memember_default_instance_;
class MSG_TeamMemeberList_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_TeamMemeberList_CS> _instance;
} _MSG_TeamMemeberList_CS_default_instance_;
class MSG_TeamMemeberList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_TeamMemeberList_SC> _instance;
} _MSG_TeamMemeberList_SC_default_instance_;
class OneTeamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OneTeam> _instance;
} _OneTeam_default_instance_;
class MSG_Team_List_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Team_List_CS> _instance;
} _MSG_Team_List_CS_default_instance_;
class MSG_Team_List_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Team_List_SC> _instance;
} _MSG_Team_List_SC_default_instance_;
class MSG_Join_Team_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Join_Team_CS> _instance;
} _MSG_Join_Team_CS_default_instance_;
class MSG_Join_Team_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Join_Team_SC> _instance;
} _MSG_Join_Team_SC_default_instance_;
class MSG_ReqJoinTeamNotifyLeader_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqJoinTeamNotifyLeader_SC> _instance;
} _MSG_ReqJoinTeamNotifyLeader_SC_default_instance_;
class MSG_AnswerJoinTeam_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_AnswerJoinTeam_CS> _instance;
} _MSG_AnswerJoinTeam_CS_default_instance_;
class MSG_AnswerJoinTeam_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_AnswerJoinTeam_SC> _instance;
} _MSG_AnswerJoinTeam_SC_default_instance_;
class MSG_ReqApplyList_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqApplyList_CS> _instance;
} _MSG_ReqApplyList_CS_default_instance_;
class MSG_ReqApplyList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqApplyList_SC> _instance;
} _MSG_ReqApplyList_SC_default_instance_;
class MSG_ReqDelMemember_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqDelMemember_CS> _instance;
} _MSG_ReqDelMemember_CS_default_instance_;
class MSG_ReqDelMemember_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqDelMemember_SC> _instance;
} _MSG_ReqDelMemember_SC_default_instance_;
class MSG_ReqLanchVoteOut_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqLanchVoteOut_CS> _instance;
} _MSG_ReqLanchVoteOut_CS_default_instance_;
class MSG_ReqLanchVoteOut_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqLanchVoteOut_SC> _instance;
} _MSG_ReqLanchVoteOut_SC_default_instance_;
class MSG_ReqVote_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqVote_CS> _instance;
} _MSG_ReqVote_CS_default_instance_;
class MSG_ReqChangeLeader_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqChangeLeader_CS> _instance;
} _MSG_ReqChangeLeader_CS_default_instance_;
class MSG_ReqChangeLeader_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqChangeLeader_SC> _instance;
} _MSG_ReqChangeLeader_SC_default_instance_;
class MSG_ReqNearByUnteamedPlayer_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqNearByUnteamedPlayer_CS> _instance;
} _MSG_ReqNearByUnteamedPlayer_CS_default_instance_;
class MSG_ReqNearByUnteamedPlayer_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqNearByUnteamedPlayer_SC> _instance;
} _MSG_ReqNearByUnteamedPlayer_SC_default_instance_;
class MSG_InviteIntoTeam_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_InviteIntoTeam_CS> _instance;
} _MSG_InviteIntoTeam_CS_default_instance_;
class MSG_InviteIntoTeam_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_InviteIntoTeam_SC> _instance;
} _MSG_InviteIntoTeam_SC_default_instance_;
class MSG_AnswerInviteTeam_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_AnswerInviteTeam_CS> _instance;
} _MSG_AnswerInviteTeam_CS_default_instance_;
class MSG_AddMemember_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_AddMemember_SC> _instance;
} _MSG_AddMemember_SC_default_instance_;
class MSG_LeaderIgnoreNotice_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_LeaderIgnoreNotice_CS> _instance;
} _MSG_LeaderIgnoreNotice_CS_default_instance_;
class MSG_updateTeamMememberHp_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_updateTeamMememberHp_SC> _instance;
} _MSG_updateTeamMememberHp_SC_default_instance_;
class MSG_updateTeamMememberCareer_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_updateTeamMememberCareer_SC> _instance;
} _MSG_updateTeamMememberCareer_SC_default_instance_;
class MSG_updateTeamMemeberHero_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_updateTeamMemeberHero_SC> _instance;
} _MSG_updateTeamMemeberHero_SC_default_instance_;
class MSG_updateTeamMememberLevel_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_updateTeamMememberLevel_SC> _instance;
} _MSG_updateTeamMememberLevel_SC_default_instance_;
class MSG_updateTeamMemberFight_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_updateTeamMemberFight_SC> _instance;
} _MSG_updateTeamMemberFight_SC_default_instance_;
class MSG_ReqTeamMemberPos_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqTeamMemberPos_CS> _instance;
} _MSG_ReqTeamMemberPos_CS_default_instance_;
class MemberPosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MemberPos> _instance;
} _MemberPos_default_instance_;
class MSG_RetTeamMemberPos_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetTeamMemberPos_SC> _instance;
} _MSG_RetTeamMemberPos_SC_default_instance_;
class MSG_RetNearByUnteamedInvite_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetNearByUnteamedInvite_SC> _instance;
} _MSG_RetNearByUnteamedInvite_SC_default_instance_;
class MSG_RetNewApply_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetNewApply_SC> _instance;
} _MSG_RetNewApply_SC_default_instance_;
class teamDropItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<teamDropItem> _instance;
} _teamDropItem_default_instance_;
class MSG_RetTeamPublicDrop_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetTeamPublicDrop_SC> _instance;
} _MSG_RetTeamPublicDrop_SC_default_instance_;
class ChooseTeamDropItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChooseTeamDropItem> _instance;
} _ChooseTeamDropItem_default_instance_;
class MSG_ReqChooseTeamDrop_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqChooseTeamDrop_CS> _instance;
} _MSG_ReqChooseTeamDrop_CS_default_instance_;
class MSG_RetChooseTeamDrop_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetChooseTeamDrop_SC> _instance;
} _MSG_RetChooseTeamDrop_SC_default_instance_;
class MSG_ReqSearchTeam_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSearchTeam_CS> _instance;
} _MSG_ReqSearchTeam_CS_default_instance_;
class MSG_ReqSearchTeamByPage_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSearchTeamByPage_CS> _instance;
} _MSG_ReqSearchTeamByPage_CS_default_instance_;
class MSG_RetSearchTeam_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetSearchTeam_SC> _instance;
} _MSG_RetSearchTeam_SC_default_instance_;
class MSG_ReqChangeActivityTarget_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqChangeActivityTarget_CS> _instance;
} _MSG_ReqChangeActivityTarget_CS_default_instance_;
class MSG_RetChangeActivityTarget_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetChangeActivityTarget_SC> _instance;
} _MSG_RetChangeActivityTarget_SC_default_instance_;
class MSG_ReqMatch_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqMatch_CS> _instance;
} _MSG_ReqMatch_CS_default_instance_;
class MSG_RetMatch_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetMatch_SC> _instance;
} _MSG_RetMatch_SC_default_instance_;
class MSG_ReqUnmatch_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqUnmatch_CS> _instance;
} _MSG_ReqUnmatch_CS_default_instance_;
class MSG_RetUnmatch_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetUnmatch_SC> _instance;
} _MSG_RetUnmatch_SC_default_instance_;
class MSG_RetNotifyMatchSuccess_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetNotifyMatchSuccess_SC> _instance;
} _MSG_RetNotifyMatchSuccess_SC_default_instance_;
class MSG_ReqMemberBackTeam_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqMemberBackTeam_CS> _instance;
} _MSG_ReqMemberBackTeam_CS_default_instance_;
class MSG_RetMemberBackTeam_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetMemberBackTeam_SC> _instance;
} _MSG_RetMemberBackTeam_SC_default_instance_;
class MSG_updateMemStateToTeam_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_updateMemStateToTeam_SC> _instance;
} _MSG_updateMemStateToTeam_SC_default_instance_;
class MSG_ReqLeaderMapPos_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqLeaderMapPos_CS> _instance;
} _MSG_ReqLeaderMapPos_CS_default_instance_;
class MSG_RetLeaderMapPos_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetLeaderMapPos_SC> _instance;
} _MSG_RetLeaderMapPos_SC_default_instance_;
class LeaderPosInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderPosInfo> _instance;
} _LeaderPosInfo_default_instance_;
class MSG_ReqChangeMapToLeader_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqChangeMapToLeader_CS> _instance;
} _MSG_ReqChangeMapToLeader_CS_default_instance_;
class MSG_RetChangeMapToLeader_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetChangeMapToLeader_SC> _instance;
} _MSG_RetChangeMapToLeader_SC_default_instance_;
class MSG_ReqLeaderAttackTarget_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqLeaderAttackTarget_CS> _instance;
} _MSG_ReqLeaderAttackTarget_CS_default_instance_;
class MSG_RetLeaderAttackTarget_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetLeaderAttackTarget_SC> _instance;
} _MSG_RetLeaderAttackTarget_SC_default_instance_;
class MSG_notifyMemberLeaderIntoPublic_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_notifyMemberLeaderIntoPublic_SC> _instance;
} _MSG_notifyMemberLeaderIntoPublic_SC_default_instance_;
class MSG_notifyMemberOfflineHosting_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_notifyMemberOfflineHosting_SC> _instance;
} _MSG_notifyMemberOfflineHosting_SC_default_instance_;
class MSG_Req_SetMemberPrivilege_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_SetMemberPrivilege_CS> _instance;
} _MSG_Req_SetMemberPrivilege_CS_default_instance_;
class MSG_updateTeamMemberPrivilege_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_updateTeamMemberPrivilege_SC> _instance;
} _MSG_updateTeamMemberPrivilege_SC_default_instance_;
class MSG_Req_checkUserTeamInfo_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_checkUserTeamInfo_CS> _instance;
} _MSG_Req_checkUserTeamInfo_CS_default_instance_;
class MSG_Ret_checkUserTeamInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_checkUserTeamInfo_SC> _instance;
} _MSG_Ret_checkUserTeamInfo_SC_default_instance_;
class MSG_Req_DismissTeam_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_DismissTeam_CS> _instance;
} _MSG_Req_DismissTeam_CS_default_instance_;
class MSG_NotifyTeamDismiss_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NotifyTeamDismiss_SC> _instance;
} _MSG_NotifyTeamDismiss_SC_default_instance_;
class MSG_updateTeamMemberAvatar_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_updateTeamMemberAvatar_SC> _instance;
} _MSG_updateTeamMemberAvatar_SC_default_instance_;
}  // namespace Team
static void InitDefaultsscc_info_ChooseTeamDropItem_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_ChooseTeamDropItem_default_instance_;
    new (ptr) ::Team::ChooseTeamDropItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::ChooseTeamDropItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChooseTeamDropItem_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChooseTeamDropItem_team_2eproto}, {}};

static void InitDefaultsscc_info_LeaderPosInfo_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_LeaderPosInfo_default_instance_;
    new (ptr) ::Team::LeaderPosInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::LeaderPosInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LeaderPosInfo_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LeaderPosInfo_team_2eproto}, {
      &scc_info_MemberPos_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_AddMemember_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_AddMemember_SC_default_instance_;
    new (ptr) ::Team::MSG_AddMemember_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_AddMemember_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_AddMemember_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_AddMemember_SC_team_2eproto}, {
      &scc_info_Memember_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_AnswerInviteTeam_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_AnswerInviteTeam_CS_default_instance_;
    new (ptr) ::Team::MSG_AnswerInviteTeam_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_AnswerInviteTeam_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_AnswerInviteTeam_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_AnswerInviteTeam_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_AnswerJoinTeam_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_AnswerJoinTeam_CS_default_instance_;
    new (ptr) ::Team::MSG_AnswerJoinTeam_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_AnswerJoinTeam_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_AnswerJoinTeam_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_AnswerJoinTeam_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_AnswerJoinTeam_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_AnswerJoinTeam_SC_default_instance_;
    new (ptr) ::Team::MSG_AnswerJoinTeam_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_AnswerJoinTeam_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_AnswerJoinTeam_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_AnswerJoinTeam_SC_team_2eproto}, {
      &scc_info_MSG_TeamMemeberList_SC_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_CreateTeam_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_CreateTeam_CS_default_instance_;
    new (ptr) ::Team::MSG_CreateTeam_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_CreateTeam_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_CreateTeam_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_CreateTeam_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_InviteIntoTeam_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_InviteIntoTeam_CS_default_instance_;
    new (ptr) ::Team::MSG_InviteIntoTeam_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_InviteIntoTeam_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_InviteIntoTeam_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_InviteIntoTeam_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_InviteIntoTeam_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_InviteIntoTeam_SC_default_instance_;
    new (ptr) ::Team::MSG_InviteIntoTeam_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_InviteIntoTeam_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_InviteIntoTeam_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_InviteIntoTeam_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Join_Team_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_Join_Team_CS_default_instance_;
    new (ptr) ::Team::MSG_Join_Team_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_Join_Team_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Join_Team_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Join_Team_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Join_Team_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_Join_Team_SC_default_instance_;
    new (ptr) ::Team::MSG_Join_Team_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_Join_Team_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Join_Team_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Join_Team_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_LeaderIgnoreNotice_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_LeaderIgnoreNotice_CS_default_instance_;
    new (ptr) ::Team::MSG_LeaderIgnoreNotice_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_LeaderIgnoreNotice_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_LeaderIgnoreNotice_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_LeaderIgnoreNotice_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_NotifyTeamDismiss_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_NotifyTeamDismiss_SC_default_instance_;
    new (ptr) ::Team::MSG_NotifyTeamDismiss_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_NotifyTeamDismiss_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_NotifyTeamDismiss_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_NotifyTeamDismiss_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqApplyList_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqApplyList_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqApplyList_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqApplyList_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqApplyList_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqApplyList_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqApplyList_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqApplyList_SC_default_instance_;
    new (ptr) ::Team::MSG_ReqApplyList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqApplyList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_ReqApplyList_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_ReqApplyList_SC_team_2eproto}, {
      &scc_info_Memember_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_ReqChangeActivityTarget_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqChangeActivityTarget_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqChangeActivityTarget_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqChangeActivityTarget_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqChangeActivityTarget_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqChangeActivityTarget_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqChangeLeader_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqChangeLeader_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqChangeLeader_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqChangeLeader_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqChangeLeader_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqChangeLeader_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqChangeLeader_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqChangeLeader_SC_default_instance_;
    new (ptr) ::Team::MSG_ReqChangeLeader_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqChangeLeader_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqChangeLeader_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqChangeLeader_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqChangeMapToLeader_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqChangeMapToLeader_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqChangeMapToLeader_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqChangeMapToLeader_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_ReqChangeMapToLeader_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_ReqChangeMapToLeader_CS_team_2eproto}, {
      &scc_info_MemberPos_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_ReqChooseTeamDrop_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqChooseTeamDrop_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqChooseTeamDrop_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqChooseTeamDrop_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_ReqChooseTeamDrop_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_ReqChooseTeamDrop_CS_team_2eproto}, {
      &scc_info_ChooseTeamDropItem_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_ReqDelMemember_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqDelMemember_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqDelMemember_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqDelMemember_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqDelMemember_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqDelMemember_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqDelMemember_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqDelMemember_SC_default_instance_;
    new (ptr) ::Team::MSG_ReqDelMemember_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqDelMemember_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqDelMemember_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqDelMemember_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqJoinTeamNotifyLeader_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqJoinTeamNotifyLeader_SC_default_instance_;
    new (ptr) ::Team::MSG_ReqJoinTeamNotifyLeader_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqJoinTeamNotifyLeader_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqJoinTeamNotifyLeader_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqJoinTeamNotifyLeader_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqLanchVoteOut_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqLanchVoteOut_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqLanchVoteOut_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqLanchVoteOut_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqLanchVoteOut_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqLanchVoteOut_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqLanchVoteOut_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqLanchVoteOut_SC_default_instance_;
    new (ptr) ::Team::MSG_ReqLanchVoteOut_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqLanchVoteOut_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqLanchVoteOut_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqLanchVoteOut_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqLeaderAttackTarget_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqLeaderAttackTarget_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqLeaderAttackTarget_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqLeaderAttackTarget_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqLeaderAttackTarget_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqLeaderAttackTarget_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqLeaderMapPos_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqLeaderMapPos_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqLeaderMapPos_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqLeaderMapPos_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqLeaderMapPos_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqLeaderMapPos_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqMatch_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqMatch_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqMatch_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqMatch_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqMatch_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqMatch_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqMemberBackTeam_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqMemberBackTeam_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqMemberBackTeam_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqMemberBackTeam_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqMemberBackTeam_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqMemberBackTeam_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqNearByUnteamedPlayer_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqNearByUnteamedPlayer_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqNearByUnteamedPlayer_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqNearByUnteamedPlayer_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqNearByUnteamedPlayer_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqNearByUnteamedPlayer_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqNearByUnteamedPlayer_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqNearByUnteamedPlayer_SC_default_instance_;
    new (ptr) ::Team::MSG_ReqNearByUnteamedPlayer_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqNearByUnteamedPlayer_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_ReqNearByUnteamedPlayer_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_ReqNearByUnteamedPlayer_SC_team_2eproto}, {
      &scc_info_Memember_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_ReqSearchTeamByPage_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqSearchTeamByPage_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqSearchTeamByPage_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqSearchTeamByPage_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSearchTeamByPage_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSearchTeamByPage_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSearchTeam_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqSearchTeam_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqSearchTeam_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqSearchTeam_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSearchTeam_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSearchTeam_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqTeamMemberPos_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqTeamMemberPos_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqTeamMemberPos_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqTeamMemberPos_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqTeamMemberPos_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqTeamMemberPos_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqUnmatch_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqUnmatch_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqUnmatch_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqUnmatch_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqUnmatch_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqUnmatch_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqVote_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_ReqVote_CS_default_instance_;
    new (ptr) ::Team::MSG_ReqVote_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_ReqVote_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqVote_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqVote_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_DismissTeam_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_Req_DismissTeam_CS_default_instance_;
    new (ptr) ::Team::MSG_Req_DismissTeam_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_Req_DismissTeam_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_DismissTeam_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_DismissTeam_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_SetMemberPrivilege_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_Req_SetMemberPrivilege_CS_default_instance_;
    new (ptr) ::Team::MSG_Req_SetMemberPrivilege_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_Req_SetMemberPrivilege_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_SetMemberPrivilege_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_SetMemberPrivilege_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_checkUserTeamInfo_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_Req_checkUserTeamInfo_CS_default_instance_;
    new (ptr) ::Team::MSG_Req_checkUserTeamInfo_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_Req_checkUserTeamInfo_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_checkUserTeamInfo_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_checkUserTeamInfo_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetChangeActivityTarget_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetChangeActivityTarget_SC_default_instance_;
    new (ptr) ::Team::MSG_RetChangeActivityTarget_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetChangeActivityTarget_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetChangeActivityTarget_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetChangeActivityTarget_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetChangeMapToLeader_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetChangeMapToLeader_SC_default_instance_;
    new (ptr) ::Team::MSG_RetChangeMapToLeader_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetChangeMapToLeader_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetChangeMapToLeader_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetChangeMapToLeader_SC_team_2eproto}, {
      &scc_info_LeaderPosInfo_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetChooseTeamDrop_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetChooseTeamDrop_SC_default_instance_;
    new (ptr) ::Team::MSG_RetChooseTeamDrop_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetChooseTeamDrop_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetChooseTeamDrop_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetChooseTeamDrop_SC_team_2eproto}, {
      &scc_info_ChooseTeamDropItem_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetLeaderAttackTarget_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetLeaderAttackTarget_SC_default_instance_;
    new (ptr) ::Team::MSG_RetLeaderAttackTarget_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetLeaderAttackTarget_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetLeaderAttackTarget_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetLeaderAttackTarget_SC_team_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetLeaderMapPos_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetLeaderMapPos_SC_default_instance_;
    new (ptr) ::Team::MSG_RetLeaderMapPos_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetLeaderMapPos_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetLeaderMapPos_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetLeaderMapPos_SC_team_2eproto}, {
      &scc_info_LeaderPosInfo_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetMatch_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetMatch_SC_default_instance_;
    new (ptr) ::Team::MSG_RetMatch_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetMatch_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetMatch_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetMatch_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetMemberBackTeam_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetMemberBackTeam_SC_default_instance_;
    new (ptr) ::Team::MSG_RetMemberBackTeam_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetMemberBackTeam_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetMemberBackTeam_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetMemberBackTeam_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetNearByUnteamedInvite_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetNearByUnteamedInvite_SC_default_instance_;
    new (ptr) ::Team::MSG_RetNearByUnteamedInvite_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetNearByUnteamedInvite_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetNearByUnteamedInvite_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetNearByUnteamedInvite_SC_team_2eproto}, {
      &scc_info_Memember_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetNewApply_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetNewApply_SC_default_instance_;
    new (ptr) ::Team::MSG_RetNewApply_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetNewApply_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetNewApply_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetNewApply_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetNotifyMatchSuccess_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetNotifyMatchSuccess_SC_default_instance_;
    new (ptr) ::Team::MSG_RetNotifyMatchSuccess_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetNotifyMatchSuccess_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetNotifyMatchSuccess_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetNotifyMatchSuccess_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetSearchTeam_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetSearchTeam_SC_default_instance_;
    new (ptr) ::Team::MSG_RetSearchTeam_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetSearchTeam_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetSearchTeam_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetSearchTeam_SC_team_2eproto}, {
      &scc_info_MSG_TeamMemeberList_SC_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetTeamMemberPos_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetTeamMemberPos_SC_default_instance_;
    new (ptr) ::Team::MSG_RetTeamMemberPos_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetTeamMemberPos_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetTeamMemberPos_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetTeamMemberPos_SC_team_2eproto}, {
      &scc_info_MemberPos_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetTeamPublicDrop_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetTeamPublicDrop_SC_default_instance_;
    new (ptr) ::Team::MSG_RetTeamPublicDrop_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetTeamPublicDrop_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetTeamPublicDrop_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetTeamPublicDrop_SC_team_2eproto}, {
      &scc_info_teamDropItem_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetUnmatch_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_RetUnmatch_SC_default_instance_;
    new (ptr) ::Team::MSG_RetUnmatch_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_RetUnmatch_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetUnmatch_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetUnmatch_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_checkUserTeamInfo_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_Ret_checkUserTeamInfo_SC_default_instance_;
    new (ptr) ::Team::MSG_Ret_checkUserTeamInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_Ret_checkUserTeamInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_checkUserTeamInfo_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_checkUserTeamInfo_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_TeamMemeberList_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_TeamMemeberList_CS_default_instance_;
    new (ptr) ::Team::MSG_TeamMemeberList_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_TeamMemeberList_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_TeamMemeberList_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_TeamMemeberList_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_TeamMemeberList_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_TeamMemeberList_SC_default_instance_;
    new (ptr) ::Team::MSG_TeamMemeberList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_TeamMemeberList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_TeamMemeberList_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_TeamMemeberList_SC_team_2eproto}, {
      &scc_info_Memember_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Team_List_CS_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_Team_List_CS_default_instance_;
    new (ptr) ::Team::MSG_Team_List_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_Team_List_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Team_List_CS_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Team_List_CS_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Team_List_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_Team_List_SC_default_instance_;
    new (ptr) ::Team::MSG_Team_List_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_Team_List_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Team_List_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Team_List_SC_team_2eproto}, {
      &scc_info_MSG_TeamMemeberList_SC_team_2eproto.base,}};

static void InitDefaultsscc_info_MSG_notifyMemberLeaderIntoPublic_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_notifyMemberLeaderIntoPublic_SC_default_instance_;
    new (ptr) ::Team::MSG_notifyMemberLeaderIntoPublic_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_notifyMemberLeaderIntoPublic_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_notifyMemberLeaderIntoPublic_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_notifyMemberLeaderIntoPublic_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_notifyMemberOfflineHosting_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_notifyMemberOfflineHosting_SC_default_instance_;
    new (ptr) ::Team::MSG_notifyMemberOfflineHosting_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_notifyMemberOfflineHosting_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_notifyMemberOfflineHosting_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_notifyMemberOfflineHosting_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_updateMemStateToTeam_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_updateMemStateToTeam_SC_default_instance_;
    new (ptr) ::Team::MSG_updateMemStateToTeam_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_updateMemStateToTeam_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_updateMemStateToTeam_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_updateMemStateToTeam_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_updateTeamMemberAvatar_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_updateTeamMemberAvatar_SC_default_instance_;
    new (ptr) ::Team::MSG_updateTeamMemberAvatar_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_updateTeamMemberAvatar_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_updateTeamMemberAvatar_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_updateTeamMemberAvatar_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_updateTeamMemberFight_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_updateTeamMemberFight_SC_default_instance_;
    new (ptr) ::Team::MSG_updateTeamMemberFight_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_updateTeamMemberFight_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_updateTeamMemberFight_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_updateTeamMemberFight_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_updateTeamMemberPrivilege_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_updateTeamMemberPrivilege_SC_default_instance_;
    new (ptr) ::Team::MSG_updateTeamMemberPrivilege_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_updateTeamMemberPrivilege_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_updateTeamMemberPrivilege_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_updateTeamMemberPrivilege_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_updateTeamMemeberHero_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_updateTeamMemeberHero_SC_default_instance_;
    new (ptr) ::Team::MSG_updateTeamMemeberHero_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_updateTeamMemeberHero_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_updateTeamMemeberHero_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_updateTeamMemeberHero_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_updateTeamMememberCareer_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_updateTeamMememberCareer_SC_default_instance_;
    new (ptr) ::Team::MSG_updateTeamMememberCareer_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_updateTeamMememberCareer_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_updateTeamMememberCareer_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_updateTeamMememberCareer_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_updateTeamMememberHp_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_updateTeamMememberHp_SC_default_instance_;
    new (ptr) ::Team::MSG_updateTeamMememberHp_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_updateTeamMememberHp_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_updateTeamMememberHp_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_updateTeamMememberHp_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MSG_updateTeamMememberLevel_SC_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MSG_updateTeamMememberLevel_SC_default_instance_;
    new (ptr) ::Team::MSG_updateTeamMememberLevel_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MSG_updateTeamMememberLevel_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_updateTeamMememberLevel_SC_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_updateTeamMememberLevel_SC_team_2eproto}, {}};

static void InitDefaultsscc_info_MemberPos_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_MemberPos_default_instance_;
    new (ptr) ::Team::MemberPos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::MemberPos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MemberPos_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MemberPos_team_2eproto}, {}};

static void InitDefaultsscc_info_Memember_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_Memember_default_instance_;
    new (ptr) ::Team::Memember();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::Memember::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Memember_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Memember_team_2eproto}, {}};

static void InitDefaultsscc_info_OneTeam_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_OneTeam_default_instance_;
    new (ptr) ::Team::OneTeam();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::OneTeam::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OneTeam_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OneTeam_team_2eproto}, {}};

static void InitDefaultsscc_info_teamDropItem_team_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Team::_teamDropItem_default_instance_;
    new (ptr) ::Team::teamDropItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Team::teamDropItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_teamDropItem_team_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_teamDropItem_team_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_team_2eproto[72];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_team_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_team_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_team_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Team::MSG_CreateTeam_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_CreateTeam_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_CreateTeam_CS, name_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_CreateTeam_CS, activityid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::Memember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::Memember, mark_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, name_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, occupation_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, level_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, skill_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, mememberid_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, hp_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, maxhp_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, occupationlevel_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, heroid_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, fight_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, sceneid_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, state_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, privilege_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, hairstyle_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, haircolor_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, headstyle_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, bodystyle_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, antenna_),
  PROTOBUF_FIELD_OFFSET(::Team::Memember, avatarid_),
  3,
  0,
  4,
  5,
  ~0u,
  1,
  6,
  7,
  8,
  9,
  10,
  2,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, id_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, name_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, leaderid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, mem_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, mode_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, cap_type_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, maxmember_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, note_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, activityid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_TeamMemeberList_SC, curmember_),
  3,
  0,
  1,
  ~0u,
  7,
  8,
  4,
  2,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::Team::OneTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::OneTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::OneTeam, id_),
  PROTOBUF_FIELD_OFFSET(::Team::OneTeam, name_),
  PROTOBUF_FIELD_OFFSET(::Team::OneTeam, size_),
  PROTOBUF_FIELD_OFFSET(::Team::OneTeam, capacity_),
  PROTOBUF_FIELD_OFFSET(::Team::OneTeam, mode_),
  PROTOBUF_FIELD_OFFSET(::Team::OneTeam, note_),
  2,
  0,
  3,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Team_List_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Team_List_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Team_List_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Team_List_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Team_List_SC, oneteam_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Join_Team_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Join_Team_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Join_Team_CS, teamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Join_Team_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Join_Team_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Join_Team_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqJoinTeamNotifyLeader_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqJoinTeamNotifyLeader_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqJoinTeamNotifyLeader_SC, requesterid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqJoinTeamNotifyLeader_SC, requestername_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerJoinTeam_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerJoinTeam_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerJoinTeam_CS, requesterid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerJoinTeam_CS, answer_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerJoinTeam_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerJoinTeam_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerJoinTeam_SC, errcode_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerJoinTeam_SC, answer_type_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerJoinTeam_SC, teaminfo_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqApplyList_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqApplyList_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqApplyList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqApplyList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqApplyList_SC, applyer_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqApplyList_SC, leaderid_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqDelMemember_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqDelMemember_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqDelMemember_CS, charid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqDelMemember_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqDelMemember_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqDelMemember_SC, charid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqDelMemember_SC, outtype_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqDelMemember_SC, name_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_CS, outid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_SC, errcode_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_SC, lancherid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_SC, lanchername_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_SC, outerid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_SC, outername_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLanchVoteOut_SC, duration_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqVote_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqVote_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqVote_CS, yesorno_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeLeader_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeLeader_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeLeader_CS, toid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeLeader_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeLeader_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeLeader_SC, newid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeLeader_SC, newname_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqNearByUnteamedPlayer_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqNearByUnteamedPlayer_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqNearByUnteamedPlayer_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqNearByUnteamedPlayer_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqNearByUnteamedPlayer_SC, mem_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_InviteIntoTeam_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_InviteIntoTeam_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_InviteIntoTeam_CS, inviteeid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_InviteIntoTeam_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_InviteIntoTeam_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_InviteIntoTeam_SC, errcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerInviteTeam_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerInviteTeam_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerInviteTeam_CS, yesorno_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerInviteTeam_CS, inviterid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerInviteTeam_CS, inviteeid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AnswerInviteTeam_CS, teamid_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AddMemember_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AddMemember_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_AddMemember_SC, mem_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_LeaderIgnoreNotice_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_LeaderIgnoreNotice_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberHp_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberHp_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberHp_SC, memid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberHp_SC, hp_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberHp_SC, maxhp_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberHp_SC, isdead_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberCareer_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberCareer_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberCareer_SC, mememberid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberCareer_SC, career_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberCareer_SC, careerlevel_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemeberHero_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemeberHero_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemeberHero_SC, memid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemeberHero_SC, heroid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberLevel_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberLevel_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberLevel_SC, mememberid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberLevel_SC, level_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMememberLevel_SC, membername_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberFight_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberFight_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberFight_SC, mememberid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberFight_SC, fight_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberFight_SC, heroid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqTeamMemberPos_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqTeamMemberPos_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MemberPos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MemberPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MemberPos, memberid_),
  PROTOBUF_FIELD_OFFSET(::Team::MemberPos, sceneid_),
  PROTOBUF_FIELD_OFFSET(::Team::MemberPos, x_),
  PROTOBUF_FIELD_OFFSET(::Team::MemberPos, y_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetTeamMemberPos_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetTeamMemberPos_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetTeamMemberPos_SC, members_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNearByUnteamedInvite_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNearByUnteamedInvite_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNearByUnteamedInvite_SC, inviter_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNearByUnteamedInvite_SC, invitername_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNearByUnteamedInvite_SC, inviterid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNearByUnteamedInvite_SC, inviteename_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNearByUnteamedInvite_SC, inviteeid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNearByUnteamedInvite_SC, teamname_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNearByUnteamedInvite_SC, teamid_),
  5,
  0,
  1,
  2,
  3,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNewApply_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNewApply_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNewApply_SC, count_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::teamDropItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::teamDropItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::teamDropItem, thisid_),
  PROTOBUF_FIELD_OFFSET(::Team::teamDropItem, objid_),
  PROTOBUF_FIELD_OFFSET(::Team::teamDropItem, num_),
  PROTOBUF_FIELD_OFFSET(::Team::teamDropItem, bind_),
  PROTOBUF_FIELD_OFFSET(::Team::teamDropItem, duetime_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetTeamPublicDrop_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetTeamPublicDrop_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetTeamPublicDrop_SC, oneitem_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Team::ChooseTeamDropItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::ChooseTeamDropItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::ChooseTeamDropItem, thisid_),
  PROTOBUF_FIELD_OFFSET(::Team::ChooseTeamDropItem, choose_),
  PROTOBUF_FIELD_OFFSET(::Team::ChooseTeamDropItem, errcode_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChooseTeamDrop_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChooseTeamDrop_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChooseTeamDrop_CS, item_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChooseTeamDrop_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChooseTeamDrop_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChooseTeamDrop_SC, item_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqSearchTeam_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqSearchTeam_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqSearchTeam_CS, teamid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqSearchTeam_CS, activityid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqSearchTeam_CS, nearby_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqSearchTeamByPage_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqSearchTeamByPage_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqSearchTeamByPage_CS, page_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqSearchTeamByPage_CS, nearby_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetSearchTeam_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetSearchTeam_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetSearchTeam_SC, totalpage_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetSearchTeam_SC, page_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetSearchTeam_SC, teamlist_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeActivityTarget_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeActivityTarget_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeActivityTarget_CS, activityid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChangeActivityTarget_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChangeActivityTarget_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChangeActivityTarget_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChangeActivityTarget_SC, activityid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqMatch_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqMatch_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqMatch_CS, activityid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqMatch_CS, minlevel_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqMatch_CS, maxlevel_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetMatch_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetMatch_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetMatch_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetMatch_SC, needtime_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetMatch_SC, starttime_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqUnmatch_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqUnmatch_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetUnmatch_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetUnmatch_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetUnmatch_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNotifyMatchSuccess_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetNotifyMatchSuccess_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqMemberBackTeam_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqMemberBackTeam_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetMemberBackTeam_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetMemberBackTeam_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetMemberBackTeam_SC, rettype_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateMemStateToTeam_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateMemStateToTeam_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateMemStateToTeam_SC, memid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateMemStateToTeam_SC, sceneid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateMemStateToTeam_SC, state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLeaderMapPos_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLeaderMapPos_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetLeaderMapPos_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetLeaderMapPos_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetLeaderMapPos_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetLeaderMapPos_SC, pos_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Team::LeaderPosInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::LeaderPosInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::LeaderPosInfo, valid_),
  PROTOBUF_FIELD_OFFSET(::Team::LeaderPosInfo, sceneid_),
  PROTOBUF_FIELD_OFFSET(::Team::LeaderPosInfo, pos_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeMapToLeader_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeMapToLeader_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeMapToLeader_CS, sceneid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqChangeMapToLeader_CS, leaderpos_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChangeMapToLeader_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChangeMapToLeader_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChangeMapToLeader_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetChangeMapToLeader_SC, info_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLeaderAttackTarget_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_ReqLeaderAttackTarget_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetLeaderAttackTarget_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetLeaderAttackTarget_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_RetLeaderAttackTarget_SC, target_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_notifyMemberLeaderIntoPublic_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_notifyMemberLeaderIntoPublic_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_notifyMemberOfflineHosting_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_notifyMemberOfflineHosting_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Req_SetMemberPrivilege_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Req_SetMemberPrivilege_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Req_SetMemberPrivilege_CS, memberid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Req_SetMemberPrivilege_CS, privilege_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Req_SetMemberPrivilege_CS, set_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberPrivilege_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberPrivilege_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberPrivilege_SC, memberid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberPrivilege_SC, privilege_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Req_checkUserTeamInfo_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Req_checkUserTeamInfo_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Req_checkUserTeamInfo_CS, memberid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Ret_checkUserTeamInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Ret_checkUserTeamInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Ret_checkUserTeamInfo_SC, memberid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Ret_checkUserTeamInfo_SC, teamid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Ret_checkUserTeamInfo_SC, online_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Req_DismissTeam_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_Req_DismissTeam_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_NotifyTeamDismiss_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_NotifyTeamDismiss_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_NotifyTeamDismiss_SC, suc_),
  0,
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberAvatar_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberAvatar_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberAvatar_SC, mememberid_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberAvatar_SC, hairstyle_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberAvatar_SC, haircolor_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberAvatar_SC, headstyle_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberAvatar_SC, bodystyle_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberAvatar_SC, antenna_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberAvatar_SC, coat_),
  PROTOBUF_FIELD_OFFSET(::Team::MSG_updateTeamMemberAvatar_SC, avatarid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::Team::MSG_CreateTeam_CS)},
  { 9, 34, sizeof(::Team::Memember)},
  { 54, 59, sizeof(::Team::MSG_TeamMemeberList_CS)},
  { 59, 74, sizeof(::Team::MSG_TeamMemeberList_SC)},
  { 84, 95, sizeof(::Team::OneTeam)},
  { 101, 106, sizeof(::Team::MSG_Team_List_CS)},
  { 106, 112, sizeof(::Team::MSG_Team_List_SC)},
  { 113, 119, sizeof(::Team::MSG_Join_Team_CS)},
  { 120, 126, sizeof(::Team::MSG_Join_Team_SC)},
  { 127, 134, sizeof(::Team::MSG_ReqJoinTeamNotifyLeader_SC)},
  { 136, 143, sizeof(::Team::MSG_AnswerJoinTeam_CS)},
  { 145, 153, sizeof(::Team::MSG_AnswerJoinTeam_SC)},
  { 156, 161, sizeof(::Team::MSG_ReqApplyList_CS)},
  { 161, 168, sizeof(::Team::MSG_ReqApplyList_SC)},
  { 170, 176, sizeof(::Team::MSG_ReqDelMemember_CS)},
  { 177, 185, sizeof(::Team::MSG_ReqDelMemember_SC)},
  { 188, 194, sizeof(::Team::MSG_ReqLanchVoteOut_CS)},
  { 195, 206, sizeof(::Team::MSG_ReqLanchVoteOut_SC)},
  { 212, 218, sizeof(::Team::MSG_ReqVote_CS)},
  { 219, 225, sizeof(::Team::MSG_ReqChangeLeader_CS)},
  { 226, 233, sizeof(::Team::MSG_ReqChangeLeader_SC)},
  { 235, 240, sizeof(::Team::MSG_ReqNearByUnteamedPlayer_CS)},
  { 240, 246, sizeof(::Team::MSG_ReqNearByUnteamedPlayer_SC)},
  { 247, 253, sizeof(::Team::MSG_InviteIntoTeam_CS)},
  { 254, 260, sizeof(::Team::MSG_InviteIntoTeam_SC)},
  { 261, 270, sizeof(::Team::MSG_AnswerInviteTeam_CS)},
  { 274, 280, sizeof(::Team::MSG_AddMemember_SC)},
  { 281, 286, sizeof(::Team::MSG_LeaderIgnoreNotice_CS)},
  { 286, 295, sizeof(::Team::MSG_updateTeamMememberHp_SC)},
  { 299, 307, sizeof(::Team::MSG_updateTeamMememberCareer_SC)},
  { 310, 317, sizeof(::Team::MSG_updateTeamMemeberHero_SC)},
  { 319, 327, sizeof(::Team::MSG_updateTeamMememberLevel_SC)},
  { 330, 338, sizeof(::Team::MSG_updateTeamMemberFight_SC)},
  { 341, 346, sizeof(::Team::MSG_ReqTeamMemberPos_CS)},
  { 346, 355, sizeof(::Team::MemberPos)},
  { 359, 365, sizeof(::Team::MSG_RetTeamMemberPos_SC)},
  { 366, 378, sizeof(::Team::MSG_RetNearByUnteamedInvite_SC)},
  { 385, 391, sizeof(::Team::MSG_RetNewApply_SC)},
  { 392, 402, sizeof(::Team::teamDropItem)},
  { 407, 413, sizeof(::Team::MSG_RetTeamPublicDrop_SC)},
  { 414, 422, sizeof(::Team::ChooseTeamDropItem)},
  { 425, 431, sizeof(::Team::MSG_ReqChooseTeamDrop_CS)},
  { 432, 438, sizeof(::Team::MSG_RetChooseTeamDrop_SC)},
  { 439, 447, sizeof(::Team::MSG_ReqSearchTeam_CS)},
  { 450, 457, sizeof(::Team::MSG_ReqSearchTeamByPage_CS)},
  { 459, 467, sizeof(::Team::MSG_RetSearchTeam_SC)},
  { 470, 476, sizeof(::Team::MSG_ReqChangeActivityTarget_CS)},
  { 477, 484, sizeof(::Team::MSG_RetChangeActivityTarget_SC)},
  { 486, 494, sizeof(::Team::MSG_ReqMatch_CS)},
  { 497, 505, sizeof(::Team::MSG_RetMatch_SC)},
  { 508, 513, sizeof(::Team::MSG_ReqUnmatch_CS)},
  { 513, 519, sizeof(::Team::MSG_RetUnmatch_SC)},
  { 520, 525, sizeof(::Team::MSG_RetNotifyMatchSuccess_SC)},
  { 525, 530, sizeof(::Team::MSG_ReqMemberBackTeam_CS)},
  { 530, 536, sizeof(::Team::MSG_RetMemberBackTeam_SC)},
  { 537, 545, sizeof(::Team::MSG_updateMemStateToTeam_SC)},
  { 548, 553, sizeof(::Team::MSG_ReqLeaderMapPos_CS)},
  { 553, 560, sizeof(::Team::MSG_RetLeaderMapPos_SC)},
  { 562, 570, sizeof(::Team::LeaderPosInfo)},
  { 573, 580, sizeof(::Team::MSG_ReqChangeMapToLeader_CS)},
  { 582, 589, sizeof(::Team::MSG_RetChangeMapToLeader_SC)},
  { 591, 596, sizeof(::Team::MSG_ReqLeaderAttackTarget_CS)},
  { 596, 602, sizeof(::Team::MSG_RetLeaderAttackTarget_SC)},
  { 603, 608, sizeof(::Team::MSG_notifyMemberLeaderIntoPublic_SC)},
  { 608, 613, sizeof(::Team::MSG_notifyMemberOfflineHosting_SC)},
  { 613, 621, sizeof(::Team::MSG_Req_SetMemberPrivilege_CS)},
  { 624, 631, sizeof(::Team::MSG_updateTeamMemberPrivilege_SC)},
  { 633, 639, sizeof(::Team::MSG_Req_checkUserTeamInfo_CS)},
  { 640, 648, sizeof(::Team::MSG_Ret_checkUserTeamInfo_SC)},
  { 651, 656, sizeof(::Team::MSG_Req_DismissTeam_CS)},
  { 656, 662, sizeof(::Team::MSG_NotifyTeamDismiss_SC)},
  { 663, 676, sizeof(::Team::MSG_updateTeamMemberAvatar_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_CreateTeam_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_Memember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_TeamMemeberList_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_TeamMemeberList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_OneTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_Team_List_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_Team_List_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_Join_Team_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_Join_Team_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqJoinTeamNotifyLeader_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_AnswerJoinTeam_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_AnswerJoinTeam_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqApplyList_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqApplyList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqDelMemember_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqDelMemember_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqLanchVoteOut_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqLanchVoteOut_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqVote_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqChangeLeader_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqChangeLeader_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqNearByUnteamedPlayer_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqNearByUnteamedPlayer_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_InviteIntoTeam_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_InviteIntoTeam_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_AnswerInviteTeam_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_AddMemember_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_LeaderIgnoreNotice_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_updateTeamMememberHp_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_updateTeamMememberCareer_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_updateTeamMemeberHero_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_updateTeamMememberLevel_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_updateTeamMemberFight_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqTeamMemberPos_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MemberPos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetTeamMemberPos_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetNearByUnteamedInvite_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetNewApply_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_teamDropItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetTeamPublicDrop_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_ChooseTeamDropItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqChooseTeamDrop_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetChooseTeamDrop_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqSearchTeam_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqSearchTeamByPage_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetSearchTeam_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqChangeActivityTarget_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetChangeActivityTarget_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqMatch_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetMatch_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqUnmatch_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetUnmatch_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetNotifyMatchSuccess_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqMemberBackTeam_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetMemberBackTeam_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_updateMemStateToTeam_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqLeaderMapPos_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetLeaderMapPos_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_LeaderPosInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqChangeMapToLeader_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetChangeMapToLeader_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_ReqLeaderAttackTarget_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_RetLeaderAttackTarget_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_notifyMemberLeaderIntoPublic_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_notifyMemberOfflineHosting_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_Req_SetMemberPrivilege_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_updateTeamMemberPrivilege_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_Req_checkUserTeamInfo_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_Ret_checkUserTeamInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_Req_DismissTeam_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_NotifyTeamDismiss_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Team::_MSG_updateTeamMemberAvatar_SC_default_instance_),
};

const char descriptor_table_protodef_team_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nteam.proto\022\004Team\032\016msg_enum.proto\"5\n\021MS"
  "G_CreateTeam_CS\022\014\n\004name\030\001 \002(\t\022\022\n\nactivit"
  "yid\030\002 \001(\r\"\361\002\n\010Memember\022\014\n\004mark\030\001 \001(\r\022\014\n\004"
  "name\030\002 \001(\t\022\022\n\noccupation\030\003 \001(\r\022\r\n\005level\030"
  "\004 \001(\r\022\r\n\005skill\030\005 \003(\r\022\022\n\nmememberid\030\006 \001(\t"
  "\022\n\n\002hp\030\007 \001(\r\022\r\n\005maxhp\030\010 \001(\r\022\027\n\017occupatio"
  "nlevel\030\t \001(\r\022\016\n\006heroid\030\n \001(\r\022\r\n\005fight\030\013 "
  "\001(\r\022\017\n\007sceneid\030\014 \001(\t\022\035\n\005state\030\r \001(\0162\016.Te"
  "am.MemState\022\021\n\tprivilege\030\016 \001(\r\022\021\n\thairst"
  "yle\030\017 \001(\r\022\021\n\thaircolor\030\020 \001(\r\022\021\n\theadstyl"
  "e\030\021 \001(\r\022\021\n\tbodystyle\030\022 \001(\r\022\017\n\007antenna\030\023 "
  "\001(\r\022\020\n\010avatarid\030\024 \001(\r\"\030\n\026MSG_TeamMemeber"
  "List_CS\"\357\001\n\026MSG_TeamMemeberList_SC\022\n\n\002id"
  "\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\020\n\010leaderid\030\003 \001(\t\022\033"
  "\n\003mem\030\004 \003(\0132\016.Team.Memember\022\036\n\004mode\030\005 \001("
  "\0162\020.Team.RewardMode\022$\n\010cap_type\030\006 \001(\0162\022."
  "Team.CapacityType\022\021\n\tmaxmember\030\007 \001(\r\022\014\n\004"
  "note\030\010 \001(\t\022\022\n\nactivityid\030\t \001(\r\022\021\n\tcurmem"
  "ber\030\n \001(\r\"q\n\007OneTeam\022\n\n\002id\030\001 \001(\r\022\014\n\004name"
  "\030\002 \001(\t\022\014\n\004size\030\003 \001(\r\022\020\n\010capacity\030\004 \001(\r\022\036"
  "\n\004mode\030\005 \001(\0162\020.Team.RewardMode\022\014\n\004note\030\006"
  " \001(\t\"\022\n\020MSG_Team_List_CS\"A\n\020MSG_Team_Lis"
  "t_SC\022-\n\007oneteam\030\001 \003(\0132\034.Team.MSG_TeamMem"
  "eberList_SC\"\"\n\020MSG_Join_Team_CS\022\016\n\006teami"
  "d\030\001 \002(\r\"#\n\020MSG_Join_Team_SC\022\017\n\007retcode\030\001"
  " \001(\r\"L\n\036MSG_ReqJoinTeamNotifyLeader_SC\022\023"
  "\n\013requesterid\030\001 \002(\t\022\025\n\rrequestername\030\002 \001"
  "(\t\"S\n\025MSG_AnswerJoinTeam_CS\022\023\n\013requester"
  "id\030\001 \002(\t\022%\n\013answer_type\030\002 \002(\0162\020.Team.Ans"
  "werType\"\177\n\025MSG_AnswerJoinTeam_SC\022\017\n\007errc"
  "ode\030\001 \001(\r\022%\n\013answer_type\030\002 \001(\0162\020.Team.An"
  "swerType\022.\n\010teaminfo\030\003 \001(\0132\034.Team.MSG_Te"
  "amMemeberList_SC\"\025\n\023MSG_ReqApplyList_CS\""
  "H\n\023MSG_ReqApplyList_SC\022\037\n\007applyer\030\001 \003(\0132"
  "\016.Team.Memember\022\020\n\010leaderid\030\002 \001(\t\"\'\n\025MSG"
  "_ReqDelMemember_CS\022\016\n\006charid\030\001 \002(\t\"U\n\025MS"
  "G_ReqDelMemember_SC\022\016\n\006charid\030\001 \002(\t\022\036\n\007o"
  "uttype\030\002 \002(\0162\r.Team.OutType\022\014\n\004name\030\003 \001("
  "\t\"\'\n\026MSG_ReqLanchVoteOut_CS\022\r\n\005outid\030\001 \002"
  "(\t\"\212\001\n\026MSG_ReqLanchVoteOut_SC\022\022\n\007errcode"
  "\030\001 \002(\r:\0010\022\021\n\tlancherid\030\002 \001(\t\022\023\n\013lanchern"
  "ame\030\003 \002(\t\022\017\n\007outerid\030\004 \001(\t\022\021\n\toutername\030"
  "\005 \002(\t\022\020\n\010duration\030\006 \002(\t\"(\n\016MSG_ReqVote_C"
  "S\022\026\n\007yesorno\030\001 \002(\010:\005false\"&\n\026MSG_ReqChan"
  "geLeader_CS\022\014\n\004toid\030\001 \002(\t\"8\n\026MSG_ReqChan"
  "geLeader_SC\022\r\n\005newid\030\001 \002(\t\022\017\n\007newname\030\002 "
  "\001(\t\" \n\036MSG_ReqNearByUnteamedPlayer_CS\"=\n"
  "\036MSG_ReqNearByUnteamedPlayer_SC\022\033\n\003mem\030\001"
  " \003(\0132\016.Team.Memember\"*\n\025MSG_InviteIntoTe"
  "am_CS\022\021\n\tinviteeid\030\001 \001(\t\"+\n\025MSG_InviteIn"
  "toTeam_SC\022\022\n\007errcode\030\001 \001(\r:\0010\"g\n\027MSG_Ans"
  "werInviteTeam_CS\022\026\n\007yesorno\030\001 \001(\010:\005false"
  "\022\021\n\tinviterid\030\002 \001(\t\022\021\n\tinviteeid\030\003 \001(\t\022\016"
  "\n\006teamid\030\004 \001(\r\"1\n\022MSG_AddMemember_SC\022\033\n\003"
  "mem\030\001 \001(\0132\016.Team.Memember\"\033\n\031MSG_LeaderI"
  "gnoreNotice_CS\"^\n\033MSG_updateTeamMemember"
  "Hp_SC\022\r\n\005memid\030\001 \001(\t\022\n\n\002hp\030\002 \001(\r\022\r\n\005maxh"
  "p\030\003 \001(\r\022\025\n\006isdead\030\004 \001(\010:\005false\"Z\n\037MSG_up"
  "dateTeamMememberCareer_SC\022\022\n\nmememberid\030"
  "\001 \001(\t\022\016\n\006career\030\002 \001(\r\022\023\n\013careerlevel\030\003 \001"
  "(\r\"=\n\034MSG_updateTeamMemeberHero_SC\022\r\n\005me"
  "mid\030\001 \001(\t\022\016\n\006heroid\030\002 \001(\r\"W\n\036MSG_updateT"
  "eamMememberLevel_SC\022\022\n\nmememberid\030\001 \001(\t\022"
  "\r\n\005level\030\002 \001(\r\022\022\n\nmembername\030\003 \001(\t\"Q\n\034MS"
  "G_updateTeamMemberFight_SC\022\022\n\nmememberid"
  "\030\001 \001(\t\022\r\n\005fight\030\002 \001(\r\022\016\n\006heroid\030\003 \001(\r\"\031\n"
  "\027MSG_ReqTeamMemberPos_CS\"D\n\tMemberPos\022\020\n"
  "\010memberid\030\001 \001(\t\022\017\n\007sceneid\030\002 \001(\t\022\t\n\001x\030\003 "
  "\001(\r\022\t\n\001y\030\004 \001(\r\";\n\027MSG_RetTeamMemberPos_S"
  "C\022 \n\007members\030\001 \003(\0132\017.Team.MemberPos\"\263\001\n\036"
  "MSG_RetNearByUnteamedInvite_SC\022\037\n\007invite"
  "r\030\001 \001(\0132\016.Team.Memember\022\023\n\013invitername\030\002"
  " \001(\t\022\021\n\tinviterid\030\003 \001(\t\022\023\n\013inviteename\030\004"
  " \001(\t\022\021\n\tinviteeid\030\005 \001(\t\022\020\n\010teamname\030\006 \001("
  "\t\022\016\n\006teamid\030\007 \001(\r\"#\n\022MSG_RetNewApply_SC\022"
  "\r\n\005count\030\001 \001(\r\"Y\n\014teamDropItem\022\016\n\006thisid"
  "\030\001 \001(\t\022\r\n\005objid\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\022\014\n\004bi"
  "nd\030\004 \001(\r\022\017\n\007duetime\030\005 \001(\r\"\?\n\030MSG_RetTeam"
  "PublicDrop_SC\022#\n\007oneitem\030\001 \003(\0132\022.Team.te"
  "amDropItem\"W\n\022ChooseTeamDropItem\022\016\n\006this"
  "id\030\001 \001(\t\022 \n\006choose\030\002 \001(\0162\020.Team.ChooseTy"
  "pe\022\017\n\007errcode\030\003 \001(\r\"B\n\030MSG_ReqChooseTeam"
  "Drop_CS\022&\n\004item\030\001 \003(\0132\030.Team.ChooseTeamD"
  "ropItem\"B\n\030MSG_RetChooseTeamDrop_SC\022&\n\004i"
  "tem\030\001 \003(\0132\030.Team.ChooseTeamDropItem\"J\n\024M"
  "SG_ReqSearchTeam_CS\022\016\n\006teamid\030\001 \001(\r\022\022\n\na"
  "ctivityid\030\002 \001(\r\022\016\n\006nearby\030\003 \001(\010\":\n\032MSG_R"
  "eqSearchTeamByPage_CS\022\014\n\004page\030\001 \001(\r\022\016\n\006n"
  "earby\030\002 \001(\010\"g\n\024MSG_RetSearchTeam_SC\022\021\n\tt"
  "otalpage\030\001 \001(\r\022\014\n\004page\030\002 \001(\r\022.\n\010teamlist"
  "\030\003 \003(\0132\034.Team.MSG_TeamMemeberList_SC\"4\n\036"
  "MSG_ReqChangeActivityTarget_CS\022\022\n\nactivi"
  "tyid\030\001 \001(\r\"E\n\036MSG_RetChangeActivityTarge"
  "t_SC\022\017\n\007retcode\030\001 \001(\r\022\022\n\nactivityid\030\002 \001("
  "\r\"I\n\017MSG_ReqMatch_CS\022\022\n\nactivityid\030\001 \001(\r"
  "\022\020\n\010minlevel\030\002 \001(\r\022\020\n\010maxlevel\030\003 \001(\r\"G\n\017"
  "MSG_RetMatch_SC\022\017\n\007retcode\030\001 \001(\r\022\020\n\010need"
  "time\030\002 \001(\r\022\021\n\tstarttime\030\003 \001(\r\"\023\n\021MSG_Req"
  "Unmatch_CS\"$\n\021MSG_RetUnmatch_SC\022\017\n\007retco"
  "de\030\001 \001(\r\"\036\n\034MSG_RetNotifyMatchSuccess_SC"
  "\"\032\n\030MSG_ReqMemberBackTeam_CS\"+\n\030MSG_RetM"
  "emberBackTeam_SC\022\017\n\007rettype\030\001 \001(\r\"\\\n\033MSG"
  "_updateMemStateToTeam_SC\022\r\n\005memid\030\001 \001(\t\022"
  "\017\n\007sceneid\030\002 \001(\t\022\035\n\005state\030\003 \001(\0162\016.Team.M"
  "emState\"\030\n\026MSG_ReqLeaderMapPos_CS\"K\n\026MSG"
  "_RetLeaderMapPos_SC\022\017\n\007retcode\030\001 \001(\r\022 \n\003"
  "pos\030\002 \001(\0132\023.Team.LeaderPosInfo\"T\n\rLeader"
  "PosInfo\022\024\n\005valid\030\001 \001(\010:\005false\022\017\n\007sceneid"
  "\030\002 \001(\t\022\034\n\003pos\030\003 \001(\0132\017.Team.MemberPos\"R\n\033"
  "MSG_ReqChangeMapToLeader_CS\022\017\n\007sceneid\030\001"
  " \001(\t\022\"\n\tleaderpos\030\002 \001(\0132\017.Team.MemberPos"
  "\"Q\n\033MSG_RetChangeMapToLeader_SC\022\017\n\007retco"
  "de\030\001 \001(\r\022!\n\004info\030\002 \001(\0132\023.Team.LeaderPosI"
  "nfo\"\036\n\034MSG_ReqLeaderAttackTarget_CS\"@\n\034M"
  "SG_RetLeaderAttackTarget_SC\022 \n\006target\030\001 "
  "\001(\0132\020.msg.EntryIDType\"%\n#MSG_notifyMembe"
  "rLeaderIntoPublic_SC\"#\n!MSG_notifyMember"
  "OfflineHosting_SC\"f\n\035MSG_Req_SetMemberPr"
  "ivilege_CS\022\020\n\010memberid\030\001 \001(\004\022&\n\tprivileg"
  "e\030\002 \001(\0162\023.Team.TeamPrivilege\022\013\n\003set\030\003 \001("
  "\010\"G\n MSG_updateTeamMemberPrivilege_SC\022\020\n"
  "\010memberid\030\001 \001(\004\022\021\n\tprivilege\030\002 \001(\r\"0\n\034MS"
  "G_Req_checkUserTeamInfo_CS\022\020\n\010memberid\030\001"
  " \001(\004\"P\n\034MSG_Ret_checkUserTeamInfo_SC\022\020\n\010"
  "memberid\030\001 \001(\004\022\016\n\006teamid\030\002 \001(\004\022\016\n\006online"
  "\030\003 \001(\010\"\030\n\026MSG_Req_DismissTeam_CS\"\'\n\030MSG_"
  "NotifyTeamDismiss_SC\022\013\n\003suc\030\001 \001(\010\"\260\001\n\035MS"
  "G_updateTeamMemberAvatar_SC\022\022\n\nmememberi"
  "d\030\001 \001(\t\022\021\n\thairstyle\030\002 \001(\r\022\021\n\thaircolor\030"
  "\003 \001(\r\022\021\n\theadstyle\030\004 \001(\r\022\021\n\tbodystyle\030\005 "
  "\001(\r\022\017\n\007antenna\030\006 \001(\r\022\014\n\004coat\030\007 \001(\r\022\020\n\010av"
  "atarid\030\010 \001(\r*4\n\014CapacityType\022\022\n\016Capacity"
  "_Small\020\001\022\020\n\014Capacity_Big\020\002*-\n\nRewardMode"
  "\022\r\n\tMode_Roll\020\001\022\020\n\014Mode_Dispath\020\002*B\n\007Out"
  "Type\022\020\n\014OutType_Quit\020\001\022\020\n\014OutType_Fire\020\002"
  "\022\023\n\017OutType_VoteOut\020\003*I\n\rTeamPrivilege\022\030"
  "\n\024TeamPrivilege_Invite\020\001\022\036\n\032TeamPrivileg"
  "e_RemoveMember\020\002*3\n\nAnswerType\022\022\n\016Answer"
  "Type_Yes\020\001\022\021\n\rAnswerType_No\020\002*N\n\nChooseT"
  "ype\022\023\n\017ChooseType_Need\020\001\022\024\n\020ChooseType_G"
  "reed\020\002\022\025\n\021ChooseType_Giveup\020\003*:\n\010MemStat"
  "e\022\n\n\006NORMAL\020\000\022\010\n\004AWAY\020\001\022\013\n\007OFFLINE\020\002\022\013\n\007"
  "HOSTING\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_team_2eproto_deps[1] = {
  &::descriptor_table_msg_5fenum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_team_2eproto_sccs[72] = {
  &scc_info_ChooseTeamDropItem_team_2eproto.base,
  &scc_info_LeaderPosInfo_team_2eproto.base,
  &scc_info_MSG_AddMemember_SC_team_2eproto.base,
  &scc_info_MSG_AnswerInviteTeam_CS_team_2eproto.base,
  &scc_info_MSG_AnswerJoinTeam_CS_team_2eproto.base,
  &scc_info_MSG_AnswerJoinTeam_SC_team_2eproto.base,
  &scc_info_MSG_CreateTeam_CS_team_2eproto.base,
  &scc_info_MSG_InviteIntoTeam_CS_team_2eproto.base,
  &scc_info_MSG_InviteIntoTeam_SC_team_2eproto.base,
  &scc_info_MSG_Join_Team_CS_team_2eproto.base,
  &scc_info_MSG_Join_Team_SC_team_2eproto.base,
  &scc_info_MSG_LeaderIgnoreNotice_CS_team_2eproto.base,
  &scc_info_MSG_NotifyTeamDismiss_SC_team_2eproto.base,
  &scc_info_MSG_ReqApplyList_CS_team_2eproto.base,
  &scc_info_MSG_ReqApplyList_SC_team_2eproto.base,
  &scc_info_MSG_ReqChangeActivityTarget_CS_team_2eproto.base,
  &scc_info_MSG_ReqChangeLeader_CS_team_2eproto.base,
  &scc_info_MSG_ReqChangeLeader_SC_team_2eproto.base,
  &scc_info_MSG_ReqChangeMapToLeader_CS_team_2eproto.base,
  &scc_info_MSG_ReqChooseTeamDrop_CS_team_2eproto.base,
  &scc_info_MSG_ReqDelMemember_CS_team_2eproto.base,
  &scc_info_MSG_ReqDelMemember_SC_team_2eproto.base,
  &scc_info_MSG_ReqJoinTeamNotifyLeader_SC_team_2eproto.base,
  &scc_info_MSG_ReqLanchVoteOut_CS_team_2eproto.base,
  &scc_info_MSG_ReqLanchVoteOut_SC_team_2eproto.base,
  &scc_info_MSG_ReqLeaderAttackTarget_CS_team_2eproto.base,
  &scc_info_MSG_ReqLeaderMapPos_CS_team_2eproto.base,
  &scc_info_MSG_ReqMatch_CS_team_2eproto.base,
  &scc_info_MSG_ReqMemberBackTeam_CS_team_2eproto.base,
  &scc_info_MSG_ReqNearByUnteamedPlayer_CS_team_2eproto.base,
  &scc_info_MSG_ReqNearByUnteamedPlayer_SC_team_2eproto.base,
  &scc_info_MSG_ReqSearchTeamByPage_CS_team_2eproto.base,
  &scc_info_MSG_ReqSearchTeam_CS_team_2eproto.base,
  &scc_info_MSG_ReqTeamMemberPos_CS_team_2eproto.base,
  &scc_info_MSG_ReqUnmatch_CS_team_2eproto.base,
  &scc_info_MSG_ReqVote_CS_team_2eproto.base,
  &scc_info_MSG_Req_DismissTeam_CS_team_2eproto.base,
  &scc_info_MSG_Req_SetMemberPrivilege_CS_team_2eproto.base,
  &scc_info_MSG_Req_checkUserTeamInfo_CS_team_2eproto.base,
  &scc_info_MSG_RetChangeActivityTarget_SC_team_2eproto.base,
  &scc_info_MSG_RetChangeMapToLeader_SC_team_2eproto.base,
  &scc_info_MSG_RetChooseTeamDrop_SC_team_2eproto.base,
  &scc_info_MSG_RetLeaderAttackTarget_SC_team_2eproto.base,
  &scc_info_MSG_RetLeaderMapPos_SC_team_2eproto.base,
  &scc_info_MSG_RetMatch_SC_team_2eproto.base,
  &scc_info_MSG_RetMemberBackTeam_SC_team_2eproto.base,
  &scc_info_MSG_RetNearByUnteamedInvite_SC_team_2eproto.base,
  &scc_info_MSG_RetNewApply_SC_team_2eproto.base,
  &scc_info_MSG_RetNotifyMatchSuccess_SC_team_2eproto.base,
  &scc_info_MSG_RetSearchTeam_SC_team_2eproto.base,
  &scc_info_MSG_RetTeamMemberPos_SC_team_2eproto.base,
  &scc_info_MSG_RetTeamPublicDrop_SC_team_2eproto.base,
  &scc_info_MSG_RetUnmatch_SC_team_2eproto.base,
  &scc_info_MSG_Ret_checkUserTeamInfo_SC_team_2eproto.base,
  &scc_info_MSG_TeamMemeberList_CS_team_2eproto.base,
  &scc_info_MSG_TeamMemeberList_SC_team_2eproto.base,
  &scc_info_MSG_Team_List_CS_team_2eproto.base,
  &scc_info_MSG_Team_List_SC_team_2eproto.base,
  &scc_info_MSG_notifyMemberLeaderIntoPublic_SC_team_2eproto.base,
  &scc_info_MSG_notifyMemberOfflineHosting_SC_team_2eproto.base,
  &scc_info_MSG_updateMemStateToTeam_SC_team_2eproto.base,
  &scc_info_MSG_updateTeamMemberAvatar_SC_team_2eproto.base,
  &scc_info_MSG_updateTeamMemberFight_SC_team_2eproto.base,
  &scc_info_MSG_updateTeamMemberPrivilege_SC_team_2eproto.base,
  &scc_info_MSG_updateTeamMemeberHero_SC_team_2eproto.base,
  &scc_info_MSG_updateTeamMememberCareer_SC_team_2eproto.base,
  &scc_info_MSG_updateTeamMememberHp_SC_team_2eproto.base,
  &scc_info_MSG_updateTeamMememberLevel_SC_team_2eproto.base,
  &scc_info_MemberPos_team_2eproto.base,
  &scc_info_Memember_team_2eproto.base,
  &scc_info_OneTeam_team_2eproto.base,
  &scc_info_teamDropItem_team_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_team_2eproto_once;
static bool descriptor_table_team_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_team_2eproto = {
  &descriptor_table_team_2eproto_initialized, descriptor_table_protodef_team_2eproto, "team.proto", 5689,
  &descriptor_table_team_2eproto_once, descriptor_table_team_2eproto_sccs, descriptor_table_team_2eproto_deps, 72, 1,
  schemas, file_default_instances, TableStruct_team_2eproto::offsets,
  file_level_metadata_team_2eproto, 72, file_level_enum_descriptors_team_2eproto, file_level_service_descriptors_team_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_team_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_team_2eproto)), true);
namespace Team {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CapacityType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_team_2eproto);
  return file_level_enum_descriptors_team_2eproto[0];
}
bool CapacityType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RewardMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_team_2eproto);
  return file_level_enum_descriptors_team_2eproto[1];
}
bool RewardMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_team_2eproto);
  return file_level_enum_descriptors_team_2eproto[2];
}
bool OutType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamPrivilege_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_team_2eproto);
  return file_level_enum_descriptors_team_2eproto[3];
}
bool TeamPrivilege_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnswerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_team_2eproto);
  return file_level_enum_descriptors_team_2eproto[4];
}
bool AnswerType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChooseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_team_2eproto);
  return file_level_enum_descriptors_team_2eproto[5];
}
bool ChooseType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MemState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_team_2eproto);
  return file_level_enum_descriptors_team_2eproto[6];
}
bool MemState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MSG_CreateTeam_CS::InitAsDefaultInstance() {
}
class MSG_CreateTeam_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_CreateTeam_CS>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activityid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_CreateTeam_CS::MSG_CreateTeam_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_CreateTeam_CS)
}
MSG_CreateTeam_CS::MSG_CreateTeam_CS(const MSG_CreateTeam_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  activityid_ = from.activityid_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_CreateTeam_CS)
}

void MSG_CreateTeam_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_CreateTeam_CS_team_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activityid_ = 0u;
}

MSG_CreateTeam_CS::~MSG_CreateTeam_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_CreateTeam_CS)
  SharedDtor();
}

void MSG_CreateTeam_CS::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_CreateTeam_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_CreateTeam_CS& MSG_CreateTeam_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_CreateTeam_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_CreateTeam_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_CreateTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  activityid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_CreateTeam_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_CreateTeam_CS.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 activityid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_activityid(&has_bits);
          activityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_CreateTeam_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_CreateTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_CreateTeam_CS.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 activityid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_activityid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_CreateTeam_CS)
  return target;
}

size_t MSG_CreateTeam_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_CreateTeam_CS)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 activityid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activityid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_CreateTeam_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_CreateTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_CreateTeam_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_CreateTeam_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_CreateTeam_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_CreateTeam_CS)
    MergeFrom(*source);
  }
}

void MSG_CreateTeam_CS::MergeFrom(const MSG_CreateTeam_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_CreateTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      activityid_ = from.activityid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_CreateTeam_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_CreateTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_CreateTeam_CS::CopyFrom(const MSG_CreateTeam_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_CreateTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_CreateTeam_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_CreateTeam_CS::InternalSwap(MSG_CreateTeam_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(activityid_, other->activityid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_CreateTeam_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Memember::InitAsDefaultInstance() {
}
class Memember::_Internal {
 public:
  using HasBits = decltype(std::declval<Memember>()._has_bits_);
  static void set_has_mark(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_occupation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mememberid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_occupationlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fight(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_sceneid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_privilege(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_hairstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_haircolor(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_headstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_bodystyle(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_avatarid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

Memember::Memember()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.Memember)
}
Memember::Memember(const Memember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      skill_(from.skill_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  mememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mememberid()) {
    mememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mememberid_);
  }
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sceneid()) {
    sceneid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  ::memcpy(&mark_, &from.mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatarid_) -
    reinterpret_cast<char*>(&mark_)) + sizeof(avatarid_));
  // @@protoc_insertion_point(copy_constructor:Team.Memember)
}

void Memember::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Memember_team_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarid_) -
      reinterpret_cast<char*>(&mark_)) + sizeof(avatarid_));
}

Memember::~Memember() {
  // @@protoc_insertion_point(destructor:Team.Memember)
  SharedDtor();
}

void Memember::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mememberid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sceneid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Memember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Memember& Memember::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Memember_team_2eproto.base);
  return *internal_default_instance();
}


void Memember::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.Memember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mememberid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      sceneid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&mark_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxhp_) -
        reinterpret_cast<char*>(&mark_)) + sizeof(maxhp_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&occupationlevel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&headstyle_) -
        reinterpret_cast<char*>(&occupationlevel_)) + sizeof(headstyle_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&bodystyle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avatarid_) -
        reinterpret_cast<char*>(&bodystyle_)) + sizeof(avatarid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Memember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mark = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mark(&has_bits);
          mark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.Memember.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 occupation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_occupation(&has_bits);
          occupation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 skill = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_skill(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_skill(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mememberid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mememberid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.Memember.mememberid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 occupationlevel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_occupationlevel(&has_bits);
          occupationlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fight = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_fight(&has_bits);
          fight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sceneid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_sceneid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.Memember.sceneid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Team.MemState state = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team::MemState_IsValid(val))) {
            _internal_set_state(static_cast<::Team::MemState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 privilege = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_privilege(&has_bits);
          privilege_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hairstyle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_hairstyle(&has_bits);
          hairstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 haircolor = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_haircolor(&has_bits);
          haircolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 headstyle = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_headstyle(&has_bits);
          headstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bodystyle = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_bodystyle(&has_bits);
          bodystyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 antenna = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_antenna(&has_bits);
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avatarid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_avatarid(&has_bits);
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Memember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.Memember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mark = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mark(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.Memember.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 occupation = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_occupation(), target);
  }

  // optional uint32 level = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // repeated uint32 skill = 5;
  for (int i = 0, n = this->_internal_skill_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_skill(i), target);
  }

  // optional string mememberid = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mememberid().data(), static_cast<int>(this->_internal_mememberid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.Memember.mememberid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mememberid(), target);
  }

  // optional uint32 hp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hp(), target);
  }

  // optional uint32 maxhp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_maxhp(), target);
  }

  // optional uint32 occupationlevel = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_occupationlevel(), target);
  }

  // optional uint32 heroid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_heroid(), target);
  }

  // optional uint32 fight = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_fight(), target);
  }

  // optional string sceneid = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sceneid().data(), static_cast<int>(this->_internal_sceneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.Memember.sceneid");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_sceneid(), target);
  }

  // optional .Team.MemState state = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_state(), target);
  }

  // optional uint32 privilege = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_privilege(), target);
  }

  // optional uint32 hairstyle = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_hairstyle(), target);
  }

  // optional uint32 haircolor = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_haircolor(), target);
  }

  // optional uint32 headstyle = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_headstyle(), target);
  }

  // optional uint32 bodystyle = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_bodystyle(), target);
  }

  // optional uint32 antenna = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_antenna(), target);
  }

  // optional uint32 avatarid = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_avatarid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.Memember)
  return target;
}

size_t Memember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.Memember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 skill = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->skill_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_skill_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string mememberid = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mememberid());
    }

    // optional string sceneid = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sceneid());
    }

    // optional uint32 mark = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mark());
    }

    // optional uint32 occupation = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_occupation());
    }

    // optional uint32 level = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 hp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hp());
    }

    // optional uint32 maxhp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhp());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 occupationlevel = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_occupationlevel());
    }

    // optional uint32 heroid = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 fight = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fight());
    }

    // optional .Team.MemState state = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 privilege = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_privilege());
    }

    // optional uint32 hairstyle = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hairstyle());
    }

    // optional uint32 haircolor = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_haircolor());
    }

    // optional uint32 headstyle = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_headstyle());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint32 bodystyle = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bodystyle());
    }

    // optional uint32 antenna = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_antenna());
    }

    // optional uint32 avatarid = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avatarid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Memember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.Memember)
  GOOGLE_DCHECK_NE(&from, this);
  const Memember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Memember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.Memember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.Memember)
    MergeFrom(*source);
  }
}

void Memember::MergeFrom(const Memember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.Memember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_.MergeFrom(from.skill_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mememberid_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      sceneid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
    }
    if (cached_has_bits & 0x00000008u) {
      mark_ = from.mark_;
    }
    if (cached_has_bits & 0x00000010u) {
      occupation_ = from.occupation_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000040u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000080u) {
      maxhp_ = from.maxhp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      occupationlevel_ = from.occupationlevel_;
    }
    if (cached_has_bits & 0x00000200u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000400u) {
      fight_ = from.fight_;
    }
    if (cached_has_bits & 0x00000800u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00001000u) {
      privilege_ = from.privilege_;
    }
    if (cached_has_bits & 0x00002000u) {
      hairstyle_ = from.hairstyle_;
    }
    if (cached_has_bits & 0x00004000u) {
      haircolor_ = from.haircolor_;
    }
    if (cached_has_bits & 0x00008000u) {
      headstyle_ = from.headstyle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      bodystyle_ = from.bodystyle_;
    }
    if (cached_has_bits & 0x00020000u) {
      antenna_ = from.antenna_;
    }
    if (cached_has_bits & 0x00040000u) {
      avatarid_ = from.avatarid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Memember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.Memember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memember::CopyFrom(const Memember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.Memember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memember::IsInitialized() const {
  return true;
}

void Memember::InternalSwap(Memember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  skill_.InternalSwap(&other->skill_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mememberid_.Swap(&other->mememberid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sceneid_.Swap(&other->sceneid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mark_, other->mark_);
  swap(occupation_, other->occupation_);
  swap(level_, other->level_);
  swap(hp_, other->hp_);
  swap(maxhp_, other->maxhp_);
  swap(occupationlevel_, other->occupationlevel_);
  swap(heroid_, other->heroid_);
  swap(fight_, other->fight_);
  swap(state_, other->state_);
  swap(privilege_, other->privilege_);
  swap(hairstyle_, other->hairstyle_);
  swap(haircolor_, other->haircolor_);
  swap(headstyle_, other->headstyle_);
  swap(bodystyle_, other->bodystyle_);
  swap(antenna_, other->antenna_);
  swap(avatarid_, other->avatarid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Memember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_TeamMemeberList_CS::InitAsDefaultInstance() {
}
class MSG_TeamMemeberList_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_TeamMemeberList_CS>()._has_bits_);
};

MSG_TeamMemeberList_CS::MSG_TeamMemeberList_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_TeamMemeberList_CS)
}
MSG_TeamMemeberList_CS::MSG_TeamMemeberList_CS(const MSG_TeamMemeberList_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_TeamMemeberList_CS)
}

void MSG_TeamMemeberList_CS::SharedCtor() {
}

MSG_TeamMemeberList_CS::~MSG_TeamMemeberList_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_TeamMemeberList_CS)
  SharedDtor();
}

void MSG_TeamMemeberList_CS::SharedDtor() {
}

void MSG_TeamMemeberList_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_TeamMemeberList_CS& MSG_TeamMemeberList_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_TeamMemeberList_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_TeamMemeberList_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_TeamMemeberList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_TeamMemeberList_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_TeamMemeberList_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_TeamMemeberList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_TeamMemeberList_CS)
  return target;
}

size_t MSG_TeamMemeberList_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_TeamMemeberList_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_TeamMemeberList_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_TeamMemeberList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_TeamMemeberList_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_TeamMemeberList_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_TeamMemeberList_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_TeamMemeberList_CS)
    MergeFrom(*source);
  }
}

void MSG_TeamMemeberList_CS::MergeFrom(const MSG_TeamMemeberList_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_TeamMemeberList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_TeamMemeberList_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_TeamMemeberList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_TeamMemeberList_CS::CopyFrom(const MSG_TeamMemeberList_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_TeamMemeberList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TeamMemeberList_CS::IsInitialized() const {
  return true;
}

void MSG_TeamMemeberList_CS::InternalSwap(MSG_TeamMemeberList_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TeamMemeberList_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_TeamMemeberList_SC::InitAsDefaultInstance() {
}
class MSG_TeamMemeberList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_TeamMemeberList_SC>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leaderid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cap_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_maxmember(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_activityid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_curmember(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

MSG_TeamMemeberList_SC::MSG_TeamMemeberList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_TeamMemeberList_SC)
}
MSG_TeamMemeberList_SC::MSG_TeamMemeberList_SC(const MSG_TeamMemeberList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mem_(from.mem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  leaderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_leaderid()) {
    leaderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leaderid_);
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_note()) {
    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cap_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cap_type_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_TeamMemeberList_SC)
}

void MSG_TeamMemeberList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_TeamMemeberList_SC_team_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leaderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curmember_) -
      reinterpret_cast<char*>(&id_)) + sizeof(curmember_));
  mode_ = 1;
  cap_type_ = 1;
}

MSG_TeamMemeberList_SC::~MSG_TeamMemeberList_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_TeamMemeberList_SC)
  SharedDtor();
}

void MSG_TeamMemeberList_SC::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leaderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_TeamMemeberList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_TeamMemeberList_SC& MSG_TeamMemeberList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_TeamMemeberList_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_TeamMemeberList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_TeamMemeberList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mem_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      leaderid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      note_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curmember_) -
        reinterpret_cast<char*>(&id_)) + sizeof(curmember_));
    mode_ = 1;
  }
  cap_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_TeamMemeberList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_TeamMemeberList_SC.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string leaderid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_leaderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_TeamMemeberList_SC.leaderid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Team.Memember mem = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Team.RewardMode mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team::RewardMode_IsValid(val))) {
            _internal_set_mode(static_cast<::Team::RewardMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Team.CapacityType cap_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team::CapacityType_IsValid(val))) {
            _internal_set_cap_type(static_cast<::Team::CapacityType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 maxmember = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_maxmember(&has_bits);
          maxmember_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string note = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_TeamMemeberList_SC.note");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 activityid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_activityid(&has_bits);
          activityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 curmember = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_curmember(&has_bits);
          curmember_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_TeamMemeberList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_TeamMemeberList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_TeamMemeberList_SC.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string leaderid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leaderid().data(), static_cast<int>(this->_internal_leaderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_TeamMemeberList_SC.leaderid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_leaderid(), target);
  }

  // repeated .Team.Memember mem = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mem_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_mem(i), target, stream);
  }

  // optional .Team.RewardMode mode = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mode(), target);
  }

  // optional .Team.CapacityType cap_type = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_cap_type(), target);
  }

  // optional uint32 maxmember = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_maxmember(), target);
  }

  // optional string note = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_TeamMemeberList_SC.note");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_note(), target);
  }

  // optional uint32 activityid = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_activityid(), target);
  }

  // optional uint32 curmember = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_curmember(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_TeamMemeberList_SC)
  return target;
}

size_t MSG_TeamMemeberList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_TeamMemeberList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Team.Memember mem = 4;
  total_size += 1UL * this->_internal_mem_size();
  for (const auto& msg : this->mem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string leaderid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leaderid());
    }

    // optional string note = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 maxmember = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxmember());
    }

    // optional uint32 activityid = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_activityid());
    }

    // optional uint32 curmember = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curmember());
    }

    // optional .Team.RewardMode mode = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  // optional .Team.CapacityType cap_type = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cap_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_TeamMemeberList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_TeamMemeberList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_TeamMemeberList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_TeamMemeberList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_TeamMemeberList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_TeamMemeberList_SC)
    MergeFrom(*source);
  }
}

void MSG_TeamMemeberList_SC::MergeFrom(const MSG_TeamMemeberList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_TeamMemeberList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mem_.MergeFrom(from.mem_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      leaderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leaderid_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxmember_ = from.maxmember_;
    }
    if (cached_has_bits & 0x00000020u) {
      activityid_ = from.activityid_;
    }
    if (cached_has_bits & 0x00000040u) {
      curmember_ = from.curmember_;
    }
    if (cached_has_bits & 0x00000080u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_cap_type(from._internal_cap_type());
  }
}

void MSG_TeamMemeberList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_TeamMemeberList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_TeamMemeberList_SC::CopyFrom(const MSG_TeamMemeberList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_TeamMemeberList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_TeamMemeberList_SC::IsInitialized() const {
  return true;
}

void MSG_TeamMemeberList_SC::InternalSwap(MSG_TeamMemeberList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mem_.InternalSwap(&other->mem_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  leaderid_.Swap(&other->leaderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(maxmember_, other->maxmember_);
  swap(activityid_, other->activityid_);
  swap(curmember_, other->curmember_);
  swap(mode_, other->mode_);
  swap(cap_type_, other->cap_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_TeamMemeberList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OneTeam::InitAsDefaultInstance() {
}
class OneTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<OneTeam>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_note(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OneTeam::OneTeam()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.OneTeam)
}
OneTeam::OneTeam(const OneTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_note()) {
    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:Team.OneTeam)
}

void OneTeam::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OneTeam_team_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacity_) -
      reinterpret_cast<char*>(&id_)) + sizeof(capacity_));
  mode_ = 1;
}

OneTeam::~OneTeam() {
  // @@protoc_insertion_point(destructor:Team.OneTeam)
  SharedDtor();
}

void OneTeam::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OneTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OneTeam& OneTeam::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OneTeam_team_2eproto.base);
  return *internal_default_instance();
}


void OneTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.OneTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      note_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&capacity_) -
        reinterpret_cast<char*>(&id_)) + sizeof(capacity_));
    mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OneTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.OneTeam.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 capacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_capacity(&has_bits);
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Team.RewardMode mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team::RewardMode_IsValid(val))) {
            _internal_set_mode(static_cast<::Team::RewardMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string note = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.OneTeam.note");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OneTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.OneTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.OneTeam.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 size = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_size(), target);
  }

  // optional uint32 capacity = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_capacity(), target);
  }

  // optional .Team.RewardMode mode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mode(), target);
  }

  // optional string note = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.OneTeam.note");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.OneTeam)
  return target;
}

size_t OneTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.OneTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string note = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 size = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_size());
    }

    // optional uint32 capacity = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_capacity());
    }

    // optional .Team.RewardMode mode = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.OneTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const OneTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OneTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.OneTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.OneTeam)
    MergeFrom(*source);
  }
}

void OneTeam::MergeFrom(const OneTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.OneTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      capacity_ = from.capacity_;
    }
    if (cached_has_bits & 0x00000020u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.OneTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneTeam::CopyFrom(const OneTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.OneTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneTeam::IsInitialized() const {
  return true;
}

void OneTeam::InternalSwap(OneTeam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(size_, other->size_);
  swap(capacity_, other->capacity_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OneTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Team_List_CS::InitAsDefaultInstance() {
}
class MSG_Team_List_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Team_List_CS>()._has_bits_);
};

MSG_Team_List_CS::MSG_Team_List_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_Team_List_CS)
}
MSG_Team_List_CS::MSG_Team_List_CS(const MSG_Team_List_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_Team_List_CS)
}

void MSG_Team_List_CS::SharedCtor() {
}

MSG_Team_List_CS::~MSG_Team_List_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_Team_List_CS)
  SharedDtor();
}

void MSG_Team_List_CS::SharedDtor() {
}

void MSG_Team_List_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Team_List_CS& MSG_Team_List_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Team_List_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_Team_List_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_Team_List_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Team_List_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Team_List_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_Team_List_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_Team_List_CS)
  return target;
}

size_t MSG_Team_List_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_Team_List_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Team_List_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_Team_List_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Team_List_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Team_List_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_Team_List_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_Team_List_CS)
    MergeFrom(*source);
  }
}

void MSG_Team_List_CS::MergeFrom(const MSG_Team_List_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_Team_List_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Team_List_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_Team_List_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Team_List_CS::CopyFrom(const MSG_Team_List_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_Team_List_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Team_List_CS::IsInitialized() const {
  return true;
}

void MSG_Team_List_CS::InternalSwap(MSG_Team_List_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Team_List_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Team_List_SC::InitAsDefaultInstance() {
}
class MSG_Team_List_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Team_List_SC>()._has_bits_);
};

MSG_Team_List_SC::MSG_Team_List_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_Team_List_SC)
}
MSG_Team_List_SC::MSG_Team_List_SC(const MSG_Team_List_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      oneteam_(from.oneteam_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_Team_List_SC)
}

void MSG_Team_List_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Team_List_SC_team_2eproto.base);
}

MSG_Team_List_SC::~MSG_Team_List_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_Team_List_SC)
  SharedDtor();
}

void MSG_Team_List_SC::SharedDtor() {
}

void MSG_Team_List_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Team_List_SC& MSG_Team_List_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Team_List_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_Team_List_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_Team_List_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oneteam_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Team_List_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Team.MSG_TeamMemeberList_SC oneteam = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_oneteam(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Team_List_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_Team_List_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Team.MSG_TeamMemeberList_SC oneteam = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_oneteam_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_oneteam(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_Team_List_SC)
  return target;
}

size_t MSG_Team_List_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_Team_List_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Team.MSG_TeamMemeberList_SC oneteam = 1;
  total_size += 1UL * this->_internal_oneteam_size();
  for (const auto& msg : this->oneteam_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Team_List_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_Team_List_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Team_List_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Team_List_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_Team_List_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_Team_List_SC)
    MergeFrom(*source);
  }
}

void MSG_Team_List_SC::MergeFrom(const MSG_Team_List_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_Team_List_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oneteam_.MergeFrom(from.oneteam_);
}

void MSG_Team_List_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_Team_List_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Team_List_SC::CopyFrom(const MSG_Team_List_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_Team_List_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Team_List_SC::IsInitialized() const {
  return true;
}

void MSG_Team_List_SC::InternalSwap(MSG_Team_List_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  oneteam_.InternalSwap(&other->oneteam_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Team_List_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Join_Team_CS::InitAsDefaultInstance() {
}
class MSG_Join_Team_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Join_Team_CS>()._has_bits_);
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Join_Team_CS::MSG_Join_Team_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_Join_Team_CS)
}
MSG_Join_Team_CS::MSG_Join_Team_CS(const MSG_Join_Team_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teamid_ = from.teamid_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_Join_Team_CS)
}

void MSG_Join_Team_CS::SharedCtor() {
  teamid_ = 0u;
}

MSG_Join_Team_CS::~MSG_Join_Team_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_Join_Team_CS)
  SharedDtor();
}

void MSG_Join_Team_CS::SharedDtor() {
}

void MSG_Join_Team_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Join_Team_CS& MSG_Join_Team_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Join_Team_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_Join_Team_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_Join_Team_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teamid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Join_Team_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 teamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Join_Team_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_Join_Team_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 teamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_Join_Team_CS)
  return target;
}

size_t MSG_Join_Team_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_Join_Team_CS)
  size_t total_size = 0;

  // required uint32 teamid = 1;
  if (_internal_has_teamid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teamid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Join_Team_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_Join_Team_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Join_Team_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Join_Team_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_Join_Team_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_Join_Team_CS)
    MergeFrom(*source);
  }
}

void MSG_Join_Team_CS::MergeFrom(const MSG_Join_Team_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_Join_Team_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_teamid()) {
    _internal_set_teamid(from._internal_teamid());
  }
}

void MSG_Join_Team_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_Join_Team_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Join_Team_CS::CopyFrom(const MSG_Join_Team_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_Join_Team_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Join_Team_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_Join_Team_CS::InternalSwap(MSG_Join_Team_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(teamid_, other->teamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Join_Team_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Join_Team_SC::InitAsDefaultInstance() {
}
class MSG_Join_Team_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Join_Team_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Join_Team_SC::MSG_Join_Team_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_Join_Team_SC)
}
MSG_Join_Team_SC::MSG_Join_Team_SC(const MSG_Join_Team_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_Join_Team_SC)
}

void MSG_Join_Team_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_Join_Team_SC::~MSG_Join_Team_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_Join_Team_SC)
  SharedDtor();
}

void MSG_Join_Team_SC::SharedDtor() {
}

void MSG_Join_Team_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Join_Team_SC& MSG_Join_Team_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Join_Team_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_Join_Team_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_Join_Team_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Join_Team_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Join_Team_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_Join_Team_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_Join_Team_SC)
  return target;
}

size_t MSG_Join_Team_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_Join_Team_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Join_Team_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_Join_Team_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Join_Team_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Join_Team_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_Join_Team_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_Join_Team_SC)
    MergeFrom(*source);
  }
}

void MSG_Join_Team_SC::MergeFrom(const MSG_Join_Team_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_Join_Team_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_Join_Team_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_Join_Team_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Join_Team_SC::CopyFrom(const MSG_Join_Team_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_Join_Team_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Join_Team_SC::IsInitialized() const {
  return true;
}

void MSG_Join_Team_SC::InternalSwap(MSG_Join_Team_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Join_Team_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqJoinTeamNotifyLeader_SC::InitAsDefaultInstance() {
}
class MSG_ReqJoinTeamNotifyLeader_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqJoinTeamNotifyLeader_SC>()._has_bits_);
  static void set_has_requesterid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requestername(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqJoinTeamNotifyLeader_SC::MSG_ReqJoinTeamNotifyLeader_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqJoinTeamNotifyLeader_SC)
}
MSG_ReqJoinTeamNotifyLeader_SC::MSG_ReqJoinTeamNotifyLeader_SC(const MSG_ReqJoinTeamNotifyLeader_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requesterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesterid()) {
    requesterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requesterid_);
  }
  requestername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requestername()) {
    requestername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requestername_);
  }
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqJoinTeamNotifyLeader_SC)
}

void MSG_ReqJoinTeamNotifyLeader_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqJoinTeamNotifyLeader_SC_team_2eproto.base);
  requesterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqJoinTeamNotifyLeader_SC::~MSG_ReqJoinTeamNotifyLeader_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqJoinTeamNotifyLeader_SC)
  SharedDtor();
}

void MSG_ReqJoinTeamNotifyLeader_SC::SharedDtor() {
  requesterid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  requestername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqJoinTeamNotifyLeader_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqJoinTeamNotifyLeader_SC& MSG_ReqJoinTeamNotifyLeader_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqJoinTeamNotifyLeader_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqJoinTeamNotifyLeader_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqJoinTeamNotifyLeader_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requesterid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      requestername_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqJoinTeamNotifyLeader_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string requesterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_requesterid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqJoinTeamNotifyLeader_SC.requesterid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string requestername = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_requestername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqJoinTeamNotifyLeader_SC.requestername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqJoinTeamNotifyLeader_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqJoinTeamNotifyLeader_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string requesterid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesterid().data(), static_cast<int>(this->_internal_requesterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqJoinTeamNotifyLeader_SC.requesterid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requesterid(), target);
  }

  // optional string requestername = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requestername().data(), static_cast<int>(this->_internal_requestername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqJoinTeamNotifyLeader_SC.requestername");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_requestername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqJoinTeamNotifyLeader_SC)
  return target;
}

size_t MSG_ReqJoinTeamNotifyLeader_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqJoinTeamNotifyLeader_SC)
  size_t total_size = 0;

  // required string requesterid = 1;
  if (_internal_has_requesterid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesterid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string requestername = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requestername());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqJoinTeamNotifyLeader_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqJoinTeamNotifyLeader_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqJoinTeamNotifyLeader_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqJoinTeamNotifyLeader_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqJoinTeamNotifyLeader_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqJoinTeamNotifyLeader_SC)
    MergeFrom(*source);
  }
}

void MSG_ReqJoinTeamNotifyLeader_SC::MergeFrom(const MSG_ReqJoinTeamNotifyLeader_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqJoinTeamNotifyLeader_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      requesterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requesterid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      requestername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requestername_);
    }
  }
}

void MSG_ReqJoinTeamNotifyLeader_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqJoinTeamNotifyLeader_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqJoinTeamNotifyLeader_SC::CopyFrom(const MSG_ReqJoinTeamNotifyLeader_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqJoinTeamNotifyLeader_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqJoinTeamNotifyLeader_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_ReqJoinTeamNotifyLeader_SC::InternalSwap(MSG_ReqJoinTeamNotifyLeader_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  requesterid_.Swap(&other->requesterid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  requestername_.Swap(&other->requestername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqJoinTeamNotifyLeader_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_AnswerJoinTeam_CS::InitAsDefaultInstance() {
}
class MSG_AnswerJoinTeam_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_AnswerJoinTeam_CS>()._has_bits_);
  static void set_has_requesterid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_answer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_AnswerJoinTeam_CS::MSG_AnswerJoinTeam_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_AnswerJoinTeam_CS)
}
MSG_AnswerJoinTeam_CS::MSG_AnswerJoinTeam_CS(const MSG_AnswerJoinTeam_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requesterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_requesterid()) {
    requesterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requesterid_);
  }
  answer_type_ = from.answer_type_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_AnswerJoinTeam_CS)
}

void MSG_AnswerJoinTeam_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_AnswerJoinTeam_CS_team_2eproto.base);
  requesterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  answer_type_ = 1;
}

MSG_AnswerJoinTeam_CS::~MSG_AnswerJoinTeam_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_AnswerJoinTeam_CS)
  SharedDtor();
}

void MSG_AnswerJoinTeam_CS::SharedDtor() {
  requesterid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_AnswerJoinTeam_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_AnswerJoinTeam_CS& MSG_AnswerJoinTeam_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_AnswerJoinTeam_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_AnswerJoinTeam_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_AnswerJoinTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      requesterid_.ClearNonDefaultToEmptyNoArena();
    }
    answer_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_AnswerJoinTeam_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string requesterid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_requesterid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_AnswerJoinTeam_CS.requesterid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Team.AnswerType answer_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team::AnswerType_IsValid(val))) {
            _internal_set_answer_type(static_cast<::Team::AnswerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_AnswerJoinTeam_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_AnswerJoinTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string requesterid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_requesterid().data(), static_cast<int>(this->_internal_requesterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_AnswerJoinTeam_CS.requesterid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requesterid(), target);
  }

  // required .Team.AnswerType answer_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_answer_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_AnswerJoinTeam_CS)
  return target;
}

size_t MSG_AnswerJoinTeam_CS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Team.MSG_AnswerJoinTeam_CS)
  size_t total_size = 0;

  if (_internal_has_requesterid()) {
    // required string requesterid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesterid());
  }

  if (_internal_has_answer_type()) {
    // required .Team.AnswerType answer_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_answer_type());
  }

  return total_size;
}
size_t MSG_AnswerJoinTeam_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_AnswerJoinTeam_CS)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string requesterid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesterid());

    // required .Team.AnswerType answer_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_answer_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_AnswerJoinTeam_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_AnswerJoinTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_AnswerJoinTeam_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_AnswerJoinTeam_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_AnswerJoinTeam_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_AnswerJoinTeam_CS)
    MergeFrom(*source);
  }
}

void MSG_AnswerJoinTeam_CS::MergeFrom(const MSG_AnswerJoinTeam_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_AnswerJoinTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      requesterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.requesterid_);
    }
    if (cached_has_bits & 0x00000002u) {
      answer_type_ = from.answer_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_AnswerJoinTeam_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_AnswerJoinTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_AnswerJoinTeam_CS::CopyFrom(const MSG_AnswerJoinTeam_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_AnswerJoinTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_AnswerJoinTeam_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MSG_AnswerJoinTeam_CS::InternalSwap(MSG_AnswerJoinTeam_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  requesterid_.Swap(&other->requesterid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(answer_type_, other->answer_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_AnswerJoinTeam_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_AnswerJoinTeam_SC::InitAsDefaultInstance() {
  ::Team::_MSG_AnswerJoinTeam_SC_default_instance_._instance.get_mutable()->teaminfo_ = const_cast< ::Team::MSG_TeamMemeberList_SC*>(
      ::Team::MSG_TeamMemeberList_SC::internal_default_instance());
}
class MSG_AnswerJoinTeam_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_AnswerJoinTeam_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_answer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Team::MSG_TeamMemeberList_SC& teaminfo(const MSG_AnswerJoinTeam_SC* msg);
  static void set_has_teaminfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Team::MSG_TeamMemeberList_SC&
MSG_AnswerJoinTeam_SC::_Internal::teaminfo(const MSG_AnswerJoinTeam_SC* msg) {
  return *msg->teaminfo_;
}
MSG_AnswerJoinTeam_SC::MSG_AnswerJoinTeam_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_AnswerJoinTeam_SC)
}
MSG_AnswerJoinTeam_SC::MSG_AnswerJoinTeam_SC(const MSG_AnswerJoinTeam_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_teaminfo()) {
    teaminfo_ = new ::Team::MSG_TeamMemeberList_SC(*from.teaminfo_);
  } else {
    teaminfo_ = nullptr;
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&answer_type_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(answer_type_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_AnswerJoinTeam_SC)
}

void MSG_AnswerJoinTeam_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_AnswerJoinTeam_SC_team_2eproto.base);
  ::memset(&teaminfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&teaminfo_)) + sizeof(errcode_));
  answer_type_ = 1;
}

MSG_AnswerJoinTeam_SC::~MSG_AnswerJoinTeam_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_AnswerJoinTeam_SC)
  SharedDtor();
}

void MSG_AnswerJoinTeam_SC::SharedDtor() {
  if (this != internal_default_instance()) delete teaminfo_;
}

void MSG_AnswerJoinTeam_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_AnswerJoinTeam_SC& MSG_AnswerJoinTeam_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_AnswerJoinTeam_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_AnswerJoinTeam_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_AnswerJoinTeam_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(teaminfo_ != nullptr);
    teaminfo_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    errcode_ = 0u;
    answer_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_AnswerJoinTeam_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Team.AnswerType answer_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team::AnswerType_IsValid(val))) {
            _internal_set_answer_type(static_cast<::Team::AnswerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Team.MSG_TeamMemeberList_SC teaminfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_teaminfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_AnswerJoinTeam_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_AnswerJoinTeam_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // optional .Team.AnswerType answer_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_answer_type(), target);
  }

  // optional .Team.MSG_TeamMemeberList_SC teaminfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::teaminfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_AnswerJoinTeam_SC)
  return target;
}

size_t MSG_AnswerJoinTeam_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_AnswerJoinTeam_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Team.MSG_TeamMemeberList_SC teaminfo = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *teaminfo_);
    }

    // optional uint32 errcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errcode());
    }

    // optional .Team.AnswerType answer_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_answer_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_AnswerJoinTeam_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_AnswerJoinTeam_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_AnswerJoinTeam_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_AnswerJoinTeam_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_AnswerJoinTeam_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_AnswerJoinTeam_SC)
    MergeFrom(*source);
  }
}

void MSG_AnswerJoinTeam_SC::MergeFrom(const MSG_AnswerJoinTeam_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_AnswerJoinTeam_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_teaminfo()->::Team::MSG_TeamMemeberList_SC::MergeFrom(from._internal_teaminfo());
    }
    if (cached_has_bits & 0x00000002u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      answer_type_ = from.answer_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_AnswerJoinTeam_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_AnswerJoinTeam_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_AnswerJoinTeam_SC::CopyFrom(const MSG_AnswerJoinTeam_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_AnswerJoinTeam_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_AnswerJoinTeam_SC::IsInitialized() const {
  return true;
}

void MSG_AnswerJoinTeam_SC::InternalSwap(MSG_AnswerJoinTeam_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(teaminfo_, other->teaminfo_);
  swap(errcode_, other->errcode_);
  swap(answer_type_, other->answer_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_AnswerJoinTeam_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqApplyList_CS::InitAsDefaultInstance() {
}
class MSG_ReqApplyList_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqApplyList_CS>()._has_bits_);
};

MSG_ReqApplyList_CS::MSG_ReqApplyList_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqApplyList_CS)
}
MSG_ReqApplyList_CS::MSG_ReqApplyList_CS(const MSG_ReqApplyList_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqApplyList_CS)
}

void MSG_ReqApplyList_CS::SharedCtor() {
}

MSG_ReqApplyList_CS::~MSG_ReqApplyList_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqApplyList_CS)
  SharedDtor();
}

void MSG_ReqApplyList_CS::SharedDtor() {
}

void MSG_ReqApplyList_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqApplyList_CS& MSG_ReqApplyList_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqApplyList_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqApplyList_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqApplyList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqApplyList_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqApplyList_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqApplyList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqApplyList_CS)
  return target;
}

size_t MSG_ReqApplyList_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqApplyList_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqApplyList_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqApplyList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqApplyList_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqApplyList_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqApplyList_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqApplyList_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqApplyList_CS::MergeFrom(const MSG_ReqApplyList_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqApplyList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqApplyList_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqApplyList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqApplyList_CS::CopyFrom(const MSG_ReqApplyList_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqApplyList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqApplyList_CS::IsInitialized() const {
  return true;
}

void MSG_ReqApplyList_CS::InternalSwap(MSG_ReqApplyList_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqApplyList_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqApplyList_SC::InitAsDefaultInstance() {
}
class MSG_ReqApplyList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqApplyList_SC>()._has_bits_);
  static void set_has_leaderid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqApplyList_SC::MSG_ReqApplyList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqApplyList_SC)
}
MSG_ReqApplyList_SC::MSG_ReqApplyList_SC(const MSG_ReqApplyList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      applyer_(from.applyer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_leaderid()) {
    leaderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leaderid_);
  }
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqApplyList_SC)
}

void MSG_ReqApplyList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqApplyList_SC_team_2eproto.base);
  leaderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqApplyList_SC::~MSG_ReqApplyList_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqApplyList_SC)
  SharedDtor();
}

void MSG_ReqApplyList_SC::SharedDtor() {
  leaderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqApplyList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqApplyList_SC& MSG_ReqApplyList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqApplyList_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqApplyList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqApplyList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  applyer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    leaderid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqApplyList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Team.Memember applyer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_applyer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string leaderid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_leaderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqApplyList_SC.leaderid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqApplyList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqApplyList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Team.Memember applyer = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_applyer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_applyer(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string leaderid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leaderid().data(), static_cast<int>(this->_internal_leaderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqApplyList_SC.leaderid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_leaderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqApplyList_SC)
  return target;
}

size_t MSG_ReqApplyList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqApplyList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Team.Memember applyer = 1;
  total_size += 1UL * this->_internal_applyer_size();
  for (const auto& msg : this->applyer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string leaderid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_leaderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqApplyList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqApplyList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqApplyList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqApplyList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqApplyList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqApplyList_SC)
    MergeFrom(*source);
  }
}

void MSG_ReqApplyList_SC::MergeFrom(const MSG_ReqApplyList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqApplyList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  applyer_.MergeFrom(from.applyer_);
  if (from._internal_has_leaderid()) {
    _has_bits_[0] |= 0x00000001u;
    leaderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leaderid_);
  }
}

void MSG_ReqApplyList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqApplyList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqApplyList_SC::CopyFrom(const MSG_ReqApplyList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqApplyList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqApplyList_SC::IsInitialized() const {
  return true;
}

void MSG_ReqApplyList_SC::InternalSwap(MSG_ReqApplyList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  applyer_.InternalSwap(&other->applyer_);
  leaderid_.Swap(&other->leaderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqApplyList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqDelMemember_CS::InitAsDefaultInstance() {
}
class MSG_ReqDelMemember_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqDelMemember_CS>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqDelMemember_CS::MSG_ReqDelMemember_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqDelMemember_CS)
}
MSG_ReqDelMemember_CS::MSG_ReqDelMemember_CS(const MSG_ReqDelMemember_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_charid()) {
    charid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charid_);
  }
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqDelMemember_CS)
}

void MSG_ReqDelMemember_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqDelMemember_CS_team_2eproto.base);
  charid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqDelMemember_CS::~MSG_ReqDelMemember_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqDelMemember_CS)
  SharedDtor();
}

void MSG_ReqDelMemember_CS::SharedDtor() {
  charid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqDelMemember_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqDelMemember_CS& MSG_ReqDelMemember_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqDelMemember_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqDelMemember_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqDelMemember_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    charid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqDelMemember_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_charid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqDelMemember_CS.charid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqDelMemember_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqDelMemember_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string charid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_charid().data(), static_cast<int>(this->_internal_charid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqDelMemember_CS.charid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_charid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqDelMemember_CS)
  return target;
}

size_t MSG_ReqDelMemember_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqDelMemember_CS)
  size_t total_size = 0;

  // required string charid = 1;
  if (_internal_has_charid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_charid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqDelMemember_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqDelMemember_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqDelMemember_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqDelMemember_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqDelMemember_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqDelMemember_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqDelMemember_CS::MergeFrom(const MSG_ReqDelMemember_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqDelMemember_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charid()) {
    _has_bits_[0] |= 0x00000001u;
    charid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charid_);
  }
}

void MSG_ReqDelMemember_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqDelMemember_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqDelMemember_CS::CopyFrom(const MSG_ReqDelMemember_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqDelMemember_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqDelMemember_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_ReqDelMemember_CS::InternalSwap(MSG_ReqDelMemember_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  charid_.Swap(&other->charid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqDelMemember_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqDelMemember_SC::InitAsDefaultInstance() {
}
class MSG_ReqDelMemember_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqDelMemember_SC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_outtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqDelMemember_SC::MSG_ReqDelMemember_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqDelMemember_SC)
}
MSG_ReqDelMemember_SC::MSG_ReqDelMemember_SC(const MSG_ReqDelMemember_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_charid()) {
    charid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charid_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  outtype_ = from.outtype_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqDelMemember_SC)
}

void MSG_ReqDelMemember_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqDelMemember_SC_team_2eproto.base);
  charid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outtype_ = 1;
}

MSG_ReqDelMemember_SC::~MSG_ReqDelMemember_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqDelMemember_SC)
  SharedDtor();
}

void MSG_ReqDelMemember_SC::SharedDtor() {
  charid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqDelMemember_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqDelMemember_SC& MSG_ReqDelMemember_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqDelMemember_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqDelMemember_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqDelMemember_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      charid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    outtype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqDelMemember_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_charid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqDelMemember_SC.charid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .Team.OutType outtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team::OutType_IsValid(val))) {
            _internal_set_outtype(static_cast<::Team::OutType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqDelMemember_SC.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqDelMemember_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqDelMemember_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string charid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_charid().data(), static_cast<int>(this->_internal_charid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqDelMemember_SC.charid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_charid(), target);
  }

  // required .Team.OutType outtype = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_outtype(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqDelMemember_SC.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqDelMemember_SC)
  return target;
}

size_t MSG_ReqDelMemember_SC::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Team.MSG_ReqDelMemember_SC)
  size_t total_size = 0;

  if (_internal_has_charid()) {
    // required string charid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_charid());
  }

  if (_internal_has_outtype()) {
    // required .Team.OutType outtype = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_outtype());
  }

  return total_size;
}
size_t MSG_ReqDelMemember_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqDelMemember_SC)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string charid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_charid());

    // required .Team.OutType outtype = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_outtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqDelMemember_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqDelMemember_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqDelMemember_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqDelMemember_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqDelMemember_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqDelMemember_SC)
    MergeFrom(*source);
  }
}

void MSG_ReqDelMemember_SC::MergeFrom(const MSG_ReqDelMemember_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqDelMemember_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      charid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.charid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      outtype_ = from.outtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqDelMemember_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqDelMemember_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqDelMemember_SC::CopyFrom(const MSG_ReqDelMemember_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqDelMemember_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqDelMemember_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void MSG_ReqDelMemember_SC::InternalSwap(MSG_ReqDelMemember_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  charid_.Swap(&other->charid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(outtype_, other->outtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqDelMemember_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqLanchVoteOut_CS::InitAsDefaultInstance() {
}
class MSG_ReqLanchVoteOut_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqLanchVoteOut_CS>()._has_bits_);
  static void set_has_outid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqLanchVoteOut_CS::MSG_ReqLanchVoteOut_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqLanchVoteOut_CS)
}
MSG_ReqLanchVoteOut_CS::MSG_ReqLanchVoteOut_CS(const MSG_ReqLanchVoteOut_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  outid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_outid()) {
    outid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outid_);
  }
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqLanchVoteOut_CS)
}

void MSG_ReqLanchVoteOut_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqLanchVoteOut_CS_team_2eproto.base);
  outid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqLanchVoteOut_CS::~MSG_ReqLanchVoteOut_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqLanchVoteOut_CS)
  SharedDtor();
}

void MSG_ReqLanchVoteOut_CS::SharedDtor() {
  outid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqLanchVoteOut_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqLanchVoteOut_CS& MSG_ReqLanchVoteOut_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqLanchVoteOut_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqLanchVoteOut_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqLanchVoteOut_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    outid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqLanchVoteOut_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string outid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_outid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqLanchVoteOut_CS.outid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqLanchVoteOut_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqLanchVoteOut_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string outid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_outid().data(), static_cast<int>(this->_internal_outid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqLanchVoteOut_CS.outid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_outid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqLanchVoteOut_CS)
  return target;
}

size_t MSG_ReqLanchVoteOut_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqLanchVoteOut_CS)
  size_t total_size = 0;

  // required string outid = 1;
  if (_internal_has_outid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqLanchVoteOut_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqLanchVoteOut_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqLanchVoteOut_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqLanchVoteOut_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqLanchVoteOut_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqLanchVoteOut_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqLanchVoteOut_CS::MergeFrom(const MSG_ReqLanchVoteOut_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqLanchVoteOut_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_outid()) {
    _has_bits_[0] |= 0x00000001u;
    outid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outid_);
  }
}

void MSG_ReqLanchVoteOut_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqLanchVoteOut_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqLanchVoteOut_CS::CopyFrom(const MSG_ReqLanchVoteOut_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqLanchVoteOut_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqLanchVoteOut_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_ReqLanchVoteOut_CS::InternalSwap(MSG_ReqLanchVoteOut_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  outid_.Swap(&other->outid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqLanchVoteOut_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqLanchVoteOut_SC::InitAsDefaultInstance() {
}
class MSG_ReqLanchVoteOut_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqLanchVoteOut_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lancherid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lanchername(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_outerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_outername(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_ReqLanchVoteOut_SC::MSG_ReqLanchVoteOut_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqLanchVoteOut_SC)
}
MSG_ReqLanchVoteOut_SC::MSG_ReqLanchVoteOut_SC(const MSG_ReqLanchVoteOut_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lancherid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lancherid()) {
    lancherid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lancherid_);
  }
  lanchername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lanchername()) {
    lanchername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lanchername_);
  }
  outerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_outerid()) {
    outerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outerid_);
  }
  outername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_outername()) {
    outername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outername_);
  }
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_duration()) {
    duration_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.duration_);
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqLanchVoteOut_SC)
}

void MSG_ReqLanchVoteOut_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqLanchVoteOut_SC_team_2eproto.base);
  lancherid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lanchername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outerid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0u;
}

MSG_ReqLanchVoteOut_SC::~MSG_ReqLanchVoteOut_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqLanchVoteOut_SC)
  SharedDtor();
}

void MSG_ReqLanchVoteOut_SC::SharedDtor() {
  lancherid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lanchername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outerid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqLanchVoteOut_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqLanchVoteOut_SC& MSG_ReqLanchVoteOut_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqLanchVoteOut_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqLanchVoteOut_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqLanchVoteOut_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      lancherid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      lanchername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      outerid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      outername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      duration_.ClearNonDefaultToEmptyNoArena();
    }
  }
  errcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqLanchVoteOut_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 errcode = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lancherid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lancherid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqLanchVoteOut_SC.lancherid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string lanchername = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_lanchername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqLanchVoteOut_SC.lanchername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string outerid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_outerid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqLanchVoteOut_SC.outerid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string outername = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_outername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqLanchVoteOut_SC.outername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_duration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqLanchVoteOut_SC.duration");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqLanchVoteOut_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqLanchVoteOut_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 errcode = 1 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // optional string lancherid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lancherid().data(), static_cast<int>(this->_internal_lancherid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqLanchVoteOut_SC.lancherid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lancherid(), target);
  }

  // required string lanchername = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lanchername().data(), static_cast<int>(this->_internal_lanchername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqLanchVoteOut_SC.lanchername");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lanchername(), target);
  }

  // optional string outerid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_outerid().data(), static_cast<int>(this->_internal_outerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqLanchVoteOut_SC.outerid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_outerid(), target);
  }

  // required string outername = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_outername().data(), static_cast<int>(this->_internal_outername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqLanchVoteOut_SC.outername");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_outername(), target);
  }

  // required string duration = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_duration().data(), static_cast<int>(this->_internal_duration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqLanchVoteOut_SC.duration");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqLanchVoteOut_SC)
  return target;
}

size_t MSG_ReqLanchVoteOut_SC::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Team.MSG_ReqLanchVoteOut_SC)
  size_t total_size = 0;

  if (_internal_has_lanchername()) {
    // required string lanchername = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lanchername());
  }

  if (_internal_has_outername()) {
    // required string outername = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outername());
  }

  if (_internal_has_duration()) {
    // required string duration = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_duration());
  }

  if (_internal_has_errcode()) {
    // required uint32 errcode = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());
  }

  return total_size;
}
size_t MSG_ReqLanchVoteOut_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqLanchVoteOut_SC)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003a) ^ 0x0000003a) == 0) {  // All required fields are present.
    // required string lanchername = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lanchername());

    // required string outername = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outername());

    // required string duration = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_duration());

    // required uint32 errcode = 1 [default = 0];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string lancherid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lancherid());
  }

  // optional string outerid = 4;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outerid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqLanchVoteOut_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqLanchVoteOut_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqLanchVoteOut_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqLanchVoteOut_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqLanchVoteOut_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqLanchVoteOut_SC)
    MergeFrom(*source);
  }
}

void MSG_ReqLanchVoteOut_SC::MergeFrom(const MSG_ReqLanchVoteOut_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqLanchVoteOut_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      lancherid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lancherid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      lanchername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lanchername_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      outerid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outerid_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      outername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outername_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      duration_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.duration_);
    }
    if (cached_has_bits & 0x00000020u) {
      errcode_ = from.errcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqLanchVoteOut_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqLanchVoteOut_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqLanchVoteOut_SC::CopyFrom(const MSG_ReqLanchVoteOut_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqLanchVoteOut_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqLanchVoteOut_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003a) != 0x0000003a) return false;
  return true;
}

void MSG_ReqLanchVoteOut_SC::InternalSwap(MSG_ReqLanchVoteOut_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lancherid_.Swap(&other->lancherid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lanchername_.Swap(&other->lanchername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  outerid_.Swap(&other->outerid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  outername_.Swap(&other->outername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  duration_.Swap(&other->duration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqLanchVoteOut_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqVote_CS::InitAsDefaultInstance() {
}
class MSG_ReqVote_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqVote_CS>()._has_bits_);
  static void set_has_yesorno(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqVote_CS::MSG_ReqVote_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqVote_CS)
}
MSG_ReqVote_CS::MSG_ReqVote_CS(const MSG_ReqVote_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  yesorno_ = from.yesorno_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqVote_CS)
}

void MSG_ReqVote_CS::SharedCtor() {
  yesorno_ = false;
}

MSG_ReqVote_CS::~MSG_ReqVote_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqVote_CS)
  SharedDtor();
}

void MSG_ReqVote_CS::SharedDtor() {
}

void MSG_ReqVote_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqVote_CS& MSG_ReqVote_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqVote_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqVote_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqVote_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yesorno_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqVote_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool yesorno = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_yesorno(&has_bits);
          yesorno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqVote_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqVote_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool yesorno = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_yesorno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqVote_CS)
  return target;
}

size_t MSG_ReqVote_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqVote_CS)
  size_t total_size = 0;

  // required bool yesorno = 1 [default = false];
  if (_internal_has_yesorno()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqVote_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqVote_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqVote_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqVote_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqVote_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqVote_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqVote_CS::MergeFrom(const MSG_ReqVote_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqVote_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_yesorno()) {
    _internal_set_yesorno(from._internal_yesorno());
  }
}

void MSG_ReqVote_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqVote_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqVote_CS::CopyFrom(const MSG_ReqVote_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqVote_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqVote_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_ReqVote_CS::InternalSwap(MSG_ReqVote_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(yesorno_, other->yesorno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqVote_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqChangeLeader_CS::InitAsDefaultInstance() {
}
class MSG_ReqChangeLeader_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqChangeLeader_CS>()._has_bits_);
  static void set_has_toid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqChangeLeader_CS::MSG_ReqChangeLeader_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqChangeLeader_CS)
}
MSG_ReqChangeLeader_CS::MSG_ReqChangeLeader_CS(const MSG_ReqChangeLeader_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  toid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_toid()) {
    toid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toid_);
  }
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqChangeLeader_CS)
}

void MSG_ReqChangeLeader_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqChangeLeader_CS_team_2eproto.base);
  toid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqChangeLeader_CS::~MSG_ReqChangeLeader_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqChangeLeader_CS)
  SharedDtor();
}

void MSG_ReqChangeLeader_CS::SharedDtor() {
  toid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqChangeLeader_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqChangeLeader_CS& MSG_ReqChangeLeader_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqChangeLeader_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqChangeLeader_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqChangeLeader_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    toid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqChangeLeader_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string toid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_toid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqChangeLeader_CS.toid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqChangeLeader_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqChangeLeader_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string toid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toid().data(), static_cast<int>(this->_internal_toid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqChangeLeader_CS.toid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_toid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqChangeLeader_CS)
  return target;
}

size_t MSG_ReqChangeLeader_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqChangeLeader_CS)
  size_t total_size = 0;

  // required string toid = 1;
  if (_internal_has_toid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_toid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqChangeLeader_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqChangeLeader_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqChangeLeader_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqChangeLeader_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqChangeLeader_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqChangeLeader_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqChangeLeader_CS::MergeFrom(const MSG_ReqChangeLeader_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqChangeLeader_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_toid()) {
    _has_bits_[0] |= 0x00000001u;
    toid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toid_);
  }
}

void MSG_ReqChangeLeader_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqChangeLeader_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqChangeLeader_CS::CopyFrom(const MSG_ReqChangeLeader_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqChangeLeader_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqChangeLeader_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_ReqChangeLeader_CS::InternalSwap(MSG_ReqChangeLeader_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  toid_.Swap(&other->toid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqChangeLeader_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqChangeLeader_SC::InitAsDefaultInstance() {
}
class MSG_ReqChangeLeader_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqChangeLeader_SC>()._has_bits_);
  static void set_has_newid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_newname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqChangeLeader_SC::MSG_ReqChangeLeader_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqChangeLeader_SC)
}
MSG_ReqChangeLeader_SC::MSG_ReqChangeLeader_SC(const MSG_ReqChangeLeader_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  newid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_newid()) {
    newid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newid_);
  }
  newname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_newname()) {
    newname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newname_);
  }
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqChangeLeader_SC)
}

void MSG_ReqChangeLeader_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqChangeLeader_SC_team_2eproto.base);
  newid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqChangeLeader_SC::~MSG_ReqChangeLeader_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqChangeLeader_SC)
  SharedDtor();
}

void MSG_ReqChangeLeader_SC::SharedDtor() {
  newid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqChangeLeader_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqChangeLeader_SC& MSG_ReqChangeLeader_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqChangeLeader_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqChangeLeader_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqChangeLeader_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      newid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      newname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqChangeLeader_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string newid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_newid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqChangeLeader_SC.newid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string newname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_newname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqChangeLeader_SC.newname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqChangeLeader_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqChangeLeader_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string newid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newid().data(), static_cast<int>(this->_internal_newid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqChangeLeader_SC.newid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newid(), target);
  }

  // optional string newname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newname().data(), static_cast<int>(this->_internal_newname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqChangeLeader_SC.newname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqChangeLeader_SC)
  return target;
}

size_t MSG_ReqChangeLeader_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqChangeLeader_SC)
  size_t total_size = 0;

  // required string newid = 1;
  if (_internal_has_newid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string newname = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqChangeLeader_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqChangeLeader_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqChangeLeader_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqChangeLeader_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqChangeLeader_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqChangeLeader_SC)
    MergeFrom(*source);
  }
}

void MSG_ReqChangeLeader_SC::MergeFrom(const MSG_ReqChangeLeader_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqChangeLeader_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      newid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      newname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newname_);
    }
  }
}

void MSG_ReqChangeLeader_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqChangeLeader_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqChangeLeader_SC::CopyFrom(const MSG_ReqChangeLeader_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqChangeLeader_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqChangeLeader_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_ReqChangeLeader_SC::InternalSwap(MSG_ReqChangeLeader_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  newid_.Swap(&other->newid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  newname_.Swap(&other->newname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqChangeLeader_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqNearByUnteamedPlayer_CS::InitAsDefaultInstance() {
}
class MSG_ReqNearByUnteamedPlayer_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqNearByUnteamedPlayer_CS>()._has_bits_);
};

MSG_ReqNearByUnteamedPlayer_CS::MSG_ReqNearByUnteamedPlayer_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqNearByUnteamedPlayer_CS)
}
MSG_ReqNearByUnteamedPlayer_CS::MSG_ReqNearByUnteamedPlayer_CS(const MSG_ReqNearByUnteamedPlayer_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqNearByUnteamedPlayer_CS)
}

void MSG_ReqNearByUnteamedPlayer_CS::SharedCtor() {
}

MSG_ReqNearByUnteamedPlayer_CS::~MSG_ReqNearByUnteamedPlayer_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqNearByUnteamedPlayer_CS)
  SharedDtor();
}

void MSG_ReqNearByUnteamedPlayer_CS::SharedDtor() {
}

void MSG_ReqNearByUnteamedPlayer_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqNearByUnteamedPlayer_CS& MSG_ReqNearByUnteamedPlayer_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqNearByUnteamedPlayer_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqNearByUnteamedPlayer_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqNearByUnteamedPlayer_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqNearByUnteamedPlayer_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqNearByUnteamedPlayer_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqNearByUnteamedPlayer_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqNearByUnteamedPlayer_CS)
  return target;
}

size_t MSG_ReqNearByUnteamedPlayer_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqNearByUnteamedPlayer_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqNearByUnteamedPlayer_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqNearByUnteamedPlayer_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqNearByUnteamedPlayer_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqNearByUnteamedPlayer_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqNearByUnteamedPlayer_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqNearByUnteamedPlayer_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqNearByUnteamedPlayer_CS::MergeFrom(const MSG_ReqNearByUnteamedPlayer_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqNearByUnteamedPlayer_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqNearByUnteamedPlayer_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqNearByUnteamedPlayer_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqNearByUnteamedPlayer_CS::CopyFrom(const MSG_ReqNearByUnteamedPlayer_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqNearByUnteamedPlayer_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqNearByUnteamedPlayer_CS::IsInitialized() const {
  return true;
}

void MSG_ReqNearByUnteamedPlayer_CS::InternalSwap(MSG_ReqNearByUnteamedPlayer_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqNearByUnteamedPlayer_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqNearByUnteamedPlayer_SC::InitAsDefaultInstance() {
}
class MSG_ReqNearByUnteamedPlayer_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqNearByUnteamedPlayer_SC>()._has_bits_);
};

MSG_ReqNearByUnteamedPlayer_SC::MSG_ReqNearByUnteamedPlayer_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqNearByUnteamedPlayer_SC)
}
MSG_ReqNearByUnteamedPlayer_SC::MSG_ReqNearByUnteamedPlayer_SC(const MSG_ReqNearByUnteamedPlayer_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mem_(from.mem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqNearByUnteamedPlayer_SC)
}

void MSG_ReqNearByUnteamedPlayer_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqNearByUnteamedPlayer_SC_team_2eproto.base);
}

MSG_ReqNearByUnteamedPlayer_SC::~MSG_ReqNearByUnteamedPlayer_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqNearByUnteamedPlayer_SC)
  SharedDtor();
}

void MSG_ReqNearByUnteamedPlayer_SC::SharedDtor() {
}

void MSG_ReqNearByUnteamedPlayer_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqNearByUnteamedPlayer_SC& MSG_ReqNearByUnteamedPlayer_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqNearByUnteamedPlayer_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqNearByUnteamedPlayer_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqNearByUnteamedPlayer_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mem_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqNearByUnteamedPlayer_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Team.Memember mem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqNearByUnteamedPlayer_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqNearByUnteamedPlayer_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Team.Memember mem = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mem_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mem(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqNearByUnteamedPlayer_SC)
  return target;
}

size_t MSG_ReqNearByUnteamedPlayer_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqNearByUnteamedPlayer_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Team.Memember mem = 1;
  total_size += 1UL * this->_internal_mem_size();
  for (const auto& msg : this->mem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqNearByUnteamedPlayer_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqNearByUnteamedPlayer_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqNearByUnteamedPlayer_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqNearByUnteamedPlayer_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqNearByUnteamedPlayer_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqNearByUnteamedPlayer_SC)
    MergeFrom(*source);
  }
}

void MSG_ReqNearByUnteamedPlayer_SC::MergeFrom(const MSG_ReqNearByUnteamedPlayer_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqNearByUnteamedPlayer_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mem_.MergeFrom(from.mem_);
}

void MSG_ReqNearByUnteamedPlayer_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqNearByUnteamedPlayer_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqNearByUnteamedPlayer_SC::CopyFrom(const MSG_ReqNearByUnteamedPlayer_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqNearByUnteamedPlayer_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqNearByUnteamedPlayer_SC::IsInitialized() const {
  return true;
}

void MSG_ReqNearByUnteamedPlayer_SC::InternalSwap(MSG_ReqNearByUnteamedPlayer_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mem_.InternalSwap(&other->mem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqNearByUnteamedPlayer_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_InviteIntoTeam_CS::InitAsDefaultInstance() {
}
class MSG_InviteIntoTeam_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_InviteIntoTeam_CS>()._has_bits_);
  static void set_has_inviteeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_InviteIntoTeam_CS::MSG_InviteIntoTeam_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_InviteIntoTeam_CS)
}
MSG_InviteIntoTeam_CS::MSG_InviteIntoTeam_CS(const MSG_InviteIntoTeam_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inviteeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inviteeid()) {
    inviteeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviteeid_);
  }
  // @@protoc_insertion_point(copy_constructor:Team.MSG_InviteIntoTeam_CS)
}

void MSG_InviteIntoTeam_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_InviteIntoTeam_CS_team_2eproto.base);
  inviteeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_InviteIntoTeam_CS::~MSG_InviteIntoTeam_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_InviteIntoTeam_CS)
  SharedDtor();
}

void MSG_InviteIntoTeam_CS::SharedDtor() {
  inviteeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_InviteIntoTeam_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_InviteIntoTeam_CS& MSG_InviteIntoTeam_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_InviteIntoTeam_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_InviteIntoTeam_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_InviteIntoTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    inviteeid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_InviteIntoTeam_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string inviteeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_inviteeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_InviteIntoTeam_CS.inviteeid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_InviteIntoTeam_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_InviteIntoTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string inviteeid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inviteeid().data(), static_cast<int>(this->_internal_inviteeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_InviteIntoTeam_CS.inviteeid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inviteeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_InviteIntoTeam_CS)
  return target;
}

size_t MSG_InviteIntoTeam_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_InviteIntoTeam_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string inviteeid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inviteeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_InviteIntoTeam_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_InviteIntoTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_InviteIntoTeam_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_InviteIntoTeam_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_InviteIntoTeam_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_InviteIntoTeam_CS)
    MergeFrom(*source);
  }
}

void MSG_InviteIntoTeam_CS::MergeFrom(const MSG_InviteIntoTeam_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_InviteIntoTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_inviteeid()) {
    _has_bits_[0] |= 0x00000001u;
    inviteeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviteeid_);
  }
}

void MSG_InviteIntoTeam_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_InviteIntoTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_InviteIntoTeam_CS::CopyFrom(const MSG_InviteIntoTeam_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_InviteIntoTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_InviteIntoTeam_CS::IsInitialized() const {
  return true;
}

void MSG_InviteIntoTeam_CS::InternalSwap(MSG_InviteIntoTeam_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inviteeid_.Swap(&other->inviteeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_InviteIntoTeam_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_InviteIntoTeam_SC::InitAsDefaultInstance() {
}
class MSG_InviteIntoTeam_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_InviteIntoTeam_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_InviteIntoTeam_SC::MSG_InviteIntoTeam_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_InviteIntoTeam_SC)
}
MSG_InviteIntoTeam_SC::MSG_InviteIntoTeam_SC(const MSG_InviteIntoTeam_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_InviteIntoTeam_SC)
}

void MSG_InviteIntoTeam_SC::SharedCtor() {
  errcode_ = 0u;
}

MSG_InviteIntoTeam_SC::~MSG_InviteIntoTeam_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_InviteIntoTeam_SC)
  SharedDtor();
}

void MSG_InviteIntoTeam_SC::SharedDtor() {
}

void MSG_InviteIntoTeam_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_InviteIntoTeam_SC& MSG_InviteIntoTeam_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_InviteIntoTeam_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_InviteIntoTeam_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_InviteIntoTeam_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_InviteIntoTeam_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_InviteIntoTeam_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_InviteIntoTeam_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_InviteIntoTeam_SC)
  return target;
}

size_t MSG_InviteIntoTeam_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_InviteIntoTeam_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 errcode = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_InviteIntoTeam_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_InviteIntoTeam_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_InviteIntoTeam_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_InviteIntoTeam_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_InviteIntoTeam_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_InviteIntoTeam_SC)
    MergeFrom(*source);
  }
}

void MSG_InviteIntoTeam_SC::MergeFrom(const MSG_InviteIntoTeam_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_InviteIntoTeam_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errcode()) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void MSG_InviteIntoTeam_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_InviteIntoTeam_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_InviteIntoTeam_SC::CopyFrom(const MSG_InviteIntoTeam_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_InviteIntoTeam_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_InviteIntoTeam_SC::IsInitialized() const {
  return true;
}

void MSG_InviteIntoTeam_SC::InternalSwap(MSG_InviteIntoTeam_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_InviteIntoTeam_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_AnswerInviteTeam_CS::InitAsDefaultInstance() {
}
class MSG_AnswerInviteTeam_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_AnswerInviteTeam_CS>()._has_bits_);
  static void set_has_yesorno(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inviterid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inviteeid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_AnswerInviteTeam_CS::MSG_AnswerInviteTeam_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_AnswerInviteTeam_CS)
}
MSG_AnswerInviteTeam_CS::MSG_AnswerInviteTeam_CS(const MSG_AnswerInviteTeam_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  inviterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inviterid()) {
    inviterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
  }
  inviteeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inviteeid()) {
    inviteeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviteeid_);
  }
  ::memcpy(&yesorno_, &from.yesorno_,
    static_cast<size_t>(reinterpret_cast<char*>(&teamid_) -
    reinterpret_cast<char*>(&yesorno_)) + sizeof(teamid_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_AnswerInviteTeam_CS)
}

void MSG_AnswerInviteTeam_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_AnswerInviteTeam_CS_team_2eproto.base);
  inviterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviteeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&yesorno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teamid_) -
      reinterpret_cast<char*>(&yesorno_)) + sizeof(teamid_));
}

MSG_AnswerInviteTeam_CS::~MSG_AnswerInviteTeam_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_AnswerInviteTeam_CS)
  SharedDtor();
}

void MSG_AnswerInviteTeam_CS::SharedDtor() {
  inviterid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviteeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_AnswerInviteTeam_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_AnswerInviteTeam_CS& MSG_AnswerInviteTeam_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_AnswerInviteTeam_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_AnswerInviteTeam_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_AnswerInviteTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      inviterid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      inviteeid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&yesorno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teamid_) -
        reinterpret_cast<char*>(&yesorno_)) + sizeof(teamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_AnswerInviteTeam_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool yesorno = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_yesorno(&has_bits);
          yesorno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inviterid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_inviterid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_AnswerInviteTeam_CS.inviterid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inviteeid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_inviteeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_AnswerInviteTeam_CS.inviteeid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_AnswerInviteTeam_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_AnswerInviteTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool yesorno = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_yesorno(), target);
  }

  // optional string inviterid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inviterid().data(), static_cast<int>(this->_internal_inviterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_AnswerInviteTeam_CS.inviterid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_inviterid(), target);
  }

  // optional string inviteeid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inviteeid().data(), static_cast<int>(this->_internal_inviteeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_AnswerInviteTeam_CS.inviteeid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_inviteeid(), target);
  }

  // optional uint32 teamid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_AnswerInviteTeam_CS)
  return target;
}

size_t MSG_AnswerInviteTeam_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_AnswerInviteTeam_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string inviterid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inviterid());
    }

    // optional string inviteeid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inviteeid());
    }

    // optional bool yesorno = 1 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 teamid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_AnswerInviteTeam_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_AnswerInviteTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_AnswerInviteTeam_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_AnswerInviteTeam_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_AnswerInviteTeam_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_AnswerInviteTeam_CS)
    MergeFrom(*source);
  }
}

void MSG_AnswerInviteTeam_CS::MergeFrom(const MSG_AnswerInviteTeam_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_AnswerInviteTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      inviterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      inviteeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviteeid_);
    }
    if (cached_has_bits & 0x00000004u) {
      yesorno_ = from.yesorno_;
    }
    if (cached_has_bits & 0x00000008u) {
      teamid_ = from.teamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_AnswerInviteTeam_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_AnswerInviteTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_AnswerInviteTeam_CS::CopyFrom(const MSG_AnswerInviteTeam_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_AnswerInviteTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_AnswerInviteTeam_CS::IsInitialized() const {
  return true;
}

void MSG_AnswerInviteTeam_CS::InternalSwap(MSG_AnswerInviteTeam_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inviterid_.Swap(&other->inviterid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inviteeid_.Swap(&other->inviteeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(yesorno_, other->yesorno_);
  swap(teamid_, other->teamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_AnswerInviteTeam_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_AddMemember_SC::InitAsDefaultInstance() {
  ::Team::_MSG_AddMemember_SC_default_instance_._instance.get_mutable()->mem_ = const_cast< ::Team::Memember*>(
      ::Team::Memember::internal_default_instance());
}
class MSG_AddMemember_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_AddMemember_SC>()._has_bits_);
  static const ::Team::Memember& mem(const MSG_AddMemember_SC* msg);
  static void set_has_mem(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Team::Memember&
MSG_AddMemember_SC::_Internal::mem(const MSG_AddMemember_SC* msg) {
  return *msg->mem_;
}
MSG_AddMemember_SC::MSG_AddMemember_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_AddMemember_SC)
}
MSG_AddMemember_SC::MSG_AddMemember_SC(const MSG_AddMemember_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_mem()) {
    mem_ = new ::Team::Memember(*from.mem_);
  } else {
    mem_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Team.MSG_AddMemember_SC)
}

void MSG_AddMemember_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_AddMemember_SC_team_2eproto.base);
  mem_ = nullptr;
}

MSG_AddMemember_SC::~MSG_AddMemember_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_AddMemember_SC)
  SharedDtor();
}

void MSG_AddMemember_SC::SharedDtor() {
  if (this != internal_default_instance()) delete mem_;
}

void MSG_AddMemember_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_AddMemember_SC& MSG_AddMemember_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_AddMemember_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_AddMemember_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_AddMemember_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mem_ != nullptr);
    mem_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_AddMemember_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Team.Memember mem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_AddMemember_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_AddMemember_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team.Memember mem = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mem(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_AddMemember_SC)
  return target;
}

size_t MSG_AddMemember_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_AddMemember_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Team.Memember mem = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mem_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_AddMemember_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_AddMemember_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_AddMemember_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_AddMemember_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_AddMemember_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_AddMemember_SC)
    MergeFrom(*source);
  }
}

void MSG_AddMemember_SC::MergeFrom(const MSG_AddMemember_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_AddMemember_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mem()) {
    _internal_mutable_mem()->::Team::Memember::MergeFrom(from._internal_mem());
  }
}

void MSG_AddMemember_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_AddMemember_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_AddMemember_SC::CopyFrom(const MSG_AddMemember_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_AddMemember_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_AddMemember_SC::IsInitialized() const {
  return true;
}

void MSG_AddMemember_SC::InternalSwap(MSG_AddMemember_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mem_, other->mem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_AddMemember_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_LeaderIgnoreNotice_CS::InitAsDefaultInstance() {
}
class MSG_LeaderIgnoreNotice_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_LeaderIgnoreNotice_CS>()._has_bits_);
};

MSG_LeaderIgnoreNotice_CS::MSG_LeaderIgnoreNotice_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_LeaderIgnoreNotice_CS)
}
MSG_LeaderIgnoreNotice_CS::MSG_LeaderIgnoreNotice_CS(const MSG_LeaderIgnoreNotice_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_LeaderIgnoreNotice_CS)
}

void MSG_LeaderIgnoreNotice_CS::SharedCtor() {
}

MSG_LeaderIgnoreNotice_CS::~MSG_LeaderIgnoreNotice_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_LeaderIgnoreNotice_CS)
  SharedDtor();
}

void MSG_LeaderIgnoreNotice_CS::SharedDtor() {
}

void MSG_LeaderIgnoreNotice_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_LeaderIgnoreNotice_CS& MSG_LeaderIgnoreNotice_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_LeaderIgnoreNotice_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_LeaderIgnoreNotice_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_LeaderIgnoreNotice_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_LeaderIgnoreNotice_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_LeaderIgnoreNotice_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_LeaderIgnoreNotice_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_LeaderIgnoreNotice_CS)
  return target;
}

size_t MSG_LeaderIgnoreNotice_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_LeaderIgnoreNotice_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_LeaderIgnoreNotice_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_LeaderIgnoreNotice_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_LeaderIgnoreNotice_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_LeaderIgnoreNotice_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_LeaderIgnoreNotice_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_LeaderIgnoreNotice_CS)
    MergeFrom(*source);
  }
}

void MSG_LeaderIgnoreNotice_CS::MergeFrom(const MSG_LeaderIgnoreNotice_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_LeaderIgnoreNotice_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_LeaderIgnoreNotice_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_LeaderIgnoreNotice_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_LeaderIgnoreNotice_CS::CopyFrom(const MSG_LeaderIgnoreNotice_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_LeaderIgnoreNotice_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_LeaderIgnoreNotice_CS::IsInitialized() const {
  return true;
}

void MSG_LeaderIgnoreNotice_CS::InternalSwap(MSG_LeaderIgnoreNotice_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_LeaderIgnoreNotice_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_updateTeamMememberHp_SC::InitAsDefaultInstance() {
}
class MSG_updateTeamMememberHp_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_updateTeamMememberHp_SC>()._has_bits_);
  static void set_has_memid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_isdead(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_updateTeamMememberHp_SC::MSG_updateTeamMememberHp_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_updateTeamMememberHp_SC)
}
MSG_updateTeamMememberHp_SC::MSG_updateTeamMememberHp_SC(const MSG_updateTeamMememberHp_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_memid()) {
    memid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memid_);
  }
  ::memcpy(&hp_, &from.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&isdead_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(isdead_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_updateTeamMememberHp_SC)
}

void MSG_updateTeamMememberHp_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_updateTeamMememberHp_SC_team_2eproto.base);
  memid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdead_) -
      reinterpret_cast<char*>(&hp_)) + sizeof(isdead_));
}

MSG_updateTeamMememberHp_SC::~MSG_updateTeamMememberHp_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_updateTeamMememberHp_SC)
  SharedDtor();
}

void MSG_updateTeamMememberHp_SC::SharedDtor() {
  memid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_updateTeamMememberHp_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_updateTeamMememberHp_SC& MSG_updateTeamMememberHp_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_updateTeamMememberHp_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_updateTeamMememberHp_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_updateTeamMememberHp_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    memid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&hp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isdead_) -
        reinterpret_cast<char*>(&hp_)) + sizeof(isdead_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_updateTeamMememberHp_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string memid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_memid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_updateTeamMememberHp_SC.memid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isdead = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_isdead(&has_bits);
          isdead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_updateTeamMememberHp_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_updateTeamMememberHp_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string memid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_memid().data(), static_cast<int>(this->_internal_memid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_updateTeamMememberHp_SC.memid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_memid(), target);
  }

  // optional uint32 hp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  // optional uint32 maxhp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxhp(), target);
  }

  // optional bool isdead = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isdead(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_updateTeamMememberHp_SC)
  return target;
}

size_t MSG_updateTeamMememberHp_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_updateTeamMememberHp_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string memid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memid());
    }

    // optional uint32 hp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hp());
    }

    // optional uint32 maxhp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhp());
    }

    // optional bool isdead = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_updateTeamMememberHp_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_updateTeamMememberHp_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_updateTeamMememberHp_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_updateTeamMememberHp_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_updateTeamMememberHp_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_updateTeamMememberHp_SC)
    MergeFrom(*source);
  }
}

void MSG_updateTeamMememberHp_SC::MergeFrom(const MSG_updateTeamMememberHp_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_updateTeamMememberHp_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      memid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memid_);
    }
    if (cached_has_bits & 0x00000002u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000008u) {
      isdead_ = from.isdead_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_updateTeamMememberHp_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_updateTeamMememberHp_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_updateTeamMememberHp_SC::CopyFrom(const MSG_updateTeamMememberHp_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_updateTeamMememberHp_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_updateTeamMememberHp_SC::IsInitialized() const {
  return true;
}

void MSG_updateTeamMememberHp_SC::InternalSwap(MSG_updateTeamMememberHp_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  memid_.Swap(&other->memid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hp_, other->hp_);
  swap(maxhp_, other->maxhp_);
  swap(isdead_, other->isdead_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_updateTeamMememberHp_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_updateTeamMememberCareer_SC::InitAsDefaultInstance() {
}
class MSG_updateTeamMememberCareer_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_updateTeamMememberCareer_SC>()._has_bits_);
  static void set_has_mememberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_career(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_careerlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_updateTeamMememberCareer_SC::MSG_updateTeamMememberCareer_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_updateTeamMememberCareer_SC)
}
MSG_updateTeamMememberCareer_SC::MSG_updateTeamMememberCareer_SC(const MSG_updateTeamMememberCareer_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mememberid()) {
    mememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mememberid_);
  }
  ::memcpy(&career_, &from.career_,
    static_cast<size_t>(reinterpret_cast<char*>(&careerlevel_) -
    reinterpret_cast<char*>(&career_)) + sizeof(careerlevel_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_updateTeamMememberCareer_SC)
}

void MSG_updateTeamMememberCareer_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_updateTeamMememberCareer_SC_team_2eproto.base);
  mememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&career_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&careerlevel_) -
      reinterpret_cast<char*>(&career_)) + sizeof(careerlevel_));
}

MSG_updateTeamMememberCareer_SC::~MSG_updateTeamMememberCareer_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_updateTeamMememberCareer_SC)
  SharedDtor();
}

void MSG_updateTeamMememberCareer_SC::SharedDtor() {
  mememberid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_updateTeamMememberCareer_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_updateTeamMememberCareer_SC& MSG_updateTeamMememberCareer_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_updateTeamMememberCareer_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_updateTeamMememberCareer_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_updateTeamMememberCareer_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mememberid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&career_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&careerlevel_) -
        reinterpret_cast<char*>(&career_)) + sizeof(careerlevel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_updateTeamMememberCareer_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string mememberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mememberid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_updateTeamMememberCareer_SC.mememberid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 career = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_career(&has_bits);
          career_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 careerlevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_careerlevel(&has_bits);
          careerlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_updateTeamMememberCareer_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_updateTeamMememberCareer_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mememberid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mememberid().data(), static_cast<int>(this->_internal_mememberid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_updateTeamMememberCareer_SC.mememberid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mememberid(), target);
  }

  // optional uint32 career = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_career(), target);
  }

  // optional uint32 careerlevel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_careerlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_updateTeamMememberCareer_SC)
  return target;
}

size_t MSG_updateTeamMememberCareer_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_updateTeamMememberCareer_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string mememberid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mememberid());
    }

    // optional uint32 career = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_career());
    }

    // optional uint32 careerlevel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_careerlevel());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_updateTeamMememberCareer_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_updateTeamMememberCareer_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_updateTeamMememberCareer_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_updateTeamMememberCareer_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_updateTeamMememberCareer_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_updateTeamMememberCareer_SC)
    MergeFrom(*source);
  }
}

void MSG_updateTeamMememberCareer_SC::MergeFrom(const MSG_updateTeamMememberCareer_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_updateTeamMememberCareer_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mememberid_);
    }
    if (cached_has_bits & 0x00000002u) {
      career_ = from.career_;
    }
    if (cached_has_bits & 0x00000004u) {
      careerlevel_ = from.careerlevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_updateTeamMememberCareer_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_updateTeamMememberCareer_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_updateTeamMememberCareer_SC::CopyFrom(const MSG_updateTeamMememberCareer_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_updateTeamMememberCareer_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_updateTeamMememberCareer_SC::IsInitialized() const {
  return true;
}

void MSG_updateTeamMememberCareer_SC::InternalSwap(MSG_updateTeamMememberCareer_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mememberid_.Swap(&other->mememberid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(career_, other->career_);
  swap(careerlevel_, other->careerlevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_updateTeamMememberCareer_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_updateTeamMemeberHero_SC::InitAsDefaultInstance() {
}
class MSG_updateTeamMemeberHero_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_updateTeamMemeberHero_SC>()._has_bits_);
  static void set_has_memid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_updateTeamMemeberHero_SC::MSG_updateTeamMemeberHero_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_updateTeamMemeberHero_SC)
}
MSG_updateTeamMemeberHero_SC::MSG_updateTeamMemeberHero_SC(const MSG_updateTeamMemeberHero_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_memid()) {
    memid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memid_);
  }
  heroid_ = from.heroid_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_updateTeamMemeberHero_SC)
}

void MSG_updateTeamMemeberHero_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_updateTeamMemeberHero_SC_team_2eproto.base);
  memid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heroid_ = 0u;
}

MSG_updateTeamMemeberHero_SC::~MSG_updateTeamMemeberHero_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_updateTeamMemeberHero_SC)
  SharedDtor();
}

void MSG_updateTeamMemeberHero_SC::SharedDtor() {
  memid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_updateTeamMemeberHero_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_updateTeamMemeberHero_SC& MSG_updateTeamMemeberHero_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_updateTeamMemeberHero_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_updateTeamMemeberHero_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_updateTeamMemeberHero_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    memid_.ClearNonDefaultToEmptyNoArena();
  }
  heroid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_updateTeamMemeberHero_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string memid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_memid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_updateTeamMemeberHero_SC.memid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_updateTeamMemeberHero_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_updateTeamMemeberHero_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string memid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_memid().data(), static_cast<int>(this->_internal_memid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_updateTeamMemeberHero_SC.memid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_memid(), target);
  }

  // optional uint32 heroid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heroid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_updateTeamMemeberHero_SC)
  return target;
}

size_t MSG_updateTeamMemeberHero_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_updateTeamMemeberHero_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string memid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memid());
    }

    // optional uint32 heroid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_updateTeamMemeberHero_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_updateTeamMemeberHero_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_updateTeamMemeberHero_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_updateTeamMemeberHero_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_updateTeamMemeberHero_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_updateTeamMemeberHero_SC)
    MergeFrom(*source);
  }
}

void MSG_updateTeamMemeberHero_SC::MergeFrom(const MSG_updateTeamMemeberHero_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_updateTeamMemeberHero_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      memid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memid_);
    }
    if (cached_has_bits & 0x00000002u) {
      heroid_ = from.heroid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_updateTeamMemeberHero_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_updateTeamMemeberHero_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_updateTeamMemeberHero_SC::CopyFrom(const MSG_updateTeamMemeberHero_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_updateTeamMemeberHero_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_updateTeamMemeberHero_SC::IsInitialized() const {
  return true;
}

void MSG_updateTeamMemeberHero_SC::InternalSwap(MSG_updateTeamMemeberHero_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  memid_.Swap(&other->memid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(heroid_, other->heroid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_updateTeamMemeberHero_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_updateTeamMememberLevel_SC::InitAsDefaultInstance() {
}
class MSG_updateTeamMememberLevel_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_updateTeamMememberLevel_SC>()._has_bits_);
  static void set_has_mememberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_membername(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_updateTeamMememberLevel_SC::MSG_updateTeamMememberLevel_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_updateTeamMememberLevel_SC)
}
MSG_updateTeamMememberLevel_SC::MSG_updateTeamMememberLevel_SC(const MSG_updateTeamMememberLevel_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mememberid()) {
    mememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mememberid_);
  }
  membername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_membername()) {
    membername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.membername_);
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_updateTeamMememberLevel_SC)
}

void MSG_updateTeamMememberLevel_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_updateTeamMememberLevel_SC_team_2eproto.base);
  mememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  membername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
}

MSG_updateTeamMememberLevel_SC::~MSG_updateTeamMememberLevel_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_updateTeamMememberLevel_SC)
  SharedDtor();
}

void MSG_updateTeamMememberLevel_SC::SharedDtor() {
  mememberid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  membername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_updateTeamMememberLevel_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_updateTeamMememberLevel_SC& MSG_updateTeamMememberLevel_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_updateTeamMememberLevel_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_updateTeamMememberLevel_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_updateTeamMememberLevel_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mememberid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      membername_.ClearNonDefaultToEmptyNoArena();
    }
  }
  level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_updateTeamMememberLevel_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string mememberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mememberid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_updateTeamMememberLevel_SC.mememberid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string membername = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_membername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_updateTeamMememberLevel_SC.membername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_updateTeamMememberLevel_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_updateTeamMememberLevel_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mememberid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mememberid().data(), static_cast<int>(this->_internal_mememberid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_updateTeamMememberLevel_SC.mememberid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mememberid(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // optional string membername = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_membername().data(), static_cast<int>(this->_internal_membername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_updateTeamMememberLevel_SC.membername");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_membername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_updateTeamMememberLevel_SC)
  return target;
}

size_t MSG_updateTeamMememberLevel_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_updateTeamMememberLevel_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string mememberid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mememberid());
    }

    // optional string membername = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_membername());
    }

    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_updateTeamMememberLevel_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_updateTeamMememberLevel_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_updateTeamMememberLevel_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_updateTeamMememberLevel_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_updateTeamMememberLevel_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_updateTeamMememberLevel_SC)
    MergeFrom(*source);
  }
}

void MSG_updateTeamMememberLevel_SC::MergeFrom(const MSG_updateTeamMememberLevel_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_updateTeamMememberLevel_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mememberid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      membername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.membername_);
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_updateTeamMememberLevel_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_updateTeamMememberLevel_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_updateTeamMememberLevel_SC::CopyFrom(const MSG_updateTeamMememberLevel_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_updateTeamMememberLevel_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_updateTeamMememberLevel_SC::IsInitialized() const {
  return true;
}

void MSG_updateTeamMememberLevel_SC::InternalSwap(MSG_updateTeamMememberLevel_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mememberid_.Swap(&other->mememberid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  membername_.Swap(&other->membername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_updateTeamMememberLevel_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_updateTeamMemberFight_SC::InitAsDefaultInstance() {
}
class MSG_updateTeamMemberFight_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_updateTeamMemberFight_SC>()._has_bits_);
  static void set_has_mememberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_updateTeamMemberFight_SC::MSG_updateTeamMemberFight_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_updateTeamMemberFight_SC)
}
MSG_updateTeamMemberFight_SC::MSG_updateTeamMemberFight_SC(const MSG_updateTeamMemberFight_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mememberid()) {
    mememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mememberid_);
  }
  ::memcpy(&fight_, &from.fight_,
    static_cast<size_t>(reinterpret_cast<char*>(&heroid_) -
    reinterpret_cast<char*>(&fight_)) + sizeof(heroid_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_updateTeamMemberFight_SC)
}

void MSG_updateTeamMemberFight_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_updateTeamMemberFight_SC_team_2eproto.base);
  mememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heroid_) -
      reinterpret_cast<char*>(&fight_)) + sizeof(heroid_));
}

MSG_updateTeamMemberFight_SC::~MSG_updateTeamMemberFight_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_updateTeamMemberFight_SC)
  SharedDtor();
}

void MSG_updateTeamMemberFight_SC::SharedDtor() {
  mememberid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_updateTeamMemberFight_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_updateTeamMemberFight_SC& MSG_updateTeamMemberFight_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_updateTeamMemberFight_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_updateTeamMemberFight_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_updateTeamMemberFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mememberid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&fight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heroid_) -
        reinterpret_cast<char*>(&fight_)) + sizeof(heroid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_updateTeamMemberFight_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string mememberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mememberid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_updateTeamMemberFight_SC.mememberid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fight(&has_bits);
          fight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_updateTeamMemberFight_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_updateTeamMemberFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mememberid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mememberid().data(), static_cast<int>(this->_internal_mememberid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_updateTeamMemberFight_SC.mememberid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mememberid(), target);
  }

  // optional uint32 fight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fight(), target);
  }

  // optional uint32 heroid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_heroid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_updateTeamMemberFight_SC)
  return target;
}

size_t MSG_updateTeamMemberFight_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_updateTeamMemberFight_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string mememberid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mememberid());
    }

    // optional uint32 fight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fight());
    }

    // optional uint32 heroid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_updateTeamMemberFight_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_updateTeamMemberFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_updateTeamMemberFight_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_updateTeamMemberFight_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_updateTeamMemberFight_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_updateTeamMemberFight_SC)
    MergeFrom(*source);
  }
}

void MSG_updateTeamMemberFight_SC::MergeFrom(const MSG_updateTeamMemberFight_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_updateTeamMemberFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mememberid_);
    }
    if (cached_has_bits & 0x00000002u) {
      fight_ = from.fight_;
    }
    if (cached_has_bits & 0x00000004u) {
      heroid_ = from.heroid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_updateTeamMemberFight_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_updateTeamMemberFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_updateTeamMemberFight_SC::CopyFrom(const MSG_updateTeamMemberFight_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_updateTeamMemberFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_updateTeamMemberFight_SC::IsInitialized() const {
  return true;
}

void MSG_updateTeamMemberFight_SC::InternalSwap(MSG_updateTeamMemberFight_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mememberid_.Swap(&other->mememberid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fight_, other->fight_);
  swap(heroid_, other->heroid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_updateTeamMemberFight_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqTeamMemberPos_CS::InitAsDefaultInstance() {
}
class MSG_ReqTeamMemberPos_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqTeamMemberPos_CS>()._has_bits_);
};

MSG_ReqTeamMemberPos_CS::MSG_ReqTeamMemberPos_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqTeamMemberPos_CS)
}
MSG_ReqTeamMemberPos_CS::MSG_ReqTeamMemberPos_CS(const MSG_ReqTeamMemberPos_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqTeamMemberPos_CS)
}

void MSG_ReqTeamMemberPos_CS::SharedCtor() {
}

MSG_ReqTeamMemberPos_CS::~MSG_ReqTeamMemberPos_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqTeamMemberPos_CS)
  SharedDtor();
}

void MSG_ReqTeamMemberPos_CS::SharedDtor() {
}

void MSG_ReqTeamMemberPos_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqTeamMemberPos_CS& MSG_ReqTeamMemberPos_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqTeamMemberPos_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqTeamMemberPos_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqTeamMemberPos_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqTeamMemberPos_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqTeamMemberPos_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqTeamMemberPos_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqTeamMemberPos_CS)
  return target;
}

size_t MSG_ReqTeamMemberPos_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqTeamMemberPos_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqTeamMemberPos_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqTeamMemberPos_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqTeamMemberPos_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqTeamMemberPos_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqTeamMemberPos_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqTeamMemberPos_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqTeamMemberPos_CS::MergeFrom(const MSG_ReqTeamMemberPos_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqTeamMemberPos_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqTeamMemberPos_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqTeamMemberPos_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqTeamMemberPos_CS::CopyFrom(const MSG_ReqTeamMemberPos_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqTeamMemberPos_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqTeamMemberPos_CS::IsInitialized() const {
  return true;
}

void MSG_ReqTeamMemberPos_CS::InternalSwap(MSG_ReqTeamMemberPos_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqTeamMemberPos_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MemberPos::InitAsDefaultInstance() {
}
class MemberPos::_Internal {
 public:
  using HasBits = decltype(std::declval<MemberPos>()._has_bits_);
  static void set_has_memberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sceneid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MemberPos::MemberPos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MemberPos)
}
MemberPos::MemberPos(const MemberPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_memberid()) {
    memberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memberid_);
  }
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sceneid()) {
    sceneid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Team.MemberPos)
}

void MemberPos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MemberPos_team_2eproto.base);
  memberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

MemberPos::~MemberPos() {
  // @@protoc_insertion_point(destructor:Team.MemberPos)
  SharedDtor();
}

void MemberPos::SharedDtor() {
  memberid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sceneid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemberPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MemberPos& MemberPos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MemberPos_team_2eproto.base);
  return *internal_default_instance();
}


void MemberPos::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MemberPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      memberid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sceneid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MemberPos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string memberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_memberid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MemberPos.memberid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sceneid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sceneid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MemberPos.sceneid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemberPos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MemberPos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string memberid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_memberid().data(), static_cast<int>(this->_internal_memberid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MemberPos.memberid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_memberid(), target);
  }

  // optional string sceneid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sceneid().data(), static_cast<int>(this->_internal_sceneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MemberPos.sceneid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sceneid(), target);
  }

  // optional uint32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_x(), target);
  }

  // optional uint32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MemberPos)
  return target;
}

size_t MemberPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MemberPos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string memberid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memberid());
    }

    // optional string sceneid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sceneid());
    }

    // optional uint32 x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemberPos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MemberPos)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberPos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemberPos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MemberPos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MemberPos)
    MergeFrom(*source);
  }
}

void MemberPos::MergeFrom(const MemberPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MemberPos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      memberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memberid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sceneid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MemberPos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MemberPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberPos::CopyFrom(const MemberPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MemberPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberPos::IsInitialized() const {
  return true;
}

void MemberPos::InternalSwap(MemberPos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  memberid_.Swap(&other->memberid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sceneid_.Swap(&other->sceneid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberPos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetTeamMemberPos_SC::InitAsDefaultInstance() {
}
class MSG_RetTeamMemberPos_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetTeamMemberPos_SC>()._has_bits_);
};

MSG_RetTeamMemberPos_SC::MSG_RetTeamMemberPos_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetTeamMemberPos_SC)
}
MSG_RetTeamMemberPos_SC::MSG_RetTeamMemberPos_SC(const MSG_RetTeamMemberPos_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetTeamMemberPos_SC)
}

void MSG_RetTeamMemberPos_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetTeamMemberPos_SC_team_2eproto.base);
}

MSG_RetTeamMemberPos_SC::~MSG_RetTeamMemberPos_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetTeamMemberPos_SC)
  SharedDtor();
}

void MSG_RetTeamMemberPos_SC::SharedDtor() {
}

void MSG_RetTeamMemberPos_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetTeamMemberPos_SC& MSG_RetTeamMemberPos_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetTeamMemberPos_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetTeamMemberPos_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetTeamMemberPos_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetTeamMemberPos_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Team.MemberPos members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetTeamMemberPos_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetTeamMemberPos_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Team.MemberPos members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetTeamMemberPos_SC)
  return target;
}

size_t MSG_RetTeamMemberPos_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetTeamMemberPos_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Team.MemberPos members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetTeamMemberPos_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetTeamMemberPos_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetTeamMemberPos_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetTeamMemberPos_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetTeamMemberPos_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetTeamMemberPos_SC)
    MergeFrom(*source);
  }
}

void MSG_RetTeamMemberPos_SC::MergeFrom(const MSG_RetTeamMemberPos_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetTeamMemberPos_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
}

void MSG_RetTeamMemberPos_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetTeamMemberPos_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetTeamMemberPos_SC::CopyFrom(const MSG_RetTeamMemberPos_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetTeamMemberPos_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetTeamMemberPos_SC::IsInitialized() const {
  return true;
}

void MSG_RetTeamMemberPos_SC::InternalSwap(MSG_RetTeamMemberPos_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetTeamMemberPos_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetNearByUnteamedInvite_SC::InitAsDefaultInstance() {
  ::Team::_MSG_RetNearByUnteamedInvite_SC_default_instance_._instance.get_mutable()->inviter_ = const_cast< ::Team::Memember*>(
      ::Team::Memember::internal_default_instance());
}
class MSG_RetNearByUnteamedInvite_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetNearByUnteamedInvite_SC>()._has_bits_);
  static const ::Team::Memember& inviter(const MSG_RetNearByUnteamedInvite_SC* msg);
  static void set_has_inviter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_invitername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inviterid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_inviteename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_inviteeid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_teamname(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::Team::Memember&
MSG_RetNearByUnteamedInvite_SC::_Internal::inviter(const MSG_RetNearByUnteamedInvite_SC* msg) {
  return *msg->inviter_;
}
MSG_RetNearByUnteamedInvite_SC::MSG_RetNearByUnteamedInvite_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetNearByUnteamedInvite_SC)
}
MSG_RetNearByUnteamedInvite_SC::MSG_RetNearByUnteamedInvite_SC(const MSG_RetNearByUnteamedInvite_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  invitername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitername()) {
    invitername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitername_);
  }
  inviterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inviterid()) {
    inviterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
  }
  inviteename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inviteename()) {
    inviteename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviteename_);
  }
  inviteeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inviteeid()) {
    inviteeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviteeid_);
  }
  teamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_teamname()) {
    teamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teamname_);
  }
  if (from._internal_has_inviter()) {
    inviter_ = new ::Team::Memember(*from.inviter_);
  } else {
    inviter_ = nullptr;
  }
  teamid_ = from.teamid_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetNearByUnteamedInvite_SC)
}

void MSG_RetNearByUnteamedInvite_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetNearByUnteamedInvite_SC_team_2eproto.base);
  invitername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviterid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviteename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviteeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&inviter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teamid_) -
      reinterpret_cast<char*>(&inviter_)) + sizeof(teamid_));
}

MSG_RetNearByUnteamedInvite_SC::~MSG_RetNearByUnteamedInvite_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetNearByUnteamedInvite_SC)
  SharedDtor();
}

void MSG_RetNearByUnteamedInvite_SC::SharedDtor() {
  invitername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviterid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviteename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inviteeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  teamname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inviter_;
}

void MSG_RetNearByUnteamedInvite_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetNearByUnteamedInvite_SC& MSG_RetNearByUnteamedInvite_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetNearByUnteamedInvite_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetNearByUnteamedInvite_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetNearByUnteamedInvite_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      invitername_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      inviterid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      inviteename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      inviteeid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      teamname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(inviter_ != nullptr);
      inviter_->Clear();
    }
  }
  teamid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetNearByUnteamedInvite_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Team.Memember inviter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inviter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string invitername = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_invitername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_RetNearByUnteamedInvite_SC.invitername");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inviterid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_inviterid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_RetNearByUnteamedInvite_SC.inviterid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inviteename = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_inviteename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_RetNearByUnteamedInvite_SC.inviteename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inviteeid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_inviteeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_RetNearByUnteamedInvite_SC.inviteeid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string teamname = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_teamname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_RetNearByUnteamedInvite_SC.teamname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teamid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetNearByUnteamedInvite_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetNearByUnteamedInvite_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Team.Memember inviter = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inviter(this), target, stream);
  }

  // optional string invitername = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitername().data(), static_cast<int>(this->_internal_invitername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_RetNearByUnteamedInvite_SC.invitername");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invitername(), target);
  }

  // optional string inviterid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inviterid().data(), static_cast<int>(this->_internal_inviterid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_RetNearByUnteamedInvite_SC.inviterid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_inviterid(), target);
  }

  // optional string inviteename = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inviteename().data(), static_cast<int>(this->_internal_inviteename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_RetNearByUnteamedInvite_SC.inviteename");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_inviteename(), target);
  }

  // optional string inviteeid = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inviteeid().data(), static_cast<int>(this->_internal_inviteeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_RetNearByUnteamedInvite_SC.inviteeid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_inviteeid(), target);
  }

  // optional string teamname = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_teamname().data(), static_cast<int>(this->_internal_teamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_RetNearByUnteamedInvite_SC.teamname");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_teamname(), target);
  }

  // optional uint32 teamid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetNearByUnteamedInvite_SC)
  return target;
}

size_t MSG_RetNearByUnteamedInvite_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetNearByUnteamedInvite_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string invitername = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitername());
    }

    // optional string inviterid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inviterid());
    }

    // optional string inviteename = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inviteename());
    }

    // optional string inviteeid = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inviteeid());
    }

    // optional string teamname = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_teamname());
    }

    // optional .Team.Memember inviter = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inviter_);
    }

    // optional uint32 teamid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetNearByUnteamedInvite_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetNearByUnteamedInvite_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetNearByUnteamedInvite_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetNearByUnteamedInvite_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetNearByUnteamedInvite_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetNearByUnteamedInvite_SC)
    MergeFrom(*source);
  }
}

void MSG_RetNearByUnteamedInvite_SC::MergeFrom(const MSG_RetNearByUnteamedInvite_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetNearByUnteamedInvite_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      invitername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invitername_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      inviterid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      inviteename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviteename_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      inviteeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.inviteeid_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      teamname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.teamname_);
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_inviter()->::Team::Memember::MergeFrom(from._internal_inviter());
    }
    if (cached_has_bits & 0x00000040u) {
      teamid_ = from.teamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetNearByUnteamedInvite_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetNearByUnteamedInvite_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetNearByUnteamedInvite_SC::CopyFrom(const MSG_RetNearByUnteamedInvite_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetNearByUnteamedInvite_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetNearByUnteamedInvite_SC::IsInitialized() const {
  return true;
}

void MSG_RetNearByUnteamedInvite_SC::InternalSwap(MSG_RetNearByUnteamedInvite_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitername_.Swap(&other->invitername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inviterid_.Swap(&other->inviterid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inviteename_.Swap(&other->inviteename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  inviteeid_.Swap(&other->inviteeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  teamname_.Swap(&other->teamname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inviter_, other->inviter_);
  swap(teamid_, other->teamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetNearByUnteamedInvite_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetNewApply_SC::InitAsDefaultInstance() {
}
class MSG_RetNewApply_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetNewApply_SC>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetNewApply_SC::MSG_RetNewApply_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetNewApply_SC)
}
MSG_RetNewApply_SC::MSG_RetNewApply_SC(const MSG_RetNewApply_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetNewApply_SC)
}

void MSG_RetNewApply_SC::SharedCtor() {
  count_ = 0u;
}

MSG_RetNewApply_SC::~MSG_RetNewApply_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetNewApply_SC)
  SharedDtor();
}

void MSG_RetNewApply_SC::SharedDtor() {
}

void MSG_RetNewApply_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetNewApply_SC& MSG_RetNewApply_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetNewApply_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetNewApply_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetNewApply_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetNewApply_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetNewApply_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetNewApply_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetNewApply_SC)
  return target;
}

size_t MSG_RetNewApply_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetNewApply_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetNewApply_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetNewApply_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetNewApply_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetNewApply_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetNewApply_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetNewApply_SC)
    MergeFrom(*source);
  }
}

void MSG_RetNewApply_SC::MergeFrom(const MSG_RetNewApply_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetNewApply_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_count()) {
    _internal_set_count(from._internal_count());
  }
}

void MSG_RetNewApply_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetNewApply_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetNewApply_SC::CopyFrom(const MSG_RetNewApply_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetNewApply_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetNewApply_SC::IsInitialized() const {
  return true;
}

void MSG_RetNewApply_SC::InternalSwap(MSG_RetNewApply_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetNewApply_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void teamDropItem::InitAsDefaultInstance() {
}
class teamDropItem::_Internal {
 public:
  using HasBits = decltype(std::declval<teamDropItem>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_objid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bind(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duetime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

teamDropItem::teamDropItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.teamDropItem)
}
teamDropItem::teamDropItem(const teamDropItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&objid_, &from.objid_,
    static_cast<size_t>(reinterpret_cast<char*>(&duetime_) -
    reinterpret_cast<char*>(&objid_)) + sizeof(duetime_));
  // @@protoc_insertion_point(copy_constructor:Team.teamDropItem)
}

void teamDropItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_teamDropItem_team_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&objid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duetime_) -
      reinterpret_cast<char*>(&objid_)) + sizeof(duetime_));
}

teamDropItem::~teamDropItem() {
  // @@protoc_insertion_point(destructor:Team.teamDropItem)
  SharedDtor();
}

void teamDropItem::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void teamDropItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const teamDropItem& teamDropItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_teamDropItem_team_2eproto.base);
  return *internal_default_instance();
}


void teamDropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.teamDropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&objid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duetime_) -
        reinterpret_cast<char*>(&objid_)) + sizeof(duetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* teamDropItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.teamDropItem.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 objid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_objid(&has_bits);
          objid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bind(&has_bits);
          bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duetime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_duetime(&has_bits);
          duetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* teamDropItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.teamDropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.teamDropItem.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 objid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_objid(), target);
  }

  // optional uint32 num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num(), target);
  }

  // optional uint32 bind = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bind(), target);
  }

  // optional uint32 duetime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_duetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.teamDropItem)
  return target;
}

size_t teamDropItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.teamDropItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint32 objid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_objid());
    }

    // optional uint32 num = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

    // optional uint32 bind = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bind());
    }

    // optional uint32 duetime = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duetime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void teamDropItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.teamDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  const teamDropItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<teamDropItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.teamDropItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.teamDropItem)
    MergeFrom(*source);
  }
}

void teamDropItem::MergeFrom(const teamDropItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.teamDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      objid_ = from.objid_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000008u) {
      bind_ = from.bind_;
    }
    if (cached_has_bits & 0x00000010u) {
      duetime_ = from.duetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void teamDropItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.teamDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void teamDropItem::CopyFrom(const teamDropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.teamDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool teamDropItem::IsInitialized() const {
  return true;
}

void teamDropItem::InternalSwap(teamDropItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(objid_, other->objid_);
  swap(num_, other->num_);
  swap(bind_, other->bind_);
  swap(duetime_, other->duetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata teamDropItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetTeamPublicDrop_SC::InitAsDefaultInstance() {
}
class MSG_RetTeamPublicDrop_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetTeamPublicDrop_SC>()._has_bits_);
};

MSG_RetTeamPublicDrop_SC::MSG_RetTeamPublicDrop_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetTeamPublicDrop_SC)
}
MSG_RetTeamPublicDrop_SC::MSG_RetTeamPublicDrop_SC(const MSG_RetTeamPublicDrop_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      oneitem_(from.oneitem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetTeamPublicDrop_SC)
}

void MSG_RetTeamPublicDrop_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetTeamPublicDrop_SC_team_2eproto.base);
}

MSG_RetTeamPublicDrop_SC::~MSG_RetTeamPublicDrop_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetTeamPublicDrop_SC)
  SharedDtor();
}

void MSG_RetTeamPublicDrop_SC::SharedDtor() {
}

void MSG_RetTeamPublicDrop_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetTeamPublicDrop_SC& MSG_RetTeamPublicDrop_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetTeamPublicDrop_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetTeamPublicDrop_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetTeamPublicDrop_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oneitem_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetTeamPublicDrop_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Team.teamDropItem oneitem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_oneitem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetTeamPublicDrop_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetTeamPublicDrop_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Team.teamDropItem oneitem = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_oneitem_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_oneitem(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetTeamPublicDrop_SC)
  return target;
}

size_t MSG_RetTeamPublicDrop_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetTeamPublicDrop_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Team.teamDropItem oneitem = 1;
  total_size += 1UL * this->_internal_oneitem_size();
  for (const auto& msg : this->oneitem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetTeamPublicDrop_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetTeamPublicDrop_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetTeamPublicDrop_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetTeamPublicDrop_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetTeamPublicDrop_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetTeamPublicDrop_SC)
    MergeFrom(*source);
  }
}

void MSG_RetTeamPublicDrop_SC::MergeFrom(const MSG_RetTeamPublicDrop_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetTeamPublicDrop_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oneitem_.MergeFrom(from.oneitem_);
}

void MSG_RetTeamPublicDrop_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetTeamPublicDrop_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetTeamPublicDrop_SC::CopyFrom(const MSG_RetTeamPublicDrop_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetTeamPublicDrop_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetTeamPublicDrop_SC::IsInitialized() const {
  return true;
}

void MSG_RetTeamPublicDrop_SC::InternalSwap(MSG_RetTeamPublicDrop_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  oneitem_.InternalSwap(&other->oneitem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetTeamPublicDrop_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChooseTeamDropItem::InitAsDefaultInstance() {
}
class ChooseTeamDropItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ChooseTeamDropItem>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_choose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChooseTeamDropItem::ChooseTeamDropItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.ChooseTeamDropItem)
}
ChooseTeamDropItem::ChooseTeamDropItem(const ChooseTeamDropItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&choose_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(choose_));
  // @@protoc_insertion_point(copy_constructor:Team.ChooseTeamDropItem)
}

void ChooseTeamDropItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChooseTeamDropItem_team_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0u;
  choose_ = 1;
}

ChooseTeamDropItem::~ChooseTeamDropItem() {
  // @@protoc_insertion_point(destructor:Team.ChooseTeamDropItem)
  SharedDtor();
}

void ChooseTeamDropItem::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChooseTeamDropItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChooseTeamDropItem& ChooseTeamDropItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChooseTeamDropItem_team_2eproto.base);
  return *internal_default_instance();
}


void ChooseTeamDropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.ChooseTeamDropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    errcode_ = 0u;
    choose_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChooseTeamDropItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.ChooseTeamDropItem.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Team.ChooseType choose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team::ChooseType_IsValid(val))) {
            _internal_set_choose(static_cast<::Team::ChooseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 errcode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChooseTeamDropItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.ChooseTeamDropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.ChooseTeamDropItem.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional .Team.ChooseType choose = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_choose(), target);
  }

  // optional uint32 errcode = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.ChooseTeamDropItem)
  return target;
}

size_t ChooseTeamDropItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.ChooseTeamDropItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional uint32 errcode = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errcode());
    }

    // optional .Team.ChooseType choose = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_choose());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChooseTeamDropItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.ChooseTeamDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ChooseTeamDropItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChooseTeamDropItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.ChooseTeamDropItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.ChooseTeamDropItem)
    MergeFrom(*source);
  }
}

void ChooseTeamDropItem::MergeFrom(const ChooseTeamDropItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.ChooseTeamDropItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      choose_ = from.choose_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChooseTeamDropItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.ChooseTeamDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChooseTeamDropItem::CopyFrom(const ChooseTeamDropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.ChooseTeamDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChooseTeamDropItem::IsInitialized() const {
  return true;
}

void ChooseTeamDropItem::InternalSwap(ChooseTeamDropItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
  swap(choose_, other->choose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChooseTeamDropItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqChooseTeamDrop_CS::InitAsDefaultInstance() {
}
class MSG_ReqChooseTeamDrop_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqChooseTeamDrop_CS>()._has_bits_);
};

MSG_ReqChooseTeamDrop_CS::MSG_ReqChooseTeamDrop_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqChooseTeamDrop_CS)
}
MSG_ReqChooseTeamDrop_CS::MSG_ReqChooseTeamDrop_CS(const MSG_ReqChooseTeamDrop_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqChooseTeamDrop_CS)
}

void MSG_ReqChooseTeamDrop_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqChooseTeamDrop_CS_team_2eproto.base);
}

MSG_ReqChooseTeamDrop_CS::~MSG_ReqChooseTeamDrop_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqChooseTeamDrop_CS)
  SharedDtor();
}

void MSG_ReqChooseTeamDrop_CS::SharedDtor() {
}

void MSG_ReqChooseTeamDrop_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqChooseTeamDrop_CS& MSG_ReqChooseTeamDrop_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqChooseTeamDrop_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqChooseTeamDrop_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqChooseTeamDrop_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqChooseTeamDrop_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Team.ChooseTeamDropItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqChooseTeamDrop_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqChooseTeamDrop_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Team.ChooseTeamDropItem item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqChooseTeamDrop_CS)
  return target;
}

size_t MSG_ReqChooseTeamDrop_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqChooseTeamDrop_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Team.ChooseTeamDropItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqChooseTeamDrop_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqChooseTeamDrop_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqChooseTeamDrop_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqChooseTeamDrop_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqChooseTeamDrop_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqChooseTeamDrop_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqChooseTeamDrop_CS::MergeFrom(const MSG_ReqChooseTeamDrop_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqChooseTeamDrop_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void MSG_ReqChooseTeamDrop_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqChooseTeamDrop_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqChooseTeamDrop_CS::CopyFrom(const MSG_ReqChooseTeamDrop_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqChooseTeamDrop_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqChooseTeamDrop_CS::IsInitialized() const {
  return true;
}

void MSG_ReqChooseTeamDrop_CS::InternalSwap(MSG_ReqChooseTeamDrop_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqChooseTeamDrop_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetChooseTeamDrop_SC::InitAsDefaultInstance() {
}
class MSG_RetChooseTeamDrop_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetChooseTeamDrop_SC>()._has_bits_);
};

MSG_RetChooseTeamDrop_SC::MSG_RetChooseTeamDrop_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetChooseTeamDrop_SC)
}
MSG_RetChooseTeamDrop_SC::MSG_RetChooseTeamDrop_SC(const MSG_RetChooseTeamDrop_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetChooseTeamDrop_SC)
}

void MSG_RetChooseTeamDrop_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetChooseTeamDrop_SC_team_2eproto.base);
}

MSG_RetChooseTeamDrop_SC::~MSG_RetChooseTeamDrop_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetChooseTeamDrop_SC)
  SharedDtor();
}

void MSG_RetChooseTeamDrop_SC::SharedDtor() {
}

void MSG_RetChooseTeamDrop_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetChooseTeamDrop_SC& MSG_RetChooseTeamDrop_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetChooseTeamDrop_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetChooseTeamDrop_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetChooseTeamDrop_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetChooseTeamDrop_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Team.ChooseTeamDropItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetChooseTeamDrop_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetChooseTeamDrop_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Team.ChooseTeamDropItem item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetChooseTeamDrop_SC)
  return target;
}

size_t MSG_RetChooseTeamDrop_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetChooseTeamDrop_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Team.ChooseTeamDropItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetChooseTeamDrop_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetChooseTeamDrop_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetChooseTeamDrop_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetChooseTeamDrop_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetChooseTeamDrop_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetChooseTeamDrop_SC)
    MergeFrom(*source);
  }
}

void MSG_RetChooseTeamDrop_SC::MergeFrom(const MSG_RetChooseTeamDrop_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetChooseTeamDrop_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
}

void MSG_RetChooseTeamDrop_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetChooseTeamDrop_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetChooseTeamDrop_SC::CopyFrom(const MSG_RetChooseTeamDrop_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetChooseTeamDrop_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetChooseTeamDrop_SC::IsInitialized() const {
  return true;
}

void MSG_RetChooseTeamDrop_SC::InternalSwap(MSG_RetChooseTeamDrop_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetChooseTeamDrop_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSearchTeam_CS::InitAsDefaultInstance() {
}
class MSG_ReqSearchTeam_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSearchTeam_CS>()._has_bits_);
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activityid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nearby(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqSearchTeam_CS::MSG_ReqSearchTeam_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqSearchTeam_CS)
}
MSG_ReqSearchTeam_CS::MSG_ReqSearchTeam_CS(const MSG_ReqSearchTeam_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&teamid_, &from.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&nearby_) -
    reinterpret_cast<char*>(&teamid_)) + sizeof(nearby_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqSearchTeam_CS)
}

void MSG_ReqSearchTeam_CS::SharedCtor() {
  ::memset(&teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nearby_) -
      reinterpret_cast<char*>(&teamid_)) + sizeof(nearby_));
}

MSG_ReqSearchTeam_CS::~MSG_ReqSearchTeam_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqSearchTeam_CS)
  SharedDtor();
}

void MSG_ReqSearchTeam_CS::SharedDtor() {
}

void MSG_ReqSearchTeam_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSearchTeam_CS& MSG_ReqSearchTeam_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSearchTeam_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSearchTeam_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqSearchTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&teamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nearby_) -
        reinterpret_cast<char*>(&teamid_)) + sizeof(nearby_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSearchTeam_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 teamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 activityid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_activityid(&has_bits);
          activityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool nearby = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nearby(&has_bits);
          nearby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSearchTeam_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqSearchTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 teamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_teamid(), target);
  }

  // optional uint32 activityid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_activityid(), target);
  }

  // optional bool nearby = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_nearby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqSearchTeam_CS)
  return target;
}

size_t MSG_ReqSearchTeam_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqSearchTeam_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 teamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid());
    }

    // optional uint32 activityid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_activityid());
    }

    // optional bool nearby = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSearchTeam_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqSearchTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSearchTeam_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSearchTeam_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqSearchTeam_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqSearchTeam_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSearchTeam_CS::MergeFrom(const MSG_ReqSearchTeam_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqSearchTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      activityid_ = from.activityid_;
    }
    if (cached_has_bits & 0x00000004u) {
      nearby_ = from.nearby_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqSearchTeam_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqSearchTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSearchTeam_CS::CopyFrom(const MSG_ReqSearchTeam_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqSearchTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSearchTeam_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSearchTeam_CS::InternalSwap(MSG_ReqSearchTeam_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(teamid_, other->teamid_);
  swap(activityid_, other->activityid_);
  swap(nearby_, other->nearby_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSearchTeam_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSearchTeamByPage_CS::InitAsDefaultInstance() {
}
class MSG_ReqSearchTeamByPage_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSearchTeamByPage_CS>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nearby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqSearchTeamByPage_CS::MSG_ReqSearchTeamByPage_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqSearchTeamByPage_CS)
}
MSG_ReqSearchTeamByPage_CS::MSG_ReqSearchTeamByPage_CS(const MSG_ReqSearchTeamByPage_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&nearby_) -
    reinterpret_cast<char*>(&page_)) + sizeof(nearby_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqSearchTeamByPage_CS)
}

void MSG_ReqSearchTeamByPage_CS::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nearby_) -
      reinterpret_cast<char*>(&page_)) + sizeof(nearby_));
}

MSG_ReqSearchTeamByPage_CS::~MSG_ReqSearchTeamByPage_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqSearchTeamByPage_CS)
  SharedDtor();
}

void MSG_ReqSearchTeamByPage_CS::SharedDtor() {
}

void MSG_ReqSearchTeamByPage_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSearchTeamByPage_CS& MSG_ReqSearchTeamByPage_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSearchTeamByPage_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSearchTeamByPage_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqSearchTeamByPage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nearby_) -
        reinterpret_cast<char*>(&page_)) + sizeof(nearby_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSearchTeamByPage_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool nearby = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nearby(&has_bits);
          nearby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSearchTeamByPage_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqSearchTeamByPage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_page(), target);
  }

  // optional bool nearby = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_nearby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqSearchTeamByPage_CS)
  return target;
}

size_t MSG_ReqSearchTeamByPage_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqSearchTeamByPage_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 page = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page());
    }

    // optional bool nearby = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSearchTeamByPage_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqSearchTeamByPage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSearchTeamByPage_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSearchTeamByPage_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqSearchTeamByPage_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqSearchTeamByPage_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSearchTeamByPage_CS::MergeFrom(const MSG_ReqSearchTeamByPage_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqSearchTeamByPage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      nearby_ = from.nearby_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqSearchTeamByPage_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqSearchTeamByPage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSearchTeamByPage_CS::CopyFrom(const MSG_ReqSearchTeamByPage_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqSearchTeamByPage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSearchTeamByPage_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSearchTeamByPage_CS::InternalSwap(MSG_ReqSearchTeamByPage_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_, other->page_);
  swap(nearby_, other->nearby_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSearchTeamByPage_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetSearchTeam_SC::InitAsDefaultInstance() {
}
class MSG_RetSearchTeam_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetSearchTeam_SC>()._has_bits_);
  static void set_has_totalpage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetSearchTeam_SC::MSG_RetSearchTeam_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetSearchTeam_SC)
}
MSG_RetSearchTeam_SC::MSG_RetSearchTeam_SC(const MSG_RetSearchTeam_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teamlist_(from.teamlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&totalpage_, &from.totalpage_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_) -
    reinterpret_cast<char*>(&totalpage_)) + sizeof(page_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetSearchTeam_SC)
}

void MSG_RetSearchTeam_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetSearchTeam_SC_team_2eproto.base);
  ::memset(&totalpage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_) -
      reinterpret_cast<char*>(&totalpage_)) + sizeof(page_));
}

MSG_RetSearchTeam_SC::~MSG_RetSearchTeam_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetSearchTeam_SC)
  SharedDtor();
}

void MSG_RetSearchTeam_SC::SharedDtor() {
}

void MSG_RetSearchTeam_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetSearchTeam_SC& MSG_RetSearchTeam_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetSearchTeam_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetSearchTeam_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetSearchTeam_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teamlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&totalpage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&page_) -
        reinterpret_cast<char*>(&totalpage_)) + sizeof(page_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetSearchTeam_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 totalpage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_totalpage(&has_bits);
          totalpage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_page(&has_bits);
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Team.MSG_TeamMemeberList_SC teamlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teamlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetSearchTeam_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetSearchTeam_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 totalpage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_totalpage(), target);
  }

  // optional uint32 page = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_page(), target);
  }

  // repeated .Team.MSG_TeamMemeberList_SC teamlist = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teamlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_teamlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetSearchTeam_SC)
  return target;
}

size_t MSG_RetSearchTeam_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetSearchTeam_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Team.MSG_TeamMemeberList_SC teamlist = 3;
  total_size += 1UL * this->_internal_teamlist_size();
  for (const auto& msg : this->teamlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 totalpage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_totalpage());
    }

    // optional uint32 page = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_page());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetSearchTeam_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetSearchTeam_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetSearchTeam_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetSearchTeam_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetSearchTeam_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetSearchTeam_SC)
    MergeFrom(*source);
  }
}

void MSG_RetSearchTeam_SC::MergeFrom(const MSG_RetSearchTeam_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetSearchTeam_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teamlist_.MergeFrom(from.teamlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      totalpage_ = from.totalpage_;
    }
    if (cached_has_bits & 0x00000002u) {
      page_ = from.page_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetSearchTeam_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetSearchTeam_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetSearchTeam_SC::CopyFrom(const MSG_RetSearchTeam_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetSearchTeam_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetSearchTeam_SC::IsInitialized() const {
  return true;
}

void MSG_RetSearchTeam_SC::InternalSwap(MSG_RetSearchTeam_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teamlist_.InternalSwap(&other->teamlist_);
  swap(totalpage_, other->totalpage_);
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetSearchTeam_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqChangeActivityTarget_CS::InitAsDefaultInstance() {
}
class MSG_ReqChangeActivityTarget_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqChangeActivityTarget_CS>()._has_bits_);
  static void set_has_activityid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqChangeActivityTarget_CS::MSG_ReqChangeActivityTarget_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqChangeActivityTarget_CS)
}
MSG_ReqChangeActivityTarget_CS::MSG_ReqChangeActivityTarget_CS(const MSG_ReqChangeActivityTarget_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activityid_ = from.activityid_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqChangeActivityTarget_CS)
}

void MSG_ReqChangeActivityTarget_CS::SharedCtor() {
  activityid_ = 0u;
}

MSG_ReqChangeActivityTarget_CS::~MSG_ReqChangeActivityTarget_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqChangeActivityTarget_CS)
  SharedDtor();
}

void MSG_ReqChangeActivityTarget_CS::SharedDtor() {
}

void MSG_ReqChangeActivityTarget_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqChangeActivityTarget_CS& MSG_ReqChangeActivityTarget_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqChangeActivityTarget_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqChangeActivityTarget_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqChangeActivityTarget_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activityid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqChangeActivityTarget_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 activityid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_activityid(&has_bits);
          activityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqChangeActivityTarget_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqChangeActivityTarget_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 activityid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_activityid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqChangeActivityTarget_CS)
  return target;
}

size_t MSG_ReqChangeActivityTarget_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqChangeActivityTarget_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 activityid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_activityid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqChangeActivityTarget_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqChangeActivityTarget_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqChangeActivityTarget_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqChangeActivityTarget_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqChangeActivityTarget_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqChangeActivityTarget_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqChangeActivityTarget_CS::MergeFrom(const MSG_ReqChangeActivityTarget_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqChangeActivityTarget_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activityid()) {
    _internal_set_activityid(from._internal_activityid());
  }
}

void MSG_ReqChangeActivityTarget_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqChangeActivityTarget_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqChangeActivityTarget_CS::CopyFrom(const MSG_ReqChangeActivityTarget_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqChangeActivityTarget_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqChangeActivityTarget_CS::IsInitialized() const {
  return true;
}

void MSG_ReqChangeActivityTarget_CS::InternalSwap(MSG_ReqChangeActivityTarget_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activityid_, other->activityid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqChangeActivityTarget_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetChangeActivityTarget_SC::InitAsDefaultInstance() {
}
class MSG_RetChangeActivityTarget_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetChangeActivityTarget_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activityid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetChangeActivityTarget_SC::MSG_RetChangeActivityTarget_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetChangeActivityTarget_SC)
}
MSG_RetChangeActivityTarget_SC::MSG_RetChangeActivityTarget_SC(const MSG_RetChangeActivityTarget_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&activityid_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(activityid_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetChangeActivityTarget_SC)
}

void MSG_RetChangeActivityTarget_SC::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activityid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(activityid_));
}

MSG_RetChangeActivityTarget_SC::~MSG_RetChangeActivityTarget_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetChangeActivityTarget_SC)
  SharedDtor();
}

void MSG_RetChangeActivityTarget_SC::SharedDtor() {
}

void MSG_RetChangeActivityTarget_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetChangeActivityTarget_SC& MSG_RetChangeActivityTarget_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetChangeActivityTarget_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetChangeActivityTarget_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetChangeActivityTarget_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&activityid_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(activityid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetChangeActivityTarget_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 activityid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_activityid(&has_bits);
          activityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetChangeActivityTarget_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetChangeActivityTarget_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional uint32 activityid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_activityid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetChangeActivityTarget_SC)
  return target;
}

size_t MSG_RetChangeActivityTarget_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetChangeActivityTarget_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

    // optional uint32 activityid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_activityid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetChangeActivityTarget_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetChangeActivityTarget_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetChangeActivityTarget_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetChangeActivityTarget_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetChangeActivityTarget_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetChangeActivityTarget_SC)
    MergeFrom(*source);
  }
}

void MSG_RetChangeActivityTarget_SC::MergeFrom(const MSG_RetChangeActivityTarget_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetChangeActivityTarget_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      activityid_ = from.activityid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetChangeActivityTarget_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetChangeActivityTarget_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetChangeActivityTarget_SC::CopyFrom(const MSG_RetChangeActivityTarget_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetChangeActivityTarget_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetChangeActivityTarget_SC::IsInitialized() const {
  return true;
}

void MSG_RetChangeActivityTarget_SC::InternalSwap(MSG_RetChangeActivityTarget_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
  swap(activityid_, other->activityid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetChangeActivityTarget_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqMatch_CS::InitAsDefaultInstance() {
}
class MSG_ReqMatch_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqMatch_CS>()._has_bits_);
  static void set_has_activityid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maxlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqMatch_CS::MSG_ReqMatch_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqMatch_CS)
}
MSG_ReqMatch_CS::MSG_ReqMatch_CS(const MSG_ReqMatch_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&activityid_, &from.activityid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxlevel_) -
    reinterpret_cast<char*>(&activityid_)) + sizeof(maxlevel_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqMatch_CS)
}

void MSG_ReqMatch_CS::SharedCtor() {
  ::memset(&activityid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxlevel_) -
      reinterpret_cast<char*>(&activityid_)) + sizeof(maxlevel_));
}

MSG_ReqMatch_CS::~MSG_ReqMatch_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqMatch_CS)
  SharedDtor();
}

void MSG_ReqMatch_CS::SharedDtor() {
}

void MSG_ReqMatch_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqMatch_CS& MSG_ReqMatch_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqMatch_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqMatch_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&activityid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxlevel_) -
        reinterpret_cast<char*>(&activityid_)) + sizeof(maxlevel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqMatch_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 activityid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_activityid(&has_bits);
          activityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 minlevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minlevel(&has_bits);
          minlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxlevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxlevel(&has_bits);
          maxlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqMatch_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 activityid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_activityid(), target);
  }

  // optional uint32 minlevel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minlevel(), target);
  }

  // optional uint32 maxlevel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqMatch_CS)
  return target;
}

size_t MSG_ReqMatch_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqMatch_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 activityid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_activityid());
    }

    // optional uint32 minlevel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_minlevel());
    }

    // optional uint32 maxlevel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxlevel());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqMatch_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqMatch_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqMatch_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqMatch_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqMatch_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqMatch_CS::MergeFrom(const MSG_ReqMatch_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      activityid_ = from.activityid_;
    }
    if (cached_has_bits & 0x00000002u) {
      minlevel_ = from.minlevel_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxlevel_ = from.maxlevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqMatch_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqMatch_CS::CopyFrom(const MSG_ReqMatch_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqMatch_CS::IsInitialized() const {
  return true;
}

void MSG_ReqMatch_CS::InternalSwap(MSG_ReqMatch_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activityid_, other->activityid_);
  swap(minlevel_, other->minlevel_);
  swap(maxlevel_, other->maxlevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqMatch_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetMatch_SC::InitAsDefaultInstance() {
}
class MSG_RetMatch_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetMatch_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_needtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_RetMatch_SC::MSG_RetMatch_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetMatch_SC)
}
MSG_RetMatch_SC::MSG_RetMatch_SC(const MSG_RetMatch_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&starttime_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(starttime_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetMatch_SC)
}

void MSG_RetMatch_SC::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&starttime_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(starttime_));
}

MSG_RetMatch_SC::~MSG_RetMatch_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetMatch_SC)
  SharedDtor();
}

void MSG_RetMatch_SC::SharedDtor() {
}

void MSG_RetMatch_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetMatch_SC& MSG_RetMatch_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetMatch_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetMatch_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&starttime_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(starttime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetMatch_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 needtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_needtime(&has_bits);
          needtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 starttime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetMatch_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional uint32 needtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_needtime(), target);
  }

  // optional uint32 starttime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_starttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetMatch_SC)
  return target;
}

size_t MSG_RetMatch_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetMatch_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

    // optional uint32 needtime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_needtime());
    }

    // optional uint32 starttime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_starttime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetMatch_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetMatch_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetMatch_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetMatch_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetMatch_SC)
    MergeFrom(*source);
  }
}

void MSG_RetMatch_SC::MergeFrom(const MSG_RetMatch_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      needtime_ = from.needtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      starttime_ = from.starttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetMatch_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetMatch_SC::CopyFrom(const MSG_RetMatch_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetMatch_SC::IsInitialized() const {
  return true;
}

void MSG_RetMatch_SC::InternalSwap(MSG_RetMatch_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
  swap(needtime_, other->needtime_);
  swap(starttime_, other->starttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetMatch_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqUnmatch_CS::InitAsDefaultInstance() {
}
class MSG_ReqUnmatch_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqUnmatch_CS>()._has_bits_);
};

MSG_ReqUnmatch_CS::MSG_ReqUnmatch_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqUnmatch_CS)
}
MSG_ReqUnmatch_CS::MSG_ReqUnmatch_CS(const MSG_ReqUnmatch_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqUnmatch_CS)
}

void MSG_ReqUnmatch_CS::SharedCtor() {
}

MSG_ReqUnmatch_CS::~MSG_ReqUnmatch_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqUnmatch_CS)
  SharedDtor();
}

void MSG_ReqUnmatch_CS::SharedDtor() {
}

void MSG_ReqUnmatch_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqUnmatch_CS& MSG_ReqUnmatch_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqUnmatch_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqUnmatch_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqUnmatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqUnmatch_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqUnmatch_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqUnmatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqUnmatch_CS)
  return target;
}

size_t MSG_ReqUnmatch_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqUnmatch_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqUnmatch_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqUnmatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqUnmatch_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqUnmatch_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqUnmatch_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqUnmatch_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqUnmatch_CS::MergeFrom(const MSG_ReqUnmatch_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqUnmatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqUnmatch_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqUnmatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqUnmatch_CS::CopyFrom(const MSG_ReqUnmatch_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqUnmatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqUnmatch_CS::IsInitialized() const {
  return true;
}

void MSG_ReqUnmatch_CS::InternalSwap(MSG_ReqUnmatch_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqUnmatch_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetUnmatch_SC::InitAsDefaultInstance() {
}
class MSG_RetUnmatch_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetUnmatch_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetUnmatch_SC::MSG_RetUnmatch_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetUnmatch_SC)
}
MSG_RetUnmatch_SC::MSG_RetUnmatch_SC(const MSG_RetUnmatch_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetUnmatch_SC)
}

void MSG_RetUnmatch_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_RetUnmatch_SC::~MSG_RetUnmatch_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetUnmatch_SC)
  SharedDtor();
}

void MSG_RetUnmatch_SC::SharedDtor() {
}

void MSG_RetUnmatch_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetUnmatch_SC& MSG_RetUnmatch_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetUnmatch_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetUnmatch_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetUnmatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetUnmatch_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetUnmatch_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetUnmatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetUnmatch_SC)
  return target;
}

size_t MSG_RetUnmatch_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetUnmatch_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetUnmatch_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetUnmatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetUnmatch_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetUnmatch_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetUnmatch_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetUnmatch_SC)
    MergeFrom(*source);
  }
}

void MSG_RetUnmatch_SC::MergeFrom(const MSG_RetUnmatch_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetUnmatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_RetUnmatch_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetUnmatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetUnmatch_SC::CopyFrom(const MSG_RetUnmatch_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetUnmatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetUnmatch_SC::IsInitialized() const {
  return true;
}

void MSG_RetUnmatch_SC::InternalSwap(MSG_RetUnmatch_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetUnmatch_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetNotifyMatchSuccess_SC::InitAsDefaultInstance() {
}
class MSG_RetNotifyMatchSuccess_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetNotifyMatchSuccess_SC>()._has_bits_);
};

MSG_RetNotifyMatchSuccess_SC::MSG_RetNotifyMatchSuccess_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetNotifyMatchSuccess_SC)
}
MSG_RetNotifyMatchSuccess_SC::MSG_RetNotifyMatchSuccess_SC(const MSG_RetNotifyMatchSuccess_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetNotifyMatchSuccess_SC)
}

void MSG_RetNotifyMatchSuccess_SC::SharedCtor() {
}

MSG_RetNotifyMatchSuccess_SC::~MSG_RetNotifyMatchSuccess_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetNotifyMatchSuccess_SC)
  SharedDtor();
}

void MSG_RetNotifyMatchSuccess_SC::SharedDtor() {
}

void MSG_RetNotifyMatchSuccess_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetNotifyMatchSuccess_SC& MSG_RetNotifyMatchSuccess_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetNotifyMatchSuccess_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetNotifyMatchSuccess_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetNotifyMatchSuccess_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetNotifyMatchSuccess_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetNotifyMatchSuccess_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetNotifyMatchSuccess_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetNotifyMatchSuccess_SC)
  return target;
}

size_t MSG_RetNotifyMatchSuccess_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetNotifyMatchSuccess_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetNotifyMatchSuccess_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetNotifyMatchSuccess_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetNotifyMatchSuccess_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetNotifyMatchSuccess_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetNotifyMatchSuccess_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetNotifyMatchSuccess_SC)
    MergeFrom(*source);
  }
}

void MSG_RetNotifyMatchSuccess_SC::MergeFrom(const MSG_RetNotifyMatchSuccess_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetNotifyMatchSuccess_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_RetNotifyMatchSuccess_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetNotifyMatchSuccess_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetNotifyMatchSuccess_SC::CopyFrom(const MSG_RetNotifyMatchSuccess_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetNotifyMatchSuccess_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetNotifyMatchSuccess_SC::IsInitialized() const {
  return true;
}

void MSG_RetNotifyMatchSuccess_SC::InternalSwap(MSG_RetNotifyMatchSuccess_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetNotifyMatchSuccess_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqMemberBackTeam_CS::InitAsDefaultInstance() {
}
class MSG_ReqMemberBackTeam_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqMemberBackTeam_CS>()._has_bits_);
};

MSG_ReqMemberBackTeam_CS::MSG_ReqMemberBackTeam_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqMemberBackTeam_CS)
}
MSG_ReqMemberBackTeam_CS::MSG_ReqMemberBackTeam_CS(const MSG_ReqMemberBackTeam_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqMemberBackTeam_CS)
}

void MSG_ReqMemberBackTeam_CS::SharedCtor() {
}

MSG_ReqMemberBackTeam_CS::~MSG_ReqMemberBackTeam_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqMemberBackTeam_CS)
  SharedDtor();
}

void MSG_ReqMemberBackTeam_CS::SharedDtor() {
}

void MSG_ReqMemberBackTeam_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqMemberBackTeam_CS& MSG_ReqMemberBackTeam_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqMemberBackTeam_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqMemberBackTeam_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqMemberBackTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqMemberBackTeam_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqMemberBackTeam_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqMemberBackTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqMemberBackTeam_CS)
  return target;
}

size_t MSG_ReqMemberBackTeam_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqMemberBackTeam_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqMemberBackTeam_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqMemberBackTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqMemberBackTeam_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqMemberBackTeam_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqMemberBackTeam_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqMemberBackTeam_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqMemberBackTeam_CS::MergeFrom(const MSG_ReqMemberBackTeam_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqMemberBackTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqMemberBackTeam_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqMemberBackTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqMemberBackTeam_CS::CopyFrom(const MSG_ReqMemberBackTeam_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqMemberBackTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqMemberBackTeam_CS::IsInitialized() const {
  return true;
}

void MSG_ReqMemberBackTeam_CS::InternalSwap(MSG_ReqMemberBackTeam_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqMemberBackTeam_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetMemberBackTeam_SC::InitAsDefaultInstance() {
}
class MSG_RetMemberBackTeam_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetMemberBackTeam_SC>()._has_bits_);
  static void set_has_rettype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetMemberBackTeam_SC::MSG_RetMemberBackTeam_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetMemberBackTeam_SC)
}
MSG_RetMemberBackTeam_SC::MSG_RetMemberBackTeam_SC(const MSG_RetMemberBackTeam_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rettype_ = from.rettype_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetMemberBackTeam_SC)
}

void MSG_RetMemberBackTeam_SC::SharedCtor() {
  rettype_ = 0u;
}

MSG_RetMemberBackTeam_SC::~MSG_RetMemberBackTeam_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetMemberBackTeam_SC)
  SharedDtor();
}

void MSG_RetMemberBackTeam_SC::SharedDtor() {
}

void MSG_RetMemberBackTeam_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetMemberBackTeam_SC& MSG_RetMemberBackTeam_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetMemberBackTeam_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetMemberBackTeam_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetMemberBackTeam_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rettype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetMemberBackTeam_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rettype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rettype(&has_bits);
          rettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetMemberBackTeam_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetMemberBackTeam_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rettype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rettype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetMemberBackTeam_SC)
  return target;
}

size_t MSG_RetMemberBackTeam_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetMemberBackTeam_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 rettype = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rettype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetMemberBackTeam_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetMemberBackTeam_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetMemberBackTeam_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetMemberBackTeam_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetMemberBackTeam_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetMemberBackTeam_SC)
    MergeFrom(*source);
  }
}

void MSG_RetMemberBackTeam_SC::MergeFrom(const MSG_RetMemberBackTeam_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetMemberBackTeam_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rettype()) {
    _internal_set_rettype(from._internal_rettype());
  }
}

void MSG_RetMemberBackTeam_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetMemberBackTeam_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetMemberBackTeam_SC::CopyFrom(const MSG_RetMemberBackTeam_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetMemberBackTeam_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetMemberBackTeam_SC::IsInitialized() const {
  return true;
}

void MSG_RetMemberBackTeam_SC::InternalSwap(MSG_RetMemberBackTeam_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(rettype_, other->rettype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetMemberBackTeam_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_updateMemStateToTeam_SC::InitAsDefaultInstance() {
}
class MSG_updateMemStateToTeam_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_updateMemStateToTeam_SC>()._has_bits_);
  static void set_has_memid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sceneid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_updateMemStateToTeam_SC::MSG_updateMemStateToTeam_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_updateMemStateToTeam_SC)
}
MSG_updateMemStateToTeam_SC::MSG_updateMemStateToTeam_SC(const MSG_updateMemStateToTeam_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_memid()) {
    memid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memid_);
  }
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sceneid()) {
    sceneid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_updateMemStateToTeam_SC)
}

void MSG_updateMemStateToTeam_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_updateMemStateToTeam_SC_team_2eproto.base);
  memid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

MSG_updateMemStateToTeam_SC::~MSG_updateMemStateToTeam_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_updateMemStateToTeam_SC)
  SharedDtor();
}

void MSG_updateMemStateToTeam_SC::SharedDtor() {
  memid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sceneid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_updateMemStateToTeam_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_updateMemStateToTeam_SC& MSG_updateMemStateToTeam_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_updateMemStateToTeam_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_updateMemStateToTeam_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_updateMemStateToTeam_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      memid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sceneid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_updateMemStateToTeam_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string memid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_memid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_updateMemStateToTeam_SC.memid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sceneid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sceneid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_updateMemStateToTeam_SC.sceneid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Team.MemState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team::MemState_IsValid(val))) {
            _internal_set_state(static_cast<::Team::MemState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_updateMemStateToTeam_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_updateMemStateToTeam_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string memid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_memid().data(), static_cast<int>(this->_internal_memid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_updateMemStateToTeam_SC.memid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_memid(), target);
  }

  // optional string sceneid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sceneid().data(), static_cast<int>(this->_internal_sceneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_updateMemStateToTeam_SC.sceneid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sceneid(), target);
  }

  // optional .Team.MemState state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_updateMemStateToTeam_SC)
  return target;
}

size_t MSG_updateMemStateToTeam_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_updateMemStateToTeam_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string memid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memid());
    }

    // optional string sceneid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sceneid());
    }

    // optional .Team.MemState state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_updateMemStateToTeam_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_updateMemStateToTeam_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_updateMemStateToTeam_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_updateMemStateToTeam_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_updateMemStateToTeam_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_updateMemStateToTeam_SC)
    MergeFrom(*source);
  }
}

void MSG_updateMemStateToTeam_SC::MergeFrom(const MSG_updateMemStateToTeam_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_updateMemStateToTeam_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      memid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sceneid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_updateMemStateToTeam_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_updateMemStateToTeam_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_updateMemStateToTeam_SC::CopyFrom(const MSG_updateMemStateToTeam_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_updateMemStateToTeam_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_updateMemStateToTeam_SC::IsInitialized() const {
  return true;
}

void MSG_updateMemStateToTeam_SC::InternalSwap(MSG_updateMemStateToTeam_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  memid_.Swap(&other->memid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sceneid_.Swap(&other->sceneid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_updateMemStateToTeam_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqLeaderMapPos_CS::InitAsDefaultInstance() {
}
class MSG_ReqLeaderMapPos_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqLeaderMapPos_CS>()._has_bits_);
};

MSG_ReqLeaderMapPos_CS::MSG_ReqLeaderMapPos_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqLeaderMapPos_CS)
}
MSG_ReqLeaderMapPos_CS::MSG_ReqLeaderMapPos_CS(const MSG_ReqLeaderMapPos_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqLeaderMapPos_CS)
}

void MSG_ReqLeaderMapPos_CS::SharedCtor() {
}

MSG_ReqLeaderMapPos_CS::~MSG_ReqLeaderMapPos_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqLeaderMapPos_CS)
  SharedDtor();
}

void MSG_ReqLeaderMapPos_CS::SharedDtor() {
}

void MSG_ReqLeaderMapPos_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqLeaderMapPos_CS& MSG_ReqLeaderMapPos_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqLeaderMapPos_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqLeaderMapPos_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqLeaderMapPos_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqLeaderMapPos_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqLeaderMapPos_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqLeaderMapPos_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqLeaderMapPos_CS)
  return target;
}

size_t MSG_ReqLeaderMapPos_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqLeaderMapPos_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqLeaderMapPos_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqLeaderMapPos_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqLeaderMapPos_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqLeaderMapPos_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqLeaderMapPos_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqLeaderMapPos_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqLeaderMapPos_CS::MergeFrom(const MSG_ReqLeaderMapPos_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqLeaderMapPos_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqLeaderMapPos_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqLeaderMapPos_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqLeaderMapPos_CS::CopyFrom(const MSG_ReqLeaderMapPos_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqLeaderMapPos_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqLeaderMapPos_CS::IsInitialized() const {
  return true;
}

void MSG_ReqLeaderMapPos_CS::InternalSwap(MSG_ReqLeaderMapPos_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqLeaderMapPos_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetLeaderMapPos_SC::InitAsDefaultInstance() {
  ::Team::_MSG_RetLeaderMapPos_SC_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Team::LeaderPosInfo*>(
      ::Team::LeaderPosInfo::internal_default_instance());
}
class MSG_RetLeaderMapPos_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetLeaderMapPos_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Team::LeaderPosInfo& pos(const MSG_RetLeaderMapPos_SC* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Team::LeaderPosInfo&
MSG_RetLeaderMapPos_SC::_Internal::pos(const MSG_RetLeaderMapPos_SC* msg) {
  return *msg->pos_;
}
MSG_RetLeaderMapPos_SC::MSG_RetLeaderMapPos_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetLeaderMapPos_SC)
}
MSG_RetLeaderMapPos_SC::MSG_RetLeaderMapPos_SC(const MSG_RetLeaderMapPos_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Team::LeaderPosInfo(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetLeaderMapPos_SC)
}

void MSG_RetLeaderMapPos_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetLeaderMapPos_SC_team_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(retcode_));
}

MSG_RetLeaderMapPos_SC::~MSG_RetLeaderMapPos_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetLeaderMapPos_SC)
  SharedDtor();
}

void MSG_RetLeaderMapPos_SC::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void MSG_RetLeaderMapPos_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetLeaderMapPos_SC& MSG_RetLeaderMapPos_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetLeaderMapPos_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetLeaderMapPos_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetLeaderMapPos_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != nullptr);
    pos_->Clear();
  }
  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetLeaderMapPos_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Team.LeaderPosInfo pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetLeaderMapPos_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetLeaderMapPos_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional .Team.LeaderPosInfo pos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetLeaderMapPos_SC)
  return target;
}

size_t MSG_RetLeaderMapPos_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetLeaderMapPos_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Team.LeaderPosInfo pos = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetLeaderMapPos_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetLeaderMapPos_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetLeaderMapPos_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetLeaderMapPos_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetLeaderMapPos_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetLeaderMapPos_SC)
    MergeFrom(*source);
  }
}

void MSG_RetLeaderMapPos_SC::MergeFrom(const MSG_RetLeaderMapPos_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetLeaderMapPos_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::Team::LeaderPosInfo::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      retcode_ = from.retcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetLeaderMapPos_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetLeaderMapPos_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetLeaderMapPos_SC::CopyFrom(const MSG_RetLeaderMapPos_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetLeaderMapPos_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetLeaderMapPos_SC::IsInitialized() const {
  return true;
}

void MSG_RetLeaderMapPos_SC::InternalSwap(MSG_RetLeaderMapPos_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetLeaderMapPos_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LeaderPosInfo::InitAsDefaultInstance() {
  ::Team::_LeaderPosInfo_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Team::MemberPos*>(
      ::Team::MemberPos::internal_default_instance());
}
class LeaderPosInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaderPosInfo>()._has_bits_);
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sceneid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Team::MemberPos& pos(const LeaderPosInfo* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Team::MemberPos&
LeaderPosInfo::_Internal::pos(const LeaderPosInfo* msg) {
  return *msg->pos_;
}
LeaderPosInfo::LeaderPosInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.LeaderPosInfo)
}
LeaderPosInfo::LeaderPosInfo(const LeaderPosInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sceneid()) {
    sceneid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from._internal_has_pos()) {
    pos_ = new ::Team::MemberPos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  valid_ = from.valid_;
  // @@protoc_insertion_point(copy_constructor:Team.LeaderPosInfo)
}

void LeaderPosInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderPosInfo_team_2eproto.base);
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(valid_));
}

LeaderPosInfo::~LeaderPosInfo() {
  // @@protoc_insertion_point(destructor:Team.LeaderPosInfo)
  SharedDtor();
}

void LeaderPosInfo::SharedDtor() {
  sceneid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void LeaderPosInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaderPosInfo& LeaderPosInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderPosInfo_team_2eproto.base);
  return *internal_default_instance();
}


void LeaderPosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.LeaderPosInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sceneid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
  }
  valid_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LeaderPosInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool valid = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_valid(&has_bits);
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sceneid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sceneid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.LeaderPosInfo.sceneid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Team.MemberPos pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaderPosInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.LeaderPosInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool valid = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  // optional string sceneid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sceneid().data(), static_cast<int>(this->_internal_sceneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.LeaderPosInfo.sceneid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sceneid(), target);
  }

  // optional .Team.MemberPos pos = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.LeaderPosInfo)
  return target;
}

size_t LeaderPosInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.LeaderPosInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sceneid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sceneid());
    }

    // optional .Team.MemberPos pos = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional bool valid = 1 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaderPosInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.LeaderPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaderPosInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderPosInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.LeaderPosInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.LeaderPosInfo)
    MergeFrom(*source);
  }
}

void LeaderPosInfo::MergeFrom(const LeaderPosInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.LeaderPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sceneid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pos()->::Team::MemberPos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LeaderPosInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.LeaderPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderPosInfo::CopyFrom(const LeaderPosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.LeaderPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderPosInfo::IsInitialized() const {
  return true;
}

void LeaderPosInfo::InternalSwap(LeaderPosInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sceneid_.Swap(&other->sceneid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(valid_, other->valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderPosInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqChangeMapToLeader_CS::InitAsDefaultInstance() {
  ::Team::_MSG_ReqChangeMapToLeader_CS_default_instance_._instance.get_mutable()->leaderpos_ = const_cast< ::Team::MemberPos*>(
      ::Team::MemberPos::internal_default_instance());
}
class MSG_ReqChangeMapToLeader_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqChangeMapToLeader_CS>()._has_bits_);
  static void set_has_sceneid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Team::MemberPos& leaderpos(const MSG_ReqChangeMapToLeader_CS* msg);
  static void set_has_leaderpos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Team::MemberPos&
MSG_ReqChangeMapToLeader_CS::_Internal::leaderpos(const MSG_ReqChangeMapToLeader_CS* msg) {
  return *msg->leaderpos_;
}
MSG_ReqChangeMapToLeader_CS::MSG_ReqChangeMapToLeader_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqChangeMapToLeader_CS)
}
MSG_ReqChangeMapToLeader_CS::MSG_ReqChangeMapToLeader_CS(const MSG_ReqChangeMapToLeader_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sceneid()) {
    sceneid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
  }
  if (from._internal_has_leaderpos()) {
    leaderpos_ = new ::Team::MemberPos(*from.leaderpos_);
  } else {
    leaderpos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqChangeMapToLeader_CS)
}

void MSG_ReqChangeMapToLeader_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqChangeMapToLeader_CS_team_2eproto.base);
  sceneid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leaderpos_ = nullptr;
}

MSG_ReqChangeMapToLeader_CS::~MSG_ReqChangeMapToLeader_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqChangeMapToLeader_CS)
  SharedDtor();
}

void MSG_ReqChangeMapToLeader_CS::SharedDtor() {
  sceneid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete leaderpos_;
}

void MSG_ReqChangeMapToLeader_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqChangeMapToLeader_CS& MSG_ReqChangeMapToLeader_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqChangeMapToLeader_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqChangeMapToLeader_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqChangeMapToLeader_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sceneid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(leaderpos_ != nullptr);
      leaderpos_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqChangeMapToLeader_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sceneid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sceneid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_ReqChangeMapToLeader_CS.sceneid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Team.MemberPos leaderpos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaderpos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqChangeMapToLeader_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqChangeMapToLeader_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sceneid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sceneid().data(), static_cast<int>(this->_internal_sceneid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_ReqChangeMapToLeader_CS.sceneid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sceneid(), target);
  }

  // optional .Team.MemberPos leaderpos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::leaderpos(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqChangeMapToLeader_CS)
  return target;
}

size_t MSG_ReqChangeMapToLeader_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqChangeMapToLeader_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string sceneid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sceneid());
    }

    // optional .Team.MemberPos leaderpos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leaderpos_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqChangeMapToLeader_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqChangeMapToLeader_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqChangeMapToLeader_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqChangeMapToLeader_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqChangeMapToLeader_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqChangeMapToLeader_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqChangeMapToLeader_CS::MergeFrom(const MSG_ReqChangeMapToLeader_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqChangeMapToLeader_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sceneid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sceneid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_leaderpos()->::Team::MemberPos::MergeFrom(from._internal_leaderpos());
    }
  }
}

void MSG_ReqChangeMapToLeader_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqChangeMapToLeader_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqChangeMapToLeader_CS::CopyFrom(const MSG_ReqChangeMapToLeader_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqChangeMapToLeader_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqChangeMapToLeader_CS::IsInitialized() const {
  return true;
}

void MSG_ReqChangeMapToLeader_CS::InternalSwap(MSG_ReqChangeMapToLeader_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sceneid_.Swap(&other->sceneid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leaderpos_, other->leaderpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqChangeMapToLeader_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetChangeMapToLeader_SC::InitAsDefaultInstance() {
  ::Team::_MSG_RetChangeMapToLeader_SC_default_instance_._instance.get_mutable()->info_ = const_cast< ::Team::LeaderPosInfo*>(
      ::Team::LeaderPosInfo::internal_default_instance());
}
class MSG_RetChangeMapToLeader_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetChangeMapToLeader_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Team::LeaderPosInfo& info(const MSG_RetChangeMapToLeader_SC* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Team::LeaderPosInfo&
MSG_RetChangeMapToLeader_SC::_Internal::info(const MSG_RetChangeMapToLeader_SC* msg) {
  return *msg->info_;
}
MSG_RetChangeMapToLeader_SC::MSG_RetChangeMapToLeader_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetChangeMapToLeader_SC)
}
MSG_RetChangeMapToLeader_SC::MSG_RetChangeMapToLeader_SC(const MSG_RetChangeMapToLeader_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::Team::LeaderPosInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetChangeMapToLeader_SC)
}

void MSG_RetChangeMapToLeader_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetChangeMapToLeader_SC_team_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&info_)) + sizeof(retcode_));
}

MSG_RetChangeMapToLeader_SC::~MSG_RetChangeMapToLeader_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetChangeMapToLeader_SC)
  SharedDtor();
}

void MSG_RetChangeMapToLeader_SC::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void MSG_RetChangeMapToLeader_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetChangeMapToLeader_SC& MSG_RetChangeMapToLeader_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetChangeMapToLeader_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetChangeMapToLeader_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetChangeMapToLeader_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetChangeMapToLeader_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Team.LeaderPosInfo info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetChangeMapToLeader_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetChangeMapToLeader_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional .Team.LeaderPosInfo info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetChangeMapToLeader_SC)
  return target;
}

size_t MSG_RetChangeMapToLeader_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetChangeMapToLeader_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Team.LeaderPosInfo info = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetChangeMapToLeader_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetChangeMapToLeader_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetChangeMapToLeader_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetChangeMapToLeader_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetChangeMapToLeader_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetChangeMapToLeader_SC)
    MergeFrom(*source);
  }
}

void MSG_RetChangeMapToLeader_SC::MergeFrom(const MSG_RetChangeMapToLeader_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetChangeMapToLeader_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_info()->::Team::LeaderPosInfo::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000002u) {
      retcode_ = from.retcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetChangeMapToLeader_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetChangeMapToLeader_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetChangeMapToLeader_SC::CopyFrom(const MSG_RetChangeMapToLeader_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetChangeMapToLeader_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetChangeMapToLeader_SC::IsInitialized() const {
  return true;
}

void MSG_RetChangeMapToLeader_SC::InternalSwap(MSG_RetChangeMapToLeader_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetChangeMapToLeader_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqLeaderAttackTarget_CS::InitAsDefaultInstance() {
}
class MSG_ReqLeaderAttackTarget_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqLeaderAttackTarget_CS>()._has_bits_);
};

MSG_ReqLeaderAttackTarget_CS::MSG_ReqLeaderAttackTarget_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_ReqLeaderAttackTarget_CS)
}
MSG_ReqLeaderAttackTarget_CS::MSG_ReqLeaderAttackTarget_CS(const MSG_ReqLeaderAttackTarget_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_ReqLeaderAttackTarget_CS)
}

void MSG_ReqLeaderAttackTarget_CS::SharedCtor() {
}

MSG_ReqLeaderAttackTarget_CS::~MSG_ReqLeaderAttackTarget_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_ReqLeaderAttackTarget_CS)
  SharedDtor();
}

void MSG_ReqLeaderAttackTarget_CS::SharedDtor() {
}

void MSG_ReqLeaderAttackTarget_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqLeaderAttackTarget_CS& MSG_ReqLeaderAttackTarget_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqLeaderAttackTarget_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqLeaderAttackTarget_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_ReqLeaderAttackTarget_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqLeaderAttackTarget_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqLeaderAttackTarget_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_ReqLeaderAttackTarget_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_ReqLeaderAttackTarget_CS)
  return target;
}

size_t MSG_ReqLeaderAttackTarget_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_ReqLeaderAttackTarget_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqLeaderAttackTarget_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_ReqLeaderAttackTarget_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqLeaderAttackTarget_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqLeaderAttackTarget_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_ReqLeaderAttackTarget_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_ReqLeaderAttackTarget_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqLeaderAttackTarget_CS::MergeFrom(const MSG_ReqLeaderAttackTarget_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_ReqLeaderAttackTarget_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqLeaderAttackTarget_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_ReqLeaderAttackTarget_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqLeaderAttackTarget_CS::CopyFrom(const MSG_ReqLeaderAttackTarget_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_ReqLeaderAttackTarget_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqLeaderAttackTarget_CS::IsInitialized() const {
  return true;
}

void MSG_ReqLeaderAttackTarget_CS::InternalSwap(MSG_ReqLeaderAttackTarget_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqLeaderAttackTarget_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetLeaderAttackTarget_SC::InitAsDefaultInstance() {
  ::Team::_MSG_RetLeaderAttackTarget_SC_default_instance_._instance.get_mutable()->target_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_RetLeaderAttackTarget_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetLeaderAttackTarget_SC>()._has_bits_);
  static const ::msg::EntryIDType& target(const MSG_RetLeaderAttackTarget_SC* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msg::EntryIDType&
MSG_RetLeaderAttackTarget_SC::_Internal::target(const MSG_RetLeaderAttackTarget_SC* msg) {
  return *msg->target_;
}
void MSG_RetLeaderAttackTarget_SC::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_RetLeaderAttackTarget_SC::MSG_RetLeaderAttackTarget_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_RetLeaderAttackTarget_SC)
}
MSG_RetLeaderAttackTarget_SC::MSG_RetLeaderAttackTarget_SC(const MSG_RetLeaderAttackTarget_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::msg::EntryIDType(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Team.MSG_RetLeaderAttackTarget_SC)
}

void MSG_RetLeaderAttackTarget_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetLeaderAttackTarget_SC_team_2eproto.base);
  target_ = nullptr;
}

MSG_RetLeaderAttackTarget_SC::~MSG_RetLeaderAttackTarget_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_RetLeaderAttackTarget_SC)
  SharedDtor();
}

void MSG_RetLeaderAttackTarget_SC::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void MSG_RetLeaderAttackTarget_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetLeaderAttackTarget_SC& MSG_RetLeaderAttackTarget_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetLeaderAttackTarget_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetLeaderAttackTarget_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_RetLeaderAttackTarget_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_ != nullptr);
    target_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetLeaderAttackTarget_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetLeaderAttackTarget_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_RetLeaderAttackTarget_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_RetLeaderAttackTarget_SC)
  return target;
}

size_t MSG_RetLeaderAttackTarget_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_RetLeaderAttackTarget_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .msg.EntryIDType target = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetLeaderAttackTarget_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_RetLeaderAttackTarget_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetLeaderAttackTarget_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetLeaderAttackTarget_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_RetLeaderAttackTarget_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_RetLeaderAttackTarget_SC)
    MergeFrom(*source);
  }
}

void MSG_RetLeaderAttackTarget_SC::MergeFrom(const MSG_RetLeaderAttackTarget_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_RetLeaderAttackTarget_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target()) {
    _internal_mutable_target()->::msg::EntryIDType::MergeFrom(from._internal_target());
  }
}

void MSG_RetLeaderAttackTarget_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_RetLeaderAttackTarget_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetLeaderAttackTarget_SC::CopyFrom(const MSG_RetLeaderAttackTarget_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_RetLeaderAttackTarget_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetLeaderAttackTarget_SC::IsInitialized() const {
  return true;
}

void MSG_RetLeaderAttackTarget_SC::InternalSwap(MSG_RetLeaderAttackTarget_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetLeaderAttackTarget_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_notifyMemberLeaderIntoPublic_SC::InitAsDefaultInstance() {
}
class MSG_notifyMemberLeaderIntoPublic_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_notifyMemberLeaderIntoPublic_SC>()._has_bits_);
};

MSG_notifyMemberLeaderIntoPublic_SC::MSG_notifyMemberLeaderIntoPublic_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_notifyMemberLeaderIntoPublic_SC)
}
MSG_notifyMemberLeaderIntoPublic_SC::MSG_notifyMemberLeaderIntoPublic_SC(const MSG_notifyMemberLeaderIntoPublic_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_notifyMemberLeaderIntoPublic_SC)
}

void MSG_notifyMemberLeaderIntoPublic_SC::SharedCtor() {
}

MSG_notifyMemberLeaderIntoPublic_SC::~MSG_notifyMemberLeaderIntoPublic_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_notifyMemberLeaderIntoPublic_SC)
  SharedDtor();
}

void MSG_notifyMemberLeaderIntoPublic_SC::SharedDtor() {
}

void MSG_notifyMemberLeaderIntoPublic_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_notifyMemberLeaderIntoPublic_SC& MSG_notifyMemberLeaderIntoPublic_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_notifyMemberLeaderIntoPublic_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_notifyMemberLeaderIntoPublic_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_notifyMemberLeaderIntoPublic_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_notifyMemberLeaderIntoPublic_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_notifyMemberLeaderIntoPublic_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_notifyMemberLeaderIntoPublic_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_notifyMemberLeaderIntoPublic_SC)
  return target;
}

size_t MSG_notifyMemberLeaderIntoPublic_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_notifyMemberLeaderIntoPublic_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_notifyMemberLeaderIntoPublic_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_notifyMemberLeaderIntoPublic_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_notifyMemberLeaderIntoPublic_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_notifyMemberLeaderIntoPublic_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_notifyMemberLeaderIntoPublic_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_notifyMemberLeaderIntoPublic_SC)
    MergeFrom(*source);
  }
}

void MSG_notifyMemberLeaderIntoPublic_SC::MergeFrom(const MSG_notifyMemberLeaderIntoPublic_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_notifyMemberLeaderIntoPublic_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_notifyMemberLeaderIntoPublic_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_notifyMemberLeaderIntoPublic_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_notifyMemberLeaderIntoPublic_SC::CopyFrom(const MSG_notifyMemberLeaderIntoPublic_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_notifyMemberLeaderIntoPublic_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_notifyMemberLeaderIntoPublic_SC::IsInitialized() const {
  return true;
}

void MSG_notifyMemberLeaderIntoPublic_SC::InternalSwap(MSG_notifyMemberLeaderIntoPublic_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_notifyMemberLeaderIntoPublic_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_notifyMemberOfflineHosting_SC::InitAsDefaultInstance() {
}
class MSG_notifyMemberOfflineHosting_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_notifyMemberOfflineHosting_SC>()._has_bits_);
};

MSG_notifyMemberOfflineHosting_SC::MSG_notifyMemberOfflineHosting_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_notifyMemberOfflineHosting_SC)
}
MSG_notifyMemberOfflineHosting_SC::MSG_notifyMemberOfflineHosting_SC(const MSG_notifyMemberOfflineHosting_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_notifyMemberOfflineHosting_SC)
}

void MSG_notifyMemberOfflineHosting_SC::SharedCtor() {
}

MSG_notifyMemberOfflineHosting_SC::~MSG_notifyMemberOfflineHosting_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_notifyMemberOfflineHosting_SC)
  SharedDtor();
}

void MSG_notifyMemberOfflineHosting_SC::SharedDtor() {
}

void MSG_notifyMemberOfflineHosting_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_notifyMemberOfflineHosting_SC& MSG_notifyMemberOfflineHosting_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_notifyMemberOfflineHosting_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_notifyMemberOfflineHosting_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_notifyMemberOfflineHosting_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_notifyMemberOfflineHosting_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_notifyMemberOfflineHosting_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_notifyMemberOfflineHosting_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_notifyMemberOfflineHosting_SC)
  return target;
}

size_t MSG_notifyMemberOfflineHosting_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_notifyMemberOfflineHosting_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_notifyMemberOfflineHosting_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_notifyMemberOfflineHosting_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_notifyMemberOfflineHosting_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_notifyMemberOfflineHosting_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_notifyMemberOfflineHosting_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_notifyMemberOfflineHosting_SC)
    MergeFrom(*source);
  }
}

void MSG_notifyMemberOfflineHosting_SC::MergeFrom(const MSG_notifyMemberOfflineHosting_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_notifyMemberOfflineHosting_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_notifyMemberOfflineHosting_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_notifyMemberOfflineHosting_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_notifyMemberOfflineHosting_SC::CopyFrom(const MSG_notifyMemberOfflineHosting_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_notifyMemberOfflineHosting_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_notifyMemberOfflineHosting_SC::IsInitialized() const {
  return true;
}

void MSG_notifyMemberOfflineHosting_SC::InternalSwap(MSG_notifyMemberOfflineHosting_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_notifyMemberOfflineHosting_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_SetMemberPrivilege_CS::InitAsDefaultInstance() {
}
class MSG_Req_SetMemberPrivilege_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_SetMemberPrivilege_CS>()._has_bits_);
  static void set_has_memberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privilege(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_SetMemberPrivilege_CS::MSG_Req_SetMemberPrivilege_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_Req_SetMemberPrivilege_CS)
}
MSG_Req_SetMemberPrivilege_CS::MSG_Req_SetMemberPrivilege_CS(const MSG_Req_SetMemberPrivilege_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    static_cast<size_t>(reinterpret_cast<char*>(&privilege_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(privilege_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_Req_SetMemberPrivilege_CS)
}

void MSG_Req_SetMemberPrivilege_CS::SharedCtor() {
  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(set_));
  privilege_ = 1;
}

MSG_Req_SetMemberPrivilege_CS::~MSG_Req_SetMemberPrivilege_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_Req_SetMemberPrivilege_CS)
  SharedDtor();
}

void MSG_Req_SetMemberPrivilege_CS::SharedDtor() {
}

void MSG_Req_SetMemberPrivilege_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_SetMemberPrivilege_CS& MSG_Req_SetMemberPrivilege_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_SetMemberPrivilege_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_SetMemberPrivilege_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_Req_SetMemberPrivilege_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&memberid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&set_) -
        reinterpret_cast<char*>(&memberid_)) + sizeof(set_));
    privilege_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_SetMemberPrivilege_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 memberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_memberid(&has_bits);
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Team.TeamPrivilege privilege = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team::TeamPrivilege_IsValid(val))) {
            _internal_set_privilege(static_cast<::Team::TeamPrivilege>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_set(&has_bits);
          set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_SetMemberPrivilege_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_Req_SetMemberPrivilege_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 memberid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memberid(), target);
  }

  // optional .Team.TeamPrivilege privilege = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_privilege(), target);
  }

  // optional bool set = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_Req_SetMemberPrivilege_CS)
  return target;
}

size_t MSG_Req_SetMemberPrivilege_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_Req_SetMemberPrivilege_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 memberid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_memberid());
    }

    // optional bool set = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .Team.TeamPrivilege privilege = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_privilege());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_SetMemberPrivilege_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_Req_SetMemberPrivilege_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_SetMemberPrivilege_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_SetMemberPrivilege_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_Req_SetMemberPrivilege_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_Req_SetMemberPrivilege_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_SetMemberPrivilege_CS::MergeFrom(const MSG_Req_SetMemberPrivilege_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_Req_SetMemberPrivilege_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      memberid_ = from.memberid_;
    }
    if (cached_has_bits & 0x00000002u) {
      set_ = from.set_;
    }
    if (cached_has_bits & 0x00000004u) {
      privilege_ = from.privilege_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_SetMemberPrivilege_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_Req_SetMemberPrivilege_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_SetMemberPrivilege_CS::CopyFrom(const MSG_Req_SetMemberPrivilege_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_Req_SetMemberPrivilege_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_SetMemberPrivilege_CS::IsInitialized() const {
  return true;
}

void MSG_Req_SetMemberPrivilege_CS::InternalSwap(MSG_Req_SetMemberPrivilege_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(memberid_, other->memberid_);
  swap(set_, other->set_);
  swap(privilege_, other->privilege_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_SetMemberPrivilege_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_updateTeamMemberPrivilege_SC::InitAsDefaultInstance() {
}
class MSG_updateTeamMemberPrivilege_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_updateTeamMemberPrivilege_SC>()._has_bits_);
  static void set_has_memberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_privilege(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_updateTeamMemberPrivilege_SC::MSG_updateTeamMemberPrivilege_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_updateTeamMemberPrivilege_SC)
}
MSG_updateTeamMemberPrivilege_SC::MSG_updateTeamMemberPrivilege_SC(const MSG_updateTeamMemberPrivilege_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    static_cast<size_t>(reinterpret_cast<char*>(&privilege_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(privilege_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_updateTeamMemberPrivilege_SC)
}

void MSG_updateTeamMemberPrivilege_SC::SharedCtor() {
  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&privilege_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(privilege_));
}

MSG_updateTeamMemberPrivilege_SC::~MSG_updateTeamMemberPrivilege_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_updateTeamMemberPrivilege_SC)
  SharedDtor();
}

void MSG_updateTeamMemberPrivilege_SC::SharedDtor() {
}

void MSG_updateTeamMemberPrivilege_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_updateTeamMemberPrivilege_SC& MSG_updateTeamMemberPrivilege_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_updateTeamMemberPrivilege_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_updateTeamMemberPrivilege_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_updateTeamMemberPrivilege_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&memberid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&privilege_) -
        reinterpret_cast<char*>(&memberid_)) + sizeof(privilege_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_updateTeamMemberPrivilege_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 memberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_memberid(&has_bits);
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 privilege = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_privilege(&has_bits);
          privilege_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_updateTeamMemberPrivilege_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_updateTeamMemberPrivilege_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 memberid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memberid(), target);
  }

  // optional uint32 privilege = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_privilege(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_updateTeamMemberPrivilege_SC)
  return target;
}

size_t MSG_updateTeamMemberPrivilege_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_updateTeamMemberPrivilege_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 memberid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_memberid());
    }

    // optional uint32 privilege = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_privilege());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_updateTeamMemberPrivilege_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_updateTeamMemberPrivilege_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_updateTeamMemberPrivilege_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_updateTeamMemberPrivilege_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_updateTeamMemberPrivilege_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_updateTeamMemberPrivilege_SC)
    MergeFrom(*source);
  }
}

void MSG_updateTeamMemberPrivilege_SC::MergeFrom(const MSG_updateTeamMemberPrivilege_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_updateTeamMemberPrivilege_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      memberid_ = from.memberid_;
    }
    if (cached_has_bits & 0x00000002u) {
      privilege_ = from.privilege_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_updateTeamMemberPrivilege_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_updateTeamMemberPrivilege_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_updateTeamMemberPrivilege_SC::CopyFrom(const MSG_updateTeamMemberPrivilege_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_updateTeamMemberPrivilege_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_updateTeamMemberPrivilege_SC::IsInitialized() const {
  return true;
}

void MSG_updateTeamMemberPrivilege_SC::InternalSwap(MSG_updateTeamMemberPrivilege_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(memberid_, other->memberid_);
  swap(privilege_, other->privilege_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_updateTeamMemberPrivilege_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_checkUserTeamInfo_CS::InitAsDefaultInstance() {
}
class MSG_Req_checkUserTeamInfo_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_checkUserTeamInfo_CS>()._has_bits_);
  static void set_has_memberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_checkUserTeamInfo_CS::MSG_Req_checkUserTeamInfo_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_Req_checkUserTeamInfo_CS)
}
MSG_Req_checkUserTeamInfo_CS::MSG_Req_checkUserTeamInfo_CS(const MSG_Req_checkUserTeamInfo_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memberid_ = from.memberid_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_Req_checkUserTeamInfo_CS)
}

void MSG_Req_checkUserTeamInfo_CS::SharedCtor() {
  memberid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Req_checkUserTeamInfo_CS::~MSG_Req_checkUserTeamInfo_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_Req_checkUserTeamInfo_CS)
  SharedDtor();
}

void MSG_Req_checkUserTeamInfo_CS::SharedDtor() {
}

void MSG_Req_checkUserTeamInfo_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_checkUserTeamInfo_CS& MSG_Req_checkUserTeamInfo_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_checkUserTeamInfo_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_checkUserTeamInfo_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_Req_checkUserTeamInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memberid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_checkUserTeamInfo_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 memberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_memberid(&has_bits);
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_checkUserTeamInfo_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_Req_checkUserTeamInfo_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 memberid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memberid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_Req_checkUserTeamInfo_CS)
  return target;
}

size_t MSG_Req_checkUserTeamInfo_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_Req_checkUserTeamInfo_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 memberid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_memberid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_checkUserTeamInfo_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_Req_checkUserTeamInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_checkUserTeamInfo_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_checkUserTeamInfo_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_Req_checkUserTeamInfo_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_Req_checkUserTeamInfo_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_checkUserTeamInfo_CS::MergeFrom(const MSG_Req_checkUserTeamInfo_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_Req_checkUserTeamInfo_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_memberid()) {
    _internal_set_memberid(from._internal_memberid());
  }
}

void MSG_Req_checkUserTeamInfo_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_Req_checkUserTeamInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_checkUserTeamInfo_CS::CopyFrom(const MSG_Req_checkUserTeamInfo_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_Req_checkUserTeamInfo_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_checkUserTeamInfo_CS::IsInitialized() const {
  return true;
}

void MSG_Req_checkUserTeamInfo_CS::InternalSwap(MSG_Req_checkUserTeamInfo_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(memberid_, other->memberid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_checkUserTeamInfo_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_checkUserTeamInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_checkUserTeamInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_checkUserTeamInfo_SC>()._has_bits_);
  static void set_has_memberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_checkUserTeamInfo_SC::MSG_Ret_checkUserTeamInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_Ret_checkUserTeamInfo_SC)
}
MSG_Ret_checkUserTeamInfo_SC::MSG_Ret_checkUserTeamInfo_SC(const MSG_Ret_checkUserTeamInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&memberid_, &from.memberid_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_) -
    reinterpret_cast<char*>(&memberid_)) + sizeof(online_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_Ret_checkUserTeamInfo_SC)
}

void MSG_Ret_checkUserTeamInfo_SC::SharedCtor() {
  ::memset(&memberid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_) -
      reinterpret_cast<char*>(&memberid_)) + sizeof(online_));
}

MSG_Ret_checkUserTeamInfo_SC::~MSG_Ret_checkUserTeamInfo_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_Ret_checkUserTeamInfo_SC)
  SharedDtor();
}

void MSG_Ret_checkUserTeamInfo_SC::SharedDtor() {
}

void MSG_Ret_checkUserTeamInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_checkUserTeamInfo_SC& MSG_Ret_checkUserTeamInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_checkUserTeamInfo_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_checkUserTeamInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_Ret_checkUserTeamInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&memberid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&online_) -
        reinterpret_cast<char*>(&memberid_)) + sizeof(online_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_checkUserTeamInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 memberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_memberid(&has_bits);
          memberid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 teamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_online(&has_bits);
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_checkUserTeamInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_Ret_checkUserTeamInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 memberid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_memberid(), target);
  }

  // optional uint64 teamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_teamid(), target);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_Ret_checkUserTeamInfo_SC)
  return target;
}

size_t MSG_Ret_checkUserTeamInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_Ret_checkUserTeamInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 memberid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_memberid());
    }

    // optional uint64 teamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_teamid());
    }

    // optional bool online = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_checkUserTeamInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_Ret_checkUserTeamInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_checkUserTeamInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_checkUserTeamInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_Ret_checkUserTeamInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_Ret_checkUserTeamInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_checkUserTeamInfo_SC::MergeFrom(const MSG_Ret_checkUserTeamInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_Ret_checkUserTeamInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      memberid_ = from.memberid_;
    }
    if (cached_has_bits & 0x00000002u) {
      teamid_ = from.teamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      online_ = from.online_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_checkUserTeamInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_Ret_checkUserTeamInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_checkUserTeamInfo_SC::CopyFrom(const MSG_Ret_checkUserTeamInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_Ret_checkUserTeamInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_checkUserTeamInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_checkUserTeamInfo_SC::InternalSwap(MSG_Ret_checkUserTeamInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(memberid_, other->memberid_);
  swap(teamid_, other->teamid_);
  swap(online_, other->online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_checkUserTeamInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_DismissTeam_CS::InitAsDefaultInstance() {
}
class MSG_Req_DismissTeam_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_DismissTeam_CS>()._has_bits_);
};

MSG_Req_DismissTeam_CS::MSG_Req_DismissTeam_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_Req_DismissTeam_CS)
}
MSG_Req_DismissTeam_CS::MSG_Req_DismissTeam_CS(const MSG_Req_DismissTeam_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Team.MSG_Req_DismissTeam_CS)
}

void MSG_Req_DismissTeam_CS::SharedCtor() {
}

MSG_Req_DismissTeam_CS::~MSG_Req_DismissTeam_CS() {
  // @@protoc_insertion_point(destructor:Team.MSG_Req_DismissTeam_CS)
  SharedDtor();
}

void MSG_Req_DismissTeam_CS::SharedDtor() {
}

void MSG_Req_DismissTeam_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_DismissTeam_CS& MSG_Req_DismissTeam_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_DismissTeam_CS_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_DismissTeam_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_Req_DismissTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_DismissTeam_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_DismissTeam_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_Req_DismissTeam_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_Req_DismissTeam_CS)
  return target;
}

size_t MSG_Req_DismissTeam_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_Req_DismissTeam_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_DismissTeam_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_Req_DismissTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_DismissTeam_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_DismissTeam_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_Req_DismissTeam_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_Req_DismissTeam_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_DismissTeam_CS::MergeFrom(const MSG_Req_DismissTeam_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_Req_DismissTeam_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_DismissTeam_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_Req_DismissTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_DismissTeam_CS::CopyFrom(const MSG_Req_DismissTeam_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_Req_DismissTeam_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_DismissTeam_CS::IsInitialized() const {
  return true;
}

void MSG_Req_DismissTeam_CS::InternalSwap(MSG_Req_DismissTeam_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_DismissTeam_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NotifyTeamDismiss_SC::InitAsDefaultInstance() {
}
class MSG_NotifyTeamDismiss_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NotifyTeamDismiss_SC>()._has_bits_);
  static void set_has_suc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_NotifyTeamDismiss_SC::MSG_NotifyTeamDismiss_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_NotifyTeamDismiss_SC)
}
MSG_NotifyTeamDismiss_SC::MSG_NotifyTeamDismiss_SC(const MSG_NotifyTeamDismiss_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  suc_ = from.suc_;
  // @@protoc_insertion_point(copy_constructor:Team.MSG_NotifyTeamDismiss_SC)
}

void MSG_NotifyTeamDismiss_SC::SharedCtor() {
  suc_ = false;
}

MSG_NotifyTeamDismiss_SC::~MSG_NotifyTeamDismiss_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_NotifyTeamDismiss_SC)
  SharedDtor();
}

void MSG_NotifyTeamDismiss_SC::SharedDtor() {
}

void MSG_NotifyTeamDismiss_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NotifyTeamDismiss_SC& MSG_NotifyTeamDismiss_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NotifyTeamDismiss_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_NotifyTeamDismiss_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_NotifyTeamDismiss_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suc_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NotifyTeamDismiss_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool suc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_suc(&has_bits);
          suc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NotifyTeamDismiss_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_NotifyTeamDismiss_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool suc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_suc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_NotifyTeamDismiss_SC)
  return target;
}

size_t MSG_NotifyTeamDismiss_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_NotifyTeamDismiss_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool suc = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NotifyTeamDismiss_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_NotifyTeamDismiss_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NotifyTeamDismiss_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NotifyTeamDismiss_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_NotifyTeamDismiss_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_NotifyTeamDismiss_SC)
    MergeFrom(*source);
  }
}

void MSG_NotifyTeamDismiss_SC::MergeFrom(const MSG_NotifyTeamDismiss_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_NotifyTeamDismiss_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_suc()) {
    _internal_set_suc(from._internal_suc());
  }
}

void MSG_NotifyTeamDismiss_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_NotifyTeamDismiss_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NotifyTeamDismiss_SC::CopyFrom(const MSG_NotifyTeamDismiss_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_NotifyTeamDismiss_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NotifyTeamDismiss_SC::IsInitialized() const {
  return true;
}

void MSG_NotifyTeamDismiss_SC::InternalSwap(MSG_NotifyTeamDismiss_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(suc_, other->suc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NotifyTeamDismiss_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_updateTeamMemberAvatar_SC::InitAsDefaultInstance() {
}
class MSG_updateTeamMemberAvatar_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_updateTeamMemberAvatar_SC>()._has_bits_);
  static void set_has_mememberid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hairstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_haircolor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_headstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bodystyle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_coat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_avatarid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

MSG_updateTeamMemberAvatar_SC::MSG_updateTeamMemberAvatar_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Team.MSG_updateTeamMemberAvatar_SC)
}
MSG_updateTeamMemberAvatar_SC::MSG_updateTeamMemberAvatar_SC(const MSG_updateTeamMemberAvatar_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mememberid()) {
    mememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mememberid_);
  }
  ::memcpy(&hairstyle_, &from.hairstyle_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatarid_) -
    reinterpret_cast<char*>(&hairstyle_)) + sizeof(avatarid_));
  // @@protoc_insertion_point(copy_constructor:Team.MSG_updateTeamMemberAvatar_SC)
}

void MSG_updateTeamMemberAvatar_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_updateTeamMemberAvatar_SC_team_2eproto.base);
  mememberid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hairstyle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarid_) -
      reinterpret_cast<char*>(&hairstyle_)) + sizeof(avatarid_));
}

MSG_updateTeamMemberAvatar_SC::~MSG_updateTeamMemberAvatar_SC() {
  // @@protoc_insertion_point(destructor:Team.MSG_updateTeamMemberAvatar_SC)
  SharedDtor();
}

void MSG_updateTeamMemberAvatar_SC::SharedDtor() {
  mememberid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_updateTeamMemberAvatar_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_updateTeamMemberAvatar_SC& MSG_updateTeamMemberAvatar_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_updateTeamMemberAvatar_SC_team_2eproto.base);
  return *internal_default_instance();
}


void MSG_updateTeamMemberAvatar_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Team.MSG_updateTeamMemberAvatar_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mememberid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&hairstyle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avatarid_) -
        reinterpret_cast<char*>(&hairstyle_)) + sizeof(avatarid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_updateTeamMemberAvatar_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string mememberid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mememberid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Team.MSG_updateTeamMemberAvatar_SC.mememberid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hairstyle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hairstyle(&has_bits);
          hairstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 haircolor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_haircolor(&has_bits);
          haircolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 headstyle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_headstyle(&has_bits);
          headstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bodystyle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bodystyle(&has_bits);
          bodystyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 antenna = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_antenna(&has_bits);
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 coat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_coat(&has_bits);
          coat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avatarid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_avatarid(&has_bits);
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_updateTeamMemberAvatar_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Team.MSG_updateTeamMemberAvatar_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mememberid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mememberid().data(), static_cast<int>(this->_internal_mememberid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Team.MSG_updateTeamMemberAvatar_SC.mememberid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mememberid(), target);
  }

  // optional uint32 hairstyle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hairstyle(), target);
  }

  // optional uint32 haircolor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_haircolor(), target);
  }

  // optional uint32 headstyle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_headstyle(), target);
  }

  // optional uint32 bodystyle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bodystyle(), target);
  }

  // optional uint32 antenna = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_antenna(), target);
  }

  // optional uint32 coat = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_coat(), target);
  }

  // optional uint32 avatarid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_avatarid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Team.MSG_updateTeamMemberAvatar_SC)
  return target;
}

size_t MSG_updateTeamMemberAvatar_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Team.MSG_updateTeamMemberAvatar_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string mememberid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mememberid());
    }

    // optional uint32 hairstyle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hairstyle());
    }

    // optional uint32 haircolor = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_haircolor());
    }

    // optional uint32 headstyle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_headstyle());
    }

    // optional uint32 bodystyle = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bodystyle());
    }

    // optional uint32 antenna = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_antenna());
    }

    // optional uint32 coat = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coat());
    }

    // optional uint32 avatarid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avatarid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_updateTeamMemberAvatar_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Team.MSG_updateTeamMemberAvatar_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_updateTeamMemberAvatar_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_updateTeamMemberAvatar_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Team.MSG_updateTeamMemberAvatar_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Team.MSG_updateTeamMemberAvatar_SC)
    MergeFrom(*source);
  }
}

void MSG_updateTeamMemberAvatar_SC::MergeFrom(const MSG_updateTeamMemberAvatar_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Team.MSG_updateTeamMemberAvatar_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mememberid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mememberid_);
    }
    if (cached_has_bits & 0x00000002u) {
      hairstyle_ = from.hairstyle_;
    }
    if (cached_has_bits & 0x00000004u) {
      haircolor_ = from.haircolor_;
    }
    if (cached_has_bits & 0x00000008u) {
      headstyle_ = from.headstyle_;
    }
    if (cached_has_bits & 0x00000010u) {
      bodystyle_ = from.bodystyle_;
    }
    if (cached_has_bits & 0x00000020u) {
      antenna_ = from.antenna_;
    }
    if (cached_has_bits & 0x00000040u) {
      coat_ = from.coat_;
    }
    if (cached_has_bits & 0x00000080u) {
      avatarid_ = from.avatarid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_updateTeamMemberAvatar_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Team.MSG_updateTeamMemberAvatar_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_updateTeamMemberAvatar_SC::CopyFrom(const MSG_updateTeamMemberAvatar_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Team.MSG_updateTeamMemberAvatar_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_updateTeamMemberAvatar_SC::IsInitialized() const {
  return true;
}

void MSG_updateTeamMemberAvatar_SC::InternalSwap(MSG_updateTeamMemberAvatar_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mememberid_.Swap(&other->mememberid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hairstyle_, other->hairstyle_);
  swap(haircolor_, other->haircolor_);
  swap(headstyle_, other->headstyle_);
  swap(bodystyle_, other->bodystyle_);
  swap(antenna_, other->antenna_);
  swap(coat_, other->coat_);
  swap(avatarid_, other->avatarid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_updateTeamMemberAvatar_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Team
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Team::MSG_CreateTeam_CS* Arena::CreateMaybeMessage< ::Team::MSG_CreateTeam_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_CreateTeam_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::Memember* Arena::CreateMaybeMessage< ::Team::Memember >(Arena* arena) {
  return Arena::CreateInternal< ::Team::Memember >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_TeamMemeberList_CS* Arena::CreateMaybeMessage< ::Team::MSG_TeamMemeberList_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_TeamMemeberList_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_TeamMemeberList_SC* Arena::CreateMaybeMessage< ::Team::MSG_TeamMemeberList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_TeamMemeberList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::OneTeam* Arena::CreateMaybeMessage< ::Team::OneTeam >(Arena* arena) {
  return Arena::CreateInternal< ::Team::OneTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_Team_List_CS* Arena::CreateMaybeMessage< ::Team::MSG_Team_List_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_Team_List_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_Team_List_SC* Arena::CreateMaybeMessage< ::Team::MSG_Team_List_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_Team_List_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_Join_Team_CS* Arena::CreateMaybeMessage< ::Team::MSG_Join_Team_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_Join_Team_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_Join_Team_SC* Arena::CreateMaybeMessage< ::Team::MSG_Join_Team_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_Join_Team_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqJoinTeamNotifyLeader_SC* Arena::CreateMaybeMessage< ::Team::MSG_ReqJoinTeamNotifyLeader_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqJoinTeamNotifyLeader_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_AnswerJoinTeam_CS* Arena::CreateMaybeMessage< ::Team::MSG_AnswerJoinTeam_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_AnswerJoinTeam_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_AnswerJoinTeam_SC* Arena::CreateMaybeMessage< ::Team::MSG_AnswerJoinTeam_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_AnswerJoinTeam_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqApplyList_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqApplyList_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqApplyList_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqApplyList_SC* Arena::CreateMaybeMessage< ::Team::MSG_ReqApplyList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqApplyList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqDelMemember_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqDelMemember_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqDelMemember_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqDelMemember_SC* Arena::CreateMaybeMessage< ::Team::MSG_ReqDelMemember_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqDelMemember_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqLanchVoteOut_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqLanchVoteOut_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqLanchVoteOut_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqLanchVoteOut_SC* Arena::CreateMaybeMessage< ::Team::MSG_ReqLanchVoteOut_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqLanchVoteOut_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqVote_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqVote_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqVote_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqChangeLeader_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqChangeLeader_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqChangeLeader_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqChangeLeader_SC* Arena::CreateMaybeMessage< ::Team::MSG_ReqChangeLeader_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqChangeLeader_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqNearByUnteamedPlayer_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqNearByUnteamedPlayer_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqNearByUnteamedPlayer_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqNearByUnteamedPlayer_SC* Arena::CreateMaybeMessage< ::Team::MSG_ReqNearByUnteamedPlayer_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqNearByUnteamedPlayer_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_InviteIntoTeam_CS* Arena::CreateMaybeMessage< ::Team::MSG_InviteIntoTeam_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_InviteIntoTeam_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_InviteIntoTeam_SC* Arena::CreateMaybeMessage< ::Team::MSG_InviteIntoTeam_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_InviteIntoTeam_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_AnswerInviteTeam_CS* Arena::CreateMaybeMessage< ::Team::MSG_AnswerInviteTeam_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_AnswerInviteTeam_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_AddMemember_SC* Arena::CreateMaybeMessage< ::Team::MSG_AddMemember_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_AddMemember_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_LeaderIgnoreNotice_CS* Arena::CreateMaybeMessage< ::Team::MSG_LeaderIgnoreNotice_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_LeaderIgnoreNotice_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_updateTeamMememberHp_SC* Arena::CreateMaybeMessage< ::Team::MSG_updateTeamMememberHp_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_updateTeamMememberHp_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_updateTeamMememberCareer_SC* Arena::CreateMaybeMessage< ::Team::MSG_updateTeamMememberCareer_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_updateTeamMememberCareer_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_updateTeamMemeberHero_SC* Arena::CreateMaybeMessage< ::Team::MSG_updateTeamMemeberHero_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_updateTeamMemeberHero_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_updateTeamMememberLevel_SC* Arena::CreateMaybeMessage< ::Team::MSG_updateTeamMememberLevel_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_updateTeamMememberLevel_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_updateTeamMemberFight_SC* Arena::CreateMaybeMessage< ::Team::MSG_updateTeamMemberFight_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_updateTeamMemberFight_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqTeamMemberPos_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqTeamMemberPos_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqTeamMemberPos_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MemberPos* Arena::CreateMaybeMessage< ::Team::MemberPos >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MemberPos >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetTeamMemberPos_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetTeamMemberPos_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetTeamMemberPos_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetNearByUnteamedInvite_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetNearByUnteamedInvite_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetNearByUnteamedInvite_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetNewApply_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetNewApply_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetNewApply_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::teamDropItem* Arena::CreateMaybeMessage< ::Team::teamDropItem >(Arena* arena) {
  return Arena::CreateInternal< ::Team::teamDropItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetTeamPublicDrop_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetTeamPublicDrop_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetTeamPublicDrop_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::ChooseTeamDropItem* Arena::CreateMaybeMessage< ::Team::ChooseTeamDropItem >(Arena* arena) {
  return Arena::CreateInternal< ::Team::ChooseTeamDropItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqChooseTeamDrop_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqChooseTeamDrop_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqChooseTeamDrop_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetChooseTeamDrop_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetChooseTeamDrop_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetChooseTeamDrop_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqSearchTeam_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqSearchTeam_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqSearchTeam_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqSearchTeamByPage_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqSearchTeamByPage_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqSearchTeamByPage_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetSearchTeam_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetSearchTeam_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetSearchTeam_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqChangeActivityTarget_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqChangeActivityTarget_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqChangeActivityTarget_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetChangeActivityTarget_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetChangeActivityTarget_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetChangeActivityTarget_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqMatch_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqMatch_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqMatch_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetMatch_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetMatch_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetMatch_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqUnmatch_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqUnmatch_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqUnmatch_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetUnmatch_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetUnmatch_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetUnmatch_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetNotifyMatchSuccess_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetNotifyMatchSuccess_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetNotifyMatchSuccess_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqMemberBackTeam_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqMemberBackTeam_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqMemberBackTeam_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetMemberBackTeam_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetMemberBackTeam_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetMemberBackTeam_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_updateMemStateToTeam_SC* Arena::CreateMaybeMessage< ::Team::MSG_updateMemStateToTeam_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_updateMemStateToTeam_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqLeaderMapPos_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqLeaderMapPos_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqLeaderMapPos_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetLeaderMapPos_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetLeaderMapPos_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetLeaderMapPos_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::LeaderPosInfo* Arena::CreateMaybeMessage< ::Team::LeaderPosInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Team::LeaderPosInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqChangeMapToLeader_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqChangeMapToLeader_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqChangeMapToLeader_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetChangeMapToLeader_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetChangeMapToLeader_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetChangeMapToLeader_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_ReqLeaderAttackTarget_CS* Arena::CreateMaybeMessage< ::Team::MSG_ReqLeaderAttackTarget_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_ReqLeaderAttackTarget_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_RetLeaderAttackTarget_SC* Arena::CreateMaybeMessage< ::Team::MSG_RetLeaderAttackTarget_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_RetLeaderAttackTarget_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_notifyMemberLeaderIntoPublic_SC* Arena::CreateMaybeMessage< ::Team::MSG_notifyMemberLeaderIntoPublic_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_notifyMemberLeaderIntoPublic_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_notifyMemberOfflineHosting_SC* Arena::CreateMaybeMessage< ::Team::MSG_notifyMemberOfflineHosting_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_notifyMemberOfflineHosting_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_Req_SetMemberPrivilege_CS* Arena::CreateMaybeMessage< ::Team::MSG_Req_SetMemberPrivilege_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_Req_SetMemberPrivilege_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_updateTeamMemberPrivilege_SC* Arena::CreateMaybeMessage< ::Team::MSG_updateTeamMemberPrivilege_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_updateTeamMemberPrivilege_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_Req_checkUserTeamInfo_CS* Arena::CreateMaybeMessage< ::Team::MSG_Req_checkUserTeamInfo_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_Req_checkUserTeamInfo_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_Ret_checkUserTeamInfo_SC* Arena::CreateMaybeMessage< ::Team::MSG_Ret_checkUserTeamInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_Ret_checkUserTeamInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_Req_DismissTeam_CS* Arena::CreateMaybeMessage< ::Team::MSG_Req_DismissTeam_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_Req_DismissTeam_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_NotifyTeamDismiss_SC* Arena::CreateMaybeMessage< ::Team::MSG_NotifyTeamDismiss_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_NotifyTeamDismiss_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Team::MSG_updateTeamMemberAvatar_SC* Arena::CreateMaybeMessage< ::Team::MSG_updateTeamMemberAvatar_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Team::MSG_updateTeamMemberAvatar_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
