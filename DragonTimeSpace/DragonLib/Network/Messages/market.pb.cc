// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market.proto

#include "market.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_t_Object_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Item_market_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OneMarket_market_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_market_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SelledItem_market_2eproto;
namespace market {
class ItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Item> _instance;
} _Item_default_instance_;
class OneMarketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OneMarket> _instance;
} _OneMarket_default_instance_;
class MSG_ReqMarketItemList_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqMarketItemList_CS> _instance;
} _MSG_ReqMarketItemList_CS_default_instance_;
class MSG_RetMarketItemList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetMarketItemList_SC> _instance;
} _MSG_RetMarketItemList_SC_default_instance_;
class MSG_ReqBuyMarketItem_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBuyMarketItem_CS> _instance;
} _MSG_ReqBuyMarketItem_CS_default_instance_;
class MSG_RetBuyMarketItem_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetBuyMarketItem_SC> _instance;
} _MSG_RetBuyMarketItem_SC_default_instance_;
class SelledItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelledItem> _instance;
} _SelledItem_default_instance_;
class MSG_UserSelledItemList_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_UserSelledItemList_CSC> _instance;
} _MSG_UserSelledItemList_CSC_default_instance_;
class MSG_ReqBuySelledItem_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBuySelledItem_CS> _instance;
} _MSG_ReqBuySelledItem_CS_default_instance_;
class MSG_RetBuySelledItem_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetBuySelledItem_SC> _instance;
} _MSG_RetBuySelledItem_SC_default_instance_;
class MSG_ReqSellItem_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSellItem_CS> _instance;
} _MSG_ReqSellItem_CS_default_instance_;
class MSG_RetSellItem_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetSellItem_SC> _instance;
} _MSG_RetSellItem_SC_default_instance_;
class MSG_ExchangeRatio_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ExchangeRatio_CSC> _instance;
} _MSG_ExchangeRatio_CSC_default_instance_;
class MSG_RefreshMarketItem_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RefreshMarketItem_SC> _instance;
} _MSG_RefreshMarketItem_SC_default_instance_;
}  // namespace market
static void InitDefaultsscc_info_Item_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_Item_default_instance_;
    new (ptr) ::market::Item();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::Item::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Item_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Item_market_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ExchangeRatio_CSC_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_ExchangeRatio_CSC_default_instance_;
    new (ptr) ::market::MSG_ExchangeRatio_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_ExchangeRatio_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ExchangeRatio_CSC_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ExchangeRatio_CSC_market_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RefreshMarketItem_SC_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_RefreshMarketItem_SC_default_instance_;
    new (ptr) ::market::MSG_RefreshMarketItem_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_RefreshMarketItem_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RefreshMarketItem_SC_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RefreshMarketItem_SC_market_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqBuyMarketItem_CS_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_ReqBuyMarketItem_CS_default_instance_;
    new (ptr) ::market::MSG_ReqBuyMarketItem_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_ReqBuyMarketItem_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBuyMarketItem_CS_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBuyMarketItem_CS_market_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqBuySelledItem_CS_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_ReqBuySelledItem_CS_default_instance_;
    new (ptr) ::market::MSG_ReqBuySelledItem_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_ReqBuySelledItem_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBuySelledItem_CS_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBuySelledItem_CS_market_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqMarketItemList_CS_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_ReqMarketItemList_CS_default_instance_;
    new (ptr) ::market::MSG_ReqMarketItemList_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_ReqMarketItemList_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqMarketItemList_CS_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqMarketItemList_CS_market_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSellItem_CS_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_ReqSellItem_CS_default_instance_;
    new (ptr) ::market::MSG_ReqSellItem_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_ReqSellItem_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSellItem_CS_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSellItem_CS_market_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetBuyMarketItem_SC_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_RetBuyMarketItem_SC_default_instance_;
    new (ptr) ::market::MSG_RetBuyMarketItem_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_RetBuyMarketItem_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetBuyMarketItem_SC_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetBuyMarketItem_SC_market_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetBuySelledItem_SC_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_RetBuySelledItem_SC_default_instance_;
    new (ptr) ::market::MSG_RetBuySelledItem_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_RetBuySelledItem_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetBuySelledItem_SC_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetBuySelledItem_SC_market_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetMarketItemList_SC_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_RetMarketItemList_SC_default_instance_;
    new (ptr) ::market::MSG_RetMarketItemList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_RetMarketItemList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetMarketItemList_SC_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetMarketItemList_SC_market_2eproto}, {
      &scc_info_OneMarket_market_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetSellItem_SC_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_RetSellItem_SC_default_instance_;
    new (ptr) ::market::MSG_RetSellItem_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_RetSellItem_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetSellItem_SC_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetSellItem_SC_market_2eproto}, {}};

static void InitDefaultsscc_info_MSG_UserSelledItemList_CSC_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_MSG_UserSelledItemList_CSC_default_instance_;
    new (ptr) ::market::MSG_UserSelledItemList_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::MSG_UserSelledItemList_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_UserSelledItemList_CSC_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_UserSelledItemList_CSC_market_2eproto}, {
      &scc_info_SelledItem_market_2eproto.base,}};

static void InitDefaultsscc_info_OneMarket_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_OneMarket_default_instance_;
    new (ptr) ::market::OneMarket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::OneMarket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OneMarket_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OneMarket_market_2eproto}, {
      &scc_info_Item_market_2eproto.base,}};

static void InitDefaultsscc_info_SelledItem_market_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::market::_SelledItem_default_instance_;
    new (ptr) ::market::SelledItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::market::SelledItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SelledItem_market_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SelledItem_market_2eproto}, {
      &scc_info_t_Object_object_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_market_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_market_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_market_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_market_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::market::Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::Item, id_),
  PROTOBUF_FIELD_OFFSET(::market::Item, itemid_),
  PROTOBUF_FIELD_OFFSET(::market::Item, discount_),
  PROTOBUF_FIELD_OFFSET(::market::Item, curnum_),
  PROTOBUF_FIELD_OFFSET(::market::Item, maxnum_),
  PROTOBUF_FIELD_OFFSET(::market::Item, costid_),
  PROTOBUF_FIELD_OFFSET(::market::Item, costnum_),
  PROTOBUF_FIELD_OFFSET(::market::Item, bind_),
  PROTOBUF_FIELD_OFFSET(::market::Item, skillid_),
  PROTOBUF_FIELD_OFFSET(::market::Item, skilllv_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::market::OneMarket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::OneMarket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::OneMarket, id_),
  PROTOBUF_FIELD_OFFSET(::market::OneMarket, type_),
  PROTOBUF_FIELD_OFFSET(::market::OneMarket, itemlist_),
  PROTOBUF_FIELD_OFFSET(::market::OneMarket, refreshtype_),
  PROTOBUF_FIELD_OFFSET(::market::OneMarket, refreshtime_),
  PROTOBUF_FIELD_OFFSET(::market::OneMarket, subtype_),
  1,
  4,
  ~0u,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqMarketItemList_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqMarketItemList_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqMarketItemList_CS, marketid_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetMarketItemList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetMarketItemList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetMarketItemList_SC, marketdetail_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetMarketItemList_SC, guildskilllv_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqBuyMarketItem_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqBuyMarketItem_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqBuyMarketItem_CS, marketid_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqBuyMarketItem_CS, id_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqBuyMarketItem_CS, itemid_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqBuyMarketItem_CS, itemnum_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetBuyMarketItem_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetBuyMarketItem_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetBuyMarketItem_SC, errcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::market::SelledItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::SelledItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::SelledItem, item_),
  PROTOBUF_FIELD_OFFSET(::market::SelledItem, selltime_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::market::MSG_UserSelledItemList_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_UserSelledItemList_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_UserSelledItemList_CSC, objs_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqBuySelledItem_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqBuySelledItem_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqBuySelledItem_CS, index_),
  0,
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetBuySelledItem_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetBuySelledItem_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetBuySelledItem_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqSellItem_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqSellItem_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_ReqSellItem_CS, thisid_),
  0,
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetSellItem_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetSellItem_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_RetSellItem_SC, retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::market::MSG_ExchangeRatio_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_ExchangeRatio_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_ExchangeRatio_CSC, tone2nations_),
  0,
  PROTOBUF_FIELD_OFFSET(::market::MSG_RefreshMarketItem_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_RefreshMarketItem_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::market::MSG_RefreshMarketItem_SC, marketid_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_RefreshMarketItem_SC, id_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_RefreshMarketItem_SC, itemid_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_RefreshMarketItem_SC, curnum_),
  PROTOBUF_FIELD_OFFSET(::market::MSG_RefreshMarketItem_SC, maxnum_),
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::market::Item)},
  { 25, 36, sizeof(::market::OneMarket)},
  { 42, 48, sizeof(::market::MSG_ReqMarketItemList_CS)},
  { 49, 56, sizeof(::market::MSG_RetMarketItemList_SC)},
  { 58, 67, sizeof(::market::MSG_ReqBuyMarketItem_CS)},
  { 71, 77, sizeof(::market::MSG_RetBuyMarketItem_SC)},
  { 78, 85, sizeof(::market::SelledItem)},
  { 87, 93, sizeof(::market::MSG_UserSelledItemList_CSC)},
  { 94, 100, sizeof(::market::MSG_ReqBuySelledItem_CS)},
  { 101, 107, sizeof(::market::MSG_RetBuySelledItem_SC)},
  { 108, 114, sizeof(::market::MSG_ReqSellItem_CS)},
  { 115, 121, sizeof(::market::MSG_RetSellItem_SC)},
  { 122, 128, sizeof(::market::MSG_ExchangeRatio_CSC)},
  { 129, 139, sizeof(::market::MSG_RefreshMarketItem_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_OneMarket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_ReqMarketItemList_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_RetMarketItemList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_ReqBuyMarketItem_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_RetBuyMarketItem_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_SelledItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_UserSelledItemList_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_ReqBuySelledItem_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_RetBuySelledItem_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_ReqSellItem_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_RetSellItem_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_ExchangeRatio_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::market::_MSG_RefreshMarketItem_SC_default_instance_),
};

const char descriptor_table_protodef_market_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014market.proto\022\006market\032\014object.proto\"\245\001\n"
  "\004Item\022\n\n\002id\030\001 \001(\r\022\016\n\006itemid\030\002 \001(\r\022\020\n\010dis"
  "count\030\003 \001(\r\022\016\n\006curnum\030\004 \001(\r\022\016\n\006maxnum\030\005 "
  "\001(\r\022\016\n\006costid\030\006 \001(\r\022\017\n\007costnum\030\007 \001(\r\022\014\n\004"
  "bind\030\010 \001(\r\022\017\n\007skillid\030\t \001(\r\022\017\n\007skilllv\030\n"
  " \001(\r\"\224\001\n\tOneMarket\022\n\n\002id\030\001 \001(\r\022 \n\004type\030\002"
  " \001(\0162\022.market.MarketType\022\036\n\010itemlist\030\003 \003"
  "(\0132\014.market.Item\022\023\n\013refreshtype\030\004 \001(\r\022\023\n"
  "\013refreshtime\030\005 \001(\t\022\017\n\007subtype\030\006 \001(\r\",\n\030M"
  "SG_ReqMarketItemList_CS\022\020\n\010marketid\030\001 \003("
  "\r\"Y\n\030MSG_RetMarketItemList_SC\022\'\n\014marketd"
  "etail\030\001 \003(\0132\021.market.OneMarket\022\024\n\014guilds"
  "killlv\030\002 \001(\r\"X\n\027MSG_ReqBuyMarketItem_CS\022"
  "\020\n\010marketid\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\016\n\006itemid\030"
  "\003 \001(\r\022\017\n\007itemnum\030\004 \001(\r\"*\n\027MSG_RetBuyMark"
  "etItem_SC\022\017\n\007errcode\030\001 \001(\r\";\n\nSelledItem"
  "\022\033\n\004item\030\001 \001(\0132\r.Obj.t_Object\022\020\n\010selltim"
  "e\030\002 \001(\r\">\n\032MSG_UserSelledItemList_CSC\022 \n"
  "\004objs\030\001 \003(\0132\022.market.SelledItem\"(\n\027MSG_R"
  "eqBuySelledItem_CS\022\r\n\005index\030\001 \001(\r\"*\n\027MSG"
  "_RetBuySelledItem_SC\022\017\n\007retcode\030\001 \001(\r\"$\n"
  "\022MSG_ReqSellItem_CS\022\016\n\006thisid\030\001 \001(\t\"%\n\022M"
  "SG_RetSellItem_SC\022\017\n\007retcode\030\001 \001(\r\"-\n\025MS"
  "G_ExchangeRatio_CSC\022\024\n\014tone2nations\030\001 \001("
  "\r\"h\n\030MSG_RefreshMarketItem_SC\022\020\n\010marketi"
  "d\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\016\n\006itemid\030\003 \001(\r\022\016\n\006c"
  "urnum\030\004 \001(\r\022\016\n\006maxnum\030\005 \001(\r*\212\001\n\nMarketTy"
  "pe\022\020\n\014MarketType_1\020\001\022\020\n\014MarketType_2\020\002\022\020"
  "\n\014MarketType_3\020\003\022\020\n\014MarketType_4\020\004\022\020\n\014Ma"
  "rketType_5\020\005\022\020\n\014MarketType_6\020\006\022\020\n\014Market"
  "Type_7\020\007"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_market_2eproto_deps[1] = {
  &::descriptor_table_object_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_market_2eproto_sccs[14] = {
  &scc_info_Item_market_2eproto.base,
  &scc_info_MSG_ExchangeRatio_CSC_market_2eproto.base,
  &scc_info_MSG_RefreshMarketItem_SC_market_2eproto.base,
  &scc_info_MSG_ReqBuyMarketItem_CS_market_2eproto.base,
  &scc_info_MSG_ReqBuySelledItem_CS_market_2eproto.base,
  &scc_info_MSG_ReqMarketItemList_CS_market_2eproto.base,
  &scc_info_MSG_ReqSellItem_CS_market_2eproto.base,
  &scc_info_MSG_RetBuyMarketItem_SC_market_2eproto.base,
  &scc_info_MSG_RetBuySelledItem_SC_market_2eproto.base,
  &scc_info_MSG_RetMarketItemList_SC_market_2eproto.base,
  &scc_info_MSG_RetSellItem_SC_market_2eproto.base,
  &scc_info_MSG_UserSelledItemList_CSC_market_2eproto.base,
  &scc_info_OneMarket_market_2eproto.base,
  &scc_info_SelledItem_market_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_market_2eproto_once;
static bool descriptor_table_market_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_2eproto = {
  &descriptor_table_market_2eproto_initialized, descriptor_table_protodef_market_2eproto, "market.proto", 1208,
  &descriptor_table_market_2eproto_once, descriptor_table_market_2eproto_sccs, descriptor_table_market_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_market_2eproto::offsets,
  file_level_metadata_market_2eproto, 14, file_level_enum_descriptors_market_2eproto, file_level_service_descriptors_market_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_market_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_market_2eproto)), true);
namespace market {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_market_2eproto);
  return file_level_enum_descriptors_market_2eproto[0];
}
bool MarketType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Item::InitAsDefaultInstance() {
}
class Item::_Internal {
 public:
  using HasBits = decltype(std::declval<Item>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_discount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxnum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_costid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_costnum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_bind(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_skillid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_skilllv(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

Item::Item()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skilllv_) -
    reinterpret_cast<char*>(&id_)) + sizeof(skilllv_));
  // @@protoc_insertion_point(copy_constructor:market.Item)
}

void Item::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skilllv_) -
      reinterpret_cast<char*>(&id_)) + sizeof(skilllv_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:market.Item)
  SharedDtor();
}

void Item::SharedDtor() {
}

void Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Item& Item::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Item_market_2eproto.base);
  return *internal_default_instance();
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:market.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bind_) -
        reinterpret_cast<char*>(&id_)) + sizeof(bind_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&skillid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skilllv_) -
        reinterpret_cast<char*>(&skillid_)) + sizeof(skilllv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 itemid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 discount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_discount(&has_bits);
          discount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 curnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_curnum(&has_bits);
          curnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_maxnum(&has_bits);
          maxnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 costid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_costid(&has_bits);
          costid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 costnum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_costnum(&has_bits);
          costnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bind = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_bind(&has_bits);
          bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skillid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_skillid(&has_bits);
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skilllv = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_skilllv(&has_bits);
          skilllv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_itemid(), target);
  }

  // optional uint32 discount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_discount(), target);
  }

  // optional uint32 curnum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_curnum(), target);
  }

  // optional uint32 maxnum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxnum(), target);
  }

  // optional uint32 costid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_costid(), target);
  }

  // optional uint32 costnum = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_costnum(), target);
  }

  // optional uint32 bind = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_bind(), target);
  }

  // optional uint32 skillid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_skillid(), target);
  }

  // optional uint32 skilllv = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_skilllv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 itemid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_itemid());
    }

    // optional uint32 discount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_discount());
    }

    // optional uint32 curnum = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curnum());
    }

    // optional uint32 maxnum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxnum());
    }

    // optional uint32 costid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_costid());
    }

    // optional uint32 costnum = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_costnum());
    }

    // optional uint32 bind = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bind());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 skillid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skillid());
    }

    // optional uint32 skilllv = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skilllv());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.Item)
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      discount_ = from.discount_;
    }
    if (cached_has_bits & 0x00000008u) {
      curnum_ = from.curnum_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxnum_ = from.maxnum_;
    }
    if (cached_has_bits & 0x00000020u) {
      costid_ = from.costid_;
    }
    if (cached_has_bits & 0x00000040u) {
      costnum_ = from.costnum_;
    }
    if (cached_has_bits & 0x00000080u) {
      bind_ = from.bind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000200u) {
      skilllv_ = from.skilllv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(itemid_, other->itemid_);
  swap(discount_, other->discount_);
  swap(curnum_, other->curnum_);
  swap(maxnum_, other->maxnum_);
  swap(costid_, other->costid_);
  swap(costnum_, other->costnum_);
  swap(bind_, other->bind_);
  swap(skillid_, other->skillid_);
  swap(skilllv_, other->skilllv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OneMarket::InitAsDefaultInstance() {
}
class OneMarket::_Internal {
 public:
  using HasBits = decltype(std::declval<OneMarket>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_refreshtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_refreshtime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_subtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

OneMarket::OneMarket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.OneMarket)
}
OneMarket::OneMarket(const OneMarket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      itemlist_(from.itemlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  refreshtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_refreshtime()) {
    refreshtime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.refreshtime_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:market.OneMarket)
}

void OneMarket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OneMarket_market_2eproto.base);
  refreshtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtype_) -
      reinterpret_cast<char*>(&id_)) + sizeof(subtype_));
  type_ = 1;
}

OneMarket::~OneMarket() {
  // @@protoc_insertion_point(destructor:market.OneMarket)
  SharedDtor();
}

void OneMarket::SharedDtor() {
  refreshtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OneMarket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OneMarket& OneMarket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OneMarket_market_2eproto.base);
  return *internal_default_instance();
}


void OneMarket::Clear() {
// @@protoc_insertion_point(message_clear_start:market.OneMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    refreshtime_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subtype_) -
        reinterpret_cast<char*>(&id_)) + sizeof(subtype_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* OneMarket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .market.MarketType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::market::MarketType_IsValid(val))) {
            _internal_set_type(static_cast<::market::MarketType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .market.Item itemlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 refreshtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_refreshtype(&has_bits);
          refreshtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string refreshtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_refreshtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "market.OneMarket.refreshtime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subtype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_subtype(&has_bits);
          subtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OneMarket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.OneMarket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .market.MarketType type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .market.Item itemlist = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_itemlist(i), target, stream);
  }

  // optional uint32 refreshtype = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_refreshtype(), target);
  }

  // optional string refreshtime = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_refreshtime().data(), static_cast<int>(this->_internal_refreshtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "market.OneMarket.refreshtime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_refreshtime(), target);
  }

  // optional uint32 subtype = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_subtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.OneMarket)
  return target;
}

size_t OneMarket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.OneMarket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market.Item itemlist = 3;
  total_size += 1UL * this->_internal_itemlist_size();
  for (const auto& msg : this->itemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string refreshtime = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_refreshtime());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 refreshtype = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_refreshtype());
    }

    // optional uint32 subtype = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subtype());
    }

    // optional .market.MarketType type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OneMarket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.OneMarket)
  GOOGLE_DCHECK_NE(&from, this);
  const OneMarket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OneMarket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.OneMarket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.OneMarket)
    MergeFrom(*source);
  }
}

void OneMarket::MergeFrom(const OneMarket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.OneMarket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemlist_.MergeFrom(from.itemlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      refreshtime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.refreshtime_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      refreshtype_ = from.refreshtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      subtype_ = from.subtype_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneMarket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.OneMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneMarket::CopyFrom(const OneMarket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.OneMarket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneMarket::IsInitialized() const {
  return true;
}

void OneMarket::InternalSwap(OneMarket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemlist_.InternalSwap(&other->itemlist_);
  refreshtime_.Swap(&other->refreshtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(refreshtype_, other->refreshtype_);
  swap(subtype_, other->subtype_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OneMarket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqMarketItemList_CS::InitAsDefaultInstance() {
}
class MSG_ReqMarketItemList_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqMarketItemList_CS>()._has_bits_);
};

MSG_ReqMarketItemList_CS::MSG_ReqMarketItemList_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_ReqMarketItemList_CS)
}
MSG_ReqMarketItemList_CS::MSG_ReqMarketItemList_CS(const MSG_ReqMarketItemList_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      marketid_(from.marketid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:market.MSG_ReqMarketItemList_CS)
}

void MSG_ReqMarketItemList_CS::SharedCtor() {
}

MSG_ReqMarketItemList_CS::~MSG_ReqMarketItemList_CS() {
  // @@protoc_insertion_point(destructor:market.MSG_ReqMarketItemList_CS)
  SharedDtor();
}

void MSG_ReqMarketItemList_CS::SharedDtor() {
}

void MSG_ReqMarketItemList_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqMarketItemList_CS& MSG_ReqMarketItemList_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqMarketItemList_CS_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqMarketItemList_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_ReqMarketItemList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketid_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqMarketItemList_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 marketid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_marketid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_marketid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqMarketItemList_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_ReqMarketItemList_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 marketid = 1;
  for (int i = 0, n = this->_internal_marketid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_marketid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_ReqMarketItemList_CS)
  return target;
}

size_t MSG_ReqMarketItemList_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_ReqMarketItemList_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 marketid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->marketid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_marketid_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqMarketItemList_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_ReqMarketItemList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqMarketItemList_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqMarketItemList_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_ReqMarketItemList_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_ReqMarketItemList_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqMarketItemList_CS::MergeFrom(const MSG_ReqMarketItemList_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_ReqMarketItemList_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marketid_.MergeFrom(from.marketid_);
}

void MSG_ReqMarketItemList_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_ReqMarketItemList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqMarketItemList_CS::CopyFrom(const MSG_ReqMarketItemList_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_ReqMarketItemList_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqMarketItemList_CS::IsInitialized() const {
  return true;
}

void MSG_ReqMarketItemList_CS::InternalSwap(MSG_ReqMarketItemList_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  marketid_.InternalSwap(&other->marketid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqMarketItemList_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetMarketItemList_SC::InitAsDefaultInstance() {
}
class MSG_RetMarketItemList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetMarketItemList_SC>()._has_bits_);
  static void set_has_guildskilllv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetMarketItemList_SC::MSG_RetMarketItemList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_RetMarketItemList_SC)
}
MSG_RetMarketItemList_SC::MSG_RetMarketItemList_SC(const MSG_RetMarketItemList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      marketdetail_(from.marketdetail_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildskilllv_ = from.guildskilllv_;
  // @@protoc_insertion_point(copy_constructor:market.MSG_RetMarketItemList_SC)
}

void MSG_RetMarketItemList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetMarketItemList_SC_market_2eproto.base);
  guildskilllv_ = 0u;
}

MSG_RetMarketItemList_SC::~MSG_RetMarketItemList_SC() {
  // @@protoc_insertion_point(destructor:market.MSG_RetMarketItemList_SC)
  SharedDtor();
}

void MSG_RetMarketItemList_SC::SharedDtor() {
}

void MSG_RetMarketItemList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetMarketItemList_SC& MSG_RetMarketItemList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetMarketItemList_SC_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetMarketItemList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_RetMarketItemList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  marketdetail_.Clear();
  guildskilllv_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetMarketItemList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .market.OneMarket marketdetail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_marketdetail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 guildskilllv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_guildskilllv(&has_bits);
          guildskilllv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetMarketItemList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_RetMarketItemList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .market.OneMarket marketdetail = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_marketdetail_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_marketdetail(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 guildskilllv = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guildskilllv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_RetMarketItemList_SC)
  return target;
}

size_t MSG_RetMarketItemList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_RetMarketItemList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market.OneMarket marketdetail = 1;
  total_size += 1UL * this->_internal_marketdetail_size();
  for (const auto& msg : this->marketdetail_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 guildskilllv = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guildskilllv());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetMarketItemList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_RetMarketItemList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetMarketItemList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetMarketItemList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_RetMarketItemList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_RetMarketItemList_SC)
    MergeFrom(*source);
  }
}

void MSG_RetMarketItemList_SC::MergeFrom(const MSG_RetMarketItemList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_RetMarketItemList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  marketdetail_.MergeFrom(from.marketdetail_);
  if (from._internal_has_guildskilllv()) {
    _internal_set_guildskilllv(from._internal_guildskilllv());
  }
}

void MSG_RetMarketItemList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_RetMarketItemList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetMarketItemList_SC::CopyFrom(const MSG_RetMarketItemList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_RetMarketItemList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetMarketItemList_SC::IsInitialized() const {
  return true;
}

void MSG_RetMarketItemList_SC::InternalSwap(MSG_RetMarketItemList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  marketdetail_.InternalSwap(&other->marketdetail_);
  swap(guildskilllv_, other->guildskilllv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetMarketItemList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBuyMarketItem_CS::InitAsDefaultInstance() {
}
class MSG_ReqBuyMarketItem_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBuyMarketItem_CS>()._has_bits_);
  static void set_has_marketid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itemnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_ReqBuyMarketItem_CS::MSG_ReqBuyMarketItem_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_ReqBuyMarketItem_CS)
}
MSG_ReqBuyMarketItem_CS::MSG_ReqBuyMarketItem_CS(const MSG_ReqBuyMarketItem_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&marketid_, &from.marketid_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemnum_) -
    reinterpret_cast<char*>(&marketid_)) + sizeof(itemnum_));
  // @@protoc_insertion_point(copy_constructor:market.MSG_ReqBuyMarketItem_CS)
}

void MSG_ReqBuyMarketItem_CS::SharedCtor() {
  ::memset(&marketid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemnum_) -
      reinterpret_cast<char*>(&marketid_)) + sizeof(itemnum_));
}

MSG_ReqBuyMarketItem_CS::~MSG_ReqBuyMarketItem_CS() {
  // @@protoc_insertion_point(destructor:market.MSG_ReqBuyMarketItem_CS)
  SharedDtor();
}

void MSG_ReqBuyMarketItem_CS::SharedDtor() {
}

void MSG_ReqBuyMarketItem_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBuyMarketItem_CS& MSG_ReqBuyMarketItem_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBuyMarketItem_CS_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBuyMarketItem_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_ReqBuyMarketItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&marketid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemnum_) -
        reinterpret_cast<char*>(&marketid_)) + sizeof(itemnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBuyMarketItem_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 marketid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_marketid(&has_bits);
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 itemid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 itemnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_itemnum(&has_bits);
          itemnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBuyMarketItem_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_ReqBuyMarketItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 marketid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_marketid(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional uint32 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_itemid(), target);
  }

  // optional uint32 itemnum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_itemnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_ReqBuyMarketItem_CS)
  return target;
}

size_t MSG_ReqBuyMarketItem_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_ReqBuyMarketItem_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 marketid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_marketid());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 itemid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_itemid());
    }

    // optional uint32 itemnum = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_itemnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBuyMarketItem_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_ReqBuyMarketItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBuyMarketItem_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBuyMarketItem_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_ReqBuyMarketItem_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_ReqBuyMarketItem_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqBuyMarketItem_CS::MergeFrom(const MSG_ReqBuyMarketItem_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_ReqBuyMarketItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      marketid_ = from.marketid_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      itemnum_ = from.itemnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqBuyMarketItem_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_ReqBuyMarketItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBuyMarketItem_CS::CopyFrom(const MSG_ReqBuyMarketItem_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_ReqBuyMarketItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBuyMarketItem_CS::IsInitialized() const {
  return true;
}

void MSG_ReqBuyMarketItem_CS::InternalSwap(MSG_ReqBuyMarketItem_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(marketid_, other->marketid_);
  swap(id_, other->id_);
  swap(itemid_, other->itemid_);
  swap(itemnum_, other->itemnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBuyMarketItem_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetBuyMarketItem_SC::InitAsDefaultInstance() {
}
class MSG_RetBuyMarketItem_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetBuyMarketItem_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetBuyMarketItem_SC::MSG_RetBuyMarketItem_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_RetBuyMarketItem_SC)
}
MSG_RetBuyMarketItem_SC::MSG_RetBuyMarketItem_SC(const MSG_RetBuyMarketItem_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:market.MSG_RetBuyMarketItem_SC)
}

void MSG_RetBuyMarketItem_SC::SharedCtor() {
  errcode_ = 0u;
}

MSG_RetBuyMarketItem_SC::~MSG_RetBuyMarketItem_SC() {
  // @@protoc_insertion_point(destructor:market.MSG_RetBuyMarketItem_SC)
  SharedDtor();
}

void MSG_RetBuyMarketItem_SC::SharedDtor() {
}

void MSG_RetBuyMarketItem_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetBuyMarketItem_SC& MSG_RetBuyMarketItem_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetBuyMarketItem_SC_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetBuyMarketItem_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_RetBuyMarketItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetBuyMarketItem_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetBuyMarketItem_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_RetBuyMarketItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_RetBuyMarketItem_SC)
  return target;
}

size_t MSG_RetBuyMarketItem_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_RetBuyMarketItem_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 errcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetBuyMarketItem_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_RetBuyMarketItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetBuyMarketItem_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetBuyMarketItem_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_RetBuyMarketItem_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_RetBuyMarketItem_SC)
    MergeFrom(*source);
  }
}

void MSG_RetBuyMarketItem_SC::MergeFrom(const MSG_RetBuyMarketItem_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_RetBuyMarketItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errcode()) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void MSG_RetBuyMarketItem_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_RetBuyMarketItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetBuyMarketItem_SC::CopyFrom(const MSG_RetBuyMarketItem_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_RetBuyMarketItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetBuyMarketItem_SC::IsInitialized() const {
  return true;
}

void MSG_RetBuyMarketItem_SC::InternalSwap(MSG_RetBuyMarketItem_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetBuyMarketItem_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelledItem::InitAsDefaultInstance() {
  ::market::_SelledItem_default_instance_._instance.get_mutable()->item_ = const_cast< ::Obj::t_Object*>(
      ::Obj::t_Object::internal_default_instance());
}
class SelledItem::_Internal {
 public:
  using HasBits = decltype(std::declval<SelledItem>()._has_bits_);
  static const ::Obj::t_Object& item(const SelledItem* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selltime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Obj::t_Object&
SelledItem::_Internal::item(const SelledItem* msg) {
  return *msg->item_;
}
void SelledItem::clear_item() {
  if (item_ != nullptr) item_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SelledItem::SelledItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.SelledItem)
}
SelledItem::SelledItem(const SelledItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::Obj::t_Object(*from.item_);
  } else {
    item_ = nullptr;
  }
  selltime_ = from.selltime_;
  // @@protoc_insertion_point(copy_constructor:market.SelledItem)
}

void SelledItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelledItem_market_2eproto.base);
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selltime_) -
      reinterpret_cast<char*>(&item_)) + sizeof(selltime_));
}

SelledItem::~SelledItem() {
  // @@protoc_insertion_point(destructor:market.SelledItem)
  SharedDtor();
}

void SelledItem::SharedDtor() {
  if (this != internal_default_instance()) delete item_;
}

void SelledItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelledItem& SelledItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelledItem_market_2eproto.base);
  return *internal_default_instance();
}


void SelledItem::Clear() {
// @@protoc_insertion_point(message_clear_start:market.SelledItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_ != nullptr);
    item_->Clear();
  }
  selltime_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SelledItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Obj.t_Object item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selltime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_selltime(&has_bits);
          selltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelledItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.SelledItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Obj.t_Object item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item(this), target, stream);
  }

  // optional uint32 selltime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_selltime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.SelledItem)
  return target;
}

size_t SelledItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.SelledItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Obj.t_Object item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // optional uint32 selltime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selltime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelledItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.SelledItem)
  GOOGLE_DCHECK_NE(&from, this);
  const SelledItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelledItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.SelledItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.SelledItem)
    MergeFrom(*source);
  }
}

void SelledItem::MergeFrom(const SelledItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.SelledItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_item()->::Obj::t_Object::MergeFrom(from._internal_item());
    }
    if (cached_has_bits & 0x00000002u) {
      selltime_ = from.selltime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SelledItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.SelledItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelledItem::CopyFrom(const SelledItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.SelledItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelledItem::IsInitialized() const {
  return true;
}

void SelledItem::InternalSwap(SelledItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_, other->item_);
  swap(selltime_, other->selltime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelledItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_UserSelledItemList_CSC::InitAsDefaultInstance() {
}
class MSG_UserSelledItemList_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_UserSelledItemList_CSC>()._has_bits_);
};

MSG_UserSelledItemList_CSC::MSG_UserSelledItemList_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_UserSelledItemList_CSC)
}
MSG_UserSelledItemList_CSC::MSG_UserSelledItemList_CSC(const MSG_UserSelledItemList_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objs_(from.objs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:market.MSG_UserSelledItemList_CSC)
}

void MSG_UserSelledItemList_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_UserSelledItemList_CSC_market_2eproto.base);
}

MSG_UserSelledItemList_CSC::~MSG_UserSelledItemList_CSC() {
  // @@protoc_insertion_point(destructor:market.MSG_UserSelledItemList_CSC)
  SharedDtor();
}

void MSG_UserSelledItemList_CSC::SharedDtor() {
}

void MSG_UserSelledItemList_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_UserSelledItemList_CSC& MSG_UserSelledItemList_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_UserSelledItemList_CSC_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_UserSelledItemList_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_UserSelledItemList_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_UserSelledItemList_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .market.SelledItem objs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_UserSelledItemList_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_UserSelledItemList_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .market.SelledItem objs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_objs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_objs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_UserSelledItemList_CSC)
  return target;
}

size_t MSG_UserSelledItemList_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_UserSelledItemList_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .market.SelledItem objs = 1;
  total_size += 1UL * this->_internal_objs_size();
  for (const auto& msg : this->objs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_UserSelledItemList_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_UserSelledItemList_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_UserSelledItemList_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_UserSelledItemList_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_UserSelledItemList_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_UserSelledItemList_CSC)
    MergeFrom(*source);
  }
}

void MSG_UserSelledItemList_CSC::MergeFrom(const MSG_UserSelledItemList_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_UserSelledItemList_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objs_.MergeFrom(from.objs_);
}

void MSG_UserSelledItemList_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_UserSelledItemList_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_UserSelledItemList_CSC::CopyFrom(const MSG_UserSelledItemList_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_UserSelledItemList_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UserSelledItemList_CSC::IsInitialized() const {
  return true;
}

void MSG_UserSelledItemList_CSC::InternalSwap(MSG_UserSelledItemList_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  objs_.InternalSwap(&other->objs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UserSelledItemList_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBuySelledItem_CS::InitAsDefaultInstance() {
}
class MSG_ReqBuySelledItem_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBuySelledItem_CS>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqBuySelledItem_CS::MSG_ReqBuySelledItem_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_ReqBuySelledItem_CS)
}
MSG_ReqBuySelledItem_CS::MSG_ReqBuySelledItem_CS(const MSG_ReqBuySelledItem_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:market.MSG_ReqBuySelledItem_CS)
}

void MSG_ReqBuySelledItem_CS::SharedCtor() {
  index_ = 0u;
}

MSG_ReqBuySelledItem_CS::~MSG_ReqBuySelledItem_CS() {
  // @@protoc_insertion_point(destructor:market.MSG_ReqBuySelledItem_CS)
  SharedDtor();
}

void MSG_ReqBuySelledItem_CS::SharedDtor() {
}

void MSG_ReqBuySelledItem_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBuySelledItem_CS& MSG_ReqBuySelledItem_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBuySelledItem_CS_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBuySelledItem_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_ReqBuySelledItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBuySelledItem_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBuySelledItem_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_ReqBuySelledItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_ReqBuySelledItem_CS)
  return target;
}

size_t MSG_ReqBuySelledItem_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_ReqBuySelledItem_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBuySelledItem_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_ReqBuySelledItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBuySelledItem_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBuySelledItem_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_ReqBuySelledItem_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_ReqBuySelledItem_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqBuySelledItem_CS::MergeFrom(const MSG_ReqBuySelledItem_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_ReqBuySelledItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _internal_set_index(from._internal_index());
  }
}

void MSG_ReqBuySelledItem_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_ReqBuySelledItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBuySelledItem_CS::CopyFrom(const MSG_ReqBuySelledItem_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_ReqBuySelledItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBuySelledItem_CS::IsInitialized() const {
  return true;
}

void MSG_ReqBuySelledItem_CS::InternalSwap(MSG_ReqBuySelledItem_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBuySelledItem_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetBuySelledItem_SC::InitAsDefaultInstance() {
}
class MSG_RetBuySelledItem_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetBuySelledItem_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetBuySelledItem_SC::MSG_RetBuySelledItem_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_RetBuySelledItem_SC)
}
MSG_RetBuySelledItem_SC::MSG_RetBuySelledItem_SC(const MSG_RetBuySelledItem_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:market.MSG_RetBuySelledItem_SC)
}

void MSG_RetBuySelledItem_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_RetBuySelledItem_SC::~MSG_RetBuySelledItem_SC() {
  // @@protoc_insertion_point(destructor:market.MSG_RetBuySelledItem_SC)
  SharedDtor();
}

void MSG_RetBuySelledItem_SC::SharedDtor() {
}

void MSG_RetBuySelledItem_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetBuySelledItem_SC& MSG_RetBuySelledItem_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetBuySelledItem_SC_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetBuySelledItem_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_RetBuySelledItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetBuySelledItem_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetBuySelledItem_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_RetBuySelledItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_RetBuySelledItem_SC)
  return target;
}

size_t MSG_RetBuySelledItem_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_RetBuySelledItem_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetBuySelledItem_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_RetBuySelledItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetBuySelledItem_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetBuySelledItem_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_RetBuySelledItem_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_RetBuySelledItem_SC)
    MergeFrom(*source);
  }
}

void MSG_RetBuySelledItem_SC::MergeFrom(const MSG_RetBuySelledItem_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_RetBuySelledItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_RetBuySelledItem_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_RetBuySelledItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetBuySelledItem_SC::CopyFrom(const MSG_RetBuySelledItem_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_RetBuySelledItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetBuySelledItem_SC::IsInitialized() const {
  return true;
}

void MSG_RetBuySelledItem_SC::InternalSwap(MSG_RetBuySelledItem_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetBuySelledItem_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSellItem_CS::InitAsDefaultInstance() {
}
class MSG_ReqSellItem_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSellItem_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqSellItem_CS::MSG_ReqSellItem_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_ReqSellItem_CS)
}
MSG_ReqSellItem_CS::MSG_ReqSellItem_CS(const MSG_ReqSellItem_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  // @@protoc_insertion_point(copy_constructor:market.MSG_ReqSellItem_CS)
}

void MSG_ReqSellItem_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqSellItem_CS_market_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqSellItem_CS::~MSG_ReqSellItem_CS() {
  // @@protoc_insertion_point(destructor:market.MSG_ReqSellItem_CS)
  SharedDtor();
}

void MSG_ReqSellItem_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqSellItem_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSellItem_CS& MSG_ReqSellItem_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSellItem_CS_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSellItem_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_ReqSellItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSellItem_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "market.MSG_ReqSellItem_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSellItem_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_ReqSellItem_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "market.MSG_ReqSellItem_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_ReqSellItem_CS)
  return target;
}

size_t MSG_ReqSellItem_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_ReqSellItem_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string thisid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSellItem_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_ReqSellItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSellItem_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSellItem_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_ReqSellItem_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_ReqSellItem_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSellItem_CS::MergeFrom(const MSG_ReqSellItem_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_ReqSellItem_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thisid()) {
    _has_bits_[0] |= 0x00000001u;
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
}

void MSG_ReqSellItem_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_ReqSellItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSellItem_CS::CopyFrom(const MSG_ReqSellItem_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_ReqSellItem_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSellItem_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSellItem_CS::InternalSwap(MSG_ReqSellItem_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSellItem_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetSellItem_SC::InitAsDefaultInstance() {
}
class MSG_RetSellItem_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetSellItem_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetSellItem_SC::MSG_RetSellItem_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_RetSellItem_SC)
}
MSG_RetSellItem_SC::MSG_RetSellItem_SC(const MSG_RetSellItem_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:market.MSG_RetSellItem_SC)
}

void MSG_RetSellItem_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_RetSellItem_SC::~MSG_RetSellItem_SC() {
  // @@protoc_insertion_point(destructor:market.MSG_RetSellItem_SC)
  SharedDtor();
}

void MSG_RetSellItem_SC::SharedDtor() {
}

void MSG_RetSellItem_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetSellItem_SC& MSG_RetSellItem_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetSellItem_SC_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetSellItem_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_RetSellItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetSellItem_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetSellItem_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_RetSellItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_RetSellItem_SC)
  return target;
}

size_t MSG_RetSellItem_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_RetSellItem_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetSellItem_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_RetSellItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetSellItem_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetSellItem_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_RetSellItem_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_RetSellItem_SC)
    MergeFrom(*source);
  }
}

void MSG_RetSellItem_SC::MergeFrom(const MSG_RetSellItem_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_RetSellItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_RetSellItem_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_RetSellItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetSellItem_SC::CopyFrom(const MSG_RetSellItem_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_RetSellItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetSellItem_SC::IsInitialized() const {
  return true;
}

void MSG_RetSellItem_SC::InternalSwap(MSG_RetSellItem_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetSellItem_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ExchangeRatio_CSC::InitAsDefaultInstance() {
}
class MSG_ExchangeRatio_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ExchangeRatio_CSC>()._has_bits_);
  static void set_has_tone2nations(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ExchangeRatio_CSC::MSG_ExchangeRatio_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_ExchangeRatio_CSC)
}
MSG_ExchangeRatio_CSC::MSG_ExchangeRatio_CSC(const MSG_ExchangeRatio_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tone2nations_ = from.tone2nations_;
  // @@protoc_insertion_point(copy_constructor:market.MSG_ExchangeRatio_CSC)
}

void MSG_ExchangeRatio_CSC::SharedCtor() {
  tone2nations_ = 0u;
}

MSG_ExchangeRatio_CSC::~MSG_ExchangeRatio_CSC() {
  // @@protoc_insertion_point(destructor:market.MSG_ExchangeRatio_CSC)
  SharedDtor();
}

void MSG_ExchangeRatio_CSC::SharedDtor() {
}

void MSG_ExchangeRatio_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ExchangeRatio_CSC& MSG_ExchangeRatio_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ExchangeRatio_CSC_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_ExchangeRatio_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_ExchangeRatio_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tone2nations_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ExchangeRatio_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tone2nations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tone2nations(&has_bits);
          tone2nations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ExchangeRatio_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_ExchangeRatio_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tone2nations = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tone2nations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_ExchangeRatio_CSC)
  return target;
}

size_t MSG_ExchangeRatio_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_ExchangeRatio_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 tone2nations = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tone2nations());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ExchangeRatio_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_ExchangeRatio_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ExchangeRatio_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ExchangeRatio_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_ExchangeRatio_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_ExchangeRatio_CSC)
    MergeFrom(*source);
  }
}

void MSG_ExchangeRatio_CSC::MergeFrom(const MSG_ExchangeRatio_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_ExchangeRatio_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tone2nations()) {
    _internal_set_tone2nations(from._internal_tone2nations());
  }
}

void MSG_ExchangeRatio_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_ExchangeRatio_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ExchangeRatio_CSC::CopyFrom(const MSG_ExchangeRatio_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_ExchangeRatio_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ExchangeRatio_CSC::IsInitialized() const {
  return true;
}

void MSG_ExchangeRatio_CSC::InternalSwap(MSG_ExchangeRatio_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tone2nations_, other->tone2nations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ExchangeRatio_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RefreshMarketItem_SC::InitAsDefaultInstance() {
}
class MSG_RefreshMarketItem_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RefreshMarketItem_SC>()._has_bits_);
  static void set_has_marketid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxnum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_RefreshMarketItem_SC::MSG_RefreshMarketItem_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:market.MSG_RefreshMarketItem_SC)
}
MSG_RefreshMarketItem_SC::MSG_RefreshMarketItem_SC(const MSG_RefreshMarketItem_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&marketid_, &from.marketid_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxnum_) -
    reinterpret_cast<char*>(&marketid_)) + sizeof(maxnum_));
  // @@protoc_insertion_point(copy_constructor:market.MSG_RefreshMarketItem_SC)
}

void MSG_RefreshMarketItem_SC::SharedCtor() {
  ::memset(&marketid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxnum_) -
      reinterpret_cast<char*>(&marketid_)) + sizeof(maxnum_));
}

MSG_RefreshMarketItem_SC::~MSG_RefreshMarketItem_SC() {
  // @@protoc_insertion_point(destructor:market.MSG_RefreshMarketItem_SC)
  SharedDtor();
}

void MSG_RefreshMarketItem_SC::SharedDtor() {
}

void MSG_RefreshMarketItem_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RefreshMarketItem_SC& MSG_RefreshMarketItem_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RefreshMarketItem_SC_market_2eproto.base);
  return *internal_default_instance();
}


void MSG_RefreshMarketItem_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:market.MSG_RefreshMarketItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&marketid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxnum_) -
        reinterpret_cast<char*>(&marketid_)) + sizeof(maxnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RefreshMarketItem_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 marketid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_marketid(&has_bits);
          marketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 itemid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 curnum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_curnum(&has_bits);
          curnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxnum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_maxnum(&has_bits);
          maxnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RefreshMarketItem_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:market.MSG_RefreshMarketItem_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 marketid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_marketid(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional uint32 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_itemid(), target);
  }

  // optional uint32 curnum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_curnum(), target);
  }

  // optional uint32 maxnum = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:market.MSG_RefreshMarketItem_SC)
  return target;
}

size_t MSG_RefreshMarketItem_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:market.MSG_RefreshMarketItem_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 marketid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_marketid());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 itemid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_itemid());
    }

    // optional uint32 curnum = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curnum());
    }

    // optional uint32 maxnum = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RefreshMarketItem_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:market.MSG_RefreshMarketItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RefreshMarketItem_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RefreshMarketItem_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:market.MSG_RefreshMarketItem_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:market.MSG_RefreshMarketItem_SC)
    MergeFrom(*source);
  }
}

void MSG_RefreshMarketItem_SC::MergeFrom(const MSG_RefreshMarketItem_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:market.MSG_RefreshMarketItem_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      marketid_ = from.marketid_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      curnum_ = from.curnum_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxnum_ = from.maxnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RefreshMarketItem_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:market.MSG_RefreshMarketItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RefreshMarketItem_SC::CopyFrom(const MSG_RefreshMarketItem_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:market.MSG_RefreshMarketItem_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RefreshMarketItem_SC::IsInitialized() const {
  return true;
}

void MSG_RefreshMarketItem_SC::InternalSwap(MSG_RefreshMarketItem_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(marketid_, other->marketid_);
  swap(id_, other->id_);
  swap(itemid_, other->itemid_);
  swap(curnum_, other->curnum_);
  swap(maxnum_, other->maxnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RefreshMarketItem_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace market
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::market::Item* Arena::CreateMaybeMessage< ::market::Item >(Arena* arena) {
  return Arena::CreateInternal< ::market::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::market::OneMarket* Arena::CreateMaybeMessage< ::market::OneMarket >(Arena* arena) {
  return Arena::CreateInternal< ::market::OneMarket >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_ReqMarketItemList_CS* Arena::CreateMaybeMessage< ::market::MSG_ReqMarketItemList_CS >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_ReqMarketItemList_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_RetMarketItemList_SC* Arena::CreateMaybeMessage< ::market::MSG_RetMarketItemList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_RetMarketItemList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_ReqBuyMarketItem_CS* Arena::CreateMaybeMessage< ::market::MSG_ReqBuyMarketItem_CS >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_ReqBuyMarketItem_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_RetBuyMarketItem_SC* Arena::CreateMaybeMessage< ::market::MSG_RetBuyMarketItem_SC >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_RetBuyMarketItem_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::market::SelledItem* Arena::CreateMaybeMessage< ::market::SelledItem >(Arena* arena) {
  return Arena::CreateInternal< ::market::SelledItem >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_UserSelledItemList_CSC* Arena::CreateMaybeMessage< ::market::MSG_UserSelledItemList_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_UserSelledItemList_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_ReqBuySelledItem_CS* Arena::CreateMaybeMessage< ::market::MSG_ReqBuySelledItem_CS >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_ReqBuySelledItem_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_RetBuySelledItem_SC* Arena::CreateMaybeMessage< ::market::MSG_RetBuySelledItem_SC >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_RetBuySelledItem_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_ReqSellItem_CS* Arena::CreateMaybeMessage< ::market::MSG_ReqSellItem_CS >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_ReqSellItem_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_RetSellItem_SC* Arena::CreateMaybeMessage< ::market::MSG_RetSellItem_SC >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_RetSellItem_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_ExchangeRatio_CSC* Arena::CreateMaybeMessage< ::market::MSG_ExchangeRatio_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_ExchangeRatio_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::market::MSG_RefreshMarketItem_SC* Arena::CreateMaybeMessage< ::market::MSG_RefreshMarketItem_SC >(Arena* arena) {
  return Arena::CreateInternal< ::market::MSG_RefreshMarketItem_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
