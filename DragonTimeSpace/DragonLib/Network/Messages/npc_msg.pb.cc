// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npc_msg.proto

#include "npc_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_t_Object_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_npc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldNpcData_npc_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_npc_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjItem_npc_5fmsg_2eproto;
namespace npc {
class MSG_NPC_Death_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NPC_Death_SC> _instance;
} _MSG_NPC_Death_SC_default_instance_;
class MSG_Req_Holdon_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Holdon_CS> _instance;
} _MSG_Req_Holdon_CS_default_instance_;
class MSG_Ret_Holdon_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Holdon_SC> _instance;
} _MSG_Ret_Holdon_SC_default_instance_;
class MSG_Ret_Holdon_Interrupt_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Holdon_Interrupt_SC> _instance;
} _MSG_Ret_Holdon_Interrupt_SC_default_instance_;
class HoldNpcDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HoldNpcData> _instance;
} _HoldNpcData_default_instance_;
class MSG_Ret_AddHoldNpcData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_AddHoldNpcData_SC> _instance;
} _MSG_Ret_AddHoldNpcData_SC_default_instance_;
class MSG_Ret_BatchAddHoldNpcData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_BatchAddHoldNpcData_SC> _instance;
} _MSG_Ret_BatchAddHoldNpcData_SC_default_instance_;
class MSG_Ret_RemoveHoldNpcData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_RemoveHoldNpcData_SC> _instance;
} _MSG_Ret_RemoveHoldNpcData_SC_default_instance_;
class MSG_Ret_HoldonSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_HoldonSuccess> _instance;
} _MSG_Ret_HoldonSuccess_default_instance_;
class MSG_ReqWatchSceneBag_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqWatchSceneBag_CS> _instance;
} _MSG_ReqWatchSceneBag_CS_default_instance_;
class MSG_ReqPickObjFromSceneBag_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqPickObjFromSceneBag_CS> _instance;
} _MSG_ReqPickObjFromSceneBag_CS_default_instance_;
class MSG_ReqPickAllSceneBag_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqPickAllSceneBag_CS> _instance;
} _MSG_ReqPickAllSceneBag_CS_default_instance_;
class ObjItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjItem> _instance;
} _ObjItem_default_instance_;
class MSG_RefreshSceneBag_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RefreshSceneBag_SC> _instance;
} _MSG_RefreshSceneBag_SC_default_instance_;
}  // namespace npc
static void InitDefaultsscc_info_HoldNpcData_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_HoldNpcData_default_instance_;
    new (ptr) ::npc::HoldNpcData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::HoldNpcData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HoldNpcData_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HoldNpcData_npc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_NPC_Death_SC_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_NPC_Death_SC_default_instance_;
    new (ptr) ::npc::MSG_NPC_Death_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_NPC_Death_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_NPC_Death_SC_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_NPC_Death_SC_npc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RefreshSceneBag_SC_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_RefreshSceneBag_SC_default_instance_;
    new (ptr) ::npc::MSG_RefreshSceneBag_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_RefreshSceneBag_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RefreshSceneBag_SC_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RefreshSceneBag_SC_npc_5fmsg_2eproto}, {
      &scc_info_ObjItem_npc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_ReqPickAllSceneBag_CS_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_ReqPickAllSceneBag_CS_default_instance_;
    new (ptr) ::npc::MSG_ReqPickAllSceneBag_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_ReqPickAllSceneBag_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqPickAllSceneBag_CS_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqPickAllSceneBag_CS_npc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqPickObjFromSceneBag_CS_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_ReqPickObjFromSceneBag_CS_default_instance_;
    new (ptr) ::npc::MSG_ReqPickObjFromSceneBag_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_ReqPickObjFromSceneBag_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqPickObjFromSceneBag_CS_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqPickObjFromSceneBag_CS_npc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqWatchSceneBag_CS_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_ReqWatchSceneBag_CS_default_instance_;
    new (ptr) ::npc::MSG_ReqWatchSceneBag_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_ReqWatchSceneBag_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqWatchSceneBag_CS_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqWatchSceneBag_CS_npc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_Holdon_CS_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_Req_Holdon_CS_default_instance_;
    new (ptr) ::npc::MSG_Req_Holdon_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_Req_Holdon_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_Holdon_CS_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_Holdon_CS_npc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_AddHoldNpcData_SC_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_Ret_AddHoldNpcData_SC_default_instance_;
    new (ptr) ::npc::MSG_Ret_AddHoldNpcData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_Ret_AddHoldNpcData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_AddHoldNpcData_SC_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_AddHoldNpcData_SC_npc_5fmsg_2eproto}, {
      &scc_info_HoldNpcData_npc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_BatchAddHoldNpcData_SC_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_Ret_BatchAddHoldNpcData_SC_default_instance_;
    new (ptr) ::npc::MSG_Ret_BatchAddHoldNpcData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_Ret_BatchAddHoldNpcData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_BatchAddHoldNpcData_SC_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_BatchAddHoldNpcData_SC_npc_5fmsg_2eproto}, {
      &scc_info_HoldNpcData_npc_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_HoldonSuccess_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_Ret_HoldonSuccess_default_instance_;
    new (ptr) ::npc::MSG_Ret_HoldonSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_Ret_HoldonSuccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_HoldonSuccess_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_HoldonSuccess_npc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_Holdon_Interrupt_SC_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_Ret_Holdon_Interrupt_SC_default_instance_;
    new (ptr) ::npc::MSG_Ret_Holdon_Interrupt_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_Ret_Holdon_Interrupt_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_Holdon_Interrupt_SC_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_Holdon_Interrupt_SC_npc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_Holdon_SC_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_Ret_Holdon_SC_default_instance_;
    new (ptr) ::npc::MSG_Ret_Holdon_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_Ret_Holdon_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_Holdon_SC_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_Holdon_SC_npc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_RemoveHoldNpcData_SC_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_MSG_Ret_RemoveHoldNpcData_SC_default_instance_;
    new (ptr) ::npc::MSG_Ret_RemoveHoldNpcData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::MSG_Ret_RemoveHoldNpcData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_RemoveHoldNpcData_SC_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_RemoveHoldNpcData_SC_npc_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_ObjItem_npc_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::npc::_ObjItem_default_instance_;
    new (ptr) ::npc::ObjItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::npc::ObjItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjItem_npc_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ObjItem_npc_5fmsg_2eproto}, {
      &scc_info_t_Object_object_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_npc_5fmsg_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_npc_5fmsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_npc_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_npc_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::npc::MSG_NPC_Death_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_NPC_Death_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_NPC_Death_SC, tempid_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_NPC_Death_SC, attid_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_NPC_Death_SC, lasthitskill_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_NPC_Death_SC, atttype_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Req_Holdon_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Req_Holdon_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Req_Holdon_CS, thisid_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Req_Holdon_CS, npctype_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Req_Holdon_CS, type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_SC, thisid_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_SC, npctype_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_SC, needtime_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_SC, type_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_Interrupt_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_Interrupt_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_Interrupt_SC, baseid_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_Holdon_Interrupt_SC, npctype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::npc::HoldNpcData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::HoldNpcData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::HoldNpcData, npc_tempid_),
  PROTOBUF_FIELD_OFFSET(::npc::HoldNpcData, npc_name_),
  PROTOBUF_FIELD_OFFSET(::npc::HoldNpcData, resttime_),
  PROTOBUF_FIELD_OFFSET(::npc::HoldNpcData, distance_),
  PROTOBUF_FIELD_OFFSET(::npc::HoldNpcData, holduser_),
  PROTOBUF_FIELD_OFFSET(::npc::HoldNpcData, holdteam_),
  PROTOBUF_FIELD_OFFSET(::npc::HoldNpcData, holdguild_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_AddHoldNpcData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_AddHoldNpcData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_AddHoldNpcData_SC, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_BatchAddHoldNpcData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_BatchAddHoldNpcData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_BatchAddHoldNpcData_SC, datas_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_RemoveHoldNpcData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_RemoveHoldNpcData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_RemoveHoldNpcData_SC, npc_tempid_),
  0,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_HoldonSuccess, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_HoldonSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_HoldonSuccess, npc_tempid_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_Ret_HoldonSuccess, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_ReqWatchSceneBag_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_ReqWatchSceneBag_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_ReqWatchSceneBag_CS, tempid_),
  0,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_ReqPickObjFromSceneBag_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_ReqPickObjFromSceneBag_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_ReqPickObjFromSceneBag_CS, thisids_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_ReqPickObjFromSceneBag_CS, tempid_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_ReqPickAllSceneBag_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_ReqPickAllSceneBag_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_ReqPickAllSceneBag_CS, tempid_),
  0,
  PROTOBUF_FIELD_OFFSET(::npc::ObjItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::ObjItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::ObjItem, thisid_),
  PROTOBUF_FIELD_OFFSET(::npc::ObjItem, obj_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::npc::MSG_RefreshSceneBag_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_RefreshSceneBag_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::npc::MSG_RefreshSceneBag_SC, tempid_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_RefreshSceneBag_SC, items_),
  PROTOBUF_FIELD_OFFSET(::npc::MSG_RefreshSceneBag_SC, isrefresh_),
  0,
  ~0u,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::npc::MSG_NPC_Death_SC)},
  { 13, 21, sizeof(::npc::MSG_Req_Holdon_CS)},
  { 24, 34, sizeof(::npc::MSG_Ret_Holdon_SC)},
  { 39, 46, sizeof(::npc::MSG_Ret_Holdon_Interrupt_SC)},
  { 48, 60, sizeof(::npc::HoldNpcData)},
  { 67, 73, sizeof(::npc::MSG_Ret_AddHoldNpcData_SC)},
  { 74, 80, sizeof(::npc::MSG_Ret_BatchAddHoldNpcData_SC)},
  { 81, 87, sizeof(::npc::MSG_Ret_RemoveHoldNpcData_SC)},
  { 88, 95, sizeof(::npc::MSG_Ret_HoldonSuccess)},
  { 97, 103, sizeof(::npc::MSG_ReqWatchSceneBag_CS)},
  { 104, 111, sizeof(::npc::MSG_ReqPickObjFromSceneBag_CS)},
  { 113, 119, sizeof(::npc::MSG_ReqPickAllSceneBag_CS)},
  { 120, 127, sizeof(::npc::ObjItem)},
  { 129, 137, sizeof(::npc::MSG_RefreshSceneBag_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_NPC_Death_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_Req_Holdon_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_Ret_Holdon_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_Ret_Holdon_Interrupt_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_HoldNpcData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_Ret_AddHoldNpcData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_Ret_BatchAddHoldNpcData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_Ret_RemoveHoldNpcData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_Ret_HoldonSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_ReqWatchSceneBag_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_ReqPickObjFromSceneBag_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_ReqPickAllSceneBag_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_ObjItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::npc::_MSG_RefreshSceneBag_SC_default_instance_),
};

const char descriptor_table_protodef_npc_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rnpc_msg.proto\022\003npc\032\014object.proto\"X\n\020MS"
  "G_NPC_Death_SC\022\016\n\006tempid\030\001 \001(\004\022\r\n\005attid\030"
  "\002 \001(\004\022\024\n\014lasthitskill\030\003 \001(\r\022\017\n\007atttype\030\004"
  " \001(\r\"B\n\021MSG_Req_Holdon_CS\022\016\n\006thisid\030\001 \001("
  "\004\022\017\n\007npctype\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\"e\n\021MSG_"
  "Ret_Holdon_SC\022\016\n\006thisid\030\001 \001(\004\022\017\n\007npctype"
  "\030\002 \001(\r\022\020\n\010needtime\030\003 \001(\r\022\017\n\007retcode\030\004 \001("
  "\r\022\014\n\004type\030\005 \001(\r\">\n\033MSG_Ret_Holdon_Interr"
  "upt_SC\022\016\n\006baseid\030\001 \001(\r\022\017\n\007npctype\030\002 \001(\r\""
  "\216\001\n\013HoldNpcData\022\022\n\nnpc_tempid\030\001 \001(\004\022\020\n\010n"
  "pc_name\030\002 \001(\t\022\020\n\010resttime\030\003 \001(\r\022\020\n\010dista"
  "nce\030\004 \001(\r\022\020\n\010holduser\030\005 \001(\004\022\020\n\010holdteam\030"
  "\006 \001(\004\022\021\n\tholdguild\030\007 \001(\004\";\n\031MSG_Ret_AddH"
  "oldNpcData_SC\022\036\n\004data\030\001 \001(\0132\020.npc.HoldNp"
  "cData\"A\n\036MSG_Ret_BatchAddHoldNpcData_SC\022"
  "\037\n\005datas\030\001 \003(\0132\020.npc.HoldNpcData\"2\n\034MSG_"
  "Ret_RemoveHoldNpcData_SC\022\022\n\nnpc_tempid\030\001"
  " \001(\004\"9\n\025MSG_Ret_HoldonSuccess\022\022\n\nnpc_tem"
  "pid\030\001 \001(\004\022\014\n\004type\030\002 \001(\r\")\n\027MSG_ReqWatchS"
  "ceneBag_CS\022\016\n\006tempid\030\001 \001(\004\"@\n\035MSG_ReqPic"
  "kObjFromSceneBag_CS\022\017\n\007thisids\030\001 \003(\r\022\016\n\006"
  "tempid\030\002 \001(\004\"+\n\031MSG_ReqPickAllSceneBag_C"
  "S\022\016\n\006tempid\030\001 \001(\004\"5\n\007ObjItem\022\016\n\006thisid\030\001"
  " \001(\r\022\032\n\003obj\030\002 \001(\0132\r.Obj.t_Object\"X\n\026MSG_"
  "RefreshSceneBag_SC\022\016\n\006tempid\030\001 \001(\004\022\033\n\005it"
  "ems\030\002 \003(\0132\014.npc.ObjItem\022\021\n\tisrefresh\030\003 \001"
  "(\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_npc_5fmsg_2eproto_deps[1] = {
  &::descriptor_table_object_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_npc_5fmsg_2eproto_sccs[14] = {
  &scc_info_HoldNpcData_npc_5fmsg_2eproto.base,
  &scc_info_MSG_NPC_Death_SC_npc_5fmsg_2eproto.base,
  &scc_info_MSG_RefreshSceneBag_SC_npc_5fmsg_2eproto.base,
  &scc_info_MSG_ReqPickAllSceneBag_CS_npc_5fmsg_2eproto.base,
  &scc_info_MSG_ReqPickObjFromSceneBag_CS_npc_5fmsg_2eproto.base,
  &scc_info_MSG_ReqWatchSceneBag_CS_npc_5fmsg_2eproto.base,
  &scc_info_MSG_Req_Holdon_CS_npc_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_AddHoldNpcData_SC_npc_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_BatchAddHoldNpcData_SC_npc_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_HoldonSuccess_npc_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_Holdon_Interrupt_SC_npc_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_Holdon_SC_npc_5fmsg_2eproto.base,
  &scc_info_MSG_Ret_RemoveHoldNpcData_SC_npc_5fmsg_2eproto.base,
  &scc_info_ObjItem_npc_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_npc_5fmsg_2eproto_once;
static bool descriptor_table_npc_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_npc_5fmsg_2eproto = {
  &descriptor_table_npc_5fmsg_2eproto_initialized, descriptor_table_protodef_npc_5fmsg_2eproto, "npc_msg.proto", 1042,
  &descriptor_table_npc_5fmsg_2eproto_once, descriptor_table_npc_5fmsg_2eproto_sccs, descriptor_table_npc_5fmsg_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_npc_5fmsg_2eproto::offsets,
  file_level_metadata_npc_5fmsg_2eproto, 14, file_level_enum_descriptors_npc_5fmsg_2eproto, file_level_service_descriptors_npc_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_npc_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_npc_5fmsg_2eproto)), true);
namespace npc {

// ===================================================================

void MSG_NPC_Death_SC::InitAsDefaultInstance() {
}
class MSG_NPC_Death_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NPC_Death_SC>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lasthitskill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_atttype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_NPC_Death_SC::MSG_NPC_Death_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_NPC_Death_SC)
}
MSG_NPC_Death_SC::MSG_NPC_Death_SC(const MSG_NPC_Death_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempid_, &from.tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&atttype_) -
    reinterpret_cast<char*>(&tempid_)) + sizeof(atttype_));
  // @@protoc_insertion_point(copy_constructor:npc.MSG_NPC_Death_SC)
}

void MSG_NPC_Death_SC::SharedCtor() {
  ::memset(&tempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atttype_) -
      reinterpret_cast<char*>(&tempid_)) + sizeof(atttype_));
}

MSG_NPC_Death_SC::~MSG_NPC_Death_SC() {
  // @@protoc_insertion_point(destructor:npc.MSG_NPC_Death_SC)
  SharedDtor();
}

void MSG_NPC_Death_SC::SharedDtor() {
}

void MSG_NPC_Death_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NPC_Death_SC& MSG_NPC_Death_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NPC_Death_SC_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_NPC_Death_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_NPC_Death_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&atttype_) -
        reinterpret_cast<char*>(&tempid_)) + sizeof(atttype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NPC_Death_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 attid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_attid(&has_bits);
          attid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lasthitskill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lasthitskill(&has_bits);
          lasthitskill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 atttype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_atttype(&has_bits);
          atttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NPC_Death_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_NPC_Death_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  // optional uint64 attid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_attid(), target);
  }

  // optional uint32 lasthitskill = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lasthitskill(), target);
  }

  // optional uint32 atttype = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_atttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_NPC_Death_SC)
  return target;
}

size_t MSG_NPC_Death_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_NPC_Death_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 tempid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

    // optional uint64 attid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_attid());
    }

    // optional uint32 lasthitskill = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lasthitskill());
    }

    // optional uint32 atttype = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_atttype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NPC_Death_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_NPC_Death_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NPC_Death_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NPC_Death_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_NPC_Death_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_NPC_Death_SC)
    MergeFrom(*source);
  }
}

void MSG_NPC_Death_SC::MergeFrom(const MSG_NPC_Death_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_NPC_Death_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tempid_ = from.tempid_;
    }
    if (cached_has_bits & 0x00000002u) {
      attid_ = from.attid_;
    }
    if (cached_has_bits & 0x00000004u) {
      lasthitskill_ = from.lasthitskill_;
    }
    if (cached_has_bits & 0x00000008u) {
      atttype_ = from.atttype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_NPC_Death_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_NPC_Death_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NPC_Death_SC::CopyFrom(const MSG_NPC_Death_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_NPC_Death_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NPC_Death_SC::IsInitialized() const {
  return true;
}

void MSG_NPC_Death_SC::InternalSwap(MSG_NPC_Death_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tempid_, other->tempid_);
  swap(attid_, other->attid_);
  swap(lasthitskill_, other->lasthitskill_);
  swap(atttype_, other->atttype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NPC_Death_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Holdon_CS::InitAsDefaultInstance() {
}
class MSG_Req_Holdon_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Holdon_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_npctype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Req_Holdon_CS::MSG_Req_Holdon_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_Req_Holdon_CS)
}
MSG_Req_Holdon_CS::MSG_Req_Holdon_CS(const MSG_Req_Holdon_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&thisid_, &from.thisid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&thisid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:npc.MSG_Req_Holdon_CS)
}

void MSG_Req_Holdon_CS::SharedCtor() {
  ::memset(&thisid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&thisid_)) + sizeof(type_));
}

MSG_Req_Holdon_CS::~MSG_Req_Holdon_CS() {
  // @@protoc_insertion_point(destructor:npc.MSG_Req_Holdon_CS)
  SharedDtor();
}

void MSG_Req_Holdon_CS::SharedDtor() {
}

void MSG_Req_Holdon_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Holdon_CS& MSG_Req_Holdon_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Holdon_CS_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Holdon_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_Req_Holdon_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&thisid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&thisid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Holdon_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_thisid(&has_bits);
          thisid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 npctype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_npctype(&has_bits);
          npctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Holdon_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_Req_Holdon_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_thisid(), target);
  }

  // optional uint32 npctype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_npctype(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_Req_Holdon_CS)
  return target;
}

size_t MSG_Req_Holdon_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_Req_Holdon_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_thisid());
    }

    // optional uint32 npctype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_npctype());
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Holdon_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_Req_Holdon_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Holdon_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Holdon_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_Req_Holdon_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_Req_Holdon_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_Holdon_CS::MergeFrom(const MSG_Req_Holdon_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_Req_Holdon_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      thisid_ = from.thisid_;
    }
    if (cached_has_bits & 0x00000002u) {
      npctype_ = from.npctype_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_Holdon_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_Req_Holdon_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Holdon_CS::CopyFrom(const MSG_Req_Holdon_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_Req_Holdon_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Holdon_CS::IsInitialized() const {
  return true;
}

void MSG_Req_Holdon_CS::InternalSwap(MSG_Req_Holdon_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(thisid_, other->thisid_);
  swap(npctype_, other->npctype_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Holdon_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Holdon_SC::InitAsDefaultInstance() {
}
class MSG_Ret_Holdon_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Holdon_SC>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_npctype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_needtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_Ret_Holdon_SC::MSG_Ret_Holdon_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_Ret_Holdon_SC)
}
MSG_Ret_Holdon_SC::MSG_Ret_Holdon_SC(const MSG_Ret_Holdon_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&thisid_, &from.thisid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&thisid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:npc.MSG_Ret_Holdon_SC)
}

void MSG_Ret_Holdon_SC::SharedCtor() {
  ::memset(&thisid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&thisid_)) + sizeof(type_));
}

MSG_Ret_Holdon_SC::~MSG_Ret_Holdon_SC() {
  // @@protoc_insertion_point(destructor:npc.MSG_Ret_Holdon_SC)
  SharedDtor();
}

void MSG_Ret_Holdon_SC::SharedDtor() {
}

void MSG_Ret_Holdon_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Holdon_SC& MSG_Ret_Holdon_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Holdon_SC_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Holdon_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_Ret_Holdon_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&thisid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&thisid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Holdon_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_thisid(&has_bits);
          thisid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 npctype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_npctype(&has_bits);
          npctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 needtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_needtime(&has_bits);
          needtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 retcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Holdon_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_Ret_Holdon_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_thisid(), target);
  }

  // optional uint32 npctype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_npctype(), target);
  }

  // optional uint32 needtime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_needtime(), target);
  }

  // optional uint32 retcode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_retcode(), target);
  }

  // optional uint32 type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_Ret_Holdon_SC)
  return target;
}

size_t MSG_Ret_Holdon_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_Ret_Holdon_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_thisid());
    }

    // optional uint32 npctype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_npctype());
    }

    // optional uint32 needtime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_needtime());
    }

    // optional uint32 retcode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

    // optional uint32 type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Holdon_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_Ret_Holdon_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Holdon_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Holdon_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_Ret_Holdon_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_Ret_Holdon_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Holdon_SC::MergeFrom(const MSG_Ret_Holdon_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_Ret_Holdon_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      thisid_ = from.thisid_;
    }
    if (cached_has_bits & 0x00000002u) {
      npctype_ = from.npctype_;
    }
    if (cached_has_bits & 0x00000004u) {
      needtime_ = from.needtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_Holdon_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_Ret_Holdon_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Holdon_SC::CopyFrom(const MSG_Ret_Holdon_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_Ret_Holdon_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Holdon_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Holdon_SC::InternalSwap(MSG_Ret_Holdon_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(thisid_, other->thisid_);
  swap(npctype_, other->npctype_);
  swap(needtime_, other->needtime_);
  swap(retcode_, other->retcode_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Holdon_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Holdon_Interrupt_SC::InitAsDefaultInstance() {
}
class MSG_Ret_Holdon_Interrupt_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Holdon_Interrupt_SC>()._has_bits_);
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_npctype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_Holdon_Interrupt_SC::MSG_Ret_Holdon_Interrupt_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_Ret_Holdon_Interrupt_SC)
}
MSG_Ret_Holdon_Interrupt_SC::MSG_Ret_Holdon_Interrupt_SC(const MSG_Ret_Holdon_Interrupt_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&baseid_, &from.baseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&npctype_) -
    reinterpret_cast<char*>(&baseid_)) + sizeof(npctype_));
  // @@protoc_insertion_point(copy_constructor:npc.MSG_Ret_Holdon_Interrupt_SC)
}

void MSG_Ret_Holdon_Interrupt_SC::SharedCtor() {
  ::memset(&baseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&npctype_) -
      reinterpret_cast<char*>(&baseid_)) + sizeof(npctype_));
}

MSG_Ret_Holdon_Interrupt_SC::~MSG_Ret_Holdon_Interrupt_SC() {
  // @@protoc_insertion_point(destructor:npc.MSG_Ret_Holdon_Interrupt_SC)
  SharedDtor();
}

void MSG_Ret_Holdon_Interrupt_SC::SharedDtor() {
}

void MSG_Ret_Holdon_Interrupt_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Holdon_Interrupt_SC& MSG_Ret_Holdon_Interrupt_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Holdon_Interrupt_SC_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Holdon_Interrupt_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_Ret_Holdon_Interrupt_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&baseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&npctype_) -
        reinterpret_cast<char*>(&baseid_)) + sizeof(npctype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Holdon_Interrupt_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 baseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 npctype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_npctype(&has_bits);
          npctype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Holdon_Interrupt_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_Ret_Holdon_Interrupt_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 baseid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_baseid(), target);
  }

  // optional uint32 npctype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_npctype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_Ret_Holdon_Interrupt_SC)
  return target;
}

size_t MSG_Ret_Holdon_Interrupt_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_Ret_Holdon_Interrupt_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 baseid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_baseid());
    }

    // optional uint32 npctype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_npctype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Holdon_Interrupt_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_Ret_Holdon_Interrupt_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Holdon_Interrupt_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Holdon_Interrupt_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_Ret_Holdon_Interrupt_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_Ret_Holdon_Interrupt_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Holdon_Interrupt_SC::MergeFrom(const MSG_Ret_Holdon_Interrupt_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_Ret_Holdon_Interrupt_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      baseid_ = from.baseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      npctype_ = from.npctype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_Holdon_Interrupt_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_Ret_Holdon_Interrupt_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Holdon_Interrupt_SC::CopyFrom(const MSG_Ret_Holdon_Interrupt_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_Ret_Holdon_Interrupt_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Holdon_Interrupt_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Holdon_Interrupt_SC::InternalSwap(MSG_Ret_Holdon_Interrupt_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(baseid_, other->baseid_);
  swap(npctype_, other->npctype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Holdon_Interrupt_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HoldNpcData::InitAsDefaultInstance() {
}
class HoldNpcData::_Internal {
 public:
  using HasBits = decltype(std::declval<HoldNpcData>()._has_bits_);
  static void set_has_npc_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_npc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_resttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_holduser(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_holdteam(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_holdguild(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

HoldNpcData::HoldNpcData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.HoldNpcData)
}
HoldNpcData::HoldNpcData(const HoldNpcData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_npc_name()) {
    npc_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npc_name_);
  }
  ::memcpy(&npc_tempid_, &from.npc_tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&holdguild_) -
    reinterpret_cast<char*>(&npc_tempid_)) + sizeof(holdguild_));
  // @@protoc_insertion_point(copy_constructor:npc.HoldNpcData)
}

void HoldNpcData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HoldNpcData_npc_5fmsg_2eproto.base);
  npc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&npc_tempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&holdguild_) -
      reinterpret_cast<char*>(&npc_tempid_)) + sizeof(holdguild_));
}

HoldNpcData::~HoldNpcData() {
  // @@protoc_insertion_point(destructor:npc.HoldNpcData)
  SharedDtor();
}

void HoldNpcData::SharedDtor() {
  npc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HoldNpcData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HoldNpcData& HoldNpcData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HoldNpcData_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void HoldNpcData::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.HoldNpcData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    npc_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&npc_tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&holdguild_) -
        reinterpret_cast<char*>(&npc_tempid_)) + sizeof(holdguild_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HoldNpcData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 npc_tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npc_tempid(&has_bits);
          npc_tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string npc_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_npc_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "npc.HoldNpcData.npc_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 resttime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_resttime(&has_bits);
          resttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_distance(&has_bits);
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 holduser = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_holduser(&has_bits);
          holduser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 holdteam = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_holdteam(&has_bits);
          holdteam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 holdguild = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_holdguild(&has_bits);
          holdguild_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HoldNpcData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.HoldNpcData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 npc_tempid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_npc_tempid(), target);
  }

  // optional string npc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_npc_name().data(), static_cast<int>(this->_internal_npc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "npc.HoldNpcData.npc_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_npc_name(), target);
  }

  // optional uint32 resttime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_resttime(), target);
  }

  // optional uint32 distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_distance(), target);
  }

  // optional uint64 holduser = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_holduser(), target);
  }

  // optional uint64 holdteam = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_holdteam(), target);
  }

  // optional uint64 holdguild = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_holdguild(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.HoldNpcData)
  return target;
}

size_t HoldNpcData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.HoldNpcData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string npc_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_npc_name());
    }

    // optional uint64 npc_tempid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_npc_tempid());
    }

    // optional uint32 resttime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_resttime());
    }

    // optional uint32 distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_distance());
    }

    // optional uint64 holduser = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_holduser());
    }

    // optional uint64 holdteam = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_holdteam());
    }

    // optional uint64 holdguild = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_holdguild());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HoldNpcData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.HoldNpcData)
  GOOGLE_DCHECK_NE(&from, this);
  const HoldNpcData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HoldNpcData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.HoldNpcData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.HoldNpcData)
    MergeFrom(*source);
  }
}

void HoldNpcData::MergeFrom(const HoldNpcData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.HoldNpcData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      npc_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.npc_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      npc_tempid_ = from.npc_tempid_;
    }
    if (cached_has_bits & 0x00000004u) {
      resttime_ = from.resttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      holduser_ = from.holduser_;
    }
    if (cached_has_bits & 0x00000020u) {
      holdteam_ = from.holdteam_;
    }
    if (cached_has_bits & 0x00000040u) {
      holdguild_ = from.holdguild_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HoldNpcData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.HoldNpcData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HoldNpcData::CopyFrom(const HoldNpcData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.HoldNpcData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HoldNpcData::IsInitialized() const {
  return true;
}

void HoldNpcData::InternalSwap(HoldNpcData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  npc_name_.Swap(&other->npc_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(npc_tempid_, other->npc_tempid_);
  swap(resttime_, other->resttime_);
  swap(distance_, other->distance_);
  swap(holduser_, other->holduser_);
  swap(holdteam_, other->holdteam_);
  swap(holdguild_, other->holdguild_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HoldNpcData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_AddHoldNpcData_SC::InitAsDefaultInstance() {
  ::npc::_MSG_Ret_AddHoldNpcData_SC_default_instance_._instance.get_mutable()->data_ = const_cast< ::npc::HoldNpcData*>(
      ::npc::HoldNpcData::internal_default_instance());
}
class MSG_Ret_AddHoldNpcData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_AddHoldNpcData_SC>()._has_bits_);
  static const ::npc::HoldNpcData& data(const MSG_Ret_AddHoldNpcData_SC* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::npc::HoldNpcData&
MSG_Ret_AddHoldNpcData_SC::_Internal::data(const MSG_Ret_AddHoldNpcData_SC* msg) {
  return *msg->data_;
}
MSG_Ret_AddHoldNpcData_SC::MSG_Ret_AddHoldNpcData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_Ret_AddHoldNpcData_SC)
}
MSG_Ret_AddHoldNpcData_SC::MSG_Ret_AddHoldNpcData_SC(const MSG_Ret_AddHoldNpcData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::npc::HoldNpcData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:npc.MSG_Ret_AddHoldNpcData_SC)
}

void MSG_Ret_AddHoldNpcData_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_AddHoldNpcData_SC_npc_5fmsg_2eproto.base);
  data_ = nullptr;
}

MSG_Ret_AddHoldNpcData_SC::~MSG_Ret_AddHoldNpcData_SC() {
  // @@protoc_insertion_point(destructor:npc.MSG_Ret_AddHoldNpcData_SC)
  SharedDtor();
}

void MSG_Ret_AddHoldNpcData_SC::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void MSG_Ret_AddHoldNpcData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_AddHoldNpcData_SC& MSG_Ret_AddHoldNpcData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_AddHoldNpcData_SC_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_AddHoldNpcData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_Ret_AddHoldNpcData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_AddHoldNpcData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .npc.HoldNpcData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_AddHoldNpcData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_Ret_AddHoldNpcData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .npc.HoldNpcData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_Ret_AddHoldNpcData_SC)
  return target;
}

size_t MSG_Ret_AddHoldNpcData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_Ret_AddHoldNpcData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .npc.HoldNpcData data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_AddHoldNpcData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_Ret_AddHoldNpcData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_AddHoldNpcData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_AddHoldNpcData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_Ret_AddHoldNpcData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_Ret_AddHoldNpcData_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_AddHoldNpcData_SC::MergeFrom(const MSG_Ret_AddHoldNpcData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_Ret_AddHoldNpcData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::npc::HoldNpcData::MergeFrom(from._internal_data());
  }
}

void MSG_Ret_AddHoldNpcData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_Ret_AddHoldNpcData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_AddHoldNpcData_SC::CopyFrom(const MSG_Ret_AddHoldNpcData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_Ret_AddHoldNpcData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_AddHoldNpcData_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_AddHoldNpcData_SC::InternalSwap(MSG_Ret_AddHoldNpcData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_AddHoldNpcData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_BatchAddHoldNpcData_SC::InitAsDefaultInstance() {
}
class MSG_Ret_BatchAddHoldNpcData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_BatchAddHoldNpcData_SC>()._has_bits_);
};

MSG_Ret_BatchAddHoldNpcData_SC::MSG_Ret_BatchAddHoldNpcData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_Ret_BatchAddHoldNpcData_SC)
}
MSG_Ret_BatchAddHoldNpcData_SC::MSG_Ret_BatchAddHoldNpcData_SC(const MSG_Ret_BatchAddHoldNpcData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:npc.MSG_Ret_BatchAddHoldNpcData_SC)
}

void MSG_Ret_BatchAddHoldNpcData_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_BatchAddHoldNpcData_SC_npc_5fmsg_2eproto.base);
}

MSG_Ret_BatchAddHoldNpcData_SC::~MSG_Ret_BatchAddHoldNpcData_SC() {
  // @@protoc_insertion_point(destructor:npc.MSG_Ret_BatchAddHoldNpcData_SC)
  SharedDtor();
}

void MSG_Ret_BatchAddHoldNpcData_SC::SharedDtor() {
}

void MSG_Ret_BatchAddHoldNpcData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_BatchAddHoldNpcData_SC& MSG_Ret_BatchAddHoldNpcData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_BatchAddHoldNpcData_SC_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_BatchAddHoldNpcData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_Ret_BatchAddHoldNpcData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_BatchAddHoldNpcData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .npc.HoldNpcData datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_BatchAddHoldNpcData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_Ret_BatchAddHoldNpcData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .npc.HoldNpcData datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_Ret_BatchAddHoldNpcData_SC)
  return target;
}

size_t MSG_Ret_BatchAddHoldNpcData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_Ret_BatchAddHoldNpcData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .npc.HoldNpcData datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_BatchAddHoldNpcData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_Ret_BatchAddHoldNpcData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_BatchAddHoldNpcData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_BatchAddHoldNpcData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_Ret_BatchAddHoldNpcData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_Ret_BatchAddHoldNpcData_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_BatchAddHoldNpcData_SC::MergeFrom(const MSG_Ret_BatchAddHoldNpcData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_Ret_BatchAddHoldNpcData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
}

void MSG_Ret_BatchAddHoldNpcData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_Ret_BatchAddHoldNpcData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_BatchAddHoldNpcData_SC::CopyFrom(const MSG_Ret_BatchAddHoldNpcData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_Ret_BatchAddHoldNpcData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_BatchAddHoldNpcData_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_BatchAddHoldNpcData_SC::InternalSwap(MSG_Ret_BatchAddHoldNpcData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_BatchAddHoldNpcData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_RemoveHoldNpcData_SC::InitAsDefaultInstance() {
}
class MSG_Ret_RemoveHoldNpcData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_RemoveHoldNpcData_SC>()._has_bits_);
  static void set_has_npc_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_RemoveHoldNpcData_SC::MSG_Ret_RemoveHoldNpcData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_Ret_RemoveHoldNpcData_SC)
}
MSG_Ret_RemoveHoldNpcData_SC::MSG_Ret_RemoveHoldNpcData_SC(const MSG_Ret_RemoveHoldNpcData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npc_tempid_ = from.npc_tempid_;
  // @@protoc_insertion_point(copy_constructor:npc.MSG_Ret_RemoveHoldNpcData_SC)
}

void MSG_Ret_RemoveHoldNpcData_SC::SharedCtor() {
  npc_tempid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Ret_RemoveHoldNpcData_SC::~MSG_Ret_RemoveHoldNpcData_SC() {
  // @@protoc_insertion_point(destructor:npc.MSG_Ret_RemoveHoldNpcData_SC)
  SharedDtor();
}

void MSG_Ret_RemoveHoldNpcData_SC::SharedDtor() {
}

void MSG_Ret_RemoveHoldNpcData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_RemoveHoldNpcData_SC& MSG_Ret_RemoveHoldNpcData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_RemoveHoldNpcData_SC_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_RemoveHoldNpcData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_Ret_RemoveHoldNpcData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npc_tempid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_RemoveHoldNpcData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 npc_tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npc_tempid(&has_bits);
          npc_tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_RemoveHoldNpcData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_Ret_RemoveHoldNpcData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 npc_tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_npc_tempid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_Ret_RemoveHoldNpcData_SC)
  return target;
}

size_t MSG_Ret_RemoveHoldNpcData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_Ret_RemoveHoldNpcData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 npc_tempid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_npc_tempid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_RemoveHoldNpcData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_Ret_RemoveHoldNpcData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_RemoveHoldNpcData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_RemoveHoldNpcData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_Ret_RemoveHoldNpcData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_Ret_RemoveHoldNpcData_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_RemoveHoldNpcData_SC::MergeFrom(const MSG_Ret_RemoveHoldNpcData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_Ret_RemoveHoldNpcData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_npc_tempid()) {
    _internal_set_npc_tempid(from._internal_npc_tempid());
  }
}

void MSG_Ret_RemoveHoldNpcData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_Ret_RemoveHoldNpcData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_RemoveHoldNpcData_SC::CopyFrom(const MSG_Ret_RemoveHoldNpcData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_Ret_RemoveHoldNpcData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_RemoveHoldNpcData_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_RemoveHoldNpcData_SC::InternalSwap(MSG_Ret_RemoveHoldNpcData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(npc_tempid_, other->npc_tempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_RemoveHoldNpcData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_HoldonSuccess::InitAsDefaultInstance() {
}
class MSG_Ret_HoldonSuccess::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_HoldonSuccess>()._has_bits_);
  static void set_has_npc_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_HoldonSuccess::MSG_Ret_HoldonSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_Ret_HoldonSuccess)
}
MSG_Ret_HoldonSuccess::MSG_Ret_HoldonSuccess(const MSG_Ret_HoldonSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&npc_tempid_, &from.npc_tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&npc_tempid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:npc.MSG_Ret_HoldonSuccess)
}

void MSG_Ret_HoldonSuccess::SharedCtor() {
  ::memset(&npc_tempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&npc_tempid_)) + sizeof(type_));
}

MSG_Ret_HoldonSuccess::~MSG_Ret_HoldonSuccess() {
  // @@protoc_insertion_point(destructor:npc.MSG_Ret_HoldonSuccess)
  SharedDtor();
}

void MSG_Ret_HoldonSuccess::SharedDtor() {
}

void MSG_Ret_HoldonSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_HoldonSuccess& MSG_Ret_HoldonSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_HoldonSuccess_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_HoldonSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_Ret_HoldonSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&npc_tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&npc_tempid_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_HoldonSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 npc_tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npc_tempid(&has_bits);
          npc_tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_HoldonSuccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_Ret_HoldonSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 npc_tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_npc_tempid(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_Ret_HoldonSuccess)
  return target;
}

size_t MSG_Ret_HoldonSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_Ret_HoldonSuccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 npc_tempid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_npc_tempid());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_HoldonSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_Ret_HoldonSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_HoldonSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_HoldonSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_Ret_HoldonSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_Ret_HoldonSuccess)
    MergeFrom(*source);
  }
}

void MSG_Ret_HoldonSuccess::MergeFrom(const MSG_Ret_HoldonSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_Ret_HoldonSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      npc_tempid_ = from.npc_tempid_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_HoldonSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_Ret_HoldonSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_HoldonSuccess::CopyFrom(const MSG_Ret_HoldonSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_Ret_HoldonSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_HoldonSuccess::IsInitialized() const {
  return true;
}

void MSG_Ret_HoldonSuccess::InternalSwap(MSG_Ret_HoldonSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(npc_tempid_, other->npc_tempid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_HoldonSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqWatchSceneBag_CS::InitAsDefaultInstance() {
}
class MSG_ReqWatchSceneBag_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqWatchSceneBag_CS>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqWatchSceneBag_CS::MSG_ReqWatchSceneBag_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_ReqWatchSceneBag_CS)
}
MSG_ReqWatchSceneBag_CS::MSG_ReqWatchSceneBag_CS(const MSG_ReqWatchSceneBag_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tempid_ = from.tempid_;
  // @@protoc_insertion_point(copy_constructor:npc.MSG_ReqWatchSceneBag_CS)
}

void MSG_ReqWatchSceneBag_CS::SharedCtor() {
  tempid_ = PROTOBUF_ULONGLONG(0);
}

MSG_ReqWatchSceneBag_CS::~MSG_ReqWatchSceneBag_CS() {
  // @@protoc_insertion_point(destructor:npc.MSG_ReqWatchSceneBag_CS)
  SharedDtor();
}

void MSG_ReqWatchSceneBag_CS::SharedDtor() {
}

void MSG_ReqWatchSceneBag_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqWatchSceneBag_CS& MSG_ReqWatchSceneBag_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqWatchSceneBag_CS_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqWatchSceneBag_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_ReqWatchSceneBag_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tempid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqWatchSceneBag_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqWatchSceneBag_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_ReqWatchSceneBag_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_ReqWatchSceneBag_CS)
  return target;
}

size_t MSG_ReqWatchSceneBag_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_ReqWatchSceneBag_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 tempid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tempid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqWatchSceneBag_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_ReqWatchSceneBag_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqWatchSceneBag_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqWatchSceneBag_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_ReqWatchSceneBag_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_ReqWatchSceneBag_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqWatchSceneBag_CS::MergeFrom(const MSG_ReqWatchSceneBag_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_ReqWatchSceneBag_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tempid()) {
    _internal_set_tempid(from._internal_tempid());
  }
}

void MSG_ReqWatchSceneBag_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_ReqWatchSceneBag_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqWatchSceneBag_CS::CopyFrom(const MSG_ReqWatchSceneBag_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_ReqWatchSceneBag_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqWatchSceneBag_CS::IsInitialized() const {
  return true;
}

void MSG_ReqWatchSceneBag_CS::InternalSwap(MSG_ReqWatchSceneBag_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tempid_, other->tempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqWatchSceneBag_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqPickObjFromSceneBag_CS::InitAsDefaultInstance() {
}
class MSG_ReqPickObjFromSceneBag_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqPickObjFromSceneBag_CS>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqPickObjFromSceneBag_CS::MSG_ReqPickObjFromSceneBag_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_ReqPickObjFromSceneBag_CS)
}
MSG_ReqPickObjFromSceneBag_CS::MSG_ReqPickObjFromSceneBag_CS(const MSG_ReqPickObjFromSceneBag_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      thisids_(from.thisids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tempid_ = from.tempid_;
  // @@protoc_insertion_point(copy_constructor:npc.MSG_ReqPickObjFromSceneBag_CS)
}

void MSG_ReqPickObjFromSceneBag_CS::SharedCtor() {
  tempid_ = PROTOBUF_ULONGLONG(0);
}

MSG_ReqPickObjFromSceneBag_CS::~MSG_ReqPickObjFromSceneBag_CS() {
  // @@protoc_insertion_point(destructor:npc.MSG_ReqPickObjFromSceneBag_CS)
  SharedDtor();
}

void MSG_ReqPickObjFromSceneBag_CS::SharedDtor() {
}

void MSG_ReqPickObjFromSceneBag_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqPickObjFromSceneBag_CS& MSG_ReqPickObjFromSceneBag_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqPickObjFromSceneBag_CS_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqPickObjFromSceneBag_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_ReqPickObjFromSceneBag_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thisids_.Clear();
  tempid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqPickObjFromSceneBag_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 thisids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_thisids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_thisids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tempid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqPickObjFromSceneBag_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_ReqPickObjFromSceneBag_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 thisids = 1;
  for (int i = 0, n = this->_internal_thisids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_thisids(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tempid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_ReqPickObjFromSceneBag_CS)
  return target;
}

size_t MSG_ReqPickObjFromSceneBag_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_ReqPickObjFromSceneBag_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 thisids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->thisids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_thisids_size());
    total_size += data_size;
  }

  // optional uint64 tempid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tempid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqPickObjFromSceneBag_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_ReqPickObjFromSceneBag_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqPickObjFromSceneBag_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqPickObjFromSceneBag_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_ReqPickObjFromSceneBag_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_ReqPickObjFromSceneBag_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqPickObjFromSceneBag_CS::MergeFrom(const MSG_ReqPickObjFromSceneBag_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_ReqPickObjFromSceneBag_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thisids_.MergeFrom(from.thisids_);
  if (from._internal_has_tempid()) {
    _internal_set_tempid(from._internal_tempid());
  }
}

void MSG_ReqPickObjFromSceneBag_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_ReqPickObjFromSceneBag_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqPickObjFromSceneBag_CS::CopyFrom(const MSG_ReqPickObjFromSceneBag_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_ReqPickObjFromSceneBag_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqPickObjFromSceneBag_CS::IsInitialized() const {
  return true;
}

void MSG_ReqPickObjFromSceneBag_CS::InternalSwap(MSG_ReqPickObjFromSceneBag_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisids_.InternalSwap(&other->thisids_);
  swap(tempid_, other->tempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqPickObjFromSceneBag_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqPickAllSceneBag_CS::InitAsDefaultInstance() {
}
class MSG_ReqPickAllSceneBag_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqPickAllSceneBag_CS>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqPickAllSceneBag_CS::MSG_ReqPickAllSceneBag_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_ReqPickAllSceneBag_CS)
}
MSG_ReqPickAllSceneBag_CS::MSG_ReqPickAllSceneBag_CS(const MSG_ReqPickAllSceneBag_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tempid_ = from.tempid_;
  // @@protoc_insertion_point(copy_constructor:npc.MSG_ReqPickAllSceneBag_CS)
}

void MSG_ReqPickAllSceneBag_CS::SharedCtor() {
  tempid_ = PROTOBUF_ULONGLONG(0);
}

MSG_ReqPickAllSceneBag_CS::~MSG_ReqPickAllSceneBag_CS() {
  // @@protoc_insertion_point(destructor:npc.MSG_ReqPickAllSceneBag_CS)
  SharedDtor();
}

void MSG_ReqPickAllSceneBag_CS::SharedDtor() {
}

void MSG_ReqPickAllSceneBag_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqPickAllSceneBag_CS& MSG_ReqPickAllSceneBag_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqPickAllSceneBag_CS_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqPickAllSceneBag_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_ReqPickAllSceneBag_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tempid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqPickAllSceneBag_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqPickAllSceneBag_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_ReqPickAllSceneBag_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_ReqPickAllSceneBag_CS)
  return target;
}

size_t MSG_ReqPickAllSceneBag_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_ReqPickAllSceneBag_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 tempid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tempid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqPickAllSceneBag_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_ReqPickAllSceneBag_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqPickAllSceneBag_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqPickAllSceneBag_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_ReqPickAllSceneBag_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_ReqPickAllSceneBag_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqPickAllSceneBag_CS::MergeFrom(const MSG_ReqPickAllSceneBag_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_ReqPickAllSceneBag_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tempid()) {
    _internal_set_tempid(from._internal_tempid());
  }
}

void MSG_ReqPickAllSceneBag_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_ReqPickAllSceneBag_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqPickAllSceneBag_CS::CopyFrom(const MSG_ReqPickAllSceneBag_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_ReqPickAllSceneBag_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqPickAllSceneBag_CS::IsInitialized() const {
  return true;
}

void MSG_ReqPickAllSceneBag_CS::InternalSwap(MSG_ReqPickAllSceneBag_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tempid_, other->tempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqPickAllSceneBag_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjItem::InitAsDefaultInstance() {
  ::npc::_ObjItem_default_instance_._instance.get_mutable()->obj_ = const_cast< ::Obj::t_Object*>(
      ::Obj::t_Object::internal_default_instance());
}
class ObjItem::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjItem>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Obj::t_Object& obj(const ObjItem* msg);
  static void set_has_obj(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Obj::t_Object&
ObjItem::_Internal::obj(const ObjItem* msg) {
  return *msg->obj_;
}
void ObjItem::clear_obj() {
  if (obj_ != nullptr) obj_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ObjItem::ObjItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.ObjItem)
}
ObjItem::ObjItem(const ObjItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_obj()) {
    obj_ = new ::Obj::t_Object(*from.obj_);
  } else {
    obj_ = nullptr;
  }
  thisid_ = from.thisid_;
  // @@protoc_insertion_point(copy_constructor:npc.ObjItem)
}

void ObjItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjItem_npc_5fmsg_2eproto.base);
  ::memset(&obj_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thisid_) -
      reinterpret_cast<char*>(&obj_)) + sizeof(thisid_));
}

ObjItem::~ObjItem() {
  // @@protoc_insertion_point(destructor:npc.ObjItem)
  SharedDtor();
}

void ObjItem::SharedDtor() {
  if (this != internal_default_instance()) delete obj_;
}

void ObjItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjItem& ObjItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjItem_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void ObjItem::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.ObjItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(obj_ != nullptr);
    obj_->Clear();
  }
  thisid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ObjItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_thisid(&has_bits);
          thisid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.t_Object obj = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.ObjItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 thisid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_thisid(), target);
  }

  // optional .Obj.t_Object obj = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::obj(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.ObjItem)
  return target;
}

size_t ObjItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.ObjItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Obj.t_Object obj = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obj_);
    }

    // optional uint32 thisid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_thisid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.ObjItem)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.ObjItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.ObjItem)
    MergeFrom(*source);
  }
}

void ObjItem::MergeFrom(const ObjItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.ObjItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_obj()->::Obj::t_Object::MergeFrom(from._internal_obj());
    }
    if (cached_has_bits & 0x00000002u) {
      thisid_ = from.thisid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.ObjItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjItem::CopyFrom(const ObjItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.ObjItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjItem::IsInitialized() const {
  return true;
}

void ObjItem::InternalSwap(ObjItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(obj_, other->obj_);
  swap(thisid_, other->thisid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RefreshSceneBag_SC::InitAsDefaultInstance() {
}
class MSG_RefreshSceneBag_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RefreshSceneBag_SC>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isrefresh(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RefreshSceneBag_SC::MSG_RefreshSceneBag_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:npc.MSG_RefreshSceneBag_SC)
}
MSG_RefreshSceneBag_SC::MSG_RefreshSceneBag_SC(const MSG_RefreshSceneBag_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempid_, &from.tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isrefresh_) -
    reinterpret_cast<char*>(&tempid_)) + sizeof(isrefresh_));
  // @@protoc_insertion_point(copy_constructor:npc.MSG_RefreshSceneBag_SC)
}

void MSG_RefreshSceneBag_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RefreshSceneBag_SC_npc_5fmsg_2eproto.base);
  ::memset(&tempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isrefresh_) -
      reinterpret_cast<char*>(&tempid_)) + sizeof(isrefresh_));
}

MSG_RefreshSceneBag_SC::~MSG_RefreshSceneBag_SC() {
  // @@protoc_insertion_point(destructor:npc.MSG_RefreshSceneBag_SC)
  SharedDtor();
}

void MSG_RefreshSceneBag_SC::SharedDtor() {
}

void MSG_RefreshSceneBag_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RefreshSceneBag_SC& MSG_RefreshSceneBag_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RefreshSceneBag_SC_npc_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void MSG_RefreshSceneBag_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:npc.MSG_RefreshSceneBag_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isrefresh_) -
        reinterpret_cast<char*>(&tempid_)) + sizeof(isrefresh_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RefreshSceneBag_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .npc.ObjItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool isrefresh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isrefresh(&has_bits);
          isrefresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RefreshSceneBag_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:npc.MSG_RefreshSceneBag_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  // repeated .npc.ObjItem items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  // optional bool isrefresh = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isrefresh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:npc.MSG_RefreshSceneBag_SC)
  return target;
}

size_t MSG_RefreshSceneBag_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:npc.MSG_RefreshSceneBag_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .npc.ObjItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 tempid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

    // optional bool isrefresh = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RefreshSceneBag_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:npc.MSG_RefreshSceneBag_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RefreshSceneBag_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RefreshSceneBag_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:npc.MSG_RefreshSceneBag_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:npc.MSG_RefreshSceneBag_SC)
    MergeFrom(*source);
  }
}

void MSG_RefreshSceneBag_SC::MergeFrom(const MSG_RefreshSceneBag_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:npc.MSG_RefreshSceneBag_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tempid_ = from.tempid_;
    }
    if (cached_has_bits & 0x00000002u) {
      isrefresh_ = from.isrefresh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RefreshSceneBag_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:npc.MSG_RefreshSceneBag_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RefreshSceneBag_SC::CopyFrom(const MSG_RefreshSceneBag_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:npc.MSG_RefreshSceneBag_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RefreshSceneBag_SC::IsInitialized() const {
  return true;
}

void MSG_RefreshSceneBag_SC::InternalSwap(MSG_RefreshSceneBag_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  swap(tempid_, other->tempid_);
  swap(isrefresh_, other->isrefresh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RefreshSceneBag_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace npc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::npc::MSG_NPC_Death_SC* Arena::CreateMaybeMessage< ::npc::MSG_NPC_Death_SC >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_NPC_Death_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_Req_Holdon_CS* Arena::CreateMaybeMessage< ::npc::MSG_Req_Holdon_CS >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_Req_Holdon_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_Ret_Holdon_SC* Arena::CreateMaybeMessage< ::npc::MSG_Ret_Holdon_SC >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_Ret_Holdon_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_Ret_Holdon_Interrupt_SC* Arena::CreateMaybeMessage< ::npc::MSG_Ret_Holdon_Interrupt_SC >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_Ret_Holdon_Interrupt_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::HoldNpcData* Arena::CreateMaybeMessage< ::npc::HoldNpcData >(Arena* arena) {
  return Arena::CreateInternal< ::npc::HoldNpcData >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_Ret_AddHoldNpcData_SC* Arena::CreateMaybeMessage< ::npc::MSG_Ret_AddHoldNpcData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_Ret_AddHoldNpcData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_Ret_BatchAddHoldNpcData_SC* Arena::CreateMaybeMessage< ::npc::MSG_Ret_BatchAddHoldNpcData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_Ret_BatchAddHoldNpcData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_Ret_RemoveHoldNpcData_SC* Arena::CreateMaybeMessage< ::npc::MSG_Ret_RemoveHoldNpcData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_Ret_RemoveHoldNpcData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_Ret_HoldonSuccess* Arena::CreateMaybeMessage< ::npc::MSG_Ret_HoldonSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_Ret_HoldonSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_ReqWatchSceneBag_CS* Arena::CreateMaybeMessage< ::npc::MSG_ReqWatchSceneBag_CS >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_ReqWatchSceneBag_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_ReqPickObjFromSceneBag_CS* Arena::CreateMaybeMessage< ::npc::MSG_ReqPickObjFromSceneBag_CS >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_ReqPickObjFromSceneBag_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_ReqPickAllSceneBag_CS* Arena::CreateMaybeMessage< ::npc::MSG_ReqPickAllSceneBag_CS >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_ReqPickAllSceneBag_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::ObjItem* Arena::CreateMaybeMessage< ::npc::ObjItem >(Arena* arena) {
  return Arena::CreateInternal< ::npc::ObjItem >(arena);
}
template<> PROTOBUF_NOINLINE ::npc::MSG_RefreshSceneBag_SC* Arena::CreateMaybeMessage< ::npc::MSG_RefreshSceneBag_SC >(Arena* arena) {
  return Arena::CreateInternal< ::npc::MSG_RefreshSceneBag_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
