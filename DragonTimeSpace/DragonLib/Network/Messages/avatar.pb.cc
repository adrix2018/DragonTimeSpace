// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avatar.proto

#include "avatar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace avatar {
class AvatarPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvatarPair> _instance;
} _AvatarPair_default_instance_;
class MSG_RetUserAvatars_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetUserAvatars_SC> _instance;
} _MSG_RetUserAvatars_SC_default_instance_;
class MSG_ReqEquipAvatar_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqEquipAvatar_CS> _instance;
} _MSG_ReqEquipAvatar_CS_default_instance_;
}  // namespace avatar
static void InitDefaultsscc_info_AvatarPair_avatar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::avatar::_AvatarPair_default_instance_;
    new (ptr) ::avatar::AvatarPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::avatar::AvatarPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarPair_avatar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvatarPair_avatar_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqEquipAvatar_CS_avatar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::avatar::_MSG_ReqEquipAvatar_CS_default_instance_;
    new (ptr) ::avatar::MSG_ReqEquipAvatar_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::avatar::MSG_ReqEquipAvatar_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqEquipAvatar_CS_avatar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqEquipAvatar_CS_avatar_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetUserAvatars_SC_avatar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::avatar::_MSG_RetUserAvatars_SC_default_instance_;
    new (ptr) ::avatar::MSG_RetUserAvatars_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::avatar::MSG_RetUserAvatars_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetUserAvatars_SC_avatar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetUserAvatars_SC_avatar_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_avatar_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_avatar_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_avatar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_avatar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::avatar::AvatarPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::avatar::AvatarPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::avatar::AvatarPair, part_),
  PROTOBUF_FIELD_OFFSET(::avatar::AvatarPair, avatarid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::avatar::MSG_RetUserAvatars_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::avatar::MSG_RetUserAvatars_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::avatar::MSG_RetUserAvatars_SC, avatars_),
  PROTOBUF_FIELD_OFFSET(::avatar::MSG_RetUserAvatars_SC, equipid_),
  PROTOBUF_FIELD_OFFSET(::avatar::MSG_RetUserAvatars_SC, transkillid_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::avatar::MSG_ReqEquipAvatar_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::avatar::MSG_ReqEquipAvatar_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::avatar::MSG_ReqEquipAvatar_CS, avatarid_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::avatar::AvatarPair)},
  { 9, 17, sizeof(::avatar::MSG_RetUserAvatars_SC)},
  { 20, 26, sizeof(::avatar::MSG_ReqEquipAvatar_CS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::avatar::_AvatarPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::avatar::_MSG_RetUserAvatars_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::avatar::_MSG_ReqEquipAvatar_CS_default_instance_),
};

const char descriptor_table_protodef_avatar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014avatar.proto\022\006avatar\"@\n\nAvatarPair\022 \n\004"
  "part\030\001 \001(\0162\022.avatar.AvatarPart\022\020\n\010avatar"
  "id\030\002 \001(\r\"N\n\025MSG_RetUserAvatars_SC\022\017\n\007ava"
  "tars\030\001 \003(\r\022\017\n\007equipId\030\002 \001(\r\022\023\n\013tranSkill"
  "id\030\003 \001(\004\")\n\025MSG_ReqEquipAvatar_CS\022\020\n\010ava"
  "tarId\030\001 \001(\r*\?\n\nAvatarPart\022\017\n\013AVATAR_HEAD"
  "\020\001\022\017\n\013AVATAR_HAIR\020\002\022\017\n\013AVATAR_BODY\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_avatar_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_avatar_2eproto_sccs[3] = {
  &scc_info_AvatarPair_avatar_2eproto.base,
  &scc_info_MSG_ReqEquipAvatar_CS_avatar_2eproto.base,
  &scc_info_MSG_RetUserAvatars_SC_avatar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_avatar_2eproto_once;
static bool descriptor_table_avatar_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avatar_2eproto = {
  &descriptor_table_avatar_2eproto_initialized, descriptor_table_protodef_avatar_2eproto, "avatar.proto", 276,
  &descriptor_table_avatar_2eproto_once, descriptor_table_avatar_2eproto_sccs, descriptor_table_avatar_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_avatar_2eproto::offsets,
  file_level_metadata_avatar_2eproto, 3, file_level_enum_descriptors_avatar_2eproto, file_level_service_descriptors_avatar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_avatar_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_avatar_2eproto)), true);
namespace avatar {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AvatarPart_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_avatar_2eproto);
  return file_level_enum_descriptors_avatar_2eproto[0];
}
bool AvatarPart_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AvatarPair::InitAsDefaultInstance() {
}
class AvatarPair::_Internal {
 public:
  using HasBits = decltype(std::declval<AvatarPair>()._has_bits_);
  static void set_has_part(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avatarid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AvatarPair::AvatarPair()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:avatar.AvatarPair)
}
AvatarPair::AvatarPair(const AvatarPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatarid_, &from.avatarid_,
    static_cast<size_t>(reinterpret_cast<char*>(&part_) -
    reinterpret_cast<char*>(&avatarid_)) + sizeof(part_));
  // @@protoc_insertion_point(copy_constructor:avatar.AvatarPair)
}

void AvatarPair::SharedCtor() {
  avatarid_ = 0u;
  part_ = 1;
}

AvatarPair::~AvatarPair() {
  // @@protoc_insertion_point(destructor:avatar.AvatarPair)
  SharedDtor();
}

void AvatarPair::SharedDtor() {
}

void AvatarPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarPair& AvatarPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvatarPair_avatar_2eproto.base);
  return *internal_default_instance();
}


void AvatarPair::Clear() {
// @@protoc_insertion_point(message_clear_start:avatar.AvatarPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    avatarid_ = 0u;
    part_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AvatarPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .avatar.AvatarPart part = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::avatar::AvatarPart_IsValid(val))) {
            _internal_set_part(static_cast<::avatar::AvatarPart>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 avatarid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_avatarid(&has_bits);
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvatarPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:avatar.AvatarPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .avatar.AvatarPart part = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_part(), target);
  }

  // optional uint32 avatarid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_avatarid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avatar.AvatarPair)
  return target;
}

size_t AvatarPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avatar.AvatarPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 avatarid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avatarid());
    }

    // optional .avatar.AvatarPart part = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_part());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avatar.AvatarPair)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvatarPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avatar.AvatarPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avatar.AvatarPair)
    MergeFrom(*source);
  }
}

void AvatarPair::MergeFrom(const AvatarPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avatar.AvatarPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      avatarid_ = from.avatarid_;
    }
    if (cached_has_bits & 0x00000002u) {
      part_ = from.part_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AvatarPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avatar.AvatarPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarPair::CopyFrom(const AvatarPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avatar.AvatarPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarPair::IsInitialized() const {
  return true;
}

void AvatarPair::InternalSwap(AvatarPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(avatarid_, other->avatarid_);
  swap(part_, other->part_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvatarPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetUserAvatars_SC::InitAsDefaultInstance() {
}
class MSG_RetUserAvatars_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetUserAvatars_SC>()._has_bits_);
  static void set_has_equipid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transkillid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetUserAvatars_SC::MSG_RetUserAvatars_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:avatar.MSG_RetUserAvatars_SC)
}
MSG_RetUserAvatars_SC::MSG_RetUserAvatars_SC(const MSG_RetUserAvatars_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      avatars_(from.avatars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transkillid_, &from.transkillid_,
    static_cast<size_t>(reinterpret_cast<char*>(&equipid_) -
    reinterpret_cast<char*>(&transkillid_)) + sizeof(equipid_));
  // @@protoc_insertion_point(copy_constructor:avatar.MSG_RetUserAvatars_SC)
}

void MSG_RetUserAvatars_SC::SharedCtor() {
  ::memset(&transkillid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&equipid_) -
      reinterpret_cast<char*>(&transkillid_)) + sizeof(equipid_));
}

MSG_RetUserAvatars_SC::~MSG_RetUserAvatars_SC() {
  // @@protoc_insertion_point(destructor:avatar.MSG_RetUserAvatars_SC)
  SharedDtor();
}

void MSG_RetUserAvatars_SC::SharedDtor() {
}

void MSG_RetUserAvatars_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetUserAvatars_SC& MSG_RetUserAvatars_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetUserAvatars_SC_avatar_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetUserAvatars_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:avatar.MSG_RetUserAvatars_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatars_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&transkillid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&equipid_) -
        reinterpret_cast<char*>(&transkillid_)) + sizeof(equipid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetUserAvatars_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 avatars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_avatars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_avatars(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 equipId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_equipid(&has_bits);
          equipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tranSkillid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_transkillid(&has_bits);
          transkillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetUserAvatars_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:avatar.MSG_RetUserAvatars_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 avatars = 1;
  for (int i = 0, n = this->_internal_avatars_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_avatars(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 equipId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_equipid(), target);
  }

  // optional uint64 tranSkillid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_transkillid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avatar.MSG_RetUserAvatars_SC)
  return target;
}

size_t MSG_RetUserAvatars_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avatar.MSG_RetUserAvatars_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 avatars = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->avatars_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avatars_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 tranSkillid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_transkillid());
    }

    // optional uint32 equipId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_equipid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetUserAvatars_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avatar.MSG_RetUserAvatars_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetUserAvatars_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetUserAvatars_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avatar.MSG_RetUserAvatars_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avatar.MSG_RetUserAvatars_SC)
    MergeFrom(*source);
  }
}

void MSG_RetUserAvatars_SC::MergeFrom(const MSG_RetUserAvatars_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avatar.MSG_RetUserAvatars_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatars_.MergeFrom(from.avatars_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      transkillid_ = from.transkillid_;
    }
    if (cached_has_bits & 0x00000002u) {
      equipid_ = from.equipid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetUserAvatars_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avatar.MSG_RetUserAvatars_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetUserAvatars_SC::CopyFrom(const MSG_RetUserAvatars_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avatar.MSG_RetUserAvatars_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetUserAvatars_SC::IsInitialized() const {
  return true;
}

void MSG_RetUserAvatars_SC::InternalSwap(MSG_RetUserAvatars_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  avatars_.InternalSwap(&other->avatars_);
  swap(transkillid_, other->transkillid_);
  swap(equipid_, other->equipid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetUserAvatars_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqEquipAvatar_CS::InitAsDefaultInstance() {
}
class MSG_ReqEquipAvatar_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqEquipAvatar_CS>()._has_bits_);
  static void set_has_avatarid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqEquipAvatar_CS::MSG_ReqEquipAvatar_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:avatar.MSG_ReqEquipAvatar_CS)
}
MSG_ReqEquipAvatar_CS::MSG_ReqEquipAvatar_CS(const MSG_ReqEquipAvatar_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarid_ = from.avatarid_;
  // @@protoc_insertion_point(copy_constructor:avatar.MSG_ReqEquipAvatar_CS)
}

void MSG_ReqEquipAvatar_CS::SharedCtor() {
  avatarid_ = 0u;
}

MSG_ReqEquipAvatar_CS::~MSG_ReqEquipAvatar_CS() {
  // @@protoc_insertion_point(destructor:avatar.MSG_ReqEquipAvatar_CS)
  SharedDtor();
}

void MSG_ReqEquipAvatar_CS::SharedDtor() {
}

void MSG_ReqEquipAvatar_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqEquipAvatar_CS& MSG_ReqEquipAvatar_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqEquipAvatar_CS_avatar_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqEquipAvatar_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:avatar.MSG_ReqEquipAvatar_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatarid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqEquipAvatar_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 avatarId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_avatarid(&has_bits);
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqEquipAvatar_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:avatar.MSG_ReqEquipAvatar_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 avatarId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_avatarid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avatar.MSG_ReqEquipAvatar_CS)
  return target;
}

size_t MSG_ReqEquipAvatar_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avatar.MSG_ReqEquipAvatar_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 avatarId = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avatarid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqEquipAvatar_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avatar.MSG_ReqEquipAvatar_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqEquipAvatar_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqEquipAvatar_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avatar.MSG_ReqEquipAvatar_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avatar.MSG_ReqEquipAvatar_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqEquipAvatar_CS::MergeFrom(const MSG_ReqEquipAvatar_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avatar.MSG_ReqEquipAvatar_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_avatarid()) {
    _internal_set_avatarid(from._internal_avatarid());
  }
}

void MSG_ReqEquipAvatar_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avatar.MSG_ReqEquipAvatar_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqEquipAvatar_CS::CopyFrom(const MSG_ReqEquipAvatar_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avatar.MSG_ReqEquipAvatar_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqEquipAvatar_CS::IsInitialized() const {
  return true;
}

void MSG_ReqEquipAvatar_CS::InternalSwap(MSG_ReqEquipAvatar_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(avatarid_, other->avatarid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqEquipAvatar_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace avatar
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::avatar::AvatarPair* Arena::CreateMaybeMessage< ::avatar::AvatarPair >(Arena* arena) {
  return Arena::CreateInternal< ::avatar::AvatarPair >(arena);
}
template<> PROTOBUF_NOINLINE ::avatar::MSG_RetUserAvatars_SC* Arena::CreateMaybeMessage< ::avatar::MSG_RetUserAvatars_SC >(Arena* arena) {
  return Arena::CreateInternal< ::avatar::MSG_RetUserAvatars_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::avatar::MSG_ReqEquipAvatar_CS* Arena::CreateMaybeMessage< ::avatar::MSG_ReqEquipAvatar_CS >(Arena* arena) {
  return Arena::CreateInternal< ::avatar::MSG_ReqEquipAvatar_CS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
