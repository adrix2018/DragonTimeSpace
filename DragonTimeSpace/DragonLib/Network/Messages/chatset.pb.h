// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chatset_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chatset_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "chat.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chatset_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chatset_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chatset_2eproto;
namespace Chat {
class LocalChatInfo;
class LocalChatInfoDefaultTypeInternal;
extern LocalChatInfoDefaultTypeInternal _LocalChatInfo_default_instance_;
class LocalChatSet;
class LocalChatSetDefaultTypeInternal;
extern LocalChatSetDefaultTypeInternal _LocalChatSet_default_instance_;
}  // namespace Chat
PROTOBUF_NAMESPACE_OPEN
template<> ::Chat::LocalChatInfo* Arena::CreateMaybeMessage<::Chat::LocalChatInfo>(Arena*);
template<> ::Chat::LocalChatSet* Arena::CreateMaybeMessage<::Chat::LocalChatSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Chat {

// ===================================================================

class LocalChatInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.LocalChatInfo) */ {
 public:
  LocalChatInfo();
  virtual ~LocalChatInfo();

  LocalChatInfo(const LocalChatInfo& from);
  LocalChatInfo(LocalChatInfo&& from) noexcept
    : LocalChatInfo() {
    *this = ::std::move(from);
  }

  inline LocalChatInfo& operator=(const LocalChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalChatInfo& operator=(LocalChatInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalChatInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalChatInfo* internal_default_instance() {
    return reinterpret_cast<const LocalChatInfo*>(
               &_LocalChatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocalChatInfo& a, LocalChatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalChatInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalChatInfo* New() const final {
    return CreateMaybeMessage<LocalChatInfo>(nullptr);
  }

  LocalChatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalChatInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalChatInfo& from);
  void MergeFrom(const LocalChatInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalChatInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.LocalChatInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chatset_2eproto);
    return ::descriptor_table_chatset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataListFieldNumber = 3,
    kIdFieldNumber = 1,
    kUnreadNumFieldNumber = 2,
  };
  // repeated .Chat.ChatData dataList = 3;
  int datalist_size() const;
  private:
  int _internal_datalist_size() const;
  public:
  void clear_datalist();
  ::Chat::ChatData* mutable_datalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatData >*
      mutable_datalist();
  private:
  const ::Chat::ChatData& _internal_datalist(int index) const;
  ::Chat::ChatData* _internal_add_datalist();
  public:
  const ::Chat::ChatData& datalist(int index) const;
  ::Chat::ChatData* add_datalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatData >&
      datalist() const;

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 unread_num = 2;
  bool has_unread_num() const;
  private:
  bool _internal_has_unread_num() const;
  public:
  void clear_unread_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 unread_num() const;
  void set_unread_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unread_num() const;
  void _internal_set_unread_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Chat.LocalChatInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatData > datalist_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unread_num_;
  friend struct ::TableStruct_chatset_2eproto;
};
// -------------------------------------------------------------------

class LocalChatSet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Chat.LocalChatSet) */ {
 public:
  LocalChatSet();
  virtual ~LocalChatSet();

  LocalChatSet(const LocalChatSet& from);
  LocalChatSet(LocalChatSet&& from) noexcept
    : LocalChatSet() {
    *this = ::std::move(from);
  }

  inline LocalChatSet& operator=(const LocalChatSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalChatSet& operator=(LocalChatSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalChatSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalChatSet* internal_default_instance() {
    return reinterpret_cast<const LocalChatSet*>(
               &_LocalChatSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalChatSet& a, LocalChatSet& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalChatSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalChatSet* New() const final {
    return CreateMaybeMessage<LocalChatSet>(nullptr);
  }

  LocalChatSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalChatSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalChatSet& from);
  void MergeFrom(const LocalChatSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalChatSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Chat.LocalChatSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chatset_2eproto);
    return ::descriptor_table_chatset_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .Chat.LocalChatInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::Chat::LocalChatInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::LocalChatInfo >*
      mutable_list();
  private:
  const ::Chat::LocalChatInfo& _internal_list(int index) const;
  ::Chat::LocalChatInfo* _internal_add_list();
  public:
  const ::Chat::LocalChatInfo& list(int index) const;
  ::Chat::LocalChatInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::LocalChatInfo >&
      list() const;

  // @@protoc_insertion_point(class_scope:Chat.LocalChatSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::LocalChatInfo > list_;
  friend struct ::TableStruct_chatset_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalChatInfo

// optional uint64 id = 1;
inline bool LocalChatInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalChatInfo::has_id() const {
  return _internal_has_id();
}
inline void LocalChatInfo::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalChatInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalChatInfo::id() const {
  // @@protoc_insertion_point(field_get:Chat.LocalChatInfo.id)
  return _internal_id();
}
inline void LocalChatInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void LocalChatInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Chat.LocalChatInfo.id)
}

// optional uint32 unread_num = 2;
inline bool LocalChatInfo::_internal_has_unread_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocalChatInfo::has_unread_num() const {
  return _internal_has_unread_num();
}
inline void LocalChatInfo::clear_unread_num() {
  unread_num_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalChatInfo::_internal_unread_num() const {
  return unread_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalChatInfo::unread_num() const {
  // @@protoc_insertion_point(field_get:Chat.LocalChatInfo.unread_num)
  return _internal_unread_num();
}
inline void LocalChatInfo::_internal_set_unread_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  unread_num_ = value;
}
inline void LocalChatInfo::set_unread_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unread_num(value);
  // @@protoc_insertion_point(field_set:Chat.LocalChatInfo.unread_num)
}

// repeated .Chat.ChatData dataList = 3;
inline int LocalChatInfo::_internal_datalist_size() const {
  return datalist_.size();
}
inline int LocalChatInfo::datalist_size() const {
  return _internal_datalist_size();
}
inline ::Chat::ChatData* LocalChatInfo::mutable_datalist(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.LocalChatInfo.dataList)
  return datalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatData >*
LocalChatInfo::mutable_datalist() {
  // @@protoc_insertion_point(field_mutable_list:Chat.LocalChatInfo.dataList)
  return &datalist_;
}
inline const ::Chat::ChatData& LocalChatInfo::_internal_datalist(int index) const {
  return datalist_.Get(index);
}
inline const ::Chat::ChatData& LocalChatInfo::datalist(int index) const {
  // @@protoc_insertion_point(field_get:Chat.LocalChatInfo.dataList)
  return _internal_datalist(index);
}
inline ::Chat::ChatData* LocalChatInfo::_internal_add_datalist() {
  return datalist_.Add();
}
inline ::Chat::ChatData* LocalChatInfo::add_datalist() {
  // @@protoc_insertion_point(field_add:Chat.LocalChatInfo.dataList)
  return _internal_add_datalist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::ChatData >&
LocalChatInfo::datalist() const {
  // @@protoc_insertion_point(field_list:Chat.LocalChatInfo.dataList)
  return datalist_;
}

// -------------------------------------------------------------------

// LocalChatSet

// repeated .Chat.LocalChatInfo list = 1;
inline int LocalChatSet::_internal_list_size() const {
  return list_.size();
}
inline int LocalChatSet::list_size() const {
  return _internal_list_size();
}
inline void LocalChatSet::clear_list() {
  list_.Clear();
}
inline ::Chat::LocalChatInfo* LocalChatSet::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Chat.LocalChatSet.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::LocalChatInfo >*
LocalChatSet::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Chat.LocalChatSet.list)
  return &list_;
}
inline const ::Chat::LocalChatInfo& LocalChatSet::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::Chat::LocalChatInfo& LocalChatSet::list(int index) const {
  // @@protoc_insertion_point(field_get:Chat.LocalChatSet.list)
  return _internal_list(index);
}
inline ::Chat::LocalChatInfo* LocalChatSet::_internal_add_list() {
  return list_.Add();
}
inline ::Chat::LocalChatInfo* LocalChatSet::add_list() {
  // @@protoc_insertion_point(field_add:Chat.LocalChatSet.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Chat::LocalChatInfo >&
LocalChatSet::list() const {
  // @@protoc_insertion_point(field_list:Chat.LocalChatSet.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chatset_2eproto
