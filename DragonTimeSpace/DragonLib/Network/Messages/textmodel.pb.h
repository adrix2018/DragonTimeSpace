// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: textmodel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_textmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_textmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_textmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_textmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_textmodel_2eproto;
namespace TextModelpackage {
class TextModelContentListProto;
class TextModelContentListProtoDefaultTypeInternal;
extern TextModelContentListProtoDefaultTypeInternal _TextModelContentListProto_default_instance_;
class TextModelContentProto;
class TextModelContentProtoDefaultTypeInternal;
extern TextModelContentProtoDefaultTypeInternal _TextModelContentProto_default_instance_;
}  // namespace TextModelpackage
PROTOBUF_NAMESPACE_OPEN
template<> ::TextModelpackage::TextModelContentListProto* Arena::CreateMaybeMessage<::TextModelpackage::TextModelContentListProto>(Arena*);
template<> ::TextModelpackage::TextModelContentProto* Arena::CreateMaybeMessage<::TextModelpackage::TextModelContentProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TextModelpackage {

// ===================================================================

class TextModelContentProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TextModelpackage.TextModelContentProto) */ {
 public:
  TextModelContentProto();
  virtual ~TextModelContentProto();

  TextModelContentProto(const TextModelContentProto& from);
  TextModelContentProto(TextModelContentProto&& from) noexcept
    : TextModelContentProto() {
    *this = ::std::move(from);
  }

  inline TextModelContentProto& operator=(const TextModelContentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextModelContentProto& operator=(TextModelContentProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextModelContentProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextModelContentProto* internal_default_instance() {
    return reinterpret_cast<const TextModelContentProto*>(
               &_TextModelContentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextModelContentProto& a, TextModelContentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TextModelContentProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextModelContentProto* New() const final {
    return CreateMaybeMessage<TextModelContentProto>(nullptr);
  }

  TextModelContentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextModelContentProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextModelContentProto& from);
  void MergeFrom(const TextModelContentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextModelContentProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TextModelpackage.TextModelContentProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_textmodel_2eproto);
    return ::descriptor_table_textmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelBeginFieldNumber = 1,
    kModelEndFieldNumber = 2,
    kFontNameFieldNumber = 4,
    kFontSizeFieldNumber = 3,
  };
  // optional string modelBegin = 1;
  bool has_modelbegin() const;
  private:
  bool _internal_has_modelbegin() const;
  public:
  void clear_modelbegin();
  const std::string& modelbegin() const;
  void set_modelbegin(const std::string& value);
  void set_modelbegin(std::string&& value);
  void set_modelbegin(const char* value);
  void set_modelbegin(const char* value, size_t size);
  std::string* mutable_modelbegin();
  std::string* release_modelbegin();
  void set_allocated_modelbegin(std::string* modelbegin);
  private:
  const std::string& _internal_modelbegin() const;
  void _internal_set_modelbegin(const std::string& value);
  std::string* _internal_mutable_modelbegin();
  public:

  // optional string modelEnd = 2;
  bool has_modelend() const;
  private:
  bool _internal_has_modelend() const;
  public:
  void clear_modelend();
  const std::string& modelend() const;
  void set_modelend(const std::string& value);
  void set_modelend(std::string&& value);
  void set_modelend(const char* value);
  void set_modelend(const char* value, size_t size);
  std::string* mutable_modelend();
  std::string* release_modelend();
  void set_allocated_modelend(std::string* modelend);
  private:
  const std::string& _internal_modelend() const;
  void _internal_set_modelend(const std::string& value);
  std::string* _internal_mutable_modelend();
  public:

  // optional string fontName = 4;
  bool has_fontname() const;
  private:
  bool _internal_has_fontname() const;
  public:
  void clear_fontname();
  const std::string& fontname() const;
  void set_fontname(const std::string& value);
  void set_fontname(std::string&& value);
  void set_fontname(const char* value);
  void set_fontname(const char* value, size_t size);
  std::string* mutable_fontname();
  std::string* release_fontname();
  void set_allocated_fontname(std::string* fontname);
  private:
  const std::string& _internal_fontname() const;
  void _internal_set_fontname(const std::string& value);
  std::string* _internal_mutable_fontname();
  public:

  // optional uint32 fontSize = 3;
  bool has_fontsize() const;
  private:
  bool _internal_has_fontsize() const;
  public:
  void clear_fontsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 fontsize() const;
  void set_fontsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fontsize() const;
  void _internal_set_fontsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TextModelpackage.TextModelContentProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelbegin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelend_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fontname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fontsize_;
  friend struct ::TableStruct_textmodel_2eproto;
};
// -------------------------------------------------------------------

class TextModelContentListProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TextModelpackage.TextModelContentListProto) */ {
 public:
  TextModelContentListProto();
  virtual ~TextModelContentListProto();

  TextModelContentListProto(const TextModelContentListProto& from);
  TextModelContentListProto(TextModelContentListProto&& from) noexcept
    : TextModelContentListProto() {
    *this = ::std::move(from);
  }

  inline TextModelContentListProto& operator=(const TextModelContentListProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextModelContentListProto& operator=(TextModelContentListProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextModelContentListProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextModelContentListProto* internal_default_instance() {
    return reinterpret_cast<const TextModelContentListProto*>(
               &_TextModelContentListProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TextModelContentListProto& a, TextModelContentListProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TextModelContentListProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextModelContentListProto* New() const final {
    return CreateMaybeMessage<TextModelContentListProto>(nullptr);
  }

  TextModelContentListProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextModelContentListProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextModelContentListProto& from);
  void MergeFrom(const TextModelContentListProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextModelContentListProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TextModelpackage.TextModelContentListProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_textmodel_2eproto);
    return ::descriptor_table_textmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kModelListFieldNumber = 2,
  };
  // repeated string key = 1;
  int key_size() const;
  private:
  int _internal_key_size() const;
  public:
  void clear_key();
  const std::string& key(int index) const;
  std::string* mutable_key(int index);
  void set_key(int index, const std::string& value);
  void set_key(int index, std::string&& value);
  void set_key(int index, const char* value);
  void set_key(int index, const char* value, size_t size);
  std::string* add_key();
  void add_key(const std::string& value);
  void add_key(std::string&& value);
  void add_key(const char* value);
  void add_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_key();
  private:
  const std::string& _internal_key(int index) const;
  std::string* _internal_add_key();
  public:

  // repeated .TextModelpackage.TextModelContentProto modelList = 2;
  int modellist_size() const;
  private:
  int _internal_modellist_size() const;
  public:
  void clear_modellist();
  ::TextModelpackage::TextModelContentProto* mutable_modellist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TextModelpackage::TextModelContentProto >*
      mutable_modellist();
  private:
  const ::TextModelpackage::TextModelContentProto& _internal_modellist(int index) const;
  ::TextModelpackage::TextModelContentProto* _internal_add_modellist();
  public:
  const ::TextModelpackage::TextModelContentProto& modellist(int index) const;
  ::TextModelpackage::TextModelContentProto* add_modellist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TextModelpackage::TextModelContentProto >&
      modellist() const;

  // @@protoc_insertion_point(class_scope:TextModelpackage.TextModelContentListProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TextModelpackage::TextModelContentProto > modellist_;
  friend struct ::TableStruct_textmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextModelContentProto

// optional string modelBegin = 1;
inline bool TextModelContentProto::_internal_has_modelbegin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TextModelContentProto::has_modelbegin() const {
  return _internal_has_modelbegin();
}
inline void TextModelContentProto::clear_modelbegin() {
  modelbegin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TextModelContentProto::modelbegin() const {
  // @@protoc_insertion_point(field_get:TextModelpackage.TextModelContentProto.modelBegin)
  return _internal_modelbegin();
}
inline void TextModelContentProto::set_modelbegin(const std::string& value) {
  _internal_set_modelbegin(value);
  // @@protoc_insertion_point(field_set:TextModelpackage.TextModelContentProto.modelBegin)
}
inline std::string* TextModelContentProto::mutable_modelbegin() {
  // @@protoc_insertion_point(field_mutable:TextModelpackage.TextModelContentProto.modelBegin)
  return _internal_mutable_modelbegin();
}
inline const std::string& TextModelContentProto::_internal_modelbegin() const {
  return modelbegin_.GetNoArena();
}
inline void TextModelContentProto::_internal_set_modelbegin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  modelbegin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TextModelContentProto::set_modelbegin(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  modelbegin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TextModelpackage.TextModelContentProto.modelBegin)
}
inline void TextModelContentProto::set_modelbegin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  modelbegin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TextModelpackage.TextModelContentProto.modelBegin)
}
inline void TextModelContentProto::set_modelbegin(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  modelbegin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TextModelpackage.TextModelContentProto.modelBegin)
}
inline std::string* TextModelContentProto::_internal_mutable_modelbegin() {
  _has_bits_[0] |= 0x00000001u;
  return modelbegin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TextModelContentProto::release_modelbegin() {
  // @@protoc_insertion_point(field_release:TextModelpackage.TextModelContentProto.modelBegin)
  if (!_internal_has_modelbegin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return modelbegin_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TextModelContentProto::set_allocated_modelbegin(std::string* modelbegin) {
  if (modelbegin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modelbegin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelbegin);
  // @@protoc_insertion_point(field_set_allocated:TextModelpackage.TextModelContentProto.modelBegin)
}

// optional string modelEnd = 2;
inline bool TextModelContentProto::_internal_has_modelend() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TextModelContentProto::has_modelend() const {
  return _internal_has_modelend();
}
inline void TextModelContentProto::clear_modelend() {
  modelend_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TextModelContentProto::modelend() const {
  // @@protoc_insertion_point(field_get:TextModelpackage.TextModelContentProto.modelEnd)
  return _internal_modelend();
}
inline void TextModelContentProto::set_modelend(const std::string& value) {
  _internal_set_modelend(value);
  // @@protoc_insertion_point(field_set:TextModelpackage.TextModelContentProto.modelEnd)
}
inline std::string* TextModelContentProto::mutable_modelend() {
  // @@protoc_insertion_point(field_mutable:TextModelpackage.TextModelContentProto.modelEnd)
  return _internal_mutable_modelend();
}
inline const std::string& TextModelContentProto::_internal_modelend() const {
  return modelend_.GetNoArena();
}
inline void TextModelContentProto::_internal_set_modelend(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  modelend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TextModelContentProto::set_modelend(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  modelend_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TextModelpackage.TextModelContentProto.modelEnd)
}
inline void TextModelContentProto::set_modelend(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  modelend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TextModelpackage.TextModelContentProto.modelEnd)
}
inline void TextModelContentProto::set_modelend(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  modelend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TextModelpackage.TextModelContentProto.modelEnd)
}
inline std::string* TextModelContentProto::_internal_mutable_modelend() {
  _has_bits_[0] |= 0x00000002u;
  return modelend_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TextModelContentProto::release_modelend() {
  // @@protoc_insertion_point(field_release:TextModelpackage.TextModelContentProto.modelEnd)
  if (!_internal_has_modelend()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return modelend_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TextModelContentProto::set_allocated_modelend(std::string* modelend) {
  if (modelend != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  modelend_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelend);
  // @@protoc_insertion_point(field_set_allocated:TextModelpackage.TextModelContentProto.modelEnd)
}

// optional uint32 fontSize = 3;
inline bool TextModelContentProto::_internal_has_fontsize() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TextModelContentProto::has_fontsize() const {
  return _internal_has_fontsize();
}
inline void TextModelContentProto::clear_fontsize() {
  fontsize_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextModelContentProto::_internal_fontsize() const {
  return fontsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TextModelContentProto::fontsize() const {
  // @@protoc_insertion_point(field_get:TextModelpackage.TextModelContentProto.fontSize)
  return _internal_fontsize();
}
inline void TextModelContentProto::_internal_set_fontsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  fontsize_ = value;
}
inline void TextModelContentProto::set_fontsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fontsize(value);
  // @@protoc_insertion_point(field_set:TextModelpackage.TextModelContentProto.fontSize)
}

// optional string fontName = 4;
inline bool TextModelContentProto::_internal_has_fontname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TextModelContentProto::has_fontname() const {
  return _internal_has_fontname();
}
inline void TextModelContentProto::clear_fontname() {
  fontname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TextModelContentProto::fontname() const {
  // @@protoc_insertion_point(field_get:TextModelpackage.TextModelContentProto.fontName)
  return _internal_fontname();
}
inline void TextModelContentProto::set_fontname(const std::string& value) {
  _internal_set_fontname(value);
  // @@protoc_insertion_point(field_set:TextModelpackage.TextModelContentProto.fontName)
}
inline std::string* TextModelContentProto::mutable_fontname() {
  // @@protoc_insertion_point(field_mutable:TextModelpackage.TextModelContentProto.fontName)
  return _internal_mutable_fontname();
}
inline const std::string& TextModelContentProto::_internal_fontname() const {
  return fontname_.GetNoArena();
}
inline void TextModelContentProto::_internal_set_fontname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  fontname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TextModelContentProto::set_fontname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  fontname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TextModelpackage.TextModelContentProto.fontName)
}
inline void TextModelContentProto::set_fontname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  fontname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TextModelpackage.TextModelContentProto.fontName)
}
inline void TextModelContentProto::set_fontname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  fontname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TextModelpackage.TextModelContentProto.fontName)
}
inline std::string* TextModelContentProto::_internal_mutable_fontname() {
  _has_bits_[0] |= 0x00000004u;
  return fontname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TextModelContentProto::release_fontname() {
  // @@protoc_insertion_point(field_release:TextModelpackage.TextModelContentProto.fontName)
  if (!_internal_has_fontname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return fontname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TextModelContentProto::set_allocated_fontname(std::string* fontname) {
  if (fontname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fontname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fontname);
  // @@protoc_insertion_point(field_set_allocated:TextModelpackage.TextModelContentProto.fontName)
}

// -------------------------------------------------------------------

// TextModelContentListProto

// repeated string key = 1;
inline int TextModelContentListProto::_internal_key_size() const {
  return key_.size();
}
inline int TextModelContentListProto::key_size() const {
  return _internal_key_size();
}
inline void TextModelContentListProto::clear_key() {
  key_.Clear();
}
inline std::string* TextModelContentListProto::add_key() {
  // @@protoc_insertion_point(field_add_mutable:TextModelpackage.TextModelContentListProto.key)
  return _internal_add_key();
}
inline const std::string& TextModelContentListProto::_internal_key(int index) const {
  return key_.Get(index);
}
inline const std::string& TextModelContentListProto::key(int index) const {
  // @@protoc_insertion_point(field_get:TextModelpackage.TextModelContentListProto.key)
  return _internal_key(index);
}
inline std::string* TextModelContentListProto::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:TextModelpackage.TextModelContentListProto.key)
  return key_.Mutable(index);
}
inline void TextModelContentListProto::set_key(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TextModelpackage.TextModelContentListProto.key)
  key_.Mutable(index)->assign(value);
}
inline void TextModelContentListProto::set_key(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TextModelpackage.TextModelContentListProto.key)
  key_.Mutable(index)->assign(std::move(value));
}
inline void TextModelContentListProto::set_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TextModelpackage.TextModelContentListProto.key)
}
inline void TextModelContentListProto::set_key(int index, const char* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TextModelpackage.TextModelContentListProto.key)
}
inline std::string* TextModelContentListProto::_internal_add_key() {
  return key_.Add();
}
inline void TextModelContentListProto::add_key(const std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TextModelpackage.TextModelContentListProto.key)
}
inline void TextModelContentListProto::add_key(std::string&& value) {
  key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TextModelpackage.TextModelContentListProto.key)
}
inline void TextModelContentListProto::add_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TextModelpackage.TextModelContentListProto.key)
}
inline void TextModelContentListProto::add_key(const char* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TextModelpackage.TextModelContentListProto.key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TextModelContentListProto::key() const {
  // @@protoc_insertion_point(field_list:TextModelpackage.TextModelContentListProto.key)
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TextModelContentListProto::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:TextModelpackage.TextModelContentListProto.key)
  return &key_;
}

// repeated .TextModelpackage.TextModelContentProto modelList = 2;
inline int TextModelContentListProto::_internal_modellist_size() const {
  return modellist_.size();
}
inline int TextModelContentListProto::modellist_size() const {
  return _internal_modellist_size();
}
inline void TextModelContentListProto::clear_modellist() {
  modellist_.Clear();
}
inline ::TextModelpackage::TextModelContentProto* TextModelContentListProto::mutable_modellist(int index) {
  // @@protoc_insertion_point(field_mutable:TextModelpackage.TextModelContentListProto.modelList)
  return modellist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TextModelpackage::TextModelContentProto >*
TextModelContentListProto::mutable_modellist() {
  // @@protoc_insertion_point(field_mutable_list:TextModelpackage.TextModelContentListProto.modelList)
  return &modellist_;
}
inline const ::TextModelpackage::TextModelContentProto& TextModelContentListProto::_internal_modellist(int index) const {
  return modellist_.Get(index);
}
inline const ::TextModelpackage::TextModelContentProto& TextModelContentListProto::modellist(int index) const {
  // @@protoc_insertion_point(field_get:TextModelpackage.TextModelContentListProto.modelList)
  return _internal_modellist(index);
}
inline ::TextModelpackage::TextModelContentProto* TextModelContentListProto::_internal_add_modellist() {
  return modellist_.Add();
}
inline ::TextModelpackage::TextModelContentProto* TextModelContentListProto::add_modellist() {
  // @@protoc_insertion_point(field_add:TextModelpackage.TextModelContentListProto.modelList)
  return _internal_add_modellist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TextModelpackage::TextModelContentProto >&
TextModelContentListProto::modellist() const {
  // @@protoc_insertion_point(field_list:TextModelpackage.TextModelContentListProto.modelList)
  return modellist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TextModelpackage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_textmodel_2eproto
