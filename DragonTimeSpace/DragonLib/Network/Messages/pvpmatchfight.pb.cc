// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pvpmatchfight.proto

#include "pvpmatchfight.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectItem_basic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pvpmatchfight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetPvPMatchFightCurLive_SC_pvpmatchfight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pvpmatchfight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetPvPTeamCurScore_SC_pvpmatchfight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pvpmatchfight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PvPAwardItem_pvpmatchfight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pvpmatchfight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_onePlayerLive_pvpmatchfight_2eproto;
namespace pvpmatchfight {
class MSG_Req_StartPvPMatch_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_StartPvPMatch_CS> _instance;
} _MSG_Req_StartPvPMatch_CS_default_instance_;
class MSG_Ret_StartPvPMatch_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_StartPvPMatch_SC> _instance;
} _MSG_Ret_StartPvPMatch_SC_default_instance_;
class MSG_Req_CancelPvPMatch_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_CancelPvPMatch_CS> _instance;
} _MSG_Req_CancelPvPMatch_CS_default_instance_;
class MSG_Ret_CancelPvPMatch_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_CancelPvPMatch_SC> _instance;
} _MSG_Ret_CancelPvPMatch_SC_default_instance_;
class MSG_Ret_PvPMatchResult_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_PvPMatchResult_SC> _instance;
} _MSG_Ret_PvPMatchResult_SC_default_instance_;
class MSG_Req_GotoPvPBattle_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_GotoPvPBattle_CS> _instance;
} _MSG_Req_GotoPvPBattle_CS_default_instance_;
class MSG_ReqChoosePvPPrepared_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqChoosePvPPrepared_CS> _instance;
} _MSG_ReqChoosePvPPrepared_CS_default_instance_;
class MSG_RetChoosePvPPrepared_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetChoosePvPPrepared_SC> _instance;
} _MSG_RetChoosePvPPrepared_SC_default_instance_;
class MSG_RetStartPvPPrepare_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetStartPvPPrepare_SC> _instance;
} _MSG_RetStartPvPPrepare_SC_default_instance_;
class MSG_RetPvPFightCountDown_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPvPFightCountDown_SC> _instance;
} _MSG_RetPvPFightCountDown_SC_default_instance_;
class MSG_RetPvPFightPreFight_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPvPFightPreFight_SC> _instance;
} _MSG_RetPvPFightPreFight_SC_default_instance_;
class MSG_RetStartPvPFight_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetStartPvPFight_SC> _instance;
} _MSG_RetStartPvPFight_SC_default_instance_;
class MSG_RetPvPSpeedupFight_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPvPSpeedupFight_SC> _instance;
} _MSG_RetPvPSpeedupFight_SC_default_instance_;
class MSG_RetPvPFightFinish_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPvPFightFinish_SC> _instance;
} _MSG_RetPvPFightFinish_SC_default_instance_;
class MSG_ReqPvPFightCurStage_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqPvPFightCurStage_CS> _instance;
} _MSG_ReqPvPFightCurStage_CS_default_instance_;
class MSG_RetPvPFightCurStage_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPvPFightCurStage_SC> _instance;
} _MSG_RetPvPFightCurStage_SC_default_instance_;
class MSG_RetPvPTeamCurScore_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPvPTeamCurScore_SC> _instance;
} _MSG_RetPvPTeamCurScore_SC_default_instance_;
class MSG_RetPvPPreparedNum_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPvPPreparedNum_SC> _instance;
} _MSG_RetPvPPreparedNum_SC_default_instance_;
class PvPAwardItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PvPAwardItem> _instance;
} _PvPAwardItem_default_instance_;
class MSG_ReqPvPDailyAwards_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqPvPDailyAwards_CS> _instance;
} _MSG_ReqPvPDailyAwards_CS_default_instance_;
class MSG_RetPvPDailyAwards_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPvPDailyAwards_SC> _instance;
} _MSG_RetPvPDailyAwards_SC_default_instance_;
class MSG_RetPvPPKGeneralConfig_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPvPPKGeneralConfig_SC> _instance;
} _MSG_RetPvPPKGeneralConfig_SC_default_instance_;
class onePlayerLiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<onePlayerLive> _instance;
} _onePlayerLive_default_instance_;
class MSG_RetPvPMatchFightCurLive_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetPvPMatchFightCurLive_SC> _instance;
} _MSG_RetPvPMatchFightCurLive_SC_default_instance_;
}  // namespace pvpmatchfight
static void InitDefaultsscc_info_MSG_ReqChoosePvPPrepared_CS_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_ReqChoosePvPPrepared_CS_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_ReqChoosePvPPrepared_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_ReqChoosePvPPrepared_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqChoosePvPPrepared_CS_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqChoosePvPPrepared_CS_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqPvPDailyAwards_CS_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_ReqPvPDailyAwards_CS_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_ReqPvPDailyAwards_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_ReqPvPDailyAwards_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqPvPDailyAwards_CS_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqPvPDailyAwards_CS_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqPvPFightCurStage_CS_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_ReqPvPFightCurStage_CS_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_ReqPvPFightCurStage_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_ReqPvPFightCurStage_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqPvPFightCurStage_CS_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqPvPFightCurStage_CS_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_CancelPvPMatch_CS_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_Req_CancelPvPMatch_CS_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_Req_CancelPvPMatch_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_Req_CancelPvPMatch_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_CancelPvPMatch_CS_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_CancelPvPMatch_CS_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_GotoPvPBattle_CS_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_Req_GotoPvPBattle_CS_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_Req_GotoPvPBattle_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_Req_GotoPvPBattle_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_GotoPvPBattle_CS_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_GotoPvPBattle_CS_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_StartPvPMatch_CS_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_Req_StartPvPMatch_CS_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_Req_StartPvPMatch_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_Req_StartPvPMatch_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_StartPvPMatch_CS_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_StartPvPMatch_CS_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetChoosePvPPrepared_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetChoosePvPPrepared_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetChoosePvPPrepared_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetChoosePvPPrepared_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetChoosePvPPrepared_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetChoosePvPPrepared_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetPvPDailyAwards_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetPvPDailyAwards_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetPvPDailyAwards_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetPvPDailyAwards_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetPvPDailyAwards_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetPvPDailyAwards_SC_pvpmatchfight_2eproto}, {
      &scc_info_PvPAwardItem_pvpmatchfight_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetPvPFightCountDown_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetPvPFightCountDown_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetPvPFightCountDown_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetPvPFightCountDown_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetPvPFightCountDown_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetPvPFightCountDown_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetPvPFightCurStage_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetPvPFightCurStage_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetPvPFightCurStage_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetPvPFightCurStage_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MSG_RetPvPFightCurStage_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MSG_RetPvPFightCurStage_SC_pvpmatchfight_2eproto}, {
      &scc_info_MSG_RetPvPTeamCurScore_SC_pvpmatchfight_2eproto.base,
      &scc_info_MSG_RetPvPMatchFightCurLive_SC_pvpmatchfight_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetPvPFightFinish_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetPvPFightFinish_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetPvPFightFinish_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetPvPFightFinish_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetPvPFightFinish_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetPvPFightFinish_SC_pvpmatchfight_2eproto}, {
      &scc_info_PvPAwardItem_pvpmatchfight_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetPvPFightPreFight_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetPvPFightPreFight_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetPvPFightPreFight_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetPvPFightPreFight_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetPvPFightPreFight_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetPvPFightPreFight_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetPvPMatchFightCurLive_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetPvPMatchFightCurLive_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetPvPMatchFightCurLive_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetPvPMatchFightCurLive_SC_pvpmatchfight_2eproto}, {
      &scc_info_onePlayerLive_pvpmatchfight_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetPvPPKGeneralConfig_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetPvPPKGeneralConfig_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetPvPPKGeneralConfig_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetPvPPKGeneralConfig_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetPvPPreparedNum_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetPvPPreparedNum_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetPvPPreparedNum_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetPvPPreparedNum_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetPvPPreparedNum_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetPvPPreparedNum_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetPvPSpeedupFight_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetPvPSpeedupFight_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetPvPSpeedupFight_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetPvPSpeedupFight_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetPvPSpeedupFight_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetPvPSpeedupFight_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetPvPTeamCurScore_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetPvPTeamCurScore_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetPvPTeamCurScore_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetPvPTeamCurScore_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetStartPvPFight_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetStartPvPFight_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetStartPvPFight_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetStartPvPFight_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetStartPvPFight_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetStartPvPFight_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetStartPvPPrepare_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_RetStartPvPPrepare_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_RetStartPvPPrepare_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_RetStartPvPPrepare_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetStartPvPPrepare_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetStartPvPPrepare_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_CancelPvPMatch_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_Ret_CancelPvPMatch_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_CancelPvPMatch_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_CancelPvPMatch_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_PvPMatchResult_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_Ret_PvPMatchResult_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_Ret_PvPMatchResult_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_Ret_PvPMatchResult_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_PvPMatchResult_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_PvPMatchResult_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_StartPvPMatch_SC_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_MSG_Ret_StartPvPMatch_SC_default_instance_;
    new (ptr) ::pvpmatchfight::MSG_Ret_StartPvPMatch_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::MSG_Ret_StartPvPMatch_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_StartPvPMatch_SC_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_StartPvPMatch_SC_pvpmatchfight_2eproto}, {}};

static void InitDefaultsscc_info_PvPAwardItem_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_PvPAwardItem_default_instance_;
    new (ptr) ::pvpmatchfight::PvPAwardItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::PvPAwardItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PvPAwardItem_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PvPAwardItem_pvpmatchfight_2eproto}, {
      &scc_info_ObjectItem_basic_2eproto.base,}};

static void InitDefaultsscc_info_onePlayerLive_pvpmatchfight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pvpmatchfight::_onePlayerLive_default_instance_;
    new (ptr) ::pvpmatchfight::onePlayerLive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pvpmatchfight::onePlayerLive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_onePlayerLive_pvpmatchfight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_onePlayerLive_pvpmatchfight_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pvpmatchfight_2eproto[24];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pvpmatchfight_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pvpmatchfight_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pvpmatchfight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Req_StartPvPMatch_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Req_StartPvPMatch_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Req_StartPvPMatch_CS, matchtype_),
  0,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_StartPvPMatch_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_StartPvPMatch_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_StartPvPMatch_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_StartPvPMatch_SC, matchtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Req_CancelPvPMatch_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Req_CancelPvPMatch_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Req_CancelPvPMatch_CS, matchtype_),
  0,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC, matchtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_PvPMatchResult_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_PvPMatchResult_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_PvPMatchResult_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Ret_PvPMatchResult_SC, matchtype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Req_GotoPvPBattle_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Req_GotoPvPBattle_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_Req_GotoPvPBattle_CS, matchtype_),
  0,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_ReqChoosePvPPrepared_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_ReqChoosePvPPrepared_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetChoosePvPPrepared_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetChoosePvPPrepared_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetChoosePvPPrepared_SC, errcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetStartPvPPrepare_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetStartPvPPrepare_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetStartPvPPrepare_SC, matchtype_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetStartPvPPrepare_SC, duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightCountDown_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightCountDown_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightCountDown_SC, matchtype_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightCountDown_SC, duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightPreFight_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightPreFight_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightPreFight_SC, matchtype_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightPreFight_SC, duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetStartPvPFight_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetStartPvPFight_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetStartPvPFight_SC, matchtype_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetStartPvPFight_SC, duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPSpeedupFight_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPSpeedupFight_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPSpeedupFight_SC, matchtype_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPSpeedupFight_SC, duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightFinish_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightFinish_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightFinish_SC, matchtype_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightFinish_SC, duration_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightFinish_SC, result_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightFinish_SC, award_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_ReqPvPFightCurStage_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_ReqPvPFightCurStage_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightCurStage_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightCurStage_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightCurStage_SC, curstage_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightCurStage_SC, leftsecs_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightCurStage_SC, scoreinfo_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPFightCurStage_SC, liveinfo_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPTeamCurScore_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPTeamCurScore_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPTeamCurScore_SC, team1id_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPTeamCurScore_SC, team1score_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPTeamCurScore_SC, team2id_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPTeamCurScore_SC, team2score_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPPreparedNum_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPPreparedNum_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPPreparedNum_SC, matchtype_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPPreparedNum_SC, curnum_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPPreparedNum_SC, allnum_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::PvPAwardItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::PvPAwardItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::PvPAwardItem, result_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::PvPAwardItem, item_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::PvPAwardItem, heroid_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_ReqPvPDailyAwards_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_ReqPvPDailyAwards_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_ReqPvPDailyAwards_CS, matchtype_),
  0,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPDailyAwards_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPDailyAwards_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPDailyAwards_SC, matchtype_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPDailyAwards_SC, rewardlist_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC, matchtype_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC, teampknum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::onePlayerLive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::onePlayerLive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::onePlayerLive, memid_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::onePlayerLive, heroid_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::onePlayerLive, isdead_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::onePlayerLive, reliveleftsecs_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC, oneplayer_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::pvpmatchfight::MSG_Req_StartPvPMatch_CS)},
  { 7, 14, sizeof(::pvpmatchfight::MSG_Ret_StartPvPMatch_SC)},
  { 16, 22, sizeof(::pvpmatchfight::MSG_Req_CancelPvPMatch_CS)},
  { 23, 30, sizeof(::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC)},
  { 32, 39, sizeof(::pvpmatchfight::MSG_Ret_PvPMatchResult_SC)},
  { 41, 47, sizeof(::pvpmatchfight::MSG_Req_GotoPvPBattle_CS)},
  { 48, 53, sizeof(::pvpmatchfight::MSG_ReqChoosePvPPrepared_CS)},
  { 53, 59, sizeof(::pvpmatchfight::MSG_RetChoosePvPPrepared_SC)},
  { 60, 67, sizeof(::pvpmatchfight::MSG_RetStartPvPPrepare_SC)},
  { 69, 76, sizeof(::pvpmatchfight::MSG_RetPvPFightCountDown_SC)},
  { 78, 85, sizeof(::pvpmatchfight::MSG_RetPvPFightPreFight_SC)},
  { 87, 94, sizeof(::pvpmatchfight::MSG_RetStartPvPFight_SC)},
  { 96, 103, sizeof(::pvpmatchfight::MSG_RetPvPSpeedupFight_SC)},
  { 105, 114, sizeof(::pvpmatchfight::MSG_RetPvPFightFinish_SC)},
  { 118, 123, sizeof(::pvpmatchfight::MSG_ReqPvPFightCurStage_CS)},
  { 123, 132, sizeof(::pvpmatchfight::MSG_RetPvPFightCurStage_SC)},
  { 136, 145, sizeof(::pvpmatchfight::MSG_RetPvPTeamCurScore_SC)},
  { 149, 157, sizeof(::pvpmatchfight::MSG_RetPvPPreparedNum_SC)},
  { 160, 168, sizeof(::pvpmatchfight::PvPAwardItem)},
  { 171, 177, sizeof(::pvpmatchfight::MSG_ReqPvPDailyAwards_CS)},
  { 178, 185, sizeof(::pvpmatchfight::MSG_RetPvPDailyAwards_SC)},
  { 187, 194, sizeof(::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC)},
  { 196, 205, sizeof(::pvpmatchfight::onePlayerLive)},
  { 209, 215, sizeof(::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_Req_StartPvPMatch_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_Ret_StartPvPMatch_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_Req_CancelPvPMatch_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_Ret_CancelPvPMatch_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_Ret_PvPMatchResult_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_Req_GotoPvPBattle_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_ReqChoosePvPPrepared_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetChoosePvPPrepared_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetStartPvPPrepare_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetPvPFightCountDown_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetPvPFightPreFight_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetStartPvPFight_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetPvPSpeedupFight_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetPvPFightFinish_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_ReqPvPFightCurStage_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetPvPFightCurStage_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetPvPTeamCurScore_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetPvPPreparedNum_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_PvPAwardItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_ReqPvPDailyAwards_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetPvPDailyAwards_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetPvPPKGeneralConfig_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_onePlayerLive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pvpmatchfight::_MSG_RetPvPMatchFightCurLive_SC_default_instance_),
};

const char descriptor_table_protodef_pvpmatchfight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023pvpmatchfight.proto\022\rpvpmatchfight\032\016ms"
  "g_enum.proto\032\013basic.proto\">\n\030MSG_Req_Sta"
  "rtPvPMatch_CS\022\"\n\tmatchtype\030\001 \002(\0162\017.msg.M"
  "ATCHFIGHT\"O\n\030MSG_Ret_StartPvPMatch_SC\022\017\n"
  "\007retcode\030\001 \001(\r\022\"\n\tmatchtype\030\002 \002(\0162\017.msg."
  "MATCHFIGHT\"\?\n\031MSG_Req_CancelPvPMatch_CS\022"
  "\"\n\tmatchtype\030\001 \002(\0162\017.msg.MATCHFIGHT\"P\n\031M"
  "SG_Ret_CancelPvPMatch_SC\022\017\n\007retcode\030\001 \001("
  "\r\022\"\n\tmatchtype\030\002 \002(\0162\017.msg.MATCHFIGHT\"P\n"
  "\031MSG_Ret_PvPMatchResult_SC\022\017\n\007retcode\030\001 "
  "\001(\r\022\"\n\tmatchtype\030\002 \002(\0162\017.msg.MATCHFIGHT\""
  ">\n\030MSG_Req_GotoPvPBattle_CS\022\"\n\tmatchtype"
  "\030\001 \002(\0162\017.msg.MATCHFIGHT\"\035\n\033MSG_ReqChoose"
  "PvPPrepared_CS\".\n\033MSG_RetChoosePvPPrepar"
  "ed_SC\022\017\n\007errcode\030\001 \001(\r\"Q\n\031MSG_RetStartPv"
  "PPrepare_SC\022\"\n\tmatchtype\030\001 \002(\0162\017.msg.MAT"
  "CHFIGHT\022\020\n\010duration\030\002 \001(\r\"S\n\033MSG_RetPvPF"
  "ightCountDown_SC\022\"\n\tmatchtype\030\001 \002(\0162\017.ms"
  "g.MATCHFIGHT\022\020\n\010duration\030\002 \001(\r\"R\n\032MSG_Re"
  "tPvPFightPreFight_SC\022\"\n\tmatchtype\030\001 \002(\0162"
  "\017.msg.MATCHFIGHT\022\020\n\010duration\030\002 \001(\r\"O\n\027MS"
  "G_RetStartPvPFight_SC\022\"\n\tmatchtype\030\001 \002(\016"
  "2\017.msg.MATCHFIGHT\022\020\n\010duration\030\002 \001(\r\"Q\n\031M"
  "SG_RetPvPSpeedupFight_SC\022\"\n\tmatchtype\030\001 "
  "\002(\0162\017.msg.MATCHFIGHT\022\020\n\010duration\030\002 \001(\r\"\236"
  "\001\n\030MSG_RetPvPFightFinish_SC\022\"\n\tmatchtype"
  "\030\001 \002(\0162\017.msg.MATCHFIGHT\022\020\n\010duration\030\002 \001("
  "\r\022 \n\006result\030\003 \002(\0162\020.msg.FIGHTRESULT\022*\n\005a"
  "ward\030\004 \001(\0132\033.pvpmatchfight.PvPAwardItem\""
  "\034\n\032MSG_ReqPvPFightCurStage_CS\"\316\001\n\032MSG_Re"
  "tPvPFightCurStage_SC\022 \n\010curstage\030\001 \002(\0162\016"
  ".msg.StageType\022\020\n\010leftsecs\030\002 \001(\r\022;\n\tscor"
  "einfo\030\003 \001(\0132(.pvpmatchfight.MSG_RetPvPTe"
  "amCurScore_SC\022\?\n\010liveinfo\030\004 \001(\0132-.pvpmat"
  "chfight.MSG_RetPvPMatchFightCurLive_SC\"e"
  "\n\031MSG_RetPvPTeamCurScore_SC\022\017\n\007team1id\030\001"
  " \001(\r\022\022\n\nteam1score\030\002 \001(\r\022\017\n\007team2id\030\003 \001("
  "\r\022\022\n\nteam2score\030\004 \001(\r\"^\n\030MSG_RetPvPPrepa"
  "redNum_SC\022\"\n\tmatchtype\030\001 \002(\0162\017.msg.MATCH"
  "FIGHT\022\016\n\006curnum\030\002 \001(\r\022\016\n\006allnum\030\003 \001(\r\"a\n"
  "\014PvPAwardItem\022 \n\006result\030\001 \002(\0162\020.msg.FIGH"
  "TRESULT\022\037\n\004item\030\002 \003(\0132\021.basic.ObjectItem"
  "\022\016\n\006heroid\030\003 \001(\r\">\n\030MSG_ReqPvPDailyAward"
  "s_CS\022\"\n\tmatchtype\030\001 \002(\0162\017.msg.MATCHFIGHT"
  "\"o\n\030MSG_RetPvPDailyAwards_SC\022\"\n\tmatchtyp"
  "e\030\001 \002(\0162\017.msg.MATCHFIGHT\022/\n\nrewardlist\030\002"
  " \003(\0132\033.pvpmatchfight.PvPAwardItem\"U\n\034MSG"
  "_RetPvPPKGeneralConfig_SC\022\"\n\tmatchtype\030\001"
  " \002(\0162\017.msg.MATCHFIGHT\022\021\n\tteampknum\030\002 \001(\r"
  "\"V\n\ronePlayerLive\022\r\n\005memid\030\001 \001(\t\022\016\n\006hero"
  "id\030\002 \001(\r\022\016\n\006isdead\030\003 \001(\010\022\026\n\016reliveleftse"
  "cs\030\004 \001(\r\"Q\n\036MSG_RetPvPMatchFightCurLive_"
  "SC\022/\n\toneplayer\030\001 \003(\0132\034.pvpmatchfight.on"
  "ePlayerLive"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pvpmatchfight_2eproto_deps[2] = {
  &::descriptor_table_basic_2eproto,
  &::descriptor_table_msg_5fenum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pvpmatchfight_2eproto_sccs[24] = {
  &scc_info_MSG_ReqChoosePvPPrepared_CS_pvpmatchfight_2eproto.base,
  &scc_info_MSG_ReqPvPDailyAwards_CS_pvpmatchfight_2eproto.base,
  &scc_info_MSG_ReqPvPFightCurStage_CS_pvpmatchfight_2eproto.base,
  &scc_info_MSG_Req_CancelPvPMatch_CS_pvpmatchfight_2eproto.base,
  &scc_info_MSG_Req_GotoPvPBattle_CS_pvpmatchfight_2eproto.base,
  &scc_info_MSG_Req_StartPvPMatch_CS_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetChoosePvPPrepared_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetPvPDailyAwards_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetPvPFightCountDown_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetPvPFightCurStage_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetPvPFightFinish_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetPvPFightPreFight_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetPvPMatchFightCurLive_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetPvPPKGeneralConfig_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetPvPPreparedNum_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetPvPSpeedupFight_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetPvPTeamCurScore_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetStartPvPFight_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_RetStartPvPPrepare_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_Ret_CancelPvPMatch_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_Ret_PvPMatchResult_SC_pvpmatchfight_2eproto.base,
  &scc_info_MSG_Ret_StartPvPMatch_SC_pvpmatchfight_2eproto.base,
  &scc_info_PvPAwardItem_pvpmatchfight_2eproto.base,
  &scc_info_onePlayerLive_pvpmatchfight_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pvpmatchfight_2eproto_once;
static bool descriptor_table_pvpmatchfight_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pvpmatchfight_2eproto = {
  &descriptor_table_pvpmatchfight_2eproto_initialized, descriptor_table_protodef_pvpmatchfight_2eproto, "pvpmatchfight.proto", 2131,
  &descriptor_table_pvpmatchfight_2eproto_once, descriptor_table_pvpmatchfight_2eproto_sccs, descriptor_table_pvpmatchfight_2eproto_deps, 24, 2,
  schemas, file_default_instances, TableStruct_pvpmatchfight_2eproto::offsets,
  file_level_metadata_pvpmatchfight_2eproto, 24, file_level_enum_descriptors_pvpmatchfight_2eproto, file_level_service_descriptors_pvpmatchfight_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pvpmatchfight_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pvpmatchfight_2eproto)), true);
namespace pvpmatchfight {

// ===================================================================

void MSG_Req_StartPvPMatch_CS::InitAsDefaultInstance() {
}
class MSG_Req_StartPvPMatch_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_StartPvPMatch_CS>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_StartPvPMatch_CS::MSG_Req_StartPvPMatch_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
}
MSG_Req_StartPvPMatch_CS::MSG_Req_StartPvPMatch_CS(const MSG_Req_StartPvPMatch_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matchtype_ = from.matchtype_;
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
}

void MSG_Req_StartPvPMatch_CS::SharedCtor() {
  matchtype_ = 0;
}

MSG_Req_StartPvPMatch_CS::~MSG_Req_StartPvPMatch_CS() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
  SharedDtor();
}

void MSG_Req_StartPvPMatch_CS::SharedDtor() {
}

void MSG_Req_StartPvPMatch_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_StartPvPMatch_CS& MSG_Req_StartPvPMatch_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_StartPvPMatch_CS_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_StartPvPMatch_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_StartPvPMatch_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_StartPvPMatch_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
  return target;
}

size_t MSG_Req_StartPvPMatch_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_StartPvPMatch_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_StartPvPMatch_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_StartPvPMatch_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_StartPvPMatch_CS::MergeFrom(const MSG_Req_StartPvPMatch_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_matchtype()) {
    _internal_set_matchtype(from._internal_matchtype());
  }
}

void MSG_Req_StartPvPMatch_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_StartPvPMatch_CS::CopyFrom(const MSG_Req_StartPvPMatch_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_Req_StartPvPMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_StartPvPMatch_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_Req_StartPvPMatch_CS::InternalSwap(MSG_Req_StartPvPMatch_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_StartPvPMatch_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_StartPvPMatch_SC::InitAsDefaultInstance() {
}
class MSG_Ret_StartPvPMatch_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_StartPvPMatch_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_StartPvPMatch_SC::MSG_Ret_StartPvPMatch_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
}
MSG_Ret_StartPvPMatch_SC::MSG_Ret_StartPvPMatch_SC(const MSG_Ret_StartPvPMatch_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchtype_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(matchtype_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
}

void MSG_Ret_StartPvPMatch_SC::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchtype_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(matchtype_));
}

MSG_Ret_StartPvPMatch_SC::~MSG_Ret_StartPvPMatch_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
  SharedDtor();
}

void MSG_Ret_StartPvPMatch_SC::SharedDtor() {
}

void MSG_Ret_StartPvPMatch_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_StartPvPMatch_SC& MSG_Ret_StartPvPMatch_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_StartPvPMatch_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_StartPvPMatch_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchtype_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(matchtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_StartPvPMatch_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .msg.MATCHFIGHT matchtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_StartPvPMatch_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // required .msg.MATCHFIGHT matchtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_matchtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
  return target;
}

size_t MSG_Ret_StartPvPMatch_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 2;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_StartPvPMatch_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_StartPvPMatch_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_StartPvPMatch_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_StartPvPMatch_SC::MergeFrom(const MSG_Ret_StartPvPMatch_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchtype_ = from.matchtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_StartPvPMatch_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_StartPvPMatch_SC::CopyFrom(const MSG_Ret_StartPvPMatch_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_Ret_StartPvPMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_StartPvPMatch_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MSG_Ret_StartPvPMatch_SC::InternalSwap(MSG_Ret_StartPvPMatch_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
  swap(matchtype_, other->matchtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_StartPvPMatch_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_CancelPvPMatch_CS::InitAsDefaultInstance() {
}
class MSG_Req_CancelPvPMatch_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_CancelPvPMatch_CS>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_CancelPvPMatch_CS::MSG_Req_CancelPvPMatch_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
}
MSG_Req_CancelPvPMatch_CS::MSG_Req_CancelPvPMatch_CS(const MSG_Req_CancelPvPMatch_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matchtype_ = from.matchtype_;
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
}

void MSG_Req_CancelPvPMatch_CS::SharedCtor() {
  matchtype_ = 0;
}

MSG_Req_CancelPvPMatch_CS::~MSG_Req_CancelPvPMatch_CS() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
  SharedDtor();
}

void MSG_Req_CancelPvPMatch_CS::SharedDtor() {
}

void MSG_Req_CancelPvPMatch_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_CancelPvPMatch_CS& MSG_Req_CancelPvPMatch_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_CancelPvPMatch_CS_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_CancelPvPMatch_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_CancelPvPMatch_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_CancelPvPMatch_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
  return target;
}

size_t MSG_Req_CancelPvPMatch_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_CancelPvPMatch_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_CancelPvPMatch_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_CancelPvPMatch_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_CancelPvPMatch_CS::MergeFrom(const MSG_Req_CancelPvPMatch_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_matchtype()) {
    _internal_set_matchtype(from._internal_matchtype());
  }
}

void MSG_Req_CancelPvPMatch_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_CancelPvPMatch_CS::CopyFrom(const MSG_Req_CancelPvPMatch_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_Req_CancelPvPMatch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_CancelPvPMatch_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_Req_CancelPvPMatch_CS::InternalSwap(MSG_Req_CancelPvPMatch_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_CancelPvPMatch_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_CancelPvPMatch_SC::InitAsDefaultInstance() {
}
class MSG_Ret_CancelPvPMatch_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_CancelPvPMatch_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_CancelPvPMatch_SC::MSG_Ret_CancelPvPMatch_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
}
MSG_Ret_CancelPvPMatch_SC::MSG_Ret_CancelPvPMatch_SC(const MSG_Ret_CancelPvPMatch_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchtype_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(matchtype_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
}

void MSG_Ret_CancelPvPMatch_SC::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchtype_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(matchtype_));
}

MSG_Ret_CancelPvPMatch_SC::~MSG_Ret_CancelPvPMatch_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
  SharedDtor();
}

void MSG_Ret_CancelPvPMatch_SC::SharedDtor() {
}

void MSG_Ret_CancelPvPMatch_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_CancelPvPMatch_SC& MSG_Ret_CancelPvPMatch_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_CancelPvPMatch_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_CancelPvPMatch_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchtype_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(matchtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_CancelPvPMatch_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .msg.MATCHFIGHT matchtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_CancelPvPMatch_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // required .msg.MATCHFIGHT matchtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_matchtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
  return target;
}

size_t MSG_Ret_CancelPvPMatch_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 2;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_CancelPvPMatch_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_CancelPvPMatch_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_CancelPvPMatch_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_CancelPvPMatch_SC::MergeFrom(const MSG_Ret_CancelPvPMatch_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchtype_ = from.matchtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_CancelPvPMatch_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_CancelPvPMatch_SC::CopyFrom(const MSG_Ret_CancelPvPMatch_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_Ret_CancelPvPMatch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_CancelPvPMatch_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MSG_Ret_CancelPvPMatch_SC::InternalSwap(MSG_Ret_CancelPvPMatch_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
  swap(matchtype_, other->matchtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_CancelPvPMatch_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_PvPMatchResult_SC::InitAsDefaultInstance() {
}
class MSG_Ret_PvPMatchResult_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_PvPMatchResult_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_PvPMatchResult_SC::MSG_Ret_PvPMatchResult_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
}
MSG_Ret_PvPMatchResult_SC::MSG_Ret_PvPMatchResult_SC(const MSG_Ret_PvPMatchResult_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchtype_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(matchtype_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
}

void MSG_Ret_PvPMatchResult_SC::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchtype_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(matchtype_));
}

MSG_Ret_PvPMatchResult_SC::~MSG_Ret_PvPMatchResult_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
  SharedDtor();
}

void MSG_Ret_PvPMatchResult_SC::SharedDtor() {
}

void MSG_Ret_PvPMatchResult_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_PvPMatchResult_SC& MSG_Ret_PvPMatchResult_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_PvPMatchResult_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_PvPMatchResult_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&matchtype_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(matchtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_PvPMatchResult_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .msg.MATCHFIGHT matchtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_PvPMatchResult_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // required .msg.MATCHFIGHT matchtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_matchtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
  return target;
}

size_t MSG_Ret_PvPMatchResult_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 2;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_PvPMatchResult_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_PvPMatchResult_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_PvPMatchResult_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_PvPMatchResult_SC::MergeFrom(const MSG_Ret_PvPMatchResult_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchtype_ = from.matchtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_PvPMatchResult_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_PvPMatchResult_SC::CopyFrom(const MSG_Ret_PvPMatchResult_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_Ret_PvPMatchResult_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_PvPMatchResult_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MSG_Ret_PvPMatchResult_SC::InternalSwap(MSG_Ret_PvPMatchResult_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
  swap(matchtype_, other->matchtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_PvPMatchResult_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_GotoPvPBattle_CS::InitAsDefaultInstance() {
}
class MSG_Req_GotoPvPBattle_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_GotoPvPBattle_CS>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_GotoPvPBattle_CS::MSG_Req_GotoPvPBattle_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
}
MSG_Req_GotoPvPBattle_CS::MSG_Req_GotoPvPBattle_CS(const MSG_Req_GotoPvPBattle_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matchtype_ = from.matchtype_;
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
}

void MSG_Req_GotoPvPBattle_CS::SharedCtor() {
  matchtype_ = 0;
}

MSG_Req_GotoPvPBattle_CS::~MSG_Req_GotoPvPBattle_CS() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
  SharedDtor();
}

void MSG_Req_GotoPvPBattle_CS::SharedDtor() {
}

void MSG_Req_GotoPvPBattle_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_GotoPvPBattle_CS& MSG_Req_GotoPvPBattle_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_GotoPvPBattle_CS_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_GotoPvPBattle_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_GotoPvPBattle_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_GotoPvPBattle_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
  return target;
}

size_t MSG_Req_GotoPvPBattle_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_GotoPvPBattle_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_GotoPvPBattle_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_GotoPvPBattle_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_GotoPvPBattle_CS::MergeFrom(const MSG_Req_GotoPvPBattle_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_matchtype()) {
    _internal_set_matchtype(from._internal_matchtype());
  }
}

void MSG_Req_GotoPvPBattle_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_GotoPvPBattle_CS::CopyFrom(const MSG_Req_GotoPvPBattle_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_Req_GotoPvPBattle_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_GotoPvPBattle_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_Req_GotoPvPBattle_CS::InternalSwap(MSG_Req_GotoPvPBattle_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_GotoPvPBattle_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqChoosePvPPrepared_CS::InitAsDefaultInstance() {
}
class MSG_ReqChoosePvPPrepared_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqChoosePvPPrepared_CS>()._has_bits_);
};

MSG_ReqChoosePvPPrepared_CS::MSG_ReqChoosePvPPrepared_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
}
MSG_ReqChoosePvPPrepared_CS::MSG_ReqChoosePvPPrepared_CS(const MSG_ReqChoosePvPPrepared_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
}

void MSG_ReqChoosePvPPrepared_CS::SharedCtor() {
}

MSG_ReqChoosePvPPrepared_CS::~MSG_ReqChoosePvPPrepared_CS() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
  SharedDtor();
}

void MSG_ReqChoosePvPPrepared_CS::SharedDtor() {
}

void MSG_ReqChoosePvPPrepared_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqChoosePvPPrepared_CS& MSG_ReqChoosePvPPrepared_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqChoosePvPPrepared_CS_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqChoosePvPPrepared_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqChoosePvPPrepared_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqChoosePvPPrepared_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
  return target;
}

size_t MSG_ReqChoosePvPPrepared_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqChoosePvPPrepared_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqChoosePvPPrepared_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqChoosePvPPrepared_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqChoosePvPPrepared_CS::MergeFrom(const MSG_ReqChoosePvPPrepared_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqChoosePvPPrepared_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqChoosePvPPrepared_CS::CopyFrom(const MSG_ReqChoosePvPPrepared_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_ReqChoosePvPPrepared_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqChoosePvPPrepared_CS::IsInitialized() const {
  return true;
}

void MSG_ReqChoosePvPPrepared_CS::InternalSwap(MSG_ReqChoosePvPPrepared_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqChoosePvPPrepared_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetChoosePvPPrepared_SC::InitAsDefaultInstance() {
}
class MSG_RetChoosePvPPrepared_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetChoosePvPPrepared_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetChoosePvPPrepared_SC::MSG_RetChoosePvPPrepared_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
}
MSG_RetChoosePvPPrepared_SC::MSG_RetChoosePvPPrepared_SC(const MSG_RetChoosePvPPrepared_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
}

void MSG_RetChoosePvPPrepared_SC::SharedCtor() {
  errcode_ = 0u;
}

MSG_RetChoosePvPPrepared_SC::~MSG_RetChoosePvPPrepared_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
  SharedDtor();
}

void MSG_RetChoosePvPPrepared_SC::SharedDtor() {
}

void MSG_RetChoosePvPPrepared_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetChoosePvPPrepared_SC& MSG_RetChoosePvPPrepared_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetChoosePvPPrepared_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetChoosePvPPrepared_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetChoosePvPPrepared_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetChoosePvPPrepared_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
  return target;
}

size_t MSG_RetChoosePvPPrepared_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 errcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetChoosePvPPrepared_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetChoosePvPPrepared_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetChoosePvPPrepared_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
    MergeFrom(*source);
  }
}

void MSG_RetChoosePvPPrepared_SC::MergeFrom(const MSG_RetChoosePvPPrepared_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errcode()) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void MSG_RetChoosePvPPrepared_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetChoosePvPPrepared_SC::CopyFrom(const MSG_RetChoosePvPPrepared_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetChoosePvPPrepared_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetChoosePvPPrepared_SC::IsInitialized() const {
  return true;
}

void MSG_RetChoosePvPPrepared_SC::InternalSwap(MSG_RetChoosePvPPrepared_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetChoosePvPPrepared_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetStartPvPPrepare_SC::InitAsDefaultInstance() {
}
class MSG_RetStartPvPPrepare_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetStartPvPPrepare_SC>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetStartPvPPrepare_SC::MSG_RetStartPvPPrepare_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
}
MSG_RetStartPvPPrepare_SC::MSG_RetStartPvPPrepare_SC(const MSG_RetStartPvPPrepare_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matchtype_, &from.matchtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
}

void MSG_RetStartPvPPrepare_SC::SharedCtor() {
  ::memset(&matchtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
}

MSG_RetStartPvPPrepare_SC::~MSG_RetStartPvPPrepare_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
  SharedDtor();
}

void MSG_RetStartPvPPrepare_SC::SharedDtor() {
}

void MSG_RetStartPvPPrepare_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetStartPvPPrepare_SC& MSG_RetStartPvPPrepare_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetStartPvPPrepare_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetStartPvPPrepare_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&matchtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetStartPvPPrepare_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetStartPvPPrepare_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
  return target;
}

size_t MSG_RetStartPvPPrepare_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 duration = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetStartPvPPrepare_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetStartPvPPrepare_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetStartPvPPrepare_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
    MergeFrom(*source);
  }
}

void MSG_RetStartPvPPrepare_SC::MergeFrom(const MSG_RetStartPvPPrepare_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      matchtype_ = from.matchtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetStartPvPPrepare_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetStartPvPPrepare_SC::CopyFrom(const MSG_RetStartPvPPrepare_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetStartPvPPrepare_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetStartPvPPrepare_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_RetStartPvPPrepare_SC::InternalSwap(MSG_RetStartPvPPrepare_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetStartPvPPrepare_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPvPFightCountDown_SC::InitAsDefaultInstance() {
}
class MSG_RetPvPFightCountDown_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPvPFightCountDown_SC>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetPvPFightCountDown_SC::MSG_RetPvPFightCountDown_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
}
MSG_RetPvPFightCountDown_SC::MSG_RetPvPFightCountDown_SC(const MSG_RetPvPFightCountDown_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matchtype_, &from.matchtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
}

void MSG_RetPvPFightCountDown_SC::SharedCtor() {
  ::memset(&matchtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
}

MSG_RetPvPFightCountDown_SC::~MSG_RetPvPFightCountDown_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
  SharedDtor();
}

void MSG_RetPvPFightCountDown_SC::SharedDtor() {
}

void MSG_RetPvPFightCountDown_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPvPFightCountDown_SC& MSG_RetPvPFightCountDown_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPvPFightCountDown_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPvPFightCountDown_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&matchtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPvPFightCountDown_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPvPFightCountDown_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
  return target;
}

size_t MSG_RetPvPFightCountDown_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 duration = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPvPFightCountDown_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPvPFightCountDown_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPvPFightCountDown_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPvPFightCountDown_SC::MergeFrom(const MSG_RetPvPFightCountDown_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      matchtype_ = from.matchtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetPvPFightCountDown_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPvPFightCountDown_SC::CopyFrom(const MSG_RetPvPFightCountDown_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetPvPFightCountDown_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPvPFightCountDown_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_RetPvPFightCountDown_SC::InternalSwap(MSG_RetPvPFightCountDown_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPvPFightCountDown_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPvPFightPreFight_SC::InitAsDefaultInstance() {
}
class MSG_RetPvPFightPreFight_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPvPFightPreFight_SC>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetPvPFightPreFight_SC::MSG_RetPvPFightPreFight_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
}
MSG_RetPvPFightPreFight_SC::MSG_RetPvPFightPreFight_SC(const MSG_RetPvPFightPreFight_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matchtype_, &from.matchtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
}

void MSG_RetPvPFightPreFight_SC::SharedCtor() {
  ::memset(&matchtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
}

MSG_RetPvPFightPreFight_SC::~MSG_RetPvPFightPreFight_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
  SharedDtor();
}

void MSG_RetPvPFightPreFight_SC::SharedDtor() {
}

void MSG_RetPvPFightPreFight_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPvPFightPreFight_SC& MSG_RetPvPFightPreFight_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPvPFightPreFight_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPvPFightPreFight_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&matchtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPvPFightPreFight_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPvPFightPreFight_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
  return target;
}

size_t MSG_RetPvPFightPreFight_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 duration = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPvPFightPreFight_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPvPFightPreFight_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPvPFightPreFight_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPvPFightPreFight_SC::MergeFrom(const MSG_RetPvPFightPreFight_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      matchtype_ = from.matchtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetPvPFightPreFight_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPvPFightPreFight_SC::CopyFrom(const MSG_RetPvPFightPreFight_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetPvPFightPreFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPvPFightPreFight_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_RetPvPFightPreFight_SC::InternalSwap(MSG_RetPvPFightPreFight_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPvPFightPreFight_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetStartPvPFight_SC::InitAsDefaultInstance() {
}
class MSG_RetStartPvPFight_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetStartPvPFight_SC>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetStartPvPFight_SC::MSG_RetStartPvPFight_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetStartPvPFight_SC)
}
MSG_RetStartPvPFight_SC::MSG_RetStartPvPFight_SC(const MSG_RetStartPvPFight_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matchtype_, &from.matchtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetStartPvPFight_SC)
}

void MSG_RetStartPvPFight_SC::SharedCtor() {
  ::memset(&matchtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
}

MSG_RetStartPvPFight_SC::~MSG_RetStartPvPFight_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetStartPvPFight_SC)
  SharedDtor();
}

void MSG_RetStartPvPFight_SC::SharedDtor() {
}

void MSG_RetStartPvPFight_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetStartPvPFight_SC& MSG_RetStartPvPFight_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetStartPvPFight_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetStartPvPFight_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetStartPvPFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&matchtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetStartPvPFight_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetStartPvPFight_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetStartPvPFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetStartPvPFight_SC)
  return target;
}

size_t MSG_RetStartPvPFight_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetStartPvPFight_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 duration = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetStartPvPFight_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetStartPvPFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetStartPvPFight_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetStartPvPFight_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetStartPvPFight_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetStartPvPFight_SC)
    MergeFrom(*source);
  }
}

void MSG_RetStartPvPFight_SC::MergeFrom(const MSG_RetStartPvPFight_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetStartPvPFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      matchtype_ = from.matchtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetStartPvPFight_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetStartPvPFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetStartPvPFight_SC::CopyFrom(const MSG_RetStartPvPFight_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetStartPvPFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetStartPvPFight_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_RetStartPvPFight_SC::InternalSwap(MSG_RetStartPvPFight_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetStartPvPFight_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPvPSpeedupFight_SC::InitAsDefaultInstance() {
}
class MSG_RetPvPSpeedupFight_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPvPSpeedupFight_SC>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetPvPSpeedupFight_SC::MSG_RetPvPSpeedupFight_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
}
MSG_RetPvPSpeedupFight_SC::MSG_RetPvPSpeedupFight_SC(const MSG_RetPvPSpeedupFight_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matchtype_, &from.matchtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
}

void MSG_RetPvPSpeedupFight_SC::SharedCtor() {
  ::memset(&matchtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
}

MSG_RetPvPSpeedupFight_SC::~MSG_RetPvPSpeedupFight_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
  SharedDtor();
}

void MSG_RetPvPSpeedupFight_SC::SharedDtor() {
}

void MSG_RetPvPSpeedupFight_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPvPSpeedupFight_SC& MSG_RetPvPSpeedupFight_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPvPSpeedupFight_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPvPSpeedupFight_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&matchtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPvPSpeedupFight_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPvPSpeedupFight_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
  return target;
}

size_t MSG_RetPvPSpeedupFight_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 duration = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPvPSpeedupFight_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPvPSpeedupFight_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPvPSpeedupFight_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPvPSpeedupFight_SC::MergeFrom(const MSG_RetPvPSpeedupFight_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      matchtype_ = from.matchtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetPvPSpeedupFight_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPvPSpeedupFight_SC::CopyFrom(const MSG_RetPvPSpeedupFight_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetPvPSpeedupFight_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPvPSpeedupFight_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_RetPvPSpeedupFight_SC::InternalSwap(MSG_RetPvPSpeedupFight_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPvPSpeedupFight_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPvPFightFinish_SC::InitAsDefaultInstance() {
  ::pvpmatchfight::_MSG_RetPvPFightFinish_SC_default_instance_._instance.get_mutable()->award_ = const_cast< ::pvpmatchfight::PvPAwardItem*>(
      ::pvpmatchfight::PvPAwardItem::internal_default_instance());
}
class MSG_RetPvPFightFinish_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPvPFightFinish_SC>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pvpmatchfight::PvPAwardItem& award(const MSG_RetPvPFightFinish_SC* msg);
  static void set_has_award(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::pvpmatchfight::PvPAwardItem&
MSG_RetPvPFightFinish_SC::_Internal::award(const MSG_RetPvPFightFinish_SC* msg) {
  return *msg->award_;
}
MSG_RetPvPFightFinish_SC::MSG_RetPvPFightFinish_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetPvPFightFinish_SC)
}
MSG_RetPvPFightFinish_SC::MSG_RetPvPFightFinish_SC(const MSG_RetPvPFightFinish_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_award()) {
    award_ = new ::pvpmatchfight::PvPAwardItem(*from.award_);
  } else {
    award_ = nullptr;
  }
  ::memcpy(&matchtype_, &from.matchtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&matchtype_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetPvPFightFinish_SC)
}

void MSG_RetPvPFightFinish_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetPvPFightFinish_SC_pvpmatchfight_2eproto.base);
  ::memset(&award_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&award_)) + sizeof(duration_));
  result_ = 1;
}

MSG_RetPvPFightFinish_SC::~MSG_RetPvPFightFinish_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetPvPFightFinish_SC)
  SharedDtor();
}

void MSG_RetPvPFightFinish_SC::SharedDtor() {
  if (this != internal_default_instance()) delete award_;
}

void MSG_RetPvPFightFinish_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPvPFightFinish_SC& MSG_RetPvPFightFinish_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPvPFightFinish_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPvPFightFinish_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetPvPFightFinish_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(award_ != nullptr);
    award_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&matchtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&matchtype_)) + sizeof(duration_));
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPvPFightFinish_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .msg.FIGHTRESULT result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::FIGHTRESULT_IsValid(val))) {
            _internal_set_result(static_cast<::msg::FIGHTRESULT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .pvpmatchfight.PvPAwardItem award = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_award(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPvPFightFinish_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetPvPFightFinish_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // required .msg.FIGHTRESULT result = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_result(), target);
  }

  // optional .pvpmatchfight.PvPAwardItem award = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::award(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetPvPFightFinish_SC)
  return target;
}

size_t MSG_RetPvPFightFinish_SC::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:pvpmatchfight.MSG_RetPvPFightFinish_SC)
  size_t total_size = 0;

  if (_internal_has_matchtype()) {
    // required .msg.MATCHFIGHT matchtype = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }

  if (_internal_has_result()) {
    // required .msg.FIGHTRESULT result = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  return total_size;
}
size_t MSG_RetPvPFightFinish_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetPvPFightFinish_SC)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required .msg.MATCHFIGHT matchtype = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());

    // required .msg.FIGHTRESULT result = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .pvpmatchfight.PvPAwardItem award = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *award_);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPvPFightFinish_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetPvPFightFinish_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPvPFightFinish_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPvPFightFinish_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetPvPFightFinish_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetPvPFightFinish_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPvPFightFinish_SC::MergeFrom(const MSG_RetPvPFightFinish_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetPvPFightFinish_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_award()->::pvpmatchfight::PvPAwardItem::MergeFrom(from._internal_award());
    }
    if (cached_has_bits & 0x00000002u) {
      matchtype_ = from.matchtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetPvPFightFinish_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetPvPFightFinish_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPvPFightFinish_SC::CopyFrom(const MSG_RetPvPFightFinish_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetPvPFightFinish_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPvPFightFinish_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  if (_internal_has_award()) {
    if (!award_->IsInitialized()) return false;
  }
  return true;
}

void MSG_RetPvPFightFinish_SC::InternalSwap(MSG_RetPvPFightFinish_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(award_, other->award_);
  swap(matchtype_, other->matchtype_);
  swap(duration_, other->duration_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPvPFightFinish_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqPvPFightCurStage_CS::InitAsDefaultInstance() {
}
class MSG_ReqPvPFightCurStage_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqPvPFightCurStage_CS>()._has_bits_);
};

MSG_ReqPvPFightCurStage_CS::MSG_ReqPvPFightCurStage_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
}
MSG_ReqPvPFightCurStage_CS::MSG_ReqPvPFightCurStage_CS(const MSG_ReqPvPFightCurStage_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
}

void MSG_ReqPvPFightCurStage_CS::SharedCtor() {
}

MSG_ReqPvPFightCurStage_CS::~MSG_ReqPvPFightCurStage_CS() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
  SharedDtor();
}

void MSG_ReqPvPFightCurStage_CS::SharedDtor() {
}

void MSG_ReqPvPFightCurStage_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqPvPFightCurStage_CS& MSG_ReqPvPFightCurStage_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqPvPFightCurStage_CS_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqPvPFightCurStage_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqPvPFightCurStage_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqPvPFightCurStage_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
  return target;
}

size_t MSG_ReqPvPFightCurStage_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqPvPFightCurStage_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqPvPFightCurStage_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqPvPFightCurStage_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqPvPFightCurStage_CS::MergeFrom(const MSG_ReqPvPFightCurStage_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqPvPFightCurStage_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqPvPFightCurStage_CS::CopyFrom(const MSG_ReqPvPFightCurStage_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_ReqPvPFightCurStage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqPvPFightCurStage_CS::IsInitialized() const {
  return true;
}

void MSG_ReqPvPFightCurStage_CS::InternalSwap(MSG_ReqPvPFightCurStage_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqPvPFightCurStage_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPvPFightCurStage_SC::InitAsDefaultInstance() {
  ::pvpmatchfight::_MSG_RetPvPFightCurStage_SC_default_instance_._instance.get_mutable()->scoreinfo_ = const_cast< ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC*>(
      ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC::internal_default_instance());
  ::pvpmatchfight::_MSG_RetPvPFightCurStage_SC_default_instance_._instance.get_mutable()->liveinfo_ = const_cast< ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC*>(
      ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC::internal_default_instance());
}
class MSG_RetPvPFightCurStage_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPvPFightCurStage_SC>()._has_bits_);
  static void set_has_curstage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leftsecs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC& scoreinfo(const MSG_RetPvPFightCurStage_SC* msg);
  static void set_has_scoreinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC& liveinfo(const MSG_RetPvPFightCurStage_SC* msg);
  static void set_has_liveinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC&
MSG_RetPvPFightCurStage_SC::_Internal::scoreinfo(const MSG_RetPvPFightCurStage_SC* msg) {
  return *msg->scoreinfo_;
}
const ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC&
MSG_RetPvPFightCurStage_SC::_Internal::liveinfo(const MSG_RetPvPFightCurStage_SC* msg) {
  return *msg->liveinfo_;
}
MSG_RetPvPFightCurStage_SC::MSG_RetPvPFightCurStage_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
}
MSG_RetPvPFightCurStage_SC::MSG_RetPvPFightCurStage_SC(const MSG_RetPvPFightCurStage_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_scoreinfo()) {
    scoreinfo_ = new ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC(*from.scoreinfo_);
  } else {
    scoreinfo_ = nullptr;
  }
  if (from._internal_has_liveinfo()) {
    liveinfo_ = new ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC(*from.liveinfo_);
  } else {
    liveinfo_ = nullptr;
  }
  ::memcpy(&curstage_, &from.curstage_,
    static_cast<size_t>(reinterpret_cast<char*>(&leftsecs_) -
    reinterpret_cast<char*>(&curstage_)) + sizeof(leftsecs_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
}

void MSG_RetPvPFightCurStage_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetPvPFightCurStage_SC_pvpmatchfight_2eproto.base);
  ::memset(&scoreinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leftsecs_) -
      reinterpret_cast<char*>(&scoreinfo_)) + sizeof(leftsecs_));
}

MSG_RetPvPFightCurStage_SC::~MSG_RetPvPFightCurStage_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
  SharedDtor();
}

void MSG_RetPvPFightCurStage_SC::SharedDtor() {
  if (this != internal_default_instance()) delete scoreinfo_;
  if (this != internal_default_instance()) delete liveinfo_;
}

void MSG_RetPvPFightCurStage_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPvPFightCurStage_SC& MSG_RetPvPFightCurStage_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPvPFightCurStage_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPvPFightCurStage_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(scoreinfo_ != nullptr);
      scoreinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(liveinfo_ != nullptr);
      liveinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&curstage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&leftsecs_) -
        reinterpret_cast<char*>(&curstage_)) + sizeof(leftsecs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPvPFightCurStage_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.StageType curstage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::StageType_IsValid(val))) {
            _internal_set_curstage(static_cast<::msg::StageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 leftsecs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_leftsecs(&has_bits);
          leftsecs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pvpmatchfight.MSG_RetPvPTeamCurScore_SC scoreinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scoreinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC liveinfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_liveinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPvPFightCurStage_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.StageType curstage = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_curstage(), target);
  }

  // optional uint32 leftsecs = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_leftsecs(), target);
  }

  // optional .pvpmatchfight.MSG_RetPvPTeamCurScore_SC scoreinfo = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::scoreinfo(this), target, stream);
  }

  // optional .pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC liveinfo = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::liveinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
  return target;
}

size_t MSG_RetPvPFightCurStage_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
  size_t total_size = 0;

  // required .msg.StageType curstage = 1;
  if (_internal_has_curstage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_curstage());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .pvpmatchfight.MSG_RetPvPTeamCurScore_SC scoreinfo = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scoreinfo_);
    }

    // optional .pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC liveinfo = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *liveinfo_);
    }

  }
  // optional uint32 leftsecs = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_leftsecs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPvPFightCurStage_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPvPFightCurStage_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPvPFightCurStage_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPvPFightCurStage_SC::MergeFrom(const MSG_RetPvPFightCurStage_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_scoreinfo()->::pvpmatchfight::MSG_RetPvPTeamCurScore_SC::MergeFrom(from._internal_scoreinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_liveinfo()->::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC::MergeFrom(from._internal_liveinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      curstage_ = from.curstage_;
    }
    if (cached_has_bits & 0x00000008u) {
      leftsecs_ = from.leftsecs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetPvPFightCurStage_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPvPFightCurStage_SC::CopyFrom(const MSG_RetPvPFightCurStage_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetPvPFightCurStage_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPvPFightCurStage_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void MSG_RetPvPFightCurStage_SC::InternalSwap(MSG_RetPvPFightCurStage_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(scoreinfo_, other->scoreinfo_);
  swap(liveinfo_, other->liveinfo_);
  swap(curstage_, other->curstage_);
  swap(leftsecs_, other->leftsecs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPvPFightCurStage_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPvPTeamCurScore_SC::InitAsDefaultInstance() {
}
class MSG_RetPvPTeamCurScore_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPvPTeamCurScore_SC>()._has_bits_);
  static void set_has_team1id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team1score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team2id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team2score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_RetPvPTeamCurScore_SC::MSG_RetPvPTeamCurScore_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
}
MSG_RetPvPTeamCurScore_SC::MSG_RetPvPTeamCurScore_SC(const MSG_RetPvPTeamCurScore_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team1id_, &from.team1id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team2score_) -
    reinterpret_cast<char*>(&team1id_)) + sizeof(team2score_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
}

void MSG_RetPvPTeamCurScore_SC::SharedCtor() {
  ::memset(&team1id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team2score_) -
      reinterpret_cast<char*>(&team1id_)) + sizeof(team2score_));
}

MSG_RetPvPTeamCurScore_SC::~MSG_RetPvPTeamCurScore_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
  SharedDtor();
}

void MSG_RetPvPTeamCurScore_SC::SharedDtor() {
}

void MSG_RetPvPTeamCurScore_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPvPTeamCurScore_SC& MSG_RetPvPTeamCurScore_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPvPTeamCurScore_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPvPTeamCurScore_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&team1id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team2score_) -
        reinterpret_cast<char*>(&team1id_)) + sizeof(team2score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPvPTeamCurScore_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team1id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team1id(&has_bits);
          team1id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team1score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team1score(&has_bits);
          team1score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team2id(&has_bits);
          team2id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team2score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team2score(&has_bits);
          team2score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPvPTeamCurScore_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team1id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team1id(), target);
  }

  // optional uint32 team1score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team1score(), target);
  }

  // optional uint32 team2id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team2id(), target);
  }

  // optional uint32 team2score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team2score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
  return target;
}

size_t MSG_RetPvPTeamCurScore_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 team1id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1id());
    }

    // optional uint32 team1score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team1score());
    }

    // optional uint32 team2id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2id());
    }

    // optional uint32 team2score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team2score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPvPTeamCurScore_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPvPTeamCurScore_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPvPTeamCurScore_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPvPTeamCurScore_SC::MergeFrom(const MSG_RetPvPTeamCurScore_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      team1id_ = from.team1id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team1score_ = from.team1score_;
    }
    if (cached_has_bits & 0x00000004u) {
      team2id_ = from.team2id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team2score_ = from.team2score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetPvPTeamCurScore_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPvPTeamCurScore_SC::CopyFrom(const MSG_RetPvPTeamCurScore_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetPvPTeamCurScore_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPvPTeamCurScore_SC::IsInitialized() const {
  return true;
}

void MSG_RetPvPTeamCurScore_SC::InternalSwap(MSG_RetPvPTeamCurScore_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team1id_, other->team1id_);
  swap(team1score_, other->team1score_);
  swap(team2id_, other->team2id_);
  swap(team2score_, other->team2score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPvPTeamCurScore_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPvPPreparedNum_SC::InitAsDefaultInstance() {
}
class MSG_RetPvPPreparedNum_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPvPPreparedNum_SC>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_curnum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_RetPvPPreparedNum_SC::MSG_RetPvPPreparedNum_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
}
MSG_RetPvPPreparedNum_SC::MSG_RetPvPPreparedNum_SC(const MSG_RetPvPPreparedNum_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matchtype_, &from.matchtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&allnum_) -
    reinterpret_cast<char*>(&matchtype_)) + sizeof(allnum_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
}

void MSG_RetPvPPreparedNum_SC::SharedCtor() {
  ::memset(&matchtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allnum_) -
      reinterpret_cast<char*>(&matchtype_)) + sizeof(allnum_));
}

MSG_RetPvPPreparedNum_SC::~MSG_RetPvPPreparedNum_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
  SharedDtor();
}

void MSG_RetPvPPreparedNum_SC::SharedDtor() {
}

void MSG_RetPvPPreparedNum_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPvPPreparedNum_SC& MSG_RetPvPPreparedNum_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPvPPreparedNum_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPvPPreparedNum_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&matchtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&allnum_) -
        reinterpret_cast<char*>(&matchtype_)) + sizeof(allnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPvPPreparedNum_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 curnum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_curnum(&has_bits);
          curnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 allnum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_allnum(&has_bits);
          allnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPvPPreparedNum_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  // optional uint32 curnum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_curnum(), target);
  }

  // optional uint32 allnum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_allnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
  return target;
}

size_t MSG_RetPvPPreparedNum_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 curnum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curnum());
    }

    // optional uint32 allnum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_allnum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPvPPreparedNum_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPvPPreparedNum_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPvPPreparedNum_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPvPPreparedNum_SC::MergeFrom(const MSG_RetPvPPreparedNum_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      matchtype_ = from.matchtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      curnum_ = from.curnum_;
    }
    if (cached_has_bits & 0x00000004u) {
      allnum_ = from.allnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetPvPPreparedNum_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPvPPreparedNum_SC::CopyFrom(const MSG_RetPvPPreparedNum_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetPvPPreparedNum_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPvPPreparedNum_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_RetPvPPreparedNum_SC::InternalSwap(MSG_RetPvPPreparedNum_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
  swap(curnum_, other->curnum_);
  swap(allnum_, other->allnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPvPPreparedNum_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PvPAwardItem::InitAsDefaultInstance() {
}
class PvPAwardItem::_Internal {
 public:
  using HasBits = decltype(std::declval<PvPAwardItem>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void PvPAwardItem::clear_item() {
  item_.Clear();
}
PvPAwardItem::PvPAwardItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.PvPAwardItem)
}
PvPAwardItem::PvPAwardItem(const PvPAwardItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heroid_, &from.heroid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&heroid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.PvPAwardItem)
}

void PvPAwardItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PvPAwardItem_pvpmatchfight_2eproto.base);
  heroid_ = 0u;
  result_ = 1;
}

PvPAwardItem::~PvPAwardItem() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.PvPAwardItem)
  SharedDtor();
}

void PvPAwardItem::SharedDtor() {
}

void PvPAwardItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PvPAwardItem& PvPAwardItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PvPAwardItem_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void PvPAwardItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.PvPAwardItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    heroid_ = 0u;
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PvPAwardItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.FIGHTRESULT result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::FIGHTRESULT_IsValid(val))) {
            _internal_set_result(static_cast<::msg::FIGHTRESULT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .basic.ObjectItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PvPAwardItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.PvPAwardItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.FIGHTRESULT result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .basic.ObjectItem item = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_item(i), target, stream);
  }

  // optional uint32 heroid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_heroid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.PvPAwardItem)
  return target;
}

size_t PvPAwardItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.PvPAwardItem)
  size_t total_size = 0;

  // required .msg.FIGHTRESULT result = 1;
  if (_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .basic.ObjectItem item = 2;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 heroid = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_heroid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PvPAwardItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.PvPAwardItem)
  GOOGLE_DCHECK_NE(&from, this);
  const PvPAwardItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PvPAwardItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.PvPAwardItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.PvPAwardItem)
    MergeFrom(*source);
  }
}

void PvPAwardItem::MergeFrom(const PvPAwardItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.PvPAwardItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PvPAwardItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.PvPAwardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPAwardItem::CopyFrom(const PvPAwardItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.PvPAwardItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPAwardItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void PvPAwardItem::InternalSwap(PvPAwardItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
  swap(heroid_, other->heroid_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PvPAwardItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqPvPDailyAwards_CS::InitAsDefaultInstance() {
}
class MSG_ReqPvPDailyAwards_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqPvPDailyAwards_CS>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqPvPDailyAwards_CS::MSG_ReqPvPDailyAwards_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
}
MSG_ReqPvPDailyAwards_CS::MSG_ReqPvPDailyAwards_CS(const MSG_ReqPvPDailyAwards_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matchtype_ = from.matchtype_;
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
}

void MSG_ReqPvPDailyAwards_CS::SharedCtor() {
  matchtype_ = 0;
}

MSG_ReqPvPDailyAwards_CS::~MSG_ReqPvPDailyAwards_CS() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
  SharedDtor();
}

void MSG_ReqPvPDailyAwards_CS::SharedDtor() {
}

void MSG_ReqPvPDailyAwards_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqPvPDailyAwards_CS& MSG_ReqPvPDailyAwards_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqPvPDailyAwards_CS_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqPvPDailyAwards_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqPvPDailyAwards_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqPvPDailyAwards_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
  return target;
}

size_t MSG_ReqPvPDailyAwards_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqPvPDailyAwards_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqPvPDailyAwards_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqPvPDailyAwards_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqPvPDailyAwards_CS::MergeFrom(const MSG_ReqPvPDailyAwards_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_matchtype()) {
    _internal_set_matchtype(from._internal_matchtype());
  }
}

void MSG_ReqPvPDailyAwards_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqPvPDailyAwards_CS::CopyFrom(const MSG_ReqPvPDailyAwards_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_ReqPvPDailyAwards_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqPvPDailyAwards_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_ReqPvPDailyAwards_CS::InternalSwap(MSG_ReqPvPDailyAwards_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqPvPDailyAwards_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPvPDailyAwards_SC::InitAsDefaultInstance() {
}
class MSG_RetPvPDailyAwards_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPvPDailyAwards_SC>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetPvPDailyAwards_SC::MSG_RetPvPDailyAwards_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
}
MSG_RetPvPDailyAwards_SC::MSG_RetPvPDailyAwards_SC(const MSG_RetPvPDailyAwards_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      rewardlist_(from.rewardlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matchtype_ = from.matchtype_;
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
}

void MSG_RetPvPDailyAwards_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetPvPDailyAwards_SC_pvpmatchfight_2eproto.base);
  matchtype_ = 0;
}

MSG_RetPvPDailyAwards_SC::~MSG_RetPvPDailyAwards_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
  SharedDtor();
}

void MSG_RetPvPDailyAwards_SC::SharedDtor() {
}

void MSG_RetPvPDailyAwards_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPvPDailyAwards_SC& MSG_RetPvPDailyAwards_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPvPDailyAwards_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPvPDailyAwards_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewardlist_.Clear();
  matchtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPvPDailyAwards_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .pvpmatchfight.PvPAwardItem rewardlist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewardlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPvPDailyAwards_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  // repeated .pvpmatchfight.PvPAwardItem rewardlist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewardlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rewardlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
  return target;
}

size_t MSG_RetPvPDailyAwards_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pvpmatchfight.PvPAwardItem rewardlist = 2;
  total_size += 1UL * this->_internal_rewardlist_size();
  for (const auto& msg : this->rewardlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPvPDailyAwards_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPvPDailyAwards_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPvPDailyAwards_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPvPDailyAwards_SC::MergeFrom(const MSG_RetPvPDailyAwards_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewardlist_.MergeFrom(from.rewardlist_);
  if (from._internal_has_matchtype()) {
    _internal_set_matchtype(from._internal_matchtype());
  }
}

void MSG_RetPvPDailyAwards_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPvPDailyAwards_SC::CopyFrom(const MSG_RetPvPDailyAwards_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetPvPDailyAwards_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPvPDailyAwards_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rewardlist_)) return false;
  return true;
}

void MSG_RetPvPDailyAwards_SC::InternalSwap(MSG_RetPvPDailyAwards_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rewardlist_.InternalSwap(&other->rewardlist_);
  swap(matchtype_, other->matchtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPvPDailyAwards_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPvPPKGeneralConfig_SC::InitAsDefaultInstance() {
}
class MSG_RetPvPPKGeneralConfig_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPvPPKGeneralConfig_SC>()._has_bits_);
  static void set_has_matchtype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teampknum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetPvPPKGeneralConfig_SC::MSG_RetPvPPKGeneralConfig_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
}
MSG_RetPvPPKGeneralConfig_SC::MSG_RetPvPPKGeneralConfig_SC(const MSG_RetPvPPKGeneralConfig_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matchtype_, &from.matchtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&teampknum_) -
    reinterpret_cast<char*>(&matchtype_)) + sizeof(teampknum_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
}

void MSG_RetPvPPKGeneralConfig_SC::SharedCtor() {
  ::memset(&matchtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teampknum_) -
      reinterpret_cast<char*>(&matchtype_)) + sizeof(teampknum_));
}

MSG_RetPvPPKGeneralConfig_SC::~MSG_RetPvPPKGeneralConfig_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
  SharedDtor();
}

void MSG_RetPvPPKGeneralConfig_SC::SharedDtor() {
}

void MSG_RetPvPPKGeneralConfig_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPvPPKGeneralConfig_SC& MSG_RetPvPPKGeneralConfig_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPvPPKGeneralConfig_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPvPPKGeneralConfig_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&matchtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teampknum_) -
        reinterpret_cast<char*>(&matchtype_)) + sizeof(teampknum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPvPPKGeneralConfig_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.MATCHFIGHT matchtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MATCHFIGHT_IsValid(val))) {
            _internal_set_matchtype(static_cast<::msg::MATCHFIGHT>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 teampknum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_teampknum(&has_bits);
          teampknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPvPPKGeneralConfig_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.MATCHFIGHT matchtype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_matchtype(), target);
  }

  // optional uint32 teampknum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_teampknum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
  return target;
}

size_t MSG_RetPvPPKGeneralConfig_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
  size_t total_size = 0;

  // required .msg.MATCHFIGHT matchtype = 1;
  if (_internal_has_matchtype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_matchtype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 teampknum = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_teampknum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPvPPKGeneralConfig_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPvPPKGeneralConfig_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPvPPKGeneralConfig_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPvPPKGeneralConfig_SC::MergeFrom(const MSG_RetPvPPKGeneralConfig_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      matchtype_ = from.matchtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      teampknum_ = from.teampknum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetPvPPKGeneralConfig_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPvPPKGeneralConfig_SC::CopyFrom(const MSG_RetPvPPKGeneralConfig_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetPvPPKGeneralConfig_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPvPPKGeneralConfig_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_RetPvPPKGeneralConfig_SC::InternalSwap(MSG_RetPvPPKGeneralConfig_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchtype_, other->matchtype_);
  swap(teampknum_, other->teampknum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPvPPKGeneralConfig_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void onePlayerLive::InitAsDefaultInstance() {
}
class onePlayerLive::_Internal {
 public:
  using HasBits = decltype(std::declval<onePlayerLive>()._has_bits_);
  static void set_has_memid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isdead(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reliveleftsecs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

onePlayerLive::onePlayerLive()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.onePlayerLive)
}
onePlayerLive::onePlayerLive(const onePlayerLive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_memid()) {
    memid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memid_);
  }
  ::memcpy(&heroid_, &from.heroid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reliveleftsecs_) -
    reinterpret_cast<char*>(&heroid_)) + sizeof(reliveleftsecs_));
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.onePlayerLive)
}

void onePlayerLive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_onePlayerLive_pvpmatchfight_2eproto.base);
  memid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&heroid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reliveleftsecs_) -
      reinterpret_cast<char*>(&heroid_)) + sizeof(reliveleftsecs_));
}

onePlayerLive::~onePlayerLive() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.onePlayerLive)
  SharedDtor();
}

void onePlayerLive::SharedDtor() {
  memid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void onePlayerLive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const onePlayerLive& onePlayerLive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_onePlayerLive_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void onePlayerLive::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.onePlayerLive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    memid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&heroid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reliveleftsecs_) -
        reinterpret_cast<char*>(&heroid_)) + sizeof(reliveleftsecs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* onePlayerLive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string memid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_memid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pvpmatchfight.onePlayerLive.memid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isdead = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isdead(&has_bits);
          isdead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reliveleftsecs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_reliveleftsecs(&has_bits);
          reliveleftsecs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* onePlayerLive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.onePlayerLive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string memid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_memid().data(), static_cast<int>(this->_internal_memid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "pvpmatchfight.onePlayerLive.memid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_memid(), target);
  }

  // optional uint32 heroid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heroid(), target);
  }

  // optional bool isdead = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isdead(), target);
  }

  // optional uint32 reliveleftsecs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_reliveleftsecs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.onePlayerLive)
  return target;
}

size_t onePlayerLive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.onePlayerLive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string memid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_memid());
    }

    // optional uint32 heroid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional bool isdead = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 reliveleftsecs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reliveleftsecs());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void onePlayerLive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.onePlayerLive)
  GOOGLE_DCHECK_NE(&from, this);
  const onePlayerLive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<onePlayerLive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.onePlayerLive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.onePlayerLive)
    MergeFrom(*source);
  }
}

void onePlayerLive::MergeFrom(const onePlayerLive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.onePlayerLive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      memid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memid_);
    }
    if (cached_has_bits & 0x00000002u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000004u) {
      isdead_ = from.isdead_;
    }
    if (cached_has_bits & 0x00000008u) {
      reliveleftsecs_ = from.reliveleftsecs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void onePlayerLive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.onePlayerLive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void onePlayerLive::CopyFrom(const onePlayerLive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.onePlayerLive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool onePlayerLive::IsInitialized() const {
  return true;
}

void onePlayerLive::InternalSwap(onePlayerLive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  memid_.Swap(&other->memid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(heroid_, other->heroid_);
  swap(isdead_, other->isdead_);
  swap(reliveleftsecs_, other->reliveleftsecs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata onePlayerLive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetPvPMatchFightCurLive_SC::InitAsDefaultInstance() {
}
class MSG_RetPvPMatchFightCurLive_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetPvPMatchFightCurLive_SC>()._has_bits_);
};

MSG_RetPvPMatchFightCurLive_SC::MSG_RetPvPMatchFightCurLive_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
}
MSG_RetPvPMatchFightCurLive_SC::MSG_RetPvPMatchFightCurLive_SC(const MSG_RetPvPMatchFightCurLive_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      oneplayer_(from.oneplayer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
}

void MSG_RetPvPMatchFightCurLive_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetPvPMatchFightCurLive_SC_pvpmatchfight_2eproto.base);
}

MSG_RetPvPMatchFightCurLive_SC::~MSG_RetPvPMatchFightCurLive_SC() {
  // @@protoc_insertion_point(destructor:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
  SharedDtor();
}

void MSG_RetPvPMatchFightCurLive_SC::SharedDtor() {
}

void MSG_RetPvPMatchFightCurLive_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetPvPMatchFightCurLive_SC& MSG_RetPvPMatchFightCurLive_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetPvPMatchFightCurLive_SC_pvpmatchfight_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetPvPMatchFightCurLive_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oneplayer_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetPvPMatchFightCurLive_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pvpmatchfight.onePlayerLive oneplayer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_oneplayer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetPvPMatchFightCurLive_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pvpmatchfight.onePlayerLive oneplayer = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_oneplayer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_oneplayer(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
  return target;
}

size_t MSG_RetPvPMatchFightCurLive_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pvpmatchfight.onePlayerLive oneplayer = 1;
  total_size += 1UL * this->_internal_oneplayer_size();
  for (const auto& msg : this->oneplayer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetPvPMatchFightCurLive_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetPvPMatchFightCurLive_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetPvPMatchFightCurLive_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
    MergeFrom(*source);
  }
}

void MSG_RetPvPMatchFightCurLive_SC::MergeFrom(const MSG_RetPvPMatchFightCurLive_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oneplayer_.MergeFrom(from.oneplayer_);
}

void MSG_RetPvPMatchFightCurLive_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetPvPMatchFightCurLive_SC::CopyFrom(const MSG_RetPvPMatchFightCurLive_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pvpmatchfight.MSG_RetPvPMatchFightCurLive_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetPvPMatchFightCurLive_SC::IsInitialized() const {
  return true;
}

void MSG_RetPvPMatchFightCurLive_SC::InternalSwap(MSG_RetPvPMatchFightCurLive_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  oneplayer_.InternalSwap(&other->oneplayer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetPvPMatchFightCurLive_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pvpmatchfight
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_Req_StartPvPMatch_CS* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_Req_StartPvPMatch_CS >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_Req_StartPvPMatch_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_Ret_StartPvPMatch_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_Ret_StartPvPMatch_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_Ret_StartPvPMatch_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_Req_CancelPvPMatch_CS* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_Req_CancelPvPMatch_CS >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_Req_CancelPvPMatch_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_Ret_CancelPvPMatch_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_Ret_PvPMatchResult_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_Ret_PvPMatchResult_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_Ret_PvPMatchResult_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_Req_GotoPvPBattle_CS* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_Req_GotoPvPBattle_CS >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_Req_GotoPvPBattle_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_ReqChoosePvPPrepared_CS* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_ReqChoosePvPPrepared_CS >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_ReqChoosePvPPrepared_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetChoosePvPPrepared_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetChoosePvPPrepared_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetChoosePvPPrepared_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetStartPvPPrepare_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetStartPvPPrepare_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetStartPvPPrepare_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetPvPFightCountDown_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetPvPFightCountDown_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetPvPFightCountDown_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetPvPFightPreFight_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetPvPFightPreFight_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetPvPFightPreFight_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetStartPvPFight_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetStartPvPFight_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetStartPvPFight_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetPvPSpeedupFight_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetPvPSpeedupFight_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetPvPSpeedupFight_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetPvPFightFinish_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetPvPFightFinish_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetPvPFightFinish_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_ReqPvPFightCurStage_CS* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_ReqPvPFightCurStage_CS >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_ReqPvPFightCurStage_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetPvPFightCurStage_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetPvPFightCurStage_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetPvPFightCurStage_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetPvPTeamCurScore_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetPvPPreparedNum_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetPvPPreparedNum_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetPvPPreparedNum_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::PvPAwardItem* Arena::CreateMaybeMessage< ::pvpmatchfight::PvPAwardItem >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::PvPAwardItem >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_ReqPvPDailyAwards_CS* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_ReqPvPDailyAwards_CS >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_ReqPvPDailyAwards_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetPvPDailyAwards_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetPvPDailyAwards_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetPvPDailyAwards_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetPvPPKGeneralConfig_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::onePlayerLive* Arena::CreateMaybeMessage< ::pvpmatchfight::onePlayerLive >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::onePlayerLive >(arena);
}
template<> PROTOBUF_NOINLINE ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC* Arena::CreateMaybeMessage< ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC >(Arena* arena) {
  return Arena::CreateInternal< ::pvpmatchfight::MSG_RetPvPMatchFightCurLive_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
