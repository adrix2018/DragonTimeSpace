// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hero.proto

#include "hero.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_object_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CardPackInfo_object_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_avatar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarPair_avatar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnaItem_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Hero_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeroAvatar_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroEvolution_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroScore_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroShow_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeroSkill_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroSkillItem_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroTrain_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hole_hero_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_hero_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_DnaPageInfo_CSC_hero_2eproto;
namespace hero {
class HeroDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hero> _instance;
} _Hero_default_instance_;
class HeroShowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeroShow> _instance;
} _HeroShow_default_instance_;
class HeroTrainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeroTrain> _instance;
} _HeroTrain_default_instance_;
class HeroSkillItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeroSkillItem> _instance;
} _HeroSkillItem_default_instance_;
class HeroSkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeroSkill> _instance;
} _HeroSkill_default_instance_;
class HeroAvatarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeroAvatar> _instance;
} _HeroAvatar_default_instance_;
class HeroEvolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeroEvolution> _instance;
} _HeroEvolution_default_instance_;
class MSG_ReqSwitchHero_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSwitchHero_CS> _instance;
} _MSG_ReqSwitchHero_CS_default_instance_;
class MSG_RetSwitchHero_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetSwitchHero_SC> _instance;
} _MSG_RetSwitchHero_SC_default_instance_;
class MSG_NotifyAllHeros_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NotifyAllHeros_SC> _instance;
} _MSG_NotifyAllHeros_SC_default_instance_;
class MSG_NotifyHeroChange_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NotifyHeroChange_SC> _instance;
} _MSG_NotifyHeroChange_SC_default_instance_;
class MSG_ReqHeroTrain_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqHeroTrain_CS> _instance;
} _MSG_ReqHeroTrain_CS_default_instance_;
class MSG_RetHeroTrain_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetHeroTrain_SC> _instance;
} _MSG_RetHeroTrain_SC_default_instance_;
class MSG_ReqLockUnlockHero_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqLockUnlockHero_CS> _instance;
} _MSG_ReqLockUnlockHero_CS_default_instance_;
class MSG_RetLockUnlockHero_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetLockUnlockHero_SC> _instance;
} _MSG_RetLockUnlockHero_SC_default_instance_;
class MSG_ReqLevelupHeroSkill_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqLevelupHeroSkill_CS> _instance;
} _MSG_ReqLevelupHeroSkill_CS_default_instance_;
class MSG_RetLevelupHeroSkill_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetLevelupHeroSkill_SC> _instance;
} _MSG_RetLevelupHeroSkill_SC_default_instance_;
class MSG_notifyRefreshHero_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_notifyRefreshHero_SC> _instance;
} _MSG_notifyRefreshHero_SC_default_instance_;
class MSG_ReqRiseStar_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqRiseStar_CS> _instance;
} _MSG_ReqRiseStar_CS_default_instance_;
class MSG_RetRiseStar_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRiseStar_SC> _instance;
} _MSG_RetRiseStar_SC_default_instance_;
class DnaItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DnaItem> _instance;
} _DnaItem_default_instance_;
class MSG_DnaBagInfo_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_DnaBagInfo_CSC> _instance;
} _MSG_DnaBagInfo_CSC_default_instance_;
class HoleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hole> _instance;
} _Hole_default_instance_;
class MSG_DnaPageInfo_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_DnaPageInfo_CSC> _instance;
} _MSG_DnaPageInfo_CSC_default_instance_;
class MSG_ReqPutOnDna_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqPutOnDna_CS> _instance;
} _MSG_ReqPutOnDna_CS_default_instance_;
class MSG_ReqPutOffDna_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqPutOffDna_CS> _instance;
} _MSG_ReqPutOffDna_CS_default_instance_;
class MSG_ReqCombineDna_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqCombineDna_CS> _instance;
} _MSG_ReqCombineDna_CS_default_instance_;
class MSG_ReqChangeCurDnaPage_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqChangeCurDnaPage_CS> _instance;
} _MSG_ReqChangeCurDnaPage_CS_default_instance_;
class MSG_ReqCombineDnaInBag_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqCombineDnaInBag_CS> _instance;
} _MSG_ReqCombineDnaInBag_CS_default_instance_;
class MSG_ReqBuySlot_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqBuySlot_SC> _instance;
} _MSG_ReqBuySlot_SC_default_instance_;
class MSG_ResponseSlotOpened_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ResponseSlotOpened_SC> _instance;
} _MSG_ResponseSlotOpened_SC_default_instance_;
class MSG_AllDnaPageInfo_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_AllDnaPageInfo_CSC> _instance;
} _MSG_AllDnaPageInfo_CSC_default_instance_;
class MSG_SetMainHero_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_SetMainHero_CSC> _instance;
} _MSG_SetMainHero_CSC_default_instance_;
class HeroScoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeroScore> _instance;
} _HeroScore_default_instance_;
class MSG_NotifyClientHeroScore_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NotifyClientHeroScore_SC> _instance;
} _MSG_NotifyClientHeroScore_SC_default_instance_;
}  // namespace hero
static void InitDefaultsscc_info_DnaItem_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_DnaItem_default_instance_;
    new (ptr) ::hero::DnaItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::DnaItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnaItem_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DnaItem_hero_2eproto}, {}};

static void InitDefaultsscc_info_Hero_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_Hero_default_instance_;
    new (ptr) ::hero::Hero();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::Hero::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Hero_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Hero_hero_2eproto}, {
      &scc_info_HeroTrain_hero_2eproto.base,
      &scc_info_HeroSkill_hero_2eproto.base,
      &scc_info_HeroAvatar_hero_2eproto.base,
      &scc_info_HeroEvolution_hero_2eproto.base,
      &scc_info_HeroShow_hero_2eproto.base,
      &scc_info_CardPackInfo_object_2eproto.base,}};

static void InitDefaultsscc_info_HeroAvatar_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_HeroAvatar_default_instance_;
    new (ptr) ::hero::HeroAvatar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::HeroAvatar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeroAvatar_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HeroAvatar_hero_2eproto}, {
      &scc_info_AvatarPair_avatar_2eproto.base,}};

static void InitDefaultsscc_info_HeroEvolution_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_HeroEvolution_default_instance_;
    new (ptr) ::hero::HeroEvolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::HeroEvolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroEvolution_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeroEvolution_hero_2eproto}, {}};

static void InitDefaultsscc_info_HeroScore_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_HeroScore_default_instance_;
    new (ptr) ::hero::HeroScore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::HeroScore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroScore_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeroScore_hero_2eproto}, {}};

static void InitDefaultsscc_info_HeroShow_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_HeroShow_default_instance_;
    new (ptr) ::hero::HeroShow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::HeroShow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroShow_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeroShow_hero_2eproto}, {}};

static void InitDefaultsscc_info_HeroSkill_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_HeroSkill_default_instance_;
    new (ptr) ::hero::HeroSkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::HeroSkill::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HeroSkill_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HeroSkill_hero_2eproto}, {
      &scc_info_HeroSkillItem_hero_2eproto.base,}};

static void InitDefaultsscc_info_HeroSkillItem_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_HeroSkillItem_default_instance_;
    new (ptr) ::hero::HeroSkillItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::HeroSkillItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroSkillItem_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeroSkillItem_hero_2eproto}, {}};

static void InitDefaultsscc_info_HeroTrain_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_HeroTrain_default_instance_;
    new (ptr) ::hero::HeroTrain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::HeroTrain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeroTrain_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeroTrain_hero_2eproto}, {}};

static void InitDefaultsscc_info_Hole_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_Hole_default_instance_;
    new (ptr) ::hero::Hole();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::Hole::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hole_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hole_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_AllDnaPageInfo_CSC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_AllDnaPageInfo_CSC_default_instance_;
    new (ptr) ::hero::MSG_AllDnaPageInfo_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_AllDnaPageInfo_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_AllDnaPageInfo_CSC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_AllDnaPageInfo_CSC_hero_2eproto}, {
      &scc_info_MSG_DnaPageInfo_CSC_hero_2eproto.base,}};

static void InitDefaultsscc_info_MSG_DnaBagInfo_CSC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_DnaBagInfo_CSC_default_instance_;
    new (ptr) ::hero::MSG_DnaBagInfo_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_DnaBagInfo_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_DnaBagInfo_CSC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_DnaBagInfo_CSC_hero_2eproto}, {
      &scc_info_DnaItem_hero_2eproto.base,}};

static void InitDefaultsscc_info_MSG_DnaPageInfo_CSC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_DnaPageInfo_CSC_default_instance_;
    new (ptr) ::hero::MSG_DnaPageInfo_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_DnaPageInfo_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_DnaPageInfo_CSC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_DnaPageInfo_CSC_hero_2eproto}, {
      &scc_info_Hole_hero_2eproto.base,}};

static void InitDefaultsscc_info_MSG_NotifyAllHeros_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_NotifyAllHeros_SC_default_instance_;
    new (ptr) ::hero::MSG_NotifyAllHeros_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_NotifyAllHeros_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_NotifyAllHeros_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_NotifyAllHeros_SC_hero_2eproto}, {
      &scc_info_Hero_hero_2eproto.base,}};

static void InitDefaultsscc_info_MSG_NotifyClientHeroScore_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_NotifyClientHeroScore_SC_default_instance_;
    new (ptr) ::hero::MSG_NotifyClientHeroScore_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_NotifyClientHeroScore_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_NotifyClientHeroScore_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_NotifyClientHeroScore_SC_hero_2eproto}, {
      &scc_info_HeroScore_hero_2eproto.base,}};

static void InitDefaultsscc_info_MSG_NotifyHeroChange_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_NotifyHeroChange_SC_default_instance_;
    new (ptr) ::hero::MSG_NotifyHeroChange_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_NotifyHeroChange_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_NotifyHeroChange_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_NotifyHeroChange_SC_hero_2eproto}, {
      &scc_info_Hero_hero_2eproto.base,}};

static void InitDefaultsscc_info_MSG_ReqBuySlot_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqBuySlot_SC_default_instance_;
    new (ptr) ::hero::MSG_ReqBuySlot_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqBuySlot_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqBuySlot_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqBuySlot_SC_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqChangeCurDnaPage_CS_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqChangeCurDnaPage_CS_default_instance_;
    new (ptr) ::hero::MSG_ReqChangeCurDnaPage_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqChangeCurDnaPage_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqChangeCurDnaPage_CS_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqChangeCurDnaPage_CS_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqCombineDnaInBag_CS_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqCombineDnaInBag_CS_default_instance_;
    new (ptr) ::hero::MSG_ReqCombineDnaInBag_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqCombineDnaInBag_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqCombineDnaInBag_CS_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqCombineDnaInBag_CS_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqCombineDna_CS_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqCombineDna_CS_default_instance_;
    new (ptr) ::hero::MSG_ReqCombineDna_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqCombineDna_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqCombineDna_CS_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqCombineDna_CS_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqHeroTrain_CS_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqHeroTrain_CS_default_instance_;
    new (ptr) ::hero::MSG_ReqHeroTrain_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqHeroTrain_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqHeroTrain_CS_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqHeroTrain_CS_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqLevelupHeroSkill_CS_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqLevelupHeroSkill_CS_default_instance_;
    new (ptr) ::hero::MSG_ReqLevelupHeroSkill_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqLevelupHeroSkill_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqLevelupHeroSkill_CS_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqLevelupHeroSkill_CS_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqLockUnlockHero_CS_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqLockUnlockHero_CS_default_instance_;
    new (ptr) ::hero::MSG_ReqLockUnlockHero_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqLockUnlockHero_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqLockUnlockHero_CS_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqLockUnlockHero_CS_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqPutOffDna_CS_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqPutOffDna_CS_default_instance_;
    new (ptr) ::hero::MSG_ReqPutOffDna_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqPutOffDna_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqPutOffDna_CS_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqPutOffDna_CS_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqPutOnDna_CS_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqPutOnDna_CS_default_instance_;
    new (ptr) ::hero::MSG_ReqPutOnDna_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqPutOnDna_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqPutOnDna_CS_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqPutOnDna_CS_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqRiseStar_CS_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqRiseStar_CS_default_instance_;
    new (ptr) ::hero::MSG_ReqRiseStar_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqRiseStar_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqRiseStar_CS_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqRiseStar_CS_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSwitchHero_CS_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ReqSwitchHero_CS_default_instance_;
    new (ptr) ::hero::MSG_ReqSwitchHero_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ReqSwitchHero_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSwitchHero_CS_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSwitchHero_CS_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ResponseSlotOpened_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_ResponseSlotOpened_SC_default_instance_;
    new (ptr) ::hero::MSG_ResponseSlotOpened_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_ResponseSlotOpened_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ResponseSlotOpened_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ResponseSlotOpened_SC_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetHeroTrain_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_RetHeroTrain_SC_default_instance_;
    new (ptr) ::hero::MSG_RetHeroTrain_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_RetHeroTrain_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetHeroTrain_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetHeroTrain_SC_hero_2eproto}, {
      &scc_info_Hero_hero_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetLevelupHeroSkill_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_RetLevelupHeroSkill_SC_default_instance_;
    new (ptr) ::hero::MSG_RetLevelupHeroSkill_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_RetLevelupHeroSkill_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetLevelupHeroSkill_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetLevelupHeroSkill_SC_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetLockUnlockHero_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_RetLockUnlockHero_SC_default_instance_;
    new (ptr) ::hero::MSG_RetLockUnlockHero_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_RetLockUnlockHero_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetLockUnlockHero_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetLockUnlockHero_SC_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetRiseStar_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_RetRiseStar_SC_default_instance_;
    new (ptr) ::hero::MSG_RetRiseStar_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_RetRiseStar_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetRiseStar_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetRiseStar_SC_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetSwitchHero_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_RetSwitchHero_SC_default_instance_;
    new (ptr) ::hero::MSG_RetSwitchHero_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_RetSwitchHero_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetSwitchHero_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetSwitchHero_SC_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_SetMainHero_CSC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_SetMainHero_CSC_default_instance_;
    new (ptr) ::hero::MSG_SetMainHero_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_SetMainHero_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_SetMainHero_CSC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_SetMainHero_CSC_hero_2eproto}, {}};

static void InitDefaultsscc_info_MSG_notifyRefreshHero_SC_hero_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hero::_MSG_notifyRefreshHero_SC_default_instance_;
    new (ptr) ::hero::MSG_notifyRefreshHero_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hero::MSG_notifyRefreshHero_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_notifyRefreshHero_SC_hero_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_notifyRefreshHero_SC_hero_2eproto}, {
      &scc_info_Hero_hero_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hero_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_hero_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hero_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_hero_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hero::Hero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::Hero, thisid_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, baseid_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, star_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, bind_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, lock_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, runepageid_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, score_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, train_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, skill_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, avatar_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, evolution_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, show_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, cardpack_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, tradetime_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, level_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, exp_),
  PROTOBUF_FIELD_OFFSET(::hero::Hero, self_created_),
  0,
  7,
  8,
  9,
  10,
  11,
  12,
  1,
  2,
  3,
  4,
  5,
  6,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::hero::HeroShow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroShow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::HeroShow, facestyle_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroShow, hairstyle_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroShow, bodystyle_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroShow, haircolor_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroShow, antenna_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hero::HeroTrain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroTrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::HeroTrain, pdamage_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroTrain, mdamage_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroTrain, pdefence_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroTrain, mdefence_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroTrain, maxhp_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hero::HeroSkillItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroSkillItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::HeroSkillItem, skillbaseid_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroSkillItem, skilllevel_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroSkillItem, skillorgid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::HeroSkill, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::HeroSkill, skill_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hero::HeroAvatar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::HeroAvatar, avatars_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroAvatar, equavatars_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroAvatar, attravatar_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroAvatar, activeavatar_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroAvatar, transkill_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::HeroEvolution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroEvolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::HeroEvolution, evolutions_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqSwitchHero_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqSwitchHero_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqSwitchHero_CS, toherothisid_),
  0,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetSwitchHero_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetSwitchHero_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetSwitchHero_SC, errcode_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetSwitchHero_SC, curhero_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_NotifyAllHeros_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_NotifyAllHeros_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_NotifyAllHeros_SC, heroinfo_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_NotifyHeroChange_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_NotifyHeroChange_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_NotifyHeroChange_SC, changetype_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_NotifyHeroChange_SC, herolist_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqHeroTrain_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqHeroTrain_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqHeroTrain_CS, herothisid_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqHeroTrain_CS, traintimes_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqHeroTrain_CS, isusewater_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetHeroTrain_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetHeroTrain_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetHeroTrain_SC, errcode_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetHeroTrain_SC, herocurinfo_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqLockUnlockHero_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqLockUnlockHero_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqLockUnlockHero_CS, herothisid_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqLockUnlockHero_CS, locktype_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLockUnlockHero_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLockUnlockHero_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLockUnlockHero_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLockUnlockHero_SC, herothisid_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLockUnlockHero_SC, locktype_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqLevelupHeroSkill_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqLevelupHeroSkill_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqLevelupHeroSkill_CS, herothisid_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqLevelupHeroSkill_CS, skillbaseid_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqLevelupHeroSkill_CS, skilllevel_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLevelupHeroSkill_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLevelupHeroSkill_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLevelupHeroSkill_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLevelupHeroSkill_SC, herothisid_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLevelupHeroSkill_SC, skillbaseid_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLevelupHeroSkill_SC, skilllevel_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetLevelupHeroSkill_SC, skillorgid_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_notifyRefreshHero_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_notifyRefreshHero_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_notifyRefreshHero_SC, heroinfo_),
  0,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqRiseStar_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqRiseStar_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqRiseStar_CS, sourcethisid_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqRiseStar_CS, costthisid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetRiseStar_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetRiseStar_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetRiseStar_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetRiseStar_SC, sourcethisid_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_RetRiseStar_SC, costthisid_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hero::DnaItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::DnaItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::DnaItem, id_),
  PROTOBUF_FIELD_OFFSET(::hero::DnaItem, level_),
  PROTOBUF_FIELD_OFFSET(::hero::DnaItem, num_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaBagInfo_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaBagInfo_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaBagInfo_CSC, datas_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaBagInfo_CSC, cur_page_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hero::Hole, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::Hole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::Hole, pos_),
  PROTOBUF_FIELD_OFFSET(::hero::Hole, id_),
  PROTOBUF_FIELD_OFFSET(::hero::Hole, level_),
  PROTOBUF_FIELD_OFFSET(::hero::Hole, page_),
  PROTOBUF_FIELD_OFFSET(::hero::Hole, type_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaPageInfo_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaPageInfo_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaPageInfo_CSC, page_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaPageInfo_CSC, att_holes_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaPageInfo_CSC, def_holes_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaPageInfo_CSC, att_opened_num_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_DnaPageInfo_CSC, def_opened_num_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOnDna_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOnDna_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOnDna_CS, page_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOnDna_CS, pos_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOnDna_CS, id_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOnDna_CS, level_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOnDna_CS, type_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOffDna_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOffDna_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOffDna_CS, page_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOffDna_CS, pos_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqPutOffDna_CS, type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDna_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDna_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDna_CS, page_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDna_CS, pos_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDna_CS, type_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDna_CS, num_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqChangeCurDnaPage_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqChangeCurDnaPage_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqChangeCurDnaPage_CS, page_),
  0,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDnaInBag_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDnaInBag_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDnaInBag_CS, id_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDnaInBag_CS, level_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqCombineDnaInBag_CS, num_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqBuySlot_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqBuySlot_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqBuySlot_SC, page_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ReqBuySlot_SC, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ResponseSlotOpened_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ResponseSlotOpened_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ResponseSlotOpened_SC, page_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ResponseSlotOpened_SC, type_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_ResponseSlotOpened_SC, cur_num_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_AllDnaPageInfo_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_AllDnaPageInfo_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_AllDnaPageInfo_CSC, pages_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_SetMainHero_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_SetMainHero_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_SetMainHero_CSC, herothisid_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_SetMainHero_CSC, opcode_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_SetMainHero_CSC, errorcode_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hero::HeroScore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::HeroScore, thisid_),
  PROTOBUF_FIELD_OFFSET(::hero::HeroScore, score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::hero::MSG_NotifyClientHeroScore_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hero::MSG_NotifyClientHeroScore_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hero::MSG_NotifyClientHeroScore_SC, scores_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, sizeof(::hero::Hero)},
  { 39, 49, sizeof(::hero::HeroShow)},
  { 54, 64, sizeof(::hero::HeroTrain)},
  { 69, 77, sizeof(::hero::HeroSkillItem)},
  { 80, 86, sizeof(::hero::HeroSkill)},
  { 87, 97, sizeof(::hero::HeroAvatar)},
  { 102, 108, sizeof(::hero::HeroEvolution)},
  { 109, 115, sizeof(::hero::MSG_ReqSwitchHero_CS)},
  { 116, 123, sizeof(::hero::MSG_RetSwitchHero_SC)},
  { 125, 131, sizeof(::hero::MSG_NotifyAllHeros_SC)},
  { 132, 139, sizeof(::hero::MSG_NotifyHeroChange_SC)},
  { 141, 149, sizeof(::hero::MSG_ReqHeroTrain_CS)},
  { 152, 159, sizeof(::hero::MSG_RetHeroTrain_SC)},
  { 161, 168, sizeof(::hero::MSG_ReqLockUnlockHero_CS)},
  { 170, 178, sizeof(::hero::MSG_RetLockUnlockHero_SC)},
  { 181, 189, sizeof(::hero::MSG_ReqLevelupHeroSkill_CS)},
  { 192, 202, sizeof(::hero::MSG_RetLevelupHeroSkill_SC)},
  { 207, 213, sizeof(::hero::MSG_notifyRefreshHero_SC)},
  { 214, 221, sizeof(::hero::MSG_ReqRiseStar_CS)},
  { 223, 231, sizeof(::hero::MSG_RetRiseStar_SC)},
  { 234, 242, sizeof(::hero::DnaItem)},
  { 245, 252, sizeof(::hero::MSG_DnaBagInfo_CSC)},
  { 254, 264, sizeof(::hero::Hole)},
  { 269, 279, sizeof(::hero::MSG_DnaPageInfo_CSC)},
  { 284, 294, sizeof(::hero::MSG_ReqPutOnDna_CS)},
  { 299, 307, sizeof(::hero::MSG_ReqPutOffDna_CS)},
  { 310, 319, sizeof(::hero::MSG_ReqCombineDna_CS)},
  { 323, 329, sizeof(::hero::MSG_ReqChangeCurDnaPage_CS)},
  { 330, 338, sizeof(::hero::MSG_ReqCombineDnaInBag_CS)},
  { 341, 348, sizeof(::hero::MSG_ReqBuySlot_SC)},
  { 350, 358, sizeof(::hero::MSG_ResponseSlotOpened_SC)},
  { 361, 367, sizeof(::hero::MSG_AllDnaPageInfo_CSC)},
  { 368, 376, sizeof(::hero::MSG_SetMainHero_CSC)},
  { 379, 386, sizeof(::hero::HeroScore)},
  { 388, 394, sizeof(::hero::MSG_NotifyClientHeroScore_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_Hero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_HeroShow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_HeroTrain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_HeroSkillItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_HeroSkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_HeroAvatar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_HeroEvolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqSwitchHero_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_RetSwitchHero_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_NotifyAllHeros_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_NotifyHeroChange_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqHeroTrain_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_RetHeroTrain_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqLockUnlockHero_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_RetLockUnlockHero_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqLevelupHeroSkill_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_RetLevelupHeroSkill_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_notifyRefreshHero_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqRiseStar_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_RetRiseStar_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_DnaItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_DnaBagInfo_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_Hole_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_DnaPageInfo_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqPutOnDna_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqPutOffDna_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqCombineDna_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqChangeCurDnaPage_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqCombineDnaInBag_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ReqBuySlot_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_ResponseSlotOpened_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_AllDnaPageInfo_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_SetMainHero_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_HeroScore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hero::_MSG_NotifyClientHeroScore_SC_default_instance_),
};

const char descriptor_table_protodef_hero_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nhero.proto\022\004hero\032\014object.proto\032\014avatar"
  ".proto\"\205\003\n\004Hero\022\016\n\006thisid\030\001 \001(\t\022\016\n\006basei"
  "d\030\002 \001(\r\022\014\n\004star\030\003 \001(\r\022\014\n\004bind\030\004 \001(\r\022\014\n\004l"
  "ock\030\005 \001(\r\022\022\n\nrunepageid\030\006 \001(\r\022\r\n\005score\030\007"
  " \001(\r\022\036\n\005train\030\010 \001(\0132\017.hero.HeroTrain\022\036\n\005"
  "skill\030\t \001(\0132\017.hero.HeroSkill\022 \n\006avatar\030\n"
  " \001(\0132\020.hero.HeroAvatar\022&\n\tevolution\030\013 \001("
  "\0132\023.hero.HeroEvolution\022\034\n\004show\030\014 \001(\0132\016.h"
  "ero.HeroShow\022#\n\010cardpack\030\r \001(\0132\021.Obj.Car"
  "dPackInfo\022\021\n\ttradetime\030\016 \001(\r\022\r\n\005level\030\017 "
  "\001(\r\022\013\n\003exp\030\020 \001(\004\022\024\n\014self_created\030\021 \001(\010\"g"
  "\n\010HeroShow\022\021\n\tfacestyle\030\001 \001(\r\022\021\n\thairsty"
  "le\030\002 \001(\r\022\021\n\tbodystyle\030\003 \001(\r\022\021\n\thaircolor"
  "\030\004 \001(\r\022\017\n\007antenna\030\005 \001(\r\"`\n\tHeroTrain\022\017\n\007"
  "pdamage\030\002 \001(\r\022\017\n\007mdamage\030\003 \001(\r\022\020\n\010pdefen"
  "ce\030\004 \001(\r\022\020\n\010mdefence\030\005 \001(\r\022\r\n\005maxhp\030\006 \001("
  "\r\"L\n\rHeroSkillItem\022\023\n\013skillbaseid\030\001 \001(\r\022"
  "\022\n\nskilllevel\030\002 \001(\r\022\022\n\nskillorgid\030\003 \001(\r\""
  "/\n\tHeroSkill\022\"\n\005skill\030\001 \003(\0132\023.hero.HeroS"
  "killItem\"\202\001\n\nHeroAvatar\022\017\n\007avatars\030\001 \003(\r"
  "\022&\n\nequAvatars\030\002 \003(\0132\022.avatar.AvatarPair"
  "\022\022\n\nattrAvatar\030\003 \001(\r\022\024\n\014activeAvatar\030\004 \001"
  "(\r\022\021\n\ttranSkill\030\005 \001(\r\"#\n\rHeroEvolution\022\022"
  "\n\nevolutions\030\001 \003(\r\",\n\024MSG_ReqSwitchHero_"
  "CS\022\024\n\014toherothisid\030\001 \001(\t\"8\n\024MSG_RetSwitc"
  "hHero_SC\022\017\n\007errcode\030\001 \001(\r\022\017\n\007curhero\030\002 \001"
  "(\t\"5\n\025MSG_NotifyAllHeros_SC\022\034\n\010heroinfo\030"
  "\001 \003(\0132\n.hero.Hero\"K\n\027MSG_NotifyHeroChang"
  "e_SC\022\022\n\nchangetype\030\001 \001(\r\022\034\n\010herolist\030\002 \003"
  "(\0132\n.hero.Hero\"Q\n\023MSG_ReqHeroTrain_CS\022\022\n"
  "\nherothisid\030\001 \001(\t\022\022\n\ntraintimes\030\002 \001(\r\022\022\n"
  "\nisusewater\030\003 \001(\010\"G\n\023MSG_RetHeroTrain_SC"
  "\022\017\n\007errcode\030\001 \001(\r\022\037\n\013herocurinfo\030\002 \001(\0132\n"
  ".hero.Hero\"@\n\030MSG_ReqLockUnlockHero_CS\022\022"
  "\n\nherothisid\030\001 \001(\t\022\020\n\010locktype\030\002 \001(\r\"Q\n\030"
  "MSG_RetLockUnlockHero_SC\022\017\n\007retcode\030\001 \001("
  "\r\022\022\n\nherothisid\030\002 \001(\t\022\020\n\010locktype\030\003 \001(\r\""
  "Y\n\032MSG_ReqLevelupHeroSkill_CS\022\022\n\nherothi"
  "sid\030\001 \001(\t\022\023\n\013skillbaseid\030\002 \001(\r\022\022\n\nskilll"
  "evel\030\003 \001(\r\"~\n\032MSG_RetLevelupHeroSkill_SC"
  "\022\017\n\007retcode\030\001 \001(\r\022\022\n\nherothisid\030\002 \001(\t\022\023\n"
  "\013skillbaseid\030\003 \001(\r\022\022\n\nskilllevel\030\004 \001(\r\022\022"
  "\n\nskillorgid\030\005 \001(\r\"8\n\030MSG_notifyRefreshH"
  "ero_SC\022\034\n\010heroinfo\030\001 \001(\0132\n.hero.Hero\">\n\022"
  "MSG_ReqRiseStar_CS\022\024\n\014sourcethisid\030\001 \001(\t"
  "\022\022\n\ncostthisid\030\002 \001(\t\"O\n\022MSG_RetRiseStar_"
  "SC\022\017\n\007retcode\030\001 \001(\r\022\024\n\014sourcethisid\030\002 \001("
  "\t\022\022\n\ncostthisid\030\003 \001(\t\"1\n\007DnaItem\022\n\n\002id\030\001"
  " \001(\r\022\r\n\005level\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\"S\n\022MSG_"
  "DnaBagInfo_CSC\022\034\n\005datas\030\001 \003(\0132\r.hero.Dna"
  "Item\022\037\n\010cur_page\030\002 \001(\0162\r.hero.DNAPage\"l\n"
  "\004Hole\022\013\n\003pos\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\r\n\005level\030"
  "\003 \001(\r\022\033\n\004page\030\004 \001(\0162\r.hero.DNAPage\022\037\n\004ty"
  "pe\030\005 \001(\0162\021.hero.DNASlotType\"\240\001\n\023MSG_DnaP"
  "ageInfo_CSC\022\033\n\004page\030\001 \001(\0162\r.hero.DNAPage"
  "\022\035\n\tatt_holes\030\002 \003(\0132\n.hero.Hole\022\035\n\tdef_h"
  "oles\030\003 \003(\0132\n.hero.Hole\022\026\n\016att_opened_num"
  "\030\004 \001(\r\022\026\n\016def_opened_num\030\005 \001(\r\"z\n\022MSG_Re"
  "qPutOnDna_CS\022\033\n\004page\030\001 \001(\0162\r.hero.DNAPag"
  "e\022\013\n\003pos\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\022\r\n\005level\030\004 \001("
  "\r\022\037\n\004type\030\005 \001(\0162\021.hero.DNASlotType\"`\n\023MS"
  "G_ReqPutOffDna_CS\022\033\n\004page\030\001 \001(\0162\r.hero.D"
  "NAPage\022\013\n\003pos\030\002 \001(\r\022\037\n\004type\030\003 \001(\0162\021.hero"
  ".DNASlotType\"n\n\024MSG_ReqCombineDna_CS\022\033\n\004"
  "page\030\001 \001(\0162\r.hero.DNAPage\022\013\n\003pos\030\002 \001(\r\022\037"
  "\n\004type\030\003 \001(\0162\021.hero.DNASlotType\022\013\n\003num\030\004"
  " \001(\r\"9\n\032MSG_ReqChangeCurDnaPage_CS\022\033\n\004pa"
  "ge\030\001 \001(\0162\r.hero.DNAPage\"C\n\031MSG_ReqCombin"
  "eDnaInBag_CS\022\n\n\002id\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022"
  "\013\n\003num\030\003 \001(\r\"Q\n\021MSG_ReqBuySlot_SC\022\033\n\004pag"
  "e\030\001 \001(\0162\r.hero.DNAPage\022\037\n\004type\030\002 \001(\0162\021.h"
  "ero.DNASlotType\"j\n\031MSG_ResponseSlotOpene"
  "d_SC\022\033\n\004page\030\001 \001(\0162\r.hero.DNAPage\022\037\n\004typ"
  "e\030\002 \001(\0162\021.hero.DNASlotType\022\017\n\007cur_num\030\003 "
  "\001(\r\"B\n\026MSG_AllDnaPageInfo_CSC\022(\n\005pages\030\001"
  " \003(\0132\031.hero.MSG_DnaPageInfo_CSC\"L\n\023MSG_S"
  "etMainHero_CSC\022\022\n\nherothisid\030\001 \001(\004\022\016\n\006op"
  "code\030\002 \001(\r\022\021\n\terrorcode\030\003 \001(\r\"*\n\tHeroSco"
  "re\022\016\n\006thisid\030\001 \001(\004\022\r\n\005score\030\002 \001(\r\"\?\n\034MSG"
  "_NotifyClientHeroScore_SC\022\037\n\006scores\030\001 \003("
  "\0132\017.hero.HeroScore*H\n\007DNAPage\022\010\n\004NONE\020\000\022"
  "\t\n\005PAGE1\020\001\022\t\n\005PAGE2\020\002\022\t\n\005PAGE3\020\003\022\t\n\005PAGE"
  "4\020\004\022\007\n\003MAX\020\005*(\n\013DNASlotType\022\007\n\003ATT\020\000\022\007\n\003"
  "DEF\020\001\022\007\n\003ALL\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hero_2eproto_deps[2] = {
  &::descriptor_table_avatar_2eproto,
  &::descriptor_table_object_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_hero_2eproto_sccs[35] = {
  &scc_info_DnaItem_hero_2eproto.base,
  &scc_info_Hero_hero_2eproto.base,
  &scc_info_HeroAvatar_hero_2eproto.base,
  &scc_info_HeroEvolution_hero_2eproto.base,
  &scc_info_HeroScore_hero_2eproto.base,
  &scc_info_HeroShow_hero_2eproto.base,
  &scc_info_HeroSkill_hero_2eproto.base,
  &scc_info_HeroSkillItem_hero_2eproto.base,
  &scc_info_HeroTrain_hero_2eproto.base,
  &scc_info_Hole_hero_2eproto.base,
  &scc_info_MSG_AllDnaPageInfo_CSC_hero_2eproto.base,
  &scc_info_MSG_DnaBagInfo_CSC_hero_2eproto.base,
  &scc_info_MSG_DnaPageInfo_CSC_hero_2eproto.base,
  &scc_info_MSG_NotifyAllHeros_SC_hero_2eproto.base,
  &scc_info_MSG_NotifyClientHeroScore_SC_hero_2eproto.base,
  &scc_info_MSG_NotifyHeroChange_SC_hero_2eproto.base,
  &scc_info_MSG_ReqBuySlot_SC_hero_2eproto.base,
  &scc_info_MSG_ReqChangeCurDnaPage_CS_hero_2eproto.base,
  &scc_info_MSG_ReqCombineDnaInBag_CS_hero_2eproto.base,
  &scc_info_MSG_ReqCombineDna_CS_hero_2eproto.base,
  &scc_info_MSG_ReqHeroTrain_CS_hero_2eproto.base,
  &scc_info_MSG_ReqLevelupHeroSkill_CS_hero_2eproto.base,
  &scc_info_MSG_ReqLockUnlockHero_CS_hero_2eproto.base,
  &scc_info_MSG_ReqPutOffDna_CS_hero_2eproto.base,
  &scc_info_MSG_ReqPutOnDna_CS_hero_2eproto.base,
  &scc_info_MSG_ReqRiseStar_CS_hero_2eproto.base,
  &scc_info_MSG_ReqSwitchHero_CS_hero_2eproto.base,
  &scc_info_MSG_ResponseSlotOpened_SC_hero_2eproto.base,
  &scc_info_MSG_RetHeroTrain_SC_hero_2eproto.base,
  &scc_info_MSG_RetLevelupHeroSkill_SC_hero_2eproto.base,
  &scc_info_MSG_RetLockUnlockHero_SC_hero_2eproto.base,
  &scc_info_MSG_RetRiseStar_SC_hero_2eproto.base,
  &scc_info_MSG_RetSwitchHero_SC_hero_2eproto.base,
  &scc_info_MSG_SetMainHero_CSC_hero_2eproto.base,
  &scc_info_MSG_notifyRefreshHero_SC_hero_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hero_2eproto_once;
static bool descriptor_table_hero_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hero_2eproto = {
  &descriptor_table_hero_2eproto_initialized, descriptor_table_protodef_hero_2eproto, "hero.proto", 3334,
  &descriptor_table_hero_2eproto_once, descriptor_table_hero_2eproto_sccs, descriptor_table_hero_2eproto_deps, 35, 2,
  schemas, file_default_instances, TableStruct_hero_2eproto::offsets,
  file_level_metadata_hero_2eproto, 35, file_level_enum_descriptors_hero_2eproto, file_level_service_descriptors_hero_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_hero_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_hero_2eproto)), true);
namespace hero {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DNAPage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hero_2eproto);
  return file_level_enum_descriptors_hero_2eproto[0];
}
bool DNAPage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DNASlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_hero_2eproto);
  return file_level_enum_descriptors_hero_2eproto[1];
}
bool DNASlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Hero::InitAsDefaultInstance() {
  ::hero::_Hero_default_instance_._instance.get_mutable()->train_ = const_cast< ::hero::HeroTrain*>(
      ::hero::HeroTrain::internal_default_instance());
  ::hero::_Hero_default_instance_._instance.get_mutable()->skill_ = const_cast< ::hero::HeroSkill*>(
      ::hero::HeroSkill::internal_default_instance());
  ::hero::_Hero_default_instance_._instance.get_mutable()->avatar_ = const_cast< ::hero::HeroAvatar*>(
      ::hero::HeroAvatar::internal_default_instance());
  ::hero::_Hero_default_instance_._instance.get_mutable()->evolution_ = const_cast< ::hero::HeroEvolution*>(
      ::hero::HeroEvolution::internal_default_instance());
  ::hero::_Hero_default_instance_._instance.get_mutable()->show_ = const_cast< ::hero::HeroShow*>(
      ::hero::HeroShow::internal_default_instance());
  ::hero::_Hero_default_instance_._instance.get_mutable()->cardpack_ = const_cast< ::Obj::CardPackInfo*>(
      ::Obj::CardPackInfo::internal_default_instance());
}
class Hero::_Internal {
 public:
  using HasBits = decltype(std::declval<Hero>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_star(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bind(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_runepageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::hero::HeroTrain& train(const Hero* msg);
  static void set_has_train(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hero::HeroSkill& skill(const Hero* msg);
  static void set_has_skill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hero::HeroAvatar& avatar(const Hero* msg);
  static void set_has_avatar(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hero::HeroEvolution& evolution(const Hero* msg);
  static void set_has_evolution(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hero::HeroShow& show(const Hero* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Obj::CardPackInfo& cardpack(const Hero* msg);
  static void set_has_cardpack(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tradetime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_self_created(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::hero::HeroTrain&
Hero::_Internal::train(const Hero* msg) {
  return *msg->train_;
}
const ::hero::HeroSkill&
Hero::_Internal::skill(const Hero* msg) {
  return *msg->skill_;
}
const ::hero::HeroAvatar&
Hero::_Internal::avatar(const Hero* msg) {
  return *msg->avatar_;
}
const ::hero::HeroEvolution&
Hero::_Internal::evolution(const Hero* msg) {
  return *msg->evolution_;
}
const ::hero::HeroShow&
Hero::_Internal::show(const Hero* msg) {
  return *msg->show_;
}
const ::Obj::CardPackInfo&
Hero::_Internal::cardpack(const Hero* msg) {
  return *msg->cardpack_;
}
void Hero::clear_cardpack() {
  if (cardpack_ != nullptr) cardpack_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
Hero::Hero()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.Hero)
}
Hero::Hero(const Hero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  if (from._internal_has_train()) {
    train_ = new ::hero::HeroTrain(*from.train_);
  } else {
    train_ = nullptr;
  }
  if (from._internal_has_skill()) {
    skill_ = new ::hero::HeroSkill(*from.skill_);
  } else {
    skill_ = nullptr;
  }
  if (from._internal_has_avatar()) {
    avatar_ = new ::hero::HeroAvatar(*from.avatar_);
  } else {
    avatar_ = nullptr;
  }
  if (from._internal_has_evolution()) {
    evolution_ = new ::hero::HeroEvolution(*from.evolution_);
  } else {
    evolution_ = nullptr;
  }
  if (from._internal_has_show()) {
    show_ = new ::hero::HeroShow(*from.show_);
  } else {
    show_ = nullptr;
  }
  if (from._internal_has_cardpack()) {
    cardpack_ = new ::Obj::CardPackInfo(*from.cardpack_);
  } else {
    cardpack_ = nullptr;
  }
  ::memcpy(&baseid_, &from.baseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&self_created_) -
    reinterpret_cast<char*>(&baseid_)) + sizeof(self_created_));
  // @@protoc_insertion_point(copy_constructor:hero.Hero)
}

void Hero::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hero_hero_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&train_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&self_created_) -
      reinterpret_cast<char*>(&train_)) + sizeof(self_created_));
}

Hero::~Hero() {
  // @@protoc_insertion_point(destructor:hero.Hero)
  SharedDtor();
}

void Hero::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete train_;
  if (this != internal_default_instance()) delete skill_;
  if (this != internal_default_instance()) delete avatar_;
  if (this != internal_default_instance()) delete evolution_;
  if (this != internal_default_instance()) delete show_;
  if (this != internal_default_instance()) delete cardpack_;
}

void Hero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hero& Hero::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hero_hero_2eproto.base);
  return *internal_default_instance();
}


void Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.Hero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      thisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(train_ != nullptr);
      train_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(skill_ != nullptr);
      skill_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(avatar_ != nullptr);
      avatar_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(evolution_ != nullptr);
      evolution_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(show_ != nullptr);
      show_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(cardpack_ != nullptr);
      cardpack_->Clear();
    }
  }
  baseid_ = 0u;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&star_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exp_) -
        reinterpret_cast<char*>(&star_)) + sizeof(exp_));
  }
  self_created_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Hero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.Hero.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 baseid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 star = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_star(&has_bits);
          star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bind(&has_bits);
          bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lock(&has_bits);
          lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 runepageid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_runepageid(&has_bits);
          runepageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.HeroTrain train = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_train(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.HeroSkill skill = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_skill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.HeroAvatar avatar = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_avatar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.HeroEvolution evolution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_evolution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.HeroShow show = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_show(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Obj.CardPackInfo cardpack = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardpack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tradetime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tradetime(&has_bits);
          tradetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 exp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool self_created = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_self_created(&has_bits);
          self_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.Hero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.Hero.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  // optional uint32 baseid = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_baseid(), target);
  }

  // optional uint32 star = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_star(), target);
  }

  // optional uint32 bind = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bind(), target);
  }

  // optional uint32 lock = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lock(), target);
  }

  // optional uint32 runepageid = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_runepageid(), target);
  }

  // optional uint32 score = 7;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_score(), target);
  }

  // optional .hero.HeroTrain train = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::train(this), target, stream);
  }

  // optional .hero.HeroSkill skill = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::skill(this), target, stream);
  }

  // optional .hero.HeroAvatar avatar = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::avatar(this), target, stream);
  }

  // optional .hero.HeroEvolution evolution = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::evolution(this), target, stream);
  }

  // optional .hero.HeroShow show = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::show(this), target, stream);
  }

  // optional .Obj.CardPackInfo cardpack = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::cardpack(this), target, stream);
  }

  // optional uint32 tradetime = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tradetime(), target);
  }

  // optional uint32 level = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_level(), target);
  }

  // optional uint64 exp = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_exp(), target);
  }

  // optional bool self_created = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_self_created(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.Hero)
  return target;
}

size_t Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.Hero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_thisid());
    }

    // optional .hero.HeroTrain train = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *train_);
    }

    // optional .hero.HeroSkill skill = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *skill_);
    }

    // optional .hero.HeroAvatar avatar = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avatar_);
    }

    // optional .hero.HeroEvolution evolution = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *evolution_);
    }

    // optional .hero.HeroShow show = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_);
    }

    // optional .Obj.CardPackInfo cardpack = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cardpack_);
    }

    // optional uint32 baseid = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_baseid());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 star = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_star());
    }

    // optional uint32 bind = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bind());
    }

    // optional uint32 lock = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lock());
    }

    // optional uint32 runepageid = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_runepageid());
    }

    // optional uint32 score = 7;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional uint32 tradetime = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tradetime());
    }

    // optional uint32 level = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint64 exp = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_exp());
    }

  }
  // optional bool self_created = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  const Hero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.Hero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.Hero)
    MergeFrom(*source);
  }
}

void Hero::MergeFrom(const Hero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_train()->::hero::HeroTrain::MergeFrom(from._internal_train());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_skill()->::hero::HeroSkill::MergeFrom(from._internal_skill());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_avatar()->::hero::HeroAvatar::MergeFrom(from._internal_avatar());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_evolution()->::hero::HeroEvolution::MergeFrom(from._internal_evolution());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_show()->::hero::HeroShow::MergeFrom(from._internal_show());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_cardpack()->::Obj::CardPackInfo::MergeFrom(from._internal_cardpack());
    }
    if (cached_has_bits & 0x00000080u) {
      baseid_ = from.baseid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      star_ = from.star_;
    }
    if (cached_has_bits & 0x00000200u) {
      bind_ = from.bind_;
    }
    if (cached_has_bits & 0x00000400u) {
      lock_ = from.lock_;
    }
    if (cached_has_bits & 0x00000800u) {
      runepageid_ = from.runepageid_;
    }
    if (cached_has_bits & 0x00001000u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00002000u) {
      tradetime_ = from.tradetime_;
    }
    if (cached_has_bits & 0x00004000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00008000u) {
      exp_ = from.exp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_self_created(from._internal_self_created());
  }
}

void Hero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hero::CopyFrom(const Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hero::IsInitialized() const {
  return true;
}

void Hero::InternalSwap(Hero* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(train_, other->train_);
  swap(skill_, other->skill_);
  swap(avatar_, other->avatar_);
  swap(evolution_, other->evolution_);
  swap(show_, other->show_);
  swap(cardpack_, other->cardpack_);
  swap(baseid_, other->baseid_);
  swap(star_, other->star_);
  swap(bind_, other->bind_);
  swap(lock_, other->lock_);
  swap(runepageid_, other->runepageid_);
  swap(score_, other->score_);
  swap(tradetime_, other->tradetime_);
  swap(level_, other->level_);
  swap(exp_, other->exp_);
  swap(self_created_, other->self_created_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeroShow::InitAsDefaultInstance() {
}
class HeroShow::_Internal {
 public:
  using HasBits = decltype(std::declval<HeroShow>()._has_bits_);
  static void set_has_facestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hairstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bodystyle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_haircolor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

HeroShow::HeroShow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.HeroShow)
}
HeroShow::HeroShow(const HeroShow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&facestyle_, &from.facestyle_,
    static_cast<size_t>(reinterpret_cast<char*>(&antenna_) -
    reinterpret_cast<char*>(&facestyle_)) + sizeof(antenna_));
  // @@protoc_insertion_point(copy_constructor:hero.HeroShow)
}

void HeroShow::SharedCtor() {
  ::memset(&facestyle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&facestyle_)) + sizeof(antenna_));
}

HeroShow::~HeroShow() {
  // @@protoc_insertion_point(destructor:hero.HeroShow)
  SharedDtor();
}

void HeroShow::SharedDtor() {
}

void HeroShow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeroShow& HeroShow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeroShow_hero_2eproto.base);
  return *internal_default_instance();
}


void HeroShow::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.HeroShow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&facestyle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&antenna_) -
        reinterpret_cast<char*>(&facestyle_)) + sizeof(antenna_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HeroShow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 facestyle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_facestyle(&has_bits);
          facestyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hairstyle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hairstyle(&has_bits);
          hairstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bodystyle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bodystyle(&has_bits);
          bodystyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 haircolor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_haircolor(&has_bits);
          haircolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 antenna = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_antenna(&has_bits);
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeroShow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.HeroShow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 facestyle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_facestyle(), target);
  }

  // optional uint32 hairstyle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hairstyle(), target);
  }

  // optional uint32 bodystyle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bodystyle(), target);
  }

  // optional uint32 haircolor = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_haircolor(), target);
  }

  // optional uint32 antenna = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_antenna(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.HeroShow)
  return target;
}

size_t HeroShow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.HeroShow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 facestyle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_facestyle());
    }

    // optional uint32 hairstyle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hairstyle());
    }

    // optional uint32 bodystyle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bodystyle());
    }

    // optional uint32 haircolor = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_haircolor());
    }

    // optional uint32 antenna = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_antenna());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeroShow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.HeroShow)
  GOOGLE_DCHECK_NE(&from, this);
  const HeroShow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeroShow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.HeroShow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.HeroShow)
    MergeFrom(*source);
  }
}

void HeroShow::MergeFrom(const HeroShow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.HeroShow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      facestyle_ = from.facestyle_;
    }
    if (cached_has_bits & 0x00000002u) {
      hairstyle_ = from.hairstyle_;
    }
    if (cached_has_bits & 0x00000004u) {
      bodystyle_ = from.bodystyle_;
    }
    if (cached_has_bits & 0x00000008u) {
      haircolor_ = from.haircolor_;
    }
    if (cached_has_bits & 0x00000010u) {
      antenna_ = from.antenna_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeroShow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.HeroShow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroShow::CopyFrom(const HeroShow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.HeroShow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroShow::IsInitialized() const {
  return true;
}

void HeroShow::InternalSwap(HeroShow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(facestyle_, other->facestyle_);
  swap(hairstyle_, other->hairstyle_);
  swap(bodystyle_, other->bodystyle_);
  swap(haircolor_, other->haircolor_);
  swap(antenna_, other->antenna_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroShow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeroTrain::InitAsDefaultInstance() {
}
class HeroTrain::_Internal {
 public:
  using HasBits = decltype(std::declval<HeroTrain>()._has_bits_);
  static void set_has_pdamage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mdamage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pdefence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mdefence(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

HeroTrain::HeroTrain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.HeroTrain)
}
HeroTrain::HeroTrain(const HeroTrain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pdamage_, &from.pdamage_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxhp_) -
    reinterpret_cast<char*>(&pdamage_)) + sizeof(maxhp_));
  // @@protoc_insertion_point(copy_constructor:hero.HeroTrain)
}

void HeroTrain::SharedCtor() {
  ::memset(&pdamage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxhp_) -
      reinterpret_cast<char*>(&pdamage_)) + sizeof(maxhp_));
}

HeroTrain::~HeroTrain() {
  // @@protoc_insertion_point(destructor:hero.HeroTrain)
  SharedDtor();
}

void HeroTrain::SharedDtor() {
}

void HeroTrain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeroTrain& HeroTrain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeroTrain_hero_2eproto.base);
  return *internal_default_instance();
}


void HeroTrain::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.HeroTrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&pdamage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxhp_) -
        reinterpret_cast<char*>(&pdamage_)) + sizeof(maxhp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HeroTrain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pdamage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pdamage(&has_bits);
          pdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mdamage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mdamage(&has_bits);
          mdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdefence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pdefence(&has_bits);
          pdefence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mdefence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mdefence(&has_bits);
          mdefence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeroTrain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.HeroTrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pdamage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pdamage(), target);
  }

  // optional uint32 mdamage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mdamage(), target);
  }

  // optional uint32 pdefence = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pdefence(), target);
  }

  // optional uint32 mdefence = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mdefence(), target);
  }

  // optional uint32 maxhp = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.HeroTrain)
  return target;
}

size_t HeroTrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.HeroTrain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 pdamage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdamage());
    }

    // optional uint32 mdamage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mdamage());
    }

    // optional uint32 pdefence = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdefence());
    }

    // optional uint32 mdefence = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mdefence());
    }

    // optional uint32 maxhp = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeroTrain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.HeroTrain)
  GOOGLE_DCHECK_NE(&from, this);
  const HeroTrain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeroTrain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.HeroTrain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.HeroTrain)
    MergeFrom(*source);
  }
}

void HeroTrain::MergeFrom(const HeroTrain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.HeroTrain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pdamage_ = from.pdamage_;
    }
    if (cached_has_bits & 0x00000002u) {
      mdamage_ = from.mdamage_;
    }
    if (cached_has_bits & 0x00000004u) {
      pdefence_ = from.pdefence_;
    }
    if (cached_has_bits & 0x00000008u) {
      mdefence_ = from.mdefence_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxhp_ = from.maxhp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeroTrain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.HeroTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroTrain::CopyFrom(const HeroTrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.HeroTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroTrain::IsInitialized() const {
  return true;
}

void HeroTrain::InternalSwap(HeroTrain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pdamage_, other->pdamage_);
  swap(mdamage_, other->mdamage_);
  swap(pdefence_, other->pdefence_);
  swap(mdefence_, other->mdefence_);
  swap(maxhp_, other->maxhp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroTrain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeroSkillItem::InitAsDefaultInstance() {
}
class HeroSkillItem::_Internal {
 public:
  using HasBits = decltype(std::declval<HeroSkillItem>()._has_bits_);
  static void set_has_skillbaseid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skilllevel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_skillorgid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HeroSkillItem::HeroSkillItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.HeroSkillItem)
}
HeroSkillItem::HeroSkillItem(const HeroSkillItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skillbaseid_, &from.skillbaseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillorgid_) -
    reinterpret_cast<char*>(&skillbaseid_)) + sizeof(skillorgid_));
  // @@protoc_insertion_point(copy_constructor:hero.HeroSkillItem)
}

void HeroSkillItem::SharedCtor() {
  ::memset(&skillbaseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillorgid_) -
      reinterpret_cast<char*>(&skillbaseid_)) + sizeof(skillorgid_));
}

HeroSkillItem::~HeroSkillItem() {
  // @@protoc_insertion_point(destructor:hero.HeroSkillItem)
  SharedDtor();
}

void HeroSkillItem::SharedDtor() {
}

void HeroSkillItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeroSkillItem& HeroSkillItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeroSkillItem_hero_2eproto.base);
  return *internal_default_instance();
}


void HeroSkillItem::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.HeroSkillItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&skillbaseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skillorgid_) -
        reinterpret_cast<char*>(&skillbaseid_)) + sizeof(skillorgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HeroSkillItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 skillbaseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_skillbaseid(&has_bits);
          skillbaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skilllevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_skilllevel(&has_bits);
          skilllevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skillorgid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_skillorgid(&has_bits);
          skillorgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeroSkillItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.HeroSkillItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 skillbaseid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skillbaseid(), target);
  }

  // optional uint32 skilllevel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skilllevel(), target);
  }

  // optional uint32 skillorgid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skillorgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.HeroSkillItem)
  return target;
}

size_t HeroSkillItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.HeroSkillItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 skillbaseid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skillbaseid());
    }

    // optional uint32 skilllevel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skilllevel());
    }

    // optional uint32 skillorgid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skillorgid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeroSkillItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.HeroSkillItem)
  GOOGLE_DCHECK_NE(&from, this);
  const HeroSkillItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeroSkillItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.HeroSkillItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.HeroSkillItem)
    MergeFrom(*source);
  }
}

void HeroSkillItem::MergeFrom(const HeroSkillItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.HeroSkillItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      skillbaseid_ = from.skillbaseid_;
    }
    if (cached_has_bits & 0x00000002u) {
      skilllevel_ = from.skilllevel_;
    }
    if (cached_has_bits & 0x00000004u) {
      skillorgid_ = from.skillorgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeroSkillItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.HeroSkillItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroSkillItem::CopyFrom(const HeroSkillItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.HeroSkillItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroSkillItem::IsInitialized() const {
  return true;
}

void HeroSkillItem::InternalSwap(HeroSkillItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(skillbaseid_, other->skillbaseid_);
  swap(skilllevel_, other->skilllevel_);
  swap(skillorgid_, other->skillorgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroSkillItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeroSkill::InitAsDefaultInstance() {
}
class HeroSkill::_Internal {
 public:
  using HasBits = decltype(std::declval<HeroSkill>()._has_bits_);
};

HeroSkill::HeroSkill()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.HeroSkill)
}
HeroSkill::HeroSkill(const HeroSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      skill_(from.skill_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hero.HeroSkill)
}

void HeroSkill::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeroSkill_hero_2eproto.base);
}

HeroSkill::~HeroSkill() {
  // @@protoc_insertion_point(destructor:hero.HeroSkill)
  SharedDtor();
}

void HeroSkill::SharedDtor() {
}

void HeroSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeroSkill& HeroSkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeroSkill_hero_2eproto.base);
  return *internal_default_instance();
}


void HeroSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.HeroSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HeroSkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hero.HeroSkillItem skill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skill(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeroSkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.HeroSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hero.HeroSkillItem skill = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_skill_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_skill(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.HeroSkill)
  return target;
}

size_t HeroSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.HeroSkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hero.HeroSkillItem skill = 1;
  total_size += 1UL * this->_internal_skill_size();
  for (const auto& msg : this->skill_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeroSkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.HeroSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const HeroSkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeroSkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.HeroSkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.HeroSkill)
    MergeFrom(*source);
  }
}

void HeroSkill::MergeFrom(const HeroSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.HeroSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_.MergeFrom(from.skill_);
}

void HeroSkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.HeroSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroSkill::CopyFrom(const HeroSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.HeroSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroSkill::IsInitialized() const {
  return true;
}

void HeroSkill::InternalSwap(HeroSkill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  skill_.InternalSwap(&other->skill_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroSkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeroAvatar::InitAsDefaultInstance() {
}
class HeroAvatar::_Internal {
 public:
  using HasBits = decltype(std::declval<HeroAvatar>()._has_bits_);
  static void set_has_attravatar(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activeavatar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transkill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void HeroAvatar::clear_equavatars() {
  equavatars_.Clear();
}
HeroAvatar::HeroAvatar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.HeroAvatar)
}
HeroAvatar::HeroAvatar(const HeroAvatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      avatars_(from.avatars_),
      equavatars_(from.equavatars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&attravatar_, &from.attravatar_,
    static_cast<size_t>(reinterpret_cast<char*>(&transkill_) -
    reinterpret_cast<char*>(&attravatar_)) + sizeof(transkill_));
  // @@protoc_insertion_point(copy_constructor:hero.HeroAvatar)
}

void HeroAvatar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeroAvatar_hero_2eproto.base);
  ::memset(&attravatar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transkill_) -
      reinterpret_cast<char*>(&attravatar_)) + sizeof(transkill_));
}

HeroAvatar::~HeroAvatar() {
  // @@protoc_insertion_point(destructor:hero.HeroAvatar)
  SharedDtor();
}

void HeroAvatar::SharedDtor() {
}

void HeroAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeroAvatar& HeroAvatar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeroAvatar_hero_2eproto.base);
  return *internal_default_instance();
}


void HeroAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.HeroAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatars_.Clear();
  equavatars_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&attravatar_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transkill_) -
        reinterpret_cast<char*>(&attravatar_)) + sizeof(transkill_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HeroAvatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 avatars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_avatars(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_avatars(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .avatar.AvatarPair equAvatars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equavatars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 attrAvatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_attravatar(&has_bits);
          attravatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 activeAvatar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_activeavatar(&has_bits);
          activeavatar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tranSkill = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_transkill(&has_bits);
          transkill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeroAvatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.HeroAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 avatars = 1;
  for (int i = 0, n = this->_internal_avatars_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_avatars(i), target);
  }

  // repeated .avatar.AvatarPair equAvatars = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equavatars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_equavatars(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 attrAvatar = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_attravatar(), target);
  }

  // optional uint32 activeAvatar = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_activeavatar(), target);
  }

  // optional uint32 tranSkill = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_transkill(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.HeroAvatar)
  return target;
}

size_t HeroAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.HeroAvatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 avatars = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->avatars_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_avatars_size());
    total_size += data_size;
  }

  // repeated .avatar.AvatarPair equAvatars = 2;
  total_size += 1UL * this->_internal_equavatars_size();
  for (const auto& msg : this->equavatars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 attrAvatar = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attravatar());
    }

    // optional uint32 activeAvatar = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_activeavatar());
    }

    // optional uint32 tranSkill = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_transkill());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeroAvatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.HeroAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const HeroAvatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeroAvatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.HeroAvatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.HeroAvatar)
    MergeFrom(*source);
  }
}

void HeroAvatar::MergeFrom(const HeroAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.HeroAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatars_.MergeFrom(from.avatars_);
  equavatars_.MergeFrom(from.equavatars_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      attravatar_ = from.attravatar_;
    }
    if (cached_has_bits & 0x00000002u) {
      activeavatar_ = from.activeavatar_;
    }
    if (cached_has_bits & 0x00000004u) {
      transkill_ = from.transkill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeroAvatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.HeroAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroAvatar::CopyFrom(const HeroAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.HeroAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroAvatar::IsInitialized() const {
  return true;
}

void HeroAvatar::InternalSwap(HeroAvatar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  avatars_.InternalSwap(&other->avatars_);
  equavatars_.InternalSwap(&other->equavatars_);
  swap(attravatar_, other->attravatar_);
  swap(activeavatar_, other->activeavatar_);
  swap(transkill_, other->transkill_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroAvatar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeroEvolution::InitAsDefaultInstance() {
}
class HeroEvolution::_Internal {
 public:
  using HasBits = decltype(std::declval<HeroEvolution>()._has_bits_);
};

HeroEvolution::HeroEvolution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.HeroEvolution)
}
HeroEvolution::HeroEvolution(const HeroEvolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      evolutions_(from.evolutions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hero.HeroEvolution)
}

void HeroEvolution::SharedCtor() {
}

HeroEvolution::~HeroEvolution() {
  // @@protoc_insertion_point(destructor:hero.HeroEvolution)
  SharedDtor();
}

void HeroEvolution::SharedDtor() {
}

void HeroEvolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeroEvolution& HeroEvolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeroEvolution_hero_2eproto.base);
  return *internal_default_instance();
}


void HeroEvolution::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.HeroEvolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  evolutions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HeroEvolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 evolutions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_evolutions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_evolutions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeroEvolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.HeroEvolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 evolutions = 1;
  for (int i = 0, n = this->_internal_evolutions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_evolutions(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.HeroEvolution)
  return target;
}

size_t HeroEvolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.HeroEvolution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 evolutions = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->evolutions_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_evolutions_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeroEvolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.HeroEvolution)
  GOOGLE_DCHECK_NE(&from, this);
  const HeroEvolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeroEvolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.HeroEvolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.HeroEvolution)
    MergeFrom(*source);
  }
}

void HeroEvolution::MergeFrom(const HeroEvolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.HeroEvolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  evolutions_.MergeFrom(from.evolutions_);
}

void HeroEvolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.HeroEvolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroEvolution::CopyFrom(const HeroEvolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.HeroEvolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroEvolution::IsInitialized() const {
  return true;
}

void HeroEvolution::InternalSwap(HeroEvolution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  evolutions_.InternalSwap(&other->evolutions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroEvolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSwitchHero_CS::InitAsDefaultInstance() {
}
class MSG_ReqSwitchHero_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSwitchHero_CS>()._has_bits_);
  static void set_has_toherothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqSwitchHero_CS::MSG_ReqSwitchHero_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqSwitchHero_CS)
}
MSG_ReqSwitchHero_CS::MSG_ReqSwitchHero_CS(const MSG_ReqSwitchHero_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  toherothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_toherothisid()) {
    toherothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toherothisid_);
  }
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqSwitchHero_CS)
}

void MSG_ReqSwitchHero_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqSwitchHero_CS_hero_2eproto.base);
  toherothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqSwitchHero_CS::~MSG_ReqSwitchHero_CS() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqSwitchHero_CS)
  SharedDtor();
}

void MSG_ReqSwitchHero_CS::SharedDtor() {
  toherothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqSwitchHero_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSwitchHero_CS& MSG_ReqSwitchHero_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSwitchHero_CS_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSwitchHero_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqSwitchHero_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    toherothisid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSwitchHero_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string toherothisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_toherothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_ReqSwitchHero_CS.toherothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSwitchHero_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqSwitchHero_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string toherothisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_toherothisid().data(), static_cast<int>(this->_internal_toherothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_ReqSwitchHero_CS.toherothisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_toherothisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqSwitchHero_CS)
  return target;
}

size_t MSG_ReqSwitchHero_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqSwitchHero_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string toherothisid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_toherothisid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSwitchHero_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqSwitchHero_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSwitchHero_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSwitchHero_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqSwitchHero_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqSwitchHero_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSwitchHero_CS::MergeFrom(const MSG_ReqSwitchHero_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqSwitchHero_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_toherothisid()) {
    _has_bits_[0] |= 0x00000001u;
    toherothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toherothisid_);
  }
}

void MSG_ReqSwitchHero_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqSwitchHero_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSwitchHero_CS::CopyFrom(const MSG_ReqSwitchHero_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqSwitchHero_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSwitchHero_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSwitchHero_CS::InternalSwap(MSG_ReqSwitchHero_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  toherothisid_.Swap(&other->toherothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSwitchHero_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetSwitchHero_SC::InitAsDefaultInstance() {
}
class MSG_RetSwitchHero_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetSwitchHero_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_curhero(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetSwitchHero_SC::MSG_RetSwitchHero_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_RetSwitchHero_SC)
}
MSG_RetSwitchHero_SC::MSG_RetSwitchHero_SC(const MSG_RetSwitchHero_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  curhero_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_curhero()) {
    curhero_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.curhero_);
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:hero.MSG_RetSwitchHero_SC)
}

void MSG_RetSwitchHero_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetSwitchHero_SC_hero_2eproto.base);
  curhero_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0u;
}

MSG_RetSwitchHero_SC::~MSG_RetSwitchHero_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_RetSwitchHero_SC)
  SharedDtor();
}

void MSG_RetSwitchHero_SC::SharedDtor() {
  curhero_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RetSwitchHero_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetSwitchHero_SC& MSG_RetSwitchHero_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetSwitchHero_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetSwitchHero_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_RetSwitchHero_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    curhero_.ClearNonDefaultToEmptyNoArena();
  }
  errcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetSwitchHero_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string curhero = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_curhero();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_RetSwitchHero_SC.curhero");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetSwitchHero_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_RetSwitchHero_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // optional string curhero = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_curhero().data(), static_cast<int>(this->_internal_curhero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_RetSwitchHero_SC.curhero");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_curhero(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_RetSwitchHero_SC)
  return target;
}

size_t MSG_RetSwitchHero_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_RetSwitchHero_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string curhero = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_curhero());
    }

    // optional uint32 errcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetSwitchHero_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_RetSwitchHero_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetSwitchHero_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetSwitchHero_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_RetSwitchHero_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_RetSwitchHero_SC)
    MergeFrom(*source);
  }
}

void MSG_RetSwitchHero_SC::MergeFrom(const MSG_RetSwitchHero_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_RetSwitchHero_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      curhero_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.curhero_);
    }
    if (cached_has_bits & 0x00000002u) {
      errcode_ = from.errcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetSwitchHero_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_RetSwitchHero_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetSwitchHero_SC::CopyFrom(const MSG_RetSwitchHero_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_RetSwitchHero_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetSwitchHero_SC::IsInitialized() const {
  return true;
}

void MSG_RetSwitchHero_SC::InternalSwap(MSG_RetSwitchHero_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  curhero_.Swap(&other->curhero_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetSwitchHero_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NotifyAllHeros_SC::InitAsDefaultInstance() {
}
class MSG_NotifyAllHeros_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NotifyAllHeros_SC>()._has_bits_);
};

MSG_NotifyAllHeros_SC::MSG_NotifyAllHeros_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_NotifyAllHeros_SC)
}
MSG_NotifyAllHeros_SC::MSG_NotifyAllHeros_SC(const MSG_NotifyAllHeros_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      heroinfo_(from.heroinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hero.MSG_NotifyAllHeros_SC)
}

void MSG_NotifyAllHeros_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_NotifyAllHeros_SC_hero_2eproto.base);
}

MSG_NotifyAllHeros_SC::~MSG_NotifyAllHeros_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_NotifyAllHeros_SC)
  SharedDtor();
}

void MSG_NotifyAllHeros_SC::SharedDtor() {
}

void MSG_NotifyAllHeros_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NotifyAllHeros_SC& MSG_NotifyAllHeros_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NotifyAllHeros_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_NotifyAllHeros_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_NotifyAllHeros_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heroinfo_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NotifyAllHeros_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hero.Hero heroinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_heroinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NotifyAllHeros_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_NotifyAllHeros_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hero.Hero heroinfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heroinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_heroinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_NotifyAllHeros_SC)
  return target;
}

size_t MSG_NotifyAllHeros_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_NotifyAllHeros_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hero.Hero heroinfo = 1;
  total_size += 1UL * this->_internal_heroinfo_size();
  for (const auto& msg : this->heroinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NotifyAllHeros_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_NotifyAllHeros_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NotifyAllHeros_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NotifyAllHeros_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_NotifyAllHeros_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_NotifyAllHeros_SC)
    MergeFrom(*source);
  }
}

void MSG_NotifyAllHeros_SC::MergeFrom(const MSG_NotifyAllHeros_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_NotifyAllHeros_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heroinfo_.MergeFrom(from.heroinfo_);
}

void MSG_NotifyAllHeros_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_NotifyAllHeros_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NotifyAllHeros_SC::CopyFrom(const MSG_NotifyAllHeros_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_NotifyAllHeros_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NotifyAllHeros_SC::IsInitialized() const {
  return true;
}

void MSG_NotifyAllHeros_SC::InternalSwap(MSG_NotifyAllHeros_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  heroinfo_.InternalSwap(&other->heroinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NotifyAllHeros_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NotifyHeroChange_SC::InitAsDefaultInstance() {
}
class MSG_NotifyHeroChange_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NotifyHeroChange_SC>()._has_bits_);
  static void set_has_changetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_NotifyHeroChange_SC::MSG_NotifyHeroChange_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_NotifyHeroChange_SC)
}
MSG_NotifyHeroChange_SC::MSG_NotifyHeroChange_SC(const MSG_NotifyHeroChange_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      herolist_(from.herolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  changetype_ = from.changetype_;
  // @@protoc_insertion_point(copy_constructor:hero.MSG_NotifyHeroChange_SC)
}

void MSG_NotifyHeroChange_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_NotifyHeroChange_SC_hero_2eproto.base);
  changetype_ = 0u;
}

MSG_NotifyHeroChange_SC::~MSG_NotifyHeroChange_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_NotifyHeroChange_SC)
  SharedDtor();
}

void MSG_NotifyHeroChange_SC::SharedDtor() {
}

void MSG_NotifyHeroChange_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NotifyHeroChange_SC& MSG_NotifyHeroChange_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NotifyHeroChange_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_NotifyHeroChange_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_NotifyHeroChange_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  herolist_.Clear();
  changetype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NotifyHeroChange_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 changetype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_changetype(&has_bits);
          changetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hero.Hero herolist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_herolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NotifyHeroChange_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_NotifyHeroChange_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 changetype = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_changetype(), target);
  }

  // repeated .hero.Hero herolist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_herolist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_herolist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_NotifyHeroChange_SC)
  return target;
}

size_t MSG_NotifyHeroChange_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_NotifyHeroChange_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hero.Hero herolist = 2;
  total_size += 1UL * this->_internal_herolist_size();
  for (const auto& msg : this->herolist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 changetype = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_changetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NotifyHeroChange_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_NotifyHeroChange_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NotifyHeroChange_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NotifyHeroChange_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_NotifyHeroChange_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_NotifyHeroChange_SC)
    MergeFrom(*source);
  }
}

void MSG_NotifyHeroChange_SC::MergeFrom(const MSG_NotifyHeroChange_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_NotifyHeroChange_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  herolist_.MergeFrom(from.herolist_);
  if (from._internal_has_changetype()) {
    _internal_set_changetype(from._internal_changetype());
  }
}

void MSG_NotifyHeroChange_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_NotifyHeroChange_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NotifyHeroChange_SC::CopyFrom(const MSG_NotifyHeroChange_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_NotifyHeroChange_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NotifyHeroChange_SC::IsInitialized() const {
  return true;
}

void MSG_NotifyHeroChange_SC::InternalSwap(MSG_NotifyHeroChange_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herolist_.InternalSwap(&other->herolist_);
  swap(changetype_, other->changetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NotifyHeroChange_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqHeroTrain_CS::InitAsDefaultInstance() {
}
class MSG_ReqHeroTrain_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqHeroTrain_CS>()._has_bits_);
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_traintimes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isusewater(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqHeroTrain_CS::MSG_ReqHeroTrain_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqHeroTrain_CS)
}
MSG_ReqHeroTrain_CS::MSG_ReqHeroTrain_CS(const MSG_ReqHeroTrain_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herothisid()) {
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
  ::memcpy(&traintimes_, &from.traintimes_,
    static_cast<size_t>(reinterpret_cast<char*>(&isusewater_) -
    reinterpret_cast<char*>(&traintimes_)) + sizeof(isusewater_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqHeroTrain_CS)
}

void MSG_ReqHeroTrain_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqHeroTrain_CS_hero_2eproto.base);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&traintimes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isusewater_) -
      reinterpret_cast<char*>(&traintimes_)) + sizeof(isusewater_));
}

MSG_ReqHeroTrain_CS::~MSG_ReqHeroTrain_CS() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqHeroTrain_CS)
  SharedDtor();
}

void MSG_ReqHeroTrain_CS::SharedDtor() {
  herothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqHeroTrain_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqHeroTrain_CS& MSG_ReqHeroTrain_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqHeroTrain_CS_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqHeroTrain_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqHeroTrain_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    herothisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&traintimes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isusewater_) -
        reinterpret_cast<char*>(&traintimes_)) + sizeof(isusewater_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqHeroTrain_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string herothisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_herothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_ReqHeroTrain_CS.herothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 traintimes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_traintimes(&has_bits);
          traintimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isusewater = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isusewater(&has_bits);
          isusewater_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqHeroTrain_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqHeroTrain_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string herothisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herothisid().data(), static_cast<int>(this->_internal_herothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_ReqHeroTrain_CS.herothisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_herothisid(), target);
  }

  // optional uint32 traintimes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_traintimes(), target);
  }

  // optional bool isusewater = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isusewater(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqHeroTrain_CS)
  return target;
}

size_t MSG_ReqHeroTrain_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqHeroTrain_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string herothisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_herothisid());
    }

    // optional uint32 traintimes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_traintimes());
    }

    // optional bool isusewater = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqHeroTrain_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqHeroTrain_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqHeroTrain_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqHeroTrain_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqHeroTrain_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqHeroTrain_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqHeroTrain_CS::MergeFrom(const MSG_ReqHeroTrain_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqHeroTrain_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      traintimes_ = from.traintimes_;
    }
    if (cached_has_bits & 0x00000004u) {
      isusewater_ = from.isusewater_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqHeroTrain_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqHeroTrain_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqHeroTrain_CS::CopyFrom(const MSG_ReqHeroTrain_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqHeroTrain_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqHeroTrain_CS::IsInitialized() const {
  return true;
}

void MSG_ReqHeroTrain_CS::InternalSwap(MSG_ReqHeroTrain_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herothisid_.Swap(&other->herothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(traintimes_, other->traintimes_);
  swap(isusewater_, other->isusewater_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqHeroTrain_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetHeroTrain_SC::InitAsDefaultInstance() {
  ::hero::_MSG_RetHeroTrain_SC_default_instance_._instance.get_mutable()->herocurinfo_ = const_cast< ::hero::Hero*>(
      ::hero::Hero::internal_default_instance());
}
class MSG_RetHeroTrain_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetHeroTrain_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hero::Hero& herocurinfo(const MSG_RetHeroTrain_SC* msg);
  static void set_has_herocurinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hero::Hero&
MSG_RetHeroTrain_SC::_Internal::herocurinfo(const MSG_RetHeroTrain_SC* msg) {
  return *msg->herocurinfo_;
}
MSG_RetHeroTrain_SC::MSG_RetHeroTrain_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_RetHeroTrain_SC)
}
MSG_RetHeroTrain_SC::MSG_RetHeroTrain_SC(const MSG_RetHeroTrain_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_herocurinfo()) {
    herocurinfo_ = new ::hero::Hero(*from.herocurinfo_);
  } else {
    herocurinfo_ = nullptr;
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:hero.MSG_RetHeroTrain_SC)
}

void MSG_RetHeroTrain_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetHeroTrain_SC_hero_2eproto.base);
  ::memset(&herocurinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&herocurinfo_)) + sizeof(errcode_));
}

MSG_RetHeroTrain_SC::~MSG_RetHeroTrain_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_RetHeroTrain_SC)
  SharedDtor();
}

void MSG_RetHeroTrain_SC::SharedDtor() {
  if (this != internal_default_instance()) delete herocurinfo_;
}

void MSG_RetHeroTrain_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetHeroTrain_SC& MSG_RetHeroTrain_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetHeroTrain_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetHeroTrain_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_RetHeroTrain_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(herocurinfo_ != nullptr);
    herocurinfo_->Clear();
  }
  errcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetHeroTrain_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.Hero herocurinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_herocurinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetHeroTrain_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_RetHeroTrain_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // optional .hero.Hero herocurinfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::herocurinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_RetHeroTrain_SC)
  return target;
}

size_t MSG_RetHeroTrain_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_RetHeroTrain_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hero.Hero herocurinfo = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *herocurinfo_);
    }

    // optional uint32 errcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetHeroTrain_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_RetHeroTrain_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetHeroTrain_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetHeroTrain_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_RetHeroTrain_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_RetHeroTrain_SC)
    MergeFrom(*source);
  }
}

void MSG_RetHeroTrain_SC::MergeFrom(const MSG_RetHeroTrain_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_RetHeroTrain_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_herocurinfo()->::hero::Hero::MergeFrom(from._internal_herocurinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      errcode_ = from.errcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetHeroTrain_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_RetHeroTrain_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetHeroTrain_SC::CopyFrom(const MSG_RetHeroTrain_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_RetHeroTrain_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetHeroTrain_SC::IsInitialized() const {
  return true;
}

void MSG_RetHeroTrain_SC::InternalSwap(MSG_RetHeroTrain_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(herocurinfo_, other->herocurinfo_);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetHeroTrain_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqLockUnlockHero_CS::InitAsDefaultInstance() {
}
class MSG_ReqLockUnlockHero_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqLockUnlockHero_CS>()._has_bits_);
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locktype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqLockUnlockHero_CS::MSG_ReqLockUnlockHero_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqLockUnlockHero_CS)
}
MSG_ReqLockUnlockHero_CS::MSG_ReqLockUnlockHero_CS(const MSG_ReqLockUnlockHero_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herothisid()) {
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
  locktype_ = from.locktype_;
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqLockUnlockHero_CS)
}

void MSG_ReqLockUnlockHero_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqLockUnlockHero_CS_hero_2eproto.base);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locktype_ = 0u;
}

MSG_ReqLockUnlockHero_CS::~MSG_ReqLockUnlockHero_CS() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqLockUnlockHero_CS)
  SharedDtor();
}

void MSG_ReqLockUnlockHero_CS::SharedDtor() {
  herothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqLockUnlockHero_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqLockUnlockHero_CS& MSG_ReqLockUnlockHero_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqLockUnlockHero_CS_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqLockUnlockHero_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqLockUnlockHero_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    herothisid_.ClearNonDefaultToEmptyNoArena();
  }
  locktype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqLockUnlockHero_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string herothisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_herothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_ReqLockUnlockHero_CS.herothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 locktype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_locktype(&has_bits);
          locktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqLockUnlockHero_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqLockUnlockHero_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string herothisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herothisid().data(), static_cast<int>(this->_internal_herothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_ReqLockUnlockHero_CS.herothisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_herothisid(), target);
  }

  // optional uint32 locktype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_locktype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqLockUnlockHero_CS)
  return target;
}

size_t MSG_ReqLockUnlockHero_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqLockUnlockHero_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string herothisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_herothisid());
    }

    // optional uint32 locktype = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_locktype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqLockUnlockHero_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqLockUnlockHero_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqLockUnlockHero_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqLockUnlockHero_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqLockUnlockHero_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqLockUnlockHero_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqLockUnlockHero_CS::MergeFrom(const MSG_ReqLockUnlockHero_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqLockUnlockHero_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      locktype_ = from.locktype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqLockUnlockHero_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqLockUnlockHero_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqLockUnlockHero_CS::CopyFrom(const MSG_ReqLockUnlockHero_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqLockUnlockHero_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqLockUnlockHero_CS::IsInitialized() const {
  return true;
}

void MSG_ReqLockUnlockHero_CS::InternalSwap(MSG_ReqLockUnlockHero_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herothisid_.Swap(&other->herothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(locktype_, other->locktype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqLockUnlockHero_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetLockUnlockHero_SC::InitAsDefaultInstance() {
}
class MSG_RetLockUnlockHero_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetLockUnlockHero_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locktype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_RetLockUnlockHero_SC::MSG_RetLockUnlockHero_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_RetLockUnlockHero_SC)
}
MSG_RetLockUnlockHero_SC::MSG_RetLockUnlockHero_SC(const MSG_RetLockUnlockHero_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herothisid()) {
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&locktype_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(locktype_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_RetLockUnlockHero_SC)
}

void MSG_RetLockUnlockHero_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetLockUnlockHero_SC_hero_2eproto.base);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locktype_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(locktype_));
}

MSG_RetLockUnlockHero_SC::~MSG_RetLockUnlockHero_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_RetLockUnlockHero_SC)
  SharedDtor();
}

void MSG_RetLockUnlockHero_SC::SharedDtor() {
  herothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RetLockUnlockHero_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetLockUnlockHero_SC& MSG_RetLockUnlockHero_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetLockUnlockHero_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetLockUnlockHero_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_RetLockUnlockHero_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    herothisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&locktype_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(locktype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetLockUnlockHero_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string herothisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_herothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_RetLockUnlockHero_SC.herothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 locktype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_locktype(&has_bits);
          locktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetLockUnlockHero_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_RetLockUnlockHero_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional string herothisid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herothisid().data(), static_cast<int>(this->_internal_herothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_RetLockUnlockHero_SC.herothisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_herothisid(), target);
  }

  // optional uint32 locktype = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_locktype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_RetLockUnlockHero_SC)
  return target;
}

size_t MSG_RetLockUnlockHero_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_RetLockUnlockHero_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string herothisid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_herothisid());
    }

    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

    // optional uint32 locktype = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_locktype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetLockUnlockHero_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_RetLockUnlockHero_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetLockUnlockHero_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetLockUnlockHero_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_RetLockUnlockHero_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_RetLockUnlockHero_SC)
    MergeFrom(*source);
  }
}

void MSG_RetLockUnlockHero_SC::MergeFrom(const MSG_RetLockUnlockHero_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_RetLockUnlockHero_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      locktype_ = from.locktype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetLockUnlockHero_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_RetLockUnlockHero_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetLockUnlockHero_SC::CopyFrom(const MSG_RetLockUnlockHero_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_RetLockUnlockHero_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetLockUnlockHero_SC::IsInitialized() const {
  return true;
}

void MSG_RetLockUnlockHero_SC::InternalSwap(MSG_RetLockUnlockHero_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herothisid_.Swap(&other->herothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retcode_, other->retcode_);
  swap(locktype_, other->locktype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetLockUnlockHero_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqLevelupHeroSkill_CS::InitAsDefaultInstance() {
}
class MSG_ReqLevelupHeroSkill_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqLevelupHeroSkill_CS>()._has_bits_);
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skillbaseid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_skilllevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqLevelupHeroSkill_CS::MSG_ReqLevelupHeroSkill_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqLevelupHeroSkill_CS)
}
MSG_ReqLevelupHeroSkill_CS::MSG_ReqLevelupHeroSkill_CS(const MSG_ReqLevelupHeroSkill_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herothisid()) {
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
  ::memcpy(&skillbaseid_, &from.skillbaseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skilllevel_) -
    reinterpret_cast<char*>(&skillbaseid_)) + sizeof(skilllevel_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqLevelupHeroSkill_CS)
}

void MSG_ReqLevelupHeroSkill_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqLevelupHeroSkill_CS_hero_2eproto.base);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&skillbaseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skilllevel_) -
      reinterpret_cast<char*>(&skillbaseid_)) + sizeof(skilllevel_));
}

MSG_ReqLevelupHeroSkill_CS::~MSG_ReqLevelupHeroSkill_CS() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqLevelupHeroSkill_CS)
  SharedDtor();
}

void MSG_ReqLevelupHeroSkill_CS::SharedDtor() {
  herothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqLevelupHeroSkill_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqLevelupHeroSkill_CS& MSG_ReqLevelupHeroSkill_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqLevelupHeroSkill_CS_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqLevelupHeroSkill_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqLevelupHeroSkill_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    herothisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&skillbaseid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skilllevel_) -
        reinterpret_cast<char*>(&skillbaseid_)) + sizeof(skilllevel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqLevelupHeroSkill_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string herothisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_herothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_ReqLevelupHeroSkill_CS.herothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skillbaseid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_skillbaseid(&has_bits);
          skillbaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skilllevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_skilllevel(&has_bits);
          skilllevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqLevelupHeroSkill_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqLevelupHeroSkill_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string herothisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herothisid().data(), static_cast<int>(this->_internal_herothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_ReqLevelupHeroSkill_CS.herothisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_herothisid(), target);
  }

  // optional uint32 skillbaseid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skillbaseid(), target);
  }

  // optional uint32 skilllevel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skilllevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqLevelupHeroSkill_CS)
  return target;
}

size_t MSG_ReqLevelupHeroSkill_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqLevelupHeroSkill_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string herothisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_herothisid());
    }

    // optional uint32 skillbaseid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skillbaseid());
    }

    // optional uint32 skilllevel = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skilllevel());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqLevelupHeroSkill_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqLevelupHeroSkill_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqLevelupHeroSkill_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqLevelupHeroSkill_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqLevelupHeroSkill_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqLevelupHeroSkill_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqLevelupHeroSkill_CS::MergeFrom(const MSG_ReqLevelupHeroSkill_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqLevelupHeroSkill_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      skillbaseid_ = from.skillbaseid_;
    }
    if (cached_has_bits & 0x00000004u) {
      skilllevel_ = from.skilllevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqLevelupHeroSkill_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqLevelupHeroSkill_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqLevelupHeroSkill_CS::CopyFrom(const MSG_ReqLevelupHeroSkill_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqLevelupHeroSkill_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqLevelupHeroSkill_CS::IsInitialized() const {
  return true;
}

void MSG_ReqLevelupHeroSkill_CS::InternalSwap(MSG_ReqLevelupHeroSkill_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herothisid_.Swap(&other->herothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(skillbaseid_, other->skillbaseid_);
  swap(skilllevel_, other->skilllevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqLevelupHeroSkill_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetLevelupHeroSkill_SC::InitAsDefaultInstance() {
}
class MSG_RetLevelupHeroSkill_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetLevelupHeroSkill_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skillbaseid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skilllevel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skillorgid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_RetLevelupHeroSkill_SC::MSG_RetLevelupHeroSkill_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_RetLevelupHeroSkill_SC)
}
MSG_RetLevelupHeroSkill_SC::MSG_RetLevelupHeroSkill_SC(const MSG_RetLevelupHeroSkill_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herothisid()) {
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillorgid_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(skillorgid_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_RetLevelupHeroSkill_SC)
}

void MSG_RetLevelupHeroSkill_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetLevelupHeroSkill_SC_hero_2eproto.base);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillorgid_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(skillorgid_));
}

MSG_RetLevelupHeroSkill_SC::~MSG_RetLevelupHeroSkill_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_RetLevelupHeroSkill_SC)
  SharedDtor();
}

void MSG_RetLevelupHeroSkill_SC::SharedDtor() {
  herothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RetLevelupHeroSkill_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetLevelupHeroSkill_SC& MSG_RetLevelupHeroSkill_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetLevelupHeroSkill_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetLevelupHeroSkill_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_RetLevelupHeroSkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    herothisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skillorgid_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(skillorgid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetLevelupHeroSkill_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string herothisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_herothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_RetLevelupHeroSkill_SC.herothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skillbaseid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_skillbaseid(&has_bits);
          skillbaseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skilllevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_skilllevel(&has_bits);
          skilllevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skillorgid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_skillorgid(&has_bits);
          skillorgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetLevelupHeroSkill_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_RetLevelupHeroSkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional string herothisid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herothisid().data(), static_cast<int>(this->_internal_herothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_RetLevelupHeroSkill_SC.herothisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_herothisid(), target);
  }

  // optional uint32 skillbaseid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skillbaseid(), target);
  }

  // optional uint32 skilllevel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skilllevel(), target);
  }

  // optional uint32 skillorgid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_skillorgid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_RetLevelupHeroSkill_SC)
  return target;
}

size_t MSG_RetLevelupHeroSkill_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_RetLevelupHeroSkill_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string herothisid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_herothisid());
    }

    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

    // optional uint32 skillbaseid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skillbaseid());
    }

    // optional uint32 skilllevel = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skilllevel());
    }

    // optional uint32 skillorgid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skillorgid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetLevelupHeroSkill_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_RetLevelupHeroSkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetLevelupHeroSkill_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetLevelupHeroSkill_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_RetLevelupHeroSkill_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_RetLevelupHeroSkill_SC)
    MergeFrom(*source);
  }
}

void MSG_RetLevelupHeroSkill_SC::MergeFrom(const MSG_RetLevelupHeroSkill_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_RetLevelupHeroSkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      skillbaseid_ = from.skillbaseid_;
    }
    if (cached_has_bits & 0x00000008u) {
      skilllevel_ = from.skilllevel_;
    }
    if (cached_has_bits & 0x00000010u) {
      skillorgid_ = from.skillorgid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetLevelupHeroSkill_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_RetLevelupHeroSkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetLevelupHeroSkill_SC::CopyFrom(const MSG_RetLevelupHeroSkill_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_RetLevelupHeroSkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetLevelupHeroSkill_SC::IsInitialized() const {
  return true;
}

void MSG_RetLevelupHeroSkill_SC::InternalSwap(MSG_RetLevelupHeroSkill_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herothisid_.Swap(&other->herothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retcode_, other->retcode_);
  swap(skillbaseid_, other->skillbaseid_);
  swap(skilllevel_, other->skilllevel_);
  swap(skillorgid_, other->skillorgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetLevelupHeroSkill_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_notifyRefreshHero_SC::InitAsDefaultInstance() {
  ::hero::_MSG_notifyRefreshHero_SC_default_instance_._instance.get_mutable()->heroinfo_ = const_cast< ::hero::Hero*>(
      ::hero::Hero::internal_default_instance());
}
class MSG_notifyRefreshHero_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_notifyRefreshHero_SC>()._has_bits_);
  static const ::hero::Hero& heroinfo(const MSG_notifyRefreshHero_SC* msg);
  static void set_has_heroinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hero::Hero&
MSG_notifyRefreshHero_SC::_Internal::heroinfo(const MSG_notifyRefreshHero_SC* msg) {
  return *msg->heroinfo_;
}
MSG_notifyRefreshHero_SC::MSG_notifyRefreshHero_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_notifyRefreshHero_SC)
}
MSG_notifyRefreshHero_SC::MSG_notifyRefreshHero_SC(const MSG_notifyRefreshHero_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_heroinfo()) {
    heroinfo_ = new ::hero::Hero(*from.heroinfo_);
  } else {
    heroinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hero.MSG_notifyRefreshHero_SC)
}

void MSG_notifyRefreshHero_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_notifyRefreshHero_SC_hero_2eproto.base);
  heroinfo_ = nullptr;
}

MSG_notifyRefreshHero_SC::~MSG_notifyRefreshHero_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_notifyRefreshHero_SC)
  SharedDtor();
}

void MSG_notifyRefreshHero_SC::SharedDtor() {
  if (this != internal_default_instance()) delete heroinfo_;
}

void MSG_notifyRefreshHero_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_notifyRefreshHero_SC& MSG_notifyRefreshHero_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_notifyRefreshHero_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_notifyRefreshHero_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_notifyRefreshHero_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(heroinfo_ != nullptr);
    heroinfo_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_notifyRefreshHero_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hero.Hero heroinfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heroinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_notifyRefreshHero_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_notifyRefreshHero_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hero.Hero heroinfo = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::heroinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_notifyRefreshHero_SC)
  return target;
}

size_t MSG_notifyRefreshHero_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_notifyRefreshHero_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hero.Hero heroinfo = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heroinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_notifyRefreshHero_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_notifyRefreshHero_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_notifyRefreshHero_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_notifyRefreshHero_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_notifyRefreshHero_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_notifyRefreshHero_SC)
    MergeFrom(*source);
  }
}

void MSG_notifyRefreshHero_SC::MergeFrom(const MSG_notifyRefreshHero_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_notifyRefreshHero_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_heroinfo()) {
    _internal_mutable_heroinfo()->::hero::Hero::MergeFrom(from._internal_heroinfo());
  }
}

void MSG_notifyRefreshHero_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_notifyRefreshHero_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_notifyRefreshHero_SC::CopyFrom(const MSG_notifyRefreshHero_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_notifyRefreshHero_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_notifyRefreshHero_SC::IsInitialized() const {
  return true;
}

void MSG_notifyRefreshHero_SC::InternalSwap(MSG_notifyRefreshHero_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(heroinfo_, other->heroinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_notifyRefreshHero_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqRiseStar_CS::InitAsDefaultInstance() {
}
class MSG_ReqRiseStar_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqRiseStar_CS>()._has_bits_);
  static void set_has_sourcethisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_costthisid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqRiseStar_CS::MSG_ReqRiseStar_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqRiseStar_CS)
}
MSG_ReqRiseStar_CS::MSG_ReqRiseStar_CS(const MSG_ReqRiseStar_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourcethisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sourcethisid()) {
    sourcethisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcethisid_);
  }
  costthisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_costthisid()) {
    costthisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.costthisid_);
  }
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqRiseStar_CS)
}

void MSG_ReqRiseStar_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqRiseStar_CS_hero_2eproto.base);
  sourcethisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  costthisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqRiseStar_CS::~MSG_ReqRiseStar_CS() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqRiseStar_CS)
  SharedDtor();
}

void MSG_ReqRiseStar_CS::SharedDtor() {
  sourcethisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  costthisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqRiseStar_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqRiseStar_CS& MSG_ReqRiseStar_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqRiseStar_CS_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqRiseStar_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqRiseStar_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sourcethisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      costthisid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqRiseStar_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sourcethisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sourcethisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_ReqRiseStar_CS.sourcethisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string costthisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_costthisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_ReqRiseStar_CS.costthisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqRiseStar_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqRiseStar_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sourcethisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourcethisid().data(), static_cast<int>(this->_internal_sourcethisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_ReqRiseStar_CS.sourcethisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourcethisid(), target);
  }

  // optional string costthisid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_costthisid().data(), static_cast<int>(this->_internal_costthisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_ReqRiseStar_CS.costthisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_costthisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqRiseStar_CS)
  return target;
}

size_t MSG_ReqRiseStar_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqRiseStar_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string sourcethisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourcethisid());
    }

    // optional string costthisid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_costthisid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqRiseStar_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqRiseStar_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqRiseStar_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqRiseStar_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqRiseStar_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqRiseStar_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqRiseStar_CS::MergeFrom(const MSG_ReqRiseStar_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqRiseStar_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sourcethisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcethisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      costthisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.costthisid_);
    }
  }
}

void MSG_ReqRiseStar_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqRiseStar_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqRiseStar_CS::CopyFrom(const MSG_ReqRiseStar_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqRiseStar_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqRiseStar_CS::IsInitialized() const {
  return true;
}

void MSG_ReqRiseStar_CS::InternalSwap(MSG_ReqRiseStar_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sourcethisid_.Swap(&other->sourcethisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  costthisid_.Swap(&other->costthisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqRiseStar_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRiseStar_SC::InitAsDefaultInstance() {
}
class MSG_RetRiseStar_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRiseStar_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sourcethisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_costthisid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetRiseStar_SC::MSG_RetRiseStar_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_RetRiseStar_SC)
}
MSG_RetRiseStar_SC::MSG_RetRiseStar_SC(const MSG_RetRiseStar_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sourcethisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sourcethisid()) {
    sourcethisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcethisid_);
  }
  costthisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_costthisid()) {
    costthisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.costthisid_);
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:hero.MSG_RetRiseStar_SC)
}

void MSG_RetRiseStar_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetRiseStar_SC_hero_2eproto.base);
  sourcethisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  costthisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0u;
}

MSG_RetRiseStar_SC::~MSG_RetRiseStar_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_RetRiseStar_SC)
  SharedDtor();
}

void MSG_RetRiseStar_SC::SharedDtor() {
  sourcethisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  costthisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_RetRiseStar_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRiseStar_SC& MSG_RetRiseStar_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRiseStar_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRiseStar_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_RetRiseStar_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sourcethisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      costthisid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRiseStar_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sourcethisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sourcethisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_RetRiseStar_SC.sourcethisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string costthisid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_costthisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hero.MSG_RetRiseStar_SC.costthisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRiseStar_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_RetRiseStar_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional string sourcethisid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourcethisid().data(), static_cast<int>(this->_internal_sourcethisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_RetRiseStar_SC.sourcethisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sourcethisid(), target);
  }

  // optional string costthisid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_costthisid().data(), static_cast<int>(this->_internal_costthisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hero.MSG_RetRiseStar_SC.costthisid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_costthisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_RetRiseStar_SC)
  return target;
}

size_t MSG_RetRiseStar_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_RetRiseStar_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sourcethisid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sourcethisid());
    }

    // optional string costthisid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_costthisid());
    }

    // optional uint32 retcode = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRiseStar_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_RetRiseStar_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRiseStar_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRiseStar_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_RetRiseStar_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_RetRiseStar_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRiseStar_SC::MergeFrom(const MSG_RetRiseStar_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_RetRiseStar_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sourcethisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sourcethisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      costthisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.costthisid_);
    }
    if (cached_has_bits & 0x00000004u) {
      retcode_ = from.retcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetRiseStar_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_RetRiseStar_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRiseStar_SC::CopyFrom(const MSG_RetRiseStar_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_RetRiseStar_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRiseStar_SC::IsInitialized() const {
  return true;
}

void MSG_RetRiseStar_SC::InternalSwap(MSG_RetRiseStar_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sourcethisid_.Swap(&other->sourcethisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  costthisid_.Swap(&other->costthisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRiseStar_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DnaItem::InitAsDefaultInstance() {
}
class DnaItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DnaItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DnaItem::DnaItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.DnaItem)
}
DnaItem::DnaItem(const DnaItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:hero.DnaItem)
}

void DnaItem::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
}

DnaItem::~DnaItem() {
  // @@protoc_insertion_point(destructor:hero.DnaItem)
  SharedDtor();
}

void DnaItem::SharedDtor() {
}

void DnaItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DnaItem& DnaItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DnaItem_hero_2eproto.base);
  return *internal_default_instance();
}


void DnaItem::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.DnaItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&id_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DnaItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DnaItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.DnaItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // optional uint32 num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.DnaItem)
  return target;
}

size_t DnaItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.DnaItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 num = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DnaItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.DnaItem)
  GOOGLE_DCHECK_NE(&from, this);
  const DnaItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DnaItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.DnaItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.DnaItem)
    MergeFrom(*source);
  }
}

void DnaItem::MergeFrom(const DnaItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.DnaItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DnaItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.DnaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DnaItem::CopyFrom(const DnaItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.DnaItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DnaItem::IsInitialized() const {
  return true;
}

void DnaItem::InternalSwap(DnaItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DnaItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_DnaBagInfo_CSC::InitAsDefaultInstance() {
}
class MSG_DnaBagInfo_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_DnaBagInfo_CSC>()._has_bits_);
  static void set_has_cur_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_DnaBagInfo_CSC::MSG_DnaBagInfo_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_DnaBagInfo_CSC)
}
MSG_DnaBagInfo_CSC::MSG_DnaBagInfo_CSC(const MSG_DnaBagInfo_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      datas_(from.datas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cur_page_ = from.cur_page_;
  // @@protoc_insertion_point(copy_constructor:hero.MSG_DnaBagInfo_CSC)
}

void MSG_DnaBagInfo_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_DnaBagInfo_CSC_hero_2eproto.base);
  cur_page_ = 0;
}

MSG_DnaBagInfo_CSC::~MSG_DnaBagInfo_CSC() {
  // @@protoc_insertion_point(destructor:hero.MSG_DnaBagInfo_CSC)
  SharedDtor();
}

void MSG_DnaBagInfo_CSC::SharedDtor() {
}

void MSG_DnaBagInfo_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_DnaBagInfo_CSC& MSG_DnaBagInfo_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_DnaBagInfo_CSC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_DnaBagInfo_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_DnaBagInfo_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datas_.Clear();
  cur_page_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_DnaBagInfo_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hero.DnaItem datas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .hero.DNAPage cur_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNAPage_IsValid(val))) {
            _internal_set_cur_page(static_cast<::hero::DNAPage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_DnaBagInfo_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_DnaBagInfo_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hero.DnaItem datas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_datas(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .hero.DNAPage cur_page = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cur_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_DnaBagInfo_CSC)
  return target;
}

size_t MSG_DnaBagInfo_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_DnaBagInfo_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hero.DnaItem datas = 1;
  total_size += 1UL * this->_internal_datas_size();
  for (const auto& msg : this->datas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .hero.DNAPage cur_page = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cur_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_DnaBagInfo_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_DnaBagInfo_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_DnaBagInfo_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_DnaBagInfo_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_DnaBagInfo_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_DnaBagInfo_CSC)
    MergeFrom(*source);
  }
}

void MSG_DnaBagInfo_CSC::MergeFrom(const MSG_DnaBagInfo_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_DnaBagInfo_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datas_.MergeFrom(from.datas_);
  if (from._internal_has_cur_page()) {
    _internal_set_cur_page(from._internal_cur_page());
  }
}

void MSG_DnaBagInfo_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_DnaBagInfo_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DnaBagInfo_CSC::CopyFrom(const MSG_DnaBagInfo_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_DnaBagInfo_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DnaBagInfo_CSC::IsInitialized() const {
  return true;
}

void MSG_DnaBagInfo_CSC::InternalSwap(MSG_DnaBagInfo_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datas_.InternalSwap(&other->datas_);
  swap(cur_page_, other->cur_page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_DnaBagInfo_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hole::InitAsDefaultInstance() {
}
class Hole::_Internal {
 public:
  using HasBits = decltype(std::declval<Hole>()._has_bits_);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Hole::Hole()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.Hole)
}
Hole::Hole(const Hole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pos_, &from.pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:hero.Hole)
}

void Hole::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(type_));
}

Hole::~Hole() {
  // @@protoc_insertion_point(destructor:hero.Hole)
  SharedDtor();
}

void Hole::SharedDtor() {
}

void Hole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hole& Hole::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hole_hero_2eproto.base);
  return *internal_default_instance();
}


void Hole::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.Hole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&pos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&pos_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Hole::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pos(&has_bits);
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.DNAPage page = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNAPage_IsValid(val))) {
            _internal_set_page(static_cast<::hero::DNAPage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hero.DNASlotType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNASlotType_IsValid(val))) {
            _internal_set_type(static_cast<::hero::DNASlotType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hole::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.Hole)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pos(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional .hero.DNAPage page = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_page(), target);
  }

  // optional .hero.DNASlotType type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.Hole)
  return target;
}

size_t Hole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.Hole)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 pos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pos());
    }

    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional .hero.DNAPage page = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page());
    }

    // optional .hero.DNASlotType type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hole::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.Hole)
  GOOGLE_DCHECK_NE(&from, this);
  const Hole* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.Hole)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.Hole)
    MergeFrom(*source);
  }
}

void Hole::MergeFrom(const Hole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.Hole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pos_ = from.pos_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Hole::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.Hole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hole::CopyFrom(const Hole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.Hole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hole::IsInitialized() const {
  return true;
}

void Hole::InternalSwap(Hole* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(page_, other->page_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hole::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_DnaPageInfo_CSC::InitAsDefaultInstance() {
}
class MSG_DnaPageInfo_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_DnaPageInfo_CSC>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_att_opened_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_def_opened_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_DnaPageInfo_CSC::MSG_DnaPageInfo_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_DnaPageInfo_CSC)
}
MSG_DnaPageInfo_CSC::MSG_DnaPageInfo_CSC(const MSG_DnaPageInfo_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      att_holes_(from.att_holes_),
      def_holes_(from.def_holes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&def_opened_num_) -
    reinterpret_cast<char*>(&page_)) + sizeof(def_opened_num_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_DnaPageInfo_CSC)
}

void MSG_DnaPageInfo_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_DnaPageInfo_CSC_hero_2eproto.base);
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&def_opened_num_) -
      reinterpret_cast<char*>(&page_)) + sizeof(def_opened_num_));
}

MSG_DnaPageInfo_CSC::~MSG_DnaPageInfo_CSC() {
  // @@protoc_insertion_point(destructor:hero.MSG_DnaPageInfo_CSC)
  SharedDtor();
}

void MSG_DnaPageInfo_CSC::SharedDtor() {
}

void MSG_DnaPageInfo_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_DnaPageInfo_CSC& MSG_DnaPageInfo_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_DnaPageInfo_CSC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_DnaPageInfo_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_DnaPageInfo_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  att_holes_.Clear();
  def_holes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&def_opened_num_) -
        reinterpret_cast<char*>(&page_)) + sizeof(def_opened_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_DnaPageInfo_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hero.DNAPage page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNAPage_IsValid(val))) {
            _internal_set_page(static_cast<::hero::DNAPage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .hero.Hole att_holes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_att_holes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .hero.Hole def_holes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_def_holes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 att_opened_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_att_opened_num(&has_bits);
          att_opened_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 def_opened_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_def_opened_num(&has_bits);
          def_opened_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_DnaPageInfo_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_DnaPageInfo_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hero.DNAPage page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_page(), target);
  }

  // repeated .hero.Hole att_holes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_att_holes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_att_holes(i), target, stream);
  }

  // repeated .hero.Hole def_holes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_def_holes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_def_holes(i), target, stream);
  }

  // optional uint32 att_opened_num = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_att_opened_num(), target);
  }

  // optional uint32 def_opened_num = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_def_opened_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_DnaPageInfo_CSC)
  return target;
}

size_t MSG_DnaPageInfo_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_DnaPageInfo_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hero.Hole att_holes = 2;
  total_size += 1UL * this->_internal_att_holes_size();
  for (const auto& msg : this->att_holes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .hero.Hole def_holes = 3;
  total_size += 1UL * this->_internal_def_holes_size();
  for (const auto& msg : this->def_holes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .hero.DNAPage page = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page());
    }

    // optional uint32 att_opened_num = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_att_opened_num());
    }

    // optional uint32 def_opened_num = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_opened_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_DnaPageInfo_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_DnaPageInfo_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_DnaPageInfo_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_DnaPageInfo_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_DnaPageInfo_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_DnaPageInfo_CSC)
    MergeFrom(*source);
  }
}

void MSG_DnaPageInfo_CSC::MergeFrom(const MSG_DnaPageInfo_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_DnaPageInfo_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  att_holes_.MergeFrom(from.att_holes_);
  def_holes_.MergeFrom(from.def_holes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      att_opened_num_ = from.att_opened_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_opened_num_ = from.def_opened_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_DnaPageInfo_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_DnaPageInfo_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DnaPageInfo_CSC::CopyFrom(const MSG_DnaPageInfo_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_DnaPageInfo_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DnaPageInfo_CSC::IsInitialized() const {
  return true;
}

void MSG_DnaPageInfo_CSC::InternalSwap(MSG_DnaPageInfo_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  att_holes_.InternalSwap(&other->att_holes_);
  def_holes_.InternalSwap(&other->def_holes_);
  swap(page_, other->page_);
  swap(att_opened_num_, other->att_opened_num_);
  swap(def_opened_num_, other->def_opened_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_DnaPageInfo_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqPutOnDna_CS::InitAsDefaultInstance() {
}
class MSG_ReqPutOnDna_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqPutOnDna_CS>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_ReqPutOnDna_CS::MSG_ReqPutOnDna_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqPutOnDna_CS)
}
MSG_ReqPutOnDna_CS::MSG_ReqPutOnDna_CS(const MSG_ReqPutOnDna_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&page_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqPutOnDna_CS)
}

void MSG_ReqPutOnDna_CS::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&page_)) + sizeof(type_));
}

MSG_ReqPutOnDna_CS::~MSG_ReqPutOnDna_CS() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqPutOnDna_CS)
  SharedDtor();
}

void MSG_ReqPutOnDna_CS::SharedDtor() {
}

void MSG_ReqPutOnDna_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqPutOnDna_CS& MSG_ReqPutOnDna_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqPutOnDna_CS_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqPutOnDna_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqPutOnDna_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&page_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqPutOnDna_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hero.DNAPage page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNAPage_IsValid(val))) {
            _internal_set_page(static_cast<::hero::DNAPage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pos(&has_bits);
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.DNASlotType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNASlotType_IsValid(val))) {
            _internal_set_type(static_cast<::hero::DNASlotType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqPutOnDna_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqPutOnDna_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hero.DNAPage page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_page(), target);
  }

  // optional uint32 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pos(), target);
  }

  // optional uint32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  // optional uint32 level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // optional .hero.DNASlotType type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqPutOnDna_CS)
  return target;
}

size_t MSG_ReqPutOnDna_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqPutOnDna_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .hero.DNAPage page = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page());
    }

    // optional uint32 pos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pos());
    }

    // optional uint32 id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional .hero.DNASlotType type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqPutOnDna_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqPutOnDna_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqPutOnDna_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqPutOnDna_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqPutOnDna_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqPutOnDna_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqPutOnDna_CS::MergeFrom(const MSG_ReqPutOnDna_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqPutOnDna_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_ = from.pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqPutOnDna_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqPutOnDna_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqPutOnDna_CS::CopyFrom(const MSG_ReqPutOnDna_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqPutOnDna_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqPutOnDna_CS::IsInitialized() const {
  return true;
}

void MSG_ReqPutOnDna_CS::InternalSwap(MSG_ReqPutOnDna_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_, other->page_);
  swap(pos_, other->pos_);
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqPutOnDna_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqPutOffDna_CS::InitAsDefaultInstance() {
}
class MSG_ReqPutOffDna_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqPutOffDna_CS>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqPutOffDna_CS::MSG_ReqPutOffDna_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqPutOffDna_CS)
}
MSG_ReqPutOffDna_CS::MSG_ReqPutOffDna_CS(const MSG_ReqPutOffDna_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&page_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqPutOffDna_CS)
}

void MSG_ReqPutOffDna_CS::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&page_)) + sizeof(type_));
}

MSG_ReqPutOffDna_CS::~MSG_ReqPutOffDna_CS() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqPutOffDna_CS)
  SharedDtor();
}

void MSG_ReqPutOffDna_CS::SharedDtor() {
}

void MSG_ReqPutOffDna_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqPutOffDna_CS& MSG_ReqPutOffDna_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqPutOffDna_CS_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqPutOffDna_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqPutOffDna_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&page_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqPutOffDna_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hero.DNAPage page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNAPage_IsValid(val))) {
            _internal_set_page(static_cast<::hero::DNAPage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pos(&has_bits);
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.DNASlotType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNASlotType_IsValid(val))) {
            _internal_set_type(static_cast<::hero::DNASlotType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqPutOffDna_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqPutOffDna_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hero.DNAPage page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_page(), target);
  }

  // optional uint32 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pos(), target);
  }

  // optional .hero.DNASlotType type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqPutOffDna_CS)
  return target;
}

size_t MSG_ReqPutOffDna_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqPutOffDna_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .hero.DNAPage page = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page());
    }

    // optional uint32 pos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pos());
    }

    // optional .hero.DNASlotType type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqPutOffDna_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqPutOffDna_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqPutOffDna_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqPutOffDna_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqPutOffDna_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqPutOffDna_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqPutOffDna_CS::MergeFrom(const MSG_ReqPutOffDna_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqPutOffDna_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_ = from.pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqPutOffDna_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqPutOffDna_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqPutOffDna_CS::CopyFrom(const MSG_ReqPutOffDna_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqPutOffDna_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqPutOffDna_CS::IsInitialized() const {
  return true;
}

void MSG_ReqPutOffDna_CS::InternalSwap(MSG_ReqPutOffDna_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_, other->page_);
  swap(pos_, other->pos_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqPutOffDna_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqCombineDna_CS::InitAsDefaultInstance() {
}
class MSG_ReqCombineDna_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqCombineDna_CS>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_ReqCombineDna_CS::MSG_ReqCombineDna_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqCombineDna_CS)
}
MSG_ReqCombineDna_CS::MSG_ReqCombineDna_CS(const MSG_ReqCombineDna_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&page_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqCombineDna_CS)
}

void MSG_ReqCombineDna_CS::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&page_)) + sizeof(num_));
}

MSG_ReqCombineDna_CS::~MSG_ReqCombineDna_CS() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqCombineDna_CS)
  SharedDtor();
}

void MSG_ReqCombineDna_CS::SharedDtor() {
}

void MSG_ReqCombineDna_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqCombineDna_CS& MSG_ReqCombineDna_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqCombineDna_CS_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqCombineDna_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqCombineDna_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&page_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqCombineDna_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hero.DNAPage page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNAPage_IsValid(val))) {
            _internal_set_page(static_cast<::hero::DNAPage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pos(&has_bits);
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hero.DNASlotType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNASlotType_IsValid(val))) {
            _internal_set_type(static_cast<::hero::DNASlotType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqCombineDna_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqCombineDna_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hero.DNAPage page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_page(), target);
  }

  // optional uint32 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pos(), target);
  }

  // optional .hero.DNASlotType type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional uint32 num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqCombineDna_CS)
  return target;
}

size_t MSG_ReqCombineDna_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqCombineDna_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .hero.DNAPage page = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page());
    }

    // optional uint32 pos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pos());
    }

    // optional .hero.DNASlotType type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 num = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqCombineDna_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqCombineDna_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqCombineDna_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqCombineDna_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqCombineDna_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqCombineDna_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqCombineDna_CS::MergeFrom(const MSG_ReqCombineDna_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqCombineDna_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_ = from.pos_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqCombineDna_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqCombineDna_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqCombineDna_CS::CopyFrom(const MSG_ReqCombineDna_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqCombineDna_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqCombineDna_CS::IsInitialized() const {
  return true;
}

void MSG_ReqCombineDna_CS::InternalSwap(MSG_ReqCombineDna_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_, other->page_);
  swap(pos_, other->pos_);
  swap(type_, other->type_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqCombineDna_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqChangeCurDnaPage_CS::InitAsDefaultInstance() {
}
class MSG_ReqChangeCurDnaPage_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqChangeCurDnaPage_CS>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqChangeCurDnaPage_CS::MSG_ReqChangeCurDnaPage_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqChangeCurDnaPage_CS)
}
MSG_ReqChangeCurDnaPage_CS::MSG_ReqChangeCurDnaPage_CS(const MSG_ReqChangeCurDnaPage_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  page_ = from.page_;
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqChangeCurDnaPage_CS)
}

void MSG_ReqChangeCurDnaPage_CS::SharedCtor() {
  page_ = 0;
}

MSG_ReqChangeCurDnaPage_CS::~MSG_ReqChangeCurDnaPage_CS() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqChangeCurDnaPage_CS)
  SharedDtor();
}

void MSG_ReqChangeCurDnaPage_CS::SharedDtor() {
}

void MSG_ReqChangeCurDnaPage_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqChangeCurDnaPage_CS& MSG_ReqChangeCurDnaPage_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqChangeCurDnaPage_CS_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqChangeCurDnaPage_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqChangeCurDnaPage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqChangeCurDnaPage_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hero.DNAPage page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNAPage_IsValid(val))) {
            _internal_set_page(static_cast<::hero::DNAPage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqChangeCurDnaPage_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqChangeCurDnaPage_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hero.DNAPage page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_page(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqChangeCurDnaPage_CS)
  return target;
}

size_t MSG_ReqChangeCurDnaPage_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqChangeCurDnaPage_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hero.DNAPage page = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqChangeCurDnaPage_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqChangeCurDnaPage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqChangeCurDnaPage_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqChangeCurDnaPage_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqChangeCurDnaPage_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqChangeCurDnaPage_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqChangeCurDnaPage_CS::MergeFrom(const MSG_ReqChangeCurDnaPage_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqChangeCurDnaPage_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_page()) {
    _internal_set_page(from._internal_page());
  }
}

void MSG_ReqChangeCurDnaPage_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqChangeCurDnaPage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqChangeCurDnaPage_CS::CopyFrom(const MSG_ReqChangeCurDnaPage_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqChangeCurDnaPage_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqChangeCurDnaPage_CS::IsInitialized() const {
  return true;
}

void MSG_ReqChangeCurDnaPage_CS::InternalSwap(MSG_ReqChangeCurDnaPage_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_, other->page_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqChangeCurDnaPage_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqCombineDnaInBag_CS::InitAsDefaultInstance() {
}
class MSG_ReqCombineDnaInBag_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqCombineDnaInBag_CS>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqCombineDnaInBag_CS::MSG_ReqCombineDnaInBag_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqCombineDnaInBag_CS)
}
MSG_ReqCombineDnaInBag_CS::MSG_ReqCombineDnaInBag_CS(const MSG_ReqCombineDnaInBag_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqCombineDnaInBag_CS)
}

void MSG_ReqCombineDnaInBag_CS::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(num_));
}

MSG_ReqCombineDnaInBag_CS::~MSG_ReqCombineDnaInBag_CS() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqCombineDnaInBag_CS)
  SharedDtor();
}

void MSG_ReqCombineDnaInBag_CS::SharedDtor() {
}

void MSG_ReqCombineDnaInBag_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqCombineDnaInBag_CS& MSG_ReqCombineDnaInBag_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqCombineDnaInBag_CS_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqCombineDnaInBag_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqCombineDnaInBag_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_) -
        reinterpret_cast<char*>(&id_)) + sizeof(num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqCombineDnaInBag_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqCombineDnaInBag_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqCombineDnaInBag_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // optional uint32 num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqCombineDnaInBag_CS)
  return target;
}

size_t MSG_ReqCombineDnaInBag_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqCombineDnaInBag_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 num = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqCombineDnaInBag_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqCombineDnaInBag_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqCombineDnaInBag_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqCombineDnaInBag_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqCombineDnaInBag_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqCombineDnaInBag_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqCombineDnaInBag_CS::MergeFrom(const MSG_ReqCombineDnaInBag_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqCombineDnaInBag_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqCombineDnaInBag_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqCombineDnaInBag_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqCombineDnaInBag_CS::CopyFrom(const MSG_ReqCombineDnaInBag_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqCombineDnaInBag_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqCombineDnaInBag_CS::IsInitialized() const {
  return true;
}

void MSG_ReqCombineDnaInBag_CS::InternalSwap(MSG_ReqCombineDnaInBag_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqCombineDnaInBag_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqBuySlot_SC::InitAsDefaultInstance() {
}
class MSG_ReqBuySlot_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqBuySlot_SC>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqBuySlot_SC::MSG_ReqBuySlot_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ReqBuySlot_SC)
}
MSG_ReqBuySlot_SC::MSG_ReqBuySlot_SC(const MSG_ReqBuySlot_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&page_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ReqBuySlot_SC)
}

void MSG_ReqBuySlot_SC::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&page_)) + sizeof(type_));
}

MSG_ReqBuySlot_SC::~MSG_ReqBuySlot_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_ReqBuySlot_SC)
  SharedDtor();
}

void MSG_ReqBuySlot_SC::SharedDtor() {
}

void MSG_ReqBuySlot_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqBuySlot_SC& MSG_ReqBuySlot_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqBuySlot_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqBuySlot_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ReqBuySlot_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&page_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqBuySlot_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hero.DNAPage page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNAPage_IsValid(val))) {
            _internal_set_page(static_cast<::hero::DNAPage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hero.DNASlotType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNASlotType_IsValid(val))) {
            _internal_set_type(static_cast<::hero::DNASlotType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqBuySlot_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ReqBuySlot_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hero.DNAPage page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_page(), target);
  }

  // optional .hero.DNASlotType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ReqBuySlot_SC)
  return target;
}

size_t MSG_ReqBuySlot_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ReqBuySlot_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .hero.DNAPage page = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page());
    }

    // optional .hero.DNASlotType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqBuySlot_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ReqBuySlot_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqBuySlot_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqBuySlot_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ReqBuySlot_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ReqBuySlot_SC)
    MergeFrom(*source);
  }
}

void MSG_ReqBuySlot_SC::MergeFrom(const MSG_ReqBuySlot_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ReqBuySlot_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqBuySlot_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ReqBuySlot_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqBuySlot_SC::CopyFrom(const MSG_ReqBuySlot_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ReqBuySlot_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqBuySlot_SC::IsInitialized() const {
  return true;
}

void MSG_ReqBuySlot_SC::InternalSwap(MSG_ReqBuySlot_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_, other->page_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqBuySlot_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ResponseSlotOpened_SC::InitAsDefaultInstance() {
}
class MSG_ResponseSlotOpened_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ResponseSlotOpened_SC>()._has_bits_);
  static void set_has_page(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cur_num(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ResponseSlotOpened_SC::MSG_ResponseSlotOpened_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_ResponseSlotOpened_SC)
}
MSG_ResponseSlotOpened_SC::MSG_ResponseSlotOpened_SC(const MSG_ResponseSlotOpened_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_num_) -
    reinterpret_cast<char*>(&page_)) + sizeof(cur_num_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_ResponseSlotOpened_SC)
}

void MSG_ResponseSlotOpened_SC::SharedCtor() {
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_num_) -
      reinterpret_cast<char*>(&page_)) + sizeof(cur_num_));
}

MSG_ResponseSlotOpened_SC::~MSG_ResponseSlotOpened_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_ResponseSlotOpened_SC)
  SharedDtor();
}

void MSG_ResponseSlotOpened_SC::SharedDtor() {
}

void MSG_ResponseSlotOpened_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ResponseSlotOpened_SC& MSG_ResponseSlotOpened_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ResponseSlotOpened_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_ResponseSlotOpened_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_ResponseSlotOpened_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&page_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cur_num_) -
        reinterpret_cast<char*>(&page_)) + sizeof(cur_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ResponseSlotOpened_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hero.DNAPage page = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNAPage_IsValid(val))) {
            _internal_set_page(static_cast<::hero::DNAPage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hero.DNASlotType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hero::DNASlotType_IsValid(val))) {
            _internal_set_type(static_cast<::hero::DNASlotType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 cur_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cur_num(&has_bits);
          cur_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ResponseSlotOpened_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_ResponseSlotOpened_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hero.DNAPage page = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_page(), target);
  }

  // optional .hero.DNASlotType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional uint32 cur_num = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cur_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_ResponseSlotOpened_SC)
  return target;
}

size_t MSG_ResponseSlotOpened_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_ResponseSlotOpened_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .hero.DNAPage page = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_page());
    }

    // optional .hero.DNASlotType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 cur_num = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cur_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ResponseSlotOpened_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_ResponseSlotOpened_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ResponseSlotOpened_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ResponseSlotOpened_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_ResponseSlotOpened_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_ResponseSlotOpened_SC)
    MergeFrom(*source);
  }
}

void MSG_ResponseSlotOpened_SC::MergeFrom(const MSG_ResponseSlotOpened_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_ResponseSlotOpened_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      cur_num_ = from.cur_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ResponseSlotOpened_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_ResponseSlotOpened_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ResponseSlotOpened_SC::CopyFrom(const MSG_ResponseSlotOpened_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_ResponseSlotOpened_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ResponseSlotOpened_SC::IsInitialized() const {
  return true;
}

void MSG_ResponseSlotOpened_SC::InternalSwap(MSG_ResponseSlotOpened_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(page_, other->page_);
  swap(type_, other->type_);
  swap(cur_num_, other->cur_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ResponseSlotOpened_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_AllDnaPageInfo_CSC::InitAsDefaultInstance() {
}
class MSG_AllDnaPageInfo_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_AllDnaPageInfo_CSC>()._has_bits_);
};

MSG_AllDnaPageInfo_CSC::MSG_AllDnaPageInfo_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_AllDnaPageInfo_CSC)
}
MSG_AllDnaPageInfo_CSC::MSG_AllDnaPageInfo_CSC(const MSG_AllDnaPageInfo_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pages_(from.pages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hero.MSG_AllDnaPageInfo_CSC)
}

void MSG_AllDnaPageInfo_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_AllDnaPageInfo_CSC_hero_2eproto.base);
}

MSG_AllDnaPageInfo_CSC::~MSG_AllDnaPageInfo_CSC() {
  // @@protoc_insertion_point(destructor:hero.MSG_AllDnaPageInfo_CSC)
  SharedDtor();
}

void MSG_AllDnaPageInfo_CSC::SharedDtor() {
}

void MSG_AllDnaPageInfo_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_AllDnaPageInfo_CSC& MSG_AllDnaPageInfo_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_AllDnaPageInfo_CSC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_AllDnaPageInfo_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_AllDnaPageInfo_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pages_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_AllDnaPageInfo_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hero.MSG_DnaPageInfo_CSC pages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_AllDnaPageInfo_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_AllDnaPageInfo_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hero.MSG_DnaPageInfo_CSC pages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_AllDnaPageInfo_CSC)
  return target;
}

size_t MSG_AllDnaPageInfo_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_AllDnaPageInfo_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hero.MSG_DnaPageInfo_CSC pages = 1;
  total_size += 1UL * this->_internal_pages_size();
  for (const auto& msg : this->pages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_AllDnaPageInfo_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_AllDnaPageInfo_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_AllDnaPageInfo_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_AllDnaPageInfo_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_AllDnaPageInfo_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_AllDnaPageInfo_CSC)
    MergeFrom(*source);
  }
}

void MSG_AllDnaPageInfo_CSC::MergeFrom(const MSG_AllDnaPageInfo_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_AllDnaPageInfo_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pages_.MergeFrom(from.pages_);
}

void MSG_AllDnaPageInfo_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_AllDnaPageInfo_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_AllDnaPageInfo_CSC::CopyFrom(const MSG_AllDnaPageInfo_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_AllDnaPageInfo_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_AllDnaPageInfo_CSC::IsInitialized() const {
  return true;
}

void MSG_AllDnaPageInfo_CSC::InternalSwap(MSG_AllDnaPageInfo_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pages_.InternalSwap(&other->pages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_AllDnaPageInfo_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_SetMainHero_CSC::InitAsDefaultInstance() {
}
class MSG_SetMainHero_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_SetMainHero_CSC>()._has_bits_);
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_SetMainHero_CSC::MSG_SetMainHero_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_SetMainHero_CSC)
}
MSG_SetMainHero_CSC::MSG_SetMainHero_CSC(const MSG_SetMainHero_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&herothisid_, &from.herothisid_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&herothisid_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:hero.MSG_SetMainHero_CSC)
}

void MSG_SetMainHero_CSC::SharedCtor() {
  ::memset(&herothisid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&herothisid_)) + sizeof(errorcode_));
}

MSG_SetMainHero_CSC::~MSG_SetMainHero_CSC() {
  // @@protoc_insertion_point(destructor:hero.MSG_SetMainHero_CSC)
  SharedDtor();
}

void MSG_SetMainHero_CSC::SharedDtor() {
}

void MSG_SetMainHero_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_SetMainHero_CSC& MSG_SetMainHero_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_SetMainHero_CSC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_SetMainHero_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_SetMainHero_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&herothisid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&errorcode_) -
        reinterpret_cast<char*>(&herothisid_)) + sizeof(errorcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_SetMainHero_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 herothisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_herothisid(&has_bits);
          herothisid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 opcode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opcode(&has_bits);
          opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 errorcode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_SetMainHero_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_SetMainHero_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 herothisid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_herothisid(), target);
  }

  // optional uint32 opcode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_opcode(), target);
  }

  // optional uint32 errorcode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_SetMainHero_CSC)
  return target;
}

size_t MSG_SetMainHero_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_SetMainHero_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 herothisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_herothisid());
    }

    // optional uint32 opcode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_opcode());
    }

    // optional uint32 errorcode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errorcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_SetMainHero_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_SetMainHero_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_SetMainHero_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_SetMainHero_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_SetMainHero_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_SetMainHero_CSC)
    MergeFrom(*source);
  }
}

void MSG_SetMainHero_CSC::MergeFrom(const MSG_SetMainHero_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_SetMainHero_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      herothisid_ = from.herothisid_;
    }
    if (cached_has_bits & 0x00000002u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      errorcode_ = from.errorcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_SetMainHero_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_SetMainHero_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_SetMainHero_CSC::CopyFrom(const MSG_SetMainHero_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_SetMainHero_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SetMainHero_CSC::IsInitialized() const {
  return true;
}

void MSG_SetMainHero_CSC::InternalSwap(MSG_SetMainHero_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(herothisid_, other->herothisid_);
  swap(opcode_, other->opcode_);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SetMainHero_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeroScore::InitAsDefaultInstance() {
}
class HeroScore::_Internal {
 public:
  using HasBits = decltype(std::declval<HeroScore>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HeroScore::HeroScore()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.HeroScore)
}
HeroScore::HeroScore(const HeroScore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&thisid_, &from.thisid_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&thisid_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:hero.HeroScore)
}

void HeroScore::SharedCtor() {
  ::memset(&thisid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&thisid_)) + sizeof(score_));
}

HeroScore::~HeroScore() {
  // @@protoc_insertion_point(destructor:hero.HeroScore)
  SharedDtor();
}

void HeroScore::SharedDtor() {
}

void HeroScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeroScore& HeroScore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeroScore_hero_2eproto.base);
  return *internal_default_instance();
}


void HeroScore::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.HeroScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&thisid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&thisid_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* HeroScore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_thisid(&has_bits);
          thisid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeroScore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.HeroScore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_thisid(), target);
  }

  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.HeroScore)
  return target;
}

size_t HeroScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.HeroScore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 thisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_thisid());
    }

    // optional uint32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeroScore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.HeroScore)
  GOOGLE_DCHECK_NE(&from, this);
  const HeroScore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeroScore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.HeroScore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.HeroScore)
    MergeFrom(*source);
  }
}

void HeroScore::MergeFrom(const HeroScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.HeroScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      thisid_ = from.thisid_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeroScore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.HeroScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroScore::CopyFrom(const HeroScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.HeroScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroScore::IsInitialized() const {
  return true;
}

void HeroScore::InternalSwap(HeroScore* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(thisid_, other->thisid_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroScore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NotifyClientHeroScore_SC::InitAsDefaultInstance() {
}
class MSG_NotifyClientHeroScore_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NotifyClientHeroScore_SC>()._has_bits_);
};

MSG_NotifyClientHeroScore_SC::MSG_NotifyClientHeroScore_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hero.MSG_NotifyClientHeroScore_SC)
}
MSG_NotifyClientHeroScore_SC::MSG_NotifyClientHeroScore_SC(const MSG_NotifyClientHeroScore_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      scores_(from.scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hero.MSG_NotifyClientHeroScore_SC)
}

void MSG_NotifyClientHeroScore_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_NotifyClientHeroScore_SC_hero_2eproto.base);
}

MSG_NotifyClientHeroScore_SC::~MSG_NotifyClientHeroScore_SC() {
  // @@protoc_insertion_point(destructor:hero.MSG_NotifyClientHeroScore_SC)
  SharedDtor();
}

void MSG_NotifyClientHeroScore_SC::SharedDtor() {
}

void MSG_NotifyClientHeroScore_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NotifyClientHeroScore_SC& MSG_NotifyClientHeroScore_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NotifyClientHeroScore_SC_hero_2eproto.base);
  return *internal_default_instance();
}


void MSG_NotifyClientHeroScore_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:hero.MSG_NotifyClientHeroScore_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scores_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NotifyClientHeroScore_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .hero.HeroScore scores = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_scores(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NotifyClientHeroScore_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hero.MSG_NotifyClientHeroScore_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hero.HeroScore scores = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scores_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_scores(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hero.MSG_NotifyClientHeroScore_SC)
  return target;
}

size_t MSG_NotifyClientHeroScore_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hero.MSG_NotifyClientHeroScore_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hero.HeroScore scores = 1;
  total_size += 1UL * this->_internal_scores_size();
  for (const auto& msg : this->scores_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NotifyClientHeroScore_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hero.MSG_NotifyClientHeroScore_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NotifyClientHeroScore_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NotifyClientHeroScore_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hero.MSG_NotifyClientHeroScore_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hero.MSG_NotifyClientHeroScore_SC)
    MergeFrom(*source);
  }
}

void MSG_NotifyClientHeroScore_SC::MergeFrom(const MSG_NotifyClientHeroScore_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hero.MSG_NotifyClientHeroScore_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scores_.MergeFrom(from.scores_);
}

void MSG_NotifyClientHeroScore_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hero.MSG_NotifyClientHeroScore_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NotifyClientHeroScore_SC::CopyFrom(const MSG_NotifyClientHeroScore_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hero.MSG_NotifyClientHeroScore_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NotifyClientHeroScore_SC::IsInitialized() const {
  return true;
}

void MSG_NotifyClientHeroScore_SC::InternalSwap(MSG_NotifyClientHeroScore_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scores_.InternalSwap(&other->scores_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NotifyClientHeroScore_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hero
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hero::Hero* Arena::CreateMaybeMessage< ::hero::Hero >(Arena* arena) {
  return Arena::CreateInternal< ::hero::Hero >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::HeroShow* Arena::CreateMaybeMessage< ::hero::HeroShow >(Arena* arena) {
  return Arena::CreateInternal< ::hero::HeroShow >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::HeroTrain* Arena::CreateMaybeMessage< ::hero::HeroTrain >(Arena* arena) {
  return Arena::CreateInternal< ::hero::HeroTrain >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::HeroSkillItem* Arena::CreateMaybeMessage< ::hero::HeroSkillItem >(Arena* arena) {
  return Arena::CreateInternal< ::hero::HeroSkillItem >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::HeroSkill* Arena::CreateMaybeMessage< ::hero::HeroSkill >(Arena* arena) {
  return Arena::CreateInternal< ::hero::HeroSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::HeroAvatar* Arena::CreateMaybeMessage< ::hero::HeroAvatar >(Arena* arena) {
  return Arena::CreateInternal< ::hero::HeroAvatar >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::HeroEvolution* Arena::CreateMaybeMessage< ::hero::HeroEvolution >(Arena* arena) {
  return Arena::CreateInternal< ::hero::HeroEvolution >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqSwitchHero_CS* Arena::CreateMaybeMessage< ::hero::MSG_ReqSwitchHero_CS >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqSwitchHero_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_RetSwitchHero_SC* Arena::CreateMaybeMessage< ::hero::MSG_RetSwitchHero_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_RetSwitchHero_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_NotifyAllHeros_SC* Arena::CreateMaybeMessage< ::hero::MSG_NotifyAllHeros_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_NotifyAllHeros_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_NotifyHeroChange_SC* Arena::CreateMaybeMessage< ::hero::MSG_NotifyHeroChange_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_NotifyHeroChange_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqHeroTrain_CS* Arena::CreateMaybeMessage< ::hero::MSG_ReqHeroTrain_CS >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqHeroTrain_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_RetHeroTrain_SC* Arena::CreateMaybeMessage< ::hero::MSG_RetHeroTrain_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_RetHeroTrain_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqLockUnlockHero_CS* Arena::CreateMaybeMessage< ::hero::MSG_ReqLockUnlockHero_CS >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqLockUnlockHero_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_RetLockUnlockHero_SC* Arena::CreateMaybeMessage< ::hero::MSG_RetLockUnlockHero_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_RetLockUnlockHero_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqLevelupHeroSkill_CS* Arena::CreateMaybeMessage< ::hero::MSG_ReqLevelupHeroSkill_CS >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqLevelupHeroSkill_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_RetLevelupHeroSkill_SC* Arena::CreateMaybeMessage< ::hero::MSG_RetLevelupHeroSkill_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_RetLevelupHeroSkill_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_notifyRefreshHero_SC* Arena::CreateMaybeMessage< ::hero::MSG_notifyRefreshHero_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_notifyRefreshHero_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqRiseStar_CS* Arena::CreateMaybeMessage< ::hero::MSG_ReqRiseStar_CS >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqRiseStar_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_RetRiseStar_SC* Arena::CreateMaybeMessage< ::hero::MSG_RetRiseStar_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_RetRiseStar_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::DnaItem* Arena::CreateMaybeMessage< ::hero::DnaItem >(Arena* arena) {
  return Arena::CreateInternal< ::hero::DnaItem >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_DnaBagInfo_CSC* Arena::CreateMaybeMessage< ::hero::MSG_DnaBagInfo_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_DnaBagInfo_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::Hole* Arena::CreateMaybeMessage< ::hero::Hole >(Arena* arena) {
  return Arena::CreateInternal< ::hero::Hole >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_DnaPageInfo_CSC* Arena::CreateMaybeMessage< ::hero::MSG_DnaPageInfo_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_DnaPageInfo_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqPutOnDna_CS* Arena::CreateMaybeMessage< ::hero::MSG_ReqPutOnDna_CS >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqPutOnDna_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqPutOffDna_CS* Arena::CreateMaybeMessage< ::hero::MSG_ReqPutOffDna_CS >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqPutOffDna_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqCombineDna_CS* Arena::CreateMaybeMessage< ::hero::MSG_ReqCombineDna_CS >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqCombineDna_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqChangeCurDnaPage_CS* Arena::CreateMaybeMessage< ::hero::MSG_ReqChangeCurDnaPage_CS >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqChangeCurDnaPage_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqCombineDnaInBag_CS* Arena::CreateMaybeMessage< ::hero::MSG_ReqCombineDnaInBag_CS >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqCombineDnaInBag_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ReqBuySlot_SC* Arena::CreateMaybeMessage< ::hero::MSG_ReqBuySlot_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ReqBuySlot_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_ResponseSlotOpened_SC* Arena::CreateMaybeMessage< ::hero::MSG_ResponseSlotOpened_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_ResponseSlotOpened_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_AllDnaPageInfo_CSC* Arena::CreateMaybeMessage< ::hero::MSG_AllDnaPageInfo_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_AllDnaPageInfo_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_SetMainHero_CSC* Arena::CreateMaybeMessage< ::hero::MSG_SetMainHero_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_SetMainHero_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::HeroScore* Arena::CreateMaybeMessage< ::hero::HeroScore >(Arena* arena) {
  return Arena::CreateInternal< ::hero::HeroScore >(arena);
}
template<> PROTOBUF_NOINLINE ::hero::MSG_NotifyClientHeroScore_SC* Arena::CreateMaybeMessage< ::hero::MSG_NotifyClientHeroScore_SC >(Arena* arena) {
  return Arena::CreateInternal< ::hero::MSG_NotifyClientHeroScore_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
