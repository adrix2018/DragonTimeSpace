// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subtitle.proto

#include "subtitle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_subtitle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CutSceneSubTitle_subtitle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_subtitle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubtitleContent_subtitle_2eproto;
namespace Subtitle {
class SubtitleContentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubtitleContent> _instance;
} _SubtitleContent_default_instance_;
class CutSceneSubTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CutSceneSubTitle> _instance;
} _CutSceneSubTitle_default_instance_;
class TotalCutSceneSubTitleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TotalCutSceneSubTitle> _instance;
} _TotalCutSceneSubTitle_default_instance_;
}  // namespace Subtitle
static void InitDefaultsscc_info_CutSceneSubTitle_subtitle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Subtitle::_CutSceneSubTitle_default_instance_;
    new (ptr) ::Subtitle::CutSceneSubTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Subtitle::CutSceneSubTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CutSceneSubTitle_subtitle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CutSceneSubTitle_subtitle_2eproto}, {
      &scc_info_SubtitleContent_subtitle_2eproto.base,}};

static void InitDefaultsscc_info_SubtitleContent_subtitle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Subtitle::_SubtitleContent_default_instance_;
    new (ptr) ::Subtitle::SubtitleContent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Subtitle::SubtitleContent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubtitleContent_subtitle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubtitleContent_subtitle_2eproto}, {}};

static void InitDefaultsscc_info_TotalCutSceneSubTitle_subtitle_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Subtitle::_TotalCutSceneSubTitle_default_instance_;
    new (ptr) ::Subtitle::TotalCutSceneSubTitle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Subtitle::TotalCutSceneSubTitle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TotalCutSceneSubTitle_subtitle_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TotalCutSceneSubTitle_subtitle_2eproto}, {
      &scc_info_CutSceneSubTitle_subtitle_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_subtitle_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_subtitle_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_subtitle_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_subtitle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Subtitle::SubtitleContent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Subtitle::SubtitleContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Subtitle::SubtitleContent, showtime_),
  PROTOBUF_FIELD_OFFSET(::Subtitle::SubtitleContent, subtitle_),
  PROTOBUF_FIELD_OFFSET(::Subtitle::SubtitleContent, duration_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::Subtitle::CutSceneSubTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Subtitle::CutSceneSubTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Subtitle::CutSceneSubTitle, key_),
  PROTOBUF_FIELD_OFFSET(::Subtitle::CutSceneSubTitle, subtitlelist_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Subtitle::TotalCutSceneSubTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Subtitle::TotalCutSceneSubTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Subtitle::TotalCutSceneSubTitle, subtitlelist_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::Subtitle::SubtitleContent)},
  { 11, 18, sizeof(::Subtitle::CutSceneSubTitle)},
  { 20, 26, sizeof(::Subtitle::TotalCutSceneSubTitle)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Subtitle::_SubtitleContent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Subtitle::_CutSceneSubTitle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Subtitle::_TotalCutSceneSubTitle_default_instance_),
};

const char descriptor_table_protodef_subtitle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016subtitle.proto\022\010Subtitle\"G\n\017SubtitleCo"
  "ntent\022\020\n\010showTime\030\001 \001(\002\022\020\n\010subtitle\030\002 \001("
  "\t\022\020\n\010duration\030\003 \001(\002\"P\n\020CutSceneSubTitle\022"
  "\013\n\003key\030\001 \001(\t\022/\n\014subtitlelist\030\002 \003(\0132\031.Sub"
  "title.SubtitleContent\"I\n\025TotalCutSceneSu"
  "bTitle\0220\n\014subtitlelist\030\001 \003(\0132\032.Subtitle."
  "CutSceneSubTitle"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_subtitle_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_subtitle_2eproto_sccs[3] = {
  &scc_info_CutSceneSubTitle_subtitle_2eproto.base,
  &scc_info_SubtitleContent_subtitle_2eproto.base,
  &scc_info_TotalCutSceneSubTitle_subtitle_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_subtitle_2eproto_once;
static bool descriptor_table_subtitle_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_subtitle_2eproto = {
  &descriptor_table_subtitle_2eproto_initialized, descriptor_table_protodef_subtitle_2eproto, "subtitle.proto", 256,
  &descriptor_table_subtitle_2eproto_once, descriptor_table_subtitle_2eproto_sccs, descriptor_table_subtitle_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_subtitle_2eproto::offsets,
  file_level_metadata_subtitle_2eproto, 3, file_level_enum_descriptors_subtitle_2eproto, file_level_service_descriptors_subtitle_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_subtitle_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_subtitle_2eproto)), true);
namespace Subtitle {

// ===================================================================

void SubtitleContent::InitAsDefaultInstance() {
}
class SubtitleContent::_Internal {
 public:
  using HasBits = decltype(std::declval<SubtitleContent>()._has_bits_);
  static void set_has_showtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SubtitleContent::SubtitleContent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Subtitle.SubtitleContent)
}
SubtitleContent::SubtitleContent(const SubtitleContent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subtitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_subtitle()) {
    subtitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtitle_);
  }
  ::memcpy(&showtime_, &from.showtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&showtime_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:Subtitle.SubtitleContent)
}

void SubtitleContent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubtitleContent_subtitle_2eproto.base);
  subtitle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&showtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&showtime_)) + sizeof(duration_));
}

SubtitleContent::~SubtitleContent() {
  // @@protoc_insertion_point(destructor:Subtitle.SubtitleContent)
  SharedDtor();
}

void SubtitleContent::SharedDtor() {
  subtitle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubtitleContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubtitleContent& SubtitleContent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubtitleContent_subtitle_2eproto.base);
  return *internal_default_instance();
}


void SubtitleContent::Clear() {
// @@protoc_insertion_point(message_clear_start:Subtitle.SubtitleContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    subtitle_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&showtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&showtime_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SubtitleContent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float showTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_showtime(&has_bits);
          showtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string subtitle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_subtitle();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Subtitle.SubtitleContent.subtitle");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubtitleContent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Subtitle.SubtitleContent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float showTime = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_showtime(), target);
  }

  // optional string subtitle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_subtitle().data(), static_cast<int>(this->_internal_subtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Subtitle.SubtitleContent.subtitle");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subtitle(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Subtitle.SubtitleContent)
  return target;
}

size_t SubtitleContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Subtitle.SubtitleContent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string subtitle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_subtitle());
    }

    // optional float showTime = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubtitleContent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Subtitle.SubtitleContent)
  GOOGLE_DCHECK_NE(&from, this);
  const SubtitleContent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubtitleContent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Subtitle.SubtitleContent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Subtitle.SubtitleContent)
    MergeFrom(*source);
  }
}

void SubtitleContent::MergeFrom(const SubtitleContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Subtitle.SubtitleContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      subtitle_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subtitle_);
    }
    if (cached_has_bits & 0x00000002u) {
      showtime_ = from.showtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubtitleContent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Subtitle.SubtitleContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubtitleContent::CopyFrom(const SubtitleContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Subtitle.SubtitleContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubtitleContent::IsInitialized() const {
  return true;
}

void SubtitleContent::InternalSwap(SubtitleContent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subtitle_.Swap(&other->subtitle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(showtime_, other->showtime_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubtitleContent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CutSceneSubTitle::InitAsDefaultInstance() {
}
class CutSceneSubTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<CutSceneSubTitle>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CutSceneSubTitle::CutSceneSubTitle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Subtitle.CutSceneSubTitle)
}
CutSceneSubTitle::CutSceneSubTitle(const CutSceneSubTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      subtitlelist_(from.subtitlelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:Subtitle.CutSceneSubTitle)
}

void CutSceneSubTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CutSceneSubTitle_subtitle_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CutSceneSubTitle::~CutSceneSubTitle() {
  // @@protoc_insertion_point(destructor:Subtitle.CutSceneSubTitle)
  SharedDtor();
}

void CutSceneSubTitle::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CutSceneSubTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CutSceneSubTitle& CutSceneSubTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CutSceneSubTitle_subtitle_2eproto.base);
  return *internal_default_instance();
}


void CutSceneSubTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:Subtitle.CutSceneSubTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subtitlelist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CutSceneSubTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Subtitle.CutSceneSubTitle.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Subtitle.SubtitleContent subtitlelist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subtitlelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CutSceneSubTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Subtitle.CutSceneSubTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Subtitle.CutSceneSubTitle.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated .Subtitle.SubtitleContent subtitlelist = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subtitlelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_subtitlelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Subtitle.CutSceneSubTitle)
  return target;
}

size_t CutSceneSubTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Subtitle.CutSceneSubTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Subtitle.SubtitleContent subtitlelist = 2;
  total_size += 1UL * this->_internal_subtitlelist_size();
  for (const auto& msg : this->subtitlelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CutSceneSubTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Subtitle.CutSceneSubTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CutSceneSubTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CutSceneSubTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Subtitle.CutSceneSubTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Subtitle.CutSceneSubTitle)
    MergeFrom(*source);
  }
}

void CutSceneSubTitle::MergeFrom(const CutSceneSubTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Subtitle.CutSceneSubTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subtitlelist_.MergeFrom(from.subtitlelist_);
  if (from._internal_has_key()) {
    _has_bits_[0] |= 0x00000001u;
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void CutSceneSubTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Subtitle.CutSceneSubTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CutSceneSubTitle::CopyFrom(const CutSceneSubTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Subtitle.CutSceneSubTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CutSceneSubTitle::IsInitialized() const {
  return true;
}

void CutSceneSubTitle::InternalSwap(CutSceneSubTitle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subtitlelist_.InternalSwap(&other->subtitlelist_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CutSceneSubTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TotalCutSceneSubTitle::InitAsDefaultInstance() {
}
class TotalCutSceneSubTitle::_Internal {
 public:
  using HasBits = decltype(std::declval<TotalCutSceneSubTitle>()._has_bits_);
};

TotalCutSceneSubTitle::TotalCutSceneSubTitle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Subtitle.TotalCutSceneSubTitle)
}
TotalCutSceneSubTitle::TotalCutSceneSubTitle(const TotalCutSceneSubTitle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      subtitlelist_(from.subtitlelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Subtitle.TotalCutSceneSubTitle)
}

void TotalCutSceneSubTitle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TotalCutSceneSubTitle_subtitle_2eproto.base);
}

TotalCutSceneSubTitle::~TotalCutSceneSubTitle() {
  // @@protoc_insertion_point(destructor:Subtitle.TotalCutSceneSubTitle)
  SharedDtor();
}

void TotalCutSceneSubTitle::SharedDtor() {
}

void TotalCutSceneSubTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TotalCutSceneSubTitle& TotalCutSceneSubTitle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TotalCutSceneSubTitle_subtitle_2eproto.base);
  return *internal_default_instance();
}


void TotalCutSceneSubTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:Subtitle.TotalCutSceneSubTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subtitlelist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TotalCutSceneSubTitle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Subtitle.CutSceneSubTitle subtitlelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subtitlelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TotalCutSceneSubTitle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Subtitle.TotalCutSceneSubTitle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Subtitle.CutSceneSubTitle subtitlelist = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subtitlelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subtitlelist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Subtitle.TotalCutSceneSubTitle)
  return target;
}

size_t TotalCutSceneSubTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Subtitle.TotalCutSceneSubTitle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Subtitle.CutSceneSubTitle subtitlelist = 1;
  total_size += 1UL * this->_internal_subtitlelist_size();
  for (const auto& msg : this->subtitlelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TotalCutSceneSubTitle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Subtitle.TotalCutSceneSubTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const TotalCutSceneSubTitle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TotalCutSceneSubTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Subtitle.TotalCutSceneSubTitle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Subtitle.TotalCutSceneSubTitle)
    MergeFrom(*source);
  }
}

void TotalCutSceneSubTitle::MergeFrom(const TotalCutSceneSubTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Subtitle.TotalCutSceneSubTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subtitlelist_.MergeFrom(from.subtitlelist_);
}

void TotalCutSceneSubTitle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Subtitle.TotalCutSceneSubTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotalCutSceneSubTitle::CopyFrom(const TotalCutSceneSubTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Subtitle.TotalCutSceneSubTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalCutSceneSubTitle::IsInitialized() const {
  return true;
}

void TotalCutSceneSubTitle::InternalSwap(TotalCutSceneSubTitle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subtitlelist_.InternalSwap(&other->subtitlelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TotalCutSceneSubTitle::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Subtitle
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Subtitle::SubtitleContent* Arena::CreateMaybeMessage< ::Subtitle::SubtitleContent >(Arena* arena) {
  return Arena::CreateInternal< ::Subtitle::SubtitleContent >(arena);
}
template<> PROTOBUF_NOINLINE ::Subtitle::CutSceneSubTitle* Arena::CreateMaybeMessage< ::Subtitle::CutSceneSubTitle >(Arena* arena) {
  return Arena::CreateInternal< ::Subtitle::CutSceneSubTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::Subtitle::TotalCutSceneSubTitle* Arena::CreateMaybeMessage< ::Subtitle::TotalCutSceneSubTitle >(Arena* arena) {
  return Arena::CreateInternal< ::Subtitle::TotalCutSceneSubTitle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
