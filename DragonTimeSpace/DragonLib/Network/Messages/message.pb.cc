// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttributeData_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterBaseData_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterFightData_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CharacterMainData_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CharacterMapData_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterMapShow_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_msg_5fenum_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EntryIDType_msg_5fenum_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatMovePos_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FuncNpcData_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LineItem_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MapNpcData_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapUserData_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MasterData_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveData_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NPC_HatredList_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectUserInfo_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateItem_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TempNpcInfo_message_2eproto;
namespace msg {
class CharacterBaseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacterBaseData> _instance;
} _CharacterBaseData_default_instance_;
class AttributeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AttributeData> _instance;
} _AttributeData_default_instance_;
class CharacterFightDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacterFightData> _instance;
} _CharacterFightData_default_instance_;
class CharacterMainDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacterMainData> _instance;
} _CharacterMainData_default_instance_;
class CharacterMapShowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacterMapShow> _instance;
} _CharacterMapShow_default_instance_;
class CharacterMapDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CharacterMapData> _instance;
} _CharacterMapData_default_instance_;
class StateItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateItem> _instance;
} _StateItem_default_instance_;
class MapUserDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapUserData> _instance;
} _MapUserData_default_instance_;
class MasterDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MasterData> _instance;
} _MasterData_default_instance_;
class MapNpcDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapNpcData> _instance;
} _MapNpcData_default_instance_;
class MSG_Create_Role_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Create_Role_CS> _instance;
} _MSG_Create_Role_CS_default_instance_;
class MSG_ChangeName_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ChangeName_CS> _instance;
} _MSG_ChangeName_CS_default_instance_;
class MSG_Ret_ChangeName_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_ChangeName_SC> _instance;
} _MSG_Ret_ChangeName_SC_default_instance_;
class MSG_DataCharacterMain_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_DataCharacterMain_SC> _instance;
} _MSG_DataCharacterMain_SC_default_instance_;
class MSG_Req_Use_GM_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Use_GM_CS> _instance;
} _MSG_Req_Use_GM_CS_default_instance_;
class MSG_Ret_Common_Error_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Common_Error_SC> _instance;
} _MSG_Ret_Common_Error_SC_default_instance_;
class MSG_Ret_Common_Tips_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Common_Tips_SC> _instance;
} _MSG_Ret_Common_Tips_SC_default_instance_;
class MSG_Req_Main_Data_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Main_Data_CS> _instance;
} _MSG_Req_Main_Data_CS_default_instance_;
class MSG_Req_Test_Network_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Test_Network_CS> _instance;
} _MSG_Req_Test_Network_CS_default_instance_;
class MSG_Ret_GameTime_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_GameTime_SC> _instance;
} _MSG_Ret_GameTime_SC_default_instance_;
class MSG_Req_UserGameTime_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_UserGameTime_SC> _instance;
} _MSG_Req_UserGameTime_SC_default_instance_;
class MSG_Ret_UserGameTime_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_UserGameTime_CS> _instance;
} _MSG_Ret_UserGameTime_CS_default_instance_;
class MSG_Ret_ServerTime_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_ServerTime_SC> _instance;
} _MSG_Ret_ServerTime_SC_default_instance_;
class MSG_Ret_NotifyUserKickout_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_NotifyUserKickout_SC> _instance;
} _MSG_Ret_NotifyUserKickout_SC_default_instance_;
class MSG_Ret_ServerLoginFailed_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_ServerLoginFailed_SC> _instance;
} _MSG_Ret_ServerLoginFailed_SC_default_instance_;
class MSG_Ret_QueueInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_QueueInfo_SC> _instance;
} _MSG_Ret_QueueInfo_SC_default_instance_;
class MSG_Ret_UserMapInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_UserMapInfo_SC> _instance;
} _MSG_Ret_UserMapInfo_SC_default_instance_;
class MSG_Ret_NineScreenRefreshPlayer_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_NineScreenRefreshPlayer_SC> _instance;
} _MSG_Ret_NineScreenRefreshPlayer_SC_default_instance_;
class MSG_Ret_MapScreenRefreshCharacter_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MapScreenRefreshCharacter_SC> _instance;
} _MSG_Ret_MapScreenRefreshCharacter_SC_default_instance_;
class MSG_Ret_MapScreenRemoveCharacter_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MapScreenRemoveCharacter_SC> _instance;
} _MSG_Ret_MapScreenRemoveCharacter_SC_default_instance_;
class MSG_Ret_MapScreenRemoveCharacterShowCorpse_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC> _instance;
} _MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC_default_instance_;
class MSG_Ret_MapScreenBatchRemoveCharacter_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MapScreenBatchRemoveCharacter_SC> _instance;
} _MSG_Ret_MapScreenBatchRemoveCharacter_SC_default_instance_;
class MSG_Ret_StateList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_StateList_SC> _instance;
} _MSG_Ret_StateList_SC_default_instance_;
class FloatMovePosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatMovePos> _instance;
} _FloatMovePos_default_instance_;
class MoveDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveData> _instance;
} _MoveData_default_instance_;
class MSG_Req_Move_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Move_CS> _instance;
} _MSG_Req_Move_CS_default_instance_;
class MSG_Ret_Move_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Move_SC> _instance;
} _MSG_Ret_Move_SC_default_instance_;
class MSG_Req_TELE_PORT_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_TELE_PORT_CS> _instance;
} _MSG_Req_TELE_PORT_CS_default_instance_;
class MSG_Server_Force_Move_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Server_Force_Move_SC> _instance;
} _MSG_Server_Force_Move_SC_default_instance_;
class MSG_Ret_Move_Failed_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Move_Failed_SC> _instance;
} _MSG_Ret_Move_Failed_SC_default_instance_;
class MSG_Ret_SetState_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_SetState_SC> _instance;
} _MSG_Ret_SetState_SC_default_instance_;
class MSG_Ret_ClearState_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_ClearState_SC> _instance;
} _MSG_Ret_ClearState_SC_default_instance_;
class MSG_Ret_MapScreenBatchRefreshNpc_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MapScreenBatchRefreshNpc_SC> _instance;
} _MSG_Ret_MapScreenBatchRefreshNpc_SC_default_instance_;
class MSG_Ret_MapScreenBatchRemoveNpc_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MapScreenBatchRemoveNpc_SC> _instance;
} _MSG_Ret_MapScreenBatchRemoveNpc_SC_default_instance_;
class MSG_Ret_MapScreenRefreshNpc_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MapScreenRefreshNpc_SC> _instance;
} _MSG_Ret_MapScreenRefreshNpc_SC_default_instance_;
class MSG_Ret_MapScreenRemoveNpc_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MapScreenRemoveNpc_SC> _instance;
} _MSG_Ret_MapScreenRemoveNpc_SC_default_instance_;
class FuncNpcDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FuncNpcData> _instance;
} _FuncNpcData_default_instance_;
class MSG_Ret_MapScreenFuncNpc_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_MapScreenFuncNpc_SC> _instance;
} _MSG_Ret_MapScreenFuncNpc_SC_default_instance_;
class MSG_Ret_RetNpcMove_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_RetNpcMove_SC> _instance;
} _MSG_Ret_RetNpcMove_SC_default_instance_;
class MSG_RetNpcWarpMove_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetNpcWarpMove_SC> _instance;
} _MSG_RetNpcWarpMove_SC_default_instance_;
class MSG_RetNpcDir_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetNpcDir_SC> _instance;
} _MSG_RetNpcDir_SC_default_instance_;
class TempNpcInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TempNpcInfo> _instance;
} _TempNpcInfo_default_instance_;
class MSG_Req_Summon_Npc_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Summon_Npc_CS> _instance;
} _MSG_Req_Summon_Npc_CS_default_instance_;
class MSG_Ret_setTimeState_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_setTimeState_SC> _instance;
} _MSG_Ret_setTimeState_SC_default_instance_;
class MSG_Req_Ping_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Ping_CS> _instance;
} _MSG_Req_Ping_CS_default_instance_;
class MSG_Ret_VisibleNpcList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_VisibleNpcList_SC> _instance;
} _MSG_Ret_VisibleNpcList_SC_default_instance_;
class MSG_RetNinePlayerLevelUp_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetNinePlayerLevelUp_SC> _instance;
} _MSG_RetNinePlayerLevelUp_SC_default_instance_;
class MSG_UpdateExpLevel_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_UpdateExpLevel_SC> _instance;
} _MSG_UpdateExpLevel_SC_default_instance_;
class MSG_NotifyAntiAddict_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NotifyAntiAddict_SC> _instance;
} _MSG_NotifyAntiAddict_SC_default_instance_;
class MSG_ReqUpdateAntiAddict_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqUpdateAntiAddict_CS> _instance;
} _MSG_ReqUpdateAntiAddict_CS_default_instance_;
class MSG_ReqEntrySelectState_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqEntrySelectState_CS> _instance;
} _MSG_ReqEntrySelectState_CS_default_instance_;
class MSG_RetEntrySelectState_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetEntrySelectState_SC> _instance;
} _MSG_RetEntrySelectState_SC_default_instance_;
class MSG_RetHpMpToSelects_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetHpMpToSelects_SC> _instance;
} _MSG_RetHpMpToSelects_SC_default_instance_;
class MSG_ReqHeroAttributeData_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqHeroAttributeData_CS> _instance;
} _MSG_ReqHeroAttributeData_CS_default_instance_;
class MSG_RetHeroAttributeData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetHeroAttributeData_SC> _instance;
} _MSG_RetHeroAttributeData_SC_default_instance_;
class MSG_RetDiffLineOfLeader_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetDiffLineOfLeader_SC> _instance;
} _MSG_RetDiffLineOfLeader_SC_default_instance_;
class MSG_ReqJumptoLeaderLine_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqJumptoLeaderLine_CS> _instance;
} _MSG_ReqJumptoLeaderLine_CS_default_instance_;
class SelectUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SelectUserInfo> _instance;
} _SelectUserInfo_default_instance_;
class MSG_Ret_LoginOnReturnCharList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_LoginOnReturnCharList_SC> _instance;
} _MSG_Ret_LoginOnReturnCharList_SC_default_instance_;
class MSG_Req_SelectCharToLogin_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_SelectCharToLogin_CS> _instance;
} _MSG_Req_SelectCharToLogin_CS_default_instance_;
class MSG_Req_IS_NICKNAME_REPEATED_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_IS_NICKNAME_REPEATED_CSC> _instance;
} _MSG_Req_IS_NICKNAME_REPEATED_CSC_default_instance_;
class MSG_Req_Back_to_Select_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Back_to_Select_CS> _instance;
} _MSG_Req_Back_to_Select_CS_default_instance_;
class MSG_Req_Delete_Char_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Delete_Char_CSC> _instance;
} _MSG_Req_Delete_Char_CSC_default_instance_;
class MSG_Req_Syn_MoveState_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_Syn_MoveState_CS> _instance;
} _MSG_Req_Syn_MoveState_CS_default_instance_;
class MSG_Ret_Find_Path_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Find_Path_SC> _instance;
} _MSG_Ret_Find_Path_SC_default_instance_;
class MSG_Ret_Rondom_Way_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Rondom_Way_SC> _instance;
} _MSG_Ret_Rondom_Way_SC_default_instance_;
class MSG_Ret_Find_Path_End_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_Find_Path_End_SC> _instance;
} _MSG_Ret_Find_Path_End_SC_default_instance_;
class MSG_Show_Path_Way_End_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Show_Path_Way_End_CS> _instance;
} _MSG_Show_Path_Way_End_CS_default_instance_;
class LineItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LineItem> _instance;
} _LineItem_default_instance_;
class MSG_NoticeClientAllLines_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NoticeClientAllLines_SC> _instance;
} _MSG_NoticeClientAllLines_SC_default_instance_;
class MSG_UserReqChangeLine_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_UserReqChangeLine_CS> _instance;
} _MSG_UserReqChangeLine_CS_default_instance_;
class MSG_OnUserJump_CSCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_OnUserJump_CSC> _instance;
} _MSG_OnUserJump_CSC_default_instance_;
class MSG_NPCHatredList_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NPCHatredList_SC> _instance;
} _MSG_NPCHatredList_SC_default_instance_;
class NPC_HatredListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NPC_HatredList> _instance;
} _NPC_HatredList_default_instance_;
class MSG_ACCOUNT_SEC_PASSWD_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ACCOUNT_SEC_PASSWD_SC> _instance;
} _MSG_ACCOUNT_SEC_PASSWD_SC_default_instance_;
class MSG_USER_REQ_SETPASSWD_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_USER_REQ_SETPASSWD_CS> _instance;
} _MSG_USER_REQ_SETPASSWD_CS_default_instance_;
class MSG_NEW_ROLE_CUTSCENE_SCSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NEW_ROLE_CUTSCENE_SCS> _instance;
} _MSG_NEW_ROLE_CUTSCENE_SCS_default_instance_;
class MSG_User_Drop_SCSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_User_Drop_SCS> _instance;
} _MSG_User_Drop_SCS_default_instance_;
class MSG_START_CUTSCENE_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_START_CUTSCENE_SC> _instance;
} _MSG_START_CUTSCENE_SC_default_instance_;
class MSG_UserLoadingOk_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_UserLoadingOk_CS> _instance;
} _MSG_UserLoadingOk_CS_default_instance_;
class MSG_ReqQueryBalance_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqQueryBalance_CS> _instance;
} _MSG_ReqQueryBalance_CS_default_instance_;
class MSG_RetQueryBalance_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetQueryBalance_SC> _instance;
} _MSG_RetQueryBalance_SC_default_instance_;
class MSG_ReqRecharge_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqRecharge_CS> _instance;
} _MSG_ReqRecharge_CS_default_instance_;
class MSG_RetRecharge_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRecharge_SC> _instance;
} _MSG_RetRecharge_SC_default_instance_;
class MSG_SetChooseTarget_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_SetChooseTarget_CS> _instance;
} _MSG_SetChooseTarget_CS_default_instance_;
class MSG_AttackTargetChange_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_AttackTargetChange_SC> _instance;
} _MSG_AttackTargetChange_SC_default_instance_;
class MSG_NotifyAccountReuseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NotifyAccountReuse> _instance;
} _MSG_NotifyAccountReuse_default_instance_;
class MSG_Notify_SceneLoaded_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Notify_SceneLoaded_CS> _instance;
} _MSG_Notify_SceneLoaded_CS_default_instance_;
class MSG_Upload_Crash_InfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Upload_Crash_Info> _instance;
} _MSG_Upload_Crash_Info_default_instance_;
}  // namespace msg
static void InitDefaultsscc_info_AttributeData_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_AttributeData_default_instance_;
    new (ptr) ::msg::AttributeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::AttributeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AttributeData_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AttributeData_message_2eproto}, {}};

static void InitDefaultsscc_info_CharacterBaseData_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_CharacterBaseData_default_instance_;
    new (ptr) ::msg::CharacterBaseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::CharacterBaseData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterBaseData_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CharacterBaseData_message_2eproto}, {}};

static void InitDefaultsscc_info_CharacterFightData_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_CharacterFightData_default_instance_;
    new (ptr) ::msg::CharacterFightData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::CharacterFightData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterFightData_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CharacterFightData_message_2eproto}, {}};

static void InitDefaultsscc_info_CharacterMainData_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_CharacterMainData_default_instance_;
    new (ptr) ::msg::CharacterMainData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::CharacterMainData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CharacterMainData_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CharacterMainData_message_2eproto}, {
      &scc_info_CharacterBaseData_message_2eproto.base,
      &scc_info_AttributeData_message_2eproto.base,
      &scc_info_MapUserData_message_2eproto.base,
      &scc_info_CharacterFightData_message_2eproto.base,}};

static void InitDefaultsscc_info_CharacterMapData_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_CharacterMapData_default_instance_;
    new (ptr) ::msg::CharacterMapData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::CharacterMapData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CharacterMapData_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CharacterMapData_message_2eproto}, {
      &scc_info_FloatMovePos_message_2eproto.base,
      &scc_info_StateItem_message_2eproto.base,}};

static void InitDefaultsscc_info_CharacterMapShow_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_CharacterMapShow_default_instance_;
    new (ptr) ::msg::CharacterMapShow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::CharacterMapShow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CharacterMapShow_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CharacterMapShow_message_2eproto}, {}};

static void InitDefaultsscc_info_FloatMovePos_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_FloatMovePos_default_instance_;
    new (ptr) ::msg::FloatMovePos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::FloatMovePos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatMovePos_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FloatMovePos_message_2eproto}, {}};

static void InitDefaultsscc_info_FuncNpcData_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_FuncNpcData_default_instance_;
    new (ptr) ::msg::FuncNpcData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::FuncNpcData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FuncNpcData_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FuncNpcData_message_2eproto}, {}};

static void InitDefaultsscc_info_LineItem_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_LineItem_default_instance_;
    new (ptr) ::msg::LineItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::LineItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LineItem_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LineItem_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ACCOUNT_SEC_PASSWD_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_ACCOUNT_SEC_PASSWD_SC_default_instance_;
    new (ptr) ::msg::MSG_ACCOUNT_SEC_PASSWD_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_ACCOUNT_SEC_PASSWD_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ACCOUNT_SEC_PASSWD_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ACCOUNT_SEC_PASSWD_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_AttackTargetChange_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_AttackTargetChange_SC_default_instance_;
    new (ptr) ::msg::MSG_AttackTargetChange_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_AttackTargetChange_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_AttackTargetChange_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_AttackTargetChange_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ChangeName_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_ChangeName_CS_default_instance_;
    new (ptr) ::msg::MSG_ChangeName_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_ChangeName_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ChangeName_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ChangeName_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Create_Role_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Create_Role_CS_default_instance_;
    new (ptr) ::msg::MSG_Create_Role_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Create_Role_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Create_Role_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Create_Role_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_DataCharacterMain_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_DataCharacterMain_SC_default_instance_;
    new (ptr) ::msg::MSG_DataCharacterMain_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_DataCharacterMain_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_DataCharacterMain_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_DataCharacterMain_SC_message_2eproto}, {
      &scc_info_CharacterMainData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_NEW_ROLE_CUTSCENE_SCS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_NEW_ROLE_CUTSCENE_SCS_default_instance_;
    new (ptr) ::msg::MSG_NEW_ROLE_CUTSCENE_SCS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_NEW_ROLE_CUTSCENE_SCS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_NEW_ROLE_CUTSCENE_SCS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_NEW_ROLE_CUTSCENE_SCS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_NPCHatredList_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_NPCHatredList_SC_default_instance_;
    new (ptr) ::msg::MSG_NPCHatredList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_NPCHatredList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_NPCHatredList_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_NPCHatredList_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_NoticeClientAllLines_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_NoticeClientAllLines_SC_default_instance_;
    new (ptr) ::msg::MSG_NoticeClientAllLines_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_NoticeClientAllLines_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_NoticeClientAllLines_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_NoticeClientAllLines_SC_message_2eproto}, {
      &scc_info_LineItem_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_NotifyAccountReuse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_NotifyAccountReuse_default_instance_;
    new (ptr) ::msg::MSG_NotifyAccountReuse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_NotifyAccountReuse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_NotifyAccountReuse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_NotifyAccountReuse_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_NotifyAntiAddict_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_NotifyAntiAddict_SC_default_instance_;
    new (ptr) ::msg::MSG_NotifyAntiAddict_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_NotifyAntiAddict_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_NotifyAntiAddict_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_NotifyAntiAddict_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Notify_SceneLoaded_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Notify_SceneLoaded_CS_default_instance_;
    new (ptr) ::msg::MSG_Notify_SceneLoaded_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Notify_SceneLoaded_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Notify_SceneLoaded_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Notify_SceneLoaded_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_OnUserJump_CSC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_OnUserJump_CSC_default_instance_;
    new (ptr) ::msg::MSG_OnUserJump_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_OnUserJump_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_OnUserJump_CSC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_OnUserJump_CSC_message_2eproto}, {
      &scc_info_MoveData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_ReqEntrySelectState_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_ReqEntrySelectState_CS_default_instance_;
    new (ptr) ::msg::MSG_ReqEntrySelectState_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_ReqEntrySelectState_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_ReqEntrySelectState_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_ReqEntrySelectState_CS_message_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_ReqHeroAttributeData_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_ReqHeroAttributeData_CS_default_instance_;
    new (ptr) ::msg::MSG_ReqHeroAttributeData_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_ReqHeroAttributeData_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqHeroAttributeData_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqHeroAttributeData_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqJumptoLeaderLine_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_ReqJumptoLeaderLine_CS_default_instance_;
    new (ptr) ::msg::MSG_ReqJumptoLeaderLine_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_ReqJumptoLeaderLine_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqJumptoLeaderLine_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqJumptoLeaderLine_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqQueryBalance_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_ReqQueryBalance_CS_default_instance_;
    new (ptr) ::msg::MSG_ReqQueryBalance_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_ReqQueryBalance_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqQueryBalance_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqQueryBalance_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqRecharge_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_ReqRecharge_CS_default_instance_;
    new (ptr) ::msg::MSG_ReqRecharge_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_ReqRecharge_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqRecharge_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqRecharge_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqUpdateAntiAddict_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_ReqUpdateAntiAddict_CS_default_instance_;
    new (ptr) ::msg::MSG_ReqUpdateAntiAddict_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_ReqUpdateAntiAddict_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqUpdateAntiAddict_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqUpdateAntiAddict_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_Back_to_Select_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_Back_to_Select_CS_default_instance_;
    new (ptr) ::msg::MSG_Req_Back_to_Select_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_Back_to_Select_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_Back_to_Select_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_Back_to_Select_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_Delete_Char_CSC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_Delete_Char_CSC_default_instance_;
    new (ptr) ::msg::MSG_Req_Delete_Char_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_Delete_Char_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_Delete_Char_CSC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_Delete_Char_CSC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_IS_NICKNAME_REPEATED_CSC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_IS_NICKNAME_REPEATED_CSC_default_instance_;
    new (ptr) ::msg::MSG_Req_IS_NICKNAME_REPEATED_CSC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_IS_NICKNAME_REPEATED_CSC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_IS_NICKNAME_REPEATED_CSC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_IS_NICKNAME_REPEATED_CSC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_Main_Data_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_Main_Data_CS_default_instance_;
    new (ptr) ::msg::MSG_Req_Main_Data_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_Main_Data_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_Main_Data_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_Main_Data_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_Move_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_Move_CS_default_instance_;
    new (ptr) ::msg::MSG_Req_Move_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_Move_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_Move_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_Move_CS_message_2eproto}, {
      &scc_info_MoveData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_Ping_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_Ping_CS_default_instance_;
    new (ptr) ::msg::MSG_Req_Ping_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_Ping_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_Ping_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_Ping_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_SelectCharToLogin_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_SelectCharToLogin_CS_default_instance_;
    new (ptr) ::msg::MSG_Req_SelectCharToLogin_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_SelectCharToLogin_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_SelectCharToLogin_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_SelectCharToLogin_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_Summon_Npc_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_Summon_Npc_CS_default_instance_;
    new (ptr) ::msg::MSG_Req_Summon_Npc_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_Summon_Npc_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_Summon_Npc_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_Summon_Npc_CS_message_2eproto}, {
      &scc_info_TempNpcInfo_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_Syn_MoveState_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_Syn_MoveState_CS_default_instance_;
    new (ptr) ::msg::MSG_Req_Syn_MoveState_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_Syn_MoveState_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Req_Syn_MoveState_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Req_Syn_MoveState_CS_message_2eproto}, {
      &scc_info_FloatMovePos_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Req_TELE_PORT_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_TELE_PORT_CS_default_instance_;
    new (ptr) ::msg::MSG_Req_TELE_PORT_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_TELE_PORT_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_TELE_PORT_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_TELE_PORT_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_Test_Network_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_Test_Network_CS_default_instance_;
    new (ptr) ::msg::MSG_Req_Test_Network_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_Test_Network_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_Test_Network_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_Test_Network_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_Use_GM_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_Use_GM_CS_default_instance_;
    new (ptr) ::msg::MSG_Req_Use_GM_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_Use_GM_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_Use_GM_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_Use_GM_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_UserGameTime_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Req_UserGameTime_SC_default_instance_;
    new (ptr) ::msg::MSG_Req_UserGameTime_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Req_UserGameTime_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_UserGameTime_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_UserGameTime_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetDiffLineOfLeader_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_RetDiffLineOfLeader_SC_default_instance_;
    new (ptr) ::msg::MSG_RetDiffLineOfLeader_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_RetDiffLineOfLeader_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetDiffLineOfLeader_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetDiffLineOfLeader_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetEntrySelectState_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_RetEntrySelectState_SC_default_instance_;
    new (ptr) ::msg::MSG_RetEntrySelectState_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_RetEntrySelectState_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MSG_RetEntrySelectState_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MSG_RetEntrySelectState_SC_message_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,
      &scc_info_StateItem_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetHeroAttributeData_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_RetHeroAttributeData_SC_default_instance_;
    new (ptr) ::msg::MSG_RetHeroAttributeData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_RetHeroAttributeData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetHeroAttributeData_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetHeroAttributeData_SC_message_2eproto}, {
      &scc_info_AttributeData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetHpMpToSelects_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_RetHpMpToSelects_SC_default_instance_;
    new (ptr) ::msg::MSG_RetHpMpToSelects_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_RetHpMpToSelects_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetHpMpToSelects_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetHpMpToSelects_SC_message_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetNinePlayerLevelUp_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_RetNinePlayerLevelUp_SC_default_instance_;
    new (ptr) ::msg::MSG_RetNinePlayerLevelUp_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_RetNinePlayerLevelUp_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetNinePlayerLevelUp_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetNinePlayerLevelUp_SC_message_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetNpcDir_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_RetNpcDir_SC_default_instance_;
    new (ptr) ::msg::MSG_RetNpcDir_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_RetNpcDir_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetNpcDir_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetNpcDir_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetNpcWarpMove_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_RetNpcWarpMove_SC_default_instance_;
    new (ptr) ::msg::MSG_RetNpcWarpMove_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_RetNpcWarpMove_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetNpcWarpMove_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetNpcWarpMove_SC_message_2eproto}, {
      &scc_info_MoveData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetQueryBalance_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_RetQueryBalance_SC_default_instance_;
    new (ptr) ::msg::MSG_RetQueryBalance_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_RetQueryBalance_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetQueryBalance_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetQueryBalance_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetRecharge_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_RetRecharge_SC_default_instance_;
    new (ptr) ::msg::MSG_RetRecharge_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_RetRecharge_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetRecharge_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetRecharge_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_ChangeName_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_ChangeName_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_ChangeName_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_ChangeName_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_ChangeName_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_ChangeName_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_ClearState_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_ClearState_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_ClearState_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_ClearState_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_ClearState_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_ClearState_SC_message_2eproto}, {
      &scc_info_StateItem_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_Common_Error_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_Common_Error_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_Common_Error_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_Common_Error_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_Common_Error_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_Common_Error_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_Common_Tips_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_Common_Tips_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_Common_Tips_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_Common_Tips_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_Common_Tips_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_Common_Tips_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_Find_Path_End_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_Find_Path_End_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_Find_Path_End_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_Find_Path_End_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_Find_Path_End_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_Find_Path_End_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_Find_Path_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_Find_Path_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_Find_Path_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_Find_Path_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_Find_Path_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_Find_Path_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_GameTime_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_GameTime_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_GameTime_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_GameTime_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_GameTime_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_GameTime_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_LoginOnReturnCharList_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_LoginOnReturnCharList_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_LoginOnReturnCharList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_LoginOnReturnCharList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_LoginOnReturnCharList_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_LoginOnReturnCharList_SC_message_2eproto}, {
      &scc_info_SelectUserInfo_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_MapScreenBatchRefreshNpc_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_MapScreenBatchRefreshNpc_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_MapScreenBatchRefreshNpc_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_MapScreenBatchRefreshNpc_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_MapScreenBatchRefreshNpc_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_MapScreenBatchRefreshNpc_SC_message_2eproto}, {
      &scc_info_MapNpcData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_MapScreenBatchRemoveCharacter_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_MapScreenBatchRemoveCharacter_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_MapScreenBatchRemoveCharacter_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_MapScreenBatchRemoveCharacter_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_MapScreenBatchRemoveCharacter_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_MapScreenBatchRemoveCharacter_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_MapScreenBatchRemoveNpc_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_MapScreenBatchRemoveNpc_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_MapScreenBatchRemoveNpc_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_MapScreenBatchRemoveNpc_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_MapScreenBatchRemoveNpc_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_MapScreenBatchRemoveNpc_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_MapScreenFuncNpc_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_MapScreenFuncNpc_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_MapScreenFuncNpc_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_MapScreenFuncNpc_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_MapScreenFuncNpc_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_MapScreenFuncNpc_SC_message_2eproto}, {
      &scc_info_FuncNpcData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_MapScreenRefreshCharacter_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_MapScreenRefreshCharacter_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_MapScreenRefreshCharacter_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_MapScreenRefreshCharacter_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_MapScreenRefreshCharacter_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_MapScreenRefreshCharacter_SC_message_2eproto}, {
      &scc_info_MapUserData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_MapScreenRefreshNpc_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_MapScreenRefreshNpc_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_MapScreenRefreshNpc_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_MapScreenRefreshNpc_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_MapScreenRefreshNpc_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_MapScreenRefreshNpc_SC_message_2eproto}, {
      &scc_info_MapNpcData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_MapScreenRemoveCharacter_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_MapScreenRemoveCharacter_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_MapScreenRemoveCharacter_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_MapScreenRemoveCharacter_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_MapScreenRemoveCharacter_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_MapScreenRemoveCharacter_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_MapScreenRemoveNpc_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_MapScreenRemoveNpc_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_MapScreenRemoveNpc_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_MapScreenRemoveNpc_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_MapScreenRemoveNpc_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_MapScreenRemoveNpc_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_Move_Failed_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_Move_Failed_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_Move_Failed_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_Move_Failed_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_Move_Failed_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_Move_Failed_SC_message_2eproto}, {
      &scc_info_MoveData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_Move_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_Move_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_Move_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_Move_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_Move_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_Move_SC_message_2eproto}, {
      &scc_info_MoveData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_NineScreenRefreshPlayer_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_NineScreenRefreshPlayer_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_NineScreenRefreshPlayer_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_NineScreenRefreshPlayer_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_NineScreenRefreshPlayer_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_NineScreenRefreshPlayer_SC_message_2eproto}, {
      &scc_info_MapUserData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_NotifyUserKickout_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_NotifyUserKickout_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_NotifyUserKickout_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_NotifyUserKickout_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_NotifyUserKickout_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_NotifyUserKickout_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_QueueInfo_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_QueueInfo_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_QueueInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_QueueInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_QueueInfo_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_QueueInfo_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_RetNpcMove_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_RetNpcMove_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_RetNpcMove_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_RetNpcMove_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_RetNpcMove_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_RetNpcMove_SC_message_2eproto}, {
      &scc_info_MoveData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_Rondom_Way_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_Rondom_Way_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_Rondom_Way_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_Rondom_Way_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_Rondom_Way_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_Rondom_Way_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_ServerLoginFailed_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_ServerLoginFailed_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_ServerLoginFailed_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_ServerLoginFailed_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_ServerLoginFailed_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_ServerLoginFailed_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_ServerTime_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_ServerTime_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_ServerTime_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_ServerTime_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_ServerTime_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_ServerTime_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_SetState_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_SetState_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_SetState_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_SetState_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_SetState_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_SetState_SC_message_2eproto}, {
      &scc_info_StateItem_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_StateList_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_StateList_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_StateList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_StateList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_StateList_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_StateList_SC_message_2eproto}, {
      &scc_info_StateItem_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_UserGameTime_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_UserGameTime_CS_default_instance_;
    new (ptr) ::msg::MSG_Ret_UserGameTime_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_UserGameTime_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_UserGameTime_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_UserGameTime_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_UserMapInfo_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_UserMapInfo_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_UserMapInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_UserMapInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_UserMapInfo_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_UserMapInfo_SC_message_2eproto}, {
      &scc_info_FloatMovePos_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_VisibleNpcList_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_VisibleNpcList_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_VisibleNpcList_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_VisibleNpcList_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_VisibleNpcList_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_VisibleNpcList_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_setTimeState_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Ret_setTimeState_SC_default_instance_;
    new (ptr) ::msg::MSG_Ret_setTimeState_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Ret_setTimeState_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_setTimeState_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_setTimeState_SC_message_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MSG_START_CUTSCENE_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_START_CUTSCENE_SC_default_instance_;
    new (ptr) ::msg::MSG_START_CUTSCENE_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_START_CUTSCENE_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_START_CUTSCENE_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_START_CUTSCENE_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Server_Force_Move_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Server_Force_Move_SC_default_instance_;
    new (ptr) ::msg::MSG_Server_Force_Move_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Server_Force_Move_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Server_Force_Move_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Server_Force_Move_SC_message_2eproto}, {
      &scc_info_MoveData_message_2eproto.base,}};

static void InitDefaultsscc_info_MSG_SetChooseTarget_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_SetChooseTarget_CS_default_instance_;
    new (ptr) ::msg::MSG_SetChooseTarget_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_SetChooseTarget_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_SetChooseTarget_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_SetChooseTarget_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Show_Path_Way_End_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Show_Path_Way_End_CS_default_instance_;
    new (ptr) ::msg::MSG_Show_Path_Way_End_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Show_Path_Way_End_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Show_Path_Way_End_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Show_Path_Way_End_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_USER_REQ_SETPASSWD_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_USER_REQ_SETPASSWD_CS_default_instance_;
    new (ptr) ::msg::MSG_USER_REQ_SETPASSWD_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_USER_REQ_SETPASSWD_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_USER_REQ_SETPASSWD_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_USER_REQ_SETPASSWD_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_UpdateExpLevel_SC_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_UpdateExpLevel_SC_default_instance_;
    new (ptr) ::msg::MSG_UpdateExpLevel_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_UpdateExpLevel_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_UpdateExpLevel_SC_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_UpdateExpLevel_SC_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Upload_Crash_Info_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_Upload_Crash_Info_default_instance_;
    new (ptr) ::msg::MSG_Upload_Crash_Info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_Upload_Crash_Info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Upload_Crash_Info_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Upload_Crash_Info_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_UserLoadingOk_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_UserLoadingOk_CS_default_instance_;
    new (ptr) ::msg::MSG_UserLoadingOk_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_UserLoadingOk_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_UserLoadingOk_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_UserLoadingOk_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_UserReqChangeLine_CS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_UserReqChangeLine_CS_default_instance_;
    new (ptr) ::msg::MSG_UserReqChangeLine_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_UserReqChangeLine_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_UserReqChangeLine_CS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_UserReqChangeLine_CS_message_2eproto}, {}};

static void InitDefaultsscc_info_MSG_User_Drop_SCS_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MSG_User_Drop_SCS_default_instance_;
    new (ptr) ::msg::MSG_User_Drop_SCS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MSG_User_Drop_SCS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_User_Drop_SCS_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_User_Drop_SCS_message_2eproto}, {}};

static void InitDefaultsscc_info_MapNpcData_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MapNpcData_default_instance_;
    new (ptr) ::msg::MapNpcData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MapNpcData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MapNpcData_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_MapNpcData_message_2eproto}, {
      &scc_info_FloatMovePos_message_2eproto.base,
      &scc_info_MasterData_message_2eproto.base,
      &scc_info_StateItem_message_2eproto.base,
      &scc_info_CharacterMapShow_message_2eproto.base,
      &scc_info_NPC_HatredList_message_2eproto.base,}};

static void InitDefaultsscc_info_MapUserData_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MapUserData_default_instance_;
    new (ptr) ::msg::MapUserData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MapUserData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapUserData_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MapUserData_message_2eproto}, {
      &scc_info_CharacterMapShow_message_2eproto.base,
      &scc_info_CharacterMapData_message_2eproto.base,}};

static void InitDefaultsscc_info_MasterData_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MasterData_default_instance_;
    new (ptr) ::msg::MasterData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MasterData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MasterData_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MasterData_message_2eproto}, {
      &scc_info_EntryIDType_msg_5fenum_2eproto.base,}};

static void InitDefaultsscc_info_MoveData_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_MoveData_default_instance_;
    new (ptr) ::msg::MoveData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::MoveData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveData_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MoveData_message_2eproto}, {
      &scc_info_FloatMovePos_message_2eproto.base,}};

static void InitDefaultsscc_info_NPC_HatredList_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_NPC_HatredList_default_instance_;
    new (ptr) ::msg::NPC_HatredList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::NPC_HatredList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NPC_HatredList_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NPC_HatredList_message_2eproto}, {}};

static void InitDefaultsscc_info_SelectUserInfo_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_SelectUserInfo_default_instance_;
    new (ptr) ::msg::SelectUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::SelectUserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SelectUserInfo_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SelectUserInfo_message_2eproto}, {}};

static void InitDefaultsscc_info_StateItem_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_StateItem_default_instance_;
    new (ptr) ::msg::StateItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::StateItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateItem_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StateItem_message_2eproto}, {}};

static void InitDefaultsscc_info_TempNpcInfo_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::msg::_TempNpcInfo_default_instance_;
    new (ptr) ::msg::TempNpcInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::msg::TempNpcInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TempNpcInfo_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TempNpcInfo_message_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[99];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, exp_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, money_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, welpoint_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, tilizhi_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, type_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, famelevel_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, position_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, viplevel_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, port_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, laststage_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, nextexp_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, pkmode_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, level_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, stone_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, edupoint_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, cooppoint_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, bluecrystal_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, bluecrystalincnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, purplecrystal_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, purplecrystalincnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, vigourpoint_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, doublepoint_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, familyatt_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterBaseData, herothisid_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  10,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  0,
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, hp_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, maxhp_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, str_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, dex_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, intel_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, phy_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, matt_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, patt_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, mdef_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, pdef_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, bang_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, bangextradamage_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, toughness_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, toughnessreducedamage_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, penetrate_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, penetrateextradamage_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, block_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, blockreducedamage_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, accurate_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, accurateextradamage_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, hold_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, holdreducedamage_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, deflect_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, deflectreducedamage_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, dodge_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, weaponatt_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, mp_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, maxmp_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, hit_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, firemastery_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, icemastery_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, lightningmastery_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, brightmastery_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, darkmastery_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, fireresist_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, iceresist_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, lightningresist_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, brightresist_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, darkresist_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, firepen_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, icepen_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, lightningpen_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, brightpen_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, darkpen_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, blowint_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, knockint_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, floatint_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, superhitint_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, blowresist_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, knockresist_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, floatresist_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, superhitresist_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, blowdectime_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, knockdectime_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, floatdectime_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, superhitdectime_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, stiffaddtime_),
  PROTOBUF_FIELD_OFFSET(::msg::AttributeData, stiffdectime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  PROTOBUF_FIELD_OFFSET(::msg::CharacterFightData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterFightData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::CharacterFightData, curfightvalue_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMainData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMainData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMainData, basedata_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMainData, attridata_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMainData, mapdata_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMainData, fightdata_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, face_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, weapon_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, coat_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, occupation_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, heroid_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, facestyle_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, hairstyle_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, haircolor_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, antenna_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, bodystyle_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapShow, avatarid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, level_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, pos_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, dir_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, movespeed_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, hp_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, maxhp_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, states_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, teamid_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, guildid_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, country_),
  PROTOBUF_FIELD_OFFSET(::msg::CharacterMapData, guildname_),
  2,
  1,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  8,
  9,
  0,
  PROTOBUF_FIELD_OFFSET(::msg::StateItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::StateItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::StateItem, uniqid_),
  PROTOBUF_FIELD_OFFSET(::msg::StateItem, lasttime_),
  PROTOBUF_FIELD_OFFSET(::msg::StateItem, overtime_),
  PROTOBUF_FIELD_OFFSET(::msg::StateItem, settime_),
  PROTOBUF_FIELD_OFFSET(::msg::StateItem, configtime_),
  PROTOBUF_FIELD_OFFSET(::msg::StateItem, skilluuid_),
  PROTOBUF_FIELD_OFFSET(::msg::StateItem, effects_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MapUserData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MapUserData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MapUserData, charid_),
  PROTOBUF_FIELD_OFFSET(::msg::MapUserData, name_),
  PROTOBUF_FIELD_OFFSET(::msg::MapUserData, mapshow_),
  PROTOBUF_FIELD_OFFSET(::msg::MapUserData, bakhero_),
  PROTOBUF_FIELD_OFFSET(::msg::MapUserData, mapdata_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::msg::MasterData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MasterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MasterData, idtype_),
  PROTOBUF_FIELD_OFFSET(::msg::MasterData, name_),
  PROTOBUF_FIELD_OFFSET(::msg::MasterData, country_),
  PROTOBUF_FIELD_OFFSET(::msg::MasterData, guildid_),
  PROTOBUF_FIELD_OFFSET(::msg::MasterData, teamid_),
  1,
  0,
  3,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, baseid_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, tempid_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, name_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, hp_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, maxhp_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, pos_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, dir_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, movespeed_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, attspeed_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, master_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, visit_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, states_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, showdata_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, titlename_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, birth_),
  PROTOBUF_FIELD_OFFSET(::msg::MapNpcData, hatredlist_),
  7,
  6,
  0,
  8,
  9,
  2,
  10,
  11,
  12,
  3,
  13,
  ~0u,
  4,
  1,
  14,
  5,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Create_Role_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Create_Role_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Create_Role_CS, name_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Create_Role_CS, occupation_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Create_Role_CS, heroid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Create_Role_CS, sex_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Create_Role_CS, facestyle_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Create_Role_CS, hairstyle_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Create_Role_CS, haircolor_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Create_Role_CS, antenna_),
  0,
  1,
  2,
  7,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ChangeName_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ChangeName_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ChangeName_CS, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ChangeName_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ChangeName_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ChangeName_SC, name_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ChangeName_SC, result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_DataCharacterMain_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_DataCharacterMain_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_DataCharacterMain_SC, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Use_GM_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Use_GM_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Use_GM_CS, strcontent_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Common_Error_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Common_Error_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Common_Error_SC, errorcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Common_Tips_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Common_Tips_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Common_Tips_SC, strcontent_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Main_Data_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Main_Data_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Test_Network_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Test_Network_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Test_Network_CS, num_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Test_Network_CS, name_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Test_Network_CS, num2_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_GameTime_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_GameTime_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_GameTime_SC, gametime_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_UserGameTime_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_UserGameTime_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserGameTime_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserGameTime_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserGameTime_CS, usertempid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserGameTime_CS, gametime_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ServerTime_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ServerTime_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ServerTime_SC, servertime_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_NotifyUserKickout_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_NotifyUserKickout_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ServerLoginFailed_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ServerLoginFailed_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ServerLoginFailed_SC, returncode_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_QueueInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_QueueInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_QueueInfo_SC, queue_user_num_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_QueueInfo_SC, queue_wait_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserMapInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserMapInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserMapInfo_SC, mapid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserMapInfo_SC, mapname_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserMapInfo_SC, filename_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserMapInfo_SC, pos_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserMapInfo_SC, lineid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserMapInfo_SC, copymapidx_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserMapInfo_SC, subcopymapidx_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_UserMapInfo_SC, sceneid_),
  3,
  0,
  1,
  2,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_NineScreenRefreshPlayer_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_NineScreenRefreshPlayer_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_NineScreenRefreshPlayer_SC, data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRefreshCharacter_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRefreshCharacter_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRefreshCharacter_SC, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRemoveCharacter_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRemoveCharacter_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRemoveCharacter_SC, charid_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC, charid_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenBatchRemoveCharacter_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenBatchRemoveCharacter_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenBatchRemoveCharacter_SC, charids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_StateList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_StateList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_StateList_SC, states_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::FloatMovePos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::FloatMovePos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::FloatMovePos, fx_),
  PROTOBUF_FIELD_OFFSET(::msg::FloatMovePos, fy_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MoveData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MoveData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MoveData, pos_),
  PROTOBUF_FIELD_OFFSET(::msg::MoveData, dir_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Move_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Move_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Move_CS, charid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Move_CS, movedata_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Move_CS, steplenth_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Move_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Move_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Move_SC, charid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Move_SC, movedata_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Move_SC, steplength_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_TELE_PORT_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_TELE_PORT_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_TELE_PORT_CS, teleportid_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Server_Force_Move_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Server_Force_Move_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Server_Force_Move_SC, charid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Server_Force_Move_SC, movedata_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Server_Force_Move_SC, steplength_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Move_Failed_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Move_Failed_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Move_Failed_SC, charid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Move_Failed_SC, movedata_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Move_Failed_SC, steplength_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_SetState_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_SetState_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_SetState_SC, type_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_SetState_SC, id_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_SetState_SC, state_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ClearState_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ClearState_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ClearState_SC, type_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ClearState_SC, id_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_ClearState_SC, state_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenBatchRefreshNpc_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenBatchRefreshNpc_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenBatchRefreshNpc_SC, data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenBatchRemoveNpc_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenBatchRemoveNpc_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenBatchRemoveNpc_SC, tempids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRefreshNpc_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRefreshNpc_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRefreshNpc_SC, data_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRemoveNpc_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRemoveNpc_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenRemoveNpc_SC, tempid_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::FuncNpcData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::FuncNpcData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::FuncNpcData, baseid_),
  PROTOBUF_FIELD_OFFSET(::msg::FuncNpcData, tempid_),
  PROTOBUF_FIELD_OFFSET(::msg::FuncNpcData, x_),
  PROTOBUF_FIELD_OFFSET(::msg::FuncNpcData, y_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenFuncNpc_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenFuncNpc_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_MapScreenFuncNpc_SC, data_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_RetNpcMove_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_RetNpcMove_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_RetNpcMove_SC, tempid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_RetNpcMove_SC, movedata_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_RetNpcMove_SC, speed_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNpcWarpMove_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNpcWarpMove_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNpcWarpMove_SC, tempid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNpcWarpMove_SC, movedata_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNpcDir_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNpcDir_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNpcDir_SC, tempid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNpcDir_SC, dir_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::TempNpcInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::TempNpcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::TempNpcInfo, npcid_),
  PROTOBUF_FIELD_OFFSET(::msg::TempNpcInfo, num_),
  PROTOBUF_FIELD_OFFSET(::msg::TempNpcInfo, script_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Summon_Npc_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Summon_Npc_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Summon_Npc_CS, npcs_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_setTimeState_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_setTimeState_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_setTimeState_SC, target_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_setTimeState_SC, state_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_setTimeState_SC, maxtime_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_setTimeState_SC, lefttime_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Ping_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Ping_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_VisibleNpcList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_VisibleNpcList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_VisibleNpcList_SC, npc_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNinePlayerLevelUp_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNinePlayerLevelUp_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetNinePlayerLevelUp_SC, target_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UpdateExpLevel_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UpdateExpLevel_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UpdateExpLevel_SC, curexp_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UpdateExpLevel_SC, curlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UpdateExpLevel_SC, mainhero_thisid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UpdateExpLevel_SC, mainhero_exp_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UpdateExpLevel_SC, mainhero_lv_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NotifyAntiAddict_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NotifyAntiAddict_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NotifyAntiAddict_SC, onlinelasttime_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NotifyAntiAddict_SC, isantiaddcit_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NotifyAntiAddict_SC, isloginpush_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqUpdateAntiAddict_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqUpdateAntiAddict_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqEntrySelectState_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqEntrySelectState_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqEntrySelectState_CS, oldone_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqEntrySelectState_CS, newone_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetEntrySelectState_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetEntrySelectState_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetEntrySelectState_SC, choosen_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetEntrySelectState_SC, states_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHpMpToSelects_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHpMpToSelects_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHpMpToSelects_SC, choosen_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHpMpToSelects_SC, curhp_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHpMpToSelects_SC, maxhp_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHpMpToSelects_SC, curmp_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHpMpToSelects_SC, maxmp_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqHeroAttributeData_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqHeroAttributeData_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqHeroAttributeData_CS, herothisid_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHeroAttributeData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHeroAttributeData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHeroAttributeData_SC, herothisid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHeroAttributeData_SC, data_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetHeroAttributeData_SC, fightvalue_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetDiffLineOfLeader_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetDiffLineOfLeader_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqJumptoLeaderLine_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqJumptoLeaderLine_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, charid_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, name_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, level_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, sex_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, heroid_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, curheroid_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, deltime_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, offlinetime_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, facestyle_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, hairstyle_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, haircolor_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, bodystyle_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, antenna_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, onlinelasttime_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, addictpreuptime_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, mapname_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectUserInfo, avatarid_),
  2,
  0,
  3,
  16,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  1,
  15,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_LoginOnReturnCharList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_LoginOnReturnCharList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_LoginOnReturnCharList_SC, charlist_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_SelectCharToLogin_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_SelectCharToLogin_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_SelectCharToLogin_CS, charid_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_IS_NICKNAME_REPEATED_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_IS_NICKNAME_REPEATED_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_IS_NICKNAME_REPEATED_CSC, name_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_IS_NICKNAME_REPEATED_CSC, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Back_to_Select_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Back_to_Select_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Delete_Char_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Delete_Char_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Delete_Char_CSC, charid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Delete_Char_CSC, opcode_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Delete_Char_CSC, retcode_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, move_state_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, dir_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, destx_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, desty_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, movespeed_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, step_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, srcx_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, srcy_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Req_Syn_MoveState_CS, pos_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Find_Path_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Find_Path_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Find_Path_SC, charid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Find_Path_SC, gridindex_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Find_Path_SC, moveres_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Rondom_Way_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Rondom_Way_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Rondom_Way_SC, zonecenterx_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Rondom_Way_SC, zonecentery_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Rondom_Way_SC, zonewidth_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Rondom_Way_SC, zoneheight_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Rondom_Way_SC, gridwidth_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Rondom_Way_SC, gridheight_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Rondom_Way_SC, pathid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Rondom_Way_SC, pathinfo_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Find_Path_End_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Find_Path_End_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Ret_Find_Path_End_SC, endcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Show_Path_Way_End_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Show_Path_Way_End_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::LineItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::LineItem, index_),
  PROTOBUF_FIELD_OFFSET(::msg::LineItem, user_num_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NoticeClientAllLines_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NoticeClientAllLines_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NoticeClientAllLines_SC, lines_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NoticeClientAllLines_SC, your_line_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UserReqChangeLine_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UserReqChangeLine_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UserReqChangeLine_CS, lineid_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_OnUserJump_CSC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_OnUserJump_CSC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_OnUserJump_CSC, data_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_OnUserJump_CSC, charid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NPCHatredList_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NPCHatredList_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NPCHatredList_SC, npctempid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NPCHatredList_SC, enemytempid_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::NPC_HatredList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::NPC_HatredList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::NPC_HatredList, npctempid_),
  PROTOBUF_FIELD_OFFSET(::msg::NPC_HatredList, enemytempid_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ACCOUNT_SEC_PASSWD_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ACCOUNT_SEC_PASSWD_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ACCOUNT_SEC_PASSWD_SC, sec_passwd_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ACCOUNT_SEC_PASSWD_SC, isonline_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_USER_REQ_SETPASSWD_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_USER_REQ_SETPASSWD_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_USER_REQ_SETPASSWD_CS, old_passwd_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_USER_REQ_SETPASSWD_CS, new_passwd_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NEW_ROLE_CUTSCENE_SCS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NEW_ROLE_CUTSCENE_SCS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_User_Drop_SCS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_User_Drop_SCS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_User_Drop_SCS, charid_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_START_CUTSCENE_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_START_CUTSCENE_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_START_CUTSCENE_SC, cutsceneid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_START_CUTSCENE_SC, onfinish_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UserLoadingOk_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_UserLoadingOk_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqQueryBalance_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqQueryBalance_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetQueryBalance_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetQueryBalance_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetQueryBalance_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetQueryBalance_SC, balance_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetQueryBalance_SC, bonus_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetQueryBalance_SC, hadfilled_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetQueryBalance_SC, point2tone_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqRecharge_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqRecharge_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqRecharge_CS, point_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_ReqRecharge_CS, type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetRecharge_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetRecharge_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetRecharge_SC, retcode_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetRecharge_SC, point_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetRecharge_SC, balance_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetRecharge_SC, bonus_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_RetRecharge_SC, hadfilled_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_SetChooseTarget_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_SetChooseTarget_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_SetChooseTarget_CS, charid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_SetChooseTarget_CS, choosetype_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_SetChooseTarget_CS, mapdatatype_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_AttackTargetChange_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_AttackTargetChange_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_AttackTargetChange_SC, charid_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_AttackTargetChange_SC, name_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_AttackTargetChange_SC, level_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_AttackTargetChange_SC, hp_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_AttackTargetChange_SC, relation_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_AttackTargetChange_SC, choosetype_),
  1,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NotifyAccountReuse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_NotifyAccountReuse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Notify_SceneLoaded_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Notify_SceneLoaded_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Notify_SceneLoaded_CS, sceneid_),
  0,
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Upload_Crash_Info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Upload_Crash_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg::MSG_Upload_Crash_Info, crashnum_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, sizeof(::msg::CharacterBaseData)},
  { 53, 116, sizeof(::msg::AttributeData)},
  { 174, 180, sizeof(::msg::CharacterFightData)},
  { 181, 190, sizeof(::msg::CharacterMainData)},
  { 194, 210, sizeof(::msg::CharacterMapShow)},
  { 221, 237, sizeof(::msg::CharacterMapData)},
  { 248, 260, sizeof(::msg::StateItem)},
  { 267, 277, sizeof(::msg::MapUserData)},
  { 282, 292, sizeof(::msg::MasterData)},
  { 297, 318, sizeof(::msg::MapNpcData)},
  { 334, 347, sizeof(::msg::MSG_Create_Role_CS)},
  { 355, 361, sizeof(::msg::MSG_ChangeName_CS)},
  { 362, 369, sizeof(::msg::MSG_Ret_ChangeName_SC)},
  { 371, 377, sizeof(::msg::MSG_DataCharacterMain_SC)},
  { 378, 384, sizeof(::msg::MSG_Req_Use_GM_CS)},
  { 385, 391, sizeof(::msg::MSG_Ret_Common_Error_SC)},
  { 392, 398, sizeof(::msg::MSG_Ret_Common_Tips_SC)},
  { 399, 404, sizeof(::msg::MSG_Req_Main_Data_CS)},
  { 404, 412, sizeof(::msg::MSG_Req_Test_Network_CS)},
  { 415, 421, sizeof(::msg::MSG_Ret_GameTime_SC)},
  { 422, 427, sizeof(::msg::MSG_Req_UserGameTime_SC)},
  { 427, 434, sizeof(::msg::MSG_Ret_UserGameTime_CS)},
  { 436, 442, sizeof(::msg::MSG_Ret_ServerTime_SC)},
  { 443, 448, sizeof(::msg::MSG_Ret_NotifyUserKickout_SC)},
  { 448, 454, sizeof(::msg::MSG_Ret_ServerLoginFailed_SC)},
  { 455, 462, sizeof(::msg::MSG_Ret_QueueInfo_SC)},
  { 464, 477, sizeof(::msg::MSG_Ret_UserMapInfo_SC)},
  { 485, 491, sizeof(::msg::MSG_Ret_NineScreenRefreshPlayer_SC)},
  { 492, 498, sizeof(::msg::MSG_Ret_MapScreenRefreshCharacter_SC)},
  { 499, 505, sizeof(::msg::MSG_Ret_MapScreenRemoveCharacter_SC)},
  { 506, 512, sizeof(::msg::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)},
  { 513, 519, sizeof(::msg::MSG_Ret_MapScreenBatchRemoveCharacter_SC)},
  { 520, 526, sizeof(::msg::MSG_Ret_StateList_SC)},
  { 527, 534, sizeof(::msg::FloatMovePos)},
  { 536, 543, sizeof(::msg::MoveData)},
  { 545, 553, sizeof(::msg::MSG_Req_Move_CS)},
  { 556, 564, sizeof(::msg::MSG_Ret_Move_SC)},
  { 567, 573, sizeof(::msg::MSG_Req_TELE_PORT_CS)},
  { 574, 582, sizeof(::msg::MSG_Server_Force_Move_SC)},
  { 585, 593, sizeof(::msg::MSG_Ret_Move_Failed_SC)},
  { 596, 604, sizeof(::msg::MSG_Ret_SetState_SC)},
  { 607, 615, sizeof(::msg::MSG_Ret_ClearState_SC)},
  { 618, 624, sizeof(::msg::MSG_Ret_MapScreenBatchRefreshNpc_SC)},
  { 625, 631, sizeof(::msg::MSG_Ret_MapScreenBatchRemoveNpc_SC)},
  { 632, 638, sizeof(::msg::MSG_Ret_MapScreenRefreshNpc_SC)},
  { 639, 645, sizeof(::msg::MSG_Ret_MapScreenRemoveNpc_SC)},
  { 646, 655, sizeof(::msg::FuncNpcData)},
  { 659, 665, sizeof(::msg::MSG_Ret_MapScreenFuncNpc_SC)},
  { 666, 674, sizeof(::msg::MSG_Ret_RetNpcMove_SC)},
  { 677, 684, sizeof(::msg::MSG_RetNpcWarpMove_SC)},
  { 686, 693, sizeof(::msg::MSG_RetNpcDir_SC)},
  { 695, 703, sizeof(::msg::TempNpcInfo)},
  { 706, 712, sizeof(::msg::MSG_Req_Summon_Npc_CS)},
  { 713, 722, sizeof(::msg::MSG_Ret_setTimeState_SC)},
  { 726, 731, sizeof(::msg::MSG_Req_Ping_CS)},
  { 731, 737, sizeof(::msg::MSG_Ret_VisibleNpcList_SC)},
  { 738, 744, sizeof(::msg::MSG_RetNinePlayerLevelUp_SC)},
  { 745, 755, sizeof(::msg::MSG_UpdateExpLevel_SC)},
  { 760, 768, sizeof(::msg::MSG_NotifyAntiAddict_SC)},
  { 771, 776, sizeof(::msg::MSG_ReqUpdateAntiAddict_CS)},
  { 776, 783, sizeof(::msg::MSG_ReqEntrySelectState_CS)},
  { 785, 792, sizeof(::msg::MSG_RetEntrySelectState_SC)},
  { 794, 804, sizeof(::msg::MSG_RetHpMpToSelects_SC)},
  { 809, 815, sizeof(::msg::MSG_ReqHeroAttributeData_CS)},
  { 816, 824, sizeof(::msg::MSG_RetHeroAttributeData_SC)},
  { 827, 832, sizeof(::msg::MSG_RetDiffLineOfLeader_SC)},
  { 832, 837, sizeof(::msg::MSG_ReqJumptoLeaderLine_CS)},
  { 837, 859, sizeof(::msg::SelectUserInfo)},
  { 876, 882, sizeof(::msg::MSG_Ret_LoginOnReturnCharList_SC)},
  { 883, 889, sizeof(::msg::MSG_Req_SelectCharToLogin_CS)},
  { 890, 897, sizeof(::msg::MSG_Req_IS_NICKNAME_REPEATED_CSC)},
  { 899, 904, sizeof(::msg::MSG_Req_Back_to_Select_CS)},
  { 904, 912, sizeof(::msg::MSG_Req_Delete_Char_CSC)},
  { 915, 929, sizeof(::msg::MSG_Req_Syn_MoveState_CS)},
  { 938, 946, sizeof(::msg::MSG_Ret_Find_Path_SC)},
  { 949, 962, sizeof(::msg::MSG_Ret_Rondom_Way_SC)},
  { 970, 976, sizeof(::msg::MSG_Ret_Find_Path_End_SC)},
  { 977, 982, sizeof(::msg::MSG_Show_Path_Way_End_CS)},
  { 982, 989, sizeof(::msg::LineItem)},
  { 991, 998, sizeof(::msg::MSG_NoticeClientAllLines_SC)},
  { 1000, 1006, sizeof(::msg::MSG_UserReqChangeLine_CS)},
  { 1007, 1014, sizeof(::msg::MSG_OnUserJump_CSC)},
  { 1016, 1023, sizeof(::msg::MSG_NPCHatredList_SC)},
  { 1025, 1032, sizeof(::msg::NPC_HatredList)},
  { 1034, 1041, sizeof(::msg::MSG_ACCOUNT_SEC_PASSWD_SC)},
  { 1043, 1050, sizeof(::msg::MSG_USER_REQ_SETPASSWD_CS)},
  { 1052, 1057, sizeof(::msg::MSG_NEW_ROLE_CUTSCENE_SCS)},
  { 1057, 1063, sizeof(::msg::MSG_User_Drop_SCS)},
  { 1064, 1071, sizeof(::msg::MSG_START_CUTSCENE_SC)},
  { 1073, 1078, sizeof(::msg::MSG_UserLoadingOk_CS)},
  { 1078, 1083, sizeof(::msg::MSG_ReqQueryBalance_CS)},
  { 1083, 1093, sizeof(::msg::MSG_RetQueryBalance_SC)},
  { 1098, 1105, sizeof(::msg::MSG_ReqRecharge_CS)},
  { 1107, 1117, sizeof(::msg::MSG_RetRecharge_SC)},
  { 1122, 1130, sizeof(::msg::MSG_SetChooseTarget_CS)},
  { 1133, 1144, sizeof(::msg::MSG_AttackTargetChange_SC)},
  { 1150, 1155, sizeof(::msg::MSG_NotifyAccountReuse)},
  { 1155, 1161, sizeof(::msg::MSG_Notify_SceneLoaded_CS)},
  { 1162, 1168, sizeof(::msg::MSG_Upload_Crash_Info)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_CharacterBaseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_AttributeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_CharacterFightData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_CharacterMainData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_CharacterMapShow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_CharacterMapData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_StateItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MapUserData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MasterData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MapNpcData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Create_Role_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_ChangeName_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_ChangeName_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_DataCharacterMain_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_Use_GM_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_Common_Error_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_Common_Tips_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_Main_Data_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_Test_Network_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_GameTime_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_UserGameTime_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_UserGameTime_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_ServerTime_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_NotifyUserKickout_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_ServerLoginFailed_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_QueueInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_UserMapInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_NineScreenRefreshPlayer_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_MapScreenRefreshCharacter_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_MapScreenRemoveCharacter_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_MapScreenBatchRemoveCharacter_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_StateList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_FloatMovePos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MoveData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_Move_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_Move_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_TELE_PORT_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Server_Force_Move_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_Move_Failed_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_SetState_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_ClearState_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_MapScreenBatchRefreshNpc_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_MapScreenBatchRemoveNpc_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_MapScreenRefreshNpc_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_MapScreenRemoveNpc_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_FuncNpcData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_MapScreenFuncNpc_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_RetNpcMove_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_RetNpcWarpMove_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_RetNpcDir_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_TempNpcInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_Summon_Npc_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_setTimeState_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_Ping_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_VisibleNpcList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_RetNinePlayerLevelUp_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_UpdateExpLevel_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_NotifyAntiAddict_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_ReqUpdateAntiAddict_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_ReqEntrySelectState_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_RetEntrySelectState_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_RetHpMpToSelects_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_ReqHeroAttributeData_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_RetHeroAttributeData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_RetDiffLineOfLeader_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_ReqJumptoLeaderLine_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_SelectUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_LoginOnReturnCharList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_SelectCharToLogin_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_IS_NICKNAME_REPEATED_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_Back_to_Select_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_Delete_Char_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Req_Syn_MoveState_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_Find_Path_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_Rondom_Way_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Ret_Find_Path_End_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Show_Path_Way_End_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_LineItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_NoticeClientAllLines_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_UserReqChangeLine_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_OnUserJump_CSC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_NPCHatredList_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_NPC_HatredList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_ACCOUNT_SEC_PASSWD_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_USER_REQ_SETPASSWD_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_NEW_ROLE_CUTSCENE_SCS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_User_Drop_SCS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_START_CUTSCENE_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_UserLoadingOk_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_ReqQueryBalance_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_RetQueryBalance_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_ReqRecharge_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_RetRecharge_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_SetChooseTarget_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_AttackTargetChange_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_NotifyAccountReuse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Notify_SceneLoaded_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg::_MSG_Upload_Crash_Info_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\003msg\032\016msg_enum.proto\"\321\003\n"
  "\021CharacterBaseData\022\013\n\003exp\030\002 \001(\004\022\r\n\005money"
  "\030\003 \001(\r\022\020\n\010welpoint\030\004 \001(\r\022\017\n\007tilizhi\030\005 \001("
  "\r\022\014\n\004type\030\006 \001(\r\022\021\n\tfamelevel\030\007 \001(\r\022\020\n\010po"
  "sition\030\010 \001(\r\022\020\n\010viplevel\030\t \001(\r\022\014\n\004port\030\n"
  " \001(\r\022\021\n\tlaststage\030\013 \001(\r\022\017\n\007nextexp\030\014 \001(\004"
  "\022\016\n\006pkmode\030\r \001(\r\022\r\n\005level\030\016 \001(\r\022\r\n\005stone"
  "\030\017 \001(\r\022\020\n\010edupoint\030\020 \001(\r\022\021\n\tcooppoint\030\021 "
  "\001(\r\022\023\n\013bluecrystal\030\022 \001(\r\022\031\n\021bluecrystali"
  "ncnum\030\023 \001(\r\022\025\n\rpurplecrystal\030\024 \001(\r\022\033\n\023pu"
  "rplecrystalincnum\030\025 \001(\r\022\023\n\013vigourpoint\030\026"
  " \001(\r\022\023\n\013doublepoint\030\027 \001(\r\022\021\n\tfamilyatt\030\030"
  " \001(\r\022\022\n\nherothisid\030\031 \001(\t\"\365\010\n\rAttributeDa"
  "ta\022\n\n\002hp\030\001 \001(\r\022\r\n\005maxhp\030\002 \001(\r\022\013\n\003str\030\003 \001"
  "(\r\022\013\n\003dex\030\004 \001(\r\022\r\n\005intel\030\005 \001(\r\022\013\n\003phy\030\006 "
  "\001(\r\022\014\n\004matt\030\007 \001(\r\022\014\n\004patt\030\010 \001(\r\022\014\n\004mdef\030"
  "\t \001(\r\022\014\n\004pdef\030\n \001(\r\022\014\n\004bang\030\013 \001(\r\022\027\n\017ban"
  "gextradamage\030\014 \001(\r\022\021\n\ttoughness\030\r \001(\r\022\035\n"
  "\025toughnessreducedamage\030\016 \001(\r\022\021\n\tpenetrat"
  "e\030\017 \001(\r\022\034\n\024penetrateextradamage\030\020 \001(\r\022\r\n"
  "\005block\030\021 \001(\r\022\031\n\021blockreducedamage\030\022 \001(\r\022"
  "\020\n\010accurate\030\023 \001(\r\022\033\n\023accurateextradamage"
  "\030\024 \001(\r\022\014\n\004hold\030\025 \001(\r\022\030\n\020holdreducedamage"
  "\030\026 \001(\r\022\017\n\007deflect\030\027 \001(\r\022\033\n\023deflectreduce"
  "damage\030\030 \001(\r\022\r\n\005dodge\030\031 \001(\r\022\021\n\tweaponatt"
  "\030\032 \001(\r\022\n\n\002mp\030\033 \001(\r\022\r\n\005maxmp\030\034 \001(\r\022\013\n\003hit"
  "\030\035 \001(\r\022\023\n\013firemastery\030\036 \001(\r\022\022\n\nicemaster"
  "y\030\037 \001(\r\022\030\n\020lightningmastery\030  \001(\r\022\025\n\rbri"
  "ghtmastery\030! \001(\r\022\023\n\013darkmastery\030\" \001(\r\022\022\n"
  "\nfireresist\030# \001(\r\022\021\n\ticeresist\030$ \001(\r\022\027\n\017"
  "lightningresist\030% \001(\r\022\024\n\014brightresist\030& "
  "\001(\r\022\022\n\ndarkresist\030\' \001(\r\022\017\n\007firepen\030( \001(\r"
  "\022\016\n\006icepen\030) \001(\r\022\024\n\014lightningpen\030* \001(\r\022\021"
  "\n\tbrightpen\030+ \001(\r\022\017\n\007darkpen\030, \001(\r\022\017\n\007bl"
  "owint\030- \001(\r\022\020\n\010knockint\030. \001(\r\022\020\n\010floatin"
  "t\030/ \001(\r\022\023\n\013superhitint\0300 \001(\r\022\022\n\nblowresi"
  "st\0301 \001(\r\022\023\n\013knockresist\0302 \001(\r\022\023\n\013floatre"
  "sist\0303 \001(\r\022\026\n\016superhitresist\0304 \001(\r\022\023\n\013bl"
  "owdectime\0305 \001(\r\022\024\n\014knockdectime\0306 \001(\r\022\024\n"
  "\014floatdectime\0307 \001(\r\022\027\n\017superhitdectime\0308"
  " \001(\r\022\024\n\014stiffaddtime\0309 \001(\r\022\024\n\014stiffdecti"
  "me\030: \001(\r\"+\n\022CharacterFightData\022\025\n\rcurfig"
  "htvalue\030\001 \001(\r\"\263\001\n\021CharacterMainData\022(\n\010b"
  "asedata\030\001 \001(\0132\026.msg.CharacterBaseData\022%\n"
  "\tattridata\030\002 \001(\0132\022.msg.AttributeData\022!\n\007"
  "mapdata\030\003 \001(\0132\020.msg.MapUserData\022*\n\tfight"
  "data\030\004 \001(\0132\027.msg.CharacterFightData\"\321\001\n\020"
  "CharacterMapShow\022\014\n\004face\030\001 \001(\r\022\016\n\006weapon"
  "\030\002 \001(\r\022\014\n\004coat\030\003 \001(\r\022\022\n\noccupation\030\004 \001(\r"
  "\022\016\n\006heroid\030\005 \001(\r\022\021\n\tfacestyle\030\006 \001(\r\022\021\n\th"
  "airstyle\030\007 \001(\r\022\021\n\thaircolor\030\010 \001(\r\022\017\n\007ant"
  "enna\030\t \001(\r\022\021\n\tbodystyle\030\n \001(\r\022\020\n\010avatarI"
  "d\030\013 \001(\r\"\341\001\n\020CharacterMapData\022\r\n\005level\030\001 "
  "\001(\r\022\036\n\003pos\030\002 \001(\0132\021.msg.FloatMovePos\022\013\n\003d"
  "ir\030\003 \001(\r\022\021\n\tmovespeed\030\004 \001(\r\022\n\n\002hp\030\005 \001(\r\022"
  "\r\n\005maxhp\030\006 \001(\r\022\036\n\006states\030\007 \003(\0132\016.msg.Sta"
  "teItem\022\016\n\006teamid\030\010 \001(\r\022\017\n\007guildid\030\t \001(\004\022"
  "\017\n\007country\030\n \001(\r\022\021\n\tguildname\030\013 \001(\t\"\210\001\n\t"
  "StateItem\022\016\n\006uniqid\030\001 \001(\004\022\020\n\010lasttime\030\002 "
  "\001(\004\022\020\n\010overtime\030\003 \001(\004\022\017\n\007settime\030\004 \001(\004\022\022"
  "\n\nconfigtime\030\005 \001(\004\022\021\n\tskilluuid\030\006 \001(\004\022\017\n"
  "\007effects\030\007 \003(\004\"\243\001\n\013MapUserData\022\016\n\006charid"
  "\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022&\n\007mapshow\030\003 \001(\0132\025."
  "msg.CharacterMapShow\022&\n\007bakhero\030\004 \001(\0132\025."
  "msg.CharacterMapShow\022&\n\007mapdata\030\005 \001(\0132\025."
  "msg.CharacterMapData\"n\n\nMasterData\022 \n\006id"
  "type\030\001 \001(\0132\020.msg.EntryIDType\022\014\n\004name\030\002 \001"
  "(\t\022\017\n\007country\030\003 \001(\r\022\017\n\007guildid\030\004 \001(\004\022\016\n\006"
  "teamid\030\005 \001(\r\"\362\002\n\nMapNpcData\022\016\n\006baseid\030\001 "
  "\001(\r\022\016\n\006tempid\030\002 \001(\004\022\014\n\004name\030\003 \001(\t\022\n\n\002hp\030"
  "\004 \001(\r\022\r\n\005maxhp\030\005 \001(\r\022\036\n\003pos\030\006 \001(\0132\021.msg."
  "FloatMovePos\022\013\n\003dir\030\010 \001(\r\022\021\n\tmovespeed\030\t"
  " \001(\r\022\020\n\010attspeed\030\n \001(\r\022\037\n\006master\030\013 \001(\0132\017"
  ".msg.MasterData\022\r\n\005visit\030\014 \001(\r\022\036\n\006states"
  "\030\r \003(\0132\016.msg.StateItem\022\'\n\010showdata\030\016 \001(\013"
  "2\025.msg.CharacterMapShow\022\021\n\ttitlename\030\017 \001"
  "(\t\022\024\n\005birth\030\020 \001(\010:\005false\022\'\n\nhatredlist\030\021"
  " \001(\0132\023.msg.NPC_HatredList\"\247\001\n\022MSG_Create"
  "_Role_CS\022\014\n\004name\030\001 \001(\t\022\022\n\noccupation\030\002 \001"
  "(\r\022\016\n\006heroid\030\003 \001(\r\022\025\n\003sex\030\004 \002(\0162\010.msg.SE"
  "X\022\021\n\tfacestyle\030\005 \001(\r\022\021\n\thairstyle\030\006 \001(\r\022"
  "\021\n\thaircolor\030\007 \001(\r\022\017\n\007antenna\030\010 \001(\r\"!\n\021M"
  "SG_ChangeName_CS\022\014\n\004name\030\001 \001(\t\"5\n\025MSG_Re"
  "t_ChangeName_SC\022\014\n\004name\030\001 \001(\t\022\016\n\006result\030"
  "\002 \001(\010\"@\n\030MSG_DataCharacterMain_SC\022$\n\004dat"
  "a\030\001 \001(\0132\026.msg.CharacterMainData\"\'\n\021MSG_R"
  "eq_Use_GM_CS\022\022\n\nstrcontent\030\001 \001(\t\",\n\027MSG_"
  "Ret_Common_Error_SC\022\021\n\terrorcode\030\001 \001(\r\","
  "\n\026MSG_Ret_Common_Tips_SC\022\022\n\nstrcontent\030\001"
  " \001(\t\"\026\n\024MSG_Req_Main_Data_CS\"B\n\027MSG_Req_"
  "Test_Network_CS\022\013\n\003num\030\001 \001(\r\022\014\n\004name\030\002 \001"
  "(\t\022\014\n\004num2\030\003 \003(\r\"\'\n\023MSG_Ret_GameTime_SC\022"
  "\020\n\010gametime\030\001 \001(\004\"\031\n\027MSG_Req_UserGameTim"
  "e_SC\"\?\n\027MSG_Ret_UserGameTime_CS\022\022\n\nusert"
  "empid\030\001 \001(\r\022\020\n\010gametime\030\002 \001(\004\"+\n\025MSG_Ret"
  "_ServerTime_SC\022\022\n\nservertime\030\001 \001(\004\"\036\n\034MS"
  "G_Ret_NotifyUserKickout_SC\"2\n\034MSG_Ret_Se"
  "rverLoginFailed_SC\022\022\n\nreturncode\030\001 \001(\r\"G"
  "\n\024MSG_Ret_QueueInfo_SC\022\026\n\016queue_user_num"
  "\030\001 \001(\r\022\027\n\017queue_wait_time\030\002 \001(\r\"\266\001\n\026MSG_"
  "Ret_UserMapInfo_SC\022\r\n\005mapid\030\001 \001(\r\022\017\n\007map"
  "name\030\002 \001(\t\022\020\n\010filename\030\003 \001(\t\022\036\n\003pos\030\004 \001("
  "\0132\021.msg.FloatMovePos\022\016\n\006lineid\030\005 \001(\r\022\022\n\n"
  "copymapidx\030\006 \001(\r\022\025\n\rsubcopymapidx\030\007 \001(\r\022"
  "\017\n\007sceneid\030\010 \001(\004\"D\n\"MSG_Ret_NineScreenRe"
  "freshPlayer_SC\022\036\n\004data\030\001 \003(\0132\020.msg.MapUs"
  "erData\"F\n$MSG_Ret_MapScreenRefreshCharac"
  "ter_SC\022\036\n\004data\030\001 \001(\0132\020.msg.MapUserData\"5"
  "\n#MSG_Ret_MapScreenRemoveCharacter_SC\022\016\n"
  "\006charid\030\001 \001(\004\"\?\n-MSG_Ret_MapScreenRemove"
  "CharacterShowCorpse_SC\022\016\n\006charid\030\001 \001(\004\";"
  "\n(MSG_Ret_MapScreenBatchRemoveCharacter_"
  "SC\022\017\n\007charids\030\001 \003(\004\"6\n\024MSG_Ret_StateList"
  "_SC\022\036\n\006states\030\001 \003(\0132\016.msg.StateItem\"&\n\014F"
  "loatMovePos\022\n\n\002fx\030\001 \001(\002\022\n\n\002fy\030\002 \001(\002\"7\n\010M"
  "oveData\022\036\n\003pos\030\001 \001(\0132\021.msg.FloatMovePos\022"
  "\013\n\003dir\030\004 \001(\r\"U\n\017MSG_Req_Move_CS\022\016\n\006chari"
  "d\030\001 \001(\004\022\037\n\010movedata\030\002 \003(\0132\r.msg.MoveData"
  "\022\021\n\tsteplenth\030\003 \001(\r\"V\n\017MSG_Ret_Move_SC\022\016"
  "\n\006charid\030\001 \001(\004\022\037\n\010movedata\030\002 \003(\0132\r.msg.M"
  "oveData\022\022\n\nsteplength\030\003 \001(\r\"*\n\024MSG_Req_T"
  "ELE_PORT_CS\022\022\n\nteleportid\030\001 \002(\004\"_\n\030MSG_S"
  "erver_Force_Move_SC\022\016\n\006charid\030\001 \001(\004\022\037\n\010m"
  "ovedata\030\002 \003(\0132\r.msg.MoveData\022\022\n\nstepleng"
  "th\030\003 \001(\r\"]\n\026MSG_Ret_Move_Failed_SC\022\016\n\006ch"
  "arid\030\001 \001(\004\022\037\n\010movedata\030\002 \001(\0132\r.msg.MoveD"
  "ata\022\022\n\nsteplength\030\003 \001(\r\"N\n\023MSG_Ret_SetSt"
  "ate_SC\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\022\035\n\005stat"
  "e\030\003 \003(\0132\016.msg.StateItem\"P\n\025MSG_Ret_Clear"
  "State_SC\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\022\035\n\005st"
  "ate\030\003 \001(\0132\016.msg.StateItem\"D\n#MSG_Ret_Map"
  "ScreenBatchRefreshNpc_SC\022\035\n\004data\030\001 \003(\0132\017"
  ".msg.MapNpcData\"5\n\"MSG_Ret_MapScreenBatc"
  "hRemoveNpc_SC\022\017\n\007tempids\030\001 \003(\004\"\?\n\036MSG_Re"
  "t_MapScreenRefreshNpc_SC\022\035\n\004data\030\001 \001(\0132\017"
  ".msg.MapNpcData\"/\n\035MSG_Ret_MapScreenRemo"
  "veNpc_SC\022\016\n\006tempid\030\001 \001(\004\"C\n\013FuncNpcData\022"
  "\016\n\006baseid\030\001 \001(\r\022\016\n\006tempid\030\002 \001(\004\022\t\n\001x\030\003 \001"
  "(\r\022\t\n\001y\030\004 \001(\r\"=\n\033MSG_Ret_MapScreenFuncNp"
  "c_SC\022\036\n\004data\030\001 \003(\0132\020.msg.FuncNpcData\"W\n\025"
  "MSG_Ret_RetNpcMove_SC\022\016\n\006tempid\030\001 \001(\004\022\037\n"
  "\010movedata\030\002 \003(\0132\r.msg.MoveData\022\r\n\005speed\030"
  "\003 \001(\r\"H\n\025MSG_RetNpcWarpMove_SC\022\016\n\006tempid"
  "\030\001 \001(\004\022\037\n\010movedata\030\002 \001(\0132\r.msg.MoveData\""
  "/\n\020MSG_RetNpcDir_SC\022\016\n\006tempid\030\001 \001(\004\022\013\n\003d"
  "ir\030\002 \001(\r\"9\n\013TempNpcInfo\022\r\n\005npcid\030\001 \001(\r\022\013"
  "\n\003num\030\002 \001(\r\022\016\n\006script\030\003 \001(\r\"7\n\025MSG_Req_S"
  "ummon_Npc_CS\022\036\n\004npcs\030\001 \003(\0132\020.msg.TempNpc"
  "Info\"m\n\027MSG_Ret_setTimeState_SC\022 \n\006targe"
  "t\030\001 \001(\0132\020.msg.EntryIDType\022\r\n\005state\030\002 \001(\r"
  "\022\017\n\007maxtime\030\003 \001(\r\022\020\n\010lefttime\030\004 \001(\r\"\021\n\017M"
  "SG_Req_Ping_CS\"(\n\031MSG_Ret_VisibleNpcList"
  "_SC\022\013\n\003npc\030\001 \003(\r\"\?\n\033MSG_RetNinePlayerLev"
  "elUp_SC\022 \n\006target\030\001 \001(\0132\020.msg.EntryIDTyp"
  "e\"}\n\025MSG_UpdateExpLevel_SC\022\016\n\006curexp\030\001 \001"
  "(\r\022\020\n\010curlevel\030\002 \001(\r\022\027\n\017mainhero_thisid\030"
  "\003 \001(\004\022\024\n\014mainhero_exp\030\004 \001(\004\022\023\n\013mainhero_"
  "lv\030\005 \001(\r\"\\\n\027MSG_NotifyAntiAddict_SC\022\026\n\016o"
  "nlinelasttime\030\001 \001(\r\022\024\n\014isAntiAddcit\030\002 \001("
  "\010\022\023\n\013isLoginPush\030\003 \001(\010\"\034\n\032MSG_ReqUpdateA"
  "ntiAddict_CS\"`\n\032MSG_ReqEntrySelectState_"
  "CS\022 \n\006oldone\030\001 \001(\0132\020.msg.EntryIDType\022 \n\006"
  "newone\030\002 \001(\0132\020.msg.EntryIDType\"_\n\032MSG_Re"
  "tEntrySelectState_SC\022!\n\007choosen\030\001 \001(\0132\020."
  "msg.EntryIDType\022\036\n\006states\030\002 \003(\0132\016.msg.St"
  "ateItem\"x\n\027MSG_RetHpMpToSelects_SC\022!\n\007ch"
  "oosen\030\001 \001(\0132\020.msg.EntryIDType\022\r\n\005curhp\030\002"
  " \001(\r\022\r\n\005maxhp\030\003 \001(\r\022\r\n\005curmp\030\004 \001(\r\022\r\n\005ma"
  "xmp\030\005 \001(\r\"1\n\033MSG_ReqHeroAttributeData_CS"
  "\022\022\n\nherothisid\030\001 \001(\t\"g\n\033MSG_RetHeroAttri"
  "buteData_SC\022\022\n\nherothisid\030\001 \001(\t\022 \n\004data\030"
  "\002 \001(\0132\022.msg.AttributeData\022\022\n\nfightvalue\030"
  "\003 \001(\r\"\034\n\032MSG_RetDiffLineOfLeader_SC\"\034\n\032M"
  "SG_ReqJumptoLeaderLine_CS\"\316\002\n\016SelectUser"
  "Info\022\016\n\006charid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\r\n\005le"
  "vel\030\003 \001(\r\022\025\n\003sex\030\004 \002(\0162\010.msg.SEX\022\016\n\006hero"
  "id\030\005 \001(\r\022\021\n\tcurheroid\030\006 \001(\r\022\017\n\007delTime\030\007"
  " \001(\r\022\023\n\013offlinetime\030\010 \001(\r\022\021\n\tfacestyle\030\t"
  " \001(\r\022\021\n\thairstyle\030\n \001(\r\022\021\n\thaircolor\030\013 \001"
  "(\r\022\021\n\tbodystyle\030\014 \001(\r\022\017\n\007antenna\030\r \001(\r\022\026"
  "\n\016onlinelasttime\030\016 \001(\r\022\027\n\017addictpreuptim"
  "e\030\017 \001(\r\022\017\n\007mapname\030\020 \001(\t\022\020\n\010avatarid\030\021 \001"
  "(\r\"I\n MSG_Ret_LoginOnReturnCharList_SC\022%"
  "\n\010charList\030\001 \003(\0132\023.msg.SelectUserInfo\".\n"
  "\034MSG_Req_SelectCharToLogin_CS\022\016\n\006charid\030"
  "\001 \001(\004\"=\n MSG_Req_IS_NICKNAME_REPEATED_CS"
  "C\022\014\n\004name\030\001 \001(\t\022\013\n\003ret\030\002 \001(\r\"\033\n\031MSG_Req_"
  "Back_to_Select_CS\"J\n\027MSG_Req_Delete_Char"
  "_CSC\022\016\n\006charid\030\001 \001(\004\022\016\n\006opcode\030\002 \001(\r\022\017\n\007"
  "retcode\030\003 \001(\r\"\266\001\n\030MSG_Req_Syn_MoveState_"
  "CS\022\022\n\nmove_state\030\001 \001(\r\022\013\n\003dir\030\002 \001(\r\022\r\n\005d"
  "estx\030\003 \001(\r\022\r\n\005desty\030\004 \001(\r\022\021\n\tmovespeed\030\005"
  " \001(\r\022\014\n\004step\030\006 \001(\r\022\014\n\004srcx\030\007 \001(\r\022\014\n\004srcy"
  "\030\010 \001(\r\022\036\n\003pos\030\t \003(\0132\021.msg.FloatMovePos\"J"
  "\n\024MSG_Ret_Find_Path_SC\022\016\n\006charid\030\001 \001(\004\022\021"
  "\n\tgridindex\030\002 \001(\r\022\017\n\007moveres\030\003 \001(\r\"\261\001\n\025M"
  "SG_Ret_Rondom_Way_SC\022\023\n\013zonecenterx\030\001 \001("
  "\r\022\023\n\013zonecentery\030\002 \001(\r\022\021\n\tzonewidth\030\003 \001("
  "\r\022\022\n\nzoneheight\030\004 \001(\r\022\021\n\tgridwidth\030\005 \001(\r"
  "\022\022\n\ngridheight\030\006 \001(\r\022\016\n\006pathid\030\007 \001(\r\022\020\n\010"
  "pathinfo\030\010 \001(\t\"+\n\030MSG_Ret_Find_Path_End_"
  "SC\022\017\n\007endcode\030\001 \001(\r\"\032\n\030MSG_Show_Path_Way"
  "_End_CS\"+\n\010LineItem\022\r\n\005index\030\001 \001(\r\022\020\n\010us"
  "er_num\030\002 \001(\r\"N\n\033MSG_NoticeClientAllLines"
  "_SC\022\034\n\005lines\030\001 \003(\0132\r.msg.LineItem\022\021\n\tyou"
  "r_line\030\002 \001(\r\"*\n\030MSG_UserReqChangeLine_CS"
  "\022\016\n\006lineid\030\001 \001(\r\"A\n\022MSG_OnUserJump_CSC\022\033"
  "\n\004data\030\001 \001(\0132\r.msg.MoveData\022\016\n\006charid\030\002 "
  "\001(\004\">\n\024MSG_NPCHatredList_SC\022\021\n\tnpctempid"
  "\030\001 \001(\004\022\023\n\013enemytempid\030\002 \003(\004\"8\n\016NPC_Hatre"
  "dList\022\021\n\tnpctempid\030\001 \001(\004\022\023\n\013enemytempid\030"
  "\002 \003(\004\"A\n\031MSG_ACCOUNT_SEC_PASSWD_SC\022\022\n\nse"
  "c_passwd\030\001 \001(\t\022\020\n\010isonline\030\002 \001(\010\"C\n\031MSG_"
  "USER_REQ_SETPASSWD_CS\022\022\n\nold_passwd\030\001 \001("
  "\t\022\022\n\nnew_passwd\030\002 \001(\t\"\033\n\031MSG_NEW_ROLE_CU"
  "TSCENE_SCS\"#\n\021MSG_User_Drop_SCS\022\016\n\006chari"
  "d\030\001 \001(\004\"=\n\025MSG_START_CUTSCENE_SC\022\022\n\ncuts"
  "ceneid\030\001 \001(\r\022\020\n\010onfinish\030\002 \001(\t\"\026\n\024MSG_Us"
  "erLoadingOk_CS\"\030\n\026MSG_ReqQueryBalance_CS"
  "\"\212\001\n\026MSG_RetQueryBalance_SC\022)\n\007retcode\030\001"
  " \002(\0162\030.msg.ERechargeReturnCode\022\017\n\007balanc"
  "e\030\002 \001(\r\022\r\n\005bonus\030\003 \001(\r\022\021\n\thadfilled\030\004 \001("
  "\r\022\022\n\npoint2tone\030\005 \001(\r\"1\n\022MSG_ReqRecharge"
  "_CS\022\r\n\005point\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\"\201\001\n\022MSG"
  "_RetRecharge_SC\022)\n\007retcode\030\001 \002(\0162\030.msg.E"
  "RechargeReturnCode\022\r\n\005point\030\002 \001(\r\022\017\n\007bal"
  "ance\030\003 \001(\r\022\r\n\005bonus\030\004 \001(\r\022\021\n\thadfilled\030\005"
  " \001(\r\"z\n\026MSG_SetChooseTarget_CS\022\016\n\006charid"
  "\030\001 \001(\004\022)\n\nchoosetype\030\002 \001(\0162\025.msg.ChooseT"
  "argetType\022%\n\013mapdatatype\030\003 \002(\0162\020.msg.Map"
  "DataType\"\221\001\n\031MSG_AttackTargetChange_SC\022\016"
  "\n\006charid\030\001 \001(\004\022\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003 "
  "\001(\r\022\n\n\002HP\030\004 \001(\r\022\020\n\010relation\030\005 \001(\r\022)\n\ncho"
  "osetype\030\006 \001(\0162\025.msg.ChooseTargetType\"\030\n\026"
  "MSG_NotifyAccountReuse\",\n\031MSG_Notify_Sce"
  "neLoaded_CS\022\017\n\007sceneid\030\001 \001(\004\")\n\025MSG_Uplo"
  "ad_Crash_Info\022\020\n\010crashnum\030\001 \001(\r*M\n\020Choos"
  "eTargetType\022\032\n\026CHOOSE_TARGE_TTYPE_SET\020\001\022"
  "\035\n\031CHOOSE_TARGE_TTYPE_CANCEL\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[1] = {
  &::descriptor_table_msg_5fenum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[99] = {
  &scc_info_AttributeData_message_2eproto.base,
  &scc_info_CharacterBaseData_message_2eproto.base,
  &scc_info_CharacterFightData_message_2eproto.base,
  &scc_info_CharacterMainData_message_2eproto.base,
  &scc_info_CharacterMapData_message_2eproto.base,
  &scc_info_CharacterMapShow_message_2eproto.base,
  &scc_info_FloatMovePos_message_2eproto.base,
  &scc_info_FuncNpcData_message_2eproto.base,
  &scc_info_LineItem_message_2eproto.base,
  &scc_info_MSG_ACCOUNT_SEC_PASSWD_SC_message_2eproto.base,
  &scc_info_MSG_AttackTargetChange_SC_message_2eproto.base,
  &scc_info_MSG_ChangeName_CS_message_2eproto.base,
  &scc_info_MSG_Create_Role_CS_message_2eproto.base,
  &scc_info_MSG_DataCharacterMain_SC_message_2eproto.base,
  &scc_info_MSG_NEW_ROLE_CUTSCENE_SCS_message_2eproto.base,
  &scc_info_MSG_NPCHatredList_SC_message_2eproto.base,
  &scc_info_MSG_NoticeClientAllLines_SC_message_2eproto.base,
  &scc_info_MSG_NotifyAccountReuse_message_2eproto.base,
  &scc_info_MSG_NotifyAntiAddict_SC_message_2eproto.base,
  &scc_info_MSG_Notify_SceneLoaded_CS_message_2eproto.base,
  &scc_info_MSG_OnUserJump_CSC_message_2eproto.base,
  &scc_info_MSG_ReqEntrySelectState_CS_message_2eproto.base,
  &scc_info_MSG_ReqHeroAttributeData_CS_message_2eproto.base,
  &scc_info_MSG_ReqJumptoLeaderLine_CS_message_2eproto.base,
  &scc_info_MSG_ReqQueryBalance_CS_message_2eproto.base,
  &scc_info_MSG_ReqRecharge_CS_message_2eproto.base,
  &scc_info_MSG_ReqUpdateAntiAddict_CS_message_2eproto.base,
  &scc_info_MSG_Req_Back_to_Select_CS_message_2eproto.base,
  &scc_info_MSG_Req_Delete_Char_CSC_message_2eproto.base,
  &scc_info_MSG_Req_IS_NICKNAME_REPEATED_CSC_message_2eproto.base,
  &scc_info_MSG_Req_Main_Data_CS_message_2eproto.base,
  &scc_info_MSG_Req_Move_CS_message_2eproto.base,
  &scc_info_MSG_Req_Ping_CS_message_2eproto.base,
  &scc_info_MSG_Req_SelectCharToLogin_CS_message_2eproto.base,
  &scc_info_MSG_Req_Summon_Npc_CS_message_2eproto.base,
  &scc_info_MSG_Req_Syn_MoveState_CS_message_2eproto.base,
  &scc_info_MSG_Req_TELE_PORT_CS_message_2eproto.base,
  &scc_info_MSG_Req_Test_Network_CS_message_2eproto.base,
  &scc_info_MSG_Req_Use_GM_CS_message_2eproto.base,
  &scc_info_MSG_Req_UserGameTime_SC_message_2eproto.base,
  &scc_info_MSG_RetDiffLineOfLeader_SC_message_2eproto.base,
  &scc_info_MSG_RetEntrySelectState_SC_message_2eproto.base,
  &scc_info_MSG_RetHeroAttributeData_SC_message_2eproto.base,
  &scc_info_MSG_RetHpMpToSelects_SC_message_2eproto.base,
  &scc_info_MSG_RetNinePlayerLevelUp_SC_message_2eproto.base,
  &scc_info_MSG_RetNpcDir_SC_message_2eproto.base,
  &scc_info_MSG_RetNpcWarpMove_SC_message_2eproto.base,
  &scc_info_MSG_RetQueryBalance_SC_message_2eproto.base,
  &scc_info_MSG_RetRecharge_SC_message_2eproto.base,
  &scc_info_MSG_Ret_ChangeName_SC_message_2eproto.base,
  &scc_info_MSG_Ret_ClearState_SC_message_2eproto.base,
  &scc_info_MSG_Ret_Common_Error_SC_message_2eproto.base,
  &scc_info_MSG_Ret_Common_Tips_SC_message_2eproto.base,
  &scc_info_MSG_Ret_Find_Path_End_SC_message_2eproto.base,
  &scc_info_MSG_Ret_Find_Path_SC_message_2eproto.base,
  &scc_info_MSG_Ret_GameTime_SC_message_2eproto.base,
  &scc_info_MSG_Ret_LoginOnReturnCharList_SC_message_2eproto.base,
  &scc_info_MSG_Ret_MapScreenBatchRefreshNpc_SC_message_2eproto.base,
  &scc_info_MSG_Ret_MapScreenBatchRemoveCharacter_SC_message_2eproto.base,
  &scc_info_MSG_Ret_MapScreenBatchRemoveNpc_SC_message_2eproto.base,
  &scc_info_MSG_Ret_MapScreenFuncNpc_SC_message_2eproto.base,
  &scc_info_MSG_Ret_MapScreenRefreshCharacter_SC_message_2eproto.base,
  &scc_info_MSG_Ret_MapScreenRefreshNpc_SC_message_2eproto.base,
  &scc_info_MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC_message_2eproto.base,
  &scc_info_MSG_Ret_MapScreenRemoveCharacter_SC_message_2eproto.base,
  &scc_info_MSG_Ret_MapScreenRemoveNpc_SC_message_2eproto.base,
  &scc_info_MSG_Ret_Move_Failed_SC_message_2eproto.base,
  &scc_info_MSG_Ret_Move_SC_message_2eproto.base,
  &scc_info_MSG_Ret_NineScreenRefreshPlayer_SC_message_2eproto.base,
  &scc_info_MSG_Ret_NotifyUserKickout_SC_message_2eproto.base,
  &scc_info_MSG_Ret_QueueInfo_SC_message_2eproto.base,
  &scc_info_MSG_Ret_RetNpcMove_SC_message_2eproto.base,
  &scc_info_MSG_Ret_Rondom_Way_SC_message_2eproto.base,
  &scc_info_MSG_Ret_ServerLoginFailed_SC_message_2eproto.base,
  &scc_info_MSG_Ret_ServerTime_SC_message_2eproto.base,
  &scc_info_MSG_Ret_SetState_SC_message_2eproto.base,
  &scc_info_MSG_Ret_StateList_SC_message_2eproto.base,
  &scc_info_MSG_Ret_UserGameTime_CS_message_2eproto.base,
  &scc_info_MSG_Ret_UserMapInfo_SC_message_2eproto.base,
  &scc_info_MSG_Ret_VisibleNpcList_SC_message_2eproto.base,
  &scc_info_MSG_Ret_setTimeState_SC_message_2eproto.base,
  &scc_info_MSG_START_CUTSCENE_SC_message_2eproto.base,
  &scc_info_MSG_Server_Force_Move_SC_message_2eproto.base,
  &scc_info_MSG_SetChooseTarget_CS_message_2eproto.base,
  &scc_info_MSG_Show_Path_Way_End_CS_message_2eproto.base,
  &scc_info_MSG_USER_REQ_SETPASSWD_CS_message_2eproto.base,
  &scc_info_MSG_UpdateExpLevel_SC_message_2eproto.base,
  &scc_info_MSG_Upload_Crash_Info_message_2eproto.base,
  &scc_info_MSG_UserLoadingOk_CS_message_2eproto.base,
  &scc_info_MSG_UserReqChangeLine_CS_message_2eproto.base,
  &scc_info_MSG_User_Drop_SCS_message_2eproto.base,
  &scc_info_MapNpcData_message_2eproto.base,
  &scc_info_MapUserData_message_2eproto.base,
  &scc_info_MasterData_message_2eproto.base,
  &scc_info_MoveData_message_2eproto.base,
  &scc_info_NPC_HatredList_message_2eproto.base,
  &scc_info_SelectUserInfo_message_2eproto.base,
  &scc_info_StateItem_message_2eproto.base,
  &scc_info_TempNpcInfo_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
static bool descriptor_table_message_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  &descriptor_table_message_2eproto_initialized, descriptor_table_protodef_message_2eproto, "message.proto", 9550,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 99, 1,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 99, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto)), true);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChooseTargetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool ChooseTargetType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CharacterBaseData::InitAsDefaultInstance() {
}
class CharacterBaseData::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterBaseData>()._has_bits_);
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_money(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_welpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tilizhi(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_famelevel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_viplevel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_laststage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_nextexp(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pkmode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_stone(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_edupoint(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_cooppoint(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_bluecrystal(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_bluecrystalincnum(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_purplecrystal(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_purplecrystalincnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_vigourpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_doublepoint(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_familyatt(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CharacterBaseData::CharacterBaseData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CharacterBaseData)
}
CharacterBaseData::CharacterBaseData(const CharacterBaseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herothisid()) {
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
  ::memcpy(&exp_, &from.exp_,
    static_cast<size_t>(reinterpret_cast<char*>(&familyatt_) -
    reinterpret_cast<char*>(&exp_)) + sizeof(familyatt_));
  // @@protoc_insertion_point(copy_constructor:msg.CharacterBaseData)
}

void CharacterBaseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CharacterBaseData_message_2eproto.base);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&familyatt_) -
      reinterpret_cast<char*>(&exp_)) + sizeof(familyatt_));
}

CharacterBaseData::~CharacterBaseData() {
  // @@protoc_insertion_point(destructor:msg.CharacterBaseData)
  SharedDtor();
}

void CharacterBaseData::SharedDtor() {
  herothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CharacterBaseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterBaseData& CharacterBaseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacterBaseData_message_2eproto.base);
  return *internal_default_instance();
}


void CharacterBaseData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CharacterBaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    herothisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&exp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&exp_)) + sizeof(position_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&viplevel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&edupoint_) -
        reinterpret_cast<char*>(&viplevel_)) + sizeof(edupoint_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&cooppoint_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&familyatt_) -
        reinterpret_cast<char*>(&cooppoint_)) + sizeof(familyatt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CharacterBaseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 exp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_money(&has_bits);
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 welpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_welpoint(&has_bits);
          welpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tilizhi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tilizhi(&has_bits);
          tilizhi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 famelevel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_famelevel(&has_bits);
          famelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_position(&has_bits);
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 viplevel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_viplevel(&has_bits);
          viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 port = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 laststage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_laststage(&has_bits);
          laststage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nextexp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_nextexp(&has_bits);
          nextexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkmode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_pkmode(&has_bits);
          pkmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stone = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_stone(&has_bits);
          stone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 edupoint = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_edupoint(&has_bits);
          edupoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cooppoint = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_cooppoint(&has_bits);
          cooppoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bluecrystal = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_bluecrystal(&has_bits);
          bluecrystal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bluecrystalincnum = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_bluecrystalincnum(&has_bits);
          bluecrystalincnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 purplecrystal = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_purplecrystal(&has_bits);
          purplecrystal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 purplecrystalincnum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_purplecrystalincnum(&has_bits);
          purplecrystalincnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 vigourpoint = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_vigourpoint(&has_bits);
          vigourpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 doublepoint = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_doublepoint(&has_bits);
          doublepoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 familyatt = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_familyatt(&has_bits);
          familyatt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string herothisid = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_herothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.CharacterBaseData.herothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterBaseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CharacterBaseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 exp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_exp(), target);
  }

  // optional uint32 money = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_money(), target);
  }

  // optional uint32 welpoint = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_welpoint(), target);
  }

  // optional uint32 tilizhi = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tilizhi(), target);
  }

  // optional uint32 type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_type(), target);
  }

  // optional uint32 famelevel = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_famelevel(), target);
  }

  // optional uint32 position = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_position(), target);
  }

  // optional uint32 viplevel = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_viplevel(), target);
  }

  // optional uint32 port = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_port(), target);
  }

  // optional uint32 laststage = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_laststage(), target);
  }

  // optional uint64 nextexp = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_nextexp(), target);
  }

  // optional uint32 pkmode = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_pkmode(), target);
  }

  // optional uint32 level = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_level(), target);
  }

  // optional uint32 stone = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_stone(), target);
  }

  // optional uint32 edupoint = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_edupoint(), target);
  }

  // optional uint32 cooppoint = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_cooppoint(), target);
  }

  // optional uint32 bluecrystal = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_bluecrystal(), target);
  }

  // optional uint32 bluecrystalincnum = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_bluecrystalincnum(), target);
  }

  // optional uint32 purplecrystal = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_purplecrystal(), target);
  }

  // optional uint32 purplecrystalincnum = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_purplecrystalincnum(), target);
  }

  // optional uint32 vigourpoint = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_vigourpoint(), target);
  }

  // optional uint32 doublepoint = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_doublepoint(), target);
  }

  // optional uint32 familyatt = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_familyatt(), target);
  }

  // optional string herothisid = 25;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herothisid().data(), static_cast<int>(this->_internal_herothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.CharacterBaseData.herothisid");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_herothisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CharacterBaseData)
  return target;
}

size_t CharacterBaseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CharacterBaseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string herothisid = 25;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_herothisid());
    }

    // optional uint64 exp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_exp());
    }

    // optional uint32 money = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_money());
    }

    // optional uint32 welpoint = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_welpoint());
    }

    // optional uint32 tilizhi = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tilizhi());
    }

    // optional uint32 type = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 famelevel = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_famelevel());
    }

    // optional uint32 position = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_position());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 viplevel = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_viplevel());
    }

    // optional uint32 port = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_port());
    }

    // optional uint64 nextexp = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_nextexp());
    }

    // optional uint32 laststage = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_laststage());
    }

    // optional uint32 pkmode = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkmode());
    }

    // optional uint32 level = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 stone = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stone());
    }

    // optional uint32 edupoint = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_edupoint());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 cooppoint = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cooppoint());
    }

    // optional uint32 bluecrystal = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bluecrystal());
    }

    // optional uint32 bluecrystalincnum = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bluecrystalincnum());
    }

    // optional uint32 purplecrystal = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_purplecrystal());
    }

    // optional uint32 purplecrystalincnum = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_purplecrystalincnum());
    }

    // optional uint32 vigourpoint = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vigourpoint());
    }

    // optional uint32 doublepoint = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_doublepoint());
    }

    // optional uint32 familyatt = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_familyatt());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterBaseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.CharacterBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterBaseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacterBaseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.CharacterBaseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.CharacterBaseData)
    MergeFrom(*source);
  }
}

void CharacterBaseData::MergeFrom(const CharacterBaseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.CharacterBaseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000004u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00000008u) {
      welpoint_ = from.welpoint_;
    }
    if (cached_has_bits & 0x00000010u) {
      tilizhi_ = from.tilizhi_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      famelevel_ = from.famelevel_;
    }
    if (cached_has_bits & 0x00000080u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      viplevel_ = from.viplevel_;
    }
    if (cached_has_bits & 0x00000200u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000400u) {
      nextexp_ = from.nextexp_;
    }
    if (cached_has_bits & 0x00000800u) {
      laststage_ = from.laststage_;
    }
    if (cached_has_bits & 0x00001000u) {
      pkmode_ = from.pkmode_;
    }
    if (cached_has_bits & 0x00002000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00004000u) {
      stone_ = from.stone_;
    }
    if (cached_has_bits & 0x00008000u) {
      edupoint_ = from.edupoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      cooppoint_ = from.cooppoint_;
    }
    if (cached_has_bits & 0x00020000u) {
      bluecrystal_ = from.bluecrystal_;
    }
    if (cached_has_bits & 0x00040000u) {
      bluecrystalincnum_ = from.bluecrystalincnum_;
    }
    if (cached_has_bits & 0x00080000u) {
      purplecrystal_ = from.purplecrystal_;
    }
    if (cached_has_bits & 0x00100000u) {
      purplecrystalincnum_ = from.purplecrystalincnum_;
    }
    if (cached_has_bits & 0x00200000u) {
      vigourpoint_ = from.vigourpoint_;
    }
    if (cached_has_bits & 0x00400000u) {
      doublepoint_ = from.doublepoint_;
    }
    if (cached_has_bits & 0x00800000u) {
      familyatt_ = from.familyatt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CharacterBaseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.CharacterBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterBaseData::CopyFrom(const CharacterBaseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CharacterBaseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterBaseData::IsInitialized() const {
  return true;
}

void CharacterBaseData::InternalSwap(CharacterBaseData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herothisid_.Swap(&other->herothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exp_, other->exp_);
  swap(money_, other->money_);
  swap(welpoint_, other->welpoint_);
  swap(tilizhi_, other->tilizhi_);
  swap(type_, other->type_);
  swap(famelevel_, other->famelevel_);
  swap(position_, other->position_);
  swap(viplevel_, other->viplevel_);
  swap(port_, other->port_);
  swap(nextexp_, other->nextexp_);
  swap(laststage_, other->laststage_);
  swap(pkmode_, other->pkmode_);
  swap(level_, other->level_);
  swap(stone_, other->stone_);
  swap(edupoint_, other->edupoint_);
  swap(cooppoint_, other->cooppoint_);
  swap(bluecrystal_, other->bluecrystal_);
  swap(bluecrystalincnum_, other->bluecrystalincnum_);
  swap(purplecrystal_, other->purplecrystal_);
  swap(purplecrystalincnum_, other->purplecrystalincnum_);
  swap(vigourpoint_, other->vigourpoint_);
  swap(doublepoint_, other->doublepoint_);
  swap(familyatt_, other->familyatt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterBaseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AttributeData::InitAsDefaultInstance() {
}
class AttributeData::_Internal {
 public:
  using HasBits = decltype(std::declval<AttributeData>()._has_bits_);
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_intel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_phy(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_matt(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_patt(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mdef(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pdef(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bang(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bangextradamage(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_toughness(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_toughnessreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_penetrate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_penetrateextradamage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_block(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_blockreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_accurate(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_accurateextradamage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_hold(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_holdreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_deflect(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_deflectreducedamage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_dodge(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_weaponatt(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_mp(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_maxmp(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_firemastery(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_icemastery(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_lightningmastery(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_brightmastery(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_darkmastery(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_fireresist(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_iceresist(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_lightningresist(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_brightresist(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_darkresist(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_firepen(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_icepen(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_lightningpen(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_brightpen(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_darkpen(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_blowint(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_knockint(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_floatint(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_superhitint(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_blowresist(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_knockresist(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_floatresist(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_superhitresist(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_blowdectime(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_knockdectime(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_floatdectime(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_superhitdectime(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_stiffaddtime(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_stiffdectime(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
};

AttributeData::AttributeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.AttributeData)
}
AttributeData::AttributeData(const AttributeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hp_, &from.hp_,
    static_cast<size_t>(reinterpret_cast<char*>(&stiffdectime_) -
    reinterpret_cast<char*>(&hp_)) + sizeof(stiffdectime_));
  // @@protoc_insertion_point(copy_constructor:msg.AttributeData)
}

void AttributeData::SharedCtor() {
  ::memset(&hp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stiffdectime_) -
      reinterpret_cast<char*>(&hp_)) + sizeof(stiffdectime_));
}

AttributeData::~AttributeData() {
  // @@protoc_insertion_point(destructor:msg.AttributeData)
  SharedDtor();
}

void AttributeData::SharedDtor() {
}

void AttributeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AttributeData& AttributeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AttributeData_message_2eproto.base);
  return *internal_default_instance();
}


void AttributeData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AttributeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&patt_) -
        reinterpret_cast<char*>(&hp_)) + sizeof(patt_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&mdef_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&penetrateextradamage_) -
        reinterpret_cast<char*>(&mdef_)) + sizeof(penetrateextradamage_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&block_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deflectreducedamage_) -
        reinterpret_cast<char*>(&block_)) + sizeof(deflectreducedamage_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&dodge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lightningmastery_) -
        reinterpret_cast<char*>(&dodge_)) + sizeof(lightningmastery_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&brightmastery_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&firepen_) -
        reinterpret_cast<char*>(&brightmastery_)) + sizeof(firepen_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&icepen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&superhitint_) -
        reinterpret_cast<char*>(&icepen_)) + sizeof(superhitint_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&blowresist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&superhitdectime_) -
        reinterpret_cast<char*>(&blowresist_)) + sizeof(superhitdectime_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&stiffaddtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stiffdectime_) -
        reinterpret_cast<char*>(&stiffaddtime_)) + sizeof(stiffdectime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AttributeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hp(&_has_bits_);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_maxhp(&_has_bits_);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 str = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_str(&_has_bits_);
          str_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dex(&_has_bits_);
          dex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 intel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_intel(&_has_bits_);
          intel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 phy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_phy(&_has_bits_);
          phy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 matt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_matt(&_has_bits_);
          matt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 patt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_patt(&_has_bits_);
          patt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mdef = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_mdef(&_has_bits_);
          mdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdef = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pdef(&_has_bits_);
          pdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bang = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_bang(&_has_bits_);
          bang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bangextradamage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_bangextradamage(&_has_bits_);
          bangextradamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 toughness = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_toughness(&_has_bits_);
          toughness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 toughnessreducedamage = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_toughnessreducedamage(&_has_bits_);
          toughnessreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penetrate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_penetrate(&_has_bits_);
          penetrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 penetrateextradamage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_penetrateextradamage(&_has_bits_);
          penetrateextradamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 block = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_block(&_has_bits_);
          block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blockreducedamage = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_blockreducedamage(&_has_bits_);
          blockreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accurate = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_accurate(&_has_bits_);
          accurate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accurateextradamage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_accurateextradamage(&_has_bits_);
          accurateextradamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hold = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_hold(&_has_bits_);
          hold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 holdreducedamage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_holdreducedamage(&_has_bits_);
          holdreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deflect = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_deflect(&_has_bits_);
          deflect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deflectreducedamage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_deflectreducedamage(&_has_bits_);
          deflectreducedamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dodge = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_dodge(&_has_bits_);
          dodge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weaponatt = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_weaponatt(&_has_bits_);
          weaponatt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mp = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_mp(&_has_bits_);
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxmp = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_maxmp(&_has_bits_);
          maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hit = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_hit(&_has_bits_);
          hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 firemastery = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_firemastery(&_has_bits_);
          firemastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 icemastery = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_icemastery(&_has_bits_);
          icemastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lightningmastery = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_lightningmastery(&_has_bits_);
          lightningmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 brightmastery = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_brightmastery(&_has_bits_);
          brightmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 darkmastery = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_darkmastery(&_has_bits_);
          darkmastery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fireresist = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fireresist(&_has_bits_);
          fireresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 iceresist = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_iceresist(&_has_bits_);
          iceresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lightningresist = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lightningresist(&_has_bits_);
          lightningresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 brightresist = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_brightresist(&_has_bits_);
          brightresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 darkresist = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_darkresist(&_has_bits_);
          darkresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 firepen = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_firepen(&_has_bits_);
          firepen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 icepen = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_icepen(&_has_bits_);
          icepen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lightningpen = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_lightningpen(&_has_bits_);
          lightningpen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 brightpen = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_brightpen(&_has_bits_);
          brightpen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 darkpen = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_darkpen(&_has_bits_);
          darkpen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blowint = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_blowint(&_has_bits_);
          blowint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 knockint = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_knockint(&_has_bits_);
          knockint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 floatint = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_floatint(&_has_bits_);
          floatint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 superhitint = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_superhitint(&_has_bits_);
          superhitint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blowresist = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_blowresist(&_has_bits_);
          blowresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 knockresist = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_knockresist(&_has_bits_);
          knockresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 floatresist = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_floatresist(&_has_bits_);
          floatresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 superhitresist = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_superhitresist(&_has_bits_);
          superhitresist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 blowdectime = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_blowdectime(&_has_bits_);
          blowdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 knockdectime = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_knockdectime(&_has_bits_);
          knockdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 floatdectime = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_floatdectime(&_has_bits_);
          floatdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 superhitdectime = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_superhitdectime(&_has_bits_);
          superhitdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stiffaddtime = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_stiffaddtime(&_has_bits_);
          stiffaddtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stiffdectime = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_stiffdectime(&_has_bits_);
          stiffdectime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AttributeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AttributeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hp(), target);
  }

  // optional uint32 maxhp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxhp(), target);
  }

  // optional uint32 str = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_str(), target);
  }

  // optional uint32 dex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dex(), target);
  }

  // optional uint32 intel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_intel(), target);
  }

  // optional uint32 phy = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_phy(), target);
  }

  // optional uint32 matt = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_matt(), target);
  }

  // optional uint32 patt = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_patt(), target);
  }

  // optional uint32 mdef = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_mdef(), target);
  }

  // optional uint32 pdef = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pdef(), target);
  }

  // optional uint32 bang = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_bang(), target);
  }

  // optional uint32 bangextradamage = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_bangextradamage(), target);
  }

  // optional uint32 toughness = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_toughness(), target);
  }

  // optional uint32 toughnessreducedamage = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_toughnessreducedamage(), target);
  }

  // optional uint32 penetrate = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_penetrate(), target);
  }

  // optional uint32 penetrateextradamage = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_penetrateextradamage(), target);
  }

  // optional uint32 block = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_block(), target);
  }

  // optional uint32 blockreducedamage = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_blockreducedamage(), target);
  }

  // optional uint32 accurate = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_accurate(), target);
  }

  // optional uint32 accurateextradamage = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_accurateextradamage(), target);
  }

  // optional uint32 hold = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_hold(), target);
  }

  // optional uint32 holdreducedamage = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_holdreducedamage(), target);
  }

  // optional uint32 deflect = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_deflect(), target);
  }

  // optional uint32 deflectreducedamage = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_deflectreducedamage(), target);
  }

  // optional uint32 dodge = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_dodge(), target);
  }

  // optional uint32 weaponatt = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_weaponatt(), target);
  }

  // optional uint32 mp = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_mp(), target);
  }

  // optional uint32 maxmp = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_maxmp(), target);
  }

  // optional uint32 hit = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_hit(), target);
  }

  // optional uint32 firemastery = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_firemastery(), target);
  }

  // optional uint32 icemastery = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_icemastery(), target);
  }

  // optional uint32 lightningmastery = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_lightningmastery(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 brightmastery = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_brightmastery(), target);
  }

  // optional uint32 darkmastery = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_darkmastery(), target);
  }

  // optional uint32 fireresist = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_fireresist(), target);
  }

  // optional uint32 iceresist = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_iceresist(), target);
  }

  // optional uint32 lightningresist = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_lightningresist(), target);
  }

  // optional uint32 brightresist = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_brightresist(), target);
  }

  // optional uint32 darkresist = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_darkresist(), target);
  }

  // optional uint32 firepen = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_firepen(), target);
  }

  // optional uint32 icepen = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_icepen(), target);
  }

  // optional uint32 lightningpen = 42;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_lightningpen(), target);
  }

  // optional uint32 brightpen = 43;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_brightpen(), target);
  }

  // optional uint32 darkpen = 44;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_darkpen(), target);
  }

  // optional uint32 blowint = 45;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_blowint(), target);
  }

  // optional uint32 knockint = 46;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_knockint(), target);
  }

  // optional uint32 floatint = 47;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_floatint(), target);
  }

  // optional uint32 superhitint = 48;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_superhitint(), target);
  }

  // optional uint32 blowresist = 49;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_blowresist(), target);
  }

  // optional uint32 knockresist = 50;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_knockresist(), target);
  }

  // optional uint32 floatresist = 51;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_floatresist(), target);
  }

  // optional uint32 superhitresist = 52;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_superhitresist(), target);
  }

  // optional uint32 blowdectime = 53;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_blowdectime(), target);
  }

  // optional uint32 knockdectime = 54;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_knockdectime(), target);
  }

  // optional uint32 floatdectime = 55;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_floatdectime(), target);
  }

  // optional uint32 superhitdectime = 56;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_superhitdectime(), target);
  }

  // optional uint32 stiffaddtime = 57;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(57, this->_internal_stiffaddtime(), target);
  }

  // optional uint32 stiffdectime = 58;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_stiffdectime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AttributeData)
  return target;
}

size_t AttributeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AttributeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hp());
    }

    // optional uint32 maxhp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhp());
    }

    // optional uint32 str = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_str());
    }

    // optional uint32 dex = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dex());
    }

    // optional uint32 intel = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_intel());
    }

    // optional uint32 phy = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_phy());
    }

    // optional uint32 matt = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_matt());
    }

    // optional uint32 patt = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_patt());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 mdef = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mdef());
    }

    // optional uint32 pdef = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdef());
    }

    // optional uint32 bang = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bang());
    }

    // optional uint32 bangextradamage = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bangextradamage());
    }

    // optional uint32 toughness = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_toughness());
    }

    // optional uint32 toughnessreducedamage = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_toughnessreducedamage());
    }

    // optional uint32 penetrate = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penetrate());
    }

    // optional uint32 penetrateextradamage = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_penetrateextradamage());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 block = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_block());
    }

    // optional uint32 blockreducedamage = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blockreducedamage());
    }

    // optional uint32 accurate = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accurate());
    }

    // optional uint32 accurateextradamage = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accurateextradamage());
    }

    // optional uint32 hold = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hold());
    }

    // optional uint32 holdreducedamage = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_holdreducedamage());
    }

    // optional uint32 deflect = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deflect());
    }

    // optional uint32 deflectreducedamage = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deflectreducedamage());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 dodge = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dodge());
    }

    // optional uint32 weaponatt = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weaponatt());
    }

    // optional uint32 mp = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mp());
    }

    // optional uint32 maxmp = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxmp());
    }

    // optional uint32 hit = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hit());
    }

    // optional uint32 firemastery = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_firemastery());
    }

    // optional uint32 icemastery = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_icemastery());
    }

    // optional uint32 lightningmastery = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lightningmastery());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 brightmastery = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_brightmastery());
    }

    // optional uint32 darkmastery = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_darkmastery());
    }

    // optional uint32 fireresist = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fireresist());
    }

    // optional uint32 iceresist = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_iceresist());
    }

    // optional uint32 lightningresist = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lightningresist());
    }

    // optional uint32 brightresist = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_brightresist());
    }

    // optional uint32 darkresist = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_darkresist());
    }

    // optional uint32 firepen = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_firepen());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 icepen = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_icepen());
    }

    // optional uint32 lightningpen = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lightningpen());
    }

    // optional uint32 brightpen = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_brightpen());
    }

    // optional uint32 darkpen = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_darkpen());
    }

    // optional uint32 blowint = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blowint());
    }

    // optional uint32 knockint = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_knockint());
    }

    // optional uint32 floatint = 47;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_floatint());
    }

    // optional uint32 superhitint = 48;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_superhitint());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 blowresist = 49;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blowresist());
    }

    // optional uint32 knockresist = 50;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_knockresist());
    }

    // optional uint32 floatresist = 51;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_floatresist());
    }

    // optional uint32 superhitresist = 52;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_superhitresist());
    }

    // optional uint32 blowdectime = 53;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_blowdectime());
    }

    // optional uint32 knockdectime = 54;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_knockdectime());
    }

    // optional uint32 floatdectime = 55;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_floatdectime());
    }

    // optional uint32 superhitdectime = 56;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_superhitdectime());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional uint32 stiffaddtime = 57;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stiffaddtime());
    }

    // optional uint32 stiffdectime = 58;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stiffdectime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.AttributeData)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AttributeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.AttributeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.AttributeData)
    MergeFrom(*source);
  }
}

void AttributeData::MergeFrom(const AttributeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.AttributeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000002u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000004u) {
      str_ = from.str_;
    }
    if (cached_has_bits & 0x00000008u) {
      dex_ = from.dex_;
    }
    if (cached_has_bits & 0x00000010u) {
      intel_ = from.intel_;
    }
    if (cached_has_bits & 0x00000020u) {
      phy_ = from.phy_;
    }
    if (cached_has_bits & 0x00000040u) {
      matt_ = from.matt_;
    }
    if (cached_has_bits & 0x00000080u) {
      patt_ = from.patt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mdef_ = from.mdef_;
    }
    if (cached_has_bits & 0x00000200u) {
      pdef_ = from.pdef_;
    }
    if (cached_has_bits & 0x00000400u) {
      bang_ = from.bang_;
    }
    if (cached_has_bits & 0x00000800u) {
      bangextradamage_ = from.bangextradamage_;
    }
    if (cached_has_bits & 0x00001000u) {
      toughness_ = from.toughness_;
    }
    if (cached_has_bits & 0x00002000u) {
      toughnessreducedamage_ = from.toughnessreducedamage_;
    }
    if (cached_has_bits & 0x00004000u) {
      penetrate_ = from.penetrate_;
    }
    if (cached_has_bits & 0x00008000u) {
      penetrateextradamage_ = from.penetrateextradamage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      block_ = from.block_;
    }
    if (cached_has_bits & 0x00020000u) {
      blockreducedamage_ = from.blockreducedamage_;
    }
    if (cached_has_bits & 0x00040000u) {
      accurate_ = from.accurate_;
    }
    if (cached_has_bits & 0x00080000u) {
      accurateextradamage_ = from.accurateextradamage_;
    }
    if (cached_has_bits & 0x00100000u) {
      hold_ = from.hold_;
    }
    if (cached_has_bits & 0x00200000u) {
      holdreducedamage_ = from.holdreducedamage_;
    }
    if (cached_has_bits & 0x00400000u) {
      deflect_ = from.deflect_;
    }
    if (cached_has_bits & 0x00800000u) {
      deflectreducedamage_ = from.deflectreducedamage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      dodge_ = from.dodge_;
    }
    if (cached_has_bits & 0x02000000u) {
      weaponatt_ = from.weaponatt_;
    }
    if (cached_has_bits & 0x04000000u) {
      mp_ = from.mp_;
    }
    if (cached_has_bits & 0x08000000u) {
      maxmp_ = from.maxmp_;
    }
    if (cached_has_bits & 0x10000000u) {
      hit_ = from.hit_;
    }
    if (cached_has_bits & 0x20000000u) {
      firemastery_ = from.firemastery_;
    }
    if (cached_has_bits & 0x40000000u) {
      icemastery_ = from.icemastery_;
    }
    if (cached_has_bits & 0x80000000u) {
      lightningmastery_ = from.lightningmastery_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      brightmastery_ = from.brightmastery_;
    }
    if (cached_has_bits & 0x00000002u) {
      darkmastery_ = from.darkmastery_;
    }
    if (cached_has_bits & 0x00000004u) {
      fireresist_ = from.fireresist_;
    }
    if (cached_has_bits & 0x00000008u) {
      iceresist_ = from.iceresist_;
    }
    if (cached_has_bits & 0x00000010u) {
      lightningresist_ = from.lightningresist_;
    }
    if (cached_has_bits & 0x00000020u) {
      brightresist_ = from.brightresist_;
    }
    if (cached_has_bits & 0x00000040u) {
      darkresist_ = from.darkresist_;
    }
    if (cached_has_bits & 0x00000080u) {
      firepen_ = from.firepen_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      icepen_ = from.icepen_;
    }
    if (cached_has_bits & 0x00000200u) {
      lightningpen_ = from.lightningpen_;
    }
    if (cached_has_bits & 0x00000400u) {
      brightpen_ = from.brightpen_;
    }
    if (cached_has_bits & 0x00000800u) {
      darkpen_ = from.darkpen_;
    }
    if (cached_has_bits & 0x00001000u) {
      blowint_ = from.blowint_;
    }
    if (cached_has_bits & 0x00002000u) {
      knockint_ = from.knockint_;
    }
    if (cached_has_bits & 0x00004000u) {
      floatint_ = from.floatint_;
    }
    if (cached_has_bits & 0x00008000u) {
      superhitint_ = from.superhitint_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      blowresist_ = from.blowresist_;
    }
    if (cached_has_bits & 0x00020000u) {
      knockresist_ = from.knockresist_;
    }
    if (cached_has_bits & 0x00040000u) {
      floatresist_ = from.floatresist_;
    }
    if (cached_has_bits & 0x00080000u) {
      superhitresist_ = from.superhitresist_;
    }
    if (cached_has_bits & 0x00100000u) {
      blowdectime_ = from.blowdectime_;
    }
    if (cached_has_bits & 0x00200000u) {
      knockdectime_ = from.knockdectime_;
    }
    if (cached_has_bits & 0x00400000u) {
      floatdectime_ = from.floatdectime_;
    }
    if (cached_has_bits & 0x00800000u) {
      superhitdectime_ = from.superhitdectime_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      stiffaddtime_ = from.stiffaddtime_;
    }
    if (cached_has_bits & 0x02000000u) {
      stiffdectime_ = from.stiffdectime_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void AttributeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.AttributeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeData::CopyFrom(const AttributeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AttributeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeData::IsInitialized() const {
  return true;
}

void AttributeData::InternalSwap(AttributeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(hp_, other->hp_);
  swap(maxhp_, other->maxhp_);
  swap(str_, other->str_);
  swap(dex_, other->dex_);
  swap(intel_, other->intel_);
  swap(phy_, other->phy_);
  swap(matt_, other->matt_);
  swap(patt_, other->patt_);
  swap(mdef_, other->mdef_);
  swap(pdef_, other->pdef_);
  swap(bang_, other->bang_);
  swap(bangextradamage_, other->bangextradamage_);
  swap(toughness_, other->toughness_);
  swap(toughnessreducedamage_, other->toughnessreducedamage_);
  swap(penetrate_, other->penetrate_);
  swap(penetrateextradamage_, other->penetrateextradamage_);
  swap(block_, other->block_);
  swap(blockreducedamage_, other->blockreducedamage_);
  swap(accurate_, other->accurate_);
  swap(accurateextradamage_, other->accurateextradamage_);
  swap(hold_, other->hold_);
  swap(holdreducedamage_, other->holdreducedamage_);
  swap(deflect_, other->deflect_);
  swap(deflectreducedamage_, other->deflectreducedamage_);
  swap(dodge_, other->dodge_);
  swap(weaponatt_, other->weaponatt_);
  swap(mp_, other->mp_);
  swap(maxmp_, other->maxmp_);
  swap(hit_, other->hit_);
  swap(firemastery_, other->firemastery_);
  swap(icemastery_, other->icemastery_);
  swap(lightningmastery_, other->lightningmastery_);
  swap(brightmastery_, other->brightmastery_);
  swap(darkmastery_, other->darkmastery_);
  swap(fireresist_, other->fireresist_);
  swap(iceresist_, other->iceresist_);
  swap(lightningresist_, other->lightningresist_);
  swap(brightresist_, other->brightresist_);
  swap(darkresist_, other->darkresist_);
  swap(firepen_, other->firepen_);
  swap(icepen_, other->icepen_);
  swap(lightningpen_, other->lightningpen_);
  swap(brightpen_, other->brightpen_);
  swap(darkpen_, other->darkpen_);
  swap(blowint_, other->blowint_);
  swap(knockint_, other->knockint_);
  swap(floatint_, other->floatint_);
  swap(superhitint_, other->superhitint_);
  swap(blowresist_, other->blowresist_);
  swap(knockresist_, other->knockresist_);
  swap(floatresist_, other->floatresist_);
  swap(superhitresist_, other->superhitresist_);
  swap(blowdectime_, other->blowdectime_);
  swap(knockdectime_, other->knockdectime_);
  swap(floatdectime_, other->floatdectime_);
  swap(superhitdectime_, other->superhitdectime_);
  swap(stiffaddtime_, other->stiffaddtime_);
  swap(stiffdectime_, other->stiffdectime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CharacterFightData::InitAsDefaultInstance() {
}
class CharacterFightData::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterFightData>()._has_bits_);
  static void set_has_curfightvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CharacterFightData::CharacterFightData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CharacterFightData)
}
CharacterFightData::CharacterFightData(const CharacterFightData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  curfightvalue_ = from.curfightvalue_;
  // @@protoc_insertion_point(copy_constructor:msg.CharacterFightData)
}

void CharacterFightData::SharedCtor() {
  curfightvalue_ = 0u;
}

CharacterFightData::~CharacterFightData() {
  // @@protoc_insertion_point(destructor:msg.CharacterFightData)
  SharedDtor();
}

void CharacterFightData::SharedDtor() {
}

void CharacterFightData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterFightData& CharacterFightData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacterFightData_message_2eproto.base);
  return *internal_default_instance();
}


void CharacterFightData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CharacterFightData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curfightvalue_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CharacterFightData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 curfightvalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_curfightvalue(&has_bits);
          curfightvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterFightData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CharacterFightData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 curfightvalue = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_curfightvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CharacterFightData)
  return target;
}

size_t CharacterFightData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CharacterFightData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 curfightvalue = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_curfightvalue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterFightData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.CharacterFightData)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterFightData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacterFightData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.CharacterFightData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.CharacterFightData)
    MergeFrom(*source);
  }
}

void CharacterFightData::MergeFrom(const CharacterFightData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.CharacterFightData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_curfightvalue()) {
    _internal_set_curfightvalue(from._internal_curfightvalue());
  }
}

void CharacterFightData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.CharacterFightData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterFightData::CopyFrom(const CharacterFightData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CharacterFightData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterFightData::IsInitialized() const {
  return true;
}

void CharacterFightData::InternalSwap(CharacterFightData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(curfightvalue_, other->curfightvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterFightData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CharacterMainData::InitAsDefaultInstance() {
  ::msg::_CharacterMainData_default_instance_._instance.get_mutable()->basedata_ = const_cast< ::msg::CharacterBaseData*>(
      ::msg::CharacterBaseData::internal_default_instance());
  ::msg::_CharacterMainData_default_instance_._instance.get_mutable()->attridata_ = const_cast< ::msg::AttributeData*>(
      ::msg::AttributeData::internal_default_instance());
  ::msg::_CharacterMainData_default_instance_._instance.get_mutable()->mapdata_ = const_cast< ::msg::MapUserData*>(
      ::msg::MapUserData::internal_default_instance());
  ::msg::_CharacterMainData_default_instance_._instance.get_mutable()->fightdata_ = const_cast< ::msg::CharacterFightData*>(
      ::msg::CharacterFightData::internal_default_instance());
}
class CharacterMainData::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterMainData>()._has_bits_);
  static const ::msg::CharacterBaseData& basedata(const CharacterMainData* msg);
  static void set_has_basedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msg::AttributeData& attridata(const CharacterMainData* msg);
  static void set_has_attridata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::msg::MapUserData& mapdata(const CharacterMainData* msg);
  static void set_has_mapdata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::msg::CharacterFightData& fightdata(const CharacterMainData* msg);
  static void set_has_fightdata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::msg::CharacterBaseData&
CharacterMainData::_Internal::basedata(const CharacterMainData* msg) {
  return *msg->basedata_;
}
const ::msg::AttributeData&
CharacterMainData::_Internal::attridata(const CharacterMainData* msg) {
  return *msg->attridata_;
}
const ::msg::MapUserData&
CharacterMainData::_Internal::mapdata(const CharacterMainData* msg) {
  return *msg->mapdata_;
}
const ::msg::CharacterFightData&
CharacterMainData::_Internal::fightdata(const CharacterMainData* msg) {
  return *msg->fightdata_;
}
CharacterMainData::CharacterMainData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CharacterMainData)
}
CharacterMainData::CharacterMainData(const CharacterMainData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_basedata()) {
    basedata_ = new ::msg::CharacterBaseData(*from.basedata_);
  } else {
    basedata_ = nullptr;
  }
  if (from._internal_has_attridata()) {
    attridata_ = new ::msg::AttributeData(*from.attridata_);
  } else {
    attridata_ = nullptr;
  }
  if (from._internal_has_mapdata()) {
    mapdata_ = new ::msg::MapUserData(*from.mapdata_);
  } else {
    mapdata_ = nullptr;
  }
  if (from._internal_has_fightdata()) {
    fightdata_ = new ::msg::CharacterFightData(*from.fightdata_);
  } else {
    fightdata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msg.CharacterMainData)
}

void CharacterMainData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CharacterMainData_message_2eproto.base);
  ::memset(&basedata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fightdata_) -
      reinterpret_cast<char*>(&basedata_)) + sizeof(fightdata_));
}

CharacterMainData::~CharacterMainData() {
  // @@protoc_insertion_point(destructor:msg.CharacterMainData)
  SharedDtor();
}

void CharacterMainData::SharedDtor() {
  if (this != internal_default_instance()) delete basedata_;
  if (this != internal_default_instance()) delete attridata_;
  if (this != internal_default_instance()) delete mapdata_;
  if (this != internal_default_instance()) delete fightdata_;
}

void CharacterMainData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterMainData& CharacterMainData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacterMainData_message_2eproto.base);
  return *internal_default_instance();
}


void CharacterMainData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CharacterMainData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(basedata_ != nullptr);
      basedata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(attridata_ != nullptr);
      attridata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mapdata_ != nullptr);
      mapdata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(fightdata_ != nullptr);
      fightdata_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CharacterMainData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.CharacterBaseData basedata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_basedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.AttributeData attridata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attridata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.MapUserData mapdata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.CharacterFightData fightdata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fightdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterMainData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CharacterMainData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.CharacterBaseData basedata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::basedata(this), target, stream);
  }

  // optional .msg.AttributeData attridata = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attridata(this), target, stream);
  }

  // optional .msg.MapUserData mapdata = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mapdata(this), target, stream);
  }

  // optional .msg.CharacterFightData fightdata = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::fightdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CharacterMainData)
  return target;
}

size_t CharacterMainData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CharacterMainData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .msg.CharacterBaseData basedata = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *basedata_);
    }

    // optional .msg.AttributeData attridata = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *attridata_);
    }

    // optional .msg.MapUserData mapdata = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mapdata_);
    }

    // optional .msg.CharacterFightData fightdata = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fightdata_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterMainData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.CharacterMainData)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterMainData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacterMainData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.CharacterMainData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.CharacterMainData)
    MergeFrom(*source);
  }
}

void CharacterMainData::MergeFrom(const CharacterMainData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.CharacterMainData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_basedata()->::msg::CharacterBaseData::MergeFrom(from._internal_basedata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_attridata()->::msg::AttributeData::MergeFrom(from._internal_attridata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mapdata()->::msg::MapUserData::MergeFrom(from._internal_mapdata());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_fightdata()->::msg::CharacterFightData::MergeFrom(from._internal_fightdata());
    }
  }
}

void CharacterMainData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.CharacterMainData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMainData::CopyFrom(const CharacterMainData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CharacterMainData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMainData::IsInitialized() const {
  return true;
}

void CharacterMainData::InternalSwap(CharacterMainData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(basedata_, other->basedata_);
  swap(attridata_, other->attridata_);
  swap(mapdata_, other->mapdata_);
  swap(fightdata_, other->fightdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterMainData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CharacterMapShow::InitAsDefaultInstance() {
}
class CharacterMapShow::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterMapShow>()._has_bits_);
  static void set_has_face(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weapon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_coat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_occupation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_facestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hairstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_haircolor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bodystyle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_avatarid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CharacterMapShow::CharacterMapShow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CharacterMapShow)
}
CharacterMapShow::CharacterMapShow(const CharacterMapShow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&face_, &from.face_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatarid_) -
    reinterpret_cast<char*>(&face_)) + sizeof(avatarid_));
  // @@protoc_insertion_point(copy_constructor:msg.CharacterMapShow)
}

void CharacterMapShow::SharedCtor() {
  ::memset(&face_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarid_) -
      reinterpret_cast<char*>(&face_)) + sizeof(avatarid_));
}

CharacterMapShow::~CharacterMapShow() {
  // @@protoc_insertion_point(destructor:msg.CharacterMapShow)
  SharedDtor();
}

void CharacterMapShow::SharedDtor() {
}

void CharacterMapShow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterMapShow& CharacterMapShow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacterMapShow_message_2eproto.base);
  return *internal_default_instance();
}


void CharacterMapShow::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CharacterMapShow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&face_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&haircolor_) -
        reinterpret_cast<char*>(&face_)) + sizeof(haircolor_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&antenna_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avatarid_) -
        reinterpret_cast<char*>(&antenna_)) + sizeof(avatarid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CharacterMapShow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 face = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_face(&has_bits);
          face_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weapon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_weapon(&has_bits);
          weapon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 coat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_coat(&has_bits);
          coat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 occupation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_occupation(&has_bits);
          occupation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 facestyle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_facestyle(&has_bits);
          facestyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hairstyle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hairstyle(&has_bits);
          hairstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 haircolor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_haircolor(&has_bits);
          haircolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 antenna = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_antenna(&has_bits);
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bodystyle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bodystyle(&has_bits);
          bodystyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avatarId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_avatarid(&has_bits);
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterMapShow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CharacterMapShow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 face = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_face(), target);
  }

  // optional uint32 weapon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_weapon(), target);
  }

  // optional uint32 coat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_coat(), target);
  }

  // optional uint32 occupation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_occupation(), target);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heroid(), target);
  }

  // optional uint32 facestyle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_facestyle(), target);
  }

  // optional uint32 hairstyle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hairstyle(), target);
  }

  // optional uint32 haircolor = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_haircolor(), target);
  }

  // optional uint32 antenna = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_antenna(), target);
  }

  // optional uint32 bodystyle = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_bodystyle(), target);
  }

  // optional uint32 avatarId = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_avatarid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CharacterMapShow)
  return target;
}

size_t CharacterMapShow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CharacterMapShow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 face = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_face());
    }

    // optional uint32 weapon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weapon());
    }

    // optional uint32 coat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coat());
    }

    // optional uint32 occupation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_occupation());
    }

    // optional uint32 heroid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 facestyle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_facestyle());
    }

    // optional uint32 hairstyle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hairstyle());
    }

    // optional uint32 haircolor = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_haircolor());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 antenna = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_antenna());
    }

    // optional uint32 bodystyle = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bodystyle());
    }

    // optional uint32 avatarId = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avatarid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterMapShow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.CharacterMapShow)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterMapShow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacterMapShow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.CharacterMapShow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.CharacterMapShow)
    MergeFrom(*source);
  }
}

void CharacterMapShow::MergeFrom(const CharacterMapShow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.CharacterMapShow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      face_ = from.face_;
    }
    if (cached_has_bits & 0x00000002u) {
      weapon_ = from.weapon_;
    }
    if (cached_has_bits & 0x00000004u) {
      coat_ = from.coat_;
    }
    if (cached_has_bits & 0x00000008u) {
      occupation_ = from.occupation_;
    }
    if (cached_has_bits & 0x00000010u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000020u) {
      facestyle_ = from.facestyle_;
    }
    if (cached_has_bits & 0x00000040u) {
      hairstyle_ = from.hairstyle_;
    }
    if (cached_has_bits & 0x00000080u) {
      haircolor_ = from.haircolor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      antenna_ = from.antenna_;
    }
    if (cached_has_bits & 0x00000200u) {
      bodystyle_ = from.bodystyle_;
    }
    if (cached_has_bits & 0x00000400u) {
      avatarid_ = from.avatarid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CharacterMapShow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.CharacterMapShow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMapShow::CopyFrom(const CharacterMapShow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CharacterMapShow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMapShow::IsInitialized() const {
  return true;
}

void CharacterMapShow::InternalSwap(CharacterMapShow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(face_, other->face_);
  swap(weapon_, other->weapon_);
  swap(coat_, other->coat_);
  swap(occupation_, other->occupation_);
  swap(heroid_, other->heroid_);
  swap(facestyle_, other->facestyle_);
  swap(hairstyle_, other->hairstyle_);
  swap(haircolor_, other->haircolor_);
  swap(antenna_, other->antenna_);
  swap(bodystyle_, other->bodystyle_);
  swap(avatarid_, other->avatarid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterMapShow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CharacterMapData::InitAsDefaultInstance() {
  ::msg::_CharacterMapData_default_instance_._instance.get_mutable()->pos_ = const_cast< ::msg::FloatMovePos*>(
      ::msg::FloatMovePos::internal_default_instance());
}
class CharacterMapData::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterMapData>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::msg::FloatMovePos& pos(const CharacterMapData* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_movespeed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_guildname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msg::FloatMovePos&
CharacterMapData::_Internal::pos(const CharacterMapData* msg) {
  return *msg->pos_;
}
CharacterMapData::CharacterMapData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.CharacterMapData)
}
CharacterMapData::CharacterMapData(const CharacterMapData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      states_(from.states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_guildname()) {
    guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
  }
  if (from._internal_has_pos()) {
    pos_ = new ::msg::FloatMovePos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&country_) -
    reinterpret_cast<char*>(&level_)) + sizeof(country_));
  // @@protoc_insertion_point(copy_constructor:msg.CharacterMapData)
}

void CharacterMapData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CharacterMapData_message_2eproto.base);
  guildname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&country_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(country_));
}

CharacterMapData::~CharacterMapData() {
  // @@protoc_insertion_point(destructor:msg.CharacterMapData)
  SharedDtor();
}

void CharacterMapData::SharedDtor() {
  guildname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void CharacterMapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CharacterMapData& CharacterMapData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CharacterMapData_message_2eproto.base);
  return *internal_default_instance();
}


void CharacterMapData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CharacterMapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      guildname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teamid_) -
        reinterpret_cast<char*>(&level_)) + sizeof(teamid_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&guildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&country_) -
        reinterpret_cast<char*>(&guildid_)) + sizeof(country_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CharacterMapData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.FloatMovePos pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 movespeed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_movespeed(&has_bits);
          movespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.StateItem states = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 teamid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 guildid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 country = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_country(&has_bits);
          country_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guildname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_guildname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.CharacterMapData.guildname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CharacterMapData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CharacterMapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 level = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_level(), target);
  }

  // optional .msg.FloatMovePos pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // optional uint32 dir = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dir(), target);
  }

  // optional uint32 movespeed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_movespeed(), target);
  }

  // optional uint32 hp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hp(), target);
  }

  // optional uint32 maxhp = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_maxhp(), target);
  }

  // repeated .msg.StateItem states = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_states(i), target, stream);
  }

  // optional uint32 teamid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_teamid(), target);
  }

  // optional uint64 guildid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_guildid(), target);
  }

  // optional uint32 country = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_country(), target);
  }

  // optional string guildname = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.CharacterMapData.guildname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_guildname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CharacterMapData)
  return target;
}

size_t CharacterMapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CharacterMapData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.StateItem states = 7;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string guildname = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_guildname());
    }

    // optional .msg.FloatMovePos pos = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional uint32 level = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 dir = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dir());
    }

    // optional uint32 movespeed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_movespeed());
    }

    // optional uint32 hp = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hp());
    }

    // optional uint32 maxhp = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhp());
    }

    // optional uint32 teamid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 guildid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guildid());
    }

    // optional uint32 country = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_country());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CharacterMapData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.CharacterMapData)
  GOOGLE_DCHECK_NE(&from, this);
  const CharacterMapData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CharacterMapData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.CharacterMapData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.CharacterMapData)
    MergeFrom(*source);
  }
}

void CharacterMapData::MergeFrom(const CharacterMapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.CharacterMapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guildname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guildname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pos()->::msg::FloatMovePos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000010u) {
      movespeed_ = from.movespeed_;
    }
    if (cached_has_bits & 0x00000020u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000040u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000080u) {
      teamid_ = from.teamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000200u) {
      country_ = from.country_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CharacterMapData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.CharacterMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMapData::CopyFrom(const CharacterMapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CharacterMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMapData::IsInitialized() const {
  return true;
}

void CharacterMapData::InternalSwap(CharacterMapData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  states_.InternalSwap(&other->states_);
  guildname_.Swap(&other->guildname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(level_, other->level_);
  swap(dir_, other->dir_);
  swap(movespeed_, other->movespeed_);
  swap(hp_, other->hp_);
  swap(maxhp_, other->maxhp_);
  swap(teamid_, other->teamid_);
  swap(guildid_, other->guildid_);
  swap(country_, other->country_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CharacterMapData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StateItem::InitAsDefaultInstance() {
}
class StateItem::_Internal {
 public:
  using HasBits = decltype(std::declval<StateItem>()._has_bits_);
  static void set_has_uniqid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lasttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_overtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_settime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_configtime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_skilluuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

StateItem::StateItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.StateItem)
}
StateItem::StateItem(const StateItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      effects_(from.effects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uniqid_, &from.uniqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skilluuid_) -
    reinterpret_cast<char*>(&uniqid_)) + sizeof(skilluuid_));
  // @@protoc_insertion_point(copy_constructor:msg.StateItem)
}

void StateItem::SharedCtor() {
  ::memset(&uniqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skilluuid_) -
      reinterpret_cast<char*>(&uniqid_)) + sizeof(skilluuid_));
}

StateItem::~StateItem() {
  // @@protoc_insertion_point(destructor:msg.StateItem)
  SharedDtor();
}

void StateItem::SharedDtor() {
}

void StateItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateItem& StateItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateItem_message_2eproto.base);
  return *internal_default_instance();
}


void StateItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.StateItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&uniqid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skilluuid_) -
        reinterpret_cast<char*>(&uniqid_)) + sizeof(skilluuid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StateItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 uniqid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uniqid(&has_bits);
          uniqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lasttime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lasttime(&has_bits);
          lasttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 overtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_overtime(&has_bits);
          overtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 settime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_settime(&has_bits);
          settime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 configtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_configtime(&has_bits);
          configtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 skilluuid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_skilluuid(&has_bits);
          skilluuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 effects = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_effects(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_effects(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.StateItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 uniqid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uniqid(), target);
  }

  // optional uint64 lasttime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lasttime(), target);
  }

  // optional uint64 overtime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_overtime(), target);
  }

  // optional uint64 settime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_settime(), target);
  }

  // optional uint64 configtime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_configtime(), target);
  }

  // optional uint64 skilluuid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_skilluuid(), target);
  }

  // repeated uint64 effects = 7;
  for (int i = 0, n = this->_internal_effects_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_effects(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.StateItem)
  return target;
}

size_t StateItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.StateItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 effects = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->effects_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_effects_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 uniqid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uniqid());
    }

    // optional uint64 lasttime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lasttime());
    }

    // optional uint64 overtime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_overtime());
    }

    // optional uint64 settime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_settime());
    }

    // optional uint64 configtime = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_configtime());
    }

    // optional uint64 skilluuid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_skilluuid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.StateItem)
  GOOGLE_DCHECK_NE(&from, this);
  const StateItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.StateItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.StateItem)
    MergeFrom(*source);
  }
}

void StateItem::MergeFrom(const StateItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.StateItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effects_.MergeFrom(from.effects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      uniqid_ = from.uniqid_;
    }
    if (cached_has_bits & 0x00000002u) {
      lasttime_ = from.lasttime_;
    }
    if (cached_has_bits & 0x00000004u) {
      overtime_ = from.overtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      settime_ = from.settime_;
    }
    if (cached_has_bits & 0x00000010u) {
      configtime_ = from.configtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      skilluuid_ = from.skilluuid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StateItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.StateItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateItem::CopyFrom(const StateItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.StateItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateItem::IsInitialized() const {
  return true;
}

void StateItem::InternalSwap(StateItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  effects_.InternalSwap(&other->effects_);
  swap(uniqid_, other->uniqid_);
  swap(lasttime_, other->lasttime_);
  swap(overtime_, other->overtime_);
  swap(settime_, other->settime_);
  swap(configtime_, other->configtime_);
  swap(skilluuid_, other->skilluuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StateItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapUserData::InitAsDefaultInstance() {
  ::msg::_MapUserData_default_instance_._instance.get_mutable()->mapshow_ = const_cast< ::msg::CharacterMapShow*>(
      ::msg::CharacterMapShow::internal_default_instance());
  ::msg::_MapUserData_default_instance_._instance.get_mutable()->bakhero_ = const_cast< ::msg::CharacterMapShow*>(
      ::msg::CharacterMapShow::internal_default_instance());
  ::msg::_MapUserData_default_instance_._instance.get_mutable()->mapdata_ = const_cast< ::msg::CharacterMapData*>(
      ::msg::CharacterMapData::internal_default_instance());
}
class MapUserData::_Internal {
 public:
  using HasBits = decltype(std::declval<MapUserData>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msg::CharacterMapShow& mapshow(const MapUserData* msg);
  static void set_has_mapshow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::msg::CharacterMapShow& bakhero(const MapUserData* msg);
  static void set_has_bakhero(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::msg::CharacterMapData& mapdata(const MapUserData* msg);
  static void set_has_mapdata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::msg::CharacterMapShow&
MapUserData::_Internal::mapshow(const MapUserData* msg) {
  return *msg->mapshow_;
}
const ::msg::CharacterMapShow&
MapUserData::_Internal::bakhero(const MapUserData* msg) {
  return *msg->bakhero_;
}
const ::msg::CharacterMapData&
MapUserData::_Internal::mapdata(const MapUserData* msg) {
  return *msg->mapdata_;
}
MapUserData::MapUserData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MapUserData)
}
MapUserData::MapUserData(const MapUserData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_mapshow()) {
    mapshow_ = new ::msg::CharacterMapShow(*from.mapshow_);
  } else {
    mapshow_ = nullptr;
  }
  if (from._internal_has_bakhero()) {
    bakhero_ = new ::msg::CharacterMapShow(*from.bakhero_);
  } else {
    bakhero_ = nullptr;
  }
  if (from._internal_has_mapdata()) {
    mapdata_ = new ::msg::CharacterMapData(*from.mapdata_);
  } else {
    mapdata_ = nullptr;
  }
  charid_ = from.charid_;
  // @@protoc_insertion_point(copy_constructor:msg.MapUserData)
}

void MapUserData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapUserData_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mapshow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charid_) -
      reinterpret_cast<char*>(&mapshow_)) + sizeof(charid_));
}

MapUserData::~MapUserData() {
  // @@protoc_insertion_point(destructor:msg.MapUserData)
  SharedDtor();
}

void MapUserData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mapshow_;
  if (this != internal_default_instance()) delete bakhero_;
  if (this != internal_default_instance()) delete mapdata_;
}

void MapUserData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapUserData& MapUserData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapUserData_message_2eproto.base);
  return *internal_default_instance();
}


void MapUserData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MapUserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mapshow_ != nullptr);
      mapshow_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bakhero_ != nullptr);
      bakhero_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mapdata_ != nullptr);
      mapdata_->Clear();
    }
  }
  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MapUserData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MapUserData.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.CharacterMapShow mapshow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapshow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.CharacterMapShow bakhero = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bakhero(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.CharacterMapData mapdata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mapdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapUserData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MapUserData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MapUserData.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .msg.CharacterMapShow mapshow = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mapshow(this), target, stream);
  }

  // optional .msg.CharacterMapShow bakhero = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::bakhero(this), target, stream);
  }

  // optional .msg.CharacterMapData mapdata = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mapdata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MapUserData)
  return target;
}

size_t MapUserData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MapUserData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .msg.CharacterMapShow mapshow = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mapshow_);
    }

    // optional .msg.CharacterMapShow bakhero = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bakhero_);
    }

    // optional .msg.CharacterMapData mapdata = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mapdata_);
    }

    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapUserData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MapUserData)
  GOOGLE_DCHECK_NE(&from, this);
  const MapUserData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapUserData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MapUserData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MapUserData)
    MergeFrom(*source);
  }
}

void MapUserData::MergeFrom(const MapUserData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MapUserData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mapshow()->::msg::CharacterMapShow::MergeFrom(from._internal_mapshow());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bakhero()->::msg::CharacterMapShow::MergeFrom(from._internal_bakhero());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_mapdata()->::msg::CharacterMapData::MergeFrom(from._internal_mapdata());
    }
    if (cached_has_bits & 0x00000010u) {
      charid_ = from.charid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapUserData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MapUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapUserData::CopyFrom(const MapUserData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MapUserData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapUserData::IsInitialized() const {
  return true;
}

void MapUserData::InternalSwap(MapUserData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mapshow_, other->mapshow_);
  swap(bakhero_, other->bakhero_);
  swap(mapdata_, other->mapdata_);
  swap(charid_, other->charid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapUserData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MasterData::InitAsDefaultInstance() {
  ::msg::_MasterData_default_instance_._instance.get_mutable()->idtype_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MasterData::_Internal {
 public:
  using HasBits = decltype(std::declval<MasterData>()._has_bits_);
  static const ::msg::EntryIDType& idtype(const MasterData* msg);
  static void set_has_idtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_teamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::msg::EntryIDType&
MasterData::_Internal::idtype(const MasterData* msg) {
  return *msg->idtype_;
}
void MasterData::clear_idtype() {
  if (idtype_ != nullptr) idtype_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MasterData::MasterData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MasterData)
}
MasterData::MasterData(const MasterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_idtype()) {
    idtype_ = new ::msg::EntryIDType(*from.idtype_);
  } else {
    idtype_ = nullptr;
  }
  ::memcpy(&guildid_, &from.guildid_,
    static_cast<size_t>(reinterpret_cast<char*>(&teamid_) -
    reinterpret_cast<char*>(&guildid_)) + sizeof(teamid_));
  // @@protoc_insertion_point(copy_constructor:msg.MasterData)
}

void MasterData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MasterData_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&idtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teamid_) -
      reinterpret_cast<char*>(&idtype_)) + sizeof(teamid_));
}

MasterData::~MasterData() {
  // @@protoc_insertion_point(destructor:msg.MasterData)
  SharedDtor();
}

void MasterData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete idtype_;
}

void MasterData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MasterData& MasterData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MasterData_message_2eproto.base);
  return *internal_default_instance();
}


void MasterData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MasterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(idtype_ != nullptr);
      idtype_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&guildid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teamid_) -
        reinterpret_cast<char*>(&guildid_)) + sizeof(teamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MasterData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType idtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_idtype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MasterData.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 country = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_country(&has_bits);
          country_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 guildid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_guildid(&has_bits);
          guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teamid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_teamid(&has_bits);
          teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MasterData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MasterData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType idtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::idtype(this), target, stream);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MasterData.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 country = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_country(), target);
  }

  // optional uint64 guildid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_guildid(), target);
  }

  // optional uint32 teamid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_teamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MasterData)
  return target;
}

size_t MasterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MasterData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .msg.EntryIDType idtype = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *idtype_);
    }

    // optional uint64 guildid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guildid());
    }

    // optional uint32 country = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_country());
    }

    // optional uint32 teamid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MasterData)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MasterData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MasterData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MasterData)
    MergeFrom(*source);
  }
}

void MasterData::MergeFrom(const MasterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MasterData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_idtype()->::msg::EntryIDType::MergeFrom(from._internal_idtype());
    }
    if (cached_has_bits & 0x00000004u) {
      guildid_ = from.guildid_;
    }
    if (cached_has_bits & 0x00000008u) {
      country_ = from.country_;
    }
    if (cached_has_bits & 0x00000010u) {
      teamid_ = from.teamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MasterData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MasterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterData::CopyFrom(const MasterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MasterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterData::IsInitialized() const {
  return true;
}

void MasterData::InternalSwap(MasterData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(idtype_, other->idtype_);
  swap(guildid_, other->guildid_);
  swap(country_, other->country_);
  swap(teamid_, other->teamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MasterData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapNpcData::InitAsDefaultInstance() {
  ::msg::_MapNpcData_default_instance_._instance.get_mutable()->pos_ = const_cast< ::msg::FloatMovePos*>(
      ::msg::FloatMovePos::internal_default_instance());
  ::msg::_MapNpcData_default_instance_._instance.get_mutable()->master_ = const_cast< ::msg::MasterData*>(
      ::msg::MasterData::internal_default_instance());
  ::msg::_MapNpcData_default_instance_._instance.get_mutable()->showdata_ = const_cast< ::msg::CharacterMapShow*>(
      ::msg::CharacterMapShow::internal_default_instance());
  ::msg::_MapNpcData_default_instance_._instance.get_mutable()->hatredlist_ = const_cast< ::msg::NPC_HatredList*>(
      ::msg::NPC_HatredList::internal_default_instance());
}
class MapNpcData::_Internal {
 public:
  using HasBits = decltype(std::declval<MapNpcData>()._has_bits_);
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::msg::FloatMovePos& pos(const MapNpcData* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_movespeed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_attspeed(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::msg::MasterData& master(const MapNpcData* msg);
  static void set_has_master(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_visit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::msg::CharacterMapShow& showdata(const MapNpcData* msg);
  static void set_has_showdata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_titlename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_birth(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::msg::NPC_HatredList& hatredlist(const MapNpcData* msg);
  static void set_has_hatredlist(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::msg::FloatMovePos&
MapNpcData::_Internal::pos(const MapNpcData* msg) {
  return *msg->pos_;
}
const ::msg::MasterData&
MapNpcData::_Internal::master(const MapNpcData* msg) {
  return *msg->master_;
}
const ::msg::CharacterMapShow&
MapNpcData::_Internal::showdata(const MapNpcData* msg) {
  return *msg->showdata_;
}
const ::msg::NPC_HatredList&
MapNpcData::_Internal::hatredlist(const MapNpcData* msg) {
  return *msg->hatredlist_;
}
MapNpcData::MapNpcData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MapNpcData)
}
MapNpcData::MapNpcData(const MapNpcData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      states_(from.states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  titlename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_titlename()) {
    titlename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.titlename_);
  }
  if (from._internal_has_pos()) {
    pos_ = new ::msg::FloatMovePos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_master()) {
    master_ = new ::msg::MasterData(*from.master_);
  } else {
    master_ = nullptr;
  }
  if (from._internal_has_showdata()) {
    showdata_ = new ::msg::CharacterMapShow(*from.showdata_);
  } else {
    showdata_ = nullptr;
  }
  if (from._internal_has_hatredlist()) {
    hatredlist_ = new ::msg::NPC_HatredList(*from.hatredlist_);
  } else {
    hatredlist_ = nullptr;
  }
  ::memcpy(&tempid_, &from.tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&birth_) -
    reinterpret_cast<char*>(&tempid_)) + sizeof(birth_));
  // @@protoc_insertion_point(copy_constructor:msg.MapNpcData)
}

void MapNpcData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapNpcData_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  titlename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&birth_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(birth_));
}

MapNpcData::~MapNpcData() {
  // @@protoc_insertion_point(destructor:msg.MapNpcData)
  SharedDtor();
}

void MapNpcData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  titlename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete master_;
  if (this != internal_default_instance()) delete showdata_;
  if (this != internal_default_instance()) delete hatredlist_;
}

void MapNpcData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapNpcData& MapNpcData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapNpcData_message_2eproto.base);
  return *internal_default_instance();
}


void MapNpcData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MapNpcData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      titlename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(master_ != nullptr);
      master_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(showdata_ != nullptr);
      showdata_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(hatredlist_ != nullptr);
      hatredlist_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&baseid_) -
        reinterpret_cast<char*>(&tempid_)) + sizeof(baseid_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&hp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&birth_) -
        reinterpret_cast<char*>(&hp_)) + sizeof(birth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MapNpcData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 baseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tempid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MapNpcData.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.FloatMovePos pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dir = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 movespeed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_movespeed(&has_bits);
          movespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 attspeed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_attspeed(&has_bits);
          attspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.MasterData master = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_master(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 visit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_visit(&has_bits);
          visit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.StateItem states = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .msg.CharacterMapShow showdata = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_showdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string titlename = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_titlename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MapNpcData.titlename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool birth = 16 [default = false];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_birth(&has_bits);
          birth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.NPC_HatredList hatredlist = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_hatredlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapNpcData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MapNpcData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 baseid = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_baseid(), target);
  }

  // optional uint64 tempid = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tempid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MapNpcData.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional uint32 hp = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hp(), target);
  }

  // optional uint32 maxhp = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxhp(), target);
  }

  // optional .msg.FloatMovePos pos = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pos(this), target, stream);
  }

  // optional uint32 dir = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_dir(), target);
  }

  // optional uint32 movespeed = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_movespeed(), target);
  }

  // optional uint32 attspeed = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_attspeed(), target);
  }

  // optional .msg.MasterData master = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::master(this), target, stream);
  }

  // optional uint32 visit = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_visit(), target);
  }

  // repeated .msg.StateItem states = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_states(i), target, stream);
  }

  // optional .msg.CharacterMapShow showdata = 14;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::showdata(this), target, stream);
  }

  // optional string titlename = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_titlename().data(), static_cast<int>(this->_internal_titlename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MapNpcData.titlename");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_titlename(), target);
  }

  // optional bool birth = 16 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_birth(), target);
  }

  // optional .msg.NPC_HatredList hatredlist = 17;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::hatredlist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MapNpcData)
  return target;
}

size_t MapNpcData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MapNpcData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.StateItem states = 13;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string titlename = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_titlename());
    }

    // optional .msg.FloatMovePos pos = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional .msg.MasterData master = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *master_);
    }

    // optional .msg.CharacterMapShow showdata = 14;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *showdata_);
    }

    // optional .msg.NPC_HatredList hatredlist = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hatredlist_);
    }

    // optional uint64 tempid = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

    // optional uint32 baseid = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_baseid());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 hp = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hp());
    }

    // optional uint32 maxhp = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhp());
    }

    // optional uint32 dir = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dir());
    }

    // optional uint32 movespeed = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_movespeed());
    }

    // optional uint32 attspeed = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attspeed());
    }

    // optional uint32 visit = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_visit());
    }

    // optional bool birth = 16 [default = false];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapNpcData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MapNpcData)
  GOOGLE_DCHECK_NE(&from, this);
  const MapNpcData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapNpcData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MapNpcData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MapNpcData)
    MergeFrom(*source);
  }
}

void MapNpcData::MergeFrom(const MapNpcData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MapNpcData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      titlename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.titlename_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pos()->::msg::FloatMovePos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_master()->::msg::MasterData::MergeFrom(from._internal_master());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_showdata()->::msg::CharacterMapShow::MergeFrom(from._internal_showdata());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_hatredlist()->::msg::NPC_HatredList::MergeFrom(from._internal_hatredlist());
    }
    if (cached_has_bits & 0x00000040u) {
      tempid_ = from.tempid_;
    }
    if (cached_has_bits & 0x00000080u) {
      baseid_ = from.baseid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000200u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000400u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000800u) {
      movespeed_ = from.movespeed_;
    }
    if (cached_has_bits & 0x00001000u) {
      attspeed_ = from.attspeed_;
    }
    if (cached_has_bits & 0x00002000u) {
      visit_ = from.visit_;
    }
    if (cached_has_bits & 0x00004000u) {
      birth_ = from.birth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapNpcData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MapNpcData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapNpcData::CopyFrom(const MapNpcData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MapNpcData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapNpcData::IsInitialized() const {
  return true;
}

void MapNpcData::InternalSwap(MapNpcData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  states_.InternalSwap(&other->states_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  titlename_.Swap(&other->titlename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(master_, other->master_);
  swap(showdata_, other->showdata_);
  swap(hatredlist_, other->hatredlist_);
  swap(tempid_, other->tempid_);
  swap(baseid_, other->baseid_);
  swap(hp_, other->hp_);
  swap(maxhp_, other->maxhp_);
  swap(dir_, other->dir_);
  swap(movespeed_, other->movespeed_);
  swap(attspeed_, other->attspeed_);
  swap(visit_, other->visit_);
  swap(birth_, other->birth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapNpcData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Create_Role_CS::InitAsDefaultInstance() {
}
class MSG_Create_Role_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Create_Role_CS>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_occupation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_facestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hairstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_haircolor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

MSG_Create_Role_CS::MSG_Create_Role_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Create_Role_CS)
}
MSG_Create_Role_CS::MSG_Create_Role_CS(const MSG_Create_Role_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&occupation_, &from.occupation_,
    static_cast<size_t>(reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&occupation_)) + sizeof(sex_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Create_Role_CS)
}

void MSG_Create_Role_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Create_Role_CS_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&occupation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&antenna_) -
      reinterpret_cast<char*>(&occupation_)) + sizeof(antenna_));
  sex_ = 1;
}

MSG_Create_Role_CS::~MSG_Create_Role_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Create_Role_CS)
  SharedDtor();
}

void MSG_Create_Role_CS::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Create_Role_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Create_Role_CS& MSG_Create_Role_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Create_Role_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Create_Role_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Create_Role_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&occupation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&antenna_) -
        reinterpret_cast<char*>(&occupation_)) + sizeof(antenna_));
    sex_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Create_Role_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_Create_Role_CS.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 occupation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_occupation(&has_bits);
          occupation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .msg.SEX sex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::SEX_IsValid(val))) {
            _internal_set_sex(static_cast<::msg::SEX>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 facestyle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_facestyle(&has_bits);
          facestyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hairstyle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_hairstyle(&has_bits);
          hairstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 haircolor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_haircolor(&has_bits);
          haircolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 antenna = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_antenna(&has_bits);
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Create_Role_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Create_Role_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_Create_Role_CS.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 occupation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_occupation(), target);
  }

  // optional uint32 heroid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_heroid(), target);
  }

  // required .msg.SEX sex = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sex(), target);
  }

  // optional uint32 facestyle = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_facestyle(), target);
  }

  // optional uint32 hairstyle = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hairstyle(), target);
  }

  // optional uint32 haircolor = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_haircolor(), target);
  }

  // optional uint32 antenna = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_antenna(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Create_Role_CS)
  return target;
}

size_t MSG_Create_Role_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Create_Role_CS)
  size_t total_size = 0;

  // required .msg.SEX sex = 4;
  if (_internal_has_sex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sex());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 occupation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_occupation());
    }

    // optional uint32 heroid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 facestyle = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_facestyle());
    }

    // optional uint32 hairstyle = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hairstyle());
    }

    // optional uint32 haircolor = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_haircolor());
    }

    // optional uint32 antenna = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_antenna());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Create_Role_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Create_Role_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Create_Role_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Create_Role_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Create_Role_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Create_Role_CS)
    MergeFrom(*source);
  }
}

void MSG_Create_Role_CS::MergeFrom(const MSG_Create_Role_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Create_Role_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      occupation_ = from.occupation_;
    }
    if (cached_has_bits & 0x00000004u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000008u) {
      facestyle_ = from.facestyle_;
    }
    if (cached_has_bits & 0x00000010u) {
      hairstyle_ = from.hairstyle_;
    }
    if (cached_has_bits & 0x00000020u) {
      haircolor_ = from.haircolor_;
    }
    if (cached_has_bits & 0x00000040u) {
      antenna_ = from.antenna_;
    }
    if (cached_has_bits & 0x00000080u) {
      sex_ = from.sex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Create_Role_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Create_Role_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Create_Role_CS::CopyFrom(const MSG_Create_Role_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Create_Role_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Create_Role_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000080) != 0x00000080) return false;
  return true;
}

void MSG_Create_Role_CS::InternalSwap(MSG_Create_Role_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(occupation_, other->occupation_);
  swap(heroid_, other->heroid_);
  swap(facestyle_, other->facestyle_);
  swap(hairstyle_, other->hairstyle_);
  swap(haircolor_, other->haircolor_);
  swap(antenna_, other->antenna_);
  swap(sex_, other->sex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Create_Role_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ChangeName_CS::InitAsDefaultInstance() {
}
class MSG_ChangeName_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ChangeName_CS>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ChangeName_CS::MSG_ChangeName_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_ChangeName_CS)
}
MSG_ChangeName_CS::MSG_ChangeName_CS(const MSG_ChangeName_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_ChangeName_CS)
}

void MSG_ChangeName_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ChangeName_CS_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ChangeName_CS::~MSG_ChangeName_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_ChangeName_CS)
  SharedDtor();
}

void MSG_ChangeName_CS::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ChangeName_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ChangeName_CS& MSG_ChangeName_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ChangeName_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_ChangeName_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_ChangeName_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ChangeName_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_ChangeName_CS.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ChangeName_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_ChangeName_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_ChangeName_CS.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_ChangeName_CS)
  return target;
}

size_t MSG_ChangeName_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_ChangeName_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ChangeName_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_ChangeName_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ChangeName_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ChangeName_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_ChangeName_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_ChangeName_CS)
    MergeFrom(*source);
  }
}

void MSG_ChangeName_CS::MergeFrom(const MSG_ChangeName_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_ChangeName_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void MSG_ChangeName_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_ChangeName_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ChangeName_CS::CopyFrom(const MSG_ChangeName_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_ChangeName_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ChangeName_CS::IsInitialized() const {
  return true;
}

void MSG_ChangeName_CS::InternalSwap(MSG_ChangeName_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ChangeName_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_ChangeName_SC::InitAsDefaultInstance() {
}
class MSG_Ret_ChangeName_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_ChangeName_SC>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_ChangeName_SC::MSG_Ret_ChangeName_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_ChangeName_SC)
}
MSG_Ret_ChangeName_SC::MSG_Ret_ChangeName_SC(const MSG_Ret_ChangeName_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_ChangeName_SC)
}

void MSG_Ret_ChangeName_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_ChangeName_SC_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = false;
}

MSG_Ret_ChangeName_SC::~MSG_Ret_ChangeName_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_ChangeName_SC)
  SharedDtor();
}

void MSG_Ret_ChangeName_SC::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_ChangeName_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_ChangeName_SC& MSG_Ret_ChangeName_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_ChangeName_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_ChangeName_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_ChangeName_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_ChangeName_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_Ret_ChangeName_SC.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_ChangeName_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_ChangeName_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_Ret_ChangeName_SC.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_ChangeName_SC)
  return target;
}

size_t MSG_Ret_ChangeName_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_ChangeName_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_ChangeName_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_ChangeName_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_ChangeName_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_ChangeName_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_ChangeName_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_ChangeName_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_ChangeName_SC::MergeFrom(const MSG_Ret_ChangeName_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_ChangeName_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_ChangeName_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_ChangeName_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_ChangeName_SC::CopyFrom(const MSG_Ret_ChangeName_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_ChangeName_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_ChangeName_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_ChangeName_SC::InternalSwap(MSG_Ret_ChangeName_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_ChangeName_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_DataCharacterMain_SC::InitAsDefaultInstance() {
  ::msg::_MSG_DataCharacterMain_SC_default_instance_._instance.get_mutable()->data_ = const_cast< ::msg::CharacterMainData*>(
      ::msg::CharacterMainData::internal_default_instance());
}
class MSG_DataCharacterMain_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_DataCharacterMain_SC>()._has_bits_);
  static const ::msg::CharacterMainData& data(const MSG_DataCharacterMain_SC* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msg::CharacterMainData&
MSG_DataCharacterMain_SC::_Internal::data(const MSG_DataCharacterMain_SC* msg) {
  return *msg->data_;
}
MSG_DataCharacterMain_SC::MSG_DataCharacterMain_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_DataCharacterMain_SC)
}
MSG_DataCharacterMain_SC::MSG_DataCharacterMain_SC(const MSG_DataCharacterMain_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::msg::CharacterMainData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_DataCharacterMain_SC)
}

void MSG_DataCharacterMain_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_DataCharacterMain_SC_message_2eproto.base);
  data_ = nullptr;
}

MSG_DataCharacterMain_SC::~MSG_DataCharacterMain_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_DataCharacterMain_SC)
  SharedDtor();
}

void MSG_DataCharacterMain_SC::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void MSG_DataCharacterMain_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_DataCharacterMain_SC& MSG_DataCharacterMain_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_DataCharacterMain_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_DataCharacterMain_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_DataCharacterMain_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_DataCharacterMain_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.CharacterMainData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_DataCharacterMain_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_DataCharacterMain_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.CharacterMainData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_DataCharacterMain_SC)
  return target;
}

size_t MSG_DataCharacterMain_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_DataCharacterMain_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .msg.CharacterMainData data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_DataCharacterMain_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_DataCharacterMain_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_DataCharacterMain_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_DataCharacterMain_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_DataCharacterMain_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_DataCharacterMain_SC)
    MergeFrom(*source);
  }
}

void MSG_DataCharacterMain_SC::MergeFrom(const MSG_DataCharacterMain_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_DataCharacterMain_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::msg::CharacterMainData::MergeFrom(from._internal_data());
  }
}

void MSG_DataCharacterMain_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_DataCharacterMain_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_DataCharacterMain_SC::CopyFrom(const MSG_DataCharacterMain_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_DataCharacterMain_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_DataCharacterMain_SC::IsInitialized() const {
  return true;
}

void MSG_DataCharacterMain_SC::InternalSwap(MSG_DataCharacterMain_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_DataCharacterMain_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Use_GM_CS::InitAsDefaultInstance() {
}
class MSG_Req_Use_GM_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Use_GM_CS>()._has_bits_);
  static void set_has_strcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_Use_GM_CS::MSG_Req_Use_GM_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_Use_GM_CS)
}
MSG_Req_Use_GM_CS::MSG_Req_Use_GM_CS(const MSG_Req_Use_GM_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strcontent()) {
    strcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strcontent_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_Use_GM_CS)
}

void MSG_Req_Use_GM_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_Use_GM_CS_message_2eproto.base);
  strcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Req_Use_GM_CS::~MSG_Req_Use_GM_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_Use_GM_CS)
  SharedDtor();
}

void MSG_Req_Use_GM_CS::SharedDtor() {
  strcontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_Use_GM_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Use_GM_CS& MSG_Req_Use_GM_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Use_GM_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Use_GM_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_Use_GM_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strcontent_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Use_GM_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string strcontent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strcontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_Req_Use_GM_CS.strcontent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Use_GM_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_Use_GM_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string strcontent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strcontent().data(), static_cast<int>(this->_internal_strcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_Req_Use_GM_CS.strcontent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strcontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_Use_GM_CS)
  return target;
}

size_t MSG_Req_Use_GM_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_Use_GM_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string strcontent = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strcontent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Use_GM_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_Use_GM_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Use_GM_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Use_GM_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_Use_GM_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_Use_GM_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_Use_GM_CS::MergeFrom(const MSG_Req_Use_GM_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_Use_GM_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_strcontent()) {
    _has_bits_[0] |= 0x00000001u;
    strcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strcontent_);
  }
}

void MSG_Req_Use_GM_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_Use_GM_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Use_GM_CS::CopyFrom(const MSG_Req_Use_GM_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_Use_GM_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Use_GM_CS::IsInitialized() const {
  return true;
}

void MSG_Req_Use_GM_CS::InternalSwap(MSG_Req_Use_GM_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strcontent_.Swap(&other->strcontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Use_GM_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Common_Error_SC::InitAsDefaultInstance() {
}
class MSG_Ret_Common_Error_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Common_Error_SC>()._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_Common_Error_SC::MSG_Ret_Common_Error_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_Common_Error_SC)
}
MSG_Ret_Common_Error_SC::MSG_Ret_Common_Error_SC(const MSG_Ret_Common_Error_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_Common_Error_SC)
}

void MSG_Ret_Common_Error_SC::SharedCtor() {
  errorcode_ = 0u;
}

MSG_Ret_Common_Error_SC::~MSG_Ret_Common_Error_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_Common_Error_SC)
  SharedDtor();
}

void MSG_Ret_Common_Error_SC::SharedDtor() {
}

void MSG_Ret_Common_Error_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Common_Error_SC& MSG_Ret_Common_Error_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Common_Error_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Common_Error_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_Common_Error_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errorcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Common_Error_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errorcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Common_Error_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_Common_Error_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errorcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_Common_Error_SC)
  return target;
}

size_t MSG_Ret_Common_Error_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_Common_Error_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 errorcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Common_Error_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_Common_Error_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Common_Error_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Common_Error_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_Common_Error_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_Common_Error_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Common_Error_SC::MergeFrom(const MSG_Ret_Common_Error_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_Common_Error_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_errorcode()) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void MSG_Ret_Common_Error_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_Common_Error_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Common_Error_SC::CopyFrom(const MSG_Ret_Common_Error_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_Common_Error_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Common_Error_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Common_Error_SC::InternalSwap(MSG_Ret_Common_Error_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Common_Error_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Common_Tips_SC::InitAsDefaultInstance() {
}
class MSG_Ret_Common_Tips_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Common_Tips_SC>()._has_bits_);
  static void set_has_strcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_Common_Tips_SC::MSG_Ret_Common_Tips_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_Common_Tips_SC)
}
MSG_Ret_Common_Tips_SC::MSG_Ret_Common_Tips_SC(const MSG_Ret_Common_Tips_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_strcontent()) {
    strcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strcontent_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_Common_Tips_SC)
}

void MSG_Ret_Common_Tips_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_Common_Tips_SC_message_2eproto.base);
  strcontent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Ret_Common_Tips_SC::~MSG_Ret_Common_Tips_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_Common_Tips_SC)
  SharedDtor();
}

void MSG_Ret_Common_Tips_SC::SharedDtor() {
  strcontent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_Common_Tips_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Common_Tips_SC& MSG_Ret_Common_Tips_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Common_Tips_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Common_Tips_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_Common_Tips_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    strcontent_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Common_Tips_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string strcontent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strcontent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_Ret_Common_Tips_SC.strcontent");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Common_Tips_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_Common_Tips_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string strcontent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_strcontent().data(), static_cast<int>(this->_internal_strcontent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_Ret_Common_Tips_SC.strcontent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strcontent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_Common_Tips_SC)
  return target;
}

size_t MSG_Ret_Common_Tips_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_Common_Tips_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string strcontent = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strcontent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Common_Tips_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_Common_Tips_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Common_Tips_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Common_Tips_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_Common_Tips_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_Common_Tips_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Common_Tips_SC::MergeFrom(const MSG_Ret_Common_Tips_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_Common_Tips_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_strcontent()) {
    _has_bits_[0] |= 0x00000001u;
    strcontent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strcontent_);
  }
}

void MSG_Ret_Common_Tips_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_Common_Tips_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Common_Tips_SC::CopyFrom(const MSG_Ret_Common_Tips_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_Common_Tips_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Common_Tips_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Common_Tips_SC::InternalSwap(MSG_Ret_Common_Tips_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strcontent_.Swap(&other->strcontent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Common_Tips_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Main_Data_CS::InitAsDefaultInstance() {
}
class MSG_Req_Main_Data_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Main_Data_CS>()._has_bits_);
};

MSG_Req_Main_Data_CS::MSG_Req_Main_Data_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_Main_Data_CS)
}
MSG_Req_Main_Data_CS::MSG_Req_Main_Data_CS(const MSG_Req_Main_Data_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_Main_Data_CS)
}

void MSG_Req_Main_Data_CS::SharedCtor() {
}

MSG_Req_Main_Data_CS::~MSG_Req_Main_Data_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_Main_Data_CS)
  SharedDtor();
}

void MSG_Req_Main_Data_CS::SharedDtor() {
}

void MSG_Req_Main_Data_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Main_Data_CS& MSG_Req_Main_Data_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Main_Data_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Main_Data_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_Main_Data_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Main_Data_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Main_Data_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_Main_Data_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_Main_Data_CS)
  return target;
}

size_t MSG_Req_Main_Data_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_Main_Data_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Main_Data_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_Main_Data_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Main_Data_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Main_Data_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_Main_Data_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_Main_Data_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_Main_Data_CS::MergeFrom(const MSG_Req_Main_Data_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_Main_Data_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_Main_Data_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_Main_Data_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Main_Data_CS::CopyFrom(const MSG_Req_Main_Data_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_Main_Data_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Main_Data_CS::IsInitialized() const {
  return true;
}

void MSG_Req_Main_Data_CS::InternalSwap(MSG_Req_Main_Data_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Main_Data_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Test_Network_CS::InitAsDefaultInstance() {
}
class MSG_Req_Test_Network_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Test_Network_CS>()._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_Test_Network_CS::MSG_Req_Test_Network_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_Test_Network_CS)
}
MSG_Req_Test_Network_CS::MSG_Req_Test_Network_CS(const MSG_Req_Test_Network_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      num2_(from.num2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  num_ = from.num_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_Test_Network_CS)
}

void MSG_Req_Test_Network_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_Test_Network_CS_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_ = 0u;
}

MSG_Req_Test_Network_CS::~MSG_Req_Test_Network_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_Test_Network_CS)
  SharedDtor();
}

void MSG_Req_Test_Network_CS::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_Test_Network_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Test_Network_CS& MSG_Req_Test_Network_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Test_Network_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Test_Network_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_Test_Network_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num2_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Test_Network_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_Req_Test_Network_CS.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 num2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_num2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_num2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Test_Network_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_Test_Network_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_Req_Test_Network_CS.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated uint32 num2 = 3;
  for (int i = 0, n = this->_internal_num2_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num2(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_Test_Network_CS)
  return target;
}

size_t MSG_Req_Test_Network_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_Test_Network_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 num2 = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->num2_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_num2_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 num = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Test_Network_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_Test_Network_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Test_Network_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Test_Network_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_Test_Network_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_Test_Network_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_Test_Network_CS::MergeFrom(const MSG_Req_Test_Network_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_Test_Network_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  num2_.MergeFrom(from.num2_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_Test_Network_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_Test_Network_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Test_Network_CS::CopyFrom(const MSG_Req_Test_Network_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_Test_Network_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Test_Network_CS::IsInitialized() const {
  return true;
}

void MSG_Req_Test_Network_CS::InternalSwap(MSG_Req_Test_Network_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  num2_.InternalSwap(&other->num2_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_, other->num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Test_Network_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_GameTime_SC::InitAsDefaultInstance() {
}
class MSG_Ret_GameTime_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_GameTime_SC>()._has_bits_);
  static void set_has_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_GameTime_SC::MSG_Ret_GameTime_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_GameTime_SC)
}
MSG_Ret_GameTime_SC::MSG_Ret_GameTime_SC(const MSG_Ret_GameTime_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gametime_ = from.gametime_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_GameTime_SC)
}

void MSG_Ret_GameTime_SC::SharedCtor() {
  gametime_ = PROTOBUF_ULONGLONG(0);
}

MSG_Ret_GameTime_SC::~MSG_Ret_GameTime_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_GameTime_SC)
  SharedDtor();
}

void MSG_Ret_GameTime_SC::SharedDtor() {
}

void MSG_Ret_GameTime_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_GameTime_SC& MSG_Ret_GameTime_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_GameTime_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_GameTime_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_GameTime_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gametime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_GameTime_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 gametime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_gametime(&has_bits);
          gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_GameTime_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_GameTime_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gametime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gametime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_GameTime_SC)
  return target;
}

size_t MSG_Ret_GameTime_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_GameTime_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 gametime = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_gametime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_GameTime_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_GameTime_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_GameTime_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_GameTime_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_GameTime_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_GameTime_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_GameTime_SC::MergeFrom(const MSG_Ret_GameTime_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_GameTime_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_gametime()) {
    _internal_set_gametime(from._internal_gametime());
  }
}

void MSG_Ret_GameTime_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_GameTime_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_GameTime_SC::CopyFrom(const MSG_Ret_GameTime_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_GameTime_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_GameTime_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_GameTime_SC::InternalSwap(MSG_Ret_GameTime_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gametime_, other->gametime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_GameTime_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_UserGameTime_SC::InitAsDefaultInstance() {
}
class MSG_Req_UserGameTime_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_UserGameTime_SC>()._has_bits_);
};

MSG_Req_UserGameTime_SC::MSG_Req_UserGameTime_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_UserGameTime_SC)
}
MSG_Req_UserGameTime_SC::MSG_Req_UserGameTime_SC(const MSG_Req_UserGameTime_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_UserGameTime_SC)
}

void MSG_Req_UserGameTime_SC::SharedCtor() {
}

MSG_Req_UserGameTime_SC::~MSG_Req_UserGameTime_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_UserGameTime_SC)
  SharedDtor();
}

void MSG_Req_UserGameTime_SC::SharedDtor() {
}

void MSG_Req_UserGameTime_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_UserGameTime_SC& MSG_Req_UserGameTime_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_UserGameTime_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_UserGameTime_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_UserGameTime_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_UserGameTime_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_UserGameTime_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_UserGameTime_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_UserGameTime_SC)
  return target;
}

size_t MSG_Req_UserGameTime_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_UserGameTime_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_UserGameTime_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_UserGameTime_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_UserGameTime_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_UserGameTime_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_UserGameTime_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_UserGameTime_SC)
    MergeFrom(*source);
  }
}

void MSG_Req_UserGameTime_SC::MergeFrom(const MSG_Req_UserGameTime_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_UserGameTime_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_UserGameTime_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_UserGameTime_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_UserGameTime_SC::CopyFrom(const MSG_Req_UserGameTime_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_UserGameTime_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_UserGameTime_SC::IsInitialized() const {
  return true;
}

void MSG_Req_UserGameTime_SC::InternalSwap(MSG_Req_UserGameTime_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_UserGameTime_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_UserGameTime_CS::InitAsDefaultInstance() {
}
class MSG_Ret_UserGameTime_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_UserGameTime_CS>()._has_bits_);
  static void set_has_usertempid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gametime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_UserGameTime_CS::MSG_Ret_UserGameTime_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_UserGameTime_CS)
}
MSG_Ret_UserGameTime_CS::MSG_Ret_UserGameTime_CS(const MSG_Ret_UserGameTime_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gametime_, &from.gametime_,
    static_cast<size_t>(reinterpret_cast<char*>(&usertempid_) -
    reinterpret_cast<char*>(&gametime_)) + sizeof(usertempid_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_UserGameTime_CS)
}

void MSG_Ret_UserGameTime_CS::SharedCtor() {
  ::memset(&gametime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usertempid_) -
      reinterpret_cast<char*>(&gametime_)) + sizeof(usertempid_));
}

MSG_Ret_UserGameTime_CS::~MSG_Ret_UserGameTime_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_UserGameTime_CS)
  SharedDtor();
}

void MSG_Ret_UserGameTime_CS::SharedDtor() {
}

void MSG_Ret_UserGameTime_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_UserGameTime_CS& MSG_Ret_UserGameTime_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_UserGameTime_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_UserGameTime_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_UserGameTime_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gametime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usertempid_) -
        reinterpret_cast<char*>(&gametime_)) + sizeof(usertempid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_UserGameTime_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 usertempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_usertempid(&has_bits);
          usertempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 gametime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gametime(&has_bits);
          gametime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_UserGameTime_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_UserGameTime_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 usertempid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_usertempid(), target);
  }

  // optional uint64 gametime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_gametime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_UserGameTime_CS)
  return target;
}

size_t MSG_Ret_UserGameTime_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_UserGameTime_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 gametime = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_gametime());
    }

    // optional uint32 usertempid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_usertempid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_UserGameTime_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_UserGameTime_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_UserGameTime_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_UserGameTime_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_UserGameTime_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_UserGameTime_CS)
    MergeFrom(*source);
  }
}

void MSG_Ret_UserGameTime_CS::MergeFrom(const MSG_Ret_UserGameTime_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_UserGameTime_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gametime_ = from.gametime_;
    }
    if (cached_has_bits & 0x00000002u) {
      usertempid_ = from.usertempid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_UserGameTime_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_UserGameTime_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_UserGameTime_CS::CopyFrom(const MSG_Ret_UserGameTime_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_UserGameTime_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_UserGameTime_CS::IsInitialized() const {
  return true;
}

void MSG_Ret_UserGameTime_CS::InternalSwap(MSG_Ret_UserGameTime_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gametime_, other->gametime_);
  swap(usertempid_, other->usertempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_UserGameTime_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_ServerTime_SC::InitAsDefaultInstance() {
}
class MSG_Ret_ServerTime_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_ServerTime_SC>()._has_bits_);
  static void set_has_servertime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_ServerTime_SC::MSG_Ret_ServerTime_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_ServerTime_SC)
}
MSG_Ret_ServerTime_SC::MSG_Ret_ServerTime_SC(const MSG_Ret_ServerTime_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servertime_ = from.servertime_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_ServerTime_SC)
}

void MSG_Ret_ServerTime_SC::SharedCtor() {
  servertime_ = PROTOBUF_ULONGLONG(0);
}

MSG_Ret_ServerTime_SC::~MSG_Ret_ServerTime_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_ServerTime_SC)
  SharedDtor();
}

void MSG_Ret_ServerTime_SC::SharedDtor() {
}

void MSG_Ret_ServerTime_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_ServerTime_SC& MSG_Ret_ServerTime_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_ServerTime_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_ServerTime_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_ServerTime_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servertime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_ServerTime_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 servertime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_servertime(&has_bits);
          servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_ServerTime_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_ServerTime_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 servertime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_servertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_ServerTime_SC)
  return target;
}

size_t MSG_Ret_ServerTime_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_ServerTime_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 servertime = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_servertime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_ServerTime_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_ServerTime_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_ServerTime_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_ServerTime_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_ServerTime_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_ServerTime_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_ServerTime_SC::MergeFrom(const MSG_Ret_ServerTime_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_ServerTime_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_servertime()) {
    _internal_set_servertime(from._internal_servertime());
  }
}

void MSG_Ret_ServerTime_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_ServerTime_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_ServerTime_SC::CopyFrom(const MSG_Ret_ServerTime_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_ServerTime_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_ServerTime_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_ServerTime_SC::InternalSwap(MSG_Ret_ServerTime_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(servertime_, other->servertime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_ServerTime_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_NotifyUserKickout_SC::InitAsDefaultInstance() {
}
class MSG_Ret_NotifyUserKickout_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_NotifyUserKickout_SC>()._has_bits_);
};

MSG_Ret_NotifyUserKickout_SC::MSG_Ret_NotifyUserKickout_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_NotifyUserKickout_SC)
}
MSG_Ret_NotifyUserKickout_SC::MSG_Ret_NotifyUserKickout_SC(const MSG_Ret_NotifyUserKickout_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_NotifyUserKickout_SC)
}

void MSG_Ret_NotifyUserKickout_SC::SharedCtor() {
}

MSG_Ret_NotifyUserKickout_SC::~MSG_Ret_NotifyUserKickout_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_NotifyUserKickout_SC)
  SharedDtor();
}

void MSG_Ret_NotifyUserKickout_SC::SharedDtor() {
}

void MSG_Ret_NotifyUserKickout_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_NotifyUserKickout_SC& MSG_Ret_NotifyUserKickout_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_NotifyUserKickout_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_NotifyUserKickout_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_NotifyUserKickout_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_NotifyUserKickout_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_NotifyUserKickout_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_NotifyUserKickout_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_NotifyUserKickout_SC)
  return target;
}

size_t MSG_Ret_NotifyUserKickout_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_NotifyUserKickout_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_NotifyUserKickout_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_NotifyUserKickout_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_NotifyUserKickout_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_NotifyUserKickout_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_NotifyUserKickout_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_NotifyUserKickout_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_NotifyUserKickout_SC::MergeFrom(const MSG_Ret_NotifyUserKickout_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_NotifyUserKickout_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Ret_NotifyUserKickout_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_NotifyUserKickout_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_NotifyUserKickout_SC::CopyFrom(const MSG_Ret_NotifyUserKickout_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_NotifyUserKickout_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_NotifyUserKickout_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_NotifyUserKickout_SC::InternalSwap(MSG_Ret_NotifyUserKickout_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_NotifyUserKickout_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_ServerLoginFailed_SC::InitAsDefaultInstance() {
}
class MSG_Ret_ServerLoginFailed_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_ServerLoginFailed_SC>()._has_bits_);
  static void set_has_returncode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_ServerLoginFailed_SC::MSG_Ret_ServerLoginFailed_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_ServerLoginFailed_SC)
}
MSG_Ret_ServerLoginFailed_SC::MSG_Ret_ServerLoginFailed_SC(const MSG_Ret_ServerLoginFailed_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  returncode_ = from.returncode_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_ServerLoginFailed_SC)
}

void MSG_Ret_ServerLoginFailed_SC::SharedCtor() {
  returncode_ = 0u;
}

MSG_Ret_ServerLoginFailed_SC::~MSG_Ret_ServerLoginFailed_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_ServerLoginFailed_SC)
  SharedDtor();
}

void MSG_Ret_ServerLoginFailed_SC::SharedDtor() {
}

void MSG_Ret_ServerLoginFailed_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_ServerLoginFailed_SC& MSG_Ret_ServerLoginFailed_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_ServerLoginFailed_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_ServerLoginFailed_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_ServerLoginFailed_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  returncode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_ServerLoginFailed_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 returncode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_returncode(&has_bits);
          returncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_ServerLoginFailed_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_ServerLoginFailed_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 returncode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_returncode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_ServerLoginFailed_SC)
  return target;
}

size_t MSG_Ret_ServerLoginFailed_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_ServerLoginFailed_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 returncode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_returncode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_ServerLoginFailed_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_ServerLoginFailed_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_ServerLoginFailed_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_ServerLoginFailed_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_ServerLoginFailed_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_ServerLoginFailed_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_ServerLoginFailed_SC::MergeFrom(const MSG_Ret_ServerLoginFailed_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_ServerLoginFailed_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_returncode()) {
    _internal_set_returncode(from._internal_returncode());
  }
}

void MSG_Ret_ServerLoginFailed_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_ServerLoginFailed_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_ServerLoginFailed_SC::CopyFrom(const MSG_Ret_ServerLoginFailed_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_ServerLoginFailed_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_ServerLoginFailed_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_ServerLoginFailed_SC::InternalSwap(MSG_Ret_ServerLoginFailed_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(returncode_, other->returncode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_ServerLoginFailed_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_QueueInfo_SC::InitAsDefaultInstance() {
}
class MSG_Ret_QueueInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_QueueInfo_SC>()._has_bits_);
  static void set_has_queue_user_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_queue_wait_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_QueueInfo_SC::MSG_Ret_QueueInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_QueueInfo_SC)
}
MSG_Ret_QueueInfo_SC::MSG_Ret_QueueInfo_SC(const MSG_Ret_QueueInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&queue_user_num_, &from.queue_user_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_wait_time_) -
    reinterpret_cast<char*>(&queue_user_num_)) + sizeof(queue_wait_time_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_QueueInfo_SC)
}

void MSG_Ret_QueueInfo_SC::SharedCtor() {
  ::memset(&queue_user_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_wait_time_) -
      reinterpret_cast<char*>(&queue_user_num_)) + sizeof(queue_wait_time_));
}

MSG_Ret_QueueInfo_SC::~MSG_Ret_QueueInfo_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_QueueInfo_SC)
  SharedDtor();
}

void MSG_Ret_QueueInfo_SC::SharedDtor() {
}

void MSG_Ret_QueueInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_QueueInfo_SC& MSG_Ret_QueueInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_QueueInfo_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_QueueInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_QueueInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&queue_user_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&queue_wait_time_) -
        reinterpret_cast<char*>(&queue_user_num_)) + sizeof(queue_wait_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_QueueInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 queue_user_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_queue_user_num(&has_bits);
          queue_user_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 queue_wait_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_queue_wait_time(&has_bits);
          queue_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_QueueInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_QueueInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 queue_user_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_queue_user_num(), target);
  }

  // optional uint32 queue_wait_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_queue_wait_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_QueueInfo_SC)
  return target;
}

size_t MSG_Ret_QueueInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_QueueInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 queue_user_num = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_queue_user_num());
    }

    // optional uint32 queue_wait_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_queue_wait_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_QueueInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_QueueInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_QueueInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_QueueInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_QueueInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_QueueInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_QueueInfo_SC::MergeFrom(const MSG_Ret_QueueInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_QueueInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      queue_user_num_ = from.queue_user_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      queue_wait_time_ = from.queue_wait_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_QueueInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_QueueInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_QueueInfo_SC::CopyFrom(const MSG_Ret_QueueInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_QueueInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_QueueInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_QueueInfo_SC::InternalSwap(MSG_Ret_QueueInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(queue_user_num_, other->queue_user_num_);
  swap(queue_wait_time_, other->queue_wait_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_QueueInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_UserMapInfo_SC::InitAsDefaultInstance() {
  ::msg::_MSG_Ret_UserMapInfo_SC_default_instance_._instance.get_mutable()->pos_ = const_cast< ::msg::FloatMovePos*>(
      ::msg::FloatMovePos::internal_default_instance());
}
class MSG_Ret_UserMapInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_UserMapInfo_SC>()._has_bits_);
  static void set_has_mapid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mapname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::msg::FloatMovePos& pos(const MSG_Ret_UserMapInfo_SC* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lineid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_copymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_subcopymapidx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sceneid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::msg::FloatMovePos&
MSG_Ret_UserMapInfo_SC::_Internal::pos(const MSG_Ret_UserMapInfo_SC* msg) {
  return *msg->pos_;
}
MSG_Ret_UserMapInfo_SC::MSG_Ret_UserMapInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_UserMapInfo_SC)
}
MSG_Ret_UserMapInfo_SC::MSG_Ret_UserMapInfo_SC(const MSG_Ret_UserMapInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mapname()) {
    mapname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_filename()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from._internal_has_pos()) {
    pos_ = new ::msg::FloatMovePos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&mapid_, &from.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&mapid_)) + sizeof(sceneid_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_UserMapInfo_SC)
}

void MSG_Ret_UserMapInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_UserMapInfo_SC_message_2eproto.base);
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sceneid_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(sceneid_));
}

MSG_Ret_UserMapInfo_SC::~MSG_Ret_UserMapInfo_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_UserMapInfo_SC)
  SharedDtor();
}

void MSG_Ret_UserMapInfo_SC::SharedDtor() {
  mapname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
}

void MSG_Ret_UserMapInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_UserMapInfo_SC& MSG_Ret_UserMapInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_UserMapInfo_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_UserMapInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_UserMapInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mapname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&mapid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sceneid_) -
        reinterpret_cast<char*>(&mapid_)) + sizeof(sceneid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_UserMapInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mapid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mapid(&has_bits);
          mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mapname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mapname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_Ret_UserMapInfo_SC.mapname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_Ret_UserMapInfo_SC.filename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.FloatMovePos pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lineid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_lineid(&has_bits);
          lineid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 copymapidx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_copymapidx(&has_bits);
          copymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subcopymapidx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_subcopymapidx(&has_bits);
          subcopymapidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sceneid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sceneid(&has_bits);
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_UserMapInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_UserMapInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mapid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // optional string mapname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mapname().data(), static_cast<int>(this->_internal_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_Ret_UserMapInfo_SC.mapname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mapname(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_Ret_UserMapInfo_SC.filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filename(), target);
  }

  // optional .msg.FloatMovePos pos = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::pos(this), target, stream);
  }

  // optional uint32 lineid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lineid(), target);
  }

  // optional uint32 copymapidx = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_copymapidx(), target);
  }

  // optional uint32 subcopymapidx = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_subcopymapidx(), target);
  }

  // optional uint64 sceneid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_UserMapInfo_SC)
  return target;
}

size_t MSG_Ret_UserMapInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_UserMapInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string mapname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mapname());
    }

    // optional string filename = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_filename());
    }

    // optional .msg.FloatMovePos pos = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional uint32 mapid = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mapid());
    }

    // optional uint32 lineid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lineid());
    }

    // optional uint32 copymapidx = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_copymapidx());
    }

    // optional uint32 subcopymapidx = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subcopymapidx());
    }

    // optional uint64 sceneid = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sceneid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_UserMapInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_UserMapInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_UserMapInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_UserMapInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_UserMapInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_UserMapInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_UserMapInfo_SC::MergeFrom(const MSG_Ret_UserMapInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_UserMapInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mapname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mapname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_pos()->::msg::FloatMovePos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      mapid_ = from.mapid_;
    }
    if (cached_has_bits & 0x00000010u) {
      lineid_ = from.lineid_;
    }
    if (cached_has_bits & 0x00000020u) {
      copymapidx_ = from.copymapidx_;
    }
    if (cached_has_bits & 0x00000040u) {
      subcopymapidx_ = from.subcopymapidx_;
    }
    if (cached_has_bits & 0x00000080u) {
      sceneid_ = from.sceneid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_UserMapInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_UserMapInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_UserMapInfo_SC::CopyFrom(const MSG_Ret_UserMapInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_UserMapInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_UserMapInfo_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_UserMapInfo_SC::InternalSwap(MSG_Ret_UserMapInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mapname_.Swap(&other->mapname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(mapid_, other->mapid_);
  swap(lineid_, other->lineid_);
  swap(copymapidx_, other->copymapidx_);
  swap(subcopymapidx_, other->subcopymapidx_);
  swap(sceneid_, other->sceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_UserMapInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_NineScreenRefreshPlayer_SC::InitAsDefaultInstance() {
}
class MSG_Ret_NineScreenRefreshPlayer_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_NineScreenRefreshPlayer_SC>()._has_bits_);
};

MSG_Ret_NineScreenRefreshPlayer_SC::MSG_Ret_NineScreenRefreshPlayer_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
}
MSG_Ret_NineScreenRefreshPlayer_SC::MSG_Ret_NineScreenRefreshPlayer_SC(const MSG_Ret_NineScreenRefreshPlayer_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
}

void MSG_Ret_NineScreenRefreshPlayer_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_NineScreenRefreshPlayer_SC_message_2eproto.base);
}

MSG_Ret_NineScreenRefreshPlayer_SC::~MSG_Ret_NineScreenRefreshPlayer_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
  SharedDtor();
}

void MSG_Ret_NineScreenRefreshPlayer_SC::SharedDtor() {
}

void MSG_Ret_NineScreenRefreshPlayer_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_NineScreenRefreshPlayer_SC& MSG_Ret_NineScreenRefreshPlayer_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_NineScreenRefreshPlayer_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_NineScreenRefreshPlayer_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_NineScreenRefreshPlayer_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.MapUserData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_NineScreenRefreshPlayer_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.MapUserData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
  return target;
}

size_t MSG_Ret_NineScreenRefreshPlayer_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.MapUserData data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_NineScreenRefreshPlayer_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_NineScreenRefreshPlayer_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_NineScreenRefreshPlayer_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_NineScreenRefreshPlayer_SC::MergeFrom(const MSG_Ret_NineScreenRefreshPlayer_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MSG_Ret_NineScreenRefreshPlayer_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_NineScreenRefreshPlayer_SC::CopyFrom(const MSG_Ret_NineScreenRefreshPlayer_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_NineScreenRefreshPlayer_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_NineScreenRefreshPlayer_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_NineScreenRefreshPlayer_SC::InternalSwap(MSG_Ret_NineScreenRefreshPlayer_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_NineScreenRefreshPlayer_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MapScreenRefreshCharacter_SC::InitAsDefaultInstance() {
  ::msg::_MSG_Ret_MapScreenRefreshCharacter_SC_default_instance_._instance.get_mutable()->data_ = const_cast< ::msg::MapUserData*>(
      ::msg::MapUserData::internal_default_instance());
}
class MSG_Ret_MapScreenRefreshCharacter_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MapScreenRefreshCharacter_SC>()._has_bits_);
  static const ::msg::MapUserData& data(const MSG_Ret_MapScreenRefreshCharacter_SC* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msg::MapUserData&
MSG_Ret_MapScreenRefreshCharacter_SC::_Internal::data(const MSG_Ret_MapScreenRefreshCharacter_SC* msg) {
  return *msg->data_;
}
MSG_Ret_MapScreenRefreshCharacter_SC::MSG_Ret_MapScreenRefreshCharacter_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
}
MSG_Ret_MapScreenRefreshCharacter_SC::MSG_Ret_MapScreenRefreshCharacter_SC(const MSG_Ret_MapScreenRefreshCharacter_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::msg::MapUserData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
}

void MSG_Ret_MapScreenRefreshCharacter_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_MapScreenRefreshCharacter_SC_message_2eproto.base);
  data_ = nullptr;
}

MSG_Ret_MapScreenRefreshCharacter_SC::~MSG_Ret_MapScreenRefreshCharacter_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
  SharedDtor();
}

void MSG_Ret_MapScreenRefreshCharacter_SC::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void MSG_Ret_MapScreenRefreshCharacter_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MapScreenRefreshCharacter_SC& MSG_Ret_MapScreenRefreshCharacter_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MapScreenRefreshCharacter_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MapScreenRefreshCharacter_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MapScreenRefreshCharacter_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.MapUserData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MapScreenRefreshCharacter_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.MapUserData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
  return target;
}

size_t MSG_Ret_MapScreenRefreshCharacter_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .msg.MapUserData data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MapScreenRefreshCharacter_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MapScreenRefreshCharacter_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MapScreenRefreshCharacter_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MapScreenRefreshCharacter_SC::MergeFrom(const MSG_Ret_MapScreenRefreshCharacter_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::msg::MapUserData::MergeFrom(from._internal_data());
  }
}

void MSG_Ret_MapScreenRefreshCharacter_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MapScreenRefreshCharacter_SC::CopyFrom(const MSG_Ret_MapScreenRefreshCharacter_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_MapScreenRefreshCharacter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MapScreenRefreshCharacter_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MapScreenRefreshCharacter_SC::InternalSwap(MSG_Ret_MapScreenRefreshCharacter_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MapScreenRefreshCharacter_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MapScreenRemoveCharacter_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MapScreenRemoveCharacter_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MapScreenRemoveCharacter_SC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_MapScreenRemoveCharacter_SC::MSG_Ret_MapScreenRemoveCharacter_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
}
MSG_Ret_MapScreenRemoveCharacter_SC::MSG_Ret_MapScreenRemoveCharacter_SC(const MSG_Ret_MapScreenRemoveCharacter_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charid_ = from.charid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
}

void MSG_Ret_MapScreenRemoveCharacter_SC::SharedCtor() {
  charid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Ret_MapScreenRemoveCharacter_SC::~MSG_Ret_MapScreenRemoveCharacter_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
  SharedDtor();
}

void MSG_Ret_MapScreenRemoveCharacter_SC::SharedDtor() {
}

void MSG_Ret_MapScreenRemoveCharacter_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MapScreenRemoveCharacter_SC& MSG_Ret_MapScreenRemoveCharacter_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MapScreenRemoveCharacter_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MapScreenRemoveCharacter_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MapScreenRemoveCharacter_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MapScreenRemoveCharacter_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
  return target;
}

size_t MSG_Ret_MapScreenRemoveCharacter_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 charid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_charid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MapScreenRemoveCharacter_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MapScreenRemoveCharacter_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MapScreenRemoveCharacter_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MapScreenRemoveCharacter_SC::MergeFrom(const MSG_Ret_MapScreenRemoveCharacter_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charid()) {
    _internal_set_charid(from._internal_charid());
  }
}

void MSG_Ret_MapScreenRemoveCharacter_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MapScreenRemoveCharacter_SC::CopyFrom(const MSG_Ret_MapScreenRemoveCharacter_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_MapScreenRemoveCharacter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MapScreenRemoveCharacter_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MapScreenRemoveCharacter_SC::InternalSwap(MSG_Ret_MapScreenRemoveCharacter_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(charid_, other->charid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MapScreenRemoveCharacter_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
}
MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC(const MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charid_ = from.charid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
}

void MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::SharedCtor() {
  charid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::~MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
  SharedDtor();
}

void MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::SharedDtor() {
}

void MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC& MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
  return target;
}

size_t MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 charid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_charid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::MergeFrom(const MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charid()) {
    _internal_set_charid(from._internal_charid());
  }
}

void MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::CopyFrom(const MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::InternalSwap(MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(charid_, other->charid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MapScreenBatchRemoveCharacter_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MapScreenBatchRemoveCharacter_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MapScreenBatchRemoveCharacter_SC>()._has_bits_);
};

MSG_Ret_MapScreenBatchRemoveCharacter_SC::MSG_Ret_MapScreenBatchRemoveCharacter_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
}
MSG_Ret_MapScreenBatchRemoveCharacter_SC::MSG_Ret_MapScreenBatchRemoveCharacter_SC(const MSG_Ret_MapScreenBatchRemoveCharacter_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      charids_(from.charids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
}

void MSG_Ret_MapScreenBatchRemoveCharacter_SC::SharedCtor() {
}

MSG_Ret_MapScreenBatchRemoveCharacter_SC::~MSG_Ret_MapScreenBatchRemoveCharacter_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
  SharedDtor();
}

void MSG_Ret_MapScreenBatchRemoveCharacter_SC::SharedDtor() {
}

void MSG_Ret_MapScreenBatchRemoveCharacter_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MapScreenBatchRemoveCharacter_SC& MSG_Ret_MapScreenBatchRemoveCharacter_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MapScreenBatchRemoveCharacter_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MapScreenBatchRemoveCharacter_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MapScreenBatchRemoveCharacter_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 charids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_charids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_charids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MapScreenBatchRemoveCharacter_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 charids = 1;
  for (int i = 0, n = this->_internal_charids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
  return target;
}

size_t MSG_Ret_MapScreenBatchRemoveCharacter_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 charids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->charids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_charids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MapScreenBatchRemoveCharacter_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MapScreenBatchRemoveCharacter_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MapScreenBatchRemoveCharacter_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MapScreenBatchRemoveCharacter_SC::MergeFrom(const MSG_Ret_MapScreenBatchRemoveCharacter_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  charids_.MergeFrom(from.charids_);
}

void MSG_Ret_MapScreenBatchRemoveCharacter_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MapScreenBatchRemoveCharacter_SC::CopyFrom(const MSG_Ret_MapScreenBatchRemoveCharacter_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_MapScreenBatchRemoveCharacter_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MapScreenBatchRemoveCharacter_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MapScreenBatchRemoveCharacter_SC::InternalSwap(MSG_Ret_MapScreenBatchRemoveCharacter_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  charids_.InternalSwap(&other->charids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MapScreenBatchRemoveCharacter_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_StateList_SC::InitAsDefaultInstance() {
}
class MSG_Ret_StateList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_StateList_SC>()._has_bits_);
};

MSG_Ret_StateList_SC::MSG_Ret_StateList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_StateList_SC)
}
MSG_Ret_StateList_SC::MSG_Ret_StateList_SC(const MSG_Ret_StateList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      states_(from.states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_StateList_SC)
}

void MSG_Ret_StateList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_StateList_SC_message_2eproto.base);
}

MSG_Ret_StateList_SC::~MSG_Ret_StateList_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_StateList_SC)
  SharedDtor();
}

void MSG_Ret_StateList_SC::SharedDtor() {
}

void MSG_Ret_StateList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_StateList_SC& MSG_Ret_StateList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_StateList_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_StateList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_StateList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_StateList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.StateItem states = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_StateList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_StateList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.StateItem states = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_StateList_SC)
  return target;
}

size_t MSG_Ret_StateList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_StateList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.StateItem states = 1;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_StateList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_StateList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_StateList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_StateList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_StateList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_StateList_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_StateList_SC::MergeFrom(const MSG_Ret_StateList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_StateList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
}

void MSG_Ret_StateList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_StateList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_StateList_SC::CopyFrom(const MSG_Ret_StateList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_StateList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_StateList_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_StateList_SC::InternalSwap(MSG_Ret_StateList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  states_.InternalSwap(&other->states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_StateList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatMovePos::InitAsDefaultInstance() {
}
class FloatMovePos::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatMovePos>()._has_bits_);
  static void set_has_fx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FloatMovePos::FloatMovePos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.FloatMovePos)
}
FloatMovePos::FloatMovePos(const FloatMovePos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&fy_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(fy_));
  // @@protoc_insertion_point(copy_constructor:msg.FloatMovePos)
}

void FloatMovePos::SharedCtor() {
  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fy_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(fy_));
}

FloatMovePos::~FloatMovePos() {
  // @@protoc_insertion_point(destructor:msg.FloatMovePos)
  SharedDtor();
}

void FloatMovePos::SharedDtor() {
}

void FloatMovePos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatMovePos& FloatMovePos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatMovePos_message_2eproto.base);
  return *internal_default_instance();
}


void FloatMovePos::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.FloatMovePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&fx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fy_) -
        reinterpret_cast<char*>(&fx_)) + sizeof(fy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FloatMovePos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_fx(&has_bits);
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_fy(&has_bits);
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatMovePos::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.FloatMovePos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float fx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fx(), target);
  }

  // optional float fy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.FloatMovePos)
  return target;
}

size_t FloatMovePos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.FloatMovePos)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float fx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float fy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatMovePos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.FloatMovePos)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatMovePos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatMovePos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.FloatMovePos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.FloatMovePos)
    MergeFrom(*source);
  }
}

void FloatMovePos::MergeFrom(const FloatMovePos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.FloatMovePos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      fx_ = from.fx_;
    }
    if (cached_has_bits & 0x00000002u) {
      fy_ = from.fy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FloatMovePos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.FloatMovePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatMovePos::CopyFrom(const FloatMovePos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.FloatMovePos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatMovePos::IsInitialized() const {
  return true;
}

void FloatMovePos::InternalSwap(FloatMovePos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fx_, other->fx_);
  swap(fy_, other->fy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatMovePos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveData::InitAsDefaultInstance() {
  ::msg::_MoveData_default_instance_._instance.get_mutable()->pos_ = const_cast< ::msg::FloatMovePos*>(
      ::msg::FloatMovePos::internal_default_instance());
}
class MoveData::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveData>()._has_bits_);
  static const ::msg::FloatMovePos& pos(const MoveData* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::msg::FloatMovePos&
MoveData::_Internal::pos(const MoveData* msg) {
  return *msg->pos_;
}
MoveData::MoveData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MoveData)
}
MoveData::MoveData(const MoveData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::msg::FloatMovePos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  dir_ = from.dir_;
  // @@protoc_insertion_point(copy_constructor:msg.MoveData)
}

void MoveData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveData_message_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(dir_));
}

MoveData::~MoveData() {
  // @@protoc_insertion_point(destructor:msg.MoveData)
  SharedDtor();
}

void MoveData::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void MoveData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveData& MoveData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveData_message_2eproto.base);
  return *internal_default_instance();
}


void MoveData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MoveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != nullptr);
    pos_->Clear();
  }
  dir_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MoveData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.FloatMovePos pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MoveData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.FloatMovePos pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // optional uint32 dir = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MoveData)
  return target;
}

size_t MoveData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MoveData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .msg.FloatMovePos pos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional uint32 dir = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dir());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MoveData)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MoveData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MoveData)
    MergeFrom(*source);
  }
}

void MoveData::MergeFrom(const MoveData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MoveData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::msg::FloatMovePos::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      dir_ = from.dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MoveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveData::CopyFrom(const MoveData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MoveData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveData::IsInitialized() const {
  return true;
}

void MoveData::InternalSwap(MoveData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Move_CS::InitAsDefaultInstance() {
}
class MSG_Req_Move_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Move_CS>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steplenth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_Move_CS::MSG_Req_Move_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_Move_CS)
}
MSG_Req_Move_CS::MSG_Req_Move_CS(const MSG_Req_Move_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      movedata_(from.movedata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steplenth_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(steplenth_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_Move_CS)
}

void MSG_Req_Move_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_Move_CS_message_2eproto.base);
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steplenth_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(steplenth_));
}

MSG_Req_Move_CS::~MSG_Req_Move_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_Move_CS)
  SharedDtor();
}

void MSG_Req_Move_CS::SharedDtor() {
}

void MSG_Req_Move_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Move_CS& MSG_Req_Move_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Move_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Move_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_Move_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movedata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steplenth_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(steplenth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Move_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.MoveData movedata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 steplenth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_steplenth(&has_bits);
          steplenth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Move_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_Move_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // repeated .msg.MoveData movedata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_movedata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_movedata(i), target, stream);
  }

  // optional uint32 steplenth = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_steplenth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_Move_CS)
  return target;
}

size_t MSG_Req_Move_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_Move_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.MoveData movedata = 2;
  total_size += 1UL * this->_internal_movedata_size();
  for (const auto& msg : this->movedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 steplenth = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steplenth());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Move_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_Move_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Move_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Move_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_Move_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_Move_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_Move_CS::MergeFrom(const MSG_Req_Move_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_Move_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  movedata_.MergeFrom(from.movedata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000002u) {
      steplenth_ = from.steplenth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_Move_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_Move_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Move_CS::CopyFrom(const MSG_Req_Move_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_Move_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Move_CS::IsInitialized() const {
  return true;
}

void MSG_Req_Move_CS::InternalSwap(MSG_Req_Move_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  movedata_.InternalSwap(&other->movedata_);
  swap(charid_, other->charid_);
  swap(steplenth_, other->steplenth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Move_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Move_SC::InitAsDefaultInstance() {
}
class MSG_Ret_Move_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Move_SC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steplength(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_Move_SC::MSG_Ret_Move_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_Move_SC)
}
MSG_Ret_Move_SC::MSG_Ret_Move_SC(const MSG_Ret_Move_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      movedata_(from.movedata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steplength_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(steplength_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_Move_SC)
}

void MSG_Ret_Move_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_Move_SC_message_2eproto.base);
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steplength_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(steplength_));
}

MSG_Ret_Move_SC::~MSG_Ret_Move_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_Move_SC)
  SharedDtor();
}

void MSG_Ret_Move_SC::SharedDtor() {
}

void MSG_Ret_Move_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Move_SC& MSG_Ret_Move_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Move_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Move_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_Move_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movedata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steplength_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(steplength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Move_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.MoveData movedata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 steplength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_steplength(&has_bits);
          steplength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Move_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_Move_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // repeated .msg.MoveData movedata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_movedata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_movedata(i), target, stream);
  }

  // optional uint32 steplength = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_steplength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_Move_SC)
  return target;
}

size_t MSG_Ret_Move_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_Move_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.MoveData movedata = 2;
  total_size += 1UL * this->_internal_movedata_size();
  for (const auto& msg : this->movedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 steplength = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steplength());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Move_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_Move_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Move_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Move_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_Move_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_Move_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Move_SC::MergeFrom(const MSG_Ret_Move_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_Move_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  movedata_.MergeFrom(from.movedata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000002u) {
      steplength_ = from.steplength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_Move_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_Move_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Move_SC::CopyFrom(const MSG_Ret_Move_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_Move_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Move_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Move_SC::InternalSwap(MSG_Ret_Move_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  movedata_.InternalSwap(&other->movedata_);
  swap(charid_, other->charid_);
  swap(steplength_, other->steplength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Move_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_TELE_PORT_CS::InitAsDefaultInstance() {
}
class MSG_Req_TELE_PORT_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_TELE_PORT_CS>()._has_bits_);
  static void set_has_teleportid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_TELE_PORT_CS::MSG_Req_TELE_PORT_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_TELE_PORT_CS)
}
MSG_Req_TELE_PORT_CS::MSG_Req_TELE_PORT_CS(const MSG_Req_TELE_PORT_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  teleportid_ = from.teleportid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_TELE_PORT_CS)
}

void MSG_Req_TELE_PORT_CS::SharedCtor() {
  teleportid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Req_TELE_PORT_CS::~MSG_Req_TELE_PORT_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_TELE_PORT_CS)
  SharedDtor();
}

void MSG_Req_TELE_PORT_CS::SharedDtor() {
}

void MSG_Req_TELE_PORT_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_TELE_PORT_CS& MSG_Req_TELE_PORT_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_TELE_PORT_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_TELE_PORT_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_TELE_PORT_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teleportid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_TELE_PORT_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 teleportid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_teleportid(&has_bits);
          teleportid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_TELE_PORT_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_TELE_PORT_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 teleportid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_teleportid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_TELE_PORT_CS)
  return target;
}

size_t MSG_Req_TELE_PORT_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_TELE_PORT_CS)
  size_t total_size = 0;

  // required uint64 teleportid = 1;
  if (_internal_has_teleportid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_teleportid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_TELE_PORT_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_TELE_PORT_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_TELE_PORT_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_TELE_PORT_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_TELE_PORT_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_TELE_PORT_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_TELE_PORT_CS::MergeFrom(const MSG_Req_TELE_PORT_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_TELE_PORT_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_teleportid()) {
    _internal_set_teleportid(from._internal_teleportid());
  }
}

void MSG_Req_TELE_PORT_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_TELE_PORT_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_TELE_PORT_CS::CopyFrom(const MSG_Req_TELE_PORT_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_TELE_PORT_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_TELE_PORT_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_Req_TELE_PORT_CS::InternalSwap(MSG_Req_TELE_PORT_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(teleportid_, other->teleportid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_TELE_PORT_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Server_Force_Move_SC::InitAsDefaultInstance() {
}
class MSG_Server_Force_Move_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Server_Force_Move_SC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steplength(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Server_Force_Move_SC::MSG_Server_Force_Move_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Server_Force_Move_SC)
}
MSG_Server_Force_Move_SC::MSG_Server_Force_Move_SC(const MSG_Server_Force_Move_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      movedata_(from.movedata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steplength_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(steplength_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Server_Force_Move_SC)
}

void MSG_Server_Force_Move_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Server_Force_Move_SC_message_2eproto.base);
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steplength_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(steplength_));
}

MSG_Server_Force_Move_SC::~MSG_Server_Force_Move_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Server_Force_Move_SC)
  SharedDtor();
}

void MSG_Server_Force_Move_SC::SharedDtor() {
}

void MSG_Server_Force_Move_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Server_Force_Move_SC& MSG_Server_Force_Move_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Server_Force_Move_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Server_Force_Move_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Server_Force_Move_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movedata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steplength_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(steplength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Server_Force_Move_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.MoveData movedata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 steplength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_steplength(&has_bits);
          steplength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Server_Force_Move_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Server_Force_Move_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // repeated .msg.MoveData movedata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_movedata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_movedata(i), target, stream);
  }

  // optional uint32 steplength = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_steplength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Server_Force_Move_SC)
  return target;
}

size_t MSG_Server_Force_Move_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Server_Force_Move_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.MoveData movedata = 2;
  total_size += 1UL * this->_internal_movedata_size();
  for (const auto& msg : this->movedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 steplength = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steplength());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Server_Force_Move_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Server_Force_Move_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Server_Force_Move_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Server_Force_Move_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Server_Force_Move_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Server_Force_Move_SC)
    MergeFrom(*source);
  }
}

void MSG_Server_Force_Move_SC::MergeFrom(const MSG_Server_Force_Move_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Server_Force_Move_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  movedata_.MergeFrom(from.movedata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000002u) {
      steplength_ = from.steplength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Server_Force_Move_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Server_Force_Move_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Server_Force_Move_SC::CopyFrom(const MSG_Server_Force_Move_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Server_Force_Move_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Server_Force_Move_SC::IsInitialized() const {
  return true;
}

void MSG_Server_Force_Move_SC::InternalSwap(MSG_Server_Force_Move_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  movedata_.InternalSwap(&other->movedata_);
  swap(charid_, other->charid_);
  swap(steplength_, other->steplength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Server_Force_Move_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Move_Failed_SC::InitAsDefaultInstance() {
  ::msg::_MSG_Ret_Move_Failed_SC_default_instance_._instance.get_mutable()->movedata_ = const_cast< ::msg::MoveData*>(
      ::msg::MoveData::internal_default_instance());
}
class MSG_Ret_Move_Failed_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Move_Failed_SC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::msg::MoveData& movedata(const MSG_Ret_Move_Failed_SC* msg);
  static void set_has_movedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steplength(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::msg::MoveData&
MSG_Ret_Move_Failed_SC::_Internal::movedata(const MSG_Ret_Move_Failed_SC* msg) {
  return *msg->movedata_;
}
MSG_Ret_Move_Failed_SC::MSG_Ret_Move_Failed_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_Move_Failed_SC)
}
MSG_Ret_Move_Failed_SC::MSG_Ret_Move_Failed_SC(const MSG_Ret_Move_Failed_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_movedata()) {
    movedata_ = new ::msg::MoveData(*from.movedata_);
  } else {
    movedata_ = nullptr;
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&steplength_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(steplength_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_Move_Failed_SC)
}

void MSG_Ret_Move_Failed_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_Move_Failed_SC_message_2eproto.base);
  ::memset(&movedata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steplength_) -
      reinterpret_cast<char*>(&movedata_)) + sizeof(steplength_));
}

MSG_Ret_Move_Failed_SC::~MSG_Ret_Move_Failed_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_Move_Failed_SC)
  SharedDtor();
}

void MSG_Ret_Move_Failed_SC::SharedDtor() {
  if (this != internal_default_instance()) delete movedata_;
}

void MSG_Ret_Move_Failed_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Move_Failed_SC& MSG_Ret_Move_Failed_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Move_Failed_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Move_Failed_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_Move_Failed_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(movedata_ != nullptr);
    movedata_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steplength_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(steplength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Move_Failed_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.MoveData movedata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_movedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 steplength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_steplength(&has_bits);
          steplength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Move_Failed_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_Move_Failed_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional .msg.MoveData movedata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::movedata(this), target, stream);
  }

  // optional uint32 steplength = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_steplength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_Move_Failed_SC)
  return target;
}

size_t MSG_Ret_Move_Failed_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_Move_Failed_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .msg.MoveData movedata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *movedata_);
    }

    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 steplength = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steplength());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Move_Failed_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_Move_Failed_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Move_Failed_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Move_Failed_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_Move_Failed_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_Move_Failed_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Move_Failed_SC::MergeFrom(const MSG_Ret_Move_Failed_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_Move_Failed_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_movedata()->::msg::MoveData::MergeFrom(from._internal_movedata());
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000004u) {
      steplength_ = from.steplength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_Move_Failed_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_Move_Failed_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Move_Failed_SC::CopyFrom(const MSG_Ret_Move_Failed_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_Move_Failed_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Move_Failed_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Move_Failed_SC::InternalSwap(MSG_Ret_Move_Failed_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(movedata_, other->movedata_);
  swap(charid_, other->charid_);
  swap(steplength_, other->steplength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Move_Failed_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_SetState_SC::InitAsDefaultInstance() {
}
class MSG_Ret_SetState_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_SetState_SC>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_SetState_SC::MSG_Ret_SetState_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_SetState_SC)
}
MSG_Ret_SetState_SC::MSG_Ret_SetState_SC(const MSG_Ret_SetState_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      state_(from.state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_SetState_SC)
}

void MSG_Ret_SetState_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_SetState_SC_message_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

MSG_Ret_SetState_SC::~MSG_Ret_SetState_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_SetState_SC)
  SharedDtor();
}

void MSG_Ret_SetState_SC::SharedDtor() {
}

void MSG_Ret_SetState_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_SetState_SC& MSG_Ret_SetState_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_SetState_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_SetState_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_SetState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_SetState_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.StateItem state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_SetState_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_SetState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // repeated .msg.StateItem state = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_SetState_SC)
  return target;
}

size_t MSG_Ret_SetState_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_SetState_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.StateItem state = 3;
  total_size += 1UL * this->_internal_state_size();
  for (const auto& msg : this->state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_SetState_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_SetState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_SetState_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_SetState_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_SetState_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_SetState_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_SetState_SC::MergeFrom(const MSG_Ret_SetState_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_SetState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_SetState_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_SetState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_SetState_SC::CopyFrom(const MSG_Ret_SetState_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_SetState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_SetState_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_SetState_SC::InternalSwap(MSG_Ret_SetState_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  state_.InternalSwap(&other->state_);
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_SetState_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_ClearState_SC::InitAsDefaultInstance() {
  ::msg::_MSG_Ret_ClearState_SC_default_instance_._instance.get_mutable()->state_ = const_cast< ::msg::StateItem*>(
      ::msg::StateItem::internal_default_instance());
}
class MSG_Ret_ClearState_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_ClearState_SC>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::msg::StateItem& state(const MSG_Ret_ClearState_SC* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msg::StateItem&
MSG_Ret_ClearState_SC::_Internal::state(const MSG_Ret_ClearState_SC* msg) {
  return *msg->state_;
}
MSG_Ret_ClearState_SC::MSG_Ret_ClearState_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_ClearState_SC)
}
MSG_Ret_ClearState_SC::MSG_Ret_ClearState_SC(const MSG_Ret_ClearState_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_state()) {
    state_ = new ::msg::StateItem(*from.state_);
  } else {
    state_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_ClearState_SC)
}

void MSG_Ret_ClearState_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_ClearState_SC_message_2eproto.base);
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&state_)) + sizeof(type_));
}

MSG_Ret_ClearState_SC::~MSG_Ret_ClearState_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_ClearState_SC)
  SharedDtor();
}

void MSG_Ret_ClearState_SC::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void MSG_Ret_ClearState_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_ClearState_SC& MSG_Ret_ClearState_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_ClearState_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_ClearState_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_ClearState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != nullptr);
    state_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_ClearState_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.StateItem state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_ClearState_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_ClearState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint64 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_id(), target);
  }

  // optional .msg.StateItem state = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_ClearState_SC)
  return target;
}

size_t MSG_Ret_ClearState_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_ClearState_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .msg.StateItem state = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

    // optional uint64 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_id());
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_ClearState_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_ClearState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_ClearState_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_ClearState_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_ClearState_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_ClearState_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_ClearState_SC::MergeFrom(const MSG_Ret_ClearState_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_ClearState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_state()->::msg::StateItem::MergeFrom(from._internal_state());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_ClearState_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_ClearState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_ClearState_SC::CopyFrom(const MSG_Ret_ClearState_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_ClearState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_ClearState_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_ClearState_SC::InternalSwap(MSG_Ret_ClearState_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
  swap(id_, other->id_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_ClearState_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MapScreenBatchRefreshNpc_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MapScreenBatchRefreshNpc_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MapScreenBatchRefreshNpc_SC>()._has_bits_);
};

MSG_Ret_MapScreenBatchRefreshNpc_SC::MSG_Ret_MapScreenBatchRefreshNpc_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
}
MSG_Ret_MapScreenBatchRefreshNpc_SC::MSG_Ret_MapScreenBatchRefreshNpc_SC(const MSG_Ret_MapScreenBatchRefreshNpc_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
}

void MSG_Ret_MapScreenBatchRefreshNpc_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_MapScreenBatchRefreshNpc_SC_message_2eproto.base);
}

MSG_Ret_MapScreenBatchRefreshNpc_SC::~MSG_Ret_MapScreenBatchRefreshNpc_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
  SharedDtor();
}

void MSG_Ret_MapScreenBatchRefreshNpc_SC::SharedDtor() {
}

void MSG_Ret_MapScreenBatchRefreshNpc_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MapScreenBatchRefreshNpc_SC& MSG_Ret_MapScreenBatchRefreshNpc_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MapScreenBatchRefreshNpc_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MapScreenBatchRefreshNpc_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MapScreenBatchRefreshNpc_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.MapNpcData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MapScreenBatchRefreshNpc_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.MapNpcData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
  return target;
}

size_t MSG_Ret_MapScreenBatchRefreshNpc_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.MapNpcData data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MapScreenBatchRefreshNpc_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MapScreenBatchRefreshNpc_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MapScreenBatchRefreshNpc_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MapScreenBatchRefreshNpc_SC::MergeFrom(const MSG_Ret_MapScreenBatchRefreshNpc_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MSG_Ret_MapScreenBatchRefreshNpc_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MapScreenBatchRefreshNpc_SC::CopyFrom(const MSG_Ret_MapScreenBatchRefreshNpc_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_MapScreenBatchRefreshNpc_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MapScreenBatchRefreshNpc_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MapScreenBatchRefreshNpc_SC::InternalSwap(MSG_Ret_MapScreenBatchRefreshNpc_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MapScreenBatchRefreshNpc_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MapScreenBatchRemoveNpc_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MapScreenBatchRemoveNpc_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MapScreenBatchRemoveNpc_SC>()._has_bits_);
};

MSG_Ret_MapScreenBatchRemoveNpc_SC::MSG_Ret_MapScreenBatchRemoveNpc_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
}
MSG_Ret_MapScreenBatchRemoveNpc_SC::MSG_Ret_MapScreenBatchRemoveNpc_SC(const MSG_Ret_MapScreenBatchRemoveNpc_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tempids_(from.tempids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
}

void MSG_Ret_MapScreenBatchRemoveNpc_SC::SharedCtor() {
}

MSG_Ret_MapScreenBatchRemoveNpc_SC::~MSG_Ret_MapScreenBatchRemoveNpc_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
  SharedDtor();
}

void MSG_Ret_MapScreenBatchRemoveNpc_SC::SharedDtor() {
}

void MSG_Ret_MapScreenBatchRemoveNpc_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MapScreenBatchRemoveNpc_SC& MSG_Ret_MapScreenBatchRemoveNpc_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MapScreenBatchRemoveNpc_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MapScreenBatchRemoveNpc_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tempids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MapScreenBatchRemoveNpc_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 tempids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tempids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_tempids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MapScreenBatchRemoveNpc_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 tempids = 1;
  for (int i = 0, n = this->_internal_tempids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
  return target;
}

size_t MSG_Ret_MapScreenBatchRemoveNpc_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 tempids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->tempids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tempids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MapScreenBatchRemoveNpc_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MapScreenBatchRemoveNpc_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MapScreenBatchRemoveNpc_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MapScreenBatchRemoveNpc_SC::MergeFrom(const MSG_Ret_MapScreenBatchRemoveNpc_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tempids_.MergeFrom(from.tempids_);
}

void MSG_Ret_MapScreenBatchRemoveNpc_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MapScreenBatchRemoveNpc_SC::CopyFrom(const MSG_Ret_MapScreenBatchRemoveNpc_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_MapScreenBatchRemoveNpc_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MapScreenBatchRemoveNpc_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MapScreenBatchRemoveNpc_SC::InternalSwap(MSG_Ret_MapScreenBatchRemoveNpc_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tempids_.InternalSwap(&other->tempids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MapScreenBatchRemoveNpc_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MapScreenRefreshNpc_SC::InitAsDefaultInstance() {
  ::msg::_MSG_Ret_MapScreenRefreshNpc_SC_default_instance_._instance.get_mutable()->data_ = const_cast< ::msg::MapNpcData*>(
      ::msg::MapNpcData::internal_default_instance());
}
class MSG_Ret_MapScreenRefreshNpc_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MapScreenRefreshNpc_SC>()._has_bits_);
  static const ::msg::MapNpcData& data(const MSG_Ret_MapScreenRefreshNpc_SC* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msg::MapNpcData&
MSG_Ret_MapScreenRefreshNpc_SC::_Internal::data(const MSG_Ret_MapScreenRefreshNpc_SC* msg) {
  return *msg->data_;
}
MSG_Ret_MapScreenRefreshNpc_SC::MSG_Ret_MapScreenRefreshNpc_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_MapScreenRefreshNpc_SC)
}
MSG_Ret_MapScreenRefreshNpc_SC::MSG_Ret_MapScreenRefreshNpc_SC(const MSG_Ret_MapScreenRefreshNpc_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::msg::MapNpcData(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_MapScreenRefreshNpc_SC)
}

void MSG_Ret_MapScreenRefreshNpc_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_MapScreenRefreshNpc_SC_message_2eproto.base);
  data_ = nullptr;
}

MSG_Ret_MapScreenRefreshNpc_SC::~MSG_Ret_MapScreenRefreshNpc_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_MapScreenRefreshNpc_SC)
  SharedDtor();
}

void MSG_Ret_MapScreenRefreshNpc_SC::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void MSG_Ret_MapScreenRefreshNpc_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MapScreenRefreshNpc_SC& MSG_Ret_MapScreenRefreshNpc_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MapScreenRefreshNpc_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MapScreenRefreshNpc_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_MapScreenRefreshNpc_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MapScreenRefreshNpc_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.MapNpcData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MapScreenRefreshNpc_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_MapScreenRefreshNpc_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.MapNpcData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_MapScreenRefreshNpc_SC)
  return target;
}

size_t MSG_Ret_MapScreenRefreshNpc_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_MapScreenRefreshNpc_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .msg.MapNpcData data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MapScreenRefreshNpc_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_MapScreenRefreshNpc_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MapScreenRefreshNpc_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MapScreenRefreshNpc_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_MapScreenRefreshNpc_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_MapScreenRefreshNpc_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MapScreenRefreshNpc_SC::MergeFrom(const MSG_Ret_MapScreenRefreshNpc_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_MapScreenRefreshNpc_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::msg::MapNpcData::MergeFrom(from._internal_data());
  }
}

void MSG_Ret_MapScreenRefreshNpc_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_MapScreenRefreshNpc_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MapScreenRefreshNpc_SC::CopyFrom(const MSG_Ret_MapScreenRefreshNpc_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_MapScreenRefreshNpc_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MapScreenRefreshNpc_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MapScreenRefreshNpc_SC::InternalSwap(MSG_Ret_MapScreenRefreshNpc_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MapScreenRefreshNpc_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MapScreenRemoveNpc_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MapScreenRemoveNpc_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MapScreenRemoveNpc_SC>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_MapScreenRemoveNpc_SC::MSG_Ret_MapScreenRemoveNpc_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_MapScreenRemoveNpc_SC)
}
MSG_Ret_MapScreenRemoveNpc_SC::MSG_Ret_MapScreenRemoveNpc_SC(const MSG_Ret_MapScreenRemoveNpc_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tempid_ = from.tempid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_MapScreenRemoveNpc_SC)
}

void MSG_Ret_MapScreenRemoveNpc_SC::SharedCtor() {
  tempid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Ret_MapScreenRemoveNpc_SC::~MSG_Ret_MapScreenRemoveNpc_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_MapScreenRemoveNpc_SC)
  SharedDtor();
}

void MSG_Ret_MapScreenRemoveNpc_SC::SharedDtor() {
}

void MSG_Ret_MapScreenRemoveNpc_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MapScreenRemoveNpc_SC& MSG_Ret_MapScreenRemoveNpc_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MapScreenRemoveNpc_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MapScreenRemoveNpc_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_MapScreenRemoveNpc_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tempid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MapScreenRemoveNpc_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MapScreenRemoveNpc_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_MapScreenRemoveNpc_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_MapScreenRemoveNpc_SC)
  return target;
}

size_t MSG_Ret_MapScreenRemoveNpc_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_MapScreenRemoveNpc_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 tempid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tempid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MapScreenRemoveNpc_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_MapScreenRemoveNpc_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MapScreenRemoveNpc_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MapScreenRemoveNpc_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_MapScreenRemoveNpc_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_MapScreenRemoveNpc_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MapScreenRemoveNpc_SC::MergeFrom(const MSG_Ret_MapScreenRemoveNpc_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_MapScreenRemoveNpc_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tempid()) {
    _internal_set_tempid(from._internal_tempid());
  }
}

void MSG_Ret_MapScreenRemoveNpc_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_MapScreenRemoveNpc_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MapScreenRemoveNpc_SC::CopyFrom(const MSG_Ret_MapScreenRemoveNpc_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_MapScreenRemoveNpc_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MapScreenRemoveNpc_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MapScreenRemoveNpc_SC::InternalSwap(MSG_Ret_MapScreenRemoveNpc_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tempid_, other->tempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MapScreenRemoveNpc_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FuncNpcData::InitAsDefaultInstance() {
}
class FuncNpcData::_Internal {
 public:
  using HasBits = decltype(std::declval<FuncNpcData>()._has_bits_);
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FuncNpcData::FuncNpcData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.FuncNpcData)
}
FuncNpcData::FuncNpcData(const FuncNpcData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempid_, &from.tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&tempid_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:msg.FuncNpcData)
}

void FuncNpcData::SharedCtor() {
  ::memset(&tempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&tempid_)) + sizeof(y_));
}

FuncNpcData::~FuncNpcData() {
  // @@protoc_insertion_point(destructor:msg.FuncNpcData)
  SharedDtor();
}

void FuncNpcData::SharedDtor() {
}

void FuncNpcData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FuncNpcData& FuncNpcData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FuncNpcData_message_2eproto.base);
  return *internal_default_instance();
}


void FuncNpcData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.FuncNpcData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&tempid_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FuncNpcData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 baseid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tempid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FuncNpcData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.FuncNpcData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 baseid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_baseid(), target);
  }

  // optional uint64 tempid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tempid(), target);
  }

  // optional uint32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_x(), target);
  }

  // optional uint32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.FuncNpcData)
  return target;
}

size_t FuncNpcData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.FuncNpcData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 tempid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

    // optional uint32 baseid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_baseid());
    }

    // optional uint32 x = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_x());
    }

    // optional uint32 y = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FuncNpcData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.FuncNpcData)
  GOOGLE_DCHECK_NE(&from, this);
  const FuncNpcData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FuncNpcData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.FuncNpcData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.FuncNpcData)
    MergeFrom(*source);
  }
}

void FuncNpcData::MergeFrom(const FuncNpcData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.FuncNpcData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tempid_ = from.tempid_;
    }
    if (cached_has_bits & 0x00000002u) {
      baseid_ = from.baseid_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FuncNpcData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.FuncNpcData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FuncNpcData::CopyFrom(const FuncNpcData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.FuncNpcData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FuncNpcData::IsInitialized() const {
  return true;
}

void FuncNpcData::InternalSwap(FuncNpcData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tempid_, other->tempid_);
  swap(baseid_, other->baseid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FuncNpcData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_MapScreenFuncNpc_SC::InitAsDefaultInstance() {
}
class MSG_Ret_MapScreenFuncNpc_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_MapScreenFuncNpc_SC>()._has_bits_);
};

MSG_Ret_MapScreenFuncNpc_SC::MSG_Ret_MapScreenFuncNpc_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_MapScreenFuncNpc_SC)
}
MSG_Ret_MapScreenFuncNpc_SC::MSG_Ret_MapScreenFuncNpc_SC(const MSG_Ret_MapScreenFuncNpc_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_MapScreenFuncNpc_SC)
}

void MSG_Ret_MapScreenFuncNpc_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_MapScreenFuncNpc_SC_message_2eproto.base);
}

MSG_Ret_MapScreenFuncNpc_SC::~MSG_Ret_MapScreenFuncNpc_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_MapScreenFuncNpc_SC)
  SharedDtor();
}

void MSG_Ret_MapScreenFuncNpc_SC::SharedDtor() {
}

void MSG_Ret_MapScreenFuncNpc_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_MapScreenFuncNpc_SC& MSG_Ret_MapScreenFuncNpc_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_MapScreenFuncNpc_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_MapScreenFuncNpc_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_MapScreenFuncNpc_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_MapScreenFuncNpc_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.FuncNpcData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_MapScreenFuncNpc_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_MapScreenFuncNpc_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.FuncNpcData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_MapScreenFuncNpc_SC)
  return target;
}

size_t MSG_Ret_MapScreenFuncNpc_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_MapScreenFuncNpc_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.FuncNpcData data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_MapScreenFuncNpc_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_MapScreenFuncNpc_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_MapScreenFuncNpc_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_MapScreenFuncNpc_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_MapScreenFuncNpc_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_MapScreenFuncNpc_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_MapScreenFuncNpc_SC::MergeFrom(const MSG_Ret_MapScreenFuncNpc_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_MapScreenFuncNpc_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void MSG_Ret_MapScreenFuncNpc_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_MapScreenFuncNpc_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_MapScreenFuncNpc_SC::CopyFrom(const MSG_Ret_MapScreenFuncNpc_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_MapScreenFuncNpc_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_MapScreenFuncNpc_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_MapScreenFuncNpc_SC::InternalSwap(MSG_Ret_MapScreenFuncNpc_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_MapScreenFuncNpc_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_RetNpcMove_SC::InitAsDefaultInstance() {
}
class MSG_Ret_RetNpcMove_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_RetNpcMove_SC>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_RetNpcMove_SC::MSG_Ret_RetNpcMove_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_RetNpcMove_SC)
}
MSG_Ret_RetNpcMove_SC::MSG_Ret_RetNpcMove_SC(const MSG_Ret_RetNpcMove_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      movedata_(from.movedata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempid_, &from.tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&tempid_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_RetNpcMove_SC)
}

void MSG_Ret_RetNpcMove_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_RetNpcMove_SC_message_2eproto.base);
  ::memset(&tempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&tempid_)) + sizeof(speed_));
}

MSG_Ret_RetNpcMove_SC::~MSG_Ret_RetNpcMove_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_RetNpcMove_SC)
  SharedDtor();
}

void MSG_Ret_RetNpcMove_SC::SharedDtor() {
}

void MSG_Ret_RetNpcMove_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_RetNpcMove_SC& MSG_Ret_RetNpcMove_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_RetNpcMove_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_RetNpcMove_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_RetNpcMove_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  movedata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&tempid_)) + sizeof(speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_RetNpcMove_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.MoveData movedata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_movedata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_RetNpcMove_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_RetNpcMove_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  // repeated .msg.MoveData movedata = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_movedata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_movedata(i), target, stream);
  }

  // optional uint32 speed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_RetNpcMove_SC)
  return target;
}

size_t MSG_Ret_RetNpcMove_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_RetNpcMove_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.MoveData movedata = 2;
  total_size += 1UL * this->_internal_movedata_size();
  for (const auto& msg : this->movedata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 tempid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

    // optional uint32 speed = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_speed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_RetNpcMove_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_RetNpcMove_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_RetNpcMove_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_RetNpcMove_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_RetNpcMove_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_RetNpcMove_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_RetNpcMove_SC::MergeFrom(const MSG_Ret_RetNpcMove_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_RetNpcMove_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  movedata_.MergeFrom(from.movedata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tempid_ = from.tempid_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_RetNpcMove_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_RetNpcMove_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_RetNpcMove_SC::CopyFrom(const MSG_Ret_RetNpcMove_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_RetNpcMove_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_RetNpcMove_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_RetNpcMove_SC::InternalSwap(MSG_Ret_RetNpcMove_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  movedata_.InternalSwap(&other->movedata_);
  swap(tempid_, other->tempid_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_RetNpcMove_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetNpcWarpMove_SC::InitAsDefaultInstance() {
  ::msg::_MSG_RetNpcWarpMove_SC_default_instance_._instance.get_mutable()->movedata_ = const_cast< ::msg::MoveData*>(
      ::msg::MoveData::internal_default_instance());
}
class MSG_RetNpcWarpMove_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetNpcWarpMove_SC>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::msg::MoveData& movedata(const MSG_RetNpcWarpMove_SC* msg);
  static void set_has_movedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msg::MoveData&
MSG_RetNpcWarpMove_SC::_Internal::movedata(const MSG_RetNpcWarpMove_SC* msg) {
  return *msg->movedata_;
}
MSG_RetNpcWarpMove_SC::MSG_RetNpcWarpMove_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_RetNpcWarpMove_SC)
}
MSG_RetNpcWarpMove_SC::MSG_RetNpcWarpMove_SC(const MSG_RetNpcWarpMove_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_movedata()) {
    movedata_ = new ::msg::MoveData(*from.movedata_);
  } else {
    movedata_ = nullptr;
  }
  tempid_ = from.tempid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_RetNpcWarpMove_SC)
}

void MSG_RetNpcWarpMove_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetNpcWarpMove_SC_message_2eproto.base);
  ::memset(&movedata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tempid_) -
      reinterpret_cast<char*>(&movedata_)) + sizeof(tempid_));
}

MSG_RetNpcWarpMove_SC::~MSG_RetNpcWarpMove_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_RetNpcWarpMove_SC)
  SharedDtor();
}

void MSG_RetNpcWarpMove_SC::SharedDtor() {
  if (this != internal_default_instance()) delete movedata_;
}

void MSG_RetNpcWarpMove_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetNpcWarpMove_SC& MSG_RetNpcWarpMove_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetNpcWarpMove_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetNpcWarpMove_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_RetNpcWarpMove_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(movedata_ != nullptr);
    movedata_->Clear();
  }
  tempid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetNpcWarpMove_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.MoveData movedata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_movedata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetNpcWarpMove_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_RetNpcWarpMove_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  // optional .msg.MoveData movedata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::movedata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_RetNpcWarpMove_SC)
  return target;
}

size_t MSG_RetNpcWarpMove_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_RetNpcWarpMove_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .msg.MoveData movedata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *movedata_);
    }

    // optional uint64 tempid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetNpcWarpMove_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_RetNpcWarpMove_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetNpcWarpMove_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetNpcWarpMove_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_RetNpcWarpMove_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_RetNpcWarpMove_SC)
    MergeFrom(*source);
  }
}

void MSG_RetNpcWarpMove_SC::MergeFrom(const MSG_RetNpcWarpMove_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_RetNpcWarpMove_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_movedata()->::msg::MoveData::MergeFrom(from._internal_movedata());
    }
    if (cached_has_bits & 0x00000002u) {
      tempid_ = from.tempid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetNpcWarpMove_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_RetNpcWarpMove_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetNpcWarpMove_SC::CopyFrom(const MSG_RetNpcWarpMove_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_RetNpcWarpMove_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetNpcWarpMove_SC::IsInitialized() const {
  return true;
}

void MSG_RetNpcWarpMove_SC::InternalSwap(MSG_RetNpcWarpMove_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(movedata_, other->movedata_);
  swap(tempid_, other->tempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetNpcWarpMove_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetNpcDir_SC::InitAsDefaultInstance() {
}
class MSG_RetNpcDir_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetNpcDir_SC>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetNpcDir_SC::MSG_RetNpcDir_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_RetNpcDir_SC)
}
MSG_RetNpcDir_SC::MSG_RetNpcDir_SC(const MSG_RetNpcDir_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempid_, &from.tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&tempid_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_RetNpcDir_SC)
}

void MSG_RetNpcDir_SC::SharedCtor() {
  ::memset(&tempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&tempid_)) + sizeof(dir_));
}

MSG_RetNpcDir_SC::~MSG_RetNpcDir_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_RetNpcDir_SC)
  SharedDtor();
}

void MSG_RetNpcDir_SC::SharedDtor() {
}

void MSG_RetNpcDir_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetNpcDir_SC& MSG_RetNpcDir_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetNpcDir_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetNpcDir_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_RetNpcDir_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dir_) -
        reinterpret_cast<char*>(&tempid_)) + sizeof(dir_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetNpcDir_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetNpcDir_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_RetNpcDir_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  // optional uint32 dir = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_RetNpcDir_SC)
  return target;
}

size_t MSG_RetNpcDir_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_RetNpcDir_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 tempid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

    // optional uint32 dir = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dir());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetNpcDir_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_RetNpcDir_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetNpcDir_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetNpcDir_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_RetNpcDir_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_RetNpcDir_SC)
    MergeFrom(*source);
  }
}

void MSG_RetNpcDir_SC::MergeFrom(const MSG_RetNpcDir_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_RetNpcDir_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tempid_ = from.tempid_;
    }
    if (cached_has_bits & 0x00000002u) {
      dir_ = from.dir_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetNpcDir_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_RetNpcDir_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetNpcDir_SC::CopyFrom(const MSG_RetNpcDir_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_RetNpcDir_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetNpcDir_SC::IsInitialized() const {
  return true;
}

void MSG_RetNpcDir_SC::InternalSwap(MSG_RetNpcDir_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tempid_, other->tempid_);
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetNpcDir_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TempNpcInfo::InitAsDefaultInstance() {
}
class TempNpcInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TempNpcInfo>()._has_bits_);
  static void set_has_npcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_script(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TempNpcInfo::TempNpcInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.TempNpcInfo)
}
TempNpcInfo::TempNpcInfo(const TempNpcInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&npcid_, &from.npcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&script_) -
    reinterpret_cast<char*>(&npcid_)) + sizeof(script_));
  // @@protoc_insertion_point(copy_constructor:msg.TempNpcInfo)
}

void TempNpcInfo::SharedCtor() {
  ::memset(&npcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&script_) -
      reinterpret_cast<char*>(&npcid_)) + sizeof(script_));
}

TempNpcInfo::~TempNpcInfo() {
  // @@protoc_insertion_point(destructor:msg.TempNpcInfo)
  SharedDtor();
}

void TempNpcInfo::SharedDtor() {
}

void TempNpcInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TempNpcInfo& TempNpcInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TempNpcInfo_message_2eproto.base);
  return *internal_default_instance();
}


void TempNpcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TempNpcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&npcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&script_) -
        reinterpret_cast<char*>(&npcid_)) + sizeof(script_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TempNpcInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 npcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npcid(&has_bits);
          npcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 script = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_script(&has_bits);
          script_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TempNpcInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TempNpcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 npcid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_npcid(), target);
  }

  // optional uint32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num(), target);
  }

  // optional uint32 script = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TempNpcInfo)
  return target;
}

size_t TempNpcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TempNpcInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 npcid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_npcid());
    }

    // optional uint32 num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

    // optional uint32 script = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_script());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TempNpcInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.TempNpcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TempNpcInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TempNpcInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.TempNpcInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.TempNpcInfo)
    MergeFrom(*source);
  }
}

void TempNpcInfo::MergeFrom(const TempNpcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.TempNpcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      npcid_ = from.npcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000004u) {
      script_ = from.script_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TempNpcInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.TempNpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TempNpcInfo::CopyFrom(const TempNpcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TempNpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TempNpcInfo::IsInitialized() const {
  return true;
}

void TempNpcInfo::InternalSwap(TempNpcInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(npcid_, other->npcid_);
  swap(num_, other->num_);
  swap(script_, other->script_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TempNpcInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Summon_Npc_CS::InitAsDefaultInstance() {
}
class MSG_Req_Summon_Npc_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Summon_Npc_CS>()._has_bits_);
};

MSG_Req_Summon_Npc_CS::MSG_Req_Summon_Npc_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_Summon_Npc_CS)
}
MSG_Req_Summon_Npc_CS::MSG_Req_Summon_Npc_CS(const MSG_Req_Summon_Npc_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      npcs_(from.npcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_Summon_Npc_CS)
}

void MSG_Req_Summon_Npc_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_Summon_Npc_CS_message_2eproto.base);
}

MSG_Req_Summon_Npc_CS::~MSG_Req_Summon_Npc_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_Summon_Npc_CS)
  SharedDtor();
}

void MSG_Req_Summon_Npc_CS::SharedDtor() {
}

void MSG_Req_Summon_Npc_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Summon_Npc_CS& MSG_Req_Summon_Npc_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Summon_Npc_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Summon_Npc_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_Summon_Npc_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npcs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Summon_Npc_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.TempNpcInfo npcs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_npcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Summon_Npc_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_Summon_Npc_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.TempNpcInfo npcs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_npcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_npcs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_Summon_Npc_CS)
  return target;
}

size_t MSG_Req_Summon_Npc_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_Summon_Npc_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.TempNpcInfo npcs = 1;
  total_size += 1UL * this->_internal_npcs_size();
  for (const auto& msg : this->npcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Summon_Npc_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_Summon_Npc_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Summon_Npc_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Summon_Npc_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_Summon_Npc_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_Summon_Npc_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_Summon_Npc_CS::MergeFrom(const MSG_Req_Summon_Npc_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_Summon_Npc_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  npcs_.MergeFrom(from.npcs_);
}

void MSG_Req_Summon_Npc_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_Summon_Npc_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Summon_Npc_CS::CopyFrom(const MSG_Req_Summon_Npc_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_Summon_Npc_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Summon_Npc_CS::IsInitialized() const {
  return true;
}

void MSG_Req_Summon_Npc_CS::InternalSwap(MSG_Req_Summon_Npc_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  npcs_.InternalSwap(&other->npcs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Summon_Npc_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_setTimeState_SC::InitAsDefaultInstance() {
  ::msg::_MSG_Ret_setTimeState_SC_default_instance_._instance.get_mutable()->target_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_Ret_setTimeState_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_setTimeState_SC>()._has_bits_);
  static const ::msg::EntryIDType& target(const MSG_Ret_setTimeState_SC* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maxtime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lefttime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::msg::EntryIDType&
MSG_Ret_setTimeState_SC::_Internal::target(const MSG_Ret_setTimeState_SC* msg) {
  return *msg->target_;
}
void MSG_Ret_setTimeState_SC::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_Ret_setTimeState_SC::MSG_Ret_setTimeState_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_setTimeState_SC)
}
MSG_Ret_setTimeState_SC::MSG_Ret_setTimeState_SC(const MSG_Ret_setTimeState_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::msg::EntryIDType(*from.target_);
  } else {
    target_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&lefttime_) -
    reinterpret_cast<char*>(&state_)) + sizeof(lefttime_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_setTimeState_SC)
}

void MSG_Ret_setTimeState_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_setTimeState_SC_message_2eproto.base);
  ::memset(&target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lefttime_) -
      reinterpret_cast<char*>(&target_)) + sizeof(lefttime_));
}

MSG_Ret_setTimeState_SC::~MSG_Ret_setTimeState_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_setTimeState_SC)
  SharedDtor();
}

void MSG_Ret_setTimeState_SC::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void MSG_Ret_setTimeState_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_setTimeState_SC& MSG_Ret_setTimeState_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_setTimeState_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_setTimeState_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_setTimeState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_ != nullptr);
    target_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lefttime_) -
        reinterpret_cast<char*>(&state_)) + sizeof(lefttime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_setTimeState_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxtime(&has_bits);
          maxtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lefttime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lefttime(&has_bits);
          lefttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_setTimeState_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_setTimeState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_state(), target);
  }

  // optional uint32 maxtime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxtime(), target);
  }

  // optional uint32 lefttime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lefttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_setTimeState_SC)
  return target;
}

size_t MSG_Ret_setTimeState_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_setTimeState_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .msg.EntryIDType target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_);
    }

    // optional uint32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_state());
    }

    // optional uint32 maxtime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxtime());
    }

    // optional uint32 lefttime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lefttime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_setTimeState_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_setTimeState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_setTimeState_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_setTimeState_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_setTimeState_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_setTimeState_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_setTimeState_SC::MergeFrom(const MSG_Ret_setTimeState_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_setTimeState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_target()->::msg::EntryIDType::MergeFrom(from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxtime_ = from.maxtime_;
    }
    if (cached_has_bits & 0x00000008u) {
      lefttime_ = from.lefttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_setTimeState_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_setTimeState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_setTimeState_SC::CopyFrom(const MSG_Ret_setTimeState_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_setTimeState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_setTimeState_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_setTimeState_SC::InternalSwap(MSG_Ret_setTimeState_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
  swap(state_, other->state_);
  swap(maxtime_, other->maxtime_);
  swap(lefttime_, other->lefttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_setTimeState_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Ping_CS::InitAsDefaultInstance() {
}
class MSG_Req_Ping_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Ping_CS>()._has_bits_);
};

MSG_Req_Ping_CS::MSG_Req_Ping_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_Ping_CS)
}
MSG_Req_Ping_CS::MSG_Req_Ping_CS(const MSG_Req_Ping_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_Ping_CS)
}

void MSG_Req_Ping_CS::SharedCtor() {
}

MSG_Req_Ping_CS::~MSG_Req_Ping_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_Ping_CS)
  SharedDtor();
}

void MSG_Req_Ping_CS::SharedDtor() {
}

void MSG_Req_Ping_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Ping_CS& MSG_Req_Ping_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Ping_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Ping_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_Ping_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Ping_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Ping_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_Ping_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_Ping_CS)
  return target;
}

size_t MSG_Req_Ping_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_Ping_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Ping_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_Ping_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Ping_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Ping_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_Ping_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_Ping_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_Ping_CS::MergeFrom(const MSG_Req_Ping_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_Ping_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_Ping_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_Ping_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Ping_CS::CopyFrom(const MSG_Req_Ping_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_Ping_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Ping_CS::IsInitialized() const {
  return true;
}

void MSG_Req_Ping_CS::InternalSwap(MSG_Req_Ping_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Ping_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_VisibleNpcList_SC::InitAsDefaultInstance() {
}
class MSG_Ret_VisibleNpcList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_VisibleNpcList_SC>()._has_bits_);
};

MSG_Ret_VisibleNpcList_SC::MSG_Ret_VisibleNpcList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_VisibleNpcList_SC)
}
MSG_Ret_VisibleNpcList_SC::MSG_Ret_VisibleNpcList_SC(const MSG_Ret_VisibleNpcList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      npc_(from.npc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_VisibleNpcList_SC)
}

void MSG_Ret_VisibleNpcList_SC::SharedCtor() {
}

MSG_Ret_VisibleNpcList_SC::~MSG_Ret_VisibleNpcList_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_VisibleNpcList_SC)
  SharedDtor();
}

void MSG_Ret_VisibleNpcList_SC::SharedDtor() {
}

void MSG_Ret_VisibleNpcList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_VisibleNpcList_SC& MSG_Ret_VisibleNpcList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_VisibleNpcList_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_VisibleNpcList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_VisibleNpcList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  npc_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_VisibleNpcList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 npc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_npc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_npc(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_VisibleNpcList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_VisibleNpcList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 npc = 1;
  for (int i = 0, n = this->_internal_npc_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_npc(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_VisibleNpcList_SC)
  return target;
}

size_t MSG_Ret_VisibleNpcList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_VisibleNpcList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 npc = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->npc_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_npc_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_VisibleNpcList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_VisibleNpcList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_VisibleNpcList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_VisibleNpcList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_VisibleNpcList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_VisibleNpcList_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_VisibleNpcList_SC::MergeFrom(const MSG_Ret_VisibleNpcList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_VisibleNpcList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  npc_.MergeFrom(from.npc_);
}

void MSG_Ret_VisibleNpcList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_VisibleNpcList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_VisibleNpcList_SC::CopyFrom(const MSG_Ret_VisibleNpcList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_VisibleNpcList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_VisibleNpcList_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_VisibleNpcList_SC::InternalSwap(MSG_Ret_VisibleNpcList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  npc_.InternalSwap(&other->npc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_VisibleNpcList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetNinePlayerLevelUp_SC::InitAsDefaultInstance() {
  ::msg::_MSG_RetNinePlayerLevelUp_SC_default_instance_._instance.get_mutable()->target_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_RetNinePlayerLevelUp_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetNinePlayerLevelUp_SC>()._has_bits_);
  static const ::msg::EntryIDType& target(const MSG_RetNinePlayerLevelUp_SC* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msg::EntryIDType&
MSG_RetNinePlayerLevelUp_SC::_Internal::target(const MSG_RetNinePlayerLevelUp_SC* msg) {
  return *msg->target_;
}
void MSG_RetNinePlayerLevelUp_SC::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_RetNinePlayerLevelUp_SC::MSG_RetNinePlayerLevelUp_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_RetNinePlayerLevelUp_SC)
}
MSG_RetNinePlayerLevelUp_SC::MSG_RetNinePlayerLevelUp_SC(const MSG_RetNinePlayerLevelUp_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::msg::EntryIDType(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_RetNinePlayerLevelUp_SC)
}

void MSG_RetNinePlayerLevelUp_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetNinePlayerLevelUp_SC_message_2eproto.base);
  target_ = nullptr;
}

MSG_RetNinePlayerLevelUp_SC::~MSG_RetNinePlayerLevelUp_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_RetNinePlayerLevelUp_SC)
  SharedDtor();
}

void MSG_RetNinePlayerLevelUp_SC::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void MSG_RetNinePlayerLevelUp_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetNinePlayerLevelUp_SC& MSG_RetNinePlayerLevelUp_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetNinePlayerLevelUp_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetNinePlayerLevelUp_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_RetNinePlayerLevelUp_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_ != nullptr);
    target_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetNinePlayerLevelUp_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetNinePlayerLevelUp_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_RetNinePlayerLevelUp_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::target(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_RetNinePlayerLevelUp_SC)
  return target;
}

size_t MSG_RetNinePlayerLevelUp_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_RetNinePlayerLevelUp_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .msg.EntryIDType target = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetNinePlayerLevelUp_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_RetNinePlayerLevelUp_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetNinePlayerLevelUp_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetNinePlayerLevelUp_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_RetNinePlayerLevelUp_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_RetNinePlayerLevelUp_SC)
    MergeFrom(*source);
  }
}

void MSG_RetNinePlayerLevelUp_SC::MergeFrom(const MSG_RetNinePlayerLevelUp_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_RetNinePlayerLevelUp_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target()) {
    _internal_mutable_target()->::msg::EntryIDType::MergeFrom(from._internal_target());
  }
}

void MSG_RetNinePlayerLevelUp_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_RetNinePlayerLevelUp_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetNinePlayerLevelUp_SC::CopyFrom(const MSG_RetNinePlayerLevelUp_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_RetNinePlayerLevelUp_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetNinePlayerLevelUp_SC::IsInitialized() const {
  return true;
}

void MSG_RetNinePlayerLevelUp_SC::InternalSwap(MSG_RetNinePlayerLevelUp_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetNinePlayerLevelUp_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_UpdateExpLevel_SC::InitAsDefaultInstance() {
}
class MSG_UpdateExpLevel_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_UpdateExpLevel_SC>()._has_bits_);
  static void set_has_curexp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_curlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mainhero_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mainhero_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mainhero_lv(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_UpdateExpLevel_SC::MSG_UpdateExpLevel_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_UpdateExpLevel_SC)
}
MSG_UpdateExpLevel_SC::MSG_UpdateExpLevel_SC(const MSG_UpdateExpLevel_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curexp_, &from.curexp_,
    static_cast<size_t>(reinterpret_cast<char*>(&mainhero_lv_) -
    reinterpret_cast<char*>(&curexp_)) + sizeof(mainhero_lv_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_UpdateExpLevel_SC)
}

void MSG_UpdateExpLevel_SC::SharedCtor() {
  ::memset(&curexp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mainhero_lv_) -
      reinterpret_cast<char*>(&curexp_)) + sizeof(mainhero_lv_));
}

MSG_UpdateExpLevel_SC::~MSG_UpdateExpLevel_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_UpdateExpLevel_SC)
  SharedDtor();
}

void MSG_UpdateExpLevel_SC::SharedDtor() {
}

void MSG_UpdateExpLevel_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_UpdateExpLevel_SC& MSG_UpdateExpLevel_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_UpdateExpLevel_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_UpdateExpLevel_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_UpdateExpLevel_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&curexp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mainhero_lv_) -
        reinterpret_cast<char*>(&curexp_)) + sizeof(mainhero_lv_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_UpdateExpLevel_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 curexp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_curexp(&has_bits);
          curexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 curlevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_curlevel(&has_bits);
          curlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 mainhero_thisid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mainhero_thisid(&has_bits);
          mainhero_thisid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 mainhero_exp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mainhero_exp(&has_bits);
          mainhero_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mainhero_lv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mainhero_lv(&has_bits);
          mainhero_lv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_UpdateExpLevel_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_UpdateExpLevel_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 curexp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_curexp(), target);
  }

  // optional uint32 curlevel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_curlevel(), target);
  }

  // optional uint64 mainhero_thisid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_mainhero_thisid(), target);
  }

  // optional uint64 mainhero_exp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_mainhero_exp(), target);
  }

  // optional uint32 mainhero_lv = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mainhero_lv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_UpdateExpLevel_SC)
  return target;
}

size_t MSG_UpdateExpLevel_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_UpdateExpLevel_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 curexp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curexp());
    }

    // optional uint32 curlevel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curlevel());
    }

    // optional uint64 mainhero_thisid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_mainhero_thisid());
    }

    // optional uint64 mainhero_exp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_mainhero_exp());
    }

    // optional uint32 mainhero_lv = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mainhero_lv());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_UpdateExpLevel_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_UpdateExpLevel_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_UpdateExpLevel_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_UpdateExpLevel_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_UpdateExpLevel_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_UpdateExpLevel_SC)
    MergeFrom(*source);
  }
}

void MSG_UpdateExpLevel_SC::MergeFrom(const MSG_UpdateExpLevel_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_UpdateExpLevel_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      curexp_ = from.curexp_;
    }
    if (cached_has_bits & 0x00000002u) {
      curlevel_ = from.curlevel_;
    }
    if (cached_has_bits & 0x00000004u) {
      mainhero_thisid_ = from.mainhero_thisid_;
    }
    if (cached_has_bits & 0x00000008u) {
      mainhero_exp_ = from.mainhero_exp_;
    }
    if (cached_has_bits & 0x00000010u) {
      mainhero_lv_ = from.mainhero_lv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_UpdateExpLevel_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_UpdateExpLevel_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_UpdateExpLevel_SC::CopyFrom(const MSG_UpdateExpLevel_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_UpdateExpLevel_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UpdateExpLevel_SC::IsInitialized() const {
  return true;
}

void MSG_UpdateExpLevel_SC::InternalSwap(MSG_UpdateExpLevel_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(curexp_, other->curexp_);
  swap(curlevel_, other->curlevel_);
  swap(mainhero_thisid_, other->mainhero_thisid_);
  swap(mainhero_exp_, other->mainhero_exp_);
  swap(mainhero_lv_, other->mainhero_lv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UpdateExpLevel_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NotifyAntiAddict_SC::InitAsDefaultInstance() {
}
class MSG_NotifyAntiAddict_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NotifyAntiAddict_SC>()._has_bits_);
  static void set_has_onlinelasttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isantiaddcit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isloginpush(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_NotifyAntiAddict_SC::MSG_NotifyAntiAddict_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_NotifyAntiAddict_SC)
}
MSG_NotifyAntiAddict_SC::MSG_NotifyAntiAddict_SC(const MSG_NotifyAntiAddict_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&onlinelasttime_, &from.onlinelasttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&isloginpush_) -
    reinterpret_cast<char*>(&onlinelasttime_)) + sizeof(isloginpush_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_NotifyAntiAddict_SC)
}

void MSG_NotifyAntiAddict_SC::SharedCtor() {
  ::memset(&onlinelasttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isloginpush_) -
      reinterpret_cast<char*>(&onlinelasttime_)) + sizeof(isloginpush_));
}

MSG_NotifyAntiAddict_SC::~MSG_NotifyAntiAddict_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_NotifyAntiAddict_SC)
  SharedDtor();
}

void MSG_NotifyAntiAddict_SC::SharedDtor() {
}

void MSG_NotifyAntiAddict_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NotifyAntiAddict_SC& MSG_NotifyAntiAddict_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NotifyAntiAddict_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_NotifyAntiAddict_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_NotifyAntiAddict_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&onlinelasttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&isloginpush_) -
        reinterpret_cast<char*>(&onlinelasttime_)) + sizeof(isloginpush_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NotifyAntiAddict_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 onlinelasttime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_onlinelasttime(&has_bits);
          onlinelasttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isAntiAddcit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isantiaddcit(&has_bits);
          isantiaddcit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isLoginPush = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_isloginpush(&has_bits);
          isloginpush_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NotifyAntiAddict_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_NotifyAntiAddict_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 onlinelasttime = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_onlinelasttime(), target);
  }

  // optional bool isAntiAddcit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isantiaddcit(), target);
  }

  // optional bool isLoginPush = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isloginpush(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_NotifyAntiAddict_SC)
  return target;
}

size_t MSG_NotifyAntiAddict_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_NotifyAntiAddict_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 onlinelasttime = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_onlinelasttime());
    }

    // optional bool isAntiAddcit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool isLoginPush = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NotifyAntiAddict_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_NotifyAntiAddict_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NotifyAntiAddict_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NotifyAntiAddict_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_NotifyAntiAddict_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_NotifyAntiAddict_SC)
    MergeFrom(*source);
  }
}

void MSG_NotifyAntiAddict_SC::MergeFrom(const MSG_NotifyAntiAddict_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_NotifyAntiAddict_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      onlinelasttime_ = from.onlinelasttime_;
    }
    if (cached_has_bits & 0x00000002u) {
      isantiaddcit_ = from.isantiaddcit_;
    }
    if (cached_has_bits & 0x00000004u) {
      isloginpush_ = from.isloginpush_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_NotifyAntiAddict_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_NotifyAntiAddict_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NotifyAntiAddict_SC::CopyFrom(const MSG_NotifyAntiAddict_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_NotifyAntiAddict_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NotifyAntiAddict_SC::IsInitialized() const {
  return true;
}

void MSG_NotifyAntiAddict_SC::InternalSwap(MSG_NotifyAntiAddict_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(onlinelasttime_, other->onlinelasttime_);
  swap(isantiaddcit_, other->isantiaddcit_);
  swap(isloginpush_, other->isloginpush_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NotifyAntiAddict_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqUpdateAntiAddict_CS::InitAsDefaultInstance() {
}
class MSG_ReqUpdateAntiAddict_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqUpdateAntiAddict_CS>()._has_bits_);
};

MSG_ReqUpdateAntiAddict_CS::MSG_ReqUpdateAntiAddict_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_ReqUpdateAntiAddict_CS)
}
MSG_ReqUpdateAntiAddict_CS::MSG_ReqUpdateAntiAddict_CS(const MSG_ReqUpdateAntiAddict_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_ReqUpdateAntiAddict_CS)
}

void MSG_ReqUpdateAntiAddict_CS::SharedCtor() {
}

MSG_ReqUpdateAntiAddict_CS::~MSG_ReqUpdateAntiAddict_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_ReqUpdateAntiAddict_CS)
  SharedDtor();
}

void MSG_ReqUpdateAntiAddict_CS::SharedDtor() {
}

void MSG_ReqUpdateAntiAddict_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqUpdateAntiAddict_CS& MSG_ReqUpdateAntiAddict_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqUpdateAntiAddict_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqUpdateAntiAddict_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_ReqUpdateAntiAddict_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqUpdateAntiAddict_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqUpdateAntiAddict_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_ReqUpdateAntiAddict_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_ReqUpdateAntiAddict_CS)
  return target;
}

size_t MSG_ReqUpdateAntiAddict_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_ReqUpdateAntiAddict_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqUpdateAntiAddict_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_ReqUpdateAntiAddict_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqUpdateAntiAddict_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqUpdateAntiAddict_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_ReqUpdateAntiAddict_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_ReqUpdateAntiAddict_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqUpdateAntiAddict_CS::MergeFrom(const MSG_ReqUpdateAntiAddict_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_ReqUpdateAntiAddict_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqUpdateAntiAddict_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_ReqUpdateAntiAddict_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqUpdateAntiAddict_CS::CopyFrom(const MSG_ReqUpdateAntiAddict_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_ReqUpdateAntiAddict_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqUpdateAntiAddict_CS::IsInitialized() const {
  return true;
}

void MSG_ReqUpdateAntiAddict_CS::InternalSwap(MSG_ReqUpdateAntiAddict_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqUpdateAntiAddict_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqEntrySelectState_CS::InitAsDefaultInstance() {
  ::msg::_MSG_ReqEntrySelectState_CS_default_instance_._instance.get_mutable()->oldone_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
  ::msg::_MSG_ReqEntrySelectState_CS_default_instance_._instance.get_mutable()->newone_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_ReqEntrySelectState_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqEntrySelectState_CS>()._has_bits_);
  static const ::msg::EntryIDType& oldone(const MSG_ReqEntrySelectState_CS* msg);
  static void set_has_oldone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msg::EntryIDType& newone(const MSG_ReqEntrySelectState_CS* msg);
  static void set_has_newone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::msg::EntryIDType&
MSG_ReqEntrySelectState_CS::_Internal::oldone(const MSG_ReqEntrySelectState_CS* msg) {
  return *msg->oldone_;
}
const ::msg::EntryIDType&
MSG_ReqEntrySelectState_CS::_Internal::newone(const MSG_ReqEntrySelectState_CS* msg) {
  return *msg->newone_;
}
void MSG_ReqEntrySelectState_CS::clear_oldone() {
  if (oldone_ != nullptr) oldone_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MSG_ReqEntrySelectState_CS::clear_newone() {
  if (newone_ != nullptr) newone_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MSG_ReqEntrySelectState_CS::MSG_ReqEntrySelectState_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_ReqEntrySelectState_CS)
}
MSG_ReqEntrySelectState_CS::MSG_ReqEntrySelectState_CS(const MSG_ReqEntrySelectState_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_oldone()) {
    oldone_ = new ::msg::EntryIDType(*from.oldone_);
  } else {
    oldone_ = nullptr;
  }
  if (from._internal_has_newone()) {
    newone_ = new ::msg::EntryIDType(*from.newone_);
  } else {
    newone_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_ReqEntrySelectState_CS)
}

void MSG_ReqEntrySelectState_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqEntrySelectState_CS_message_2eproto.base);
  ::memset(&oldone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newone_) -
      reinterpret_cast<char*>(&oldone_)) + sizeof(newone_));
}

MSG_ReqEntrySelectState_CS::~MSG_ReqEntrySelectState_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_ReqEntrySelectState_CS)
  SharedDtor();
}

void MSG_ReqEntrySelectState_CS::SharedDtor() {
  if (this != internal_default_instance()) delete oldone_;
  if (this != internal_default_instance()) delete newone_;
}

void MSG_ReqEntrySelectState_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqEntrySelectState_CS& MSG_ReqEntrySelectState_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqEntrySelectState_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqEntrySelectState_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_ReqEntrySelectState_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(oldone_ != nullptr);
      oldone_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(newone_ != nullptr);
      newone_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqEntrySelectState_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType oldone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.EntryIDType newone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_newone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqEntrySelectState_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_ReqEntrySelectState_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType oldone = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::oldone(this), target, stream);
  }

  // optional .msg.EntryIDType newone = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::newone(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_ReqEntrySelectState_CS)
  return target;
}

size_t MSG_ReqEntrySelectState_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_ReqEntrySelectState_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .msg.EntryIDType oldone = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oldone_);
    }

    // optional .msg.EntryIDType newone = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *newone_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqEntrySelectState_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_ReqEntrySelectState_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqEntrySelectState_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqEntrySelectState_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_ReqEntrySelectState_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_ReqEntrySelectState_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqEntrySelectState_CS::MergeFrom(const MSG_ReqEntrySelectState_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_ReqEntrySelectState_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_oldone()->::msg::EntryIDType::MergeFrom(from._internal_oldone());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_newone()->::msg::EntryIDType::MergeFrom(from._internal_newone());
    }
  }
}

void MSG_ReqEntrySelectState_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_ReqEntrySelectState_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqEntrySelectState_CS::CopyFrom(const MSG_ReqEntrySelectState_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_ReqEntrySelectState_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqEntrySelectState_CS::IsInitialized() const {
  return true;
}

void MSG_ReqEntrySelectState_CS::InternalSwap(MSG_ReqEntrySelectState_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(oldone_, other->oldone_);
  swap(newone_, other->newone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqEntrySelectState_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetEntrySelectState_SC::InitAsDefaultInstance() {
  ::msg::_MSG_RetEntrySelectState_SC_default_instance_._instance.get_mutable()->choosen_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_RetEntrySelectState_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetEntrySelectState_SC>()._has_bits_);
  static const ::msg::EntryIDType& choosen(const MSG_RetEntrySelectState_SC* msg);
  static void set_has_choosen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::msg::EntryIDType&
MSG_RetEntrySelectState_SC::_Internal::choosen(const MSG_RetEntrySelectState_SC* msg) {
  return *msg->choosen_;
}
void MSG_RetEntrySelectState_SC::clear_choosen() {
  if (choosen_ != nullptr) choosen_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_RetEntrySelectState_SC::MSG_RetEntrySelectState_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_RetEntrySelectState_SC)
}
MSG_RetEntrySelectState_SC::MSG_RetEntrySelectState_SC(const MSG_RetEntrySelectState_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      states_(from.states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_choosen()) {
    choosen_ = new ::msg::EntryIDType(*from.choosen_);
  } else {
    choosen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_RetEntrySelectState_SC)
}

void MSG_RetEntrySelectState_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetEntrySelectState_SC_message_2eproto.base);
  choosen_ = nullptr;
}

MSG_RetEntrySelectState_SC::~MSG_RetEntrySelectState_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_RetEntrySelectState_SC)
  SharedDtor();
}

void MSG_RetEntrySelectState_SC::SharedDtor() {
  if (this != internal_default_instance()) delete choosen_;
}

void MSG_RetEntrySelectState_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetEntrySelectState_SC& MSG_RetEntrySelectState_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetEntrySelectState_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetEntrySelectState_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_RetEntrySelectState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(choosen_ != nullptr);
    choosen_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetEntrySelectState_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType choosen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_choosen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.StateItem states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetEntrySelectState_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_RetEntrySelectState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType choosen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::choosen(this), target, stream);
  }

  // repeated .msg.StateItem states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_RetEntrySelectState_SC)
  return target;
}

size_t MSG_RetEntrySelectState_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_RetEntrySelectState_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.StateItem states = 2;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .msg.EntryIDType choosen = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *choosen_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetEntrySelectState_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_RetEntrySelectState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetEntrySelectState_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetEntrySelectState_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_RetEntrySelectState_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_RetEntrySelectState_SC)
    MergeFrom(*source);
  }
}

void MSG_RetEntrySelectState_SC::MergeFrom(const MSG_RetEntrySelectState_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_RetEntrySelectState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from._internal_has_choosen()) {
    _internal_mutable_choosen()->::msg::EntryIDType::MergeFrom(from._internal_choosen());
  }
}

void MSG_RetEntrySelectState_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_RetEntrySelectState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetEntrySelectState_SC::CopyFrom(const MSG_RetEntrySelectState_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_RetEntrySelectState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetEntrySelectState_SC::IsInitialized() const {
  return true;
}

void MSG_RetEntrySelectState_SC::InternalSwap(MSG_RetEntrySelectState_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  states_.InternalSwap(&other->states_);
  swap(choosen_, other->choosen_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetEntrySelectState_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetHpMpToSelects_SC::InitAsDefaultInstance() {
  ::msg::_MSG_RetHpMpToSelects_SC_default_instance_._instance.get_mutable()->choosen_ = const_cast< ::msg::EntryIDType*>(
      ::msg::EntryIDType::internal_default_instance());
}
class MSG_RetHpMpToSelects_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetHpMpToSelects_SC>()._has_bits_);
  static const ::msg::EntryIDType& choosen(const MSG_RetHpMpToSelects_SC* msg);
  static void set_has_choosen(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_curhp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curmp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_maxmp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::msg::EntryIDType&
MSG_RetHpMpToSelects_SC::_Internal::choosen(const MSG_RetHpMpToSelects_SC* msg) {
  return *msg->choosen_;
}
void MSG_RetHpMpToSelects_SC::clear_choosen() {
  if (choosen_ != nullptr) choosen_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MSG_RetHpMpToSelects_SC::MSG_RetHpMpToSelects_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_RetHpMpToSelects_SC)
}
MSG_RetHpMpToSelects_SC::MSG_RetHpMpToSelects_SC(const MSG_RetHpMpToSelects_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_choosen()) {
    choosen_ = new ::msg::EntryIDType(*from.choosen_);
  } else {
    choosen_ = nullptr;
  }
  ::memcpy(&curhp_, &from.curhp_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxmp_) -
    reinterpret_cast<char*>(&curhp_)) + sizeof(maxmp_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_RetHpMpToSelects_SC)
}

void MSG_RetHpMpToSelects_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetHpMpToSelects_SC_message_2eproto.base);
  ::memset(&choosen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxmp_) -
      reinterpret_cast<char*>(&choosen_)) + sizeof(maxmp_));
}

MSG_RetHpMpToSelects_SC::~MSG_RetHpMpToSelects_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_RetHpMpToSelects_SC)
  SharedDtor();
}

void MSG_RetHpMpToSelects_SC::SharedDtor() {
  if (this != internal_default_instance()) delete choosen_;
}

void MSG_RetHpMpToSelects_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetHpMpToSelects_SC& MSG_RetHpMpToSelects_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetHpMpToSelects_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetHpMpToSelects_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_RetHpMpToSelects_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(choosen_ != nullptr);
    choosen_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&curhp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&maxmp_) -
        reinterpret_cast<char*>(&curhp_)) + sizeof(maxmp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetHpMpToSelects_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.EntryIDType choosen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_choosen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 curhp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_curhp(&has_bits);
          curhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 curmp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_curmp(&has_bits);
          curmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxmp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_maxmp(&has_bits);
          maxmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetHpMpToSelects_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_RetHpMpToSelects_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.EntryIDType choosen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::choosen(this), target, stream);
  }

  // optional uint32 curhp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_curhp(), target);
  }

  // optional uint32 maxhp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxhp(), target);
  }

  // optional uint32 curmp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_curmp(), target);
  }

  // optional uint32 maxmp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxmp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_RetHpMpToSelects_SC)
  return target;
}

size_t MSG_RetHpMpToSelects_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_RetHpMpToSelects_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .msg.EntryIDType choosen = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *choosen_);
    }

    // optional uint32 curhp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curhp());
    }

    // optional uint32 maxhp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhp());
    }

    // optional uint32 curmp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curmp());
    }

    // optional uint32 maxmp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxmp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetHpMpToSelects_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_RetHpMpToSelects_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetHpMpToSelects_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetHpMpToSelects_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_RetHpMpToSelects_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_RetHpMpToSelects_SC)
    MergeFrom(*source);
  }
}

void MSG_RetHpMpToSelects_SC::MergeFrom(const MSG_RetHpMpToSelects_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_RetHpMpToSelects_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_choosen()->::msg::EntryIDType::MergeFrom(from._internal_choosen());
    }
    if (cached_has_bits & 0x00000002u) {
      curhp_ = from.curhp_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000008u) {
      curmp_ = from.curmp_;
    }
    if (cached_has_bits & 0x00000010u) {
      maxmp_ = from.maxmp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetHpMpToSelects_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_RetHpMpToSelects_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetHpMpToSelects_SC::CopyFrom(const MSG_RetHpMpToSelects_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_RetHpMpToSelects_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetHpMpToSelects_SC::IsInitialized() const {
  return true;
}

void MSG_RetHpMpToSelects_SC::InternalSwap(MSG_RetHpMpToSelects_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(choosen_, other->choosen_);
  swap(curhp_, other->curhp_);
  swap(maxhp_, other->maxhp_);
  swap(curmp_, other->curmp_);
  swap(maxmp_, other->maxmp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetHpMpToSelects_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqHeroAttributeData_CS::InitAsDefaultInstance() {
}
class MSG_ReqHeroAttributeData_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqHeroAttributeData_CS>()._has_bits_);
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqHeroAttributeData_CS::MSG_ReqHeroAttributeData_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_ReqHeroAttributeData_CS)
}
MSG_ReqHeroAttributeData_CS::MSG_ReqHeroAttributeData_CS(const MSG_ReqHeroAttributeData_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herothisid()) {
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_ReqHeroAttributeData_CS)
}

void MSG_ReqHeroAttributeData_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ReqHeroAttributeData_CS_message_2eproto.base);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_ReqHeroAttributeData_CS::~MSG_ReqHeroAttributeData_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_ReqHeroAttributeData_CS)
  SharedDtor();
}

void MSG_ReqHeroAttributeData_CS::SharedDtor() {
  herothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ReqHeroAttributeData_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqHeroAttributeData_CS& MSG_ReqHeroAttributeData_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqHeroAttributeData_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqHeroAttributeData_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_ReqHeroAttributeData_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    herothisid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqHeroAttributeData_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string herothisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_herothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_ReqHeroAttributeData_CS.herothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqHeroAttributeData_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_ReqHeroAttributeData_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string herothisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herothisid().data(), static_cast<int>(this->_internal_herothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_ReqHeroAttributeData_CS.herothisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_herothisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_ReqHeroAttributeData_CS)
  return target;
}

size_t MSG_ReqHeroAttributeData_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_ReqHeroAttributeData_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string herothisid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_herothisid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqHeroAttributeData_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_ReqHeroAttributeData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqHeroAttributeData_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqHeroAttributeData_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_ReqHeroAttributeData_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_ReqHeroAttributeData_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqHeroAttributeData_CS::MergeFrom(const MSG_ReqHeroAttributeData_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_ReqHeroAttributeData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_herothisid()) {
    _has_bits_[0] |= 0x00000001u;
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
}

void MSG_ReqHeroAttributeData_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_ReqHeroAttributeData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqHeroAttributeData_CS::CopyFrom(const MSG_ReqHeroAttributeData_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_ReqHeroAttributeData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqHeroAttributeData_CS::IsInitialized() const {
  return true;
}

void MSG_ReqHeroAttributeData_CS::InternalSwap(MSG_ReqHeroAttributeData_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herothisid_.Swap(&other->herothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqHeroAttributeData_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetHeroAttributeData_SC::InitAsDefaultInstance() {
  ::msg::_MSG_RetHeroAttributeData_SC_default_instance_._instance.get_mutable()->data_ = const_cast< ::msg::AttributeData*>(
      ::msg::AttributeData::internal_default_instance());
}
class MSG_RetHeroAttributeData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetHeroAttributeData_SC>()._has_bits_);
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::msg::AttributeData& data(const MSG_RetHeroAttributeData_SC* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fightvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::msg::AttributeData&
MSG_RetHeroAttributeData_SC::_Internal::data(const MSG_RetHeroAttributeData_SC* msg) {
  return *msg->data_;
}
MSG_RetHeroAttributeData_SC::MSG_RetHeroAttributeData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_RetHeroAttributeData_SC)
}
MSG_RetHeroAttributeData_SC::MSG_RetHeroAttributeData_SC(const MSG_RetHeroAttributeData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herothisid()) {
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
  if (from._internal_has_data()) {
    data_ = new ::msg::AttributeData(*from.data_);
  } else {
    data_ = nullptr;
  }
  fightvalue_ = from.fightvalue_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_RetHeroAttributeData_SC)
}

void MSG_RetHeroAttributeData_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetHeroAttributeData_SC_message_2eproto.base);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fightvalue_) -
      reinterpret_cast<char*>(&data_)) + sizeof(fightvalue_));
}

MSG_RetHeroAttributeData_SC::~MSG_RetHeroAttributeData_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_RetHeroAttributeData_SC)
  SharedDtor();
}

void MSG_RetHeroAttributeData_SC::SharedDtor() {
  herothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void MSG_RetHeroAttributeData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetHeroAttributeData_SC& MSG_RetHeroAttributeData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetHeroAttributeData_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetHeroAttributeData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_RetHeroAttributeData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      herothisid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  fightvalue_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetHeroAttributeData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string herothisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_herothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_RetHeroAttributeData_SC.herothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.AttributeData data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fightvalue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fightvalue(&has_bits);
          fightvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetHeroAttributeData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_RetHeroAttributeData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string herothisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herothisid().data(), static_cast<int>(this->_internal_herothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_RetHeroAttributeData_SC.herothisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_herothisid(), target);
  }

  // optional .msg.AttributeData data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  // optional uint32 fightvalue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fightvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_RetHeroAttributeData_SC)
  return target;
}

size_t MSG_RetHeroAttributeData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_RetHeroAttributeData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string herothisid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_herothisid());
    }

    // optional .msg.AttributeData data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional uint32 fightvalue = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fightvalue());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetHeroAttributeData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_RetHeroAttributeData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetHeroAttributeData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetHeroAttributeData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_RetHeroAttributeData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_RetHeroAttributeData_SC)
    MergeFrom(*source);
  }
}

void MSG_RetHeroAttributeData_SC::MergeFrom(const MSG_RetHeroAttributeData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_RetHeroAttributeData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_data()->::msg::AttributeData::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      fightvalue_ = from.fightvalue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetHeroAttributeData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_RetHeroAttributeData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetHeroAttributeData_SC::CopyFrom(const MSG_RetHeroAttributeData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_RetHeroAttributeData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetHeroAttributeData_SC::IsInitialized() const {
  return true;
}

void MSG_RetHeroAttributeData_SC::InternalSwap(MSG_RetHeroAttributeData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herothisid_.Swap(&other->herothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(fightvalue_, other->fightvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetHeroAttributeData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetDiffLineOfLeader_SC::InitAsDefaultInstance() {
}
class MSG_RetDiffLineOfLeader_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetDiffLineOfLeader_SC>()._has_bits_);
};

MSG_RetDiffLineOfLeader_SC::MSG_RetDiffLineOfLeader_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_RetDiffLineOfLeader_SC)
}
MSG_RetDiffLineOfLeader_SC::MSG_RetDiffLineOfLeader_SC(const MSG_RetDiffLineOfLeader_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_RetDiffLineOfLeader_SC)
}

void MSG_RetDiffLineOfLeader_SC::SharedCtor() {
}

MSG_RetDiffLineOfLeader_SC::~MSG_RetDiffLineOfLeader_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_RetDiffLineOfLeader_SC)
  SharedDtor();
}

void MSG_RetDiffLineOfLeader_SC::SharedDtor() {
}

void MSG_RetDiffLineOfLeader_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetDiffLineOfLeader_SC& MSG_RetDiffLineOfLeader_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetDiffLineOfLeader_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetDiffLineOfLeader_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_RetDiffLineOfLeader_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetDiffLineOfLeader_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetDiffLineOfLeader_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_RetDiffLineOfLeader_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_RetDiffLineOfLeader_SC)
  return target;
}

size_t MSG_RetDiffLineOfLeader_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_RetDiffLineOfLeader_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetDiffLineOfLeader_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_RetDiffLineOfLeader_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetDiffLineOfLeader_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetDiffLineOfLeader_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_RetDiffLineOfLeader_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_RetDiffLineOfLeader_SC)
    MergeFrom(*source);
  }
}

void MSG_RetDiffLineOfLeader_SC::MergeFrom(const MSG_RetDiffLineOfLeader_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_RetDiffLineOfLeader_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_RetDiffLineOfLeader_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_RetDiffLineOfLeader_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetDiffLineOfLeader_SC::CopyFrom(const MSG_RetDiffLineOfLeader_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_RetDiffLineOfLeader_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetDiffLineOfLeader_SC::IsInitialized() const {
  return true;
}

void MSG_RetDiffLineOfLeader_SC::InternalSwap(MSG_RetDiffLineOfLeader_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetDiffLineOfLeader_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqJumptoLeaderLine_CS::InitAsDefaultInstance() {
}
class MSG_ReqJumptoLeaderLine_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqJumptoLeaderLine_CS>()._has_bits_);
};

MSG_ReqJumptoLeaderLine_CS::MSG_ReqJumptoLeaderLine_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_ReqJumptoLeaderLine_CS)
}
MSG_ReqJumptoLeaderLine_CS::MSG_ReqJumptoLeaderLine_CS(const MSG_ReqJumptoLeaderLine_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_ReqJumptoLeaderLine_CS)
}

void MSG_ReqJumptoLeaderLine_CS::SharedCtor() {
}

MSG_ReqJumptoLeaderLine_CS::~MSG_ReqJumptoLeaderLine_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_ReqJumptoLeaderLine_CS)
  SharedDtor();
}

void MSG_ReqJumptoLeaderLine_CS::SharedDtor() {
}

void MSG_ReqJumptoLeaderLine_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqJumptoLeaderLine_CS& MSG_ReqJumptoLeaderLine_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqJumptoLeaderLine_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqJumptoLeaderLine_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_ReqJumptoLeaderLine_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqJumptoLeaderLine_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqJumptoLeaderLine_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_ReqJumptoLeaderLine_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_ReqJumptoLeaderLine_CS)
  return target;
}

size_t MSG_ReqJumptoLeaderLine_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_ReqJumptoLeaderLine_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqJumptoLeaderLine_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_ReqJumptoLeaderLine_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqJumptoLeaderLine_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqJumptoLeaderLine_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_ReqJumptoLeaderLine_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_ReqJumptoLeaderLine_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqJumptoLeaderLine_CS::MergeFrom(const MSG_ReqJumptoLeaderLine_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_ReqJumptoLeaderLine_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqJumptoLeaderLine_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_ReqJumptoLeaderLine_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqJumptoLeaderLine_CS::CopyFrom(const MSG_ReqJumptoLeaderLine_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_ReqJumptoLeaderLine_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqJumptoLeaderLine_CS::IsInitialized() const {
  return true;
}

void MSG_ReqJumptoLeaderLine_CS::InternalSwap(MSG_ReqJumptoLeaderLine_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqJumptoLeaderLine_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SelectUserInfo::InitAsDefaultInstance() {
}
class SelectUserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectUserInfo>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_curheroid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deltime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_offlinetime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_facestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hairstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_haircolor(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bodystyle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_onlinelasttime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_addictpreuptime(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mapname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avatarid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

SelectUserInfo::SelectUserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.SelectUserInfo)
}
SelectUserInfo::SelectUserInfo(const SelectUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mapname()) {
    mapname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sex_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(sex_));
  // @@protoc_insertion_point(copy_constructor:msg.SelectUserInfo)
}

void SelectUserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SelectUserInfo_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mapname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatarid_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(avatarid_));
  sex_ = 1;
}

SelectUserInfo::~SelectUserInfo() {
  // @@protoc_insertion_point(destructor:msg.SelectUserInfo)
  SharedDtor();
}

void SelectUserInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mapname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SelectUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SelectUserInfo& SelectUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SelectUserInfo_message_2eproto.base);
  return *internal_default_instance();
}


void SelectUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.SelectUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mapname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offlinetime_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(offlinetime_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&facestyle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avatarid_) -
        reinterpret_cast<char*>(&facestyle_)) + sizeof(avatarid_));
  }
  sex_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SelectUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.SelectUserInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .msg.SEX sex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::SEX_IsValid(val))) {
            _internal_set_sex(static_cast<::msg::SEX>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 curheroid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_curheroid(&has_bits);
          curheroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_deltime(&has_bits);
          deltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 offlinetime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_offlinetime(&has_bits);
          offlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 facestyle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_facestyle(&has_bits);
          facestyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hairstyle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_hairstyle(&has_bits);
          hairstyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 haircolor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_haircolor(&has_bits);
          haircolor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bodystyle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_bodystyle(&has_bits);
          bodystyle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 antenna = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_antenna(&has_bits);
          antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 onlinelasttime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_onlinelasttime(&has_bits);
          onlinelasttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 addictpreuptime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_addictpreuptime(&has_bits);
          addictpreuptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mapname = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_mapname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.SelectUserInfo.mapname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avatarid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_avatarid(&has_bits);
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SelectUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.SelectUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.SelectUserInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // required .msg.SEX sex = 4;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sex(), target);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heroid(), target);
  }

  // optional uint32 curheroid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_curheroid(), target);
  }

  // optional uint32 delTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_deltime(), target);
  }

  // optional uint32 offlinetime = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_offlinetime(), target);
  }

  // optional uint32 facestyle = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_facestyle(), target);
  }

  // optional uint32 hairstyle = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_hairstyle(), target);
  }

  // optional uint32 haircolor = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_haircolor(), target);
  }

  // optional uint32 bodystyle = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_bodystyle(), target);
  }

  // optional uint32 antenna = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_antenna(), target);
  }

  // optional uint32 onlinelasttime = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_onlinelasttime(), target);
  }

  // optional uint32 addictpreuptime = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_addictpreuptime(), target);
  }

  // optional string mapname = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mapname().data(), static_cast<int>(this->_internal_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.SelectUserInfo.mapname");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_mapname(), target);
  }

  // optional uint32 avatarid = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_avatarid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.SelectUserInfo)
  return target;
}

size_t SelectUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.SelectUserInfo)
  size_t total_size = 0;

  // required .msg.SEX sex = 4;
  if (_internal_has_sex()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sex());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string mapname = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mapname());
    }

    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 heroid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 curheroid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curheroid());
    }

    // optional uint32 delTime = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deltime());
    }

    // optional uint32 offlinetime = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_offlinetime());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 facestyle = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_facestyle());
    }

    // optional uint32 hairstyle = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hairstyle());
    }

    // optional uint32 haircolor = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_haircolor());
    }

    // optional uint32 bodystyle = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bodystyle());
    }

    // optional uint32 antenna = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_antenna());
    }

    // optional uint32 onlinelasttime = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_onlinelasttime());
    }

    // optional uint32 addictpreuptime = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_addictpreuptime());
    }

    // optional uint32 avatarid = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avatarid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.SelectUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SelectUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.SelectUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.SelectUserInfo)
    MergeFrom(*source);
  }
}

void SelectUserInfo::MergeFrom(const SelectUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.SelectUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      mapname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mapname_);
    }
    if (cached_has_bits & 0x00000004u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000020u) {
      curheroid_ = from.curheroid_;
    }
    if (cached_has_bits & 0x00000040u) {
      deltime_ = from.deltime_;
    }
    if (cached_has_bits & 0x00000080u) {
      offlinetime_ = from.offlinetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      facestyle_ = from.facestyle_;
    }
    if (cached_has_bits & 0x00000200u) {
      hairstyle_ = from.hairstyle_;
    }
    if (cached_has_bits & 0x00000400u) {
      haircolor_ = from.haircolor_;
    }
    if (cached_has_bits & 0x00000800u) {
      bodystyle_ = from.bodystyle_;
    }
    if (cached_has_bits & 0x00001000u) {
      antenna_ = from.antenna_;
    }
    if (cached_has_bits & 0x00002000u) {
      onlinelasttime_ = from.onlinelasttime_;
    }
    if (cached_has_bits & 0x00004000u) {
      addictpreuptime_ = from.addictpreuptime_;
    }
    if (cached_has_bits & 0x00008000u) {
      avatarid_ = from.avatarid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_sex(from._internal_sex());
  }
}

void SelectUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.SelectUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectUserInfo::CopyFrom(const SelectUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.SelectUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00010000) != 0x00010000) return false;
  return true;
}

void SelectUserInfo::InternalSwap(SelectUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mapname_.Swap(&other->mapname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(level_, other->level_);
  swap(heroid_, other->heroid_);
  swap(curheroid_, other->curheroid_);
  swap(deltime_, other->deltime_);
  swap(offlinetime_, other->offlinetime_);
  swap(facestyle_, other->facestyle_);
  swap(hairstyle_, other->hairstyle_);
  swap(haircolor_, other->haircolor_);
  swap(bodystyle_, other->bodystyle_);
  swap(antenna_, other->antenna_);
  swap(onlinelasttime_, other->onlinelasttime_);
  swap(addictpreuptime_, other->addictpreuptime_);
  swap(avatarid_, other->avatarid_);
  swap(sex_, other->sex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectUserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_LoginOnReturnCharList_SC::InitAsDefaultInstance() {
}
class MSG_Ret_LoginOnReturnCharList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_LoginOnReturnCharList_SC>()._has_bits_);
};

MSG_Ret_LoginOnReturnCharList_SC::MSG_Ret_LoginOnReturnCharList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_LoginOnReturnCharList_SC)
}
MSG_Ret_LoginOnReturnCharList_SC::MSG_Ret_LoginOnReturnCharList_SC(const MSG_Ret_LoginOnReturnCharList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      charlist_(from.charlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_LoginOnReturnCharList_SC)
}

void MSG_Ret_LoginOnReturnCharList_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_LoginOnReturnCharList_SC_message_2eproto.base);
}

MSG_Ret_LoginOnReturnCharList_SC::~MSG_Ret_LoginOnReturnCharList_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_LoginOnReturnCharList_SC)
  SharedDtor();
}

void MSG_Ret_LoginOnReturnCharList_SC::SharedDtor() {
}

void MSG_Ret_LoginOnReturnCharList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_LoginOnReturnCharList_SC& MSG_Ret_LoginOnReturnCharList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_LoginOnReturnCharList_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_LoginOnReturnCharList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_LoginOnReturnCharList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charlist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_LoginOnReturnCharList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.SelectUserInfo charList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_charlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_LoginOnReturnCharList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_LoginOnReturnCharList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.SelectUserInfo charList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_charlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_charlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_LoginOnReturnCharList_SC)
  return target;
}

size_t MSG_Ret_LoginOnReturnCharList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_LoginOnReturnCharList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.SelectUserInfo charList = 1;
  total_size += 1UL * this->_internal_charlist_size();
  for (const auto& msg : this->charlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_LoginOnReturnCharList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_LoginOnReturnCharList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_LoginOnReturnCharList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_LoginOnReturnCharList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_LoginOnReturnCharList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_LoginOnReturnCharList_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_LoginOnReturnCharList_SC::MergeFrom(const MSG_Ret_LoginOnReturnCharList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_LoginOnReturnCharList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  charlist_.MergeFrom(from.charlist_);
}

void MSG_Ret_LoginOnReturnCharList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_LoginOnReturnCharList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_LoginOnReturnCharList_SC::CopyFrom(const MSG_Ret_LoginOnReturnCharList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_LoginOnReturnCharList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_LoginOnReturnCharList_SC::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(charlist_)) return false;
  return true;
}

void MSG_Ret_LoginOnReturnCharList_SC::InternalSwap(MSG_Ret_LoginOnReturnCharList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  charlist_.InternalSwap(&other->charlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_LoginOnReturnCharList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_SelectCharToLogin_CS::InitAsDefaultInstance() {
}
class MSG_Req_SelectCharToLogin_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_SelectCharToLogin_CS>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_SelectCharToLogin_CS::MSG_Req_SelectCharToLogin_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_SelectCharToLogin_CS)
}
MSG_Req_SelectCharToLogin_CS::MSG_Req_SelectCharToLogin_CS(const MSG_Req_SelectCharToLogin_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charid_ = from.charid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_SelectCharToLogin_CS)
}

void MSG_Req_SelectCharToLogin_CS::SharedCtor() {
  charid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Req_SelectCharToLogin_CS::~MSG_Req_SelectCharToLogin_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_SelectCharToLogin_CS)
  SharedDtor();
}

void MSG_Req_SelectCharToLogin_CS::SharedDtor() {
}

void MSG_Req_SelectCharToLogin_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_SelectCharToLogin_CS& MSG_Req_SelectCharToLogin_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_SelectCharToLogin_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_SelectCharToLogin_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_SelectCharToLogin_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_SelectCharToLogin_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_SelectCharToLogin_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_SelectCharToLogin_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_SelectCharToLogin_CS)
  return target;
}

size_t MSG_Req_SelectCharToLogin_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_SelectCharToLogin_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 charid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_charid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_SelectCharToLogin_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_SelectCharToLogin_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_SelectCharToLogin_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_SelectCharToLogin_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_SelectCharToLogin_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_SelectCharToLogin_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_SelectCharToLogin_CS::MergeFrom(const MSG_Req_SelectCharToLogin_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_SelectCharToLogin_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charid()) {
    _internal_set_charid(from._internal_charid());
  }
}

void MSG_Req_SelectCharToLogin_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_SelectCharToLogin_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_SelectCharToLogin_CS::CopyFrom(const MSG_Req_SelectCharToLogin_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_SelectCharToLogin_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_SelectCharToLogin_CS::IsInitialized() const {
  return true;
}

void MSG_Req_SelectCharToLogin_CS::InternalSwap(MSG_Req_SelectCharToLogin_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(charid_, other->charid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_SelectCharToLogin_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_IS_NICKNAME_REPEATED_CSC::InitAsDefaultInstance() {
}
class MSG_Req_IS_NICKNAME_REPEATED_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_IS_NICKNAME_REPEATED_CSC>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_IS_NICKNAME_REPEATED_CSC::MSG_Req_IS_NICKNAME_REPEATED_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
}
MSG_Req_IS_NICKNAME_REPEATED_CSC::MSG_Req_IS_NICKNAME_REPEATED_CSC(const MSG_Req_IS_NICKNAME_REPEATED_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
}

void MSG_Req_IS_NICKNAME_REPEATED_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_IS_NICKNAME_REPEATED_CSC_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ret_ = 0u;
}

MSG_Req_IS_NICKNAME_REPEATED_CSC::~MSG_Req_IS_NICKNAME_REPEATED_CSC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
  SharedDtor();
}

void MSG_Req_IS_NICKNAME_REPEATED_CSC::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_IS_NICKNAME_REPEATED_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_IS_NICKNAME_REPEATED_CSC& MSG_Req_IS_NICKNAME_REPEATED_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_IS_NICKNAME_REPEATED_CSC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_IS_NICKNAME_REPEATED_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  ret_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_IS_NICKNAME_REPEATED_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_Req_IS_NICKNAME_REPEATED_CSC.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_IS_NICKNAME_REPEATED_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_Req_IS_NICKNAME_REPEATED_CSC.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
  return target;
}

size_t MSG_Req_IS_NICKNAME_REPEATED_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 ret = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ret());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_IS_NICKNAME_REPEATED_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_IS_NICKNAME_REPEATED_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_IS_NICKNAME_REPEATED_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
    MergeFrom(*source);
  }
}

void MSG_Req_IS_NICKNAME_REPEATED_CSC::MergeFrom(const MSG_Req_IS_NICKNAME_REPEATED_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_IS_NICKNAME_REPEATED_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_IS_NICKNAME_REPEATED_CSC::CopyFrom(const MSG_Req_IS_NICKNAME_REPEATED_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_IS_NICKNAME_REPEATED_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_IS_NICKNAME_REPEATED_CSC::IsInitialized() const {
  return true;
}

void MSG_Req_IS_NICKNAME_REPEATED_CSC::InternalSwap(MSG_Req_IS_NICKNAME_REPEATED_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_IS_NICKNAME_REPEATED_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Back_to_Select_CS::InitAsDefaultInstance() {
}
class MSG_Req_Back_to_Select_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Back_to_Select_CS>()._has_bits_);
};

MSG_Req_Back_to_Select_CS::MSG_Req_Back_to_Select_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_Back_to_Select_CS)
}
MSG_Req_Back_to_Select_CS::MSG_Req_Back_to_Select_CS(const MSG_Req_Back_to_Select_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_Back_to_Select_CS)
}

void MSG_Req_Back_to_Select_CS::SharedCtor() {
}

MSG_Req_Back_to_Select_CS::~MSG_Req_Back_to_Select_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_Back_to_Select_CS)
  SharedDtor();
}

void MSG_Req_Back_to_Select_CS::SharedDtor() {
}

void MSG_Req_Back_to_Select_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Back_to_Select_CS& MSG_Req_Back_to_Select_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Back_to_Select_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Back_to_Select_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_Back_to_Select_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Back_to_Select_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Back_to_Select_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_Back_to_Select_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_Back_to_Select_CS)
  return target;
}

size_t MSG_Req_Back_to_Select_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_Back_to_Select_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Back_to_Select_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_Back_to_Select_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Back_to_Select_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Back_to_Select_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_Back_to_Select_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_Back_to_Select_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_Back_to_Select_CS::MergeFrom(const MSG_Req_Back_to_Select_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_Back_to_Select_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_Back_to_Select_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_Back_to_Select_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Back_to_Select_CS::CopyFrom(const MSG_Req_Back_to_Select_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_Back_to_Select_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Back_to_Select_CS::IsInitialized() const {
  return true;
}

void MSG_Req_Back_to_Select_CS::InternalSwap(MSG_Req_Back_to_Select_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Back_to_Select_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Delete_Char_CSC::InitAsDefaultInstance() {
}
class MSG_Req_Delete_Char_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Delete_Char_CSC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Req_Delete_Char_CSC::MSG_Req_Delete_Char_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_Delete_Char_CSC)
}
MSG_Req_Delete_Char_CSC::MSG_Req_Delete_Char_CSC(const MSG_Req_Delete_Char_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_Delete_Char_CSC)
}

void MSG_Req_Delete_Char_CSC::SharedCtor() {
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(retcode_));
}

MSG_Req_Delete_Char_CSC::~MSG_Req_Delete_Char_CSC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_Delete_Char_CSC)
  SharedDtor();
}

void MSG_Req_Delete_Char_CSC::SharedDtor() {
}

void MSG_Req_Delete_Char_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Delete_Char_CSC& MSG_Req_Delete_Char_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Delete_Char_CSC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Delete_Char_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_Delete_Char_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&retcode_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(retcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Delete_Char_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 opcode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_opcode(&has_bits);
          opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 retcode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Delete_Char_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_Delete_Char_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional uint32 opcode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_opcode(), target);
  }

  // optional uint32 retcode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_Delete_Char_CSC)
  return target;
}

size_t MSG_Req_Delete_Char_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_Delete_Char_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 opcode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_opcode());
    }

    // optional uint32 retcode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Delete_Char_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_Delete_Char_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Delete_Char_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Delete_Char_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_Delete_Char_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_Delete_Char_CSC)
    MergeFrom(*source);
  }
}

void MSG_Req_Delete_Char_CSC::MergeFrom(const MSG_Req_Delete_Char_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_Delete_Char_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000002u) {
      opcode_ = from.opcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      retcode_ = from.retcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_Delete_Char_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_Delete_Char_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Delete_Char_CSC::CopyFrom(const MSG_Req_Delete_Char_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_Delete_Char_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Delete_Char_CSC::IsInitialized() const {
  return true;
}

void MSG_Req_Delete_Char_CSC::InternalSwap(MSG_Req_Delete_Char_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(charid_, other->charid_);
  swap(opcode_, other->opcode_);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Delete_Char_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_Syn_MoveState_CS::InitAsDefaultInstance() {
}
class MSG_Req_Syn_MoveState_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_Syn_MoveState_CS>()._has_bits_);
  static void set_has_move_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_movespeed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_srcx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_srcy(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

MSG_Req_Syn_MoveState_CS::MSG_Req_Syn_MoveState_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Req_Syn_MoveState_CS)
}
MSG_Req_Syn_MoveState_CS::MSG_Req_Syn_MoveState_CS(const MSG_Req_Syn_MoveState_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pos_(from.pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&move_state_, &from.move_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&srcy_) -
    reinterpret_cast<char*>(&move_state_)) + sizeof(srcy_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Req_Syn_MoveState_CS)
}

void MSG_Req_Syn_MoveState_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_Syn_MoveState_CS_message_2eproto.base);
  ::memset(&move_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&srcy_) -
      reinterpret_cast<char*>(&move_state_)) + sizeof(srcy_));
}

MSG_Req_Syn_MoveState_CS::~MSG_Req_Syn_MoveState_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Req_Syn_MoveState_CS)
  SharedDtor();
}

void MSG_Req_Syn_MoveState_CS::SharedDtor() {
}

void MSG_Req_Syn_MoveState_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_Syn_MoveState_CS& MSG_Req_Syn_MoveState_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_Syn_MoveState_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_Syn_MoveState_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Req_Syn_MoveState_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&move_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&srcy_) -
        reinterpret_cast<char*>(&move_state_)) + sizeof(srcy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_Syn_MoveState_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 move_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_move_state(&has_bits);
          move_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dir(&has_bits);
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 destx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_destx(&has_bits);
          destx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 desty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_desty(&has_bits);
          desty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 movespeed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_movespeed(&has_bits);
          movespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 step = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_step(&has_bits);
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 srcx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_srcx(&has_bits);
          srcx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 srcy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_srcy(&has_bits);
          srcy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .msg.FloatMovePos pos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_Syn_MoveState_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Req_Syn_MoveState_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 move_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_move_state(), target);
  }

  // optional uint32 dir = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dir(), target);
  }

  // optional uint32 destx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_destx(), target);
  }

  // optional uint32 desty = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_desty(), target);
  }

  // optional uint32 movespeed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_movespeed(), target);
  }

  // optional uint32 step = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_step(), target);
  }

  // optional uint32 srcx = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_srcx(), target);
  }

  // optional uint32 srcy = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_srcy(), target);
  }

  // repeated .msg.FloatMovePos pos = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_pos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Req_Syn_MoveState_CS)
  return target;
}

size_t MSG_Req_Syn_MoveState_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Req_Syn_MoveState_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.FloatMovePos pos = 9;
  total_size += 1UL * this->_internal_pos_size();
  for (const auto& msg : this->pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 move_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_move_state());
    }

    // optional uint32 dir = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dir());
    }

    // optional uint32 destx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_destx());
    }

    // optional uint32 desty = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_desty());
    }

    // optional uint32 movespeed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_movespeed());
    }

    // optional uint32 step = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_step());
    }

    // optional uint32 srcx = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_srcx());
    }

    // optional uint32 srcy = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_srcy());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_Syn_MoveState_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Req_Syn_MoveState_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_Syn_MoveState_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_Syn_MoveState_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Req_Syn_MoveState_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Req_Syn_MoveState_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_Syn_MoveState_CS::MergeFrom(const MSG_Req_Syn_MoveState_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Req_Syn_MoveState_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pos_.MergeFrom(from.pos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      move_state_ = from.move_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      dir_ = from.dir_;
    }
    if (cached_has_bits & 0x00000004u) {
      destx_ = from.destx_;
    }
    if (cached_has_bits & 0x00000008u) {
      desty_ = from.desty_;
    }
    if (cached_has_bits & 0x00000010u) {
      movespeed_ = from.movespeed_;
    }
    if (cached_has_bits & 0x00000020u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000040u) {
      srcx_ = from.srcx_;
    }
    if (cached_has_bits & 0x00000080u) {
      srcy_ = from.srcy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_Syn_MoveState_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Req_Syn_MoveState_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_Syn_MoveState_CS::CopyFrom(const MSG_Req_Syn_MoveState_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Req_Syn_MoveState_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_Syn_MoveState_CS::IsInitialized() const {
  return true;
}

void MSG_Req_Syn_MoveState_CS::InternalSwap(MSG_Req_Syn_MoveState_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pos_.InternalSwap(&other->pos_);
  swap(move_state_, other->move_state_);
  swap(dir_, other->dir_);
  swap(destx_, other->destx_);
  swap(desty_, other->desty_);
  swap(movespeed_, other->movespeed_);
  swap(step_, other->step_);
  swap(srcx_, other->srcx_);
  swap(srcy_, other->srcy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_Syn_MoveState_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Find_Path_SC::InitAsDefaultInstance() {
}
class MSG_Ret_Find_Path_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Find_Path_SC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gridindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_moveres(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_Find_Path_SC::MSG_Ret_Find_Path_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_Find_Path_SC)
}
MSG_Ret_Find_Path_SC::MSG_Ret_Find_Path_SC(const MSG_Ret_Find_Path_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&moveres_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(moveres_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_Find_Path_SC)
}

void MSG_Ret_Find_Path_SC::SharedCtor() {
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moveres_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(moveres_));
}

MSG_Ret_Find_Path_SC::~MSG_Ret_Find_Path_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_Find_Path_SC)
  SharedDtor();
}

void MSG_Ret_Find_Path_SC::SharedDtor() {
}

void MSG_Ret_Find_Path_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Find_Path_SC& MSG_Ret_Find_Path_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Find_Path_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Find_Path_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_Find_Path_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moveres_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(moveres_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Find_Path_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gridindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gridindex(&has_bits);
          gridindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 moveres = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_moveres(&has_bits);
          moveres_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Find_Path_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_Find_Path_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional uint32 gridindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gridindex(), target);
  }

  // optional uint32 moveres = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_moveres(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_Find_Path_SC)
  return target;
}

size_t MSG_Ret_Find_Path_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_Find_Path_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 gridindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gridindex());
    }

    // optional uint32 moveres = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_moveres());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Find_Path_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_Find_Path_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Find_Path_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Find_Path_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_Find_Path_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_Find_Path_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Find_Path_SC::MergeFrom(const MSG_Ret_Find_Path_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_Find_Path_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000002u) {
      gridindex_ = from.gridindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      moveres_ = from.moveres_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_Find_Path_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_Find_Path_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Find_Path_SC::CopyFrom(const MSG_Ret_Find_Path_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_Find_Path_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Find_Path_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Find_Path_SC::InternalSwap(MSG_Ret_Find_Path_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(charid_, other->charid_);
  swap(gridindex_, other->gridindex_);
  swap(moveres_, other->moveres_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Find_Path_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Rondom_Way_SC::InitAsDefaultInstance() {
}
class MSG_Ret_Rondom_Way_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Rondom_Way_SC>()._has_bits_);
  static void set_has_zonecenterx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zonecentery(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_zonewidth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_zoneheight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gridwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gridheight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pathid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pathinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_Rondom_Way_SC::MSG_Ret_Rondom_Way_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_Rondom_Way_SC)
}
MSG_Ret_Rondom_Way_SC::MSG_Ret_Rondom_Way_SC(const MSG_Ret_Rondom_Way_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pathinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pathinfo()) {
    pathinfo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathinfo_);
  }
  ::memcpy(&zonecenterx_, &from.zonecenterx_,
    static_cast<size_t>(reinterpret_cast<char*>(&pathid_) -
    reinterpret_cast<char*>(&zonecenterx_)) + sizeof(pathid_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_Rondom_Way_SC)
}

void MSG_Ret_Rondom_Way_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_Rondom_Way_SC_message_2eproto.base);
  pathinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&zonecenterx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pathid_) -
      reinterpret_cast<char*>(&zonecenterx_)) + sizeof(pathid_));
}

MSG_Ret_Rondom_Way_SC::~MSG_Ret_Rondom_Way_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_Rondom_Way_SC)
  SharedDtor();
}

void MSG_Ret_Rondom_Way_SC::SharedDtor() {
  pathinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_Rondom_Way_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Rondom_Way_SC& MSG_Ret_Rondom_Way_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Rondom_Way_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Rondom_Way_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_Rondom_Way_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pathinfo_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&zonecenterx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pathid_) -
        reinterpret_cast<char*>(&zonecenterx_)) + sizeof(pathid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Rondom_Way_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 zonecenterx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_zonecenterx(&has_bits);
          zonecenterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 zonecentery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_zonecentery(&has_bits);
          zonecentery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 zonewidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_zonewidth(&has_bits);
          zonewidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 zoneheight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_zoneheight(&has_bits);
          zoneheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gridwidth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gridwidth(&has_bits);
          gridwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gridheight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gridheight(&has_bits);
          gridheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pathid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pathid(&has_bits);
          pathid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pathinfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_pathinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_Ret_Rondom_Way_SC.pathinfo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Rondom_Way_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_Rondom_Way_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 zonecenterx = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zonecenterx(), target);
  }

  // optional uint32 zonecentery = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_zonecentery(), target);
  }

  // optional uint32 zonewidth = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_zonewidth(), target);
  }

  // optional uint32 zoneheight = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_zoneheight(), target);
  }

  // optional uint32 gridwidth = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gridwidth(), target);
  }

  // optional uint32 gridheight = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gridheight(), target);
  }

  // optional uint32 pathid = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pathid(), target);
  }

  // optional string pathinfo = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pathinfo().data(), static_cast<int>(this->_internal_pathinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_Ret_Rondom_Way_SC.pathinfo");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_pathinfo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_Rondom_Way_SC)
  return target;
}

size_t MSG_Ret_Rondom_Way_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_Rondom_Way_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string pathinfo = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pathinfo());
    }

    // optional uint32 zonecenterx = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_zonecenterx());
    }

    // optional uint32 zonecentery = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_zonecentery());
    }

    // optional uint32 zonewidth = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_zonewidth());
    }

    // optional uint32 zoneheight = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_zoneheight());
    }

    // optional uint32 gridwidth = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gridwidth());
    }

    // optional uint32 gridheight = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gridheight());
    }

    // optional uint32 pathid = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pathid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Rondom_Way_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_Rondom_Way_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Rondom_Way_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Rondom_Way_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_Rondom_Way_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_Rondom_Way_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Rondom_Way_SC::MergeFrom(const MSG_Ret_Rondom_Way_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_Rondom_Way_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pathinfo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pathinfo_);
    }
    if (cached_has_bits & 0x00000002u) {
      zonecenterx_ = from.zonecenterx_;
    }
    if (cached_has_bits & 0x00000004u) {
      zonecentery_ = from.zonecentery_;
    }
    if (cached_has_bits & 0x00000008u) {
      zonewidth_ = from.zonewidth_;
    }
    if (cached_has_bits & 0x00000010u) {
      zoneheight_ = from.zoneheight_;
    }
    if (cached_has_bits & 0x00000020u) {
      gridwidth_ = from.gridwidth_;
    }
    if (cached_has_bits & 0x00000040u) {
      gridheight_ = from.gridheight_;
    }
    if (cached_has_bits & 0x00000080u) {
      pathid_ = from.pathid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_Rondom_Way_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_Rondom_Way_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Rondom_Way_SC::CopyFrom(const MSG_Ret_Rondom_Way_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_Rondom_Way_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Rondom_Way_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Rondom_Way_SC::InternalSwap(MSG_Ret_Rondom_Way_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pathinfo_.Swap(&other->pathinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(zonecenterx_, other->zonecenterx_);
  swap(zonecentery_, other->zonecentery_);
  swap(zonewidth_, other->zonewidth_);
  swap(zoneheight_, other->zoneheight_);
  swap(gridwidth_, other->gridwidth_);
  swap(gridheight_, other->gridheight_);
  swap(pathid_, other->pathid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Rondom_Way_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_Find_Path_End_SC::InitAsDefaultInstance() {
}
class MSG_Ret_Find_Path_End_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_Find_Path_End_SC>()._has_bits_);
  static void set_has_endcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Ret_Find_Path_End_SC::MSG_Ret_Find_Path_End_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Ret_Find_Path_End_SC)
}
MSG_Ret_Find_Path_End_SC::MSG_Ret_Find_Path_End_SC(const MSG_Ret_Find_Path_End_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endcode_ = from.endcode_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Ret_Find_Path_End_SC)
}

void MSG_Ret_Find_Path_End_SC::SharedCtor() {
  endcode_ = 0u;
}

MSG_Ret_Find_Path_End_SC::~MSG_Ret_Find_Path_End_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_Ret_Find_Path_End_SC)
  SharedDtor();
}

void MSG_Ret_Find_Path_End_SC::SharedDtor() {
}

void MSG_Ret_Find_Path_End_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_Find_Path_End_SC& MSG_Ret_Find_Path_End_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_Find_Path_End_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_Find_Path_End_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Ret_Find_Path_End_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_Find_Path_End_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 endcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_endcode(&has_bits);
          endcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_Find_Path_End_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Ret_Find_Path_End_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 endcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_endcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Ret_Find_Path_End_SC)
  return target;
}

size_t MSG_Ret_Find_Path_End_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Ret_Find_Path_End_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 endcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_endcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_Find_Path_End_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Ret_Find_Path_End_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_Find_Path_End_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_Find_Path_End_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Ret_Find_Path_End_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Ret_Find_Path_End_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_Find_Path_End_SC::MergeFrom(const MSG_Ret_Find_Path_End_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Ret_Find_Path_End_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_endcode()) {
    _internal_set_endcode(from._internal_endcode());
  }
}

void MSG_Ret_Find_Path_End_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Ret_Find_Path_End_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_Find_Path_End_SC::CopyFrom(const MSG_Ret_Find_Path_End_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Ret_Find_Path_End_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_Find_Path_End_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_Find_Path_End_SC::InternalSwap(MSG_Ret_Find_Path_End_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(endcode_, other->endcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_Find_Path_End_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Show_Path_Way_End_CS::InitAsDefaultInstance() {
}
class MSG_Show_Path_Way_End_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Show_Path_Way_End_CS>()._has_bits_);
};

MSG_Show_Path_Way_End_CS::MSG_Show_Path_Way_End_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Show_Path_Way_End_CS)
}
MSG_Show_Path_Way_End_CS::MSG_Show_Path_Way_End_CS(const MSG_Show_Path_Way_End_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Show_Path_Way_End_CS)
}

void MSG_Show_Path_Way_End_CS::SharedCtor() {
}

MSG_Show_Path_Way_End_CS::~MSG_Show_Path_Way_End_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Show_Path_Way_End_CS)
  SharedDtor();
}

void MSG_Show_Path_Way_End_CS::SharedDtor() {
}

void MSG_Show_Path_Way_End_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Show_Path_Way_End_CS& MSG_Show_Path_Way_End_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Show_Path_Way_End_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Show_Path_Way_End_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Show_Path_Way_End_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Show_Path_Way_End_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Show_Path_Way_End_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Show_Path_Way_End_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Show_Path_Way_End_CS)
  return target;
}

size_t MSG_Show_Path_Way_End_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Show_Path_Way_End_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Show_Path_Way_End_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Show_Path_Way_End_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Show_Path_Way_End_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Show_Path_Way_End_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Show_Path_Way_End_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Show_Path_Way_End_CS)
    MergeFrom(*source);
  }
}

void MSG_Show_Path_Way_End_CS::MergeFrom(const MSG_Show_Path_Way_End_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Show_Path_Way_End_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Show_Path_Way_End_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Show_Path_Way_End_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Show_Path_Way_End_CS::CopyFrom(const MSG_Show_Path_Way_End_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Show_Path_Way_End_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Show_Path_Way_End_CS::IsInitialized() const {
  return true;
}

void MSG_Show_Path_Way_End_CS::InternalSwap(MSG_Show_Path_Way_End_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Show_Path_Way_End_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LineItem::InitAsDefaultInstance() {
}
class LineItem::_Internal {
 public:
  using HasBits = decltype(std::declval<LineItem>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LineItem::LineItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.LineItem)
}
LineItem::LineItem(const LineItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_num_) -
    reinterpret_cast<char*>(&index_)) + sizeof(user_num_));
  // @@protoc_insertion_point(copy_constructor:msg.LineItem)
}

void LineItem::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_num_) -
      reinterpret_cast<char*>(&index_)) + sizeof(user_num_));
}

LineItem::~LineItem() {
  // @@protoc_insertion_point(destructor:msg.LineItem)
  SharedDtor();
}

void LineItem::SharedDtor() {
}

void LineItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineItem& LineItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LineItem_message_2eproto.base);
  return *internal_default_instance();
}


void LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.LineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_num_) -
        reinterpret_cast<char*>(&index_)) + sizeof(user_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LineItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 user_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_num(&has_bits);
          user_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LineItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.LineItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // optional uint32 user_num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_user_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.LineItem)
  return target;
}

size_t LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.LineItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional uint32 user_num = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_user_num());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  const LineItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LineItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.LineItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.LineItem)
    MergeFrom(*source);
  }
}

void LineItem::MergeFrom(const LineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_num_ = from.user_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LineItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineItem::CopyFrom(const LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineItem::IsInitialized() const {
  return true;
}

void LineItem::InternalSwap(LineItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(index_, other->index_);
  swap(user_num_, other->user_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NoticeClientAllLines_SC::InitAsDefaultInstance() {
}
class MSG_NoticeClientAllLines_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NoticeClientAllLines_SC>()._has_bits_);
  static void set_has_your_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_NoticeClientAllLines_SC::MSG_NoticeClientAllLines_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_NoticeClientAllLines_SC)
}
MSG_NoticeClientAllLines_SC::MSG_NoticeClientAllLines_SC(const MSG_NoticeClientAllLines_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lines_(from.lines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  your_line_ = from.your_line_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_NoticeClientAllLines_SC)
}

void MSG_NoticeClientAllLines_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_NoticeClientAllLines_SC_message_2eproto.base);
  your_line_ = 0u;
}

MSG_NoticeClientAllLines_SC::~MSG_NoticeClientAllLines_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_NoticeClientAllLines_SC)
  SharedDtor();
}

void MSG_NoticeClientAllLines_SC::SharedDtor() {
}

void MSG_NoticeClientAllLines_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NoticeClientAllLines_SC& MSG_NoticeClientAllLines_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NoticeClientAllLines_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_NoticeClientAllLines_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_NoticeClientAllLines_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lines_.Clear();
  your_line_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NoticeClientAllLines_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .msg.LineItem lines = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 your_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_your_line(&has_bits);
          your_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NoticeClientAllLines_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_NoticeClientAllLines_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.LineItem lines = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lines(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 your_line = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_your_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_NoticeClientAllLines_SC)
  return target;
}

size_t MSG_NoticeClientAllLines_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_NoticeClientAllLines_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.LineItem lines = 1;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 your_line = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_your_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NoticeClientAllLines_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_NoticeClientAllLines_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NoticeClientAllLines_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NoticeClientAllLines_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_NoticeClientAllLines_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_NoticeClientAllLines_SC)
    MergeFrom(*source);
  }
}

void MSG_NoticeClientAllLines_SC::MergeFrom(const MSG_NoticeClientAllLines_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_NoticeClientAllLines_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lines_.MergeFrom(from.lines_);
  if (from._internal_has_your_line()) {
    _internal_set_your_line(from._internal_your_line());
  }
}

void MSG_NoticeClientAllLines_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_NoticeClientAllLines_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NoticeClientAllLines_SC::CopyFrom(const MSG_NoticeClientAllLines_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_NoticeClientAllLines_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NoticeClientAllLines_SC::IsInitialized() const {
  return true;
}

void MSG_NoticeClientAllLines_SC::InternalSwap(MSG_NoticeClientAllLines_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lines_.InternalSwap(&other->lines_);
  swap(your_line_, other->your_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NoticeClientAllLines_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_UserReqChangeLine_CS::InitAsDefaultInstance() {
}
class MSG_UserReqChangeLine_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_UserReqChangeLine_CS>()._has_bits_);
  static void set_has_lineid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_UserReqChangeLine_CS::MSG_UserReqChangeLine_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_UserReqChangeLine_CS)
}
MSG_UserReqChangeLine_CS::MSG_UserReqChangeLine_CS(const MSG_UserReqChangeLine_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lineid_ = from.lineid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_UserReqChangeLine_CS)
}

void MSG_UserReqChangeLine_CS::SharedCtor() {
  lineid_ = 0u;
}

MSG_UserReqChangeLine_CS::~MSG_UserReqChangeLine_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_UserReqChangeLine_CS)
  SharedDtor();
}

void MSG_UserReqChangeLine_CS::SharedDtor() {
}

void MSG_UserReqChangeLine_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_UserReqChangeLine_CS& MSG_UserReqChangeLine_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_UserReqChangeLine_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_UserReqChangeLine_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_UserReqChangeLine_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lineid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_UserReqChangeLine_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 lineid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lineid(&has_bits);
          lineid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_UserReqChangeLine_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_UserReqChangeLine_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lineid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lineid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_UserReqChangeLine_CS)
  return target;
}

size_t MSG_UserReqChangeLine_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_UserReqChangeLine_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 lineid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lineid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_UserReqChangeLine_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_UserReqChangeLine_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_UserReqChangeLine_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_UserReqChangeLine_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_UserReqChangeLine_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_UserReqChangeLine_CS)
    MergeFrom(*source);
  }
}

void MSG_UserReqChangeLine_CS::MergeFrom(const MSG_UserReqChangeLine_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_UserReqChangeLine_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_lineid()) {
    _internal_set_lineid(from._internal_lineid());
  }
}

void MSG_UserReqChangeLine_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_UserReqChangeLine_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_UserReqChangeLine_CS::CopyFrom(const MSG_UserReqChangeLine_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_UserReqChangeLine_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UserReqChangeLine_CS::IsInitialized() const {
  return true;
}

void MSG_UserReqChangeLine_CS::InternalSwap(MSG_UserReqChangeLine_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lineid_, other->lineid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UserReqChangeLine_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_OnUserJump_CSC::InitAsDefaultInstance() {
  ::msg::_MSG_OnUserJump_CSC_default_instance_._instance.get_mutable()->data_ = const_cast< ::msg::MoveData*>(
      ::msg::MoveData::internal_default_instance());
}
class MSG_OnUserJump_CSC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_OnUserJump_CSC>()._has_bits_);
  static const ::msg::MoveData& data(const MSG_OnUserJump_CSC* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::msg::MoveData&
MSG_OnUserJump_CSC::_Internal::data(const MSG_OnUserJump_CSC* msg) {
  return *msg->data_;
}
MSG_OnUserJump_CSC::MSG_OnUserJump_CSC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_OnUserJump_CSC)
}
MSG_OnUserJump_CSC::MSG_OnUserJump_CSC(const MSG_OnUserJump_CSC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::msg::MoveData(*from.data_);
  } else {
    data_ = nullptr;
  }
  charid_ = from.charid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_OnUserJump_CSC)
}

void MSG_OnUserJump_CSC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_OnUserJump_CSC_message_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charid_) -
      reinterpret_cast<char*>(&data_)) + sizeof(charid_));
}

MSG_OnUserJump_CSC::~MSG_OnUserJump_CSC() {
  // @@protoc_insertion_point(destructor:msg.MSG_OnUserJump_CSC)
  SharedDtor();
}

void MSG_OnUserJump_CSC::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
}

void MSG_OnUserJump_CSC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_OnUserJump_CSC& MSG_OnUserJump_CSC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_OnUserJump_CSC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_OnUserJump_CSC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_OnUserJump_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(data_ != nullptr);
    data_->Clear();
  }
  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_OnUserJump_CSC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .msg.MoveData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 charid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_OnUserJump_CSC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_OnUserJump_CSC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .msg.MoveData data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  // optional uint64 charid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_charid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_OnUserJump_CSC)
  return target;
}

size_t MSG_OnUserJump_CSC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_OnUserJump_CSC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .msg.MoveData data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional uint64 charid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_OnUserJump_CSC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_OnUserJump_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_OnUserJump_CSC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_OnUserJump_CSC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_OnUserJump_CSC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_OnUserJump_CSC)
    MergeFrom(*source);
  }
}

void MSG_OnUserJump_CSC::MergeFrom(const MSG_OnUserJump_CSC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_OnUserJump_CSC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_data()->::msg::MoveData::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_OnUserJump_CSC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_OnUserJump_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_OnUserJump_CSC::CopyFrom(const MSG_OnUserJump_CSC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_OnUserJump_CSC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_OnUserJump_CSC::IsInitialized() const {
  return true;
}

void MSG_OnUserJump_CSC::InternalSwap(MSG_OnUserJump_CSC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_, other->data_);
  swap(charid_, other->charid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_OnUserJump_CSC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NPCHatredList_SC::InitAsDefaultInstance() {
}
class MSG_NPCHatredList_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NPCHatredList_SC>()._has_bits_);
  static void set_has_npctempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_NPCHatredList_SC::MSG_NPCHatredList_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_NPCHatredList_SC)
}
MSG_NPCHatredList_SC::MSG_NPCHatredList_SC(const MSG_NPCHatredList_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      enemytempid_(from.enemytempid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npctempid_ = from.npctempid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_NPCHatredList_SC)
}

void MSG_NPCHatredList_SC::SharedCtor() {
  npctempid_ = PROTOBUF_ULONGLONG(0);
}

MSG_NPCHatredList_SC::~MSG_NPCHatredList_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_NPCHatredList_SC)
  SharedDtor();
}

void MSG_NPCHatredList_SC::SharedDtor() {
}

void MSG_NPCHatredList_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NPCHatredList_SC& MSG_NPCHatredList_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NPCHatredList_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_NPCHatredList_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_NPCHatredList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enemytempid_.Clear();
  npctempid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NPCHatredList_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 npctempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npctempid(&has_bits);
          npctempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 enemytempid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemytempid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_enemytempid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NPCHatredList_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_NPCHatredList_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 npctempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_npctempid(), target);
  }

  // repeated uint64 enemytempid = 2;
  for (int i = 0, n = this->_internal_enemytempid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_enemytempid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_NPCHatredList_SC)
  return target;
}

size_t MSG_NPCHatredList_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_NPCHatredList_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 enemytempid = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->enemytempid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemytempid_size());
    total_size += data_size;
  }

  // optional uint64 npctempid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_npctempid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NPCHatredList_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_NPCHatredList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NPCHatredList_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NPCHatredList_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_NPCHatredList_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_NPCHatredList_SC)
    MergeFrom(*source);
  }
}

void MSG_NPCHatredList_SC::MergeFrom(const MSG_NPCHatredList_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_NPCHatredList_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enemytempid_.MergeFrom(from.enemytempid_);
  if (from._internal_has_npctempid()) {
    _internal_set_npctempid(from._internal_npctempid());
  }
}

void MSG_NPCHatredList_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_NPCHatredList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NPCHatredList_SC::CopyFrom(const MSG_NPCHatredList_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_NPCHatredList_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NPCHatredList_SC::IsInitialized() const {
  return true;
}

void MSG_NPCHatredList_SC::InternalSwap(MSG_NPCHatredList_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enemytempid_.InternalSwap(&other->enemytempid_);
  swap(npctempid_, other->npctempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NPCHatredList_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NPC_HatredList::InitAsDefaultInstance() {
}
class NPC_HatredList::_Internal {
 public:
  using HasBits = decltype(std::declval<NPC_HatredList>()._has_bits_);
  static void set_has_npctempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NPC_HatredList::NPC_HatredList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.NPC_HatredList)
}
NPC_HatredList::NPC_HatredList(const NPC_HatredList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      enemytempid_(from.enemytempid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npctempid_ = from.npctempid_;
  // @@protoc_insertion_point(copy_constructor:msg.NPC_HatredList)
}

void NPC_HatredList::SharedCtor() {
  npctempid_ = PROTOBUF_ULONGLONG(0);
}

NPC_HatredList::~NPC_HatredList() {
  // @@protoc_insertion_point(destructor:msg.NPC_HatredList)
  SharedDtor();
}

void NPC_HatredList::SharedDtor() {
}

void NPC_HatredList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NPC_HatredList& NPC_HatredList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NPC_HatredList_message_2eproto.base);
  return *internal_default_instance();
}


void NPC_HatredList::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.NPC_HatredList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enemytempid_.Clear();
  npctempid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NPC_HatredList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 npctempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_npctempid(&has_bits);
          npctempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 enemytempid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemytempid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_enemytempid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NPC_HatredList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.NPC_HatredList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 npctempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_npctempid(), target);
  }

  // repeated uint64 enemytempid = 2;
  for (int i = 0, n = this->_internal_enemytempid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_enemytempid(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.NPC_HatredList)
  return target;
}

size_t NPC_HatredList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.NPC_HatredList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 enemytempid = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->enemytempid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemytempid_size());
    total_size += data_size;
  }

  // optional uint64 npctempid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_npctempid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NPC_HatredList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.NPC_HatredList)
  GOOGLE_DCHECK_NE(&from, this);
  const NPC_HatredList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NPC_HatredList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.NPC_HatredList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.NPC_HatredList)
    MergeFrom(*source);
  }
}

void NPC_HatredList::MergeFrom(const NPC_HatredList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.NPC_HatredList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enemytempid_.MergeFrom(from.enemytempid_);
  if (from._internal_has_npctempid()) {
    _internal_set_npctempid(from._internal_npctempid());
  }
}

void NPC_HatredList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.NPC_HatredList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NPC_HatredList::CopyFrom(const NPC_HatredList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.NPC_HatredList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPC_HatredList::IsInitialized() const {
  return true;
}

void NPC_HatredList::InternalSwap(NPC_HatredList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  enemytempid_.InternalSwap(&other->enemytempid_);
  swap(npctempid_, other->npctempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NPC_HatredList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ACCOUNT_SEC_PASSWD_SC::InitAsDefaultInstance() {
}
class MSG_ACCOUNT_SEC_PASSWD_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ACCOUNT_SEC_PASSWD_SC>()._has_bits_);
  static void set_has_sec_passwd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isonline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ACCOUNT_SEC_PASSWD_SC::MSG_ACCOUNT_SEC_PASSWD_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
}
MSG_ACCOUNT_SEC_PASSWD_SC::MSG_ACCOUNT_SEC_PASSWD_SC(const MSG_ACCOUNT_SEC_PASSWD_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sec_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sec_passwd()) {
    sec_passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sec_passwd_);
  }
  isonline_ = from.isonline_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
}

void MSG_ACCOUNT_SEC_PASSWD_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_ACCOUNT_SEC_PASSWD_SC_message_2eproto.base);
  sec_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  isonline_ = false;
}

MSG_ACCOUNT_SEC_PASSWD_SC::~MSG_ACCOUNT_SEC_PASSWD_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
  SharedDtor();
}

void MSG_ACCOUNT_SEC_PASSWD_SC::SharedDtor() {
  sec_passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_ACCOUNT_SEC_PASSWD_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ACCOUNT_SEC_PASSWD_SC& MSG_ACCOUNT_SEC_PASSWD_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ACCOUNT_SEC_PASSWD_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_ACCOUNT_SEC_PASSWD_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sec_passwd_.ClearNonDefaultToEmptyNoArena();
  }
  isonline_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ACCOUNT_SEC_PASSWD_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string sec_passwd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sec_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_ACCOUNT_SEC_PASSWD_SC.sec_passwd");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isonline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isonline(&has_bits);
          isonline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ACCOUNT_SEC_PASSWD_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sec_passwd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sec_passwd().data(), static_cast<int>(this->_internal_sec_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_ACCOUNT_SEC_PASSWD_SC.sec_passwd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sec_passwd(), target);
  }

  // optional bool isonline = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isonline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
  return target;
}

size_t MSG_ACCOUNT_SEC_PASSWD_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string sec_passwd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sec_passwd());
    }

    // optional bool isonline = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ACCOUNT_SEC_PASSWD_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ACCOUNT_SEC_PASSWD_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ACCOUNT_SEC_PASSWD_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
    MergeFrom(*source);
  }
}

void MSG_ACCOUNT_SEC_PASSWD_SC::MergeFrom(const MSG_ACCOUNT_SEC_PASSWD_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sec_passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sec_passwd_);
    }
    if (cached_has_bits & 0x00000002u) {
      isonline_ = from.isonline_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ACCOUNT_SEC_PASSWD_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ACCOUNT_SEC_PASSWD_SC::CopyFrom(const MSG_ACCOUNT_SEC_PASSWD_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_ACCOUNT_SEC_PASSWD_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ACCOUNT_SEC_PASSWD_SC::IsInitialized() const {
  return true;
}

void MSG_ACCOUNT_SEC_PASSWD_SC::InternalSwap(MSG_ACCOUNT_SEC_PASSWD_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sec_passwd_.Swap(&other->sec_passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(isonline_, other->isonline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ACCOUNT_SEC_PASSWD_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_USER_REQ_SETPASSWD_CS::InitAsDefaultInstance() {
}
class MSG_USER_REQ_SETPASSWD_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_USER_REQ_SETPASSWD_CS>()._has_bits_);
  static void set_has_old_passwd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_passwd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_USER_REQ_SETPASSWD_CS::MSG_USER_REQ_SETPASSWD_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_USER_REQ_SETPASSWD_CS)
}
MSG_USER_REQ_SETPASSWD_CS::MSG_USER_REQ_SETPASSWD_CS(const MSG_USER_REQ_SETPASSWD_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  old_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_old_passwd()) {
    old_passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.old_passwd_);
  }
  new_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_new_passwd()) {
    new_passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_passwd_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.MSG_USER_REQ_SETPASSWD_CS)
}

void MSG_USER_REQ_SETPASSWD_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_USER_REQ_SETPASSWD_CS_message_2eproto.base);
  old_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_USER_REQ_SETPASSWD_CS::~MSG_USER_REQ_SETPASSWD_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_USER_REQ_SETPASSWD_CS)
  SharedDtor();
}

void MSG_USER_REQ_SETPASSWD_CS::SharedDtor() {
  old_passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_USER_REQ_SETPASSWD_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_USER_REQ_SETPASSWD_CS& MSG_USER_REQ_SETPASSWD_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_USER_REQ_SETPASSWD_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_USER_REQ_SETPASSWD_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_USER_REQ_SETPASSWD_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      old_passwd_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      new_passwd_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_USER_REQ_SETPASSWD_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string old_passwd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_old_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_USER_REQ_SETPASSWD_CS.old_passwd");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string new_passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_new_passwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_USER_REQ_SETPASSWD_CS.new_passwd");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_USER_REQ_SETPASSWD_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_USER_REQ_SETPASSWD_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string old_passwd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_old_passwd().data(), static_cast<int>(this->_internal_old_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_USER_REQ_SETPASSWD_CS.old_passwd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_old_passwd(), target);
  }

  // optional string new_passwd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_new_passwd().data(), static_cast<int>(this->_internal_new_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_USER_REQ_SETPASSWD_CS.new_passwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_new_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_USER_REQ_SETPASSWD_CS)
  return target;
}

size_t MSG_USER_REQ_SETPASSWD_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_USER_REQ_SETPASSWD_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string old_passwd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_old_passwd());
    }

    // optional string new_passwd = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_new_passwd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_USER_REQ_SETPASSWD_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_USER_REQ_SETPASSWD_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_USER_REQ_SETPASSWD_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_USER_REQ_SETPASSWD_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_USER_REQ_SETPASSWD_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_USER_REQ_SETPASSWD_CS)
    MergeFrom(*source);
  }
}

void MSG_USER_REQ_SETPASSWD_CS::MergeFrom(const MSG_USER_REQ_SETPASSWD_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_USER_REQ_SETPASSWD_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      old_passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.old_passwd_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      new_passwd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.new_passwd_);
    }
  }
}

void MSG_USER_REQ_SETPASSWD_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_USER_REQ_SETPASSWD_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_USER_REQ_SETPASSWD_CS::CopyFrom(const MSG_USER_REQ_SETPASSWD_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_USER_REQ_SETPASSWD_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_USER_REQ_SETPASSWD_CS::IsInitialized() const {
  return true;
}

void MSG_USER_REQ_SETPASSWD_CS::InternalSwap(MSG_USER_REQ_SETPASSWD_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  old_passwd_.Swap(&other->old_passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  new_passwd_.Swap(&other->new_passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_USER_REQ_SETPASSWD_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NEW_ROLE_CUTSCENE_SCS::InitAsDefaultInstance() {
}
class MSG_NEW_ROLE_CUTSCENE_SCS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NEW_ROLE_CUTSCENE_SCS>()._has_bits_);
};

MSG_NEW_ROLE_CUTSCENE_SCS::MSG_NEW_ROLE_CUTSCENE_SCS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
}
MSG_NEW_ROLE_CUTSCENE_SCS::MSG_NEW_ROLE_CUTSCENE_SCS(const MSG_NEW_ROLE_CUTSCENE_SCS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
}

void MSG_NEW_ROLE_CUTSCENE_SCS::SharedCtor() {
}

MSG_NEW_ROLE_CUTSCENE_SCS::~MSG_NEW_ROLE_CUTSCENE_SCS() {
  // @@protoc_insertion_point(destructor:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
  SharedDtor();
}

void MSG_NEW_ROLE_CUTSCENE_SCS::SharedDtor() {
}

void MSG_NEW_ROLE_CUTSCENE_SCS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NEW_ROLE_CUTSCENE_SCS& MSG_NEW_ROLE_CUTSCENE_SCS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NEW_ROLE_CUTSCENE_SCS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_NEW_ROLE_CUTSCENE_SCS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NEW_ROLE_CUTSCENE_SCS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NEW_ROLE_CUTSCENE_SCS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
  return target;
}

size_t MSG_NEW_ROLE_CUTSCENE_SCS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NEW_ROLE_CUTSCENE_SCS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NEW_ROLE_CUTSCENE_SCS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NEW_ROLE_CUTSCENE_SCS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
    MergeFrom(*source);
  }
}

void MSG_NEW_ROLE_CUTSCENE_SCS::MergeFrom(const MSG_NEW_ROLE_CUTSCENE_SCS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_NEW_ROLE_CUTSCENE_SCS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NEW_ROLE_CUTSCENE_SCS::CopyFrom(const MSG_NEW_ROLE_CUTSCENE_SCS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_NEW_ROLE_CUTSCENE_SCS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NEW_ROLE_CUTSCENE_SCS::IsInitialized() const {
  return true;
}

void MSG_NEW_ROLE_CUTSCENE_SCS::InternalSwap(MSG_NEW_ROLE_CUTSCENE_SCS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NEW_ROLE_CUTSCENE_SCS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_User_Drop_SCS::InitAsDefaultInstance() {
}
class MSG_User_Drop_SCS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_User_Drop_SCS>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_User_Drop_SCS::MSG_User_Drop_SCS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_User_Drop_SCS)
}
MSG_User_Drop_SCS::MSG_User_Drop_SCS(const MSG_User_Drop_SCS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  charid_ = from.charid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_User_Drop_SCS)
}

void MSG_User_Drop_SCS::SharedCtor() {
  charid_ = PROTOBUF_ULONGLONG(0);
}

MSG_User_Drop_SCS::~MSG_User_Drop_SCS() {
  // @@protoc_insertion_point(destructor:msg.MSG_User_Drop_SCS)
  SharedDtor();
}

void MSG_User_Drop_SCS::SharedDtor() {
}

void MSG_User_Drop_SCS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_User_Drop_SCS& MSG_User_Drop_SCS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_User_Drop_SCS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_User_Drop_SCS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_User_Drop_SCS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_User_Drop_SCS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_User_Drop_SCS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_User_Drop_SCS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_User_Drop_SCS)
  return target;
}

size_t MSG_User_Drop_SCS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_User_Drop_SCS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 charid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_charid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_User_Drop_SCS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_User_Drop_SCS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_User_Drop_SCS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_User_Drop_SCS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_User_Drop_SCS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_User_Drop_SCS)
    MergeFrom(*source);
  }
}

void MSG_User_Drop_SCS::MergeFrom(const MSG_User_Drop_SCS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_User_Drop_SCS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_charid()) {
    _internal_set_charid(from._internal_charid());
  }
}

void MSG_User_Drop_SCS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_User_Drop_SCS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_User_Drop_SCS::CopyFrom(const MSG_User_Drop_SCS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_User_Drop_SCS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_User_Drop_SCS::IsInitialized() const {
  return true;
}

void MSG_User_Drop_SCS::InternalSwap(MSG_User_Drop_SCS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(charid_, other->charid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_User_Drop_SCS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_START_CUTSCENE_SC::InitAsDefaultInstance() {
}
class MSG_START_CUTSCENE_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_START_CUTSCENE_SC>()._has_bits_);
  static void set_has_cutsceneid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_onfinish(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_START_CUTSCENE_SC::MSG_START_CUTSCENE_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_START_CUTSCENE_SC)
}
MSG_START_CUTSCENE_SC::MSG_START_CUTSCENE_SC(const MSG_START_CUTSCENE_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  onfinish_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_onfinish()) {
    onfinish_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onfinish_);
  }
  cutsceneid_ = from.cutsceneid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_START_CUTSCENE_SC)
}

void MSG_START_CUTSCENE_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_START_CUTSCENE_SC_message_2eproto.base);
  onfinish_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cutsceneid_ = 0u;
}

MSG_START_CUTSCENE_SC::~MSG_START_CUTSCENE_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_START_CUTSCENE_SC)
  SharedDtor();
}

void MSG_START_CUTSCENE_SC::SharedDtor() {
  onfinish_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_START_CUTSCENE_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_START_CUTSCENE_SC& MSG_START_CUTSCENE_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_START_CUTSCENE_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_START_CUTSCENE_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_START_CUTSCENE_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    onfinish_.ClearNonDefaultToEmptyNoArena();
  }
  cutsceneid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_START_CUTSCENE_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cutsceneid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cutsceneid(&has_bits);
          cutsceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string onfinish = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_onfinish();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_START_CUTSCENE_SC.onfinish");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_START_CUTSCENE_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_START_CUTSCENE_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cutsceneid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cutsceneid(), target);
  }

  // optional string onfinish = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_onfinish().data(), static_cast<int>(this->_internal_onfinish().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_START_CUTSCENE_SC.onfinish");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_onfinish(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_START_CUTSCENE_SC)
  return target;
}

size_t MSG_START_CUTSCENE_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_START_CUTSCENE_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string onfinish = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_onfinish());
    }

    // optional uint32 cutsceneid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cutsceneid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_START_CUTSCENE_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_START_CUTSCENE_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_START_CUTSCENE_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_START_CUTSCENE_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_START_CUTSCENE_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_START_CUTSCENE_SC)
    MergeFrom(*source);
  }
}

void MSG_START_CUTSCENE_SC::MergeFrom(const MSG_START_CUTSCENE_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_START_CUTSCENE_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      onfinish_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onfinish_);
    }
    if (cached_has_bits & 0x00000002u) {
      cutsceneid_ = from.cutsceneid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_START_CUTSCENE_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_START_CUTSCENE_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_START_CUTSCENE_SC::CopyFrom(const MSG_START_CUTSCENE_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_START_CUTSCENE_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_START_CUTSCENE_SC::IsInitialized() const {
  return true;
}

void MSG_START_CUTSCENE_SC::InternalSwap(MSG_START_CUTSCENE_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  onfinish_.Swap(&other->onfinish_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cutsceneid_, other->cutsceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_START_CUTSCENE_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_UserLoadingOk_CS::InitAsDefaultInstance() {
}
class MSG_UserLoadingOk_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_UserLoadingOk_CS>()._has_bits_);
};

MSG_UserLoadingOk_CS::MSG_UserLoadingOk_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_UserLoadingOk_CS)
}
MSG_UserLoadingOk_CS::MSG_UserLoadingOk_CS(const MSG_UserLoadingOk_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_UserLoadingOk_CS)
}

void MSG_UserLoadingOk_CS::SharedCtor() {
}

MSG_UserLoadingOk_CS::~MSG_UserLoadingOk_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_UserLoadingOk_CS)
  SharedDtor();
}

void MSG_UserLoadingOk_CS::SharedDtor() {
}

void MSG_UserLoadingOk_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_UserLoadingOk_CS& MSG_UserLoadingOk_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_UserLoadingOk_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_UserLoadingOk_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_UserLoadingOk_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_UserLoadingOk_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_UserLoadingOk_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_UserLoadingOk_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_UserLoadingOk_CS)
  return target;
}

size_t MSG_UserLoadingOk_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_UserLoadingOk_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_UserLoadingOk_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_UserLoadingOk_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_UserLoadingOk_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_UserLoadingOk_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_UserLoadingOk_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_UserLoadingOk_CS)
    MergeFrom(*source);
  }
}

void MSG_UserLoadingOk_CS::MergeFrom(const MSG_UserLoadingOk_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_UserLoadingOk_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_UserLoadingOk_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_UserLoadingOk_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_UserLoadingOk_CS::CopyFrom(const MSG_UserLoadingOk_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_UserLoadingOk_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_UserLoadingOk_CS::IsInitialized() const {
  return true;
}

void MSG_UserLoadingOk_CS::InternalSwap(MSG_UserLoadingOk_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_UserLoadingOk_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqQueryBalance_CS::InitAsDefaultInstance() {
}
class MSG_ReqQueryBalance_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqQueryBalance_CS>()._has_bits_);
};

MSG_ReqQueryBalance_CS::MSG_ReqQueryBalance_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_ReqQueryBalance_CS)
}
MSG_ReqQueryBalance_CS::MSG_ReqQueryBalance_CS(const MSG_ReqQueryBalance_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_ReqQueryBalance_CS)
}

void MSG_ReqQueryBalance_CS::SharedCtor() {
}

MSG_ReqQueryBalance_CS::~MSG_ReqQueryBalance_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_ReqQueryBalance_CS)
  SharedDtor();
}

void MSG_ReqQueryBalance_CS::SharedDtor() {
}

void MSG_ReqQueryBalance_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqQueryBalance_CS& MSG_ReqQueryBalance_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqQueryBalance_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqQueryBalance_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_ReqQueryBalance_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqQueryBalance_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqQueryBalance_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_ReqQueryBalance_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_ReqQueryBalance_CS)
  return target;
}

size_t MSG_ReqQueryBalance_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_ReqQueryBalance_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqQueryBalance_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_ReqQueryBalance_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqQueryBalance_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqQueryBalance_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_ReqQueryBalance_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_ReqQueryBalance_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqQueryBalance_CS::MergeFrom(const MSG_ReqQueryBalance_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_ReqQueryBalance_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_ReqQueryBalance_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_ReqQueryBalance_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqQueryBalance_CS::CopyFrom(const MSG_ReqQueryBalance_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_ReqQueryBalance_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqQueryBalance_CS::IsInitialized() const {
  return true;
}

void MSG_ReqQueryBalance_CS::InternalSwap(MSG_ReqQueryBalance_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqQueryBalance_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetQueryBalance_SC::InitAsDefaultInstance() {
}
class MSG_RetQueryBalance_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetQueryBalance_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hadfilled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_point2tone(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_RetQueryBalance_SC::MSG_RetQueryBalance_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_RetQueryBalance_SC)
}
MSG_RetQueryBalance_SC::MSG_RetQueryBalance_SC(const MSG_RetQueryBalance_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&point2tone_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(point2tone_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_RetQueryBalance_SC)
}

void MSG_RetQueryBalance_SC::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point2tone_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(point2tone_));
}

MSG_RetQueryBalance_SC::~MSG_RetQueryBalance_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_RetQueryBalance_SC)
  SharedDtor();
}

void MSG_RetQueryBalance_SC::SharedDtor() {
}

void MSG_RetQueryBalance_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetQueryBalance_SC& MSG_RetQueryBalance_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetQueryBalance_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetQueryBalance_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_RetQueryBalance_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&point2tone_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(point2tone_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetQueryBalance_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.ERechargeReturnCode retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::ERechargeReturnCode_IsValid(val))) {
            _internal_set_retcode(static_cast<::msg::ERechargeReturnCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bonus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bonus(&has_bits);
          bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hadfilled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hadfilled(&has_bits);
          hadfilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 point2tone = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_point2tone(&has_bits);
          point2tone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetQueryBalance_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_RetQueryBalance_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.ERechargeReturnCode retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_retcode(), target);
  }

  // optional uint32 balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_balance(), target);
  }

  // optional uint32 bonus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bonus(), target);
  }

  // optional uint32 hadfilled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hadfilled(), target);
  }

  // optional uint32 point2tone = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_point2tone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_RetQueryBalance_SC)
  return target;
}

size_t MSG_RetQueryBalance_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_RetQueryBalance_SC)
  size_t total_size = 0;

  // required .msg.ERechargeReturnCode retcode = 1;
  if (_internal_has_retcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_retcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional uint32 balance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_balance());
    }

    // optional uint32 bonus = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bonus());
    }

    // optional uint32 hadfilled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hadfilled());
    }

    // optional uint32 point2tone = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_point2tone());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetQueryBalance_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_RetQueryBalance_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetQueryBalance_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetQueryBalance_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_RetQueryBalance_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_RetQueryBalance_SC)
    MergeFrom(*source);
  }
}

void MSG_RetQueryBalance_SC::MergeFrom(const MSG_RetQueryBalance_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_RetQueryBalance_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_ = from.bonus_;
    }
    if (cached_has_bits & 0x00000008u) {
      hadfilled_ = from.hadfilled_;
    }
    if (cached_has_bits & 0x00000010u) {
      point2tone_ = from.point2tone_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetQueryBalance_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_RetQueryBalance_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetQueryBalance_SC::CopyFrom(const MSG_RetQueryBalance_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_RetQueryBalance_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetQueryBalance_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_RetQueryBalance_SC::InternalSwap(MSG_RetQueryBalance_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
  swap(balance_, other->balance_);
  swap(bonus_, other->bonus_);
  swap(hadfilled_, other->hadfilled_);
  swap(point2tone_, other->point2tone_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetQueryBalance_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqRecharge_CS::InitAsDefaultInstance() {
}
class MSG_ReqRecharge_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqRecharge_CS>()._has_bits_);
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_ReqRecharge_CS::MSG_ReqRecharge_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_ReqRecharge_CS)
}
MSG_ReqRecharge_CS::MSG_ReqRecharge_CS(const MSG_ReqRecharge_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_, &from.point_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&point_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_ReqRecharge_CS)
}

void MSG_ReqRecharge_CS::SharedCtor() {
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&point_)) + sizeof(type_));
}

MSG_ReqRecharge_CS::~MSG_ReqRecharge_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_ReqRecharge_CS)
  SharedDtor();
}

void MSG_ReqRecharge_CS::SharedDtor() {
}

void MSG_ReqRecharge_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqRecharge_CS& MSG_ReqRecharge_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqRecharge_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqRecharge_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_ReqRecharge_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&point_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqRecharge_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_point(&has_bits);
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqRecharge_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_ReqRecharge_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_point(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_ReqRecharge_CS)
  return target;
}

size_t MSG_ReqRecharge_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_ReqRecharge_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_point());
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqRecharge_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_ReqRecharge_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqRecharge_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqRecharge_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_ReqRecharge_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_ReqRecharge_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqRecharge_CS::MergeFrom(const MSG_ReqRecharge_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_ReqRecharge_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      point_ = from.point_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqRecharge_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_ReqRecharge_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqRecharge_CS::CopyFrom(const MSG_ReqRecharge_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_ReqRecharge_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqRecharge_CS::IsInitialized() const {
  return true;
}

void MSG_ReqRecharge_CS::InternalSwap(MSG_ReqRecharge_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(point_, other->point_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqRecharge_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRecharge_SC::InitAsDefaultInstance() {
}
class MSG_RetRecharge_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRecharge_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hadfilled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MSG_RetRecharge_SC::MSG_RetRecharge_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_RetRecharge_SC)
}
MSG_RetRecharge_SC::MSG_RetRecharge_SC(const MSG_RetRecharge_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&hadfilled_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(hadfilled_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_RetRecharge_SC)
}

void MSG_RetRecharge_SC::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hadfilled_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(hadfilled_));
}

MSG_RetRecharge_SC::~MSG_RetRecharge_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_RetRecharge_SC)
  SharedDtor();
}

void MSG_RetRecharge_SC::SharedDtor() {
}

void MSG_RetRecharge_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRecharge_SC& MSG_RetRecharge_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRecharge_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRecharge_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_RetRecharge_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&retcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hadfilled_) -
        reinterpret_cast<char*>(&retcode_)) + sizeof(hadfilled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRecharge_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .msg.ERechargeReturnCode retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::ERechargeReturnCode_IsValid(val))) {
            _internal_set_retcode(static_cast<::msg::ERechargeReturnCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_point(&has_bits);
          point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_balance(&has_bits);
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bonus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bonus(&has_bits);
          bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hadfilled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hadfilled(&has_bits);
          hadfilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRecharge_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_RetRecharge_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .msg.ERechargeReturnCode retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_retcode(), target);
  }

  // optional uint32 point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_point(), target);
  }

  // optional uint32 balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_balance(), target);
  }

  // optional uint32 bonus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bonus(), target);
  }

  // optional uint32 hadfilled = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hadfilled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_RetRecharge_SC)
  return target;
}

size_t MSG_RetRecharge_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_RetRecharge_SC)
  size_t total_size = 0;

  // required .msg.ERechargeReturnCode retcode = 1;
  if (_internal_has_retcode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_retcode());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional uint32 point = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_point());
    }

    // optional uint32 balance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_balance());
    }

    // optional uint32 bonus = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bonus());
    }

    // optional uint32 hadfilled = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hadfilled());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRecharge_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_RetRecharge_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRecharge_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRecharge_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_RetRecharge_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_RetRecharge_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRecharge_SC::MergeFrom(const MSG_RetRecharge_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_RetRecharge_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      retcode_ = from.retcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      point_ = from.point_;
    }
    if (cached_has_bits & 0x00000004u) {
      balance_ = from.balance_;
    }
    if (cached_has_bits & 0x00000008u) {
      bonus_ = from.bonus_;
    }
    if (cached_has_bits & 0x00000010u) {
      hadfilled_ = from.hadfilled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetRecharge_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_RetRecharge_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRecharge_SC::CopyFrom(const MSG_RetRecharge_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_RetRecharge_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRecharge_SC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MSG_RetRecharge_SC::InternalSwap(MSG_RetRecharge_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
  swap(point_, other->point_);
  swap(balance_, other->balance_);
  swap(bonus_, other->bonus_);
  swap(hadfilled_, other->hadfilled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRecharge_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_SetChooseTarget_CS::InitAsDefaultInstance() {
}
class MSG_SetChooseTarget_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_SetChooseTarget_CS>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_choosetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mapdatatype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_SetChooseTarget_CS::MSG_SetChooseTarget_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_SetChooseTarget_CS)
}
MSG_SetChooseTarget_CS::MSG_SetChooseTarget_CS(const MSG_SetChooseTarget_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&choosetype_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(choosetype_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_SetChooseTarget_CS)
}

void MSG_SetChooseTarget_CS::SharedCtor() {
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapdatatype_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(mapdatatype_));
  choosetype_ = 1;
}

MSG_SetChooseTarget_CS::~MSG_SetChooseTarget_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_SetChooseTarget_CS)
  SharedDtor();
}

void MSG_SetChooseTarget_CS::SharedDtor() {
}

void MSG_SetChooseTarget_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_SetChooseTarget_CS& MSG_SetChooseTarget_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_SetChooseTarget_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_SetChooseTarget_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_SetChooseTarget_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mapdatatype_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(mapdatatype_));
    choosetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_SetChooseTarget_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.ChooseTargetType choosetype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::ChooseTargetType_IsValid(val))) {
            _internal_set_choosetype(static_cast<::msg::ChooseTargetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .msg.MapDataType mapdatatype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::MapDataType_IsValid(val))) {
            _internal_set_mapdatatype(static_cast<::msg::MapDataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_SetChooseTarget_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_SetChooseTarget_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional .msg.ChooseTargetType choosetype = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_choosetype(), target);
  }

  // required .msg.MapDataType mapdatatype = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mapdatatype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_SetChooseTarget_CS)
  return target;
}

size_t MSG_SetChooseTarget_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_SetChooseTarget_CS)
  size_t total_size = 0;

  // required .msg.MapDataType mapdatatype = 3;
  if (_internal_has_mapdatatype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mapdatatype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 charid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_charid());
  }

  // optional .msg.ChooseTargetType choosetype = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_choosetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_SetChooseTarget_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_SetChooseTarget_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_SetChooseTarget_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_SetChooseTarget_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_SetChooseTarget_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_SetChooseTarget_CS)
    MergeFrom(*source);
  }
}

void MSG_SetChooseTarget_CS::MergeFrom(const MSG_SetChooseTarget_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_SetChooseTarget_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000002u) {
      mapdatatype_ = from.mapdatatype_;
    }
    if (cached_has_bits & 0x00000004u) {
      choosetype_ = from.choosetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_SetChooseTarget_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_SetChooseTarget_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_SetChooseTarget_CS::CopyFrom(const MSG_SetChooseTarget_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_SetChooseTarget_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_SetChooseTarget_CS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MSG_SetChooseTarget_CS::InternalSwap(MSG_SetChooseTarget_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(charid_, other->charid_);
  swap(mapdatatype_, other->mapdatatype_);
  swap(choosetype_, other->choosetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_SetChooseTarget_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_AttackTargetChange_SC::InitAsDefaultInstance() {
}
class MSG_AttackTargetChange_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_AttackTargetChange_SC>()._has_bits_);
  static void set_has_charid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_choosetype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MSG_AttackTargetChange_SC::MSG_AttackTargetChange_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_AttackTargetChange_SC)
}
MSG_AttackTargetChange_SC::MSG_AttackTargetChange_SC(const MSG_AttackTargetChange_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&charid_, &from.charid_,
    static_cast<size_t>(reinterpret_cast<char*>(&choosetype_) -
    reinterpret_cast<char*>(&charid_)) + sizeof(choosetype_));
  // @@protoc_insertion_point(copy_constructor:msg.MSG_AttackTargetChange_SC)
}

void MSG_AttackTargetChange_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_AttackTargetChange_SC_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&charid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relation_) -
      reinterpret_cast<char*>(&charid_)) + sizeof(relation_));
  choosetype_ = 1;
}

MSG_AttackTargetChange_SC::~MSG_AttackTargetChange_SC() {
  // @@protoc_insertion_point(destructor:msg.MSG_AttackTargetChange_SC)
  SharedDtor();
}

void MSG_AttackTargetChange_SC::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_AttackTargetChange_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_AttackTargetChange_SC& MSG_AttackTargetChange_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_AttackTargetChange_SC_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_AttackTargetChange_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_AttackTargetChange_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&charid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relation_) -
        reinterpret_cast<char*>(&charid_)) + sizeof(relation_));
    choosetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_AttackTargetChange_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 charid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_charid(&has_bits);
          charid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg.MSG_AttackTargetChange_SC.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 HP = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 relation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_relation(&has_bits);
          relation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .msg.ChooseTargetType choosetype = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::msg::ChooseTargetType_IsValid(val))) {
            _internal_set_choosetype(static_cast<::msg::ChooseTargetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_AttackTargetChange_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_AttackTargetChange_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 charid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_charid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "msg.MSG_AttackTargetChange_SC.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 HP = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hp(), target);
  }

  // optional uint32 relation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_relation(), target);
  }

  // optional .msg.ChooseTargetType choosetype = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_choosetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_AttackTargetChange_SC)
  return target;
}

size_t MSG_AttackTargetChange_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_AttackTargetChange_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 charid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_charid());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 HP = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hp());
    }

    // optional uint32 relation = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_relation());
    }

    // optional .msg.ChooseTargetType choosetype = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_choosetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_AttackTargetChange_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_AttackTargetChange_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_AttackTargetChange_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_AttackTargetChange_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_AttackTargetChange_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_AttackTargetChange_SC)
    MergeFrom(*source);
  }
}

void MSG_AttackTargetChange_SC::MergeFrom(const MSG_AttackTargetChange_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_AttackTargetChange_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      charid_ = from.charid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      hp_ = from.hp_;
    }
    if (cached_has_bits & 0x00000010u) {
      relation_ = from.relation_;
    }
    if (cached_has_bits & 0x00000020u) {
      choosetype_ = from.choosetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_AttackTargetChange_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_AttackTargetChange_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_AttackTargetChange_SC::CopyFrom(const MSG_AttackTargetChange_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_AttackTargetChange_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_AttackTargetChange_SC::IsInitialized() const {
  return true;
}

void MSG_AttackTargetChange_SC::InternalSwap(MSG_AttackTargetChange_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(charid_, other->charid_);
  swap(level_, other->level_);
  swap(hp_, other->hp_);
  swap(relation_, other->relation_);
  swap(choosetype_, other->choosetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_AttackTargetChange_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NotifyAccountReuse::InitAsDefaultInstance() {
}
class MSG_NotifyAccountReuse::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NotifyAccountReuse>()._has_bits_);
};

MSG_NotifyAccountReuse::MSG_NotifyAccountReuse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_NotifyAccountReuse)
}
MSG_NotifyAccountReuse::MSG_NotifyAccountReuse(const MSG_NotifyAccountReuse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MSG_NotifyAccountReuse)
}

void MSG_NotifyAccountReuse::SharedCtor() {
}

MSG_NotifyAccountReuse::~MSG_NotifyAccountReuse() {
  // @@protoc_insertion_point(destructor:msg.MSG_NotifyAccountReuse)
  SharedDtor();
}

void MSG_NotifyAccountReuse::SharedDtor() {
}

void MSG_NotifyAccountReuse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NotifyAccountReuse& MSG_NotifyAccountReuse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NotifyAccountReuse_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_NotifyAccountReuse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_NotifyAccountReuse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NotifyAccountReuse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NotifyAccountReuse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_NotifyAccountReuse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_NotifyAccountReuse)
  return target;
}

size_t MSG_NotifyAccountReuse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_NotifyAccountReuse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NotifyAccountReuse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_NotifyAccountReuse)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NotifyAccountReuse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NotifyAccountReuse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_NotifyAccountReuse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_NotifyAccountReuse)
    MergeFrom(*source);
  }
}

void MSG_NotifyAccountReuse::MergeFrom(const MSG_NotifyAccountReuse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_NotifyAccountReuse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_NotifyAccountReuse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_NotifyAccountReuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NotifyAccountReuse::CopyFrom(const MSG_NotifyAccountReuse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_NotifyAccountReuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NotifyAccountReuse::IsInitialized() const {
  return true;
}

void MSG_NotifyAccountReuse::InternalSwap(MSG_NotifyAccountReuse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NotifyAccountReuse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Notify_SceneLoaded_CS::InitAsDefaultInstance() {
}
class MSG_Notify_SceneLoaded_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Notify_SceneLoaded_CS>()._has_bits_);
  static void set_has_sceneid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Notify_SceneLoaded_CS::MSG_Notify_SceneLoaded_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Notify_SceneLoaded_CS)
}
MSG_Notify_SceneLoaded_CS::MSG_Notify_SceneLoaded_CS(const MSG_Notify_SceneLoaded_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sceneid_ = from.sceneid_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Notify_SceneLoaded_CS)
}

void MSG_Notify_SceneLoaded_CS::SharedCtor() {
  sceneid_ = PROTOBUF_ULONGLONG(0);
}

MSG_Notify_SceneLoaded_CS::~MSG_Notify_SceneLoaded_CS() {
  // @@protoc_insertion_point(destructor:msg.MSG_Notify_SceneLoaded_CS)
  SharedDtor();
}

void MSG_Notify_SceneLoaded_CS::SharedDtor() {
}

void MSG_Notify_SceneLoaded_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Notify_SceneLoaded_CS& MSG_Notify_SceneLoaded_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Notify_SceneLoaded_CS_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Notify_SceneLoaded_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Notify_SceneLoaded_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sceneid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Notify_SceneLoaded_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sceneid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sceneid(&has_bits);
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Notify_SceneLoaded_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Notify_SceneLoaded_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sceneid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Notify_SceneLoaded_CS)
  return target;
}

size_t MSG_Notify_SceneLoaded_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Notify_SceneLoaded_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 sceneid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sceneid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Notify_SceneLoaded_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Notify_SceneLoaded_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Notify_SceneLoaded_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Notify_SceneLoaded_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Notify_SceneLoaded_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Notify_SceneLoaded_CS)
    MergeFrom(*source);
  }
}

void MSG_Notify_SceneLoaded_CS::MergeFrom(const MSG_Notify_SceneLoaded_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Notify_SceneLoaded_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sceneid()) {
    _internal_set_sceneid(from._internal_sceneid());
  }
}

void MSG_Notify_SceneLoaded_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Notify_SceneLoaded_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Notify_SceneLoaded_CS::CopyFrom(const MSG_Notify_SceneLoaded_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Notify_SceneLoaded_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Notify_SceneLoaded_CS::IsInitialized() const {
  return true;
}

void MSG_Notify_SceneLoaded_CS::InternalSwap(MSG_Notify_SceneLoaded_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sceneid_, other->sceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Notify_SceneLoaded_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Upload_Crash_Info::InitAsDefaultInstance() {
}
class MSG_Upload_Crash_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Upload_Crash_Info>()._has_bits_);
  static void set_has_crashnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Upload_Crash_Info::MSG_Upload_Crash_Info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:msg.MSG_Upload_Crash_Info)
}
MSG_Upload_Crash_Info::MSG_Upload_Crash_Info(const MSG_Upload_Crash_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  crashnum_ = from.crashnum_;
  // @@protoc_insertion_point(copy_constructor:msg.MSG_Upload_Crash_Info)
}

void MSG_Upload_Crash_Info::SharedCtor() {
  crashnum_ = 0u;
}

MSG_Upload_Crash_Info::~MSG_Upload_Crash_Info() {
  // @@protoc_insertion_point(destructor:msg.MSG_Upload_Crash_Info)
  SharedDtor();
}

void MSG_Upload_Crash_Info::SharedDtor() {
}

void MSG_Upload_Crash_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Upload_Crash_Info& MSG_Upload_Crash_Info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Upload_Crash_Info_message_2eproto.base);
  return *internal_default_instance();
}


void MSG_Upload_Crash_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MSG_Upload_Crash_Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crashnum_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Upload_Crash_Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 crashnum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_crashnum(&has_bits);
          crashnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Upload_Crash_Info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MSG_Upload_Crash_Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 crashnum = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_crashnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MSG_Upload_Crash_Info)
  return target;
}

size_t MSG_Upload_Crash_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MSG_Upload_Crash_Info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 crashnum = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_crashnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Upload_Crash_Info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg.MSG_Upload_Crash_Info)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Upload_Crash_Info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Upload_Crash_Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg.MSG_Upload_Crash_Info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg.MSG_Upload_Crash_Info)
    MergeFrom(*source);
  }
}

void MSG_Upload_Crash_Info::MergeFrom(const MSG_Upload_Crash_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg.MSG_Upload_Crash_Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_crashnum()) {
    _internal_set_crashnum(from._internal_crashnum());
  }
}

void MSG_Upload_Crash_Info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg.MSG_Upload_Crash_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Upload_Crash_Info::CopyFrom(const MSG_Upload_Crash_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MSG_Upload_Crash_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Upload_Crash_Info::IsInitialized() const {
  return true;
}

void MSG_Upload_Crash_Info::InternalSwap(MSG_Upload_Crash_Info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(crashnum_, other->crashnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Upload_Crash_Info::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::CharacterBaseData* Arena::CreateMaybeMessage< ::msg::CharacterBaseData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::CharacterBaseData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::AttributeData* Arena::CreateMaybeMessage< ::msg::AttributeData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::AttributeData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CharacterFightData* Arena::CreateMaybeMessage< ::msg::CharacterFightData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::CharacterFightData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CharacterMainData* Arena::CreateMaybeMessage< ::msg::CharacterMainData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::CharacterMainData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CharacterMapShow* Arena::CreateMaybeMessage< ::msg::CharacterMapShow >(Arena* arena) {
  return Arena::CreateInternal< ::msg::CharacterMapShow >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CharacterMapData* Arena::CreateMaybeMessage< ::msg::CharacterMapData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::CharacterMapData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::StateItem* Arena::CreateMaybeMessage< ::msg::StateItem >(Arena* arena) {
  return Arena::CreateInternal< ::msg::StateItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MapUserData* Arena::CreateMaybeMessage< ::msg::MapUserData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MapUserData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MasterData* Arena::CreateMaybeMessage< ::msg::MasterData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MasterData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MapNpcData* Arena::CreateMaybeMessage< ::msg::MapNpcData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MapNpcData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Create_Role_CS* Arena::CreateMaybeMessage< ::msg::MSG_Create_Role_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Create_Role_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_ChangeName_CS* Arena::CreateMaybeMessage< ::msg::MSG_ChangeName_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_ChangeName_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_ChangeName_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_ChangeName_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_ChangeName_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_DataCharacterMain_SC* Arena::CreateMaybeMessage< ::msg::MSG_DataCharacterMain_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_DataCharacterMain_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_Use_GM_CS* Arena::CreateMaybeMessage< ::msg::MSG_Req_Use_GM_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_Use_GM_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_Common_Error_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_Common_Error_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_Common_Error_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_Common_Tips_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_Common_Tips_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_Common_Tips_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_Main_Data_CS* Arena::CreateMaybeMessage< ::msg::MSG_Req_Main_Data_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_Main_Data_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_Test_Network_CS* Arena::CreateMaybeMessage< ::msg::MSG_Req_Test_Network_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_Test_Network_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_GameTime_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_GameTime_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_GameTime_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_UserGameTime_SC* Arena::CreateMaybeMessage< ::msg::MSG_Req_UserGameTime_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_UserGameTime_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_UserGameTime_CS* Arena::CreateMaybeMessage< ::msg::MSG_Ret_UserGameTime_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_UserGameTime_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_ServerTime_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_ServerTime_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_ServerTime_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_NotifyUserKickout_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_NotifyUserKickout_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_NotifyUserKickout_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_ServerLoginFailed_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_ServerLoginFailed_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_ServerLoginFailed_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_QueueInfo_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_QueueInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_QueueInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_UserMapInfo_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_UserMapInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_UserMapInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_NineScreenRefreshPlayer_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_NineScreenRefreshPlayer_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_NineScreenRefreshPlayer_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_MapScreenRefreshCharacter_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_MapScreenRefreshCharacter_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_MapScreenRefreshCharacter_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_MapScreenRemoveCharacter_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_MapScreenRemoveCharacter_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_MapScreenRemoveCharacter_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_MapScreenRemoveCharacterShowCorpse_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_MapScreenBatchRemoveCharacter_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_MapScreenBatchRemoveCharacter_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_MapScreenBatchRemoveCharacter_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_StateList_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_StateList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_StateList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::FloatMovePos* Arena::CreateMaybeMessage< ::msg::FloatMovePos >(Arena* arena) {
  return Arena::CreateInternal< ::msg::FloatMovePos >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MoveData* Arena::CreateMaybeMessage< ::msg::MoveData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MoveData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_Move_CS* Arena::CreateMaybeMessage< ::msg::MSG_Req_Move_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_Move_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_Move_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_Move_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_Move_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_TELE_PORT_CS* Arena::CreateMaybeMessage< ::msg::MSG_Req_TELE_PORT_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_TELE_PORT_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Server_Force_Move_SC* Arena::CreateMaybeMessage< ::msg::MSG_Server_Force_Move_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Server_Force_Move_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_Move_Failed_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_Move_Failed_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_Move_Failed_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_SetState_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_SetState_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_SetState_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_ClearState_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_ClearState_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_ClearState_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_MapScreenBatchRefreshNpc_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_MapScreenBatchRefreshNpc_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_MapScreenBatchRefreshNpc_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_MapScreenBatchRemoveNpc_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_MapScreenBatchRemoveNpc_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_MapScreenBatchRemoveNpc_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_MapScreenRefreshNpc_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_MapScreenRefreshNpc_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_MapScreenRefreshNpc_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_MapScreenRemoveNpc_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_MapScreenRemoveNpc_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_MapScreenRemoveNpc_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::FuncNpcData* Arena::CreateMaybeMessage< ::msg::FuncNpcData >(Arena* arena) {
  return Arena::CreateInternal< ::msg::FuncNpcData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_MapScreenFuncNpc_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_MapScreenFuncNpc_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_MapScreenFuncNpc_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_RetNpcMove_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_RetNpcMove_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_RetNpcMove_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_RetNpcWarpMove_SC* Arena::CreateMaybeMessage< ::msg::MSG_RetNpcWarpMove_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_RetNpcWarpMove_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_RetNpcDir_SC* Arena::CreateMaybeMessage< ::msg::MSG_RetNpcDir_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_RetNpcDir_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TempNpcInfo* Arena::CreateMaybeMessage< ::msg::TempNpcInfo >(Arena* arena) {
  return Arena::CreateInternal< ::msg::TempNpcInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_Summon_Npc_CS* Arena::CreateMaybeMessage< ::msg::MSG_Req_Summon_Npc_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_Summon_Npc_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_setTimeState_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_setTimeState_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_setTimeState_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_Ping_CS* Arena::CreateMaybeMessage< ::msg::MSG_Req_Ping_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_Ping_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_VisibleNpcList_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_VisibleNpcList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_VisibleNpcList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_RetNinePlayerLevelUp_SC* Arena::CreateMaybeMessage< ::msg::MSG_RetNinePlayerLevelUp_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_RetNinePlayerLevelUp_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_UpdateExpLevel_SC* Arena::CreateMaybeMessage< ::msg::MSG_UpdateExpLevel_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_UpdateExpLevel_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_NotifyAntiAddict_SC* Arena::CreateMaybeMessage< ::msg::MSG_NotifyAntiAddict_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_NotifyAntiAddict_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_ReqUpdateAntiAddict_CS* Arena::CreateMaybeMessage< ::msg::MSG_ReqUpdateAntiAddict_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_ReqUpdateAntiAddict_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_ReqEntrySelectState_CS* Arena::CreateMaybeMessage< ::msg::MSG_ReqEntrySelectState_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_ReqEntrySelectState_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_RetEntrySelectState_SC* Arena::CreateMaybeMessage< ::msg::MSG_RetEntrySelectState_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_RetEntrySelectState_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_RetHpMpToSelects_SC* Arena::CreateMaybeMessage< ::msg::MSG_RetHpMpToSelects_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_RetHpMpToSelects_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_ReqHeroAttributeData_CS* Arena::CreateMaybeMessage< ::msg::MSG_ReqHeroAttributeData_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_ReqHeroAttributeData_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_RetHeroAttributeData_SC* Arena::CreateMaybeMessage< ::msg::MSG_RetHeroAttributeData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_RetHeroAttributeData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_RetDiffLineOfLeader_SC* Arena::CreateMaybeMessage< ::msg::MSG_RetDiffLineOfLeader_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_RetDiffLineOfLeader_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_ReqJumptoLeaderLine_CS* Arena::CreateMaybeMessage< ::msg::MSG_ReqJumptoLeaderLine_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_ReqJumptoLeaderLine_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::SelectUserInfo* Arena::CreateMaybeMessage< ::msg::SelectUserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::msg::SelectUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_LoginOnReturnCharList_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_LoginOnReturnCharList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_LoginOnReturnCharList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_SelectCharToLogin_CS* Arena::CreateMaybeMessage< ::msg::MSG_Req_SelectCharToLogin_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_SelectCharToLogin_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_IS_NICKNAME_REPEATED_CSC* Arena::CreateMaybeMessage< ::msg::MSG_Req_IS_NICKNAME_REPEATED_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_IS_NICKNAME_REPEATED_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_Back_to_Select_CS* Arena::CreateMaybeMessage< ::msg::MSG_Req_Back_to_Select_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_Back_to_Select_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_Delete_Char_CSC* Arena::CreateMaybeMessage< ::msg::MSG_Req_Delete_Char_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_Delete_Char_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Req_Syn_MoveState_CS* Arena::CreateMaybeMessage< ::msg::MSG_Req_Syn_MoveState_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Req_Syn_MoveState_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_Find_Path_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_Find_Path_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_Find_Path_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_Rondom_Way_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_Rondom_Way_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_Rondom_Way_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Ret_Find_Path_End_SC* Arena::CreateMaybeMessage< ::msg::MSG_Ret_Find_Path_End_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Ret_Find_Path_End_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Show_Path_Way_End_CS* Arena::CreateMaybeMessage< ::msg::MSG_Show_Path_Way_End_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Show_Path_Way_End_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::LineItem* Arena::CreateMaybeMessage< ::msg::LineItem >(Arena* arena) {
  return Arena::CreateInternal< ::msg::LineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_NoticeClientAllLines_SC* Arena::CreateMaybeMessage< ::msg::MSG_NoticeClientAllLines_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_NoticeClientAllLines_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_UserReqChangeLine_CS* Arena::CreateMaybeMessage< ::msg::MSG_UserReqChangeLine_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_UserReqChangeLine_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_OnUserJump_CSC* Arena::CreateMaybeMessage< ::msg::MSG_OnUserJump_CSC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_OnUserJump_CSC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_NPCHatredList_SC* Arena::CreateMaybeMessage< ::msg::MSG_NPCHatredList_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_NPCHatredList_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::NPC_HatredList* Arena::CreateMaybeMessage< ::msg::NPC_HatredList >(Arena* arena) {
  return Arena::CreateInternal< ::msg::NPC_HatredList >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_ACCOUNT_SEC_PASSWD_SC* Arena::CreateMaybeMessage< ::msg::MSG_ACCOUNT_SEC_PASSWD_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_ACCOUNT_SEC_PASSWD_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_USER_REQ_SETPASSWD_CS* Arena::CreateMaybeMessage< ::msg::MSG_USER_REQ_SETPASSWD_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_USER_REQ_SETPASSWD_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_NEW_ROLE_CUTSCENE_SCS* Arena::CreateMaybeMessage< ::msg::MSG_NEW_ROLE_CUTSCENE_SCS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_NEW_ROLE_CUTSCENE_SCS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_User_Drop_SCS* Arena::CreateMaybeMessage< ::msg::MSG_User_Drop_SCS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_User_Drop_SCS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_START_CUTSCENE_SC* Arena::CreateMaybeMessage< ::msg::MSG_START_CUTSCENE_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_START_CUTSCENE_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_UserLoadingOk_CS* Arena::CreateMaybeMessage< ::msg::MSG_UserLoadingOk_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_UserLoadingOk_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_ReqQueryBalance_CS* Arena::CreateMaybeMessage< ::msg::MSG_ReqQueryBalance_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_ReqQueryBalance_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_RetQueryBalance_SC* Arena::CreateMaybeMessage< ::msg::MSG_RetQueryBalance_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_RetQueryBalance_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_ReqRecharge_CS* Arena::CreateMaybeMessage< ::msg::MSG_ReqRecharge_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_ReqRecharge_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_RetRecharge_SC* Arena::CreateMaybeMessage< ::msg::MSG_RetRecharge_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_RetRecharge_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_SetChooseTarget_CS* Arena::CreateMaybeMessage< ::msg::MSG_SetChooseTarget_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_SetChooseTarget_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_AttackTargetChange_SC* Arena::CreateMaybeMessage< ::msg::MSG_AttackTargetChange_SC >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_AttackTargetChange_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_NotifyAccountReuse* Arena::CreateMaybeMessage< ::msg::MSG_NotifyAccountReuse >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_NotifyAccountReuse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Notify_SceneLoaded_CS* Arena::CreateMaybeMessage< ::msg::MSG_Notify_SceneLoaded_CS >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Notify_SceneLoaded_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MSG_Upload_Crash_Info* Arena::CreateMaybeMessage< ::msg::MSG_Upload_Crash_Info >(Arena* arena) {
  return Arena::CreateInternal< ::msg::MSG_Upload_Crash_Info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
