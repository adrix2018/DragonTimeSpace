// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rune.proto

#include "rune.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rune_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuneGrooveItem_rune_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rune_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuneItem_rune_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rune_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunePageData_rune_2eproto;
namespace rune {
class RuneItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuneItem> _instance;
} _RuneItem_default_instance_;
class RuneGrooveItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RuneGrooveItem> _instance;
} _RuneGrooveItem_default_instance_;
class RunePageDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunePageData> _instance;
} _RunePageData_default_instance_;
class MSG_Req_RuneActiveData_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_RuneActiveData_CS> _instance;
} _MSG_Req_RuneActiveData_CS_default_instance_;
class MSG_Ret_RuneActiveData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_RuneActiveData_SC> _instance;
} _MSG_Ret_RuneActiveData_SC_default_instance_;
class MSG_Req_RunePageData_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_RunePageData_CS> _instance;
} _MSG_Req_RunePageData_CS_default_instance_;
class MSG_Ret_RunePageData_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_RunePageData_SC> _instance;
} _MSG_Ret_RunePageData_SC_default_instance_;
class MSG_Req_ActiveRune_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_ActiveRune_CS> _instance;
} _MSG_Req_ActiveRune_CS_default_instance_;
class MSG_Ret_ActiveRune_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_ActiveRune_SC> _instance;
} _MSG_Ret_ActiveRune_SC_default_instance_;
class MSG_Req_InsertRune_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_InsertRune_CS> _instance;
} _MSG_Req_InsertRune_CS_default_instance_;
class MSG_Ret_InsertRune_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_InsertRune_SC> _instance;
} _MSG_Ret_InsertRune_SC_default_instance_;
class MSG_Req_UnloadRune_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_UnloadRune_CS> _instance;
} _MSG_Req_UnloadRune_CS_default_instance_;
class MSG_Ret_UnloadRune_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_UnloadRune_SC> _instance;
} _MSG_Ret_UnloadRune_SC_default_instance_;
class MSG_Req_UnloadAllRune_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_UnloadAllRune_CS> _instance;
} _MSG_Req_UnloadAllRune_CS_default_instance_;
class MSG_Ret_UnloadAllRune_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_UnloadAllRune_SC> _instance;
} _MSG_Ret_UnloadAllRune_SC_default_instance_;
class MSG_Req_LevelupRune_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_LevelupRune_CS> _instance;
} _MSG_Req_LevelupRune_CS_default_instance_;
class MSG_Ret_LevelupRune_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_LevelupRune_SC> _instance;
} _MSG_Ret_LevelupRune_SC_default_instance_;
class MSG_Req_RunePageNameModify_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_RunePageNameModify_CS> _instance;
} _MSG_Req_RunePageNameModify_CS_default_instance_;
class MSG_Ret_RunePageNameModify_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_RunePageNameModify_SC> _instance;
} _MSG_Ret_RunePageNameModify_SC_default_instance_;
class MSG_Req_RuneSwitch_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Req_RuneSwitch_CS> _instance;
} _MSG_Req_RuneSwitch_CS_default_instance_;
class MSG_Ret_RuneSwitch_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_Ret_RuneSwitch_SC> _instance;
} _MSG_Ret_RuneSwitch_SC_default_instance_;
}  // namespace rune
static void InitDefaultsscc_info_MSG_Req_ActiveRune_CS_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Req_ActiveRune_CS_default_instance_;
    new (ptr) ::rune::MSG_Req_ActiveRune_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Req_ActiveRune_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_ActiveRune_CS_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_ActiveRune_CS_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_InsertRune_CS_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Req_InsertRune_CS_default_instance_;
    new (ptr) ::rune::MSG_Req_InsertRune_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Req_InsertRune_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_InsertRune_CS_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_InsertRune_CS_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_LevelupRune_CS_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Req_LevelupRune_CS_default_instance_;
    new (ptr) ::rune::MSG_Req_LevelupRune_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Req_LevelupRune_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_LevelupRune_CS_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_LevelupRune_CS_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_RuneActiveData_CS_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Req_RuneActiveData_CS_default_instance_;
    new (ptr) ::rune::MSG_Req_RuneActiveData_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Req_RuneActiveData_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_RuneActiveData_CS_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_RuneActiveData_CS_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_RunePageData_CS_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Req_RunePageData_CS_default_instance_;
    new (ptr) ::rune::MSG_Req_RunePageData_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Req_RunePageData_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_RunePageData_CS_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_RunePageData_CS_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_RunePageNameModify_CS_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Req_RunePageNameModify_CS_default_instance_;
    new (ptr) ::rune::MSG_Req_RunePageNameModify_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Req_RunePageNameModify_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_RunePageNameModify_CS_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_RunePageNameModify_CS_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_RuneSwitch_CS_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Req_RuneSwitch_CS_default_instance_;
    new (ptr) ::rune::MSG_Req_RuneSwitch_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Req_RuneSwitch_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_RuneSwitch_CS_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_RuneSwitch_CS_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_UnloadAllRune_CS_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Req_UnloadAllRune_CS_default_instance_;
    new (ptr) ::rune::MSG_Req_UnloadAllRune_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Req_UnloadAllRune_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_UnloadAllRune_CS_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_UnloadAllRune_CS_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Req_UnloadRune_CS_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Req_UnloadRune_CS_default_instance_;
    new (ptr) ::rune::MSG_Req_UnloadRune_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Req_UnloadRune_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Req_UnloadRune_CS_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Req_UnloadRune_CS_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_ActiveRune_SC_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Ret_ActiveRune_SC_default_instance_;
    new (ptr) ::rune::MSG_Ret_ActiveRune_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Ret_ActiveRune_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_ActiveRune_SC_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_ActiveRune_SC_rune_2eproto}, {
      &scc_info_RuneItem_rune_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_InsertRune_SC_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Ret_InsertRune_SC_default_instance_;
    new (ptr) ::rune::MSG_Ret_InsertRune_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Ret_InsertRune_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_InsertRune_SC_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_InsertRune_SC_rune_2eproto}, {
      &scc_info_RuneGrooveItem_rune_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_LevelupRune_SC_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Ret_LevelupRune_SC_default_instance_;
    new (ptr) ::rune::MSG_Ret_LevelupRune_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Ret_LevelupRune_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_LevelupRune_SC_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_LevelupRune_SC_rune_2eproto}, {
      &scc_info_RuneItem_rune_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_RuneActiveData_SC_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Ret_RuneActiveData_SC_default_instance_;
    new (ptr) ::rune::MSG_Ret_RuneActiveData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Ret_RuneActiveData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_RuneActiveData_SC_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_RuneActiveData_SC_rune_2eproto}, {
      &scc_info_RuneItem_rune_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_RunePageData_SC_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Ret_RunePageData_SC_default_instance_;
    new (ptr) ::rune::MSG_Ret_RunePageData_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Ret_RunePageData_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_Ret_RunePageData_SC_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_Ret_RunePageData_SC_rune_2eproto}, {
      &scc_info_RunePageData_rune_2eproto.base,}};

static void InitDefaultsscc_info_MSG_Ret_RunePageNameModify_SC_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Ret_RunePageNameModify_SC_default_instance_;
    new (ptr) ::rune::MSG_Ret_RunePageNameModify_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Ret_RunePageNameModify_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_RunePageNameModify_SC_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_RunePageNameModify_SC_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_RuneSwitch_SC_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Ret_RuneSwitch_SC_default_instance_;
    new (ptr) ::rune::MSG_Ret_RuneSwitch_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Ret_RuneSwitch_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_RuneSwitch_SC_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_RuneSwitch_SC_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_UnloadAllRune_SC_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Ret_UnloadAllRune_SC_default_instance_;
    new (ptr) ::rune::MSG_Ret_UnloadAllRune_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Ret_UnloadAllRune_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_UnloadAllRune_SC_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_UnloadAllRune_SC_rune_2eproto}, {}};

static void InitDefaultsscc_info_MSG_Ret_UnloadRune_SC_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_MSG_Ret_UnloadRune_SC_default_instance_;
    new (ptr) ::rune::MSG_Ret_UnloadRune_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::MSG_Ret_UnloadRune_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_Ret_UnloadRune_SC_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_Ret_UnloadRune_SC_rune_2eproto}, {}};

static void InitDefaultsscc_info_RuneGrooveItem_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_RuneGrooveItem_default_instance_;
    new (ptr) ::rune::RuneGrooveItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::RuneGrooveItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuneGrooveItem_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuneGrooveItem_rune_2eproto}, {}};

static void InitDefaultsscc_info_RuneItem_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_RuneItem_default_instance_;
    new (ptr) ::rune::RuneItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::RuneItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RuneItem_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RuneItem_rune_2eproto}, {}};

static void InitDefaultsscc_info_RunePageData_rune_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rune::_RunePageData_default_instance_;
    new (ptr) ::rune::RunePageData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rune::RunePageData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RunePageData_rune_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RunePageData_rune_2eproto}, {
      &scc_info_RuneGrooveItem_rune_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rune_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rune_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rune_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rune_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rune::RuneItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::RuneItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::RuneItem, uniqid_),
  PROTOBUF_FIELD_OFFSET(::rune::RuneItem, baseid_),
  PROTOBUF_FIELD_OFFSET(::rune::RuneItem, level_),
  PROTOBUF_FIELD_OFFSET(::rune::RuneItem, exp_),
  PROTOBUF_FIELD_OFFSET(::rune::RuneItem, insertcount_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::rune::RuneGrooveItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::RuneGrooveItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::RuneGrooveItem, uniqid_),
  PROTOBUF_FIELD_OFFSET(::rune::RuneGrooveItem, posid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rune::RunePageData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::RunePageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::RunePageData, item_),
  PROTOBUF_FIELD_OFFSET(::rune::RunePageData, pageid_),
  PROTOBUF_FIELD_OFFSET(::rune::RunePageData, pagename_),
  PROTOBUF_FIELD_OFFSET(::rune::RunePageData, score_),
  ~0u,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RuneActiveData_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RuneActiveData_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RuneActiveData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RuneActiveData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RuneActiveData_SC, runeitems_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RunePageData_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RunePageData_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RunePageData_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RunePageData_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RunePageData_SC, pagedatas_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_ActiveRune_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_ActiveRune_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_ActiveRune_CS, thisid_),
  0,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_ActiveRune_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_ActiveRune_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_ActiveRune_SC, runeitem_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_ActiveRune_SC, result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_InsertRune_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_InsertRune_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_InsertRune_CS, uniqid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_InsertRune_CS, posid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_InsertRune_CS, pageid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_InsertRune_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_InsertRune_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_InsertRune_SC, pageitem_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_InsertRune_SC, pageid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_InsertRune_SC, score_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_InsertRune_SC, result_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_UnloadRune_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_UnloadRune_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_UnloadRune_CS, posid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_UnloadRune_CS, pageid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_UnloadRune_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_UnloadRune_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_UnloadRune_SC, posid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_UnloadRune_SC, pageid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_UnloadRune_SC, score_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_UnloadRune_SC, result_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_UnloadAllRune_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_UnloadAllRune_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_UnloadAllRune_CS, pageid_),
  0,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_UnloadAllRune_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_UnloadAllRune_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_UnloadAllRune_SC, pageid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_UnloadAllRune_SC, result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_LevelupRune_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_LevelupRune_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_LevelupRune_CS, levelupid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_LevelupRune_CS, costuniqids_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_LevelupRune_CS, costthisids_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_LevelupRune_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_LevelupRune_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_LevelupRune_SC, runeitem_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_LevelupRune_SC, result_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RunePageNameModify_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RunePageNameModify_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RunePageNameModify_CS, pageid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RunePageNameModify_CS, pagename_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RunePageNameModify_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RunePageNameModify_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RunePageNameModify_SC, pageid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RunePageNameModify_SC, pagename_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RunePageNameModify_SC, result_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RuneSwitch_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RuneSwitch_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RuneSwitch_CS, pageid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Req_RuneSwitch_CS, herothisid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RuneSwitch_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RuneSwitch_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RuneSwitch_SC, errcode_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RuneSwitch_SC, herothisid_),
  PROTOBUF_FIELD_OFFSET(::rune::MSG_Ret_RuneSwitch_SC, pageid_),
  1,
  0,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::rune::RuneItem)},
  { 15, 22, sizeof(::rune::RuneGrooveItem)},
  { 24, 33, sizeof(::rune::RunePageData)},
  { 37, 42, sizeof(::rune::MSG_Req_RuneActiveData_CS)},
  { 42, 48, sizeof(::rune::MSG_Ret_RuneActiveData_SC)},
  { 49, 54, sizeof(::rune::MSG_Req_RunePageData_CS)},
  { 54, 60, sizeof(::rune::MSG_Ret_RunePageData_SC)},
  { 61, 67, sizeof(::rune::MSG_Req_ActiveRune_CS)},
  { 68, 75, sizeof(::rune::MSG_Ret_ActiveRune_SC)},
  { 77, 85, sizeof(::rune::MSG_Req_InsertRune_CS)},
  { 88, 97, sizeof(::rune::MSG_Ret_InsertRune_SC)},
  { 101, 108, sizeof(::rune::MSG_Req_UnloadRune_CS)},
  { 110, 119, sizeof(::rune::MSG_Ret_UnloadRune_SC)},
  { 123, 129, sizeof(::rune::MSG_Req_UnloadAllRune_CS)},
  { 130, 137, sizeof(::rune::MSG_Ret_UnloadAllRune_SC)},
  { 139, 147, sizeof(::rune::MSG_Req_LevelupRune_CS)},
  { 150, 157, sizeof(::rune::MSG_Ret_LevelupRune_SC)},
  { 159, 166, sizeof(::rune::MSG_Req_RunePageNameModify_CS)},
  { 168, 176, sizeof(::rune::MSG_Ret_RunePageNameModify_SC)},
  { 179, 186, sizeof(::rune::MSG_Req_RuneSwitch_CS)},
  { 188, 196, sizeof(::rune::MSG_Ret_RuneSwitch_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_RuneItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_RuneGrooveItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_RunePageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Req_RuneActiveData_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Ret_RuneActiveData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Req_RunePageData_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Ret_RunePageData_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Req_ActiveRune_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Ret_ActiveRune_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Req_InsertRune_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Ret_InsertRune_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Req_UnloadRune_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Ret_UnloadRune_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Req_UnloadAllRune_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Ret_UnloadAllRune_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Req_LevelupRune_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Ret_LevelupRune_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Req_RunePageNameModify_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Ret_RunePageNameModify_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Req_RuneSwitch_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rune::_MSG_Ret_RuneSwitch_SC_default_instance_),
};

const char descriptor_table_protodef_rune_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nrune.proto\022\004rune\"[\n\010RuneItem\022\016\n\006uniqid"
  "\030\001 \001(\r\022\016\n\006baseid\030\002 \001(\r\022\r\n\005level\030\003 \001(\r\022\013\n"
  "\003exp\030\004 \001(\r\022\023\n\013insertcount\030\005 \001(\r\"/\n\016RuneG"
  "rooveItem\022\016\n\006uniqid\030\001 \001(\r\022\r\n\005posid\030\002 \001(\r"
  "\"c\n\014RunePageData\022\"\n\004item\030\001 \003(\0132\024.rune.Ru"
  "neGrooveItem\022\016\n\006pageid\030\002 \001(\r\022\020\n\010pagename"
  "\030\003 \001(\t\022\r\n\005score\030\004 \001(\r\"\033\n\031MSG_Req_RuneAct"
  "iveData_CS\">\n\031MSG_Ret_RuneActiveData_SC\022"
  "!\n\truneitems\030\001 \003(\0132\016.rune.RuneItem\"\031\n\027MS"
  "G_Req_RunePageData_CS\"@\n\027MSG_Ret_RunePag"
  "eData_SC\022%\n\tpagedatas\030\001 \003(\0132\022.rune.RuneP"
  "ageData\"\'\n\025MSG_Req_ActiveRune_CS\022\016\n\006this"
  "id\030\001 \001(\t\"I\n\025MSG_Ret_ActiveRune_SC\022 \n\010run"
  "eitem\030\001 \001(\0132\016.rune.RuneItem\022\016\n\006result\030\002 "
  "\001(\010\"F\n\025MSG_Req_InsertRune_CS\022\016\n\006uniqid\030\001"
  " \001(\r\022\r\n\005posid\030\002 \001(\r\022\016\n\006pageid\030\003 \001(\r\"n\n\025M"
  "SG_Ret_InsertRune_SC\022&\n\010pageitem\030\001 \001(\0132\024"
  ".rune.RuneGrooveItem\022\016\n\006pageid\030\002 \001(\r\022\r\n\005"
  "score\030\003 \001(\r\022\016\n\006result\030\004 \001(\010\"6\n\025MSG_Req_U"
  "nloadRune_CS\022\r\n\005posid\030\001 \001(\r\022\016\n\006pageid\030\002 "
  "\001(\r\"U\n\025MSG_Ret_UnloadRune_SC\022\r\n\005posid\030\001 "
  "\001(\r\022\016\n\006pageid\030\002 \001(\r\022\r\n\005score\030\003 \001(\r\022\016\n\006re"
  "sult\030\004 \001(\010\"*\n\030MSG_Req_UnloadAllRune_CS\022\016"
  "\n\006pageid\030\001 \001(\r\":\n\030MSG_Ret_UnloadAllRune_"
  "SC\022\016\n\006pageid\030\001 \001(\r\022\016\n\006result\030\002 \001(\010\"U\n\026MS"
  "G_Req_LevelupRune_CS\022\021\n\tlevelupid\030\001 \001(\r\022"
  "\023\n\013costuniqids\030\002 \003(\r\022\023\n\013costthisids\030\003 \003("
  "\t\"J\n\026MSG_Ret_LevelupRune_SC\022 \n\010runeitem\030"
  "\001 \001(\0132\016.rune.RuneItem\022\016\n\006result\030\002 \001(\010\"A\n"
  "\035MSG_Req_RunePageNameModify_CS\022\016\n\006pageid"
  "\030\001 \001(\r\022\020\n\010pagename\030\002 \001(\t\"Q\n\035MSG_Ret_Rune"
  "PageNameModify_SC\022\016\n\006pageid\030\001 \001(\r\022\020\n\010pag"
  "ename\030\002 \001(\t\022\016\n\006result\030\003 \001(\010\";\n\025MSG_Req_R"
  "uneSwitch_CS\022\016\n\006pageid\030\001 \001(\r\022\022\n\nherothis"
  "id\030\002 \001(\t\"L\n\025MSG_Ret_RuneSwitch_SC\022\017\n\007err"
  "code\030\001 \001(\r\022\022\n\nherothisid\030\002 \001(\t\022\016\n\006pageid"
  "\030\003 \001(\r*\214\001\n\010RuneType\022\022\n\016RUNE_TYPE_NONE\020\000\022"
  "\024\n\020RUNE_TYPE_CIRCLE\020\001\022\025\n\021RUNE_TYPE_DIAMO"
  "ND\020\002\022\026\n\022RUNE_TYPE_TRIANGLE\020\003\022\024\n\020RUNE_TYP"
  "E_SQUARE\020\004\022\021\n\rRUNE_TYPE_MAX\020\005*\211\002\n\nRuneEf"
  "fect\022\024\n\020RUNE_EFFECT_NONE\020\000\022\025\n\021RUNE_EFFEC"
  "T_MAXHP\020\001\022\024\n\020RUNE_EFFECT_PDEF\020\002\022\024\n\020RUNE_"
  "EFFECT_MDEF\020\003\022\024\n\020RUNE_EFFECT_PDAM\020\004\022\024\n\020R"
  "UNE_EFFECT_MDAM\020\005\022\024\n\020RUNE_EFFECT_BANG\020\006\022"
  "\025\n\021RUNE_EFFECT_BLOCK\020\007\022\031\n\025RUNE_EFFECT_TO"
  "UGHNESS\020\010\022\031\n\025RUNE_EFFECT_PENETRATE\020\t\022\023\n\017"
  "RUNE_EFFECT_MAX\020\n*\232\001\n\013RuneQuality\022\025\n\021RUN"
  "E_QUALITY_NONE\020\000\022\026\n\022RUNE_QUALITY_WHITE\020\001"
  "\022\026\n\022RUNE_QUALITY_GREEN\020\002\022\025\n\021RUNE_QUALITY"
  "_BLUE\020\003\022\027\n\023RUNE_QUALITY_PURPLE\020\004\022\024\n\020RUNE"
  "_QUALITY_MAX\020\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rune_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rune_2eproto_sccs[21] = {
  &scc_info_MSG_Req_ActiveRune_CS_rune_2eproto.base,
  &scc_info_MSG_Req_InsertRune_CS_rune_2eproto.base,
  &scc_info_MSG_Req_LevelupRune_CS_rune_2eproto.base,
  &scc_info_MSG_Req_RuneActiveData_CS_rune_2eproto.base,
  &scc_info_MSG_Req_RunePageData_CS_rune_2eproto.base,
  &scc_info_MSG_Req_RunePageNameModify_CS_rune_2eproto.base,
  &scc_info_MSG_Req_RuneSwitch_CS_rune_2eproto.base,
  &scc_info_MSG_Req_UnloadAllRune_CS_rune_2eproto.base,
  &scc_info_MSG_Req_UnloadRune_CS_rune_2eproto.base,
  &scc_info_MSG_Ret_ActiveRune_SC_rune_2eproto.base,
  &scc_info_MSG_Ret_InsertRune_SC_rune_2eproto.base,
  &scc_info_MSG_Ret_LevelupRune_SC_rune_2eproto.base,
  &scc_info_MSG_Ret_RuneActiveData_SC_rune_2eproto.base,
  &scc_info_MSG_Ret_RunePageData_SC_rune_2eproto.base,
  &scc_info_MSG_Ret_RunePageNameModify_SC_rune_2eproto.base,
  &scc_info_MSG_Ret_RuneSwitch_SC_rune_2eproto.base,
  &scc_info_MSG_Ret_UnloadAllRune_SC_rune_2eproto.base,
  &scc_info_MSG_Ret_UnloadRune_SC_rune_2eproto.base,
  &scc_info_RuneGrooveItem_rune_2eproto.base,
  &scc_info_RuneItem_rune_2eproto.base,
  &scc_info_RunePageData_rune_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rune_2eproto_once;
static bool descriptor_table_rune_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rune_2eproto = {
  &descriptor_table_rune_2eproto_initialized, descriptor_table_protodef_rune_2eproto, "rune.proto", 2014,
  &descriptor_table_rune_2eproto_once, descriptor_table_rune_2eproto_sccs, descriptor_table_rune_2eproto_deps, 21, 0,
  schemas, file_default_instances, TableStruct_rune_2eproto::offsets,
  file_level_metadata_rune_2eproto, 21, file_level_enum_descriptors_rune_2eproto, file_level_service_descriptors_rune_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rune_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rune_2eproto)), true);
namespace rune {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuneType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rune_2eproto);
  return file_level_enum_descriptors_rune_2eproto[0];
}
bool RuneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuneEffect_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rune_2eproto);
  return file_level_enum_descriptors_rune_2eproto[1];
}
bool RuneEffect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RuneQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rune_2eproto);
  return file_level_enum_descriptors_rune_2eproto[2];
}
bool RuneQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RuneItem::InitAsDefaultInstance() {
}
class RuneItem::_Internal {
 public:
  using HasBits = decltype(std::declval<RuneItem>()._has_bits_);
  static void set_has_uniqid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_baseid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_insertcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RuneItem::RuneItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.RuneItem)
}
RuneItem::RuneItem(const RuneItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uniqid_, &from.uniqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&insertcount_) -
    reinterpret_cast<char*>(&uniqid_)) + sizeof(insertcount_));
  // @@protoc_insertion_point(copy_constructor:rune.RuneItem)
}

void RuneItem::SharedCtor() {
  ::memset(&uniqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&insertcount_) -
      reinterpret_cast<char*>(&uniqid_)) + sizeof(insertcount_));
}

RuneItem::~RuneItem() {
  // @@protoc_insertion_point(destructor:rune.RuneItem)
  SharedDtor();
}

void RuneItem::SharedDtor() {
}

void RuneItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuneItem& RuneItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuneItem_rune_2eproto.base);
  return *internal_default_instance();
}


void RuneItem::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.RuneItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&uniqid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&insertcount_) -
        reinterpret_cast<char*>(&uniqid_)) + sizeof(insertcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RuneItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 uniqid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uniqid(&has_bits);
          uniqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 baseid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_baseid(&has_bits);
          baseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 exp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 insertcount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_insertcount(&has_bits);
          insertcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuneItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.RuneItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 uniqid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uniqid(), target);
  }

  // optional uint32 baseid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_baseid(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 exp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_exp(), target);
  }

  // optional uint32 insertcount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_insertcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.RuneItem)
  return target;
}

size_t RuneItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.RuneItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 uniqid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uniqid());
    }

    // optional uint32 baseid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_baseid());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 exp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_exp());
    }

    // optional uint32 insertcount = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_insertcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuneItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.RuneItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RuneItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuneItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.RuneItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.RuneItem)
    MergeFrom(*source);
  }
}

void RuneItem::MergeFrom(const RuneItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.RuneItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      uniqid_ = from.uniqid_;
    }
    if (cached_has_bits & 0x00000002u) {
      baseid_ = from.baseid_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000010u) {
      insertcount_ = from.insertcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RuneItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.RuneItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneItem::CopyFrom(const RuneItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.RuneItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneItem::IsInitialized() const {
  return true;
}

void RuneItem::InternalSwap(RuneItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uniqid_, other->uniqid_);
  swap(baseid_, other->baseid_);
  swap(level_, other->level_);
  swap(exp_, other->exp_);
  swap(insertcount_, other->insertcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuneItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RuneGrooveItem::InitAsDefaultInstance() {
}
class RuneGrooveItem::_Internal {
 public:
  using HasBits = decltype(std::declval<RuneGrooveItem>()._has_bits_);
  static void set_has_uniqid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RuneGrooveItem::RuneGrooveItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.RuneGrooveItem)
}
RuneGrooveItem::RuneGrooveItem(const RuneGrooveItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uniqid_, &from.uniqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&posid_) -
    reinterpret_cast<char*>(&uniqid_)) + sizeof(posid_));
  // @@protoc_insertion_point(copy_constructor:rune.RuneGrooveItem)
}

void RuneGrooveItem::SharedCtor() {
  ::memset(&uniqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posid_) -
      reinterpret_cast<char*>(&uniqid_)) + sizeof(posid_));
}

RuneGrooveItem::~RuneGrooveItem() {
  // @@protoc_insertion_point(destructor:rune.RuneGrooveItem)
  SharedDtor();
}

void RuneGrooveItem::SharedDtor() {
}

void RuneGrooveItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RuneGrooveItem& RuneGrooveItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RuneGrooveItem_rune_2eproto.base);
  return *internal_default_instance();
}


void RuneGrooveItem::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.RuneGrooveItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&uniqid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&posid_) -
        reinterpret_cast<char*>(&uniqid_)) + sizeof(posid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RuneGrooveItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 uniqid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uniqid(&has_bits);
          uniqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 posid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_posid(&has_bits);
          posid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuneGrooveItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.RuneGrooveItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 uniqid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uniqid(), target);
  }

  // optional uint32 posid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.RuneGrooveItem)
  return target;
}

size_t RuneGrooveItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.RuneGrooveItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 uniqid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uniqid());
    }

    // optional uint32 posid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RuneGrooveItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.RuneGrooveItem)
  GOOGLE_DCHECK_NE(&from, this);
  const RuneGrooveItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RuneGrooveItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.RuneGrooveItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.RuneGrooveItem)
    MergeFrom(*source);
  }
}

void RuneGrooveItem::MergeFrom(const RuneGrooveItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.RuneGrooveItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      uniqid_ = from.uniqid_;
    }
    if (cached_has_bits & 0x00000002u) {
      posid_ = from.posid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RuneGrooveItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.RuneGrooveItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneGrooveItem::CopyFrom(const RuneGrooveItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.RuneGrooveItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneGrooveItem::IsInitialized() const {
  return true;
}

void RuneGrooveItem::InternalSwap(RuneGrooveItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uniqid_, other->uniqid_);
  swap(posid_, other->posid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuneGrooveItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunePageData::InitAsDefaultInstance() {
}
class RunePageData::_Internal {
 public:
  using HasBits = decltype(std::declval<RunePageData>()._has_bits_);
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pagename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RunePageData::RunePageData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.RunePageData)
}
RunePageData::RunePageData(const RunePageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pagename()) {
    pagename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pagename_);
  }
  ::memcpy(&pageid_, &from.pageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&pageid_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:rune.RunePageData)
}

void RunePageData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunePageData_rune_2eproto.base);
  pagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&pageid_)) + sizeof(score_));
}

RunePageData::~RunePageData() {
  // @@protoc_insertion_point(destructor:rune.RunePageData)
  SharedDtor();
}

void RunePageData::SharedDtor() {
  pagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RunePageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunePageData& RunePageData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunePageData_rune_2eproto.base);
  return *internal_default_instance();
}


void RunePageData::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.RunePageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pagename_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&pageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&pageid_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RunePageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rune.RuneGrooveItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 pageid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pagename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rune.RunePageData.pagename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RunePageData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.RunePageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rune.RuneGrooveItem item = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_item(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 pageid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pageid(), target);
  }

  // optional string pagename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pagename().data(), static_cast<int>(this->_internal_pagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rune.RunePageData.pagename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pagename(), target);
  }

  // optional uint32 score = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.RunePageData)
  return target;
}

size_t RunePageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.RunePageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rune.RuneGrooveItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string pagename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pagename());
    }

    // optional uint32 pageid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageid());
    }

    // optional uint32 score = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunePageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.RunePageData)
  GOOGLE_DCHECK_NE(&from, this);
  const RunePageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunePageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.RunePageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.RunePageData)
    MergeFrom(*source);
  }
}

void RunePageData::MergeFrom(const RunePageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.RunePageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pagename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pagename_);
    }
    if (cached_has_bits & 0x00000002u) {
      pageid_ = from.pageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RunePageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.RunePageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunePageData::CopyFrom(const RunePageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.RunePageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunePageData::IsInitialized() const {
  return true;
}

void RunePageData::InternalSwap(RunePageData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_.InternalSwap(&other->item_);
  pagename_.Swap(&other->pagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pageid_, other->pageid_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunePageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_RuneActiveData_CS::InitAsDefaultInstance() {
}
class MSG_Req_RuneActiveData_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_RuneActiveData_CS>()._has_bits_);
};

MSG_Req_RuneActiveData_CS::MSG_Req_RuneActiveData_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Req_RuneActiveData_CS)
}
MSG_Req_RuneActiveData_CS::MSG_Req_RuneActiveData_CS(const MSG_Req_RuneActiveData_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Req_RuneActiveData_CS)
}

void MSG_Req_RuneActiveData_CS::SharedCtor() {
}

MSG_Req_RuneActiveData_CS::~MSG_Req_RuneActiveData_CS() {
  // @@protoc_insertion_point(destructor:rune.MSG_Req_RuneActiveData_CS)
  SharedDtor();
}

void MSG_Req_RuneActiveData_CS::SharedDtor() {
}

void MSG_Req_RuneActiveData_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_RuneActiveData_CS& MSG_Req_RuneActiveData_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_RuneActiveData_CS_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_RuneActiveData_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Req_RuneActiveData_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_RuneActiveData_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_RuneActiveData_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Req_RuneActiveData_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Req_RuneActiveData_CS)
  return target;
}

size_t MSG_Req_RuneActiveData_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Req_RuneActiveData_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_RuneActiveData_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Req_RuneActiveData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_RuneActiveData_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_RuneActiveData_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Req_RuneActiveData_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Req_RuneActiveData_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_RuneActiveData_CS::MergeFrom(const MSG_Req_RuneActiveData_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Req_RuneActiveData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_RuneActiveData_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Req_RuneActiveData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_RuneActiveData_CS::CopyFrom(const MSG_Req_RuneActiveData_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Req_RuneActiveData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_RuneActiveData_CS::IsInitialized() const {
  return true;
}

void MSG_Req_RuneActiveData_CS::InternalSwap(MSG_Req_RuneActiveData_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_RuneActiveData_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_RuneActiveData_SC::InitAsDefaultInstance() {
}
class MSG_Ret_RuneActiveData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_RuneActiveData_SC>()._has_bits_);
};

MSG_Ret_RuneActiveData_SC::MSG_Ret_RuneActiveData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Ret_RuneActiveData_SC)
}
MSG_Ret_RuneActiveData_SC::MSG_Ret_RuneActiveData_SC(const MSG_Ret_RuneActiveData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      runeitems_(from.runeitems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Ret_RuneActiveData_SC)
}

void MSG_Ret_RuneActiveData_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_RuneActiveData_SC_rune_2eproto.base);
}

MSG_Ret_RuneActiveData_SC::~MSG_Ret_RuneActiveData_SC() {
  // @@protoc_insertion_point(destructor:rune.MSG_Ret_RuneActiveData_SC)
  SharedDtor();
}

void MSG_Ret_RuneActiveData_SC::SharedDtor() {
}

void MSG_Ret_RuneActiveData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_RuneActiveData_SC& MSG_Ret_RuneActiveData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_RuneActiveData_SC_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_RuneActiveData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Ret_RuneActiveData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runeitems_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_RuneActiveData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rune.RuneItem runeitems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_runeitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_RuneActiveData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Ret_RuneActiveData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rune.RuneItem runeitems = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_runeitems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_runeitems(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Ret_RuneActiveData_SC)
  return target;
}

size_t MSG_Ret_RuneActiveData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Ret_RuneActiveData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rune.RuneItem runeitems = 1;
  total_size += 1UL * this->_internal_runeitems_size();
  for (const auto& msg : this->runeitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_RuneActiveData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Ret_RuneActiveData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_RuneActiveData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_RuneActiveData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Ret_RuneActiveData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Ret_RuneActiveData_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_RuneActiveData_SC::MergeFrom(const MSG_Ret_RuneActiveData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Ret_RuneActiveData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  runeitems_.MergeFrom(from.runeitems_);
}

void MSG_Ret_RuneActiveData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Ret_RuneActiveData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_RuneActiveData_SC::CopyFrom(const MSG_Ret_RuneActiveData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Ret_RuneActiveData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_RuneActiveData_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_RuneActiveData_SC::InternalSwap(MSG_Ret_RuneActiveData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  runeitems_.InternalSwap(&other->runeitems_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_RuneActiveData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_RunePageData_CS::InitAsDefaultInstance() {
}
class MSG_Req_RunePageData_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_RunePageData_CS>()._has_bits_);
};

MSG_Req_RunePageData_CS::MSG_Req_RunePageData_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Req_RunePageData_CS)
}
MSG_Req_RunePageData_CS::MSG_Req_RunePageData_CS(const MSG_Req_RunePageData_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Req_RunePageData_CS)
}

void MSG_Req_RunePageData_CS::SharedCtor() {
}

MSG_Req_RunePageData_CS::~MSG_Req_RunePageData_CS() {
  // @@protoc_insertion_point(destructor:rune.MSG_Req_RunePageData_CS)
  SharedDtor();
}

void MSG_Req_RunePageData_CS::SharedDtor() {
}

void MSG_Req_RunePageData_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_RunePageData_CS& MSG_Req_RunePageData_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_RunePageData_CS_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_RunePageData_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Req_RunePageData_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_RunePageData_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_RunePageData_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Req_RunePageData_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Req_RunePageData_CS)
  return target;
}

size_t MSG_Req_RunePageData_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Req_RunePageData_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_RunePageData_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Req_RunePageData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_RunePageData_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_RunePageData_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Req_RunePageData_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Req_RunePageData_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_RunePageData_CS::MergeFrom(const MSG_Req_RunePageData_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Req_RunePageData_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MSG_Req_RunePageData_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Req_RunePageData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_RunePageData_CS::CopyFrom(const MSG_Req_RunePageData_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Req_RunePageData_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_RunePageData_CS::IsInitialized() const {
  return true;
}

void MSG_Req_RunePageData_CS::InternalSwap(MSG_Req_RunePageData_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_RunePageData_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_RunePageData_SC::InitAsDefaultInstance() {
}
class MSG_Ret_RunePageData_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_RunePageData_SC>()._has_bits_);
};

MSG_Ret_RunePageData_SC::MSG_Ret_RunePageData_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Ret_RunePageData_SC)
}
MSG_Ret_RunePageData_SC::MSG_Ret_RunePageData_SC(const MSG_Ret_RunePageData_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pagedatas_(from.pagedatas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Ret_RunePageData_SC)
}

void MSG_Ret_RunePageData_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_RunePageData_SC_rune_2eproto.base);
}

MSG_Ret_RunePageData_SC::~MSG_Ret_RunePageData_SC() {
  // @@protoc_insertion_point(destructor:rune.MSG_Ret_RunePageData_SC)
  SharedDtor();
}

void MSG_Ret_RunePageData_SC::SharedDtor() {
}

void MSG_Ret_RunePageData_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_RunePageData_SC& MSG_Ret_RunePageData_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_RunePageData_SC_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_RunePageData_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Ret_RunePageData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pagedatas_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_RunePageData_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .rune.RunePageData pagedatas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pagedatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_RunePageData_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Ret_RunePageData_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rune.RunePageData pagedatas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pagedatas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pagedatas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Ret_RunePageData_SC)
  return target;
}

size_t MSG_Ret_RunePageData_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Ret_RunePageData_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rune.RunePageData pagedatas = 1;
  total_size += 1UL * this->_internal_pagedatas_size();
  for (const auto& msg : this->pagedatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_RunePageData_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Ret_RunePageData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_RunePageData_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_RunePageData_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Ret_RunePageData_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Ret_RunePageData_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_RunePageData_SC::MergeFrom(const MSG_Ret_RunePageData_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Ret_RunePageData_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pagedatas_.MergeFrom(from.pagedatas_);
}

void MSG_Ret_RunePageData_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Ret_RunePageData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_RunePageData_SC::CopyFrom(const MSG_Ret_RunePageData_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Ret_RunePageData_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_RunePageData_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_RunePageData_SC::InternalSwap(MSG_Ret_RunePageData_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pagedatas_.InternalSwap(&other->pagedatas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_RunePageData_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_ActiveRune_CS::InitAsDefaultInstance() {
}
class MSG_Req_ActiveRune_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_ActiveRune_CS>()._has_bits_);
  static void set_has_thisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_ActiveRune_CS::MSG_Req_ActiveRune_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Req_ActiveRune_CS)
}
MSG_Req_ActiveRune_CS::MSG_Req_ActiveRune_CS(const MSG_Req_ActiveRune_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_thisid()) {
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Req_ActiveRune_CS)
}

void MSG_Req_ActiveRune_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_ActiveRune_CS_rune_2eproto.base);
  thisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MSG_Req_ActiveRune_CS::~MSG_Req_ActiveRune_CS() {
  // @@protoc_insertion_point(destructor:rune.MSG_Req_ActiveRune_CS)
  SharedDtor();
}

void MSG_Req_ActiveRune_CS::SharedDtor() {
  thisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_ActiveRune_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_ActiveRune_CS& MSG_Req_ActiveRune_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_ActiveRune_CS_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_ActiveRune_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Req_ActiveRune_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    thisid_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_ActiveRune_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string thisid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_thisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rune.MSG_Req_ActiveRune_CS.thisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_ActiveRune_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Req_ActiveRune_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string thisid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_thisid().data(), static_cast<int>(this->_internal_thisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rune.MSG_Req_ActiveRune_CS.thisid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_thisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Req_ActiveRune_CS)
  return target;
}

size_t MSG_Req_ActiveRune_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Req_ActiveRune_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string thisid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thisid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_ActiveRune_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Req_ActiveRune_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_ActiveRune_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_ActiveRune_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Req_ActiveRune_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Req_ActiveRune_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_ActiveRune_CS::MergeFrom(const MSG_Req_ActiveRune_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Req_ActiveRune_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thisid()) {
    _has_bits_[0] |= 0x00000001u;
    thisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thisid_);
  }
}

void MSG_Req_ActiveRune_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Req_ActiveRune_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_ActiveRune_CS::CopyFrom(const MSG_Req_ActiveRune_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Req_ActiveRune_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_ActiveRune_CS::IsInitialized() const {
  return true;
}

void MSG_Req_ActiveRune_CS::InternalSwap(MSG_Req_ActiveRune_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  thisid_.Swap(&other->thisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_ActiveRune_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_ActiveRune_SC::InitAsDefaultInstance() {
  ::rune::_MSG_Ret_ActiveRune_SC_default_instance_._instance.get_mutable()->runeitem_ = const_cast< ::rune::RuneItem*>(
      ::rune::RuneItem::internal_default_instance());
}
class MSG_Ret_ActiveRune_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_ActiveRune_SC>()._has_bits_);
  static const ::rune::RuneItem& runeitem(const MSG_Ret_ActiveRune_SC* msg);
  static void set_has_runeitem(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::rune::RuneItem&
MSG_Ret_ActiveRune_SC::_Internal::runeitem(const MSG_Ret_ActiveRune_SC* msg) {
  return *msg->runeitem_;
}
MSG_Ret_ActiveRune_SC::MSG_Ret_ActiveRune_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Ret_ActiveRune_SC)
}
MSG_Ret_ActiveRune_SC::MSG_Ret_ActiveRune_SC(const MSG_Ret_ActiveRune_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_runeitem()) {
    runeitem_ = new ::rune::RuneItem(*from.runeitem_);
  } else {
    runeitem_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Ret_ActiveRune_SC)
}

void MSG_Ret_ActiveRune_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_ActiveRune_SC_rune_2eproto.base);
  ::memset(&runeitem_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&runeitem_)) + sizeof(result_));
}

MSG_Ret_ActiveRune_SC::~MSG_Ret_ActiveRune_SC() {
  // @@protoc_insertion_point(destructor:rune.MSG_Ret_ActiveRune_SC)
  SharedDtor();
}

void MSG_Ret_ActiveRune_SC::SharedDtor() {
  if (this != internal_default_instance()) delete runeitem_;
}

void MSG_Ret_ActiveRune_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_ActiveRune_SC& MSG_Ret_ActiveRune_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_ActiveRune_SC_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_ActiveRune_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Ret_ActiveRune_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(runeitem_ != nullptr);
    runeitem_->Clear();
  }
  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_ActiveRune_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .rune.RuneItem runeitem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_runeitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_ActiveRune_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Ret_ActiveRune_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rune.RuneItem runeitem = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::runeitem(this), target, stream);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Ret_ActiveRune_SC)
  return target;
}

size_t MSG_Ret_ActiveRune_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Ret_ActiveRune_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .rune.RuneItem runeitem = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *runeitem_);
    }

    // optional bool result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_ActiveRune_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Ret_ActiveRune_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_ActiveRune_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_ActiveRune_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Ret_ActiveRune_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Ret_ActiveRune_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_ActiveRune_SC::MergeFrom(const MSG_Ret_ActiveRune_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Ret_ActiveRune_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_runeitem()->::rune::RuneItem::MergeFrom(from._internal_runeitem());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_ActiveRune_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Ret_ActiveRune_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_ActiveRune_SC::CopyFrom(const MSG_Ret_ActiveRune_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Ret_ActiveRune_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_ActiveRune_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_ActiveRune_SC::InternalSwap(MSG_Ret_ActiveRune_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(runeitem_, other->runeitem_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_ActiveRune_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_InsertRune_CS::InitAsDefaultInstance() {
}
class MSG_Req_InsertRune_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_InsertRune_CS>()._has_bits_);
  static void set_has_uniqid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_posid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Req_InsertRune_CS::MSG_Req_InsertRune_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Req_InsertRune_CS)
}
MSG_Req_InsertRune_CS::MSG_Req_InsertRune_CS(const MSG_Req_InsertRune_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uniqid_, &from.uniqid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pageid_) -
    reinterpret_cast<char*>(&uniqid_)) + sizeof(pageid_));
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Req_InsertRune_CS)
}

void MSG_Req_InsertRune_CS::SharedCtor() {
  ::memset(&uniqid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pageid_) -
      reinterpret_cast<char*>(&uniqid_)) + sizeof(pageid_));
}

MSG_Req_InsertRune_CS::~MSG_Req_InsertRune_CS() {
  // @@protoc_insertion_point(destructor:rune.MSG_Req_InsertRune_CS)
  SharedDtor();
}

void MSG_Req_InsertRune_CS::SharedDtor() {
}

void MSG_Req_InsertRune_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_InsertRune_CS& MSG_Req_InsertRune_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_InsertRune_CS_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_InsertRune_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Req_InsertRune_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&uniqid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pageid_) -
        reinterpret_cast<char*>(&uniqid_)) + sizeof(pageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_InsertRune_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 uniqid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uniqid(&has_bits);
          uniqid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 posid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_posid(&has_bits);
          posid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pageid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_InsertRune_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Req_InsertRune_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 uniqid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_uniqid(), target);
  }

  // optional uint32 posid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_posid(), target);
  }

  // optional uint32 pageid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Req_InsertRune_CS)
  return target;
}

size_t MSG_Req_InsertRune_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Req_InsertRune_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 uniqid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uniqid());
    }

    // optional uint32 posid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posid());
    }

    // optional uint32 pageid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_InsertRune_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Req_InsertRune_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_InsertRune_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_InsertRune_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Req_InsertRune_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Req_InsertRune_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_InsertRune_CS::MergeFrom(const MSG_Req_InsertRune_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Req_InsertRune_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      uniqid_ = from.uniqid_;
    }
    if (cached_has_bits & 0x00000002u) {
      posid_ = from.posid_;
    }
    if (cached_has_bits & 0x00000004u) {
      pageid_ = from.pageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_InsertRune_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Req_InsertRune_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_InsertRune_CS::CopyFrom(const MSG_Req_InsertRune_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Req_InsertRune_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_InsertRune_CS::IsInitialized() const {
  return true;
}

void MSG_Req_InsertRune_CS::InternalSwap(MSG_Req_InsertRune_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uniqid_, other->uniqid_);
  swap(posid_, other->posid_);
  swap(pageid_, other->pageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_InsertRune_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_InsertRune_SC::InitAsDefaultInstance() {
  ::rune::_MSG_Ret_InsertRune_SC_default_instance_._instance.get_mutable()->pageitem_ = const_cast< ::rune::RuneGrooveItem*>(
      ::rune::RuneGrooveItem::internal_default_instance());
}
class MSG_Ret_InsertRune_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_InsertRune_SC>()._has_bits_);
  static const ::rune::RuneGrooveItem& pageitem(const MSG_Ret_InsertRune_SC* msg);
  static void set_has_pageitem(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::rune::RuneGrooveItem&
MSG_Ret_InsertRune_SC::_Internal::pageitem(const MSG_Ret_InsertRune_SC* msg) {
  return *msg->pageitem_;
}
MSG_Ret_InsertRune_SC::MSG_Ret_InsertRune_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Ret_InsertRune_SC)
}
MSG_Ret_InsertRune_SC::MSG_Ret_InsertRune_SC(const MSG_Ret_InsertRune_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pageitem()) {
    pageitem_ = new ::rune::RuneGrooveItem(*from.pageitem_);
  } else {
    pageitem_ = nullptr;
  }
  ::memcpy(&pageid_, &from.pageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&pageid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Ret_InsertRune_SC)
}

void MSG_Ret_InsertRune_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_InsertRune_SC_rune_2eproto.base);
  ::memset(&pageitem_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&pageitem_)) + sizeof(result_));
}

MSG_Ret_InsertRune_SC::~MSG_Ret_InsertRune_SC() {
  // @@protoc_insertion_point(destructor:rune.MSG_Ret_InsertRune_SC)
  SharedDtor();
}

void MSG_Ret_InsertRune_SC::SharedDtor() {
  if (this != internal_default_instance()) delete pageitem_;
}

void MSG_Ret_InsertRune_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_InsertRune_SC& MSG_Ret_InsertRune_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_InsertRune_SC_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_InsertRune_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Ret_InsertRune_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pageitem_ != nullptr);
    pageitem_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&pageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&pageid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_InsertRune_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .rune.RuneGrooveItem pageitem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pageitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pageid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_InsertRune_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Ret_InsertRune_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rune.RuneGrooveItem pageitem = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pageitem(this), target, stream);
  }

  // optional uint32 pageid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pageid(), target);
  }

  // optional uint32 score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_score(), target);
  }

  // optional bool result = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Ret_InsertRune_SC)
  return target;
}

size_t MSG_Ret_InsertRune_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Ret_InsertRune_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .rune.RuneGrooveItem pageitem = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pageitem_);
    }

    // optional uint32 pageid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageid());
    }

    // optional uint32 score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional bool result = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_InsertRune_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Ret_InsertRune_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_InsertRune_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_InsertRune_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Ret_InsertRune_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Ret_InsertRune_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_InsertRune_SC::MergeFrom(const MSG_Ret_InsertRune_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Ret_InsertRune_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pageitem()->::rune::RuneGrooveItem::MergeFrom(from._internal_pageitem());
    }
    if (cached_has_bits & 0x00000002u) {
      pageid_ = from.pageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_InsertRune_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Ret_InsertRune_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_InsertRune_SC::CopyFrom(const MSG_Ret_InsertRune_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Ret_InsertRune_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_InsertRune_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_InsertRune_SC::InternalSwap(MSG_Ret_InsertRune_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pageitem_, other->pageitem_);
  swap(pageid_, other->pageid_);
  swap(score_, other->score_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_InsertRune_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_UnloadRune_CS::InitAsDefaultInstance() {
}
class MSG_Req_UnloadRune_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_UnloadRune_CS>()._has_bits_);
  static void set_has_posid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Req_UnloadRune_CS::MSG_Req_UnloadRune_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Req_UnloadRune_CS)
}
MSG_Req_UnloadRune_CS::MSG_Req_UnloadRune_CS(const MSG_Req_UnloadRune_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&posid_, &from.posid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pageid_) -
    reinterpret_cast<char*>(&posid_)) + sizeof(pageid_));
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Req_UnloadRune_CS)
}

void MSG_Req_UnloadRune_CS::SharedCtor() {
  ::memset(&posid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pageid_) -
      reinterpret_cast<char*>(&posid_)) + sizeof(pageid_));
}

MSG_Req_UnloadRune_CS::~MSG_Req_UnloadRune_CS() {
  // @@protoc_insertion_point(destructor:rune.MSG_Req_UnloadRune_CS)
  SharedDtor();
}

void MSG_Req_UnloadRune_CS::SharedDtor() {
}

void MSG_Req_UnloadRune_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_UnloadRune_CS& MSG_Req_UnloadRune_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_UnloadRune_CS_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_UnloadRune_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Req_UnloadRune_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&posid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pageid_) -
        reinterpret_cast<char*>(&posid_)) + sizeof(pageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_UnloadRune_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 posid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_posid(&has_bits);
          posid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pageid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_UnloadRune_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Req_UnloadRune_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 posid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_posid(), target);
  }

  // optional uint32 pageid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Req_UnloadRune_CS)
  return target;
}

size_t MSG_Req_UnloadRune_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Req_UnloadRune_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 posid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posid());
    }

    // optional uint32 pageid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_UnloadRune_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Req_UnloadRune_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_UnloadRune_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_UnloadRune_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Req_UnloadRune_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Req_UnloadRune_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_UnloadRune_CS::MergeFrom(const MSG_Req_UnloadRune_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Req_UnloadRune_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      posid_ = from.posid_;
    }
    if (cached_has_bits & 0x00000002u) {
      pageid_ = from.pageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_UnloadRune_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Req_UnloadRune_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_UnloadRune_CS::CopyFrom(const MSG_Req_UnloadRune_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Req_UnloadRune_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_UnloadRune_CS::IsInitialized() const {
  return true;
}

void MSG_Req_UnloadRune_CS::InternalSwap(MSG_Req_UnloadRune_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(posid_, other->posid_);
  swap(pageid_, other->pageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_UnloadRune_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_UnloadRune_SC::InitAsDefaultInstance() {
}
class MSG_Ret_UnloadRune_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_UnloadRune_SC>()._has_bits_);
  static void set_has_posid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

MSG_Ret_UnloadRune_SC::MSG_Ret_UnloadRune_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Ret_UnloadRune_SC)
}
MSG_Ret_UnloadRune_SC::MSG_Ret_UnloadRune_SC(const MSG_Ret_UnloadRune_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&posid_, &from.posid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&posid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Ret_UnloadRune_SC)
}

void MSG_Ret_UnloadRune_SC::SharedCtor() {
  ::memset(&posid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&posid_)) + sizeof(result_));
}

MSG_Ret_UnloadRune_SC::~MSG_Ret_UnloadRune_SC() {
  // @@protoc_insertion_point(destructor:rune.MSG_Ret_UnloadRune_SC)
  SharedDtor();
}

void MSG_Ret_UnloadRune_SC::SharedDtor() {
}

void MSG_Ret_UnloadRune_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_UnloadRune_SC& MSG_Ret_UnloadRune_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_UnloadRune_SC_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_UnloadRune_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Ret_UnloadRune_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&posid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&posid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_UnloadRune_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 posid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_posid(&has_bits);
          posid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pageid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_UnloadRune_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Ret_UnloadRune_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 posid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_posid(), target);
  }

  // optional uint32 pageid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pageid(), target);
  }

  // optional uint32 score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_score(), target);
  }

  // optional bool result = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Ret_UnloadRune_SC)
  return target;
}

size_t MSG_Ret_UnloadRune_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Ret_UnloadRune_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 posid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_posid());
    }

    // optional uint32 pageid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageid());
    }

    // optional uint32 score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional bool result = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_UnloadRune_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Ret_UnloadRune_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_UnloadRune_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_UnloadRune_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Ret_UnloadRune_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Ret_UnloadRune_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_UnloadRune_SC::MergeFrom(const MSG_Ret_UnloadRune_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Ret_UnloadRune_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      posid_ = from.posid_;
    }
    if (cached_has_bits & 0x00000002u) {
      pageid_ = from.pageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_UnloadRune_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Ret_UnloadRune_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_UnloadRune_SC::CopyFrom(const MSG_Ret_UnloadRune_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Ret_UnloadRune_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_UnloadRune_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_UnloadRune_SC::InternalSwap(MSG_Ret_UnloadRune_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(posid_, other->posid_);
  swap(pageid_, other->pageid_);
  swap(score_, other->score_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_UnloadRune_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_UnloadAllRune_CS::InitAsDefaultInstance() {
}
class MSG_Req_UnloadAllRune_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_UnloadAllRune_CS>()._has_bits_);
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_UnloadAllRune_CS::MSG_Req_UnloadAllRune_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Req_UnloadAllRune_CS)
}
MSG_Req_UnloadAllRune_CS::MSG_Req_UnloadAllRune_CS(const MSG_Req_UnloadAllRune_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pageid_ = from.pageid_;
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Req_UnloadAllRune_CS)
}

void MSG_Req_UnloadAllRune_CS::SharedCtor() {
  pageid_ = 0u;
}

MSG_Req_UnloadAllRune_CS::~MSG_Req_UnloadAllRune_CS() {
  // @@protoc_insertion_point(destructor:rune.MSG_Req_UnloadAllRune_CS)
  SharedDtor();
}

void MSG_Req_UnloadAllRune_CS::SharedDtor() {
}

void MSG_Req_UnloadAllRune_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_UnloadAllRune_CS& MSG_Req_UnloadAllRune_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_UnloadAllRune_CS_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_UnloadAllRune_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Req_UnloadAllRune_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pageid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_UnloadAllRune_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_UnloadAllRune_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Req_UnloadAllRune_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Req_UnloadAllRune_CS)
  return target;
}

size_t MSG_Req_UnloadAllRune_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Req_UnloadAllRune_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 pageid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pageid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_UnloadAllRune_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Req_UnloadAllRune_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_UnloadAllRune_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_UnloadAllRune_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Req_UnloadAllRune_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Req_UnloadAllRune_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_UnloadAllRune_CS::MergeFrom(const MSG_Req_UnloadAllRune_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Req_UnloadAllRune_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pageid()) {
    _internal_set_pageid(from._internal_pageid());
  }
}

void MSG_Req_UnloadAllRune_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Req_UnloadAllRune_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_UnloadAllRune_CS::CopyFrom(const MSG_Req_UnloadAllRune_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Req_UnloadAllRune_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_UnloadAllRune_CS::IsInitialized() const {
  return true;
}

void MSG_Req_UnloadAllRune_CS::InternalSwap(MSG_Req_UnloadAllRune_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pageid_, other->pageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_UnloadAllRune_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_UnloadAllRune_SC::InitAsDefaultInstance() {
}
class MSG_Ret_UnloadAllRune_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_UnloadAllRune_SC>()._has_bits_);
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_Ret_UnloadAllRune_SC::MSG_Ret_UnloadAllRune_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Ret_UnloadAllRune_SC)
}
MSG_Ret_UnloadAllRune_SC::MSG_Ret_UnloadAllRune_SC(const MSG_Ret_UnloadAllRune_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pageid_, &from.pageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&pageid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Ret_UnloadAllRune_SC)
}

void MSG_Ret_UnloadAllRune_SC::SharedCtor() {
  ::memset(&pageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&pageid_)) + sizeof(result_));
}

MSG_Ret_UnloadAllRune_SC::~MSG_Ret_UnloadAllRune_SC() {
  // @@protoc_insertion_point(destructor:rune.MSG_Ret_UnloadAllRune_SC)
  SharedDtor();
}

void MSG_Ret_UnloadAllRune_SC::SharedDtor() {
}

void MSG_Ret_UnloadAllRune_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_UnloadAllRune_SC& MSG_Ret_UnloadAllRune_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_UnloadAllRune_SC_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_UnloadAllRune_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Ret_UnloadAllRune_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&pageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&pageid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_UnloadAllRune_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_UnloadAllRune_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Ret_UnloadAllRune_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pageid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pageid(), target);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Ret_UnloadAllRune_SC)
  return target;
}

size_t MSG_Ret_UnloadAllRune_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Ret_UnloadAllRune_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 pageid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageid());
    }

    // optional bool result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_UnloadAllRune_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Ret_UnloadAllRune_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_UnloadAllRune_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_UnloadAllRune_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Ret_UnloadAllRune_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Ret_UnloadAllRune_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_UnloadAllRune_SC::MergeFrom(const MSG_Ret_UnloadAllRune_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Ret_UnloadAllRune_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pageid_ = from.pageid_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_UnloadAllRune_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Ret_UnloadAllRune_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_UnloadAllRune_SC::CopyFrom(const MSG_Ret_UnloadAllRune_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Ret_UnloadAllRune_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_UnloadAllRune_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_UnloadAllRune_SC::InternalSwap(MSG_Ret_UnloadAllRune_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pageid_, other->pageid_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_UnloadAllRune_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_LevelupRune_CS::InitAsDefaultInstance() {
}
class MSG_Req_LevelupRune_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_LevelupRune_CS>()._has_bits_);
  static void set_has_levelupid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_LevelupRune_CS::MSG_Req_LevelupRune_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Req_LevelupRune_CS)
}
MSG_Req_LevelupRune_CS::MSG_Req_LevelupRune_CS(const MSG_Req_LevelupRune_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      costuniqids_(from.costuniqids_),
      costthisids_(from.costthisids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  levelupid_ = from.levelupid_;
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Req_LevelupRune_CS)
}

void MSG_Req_LevelupRune_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_LevelupRune_CS_rune_2eproto.base);
  levelupid_ = 0u;
}

MSG_Req_LevelupRune_CS::~MSG_Req_LevelupRune_CS() {
  // @@protoc_insertion_point(destructor:rune.MSG_Req_LevelupRune_CS)
  SharedDtor();
}

void MSG_Req_LevelupRune_CS::SharedDtor() {
}

void MSG_Req_LevelupRune_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_LevelupRune_CS& MSG_Req_LevelupRune_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_LevelupRune_CS_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_LevelupRune_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Req_LevelupRune_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  costuniqids_.Clear();
  costthisids_.Clear();
  levelupid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_LevelupRune_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 levelupid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_levelupid(&has_bits);
          levelupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 costuniqids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_costuniqids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_costuniqids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string costthisids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_costthisids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rune.MSG_Req_LevelupRune_CS.costthisids");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_LevelupRune_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Req_LevelupRune_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 levelupid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_levelupid(), target);
  }

  // repeated uint32 costuniqids = 2;
  for (int i = 0, n = this->_internal_costuniqids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_costuniqids(i), target);
  }

  // repeated string costthisids = 3;
  for (int i = 0, n = this->_internal_costthisids_size(); i < n; i++) {
    const auto& s = this->_internal_costthisids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rune.MSG_Req_LevelupRune_CS.costthisids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Req_LevelupRune_CS)
  return target;
}

size_t MSG_Req_LevelupRune_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Req_LevelupRune_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 costuniqids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->costuniqids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_costuniqids_size());
    total_size += data_size;
  }

  // repeated string costthisids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(costthisids_.size());
  for (int i = 0, n = costthisids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      costthisids_.Get(i));
  }

  // optional uint32 levelupid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_levelupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_LevelupRune_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Req_LevelupRune_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_LevelupRune_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_LevelupRune_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Req_LevelupRune_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Req_LevelupRune_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_LevelupRune_CS::MergeFrom(const MSG_Req_LevelupRune_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Req_LevelupRune_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  costuniqids_.MergeFrom(from.costuniqids_);
  costthisids_.MergeFrom(from.costthisids_);
  if (from._internal_has_levelupid()) {
    _internal_set_levelupid(from._internal_levelupid());
  }
}

void MSG_Req_LevelupRune_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Req_LevelupRune_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_LevelupRune_CS::CopyFrom(const MSG_Req_LevelupRune_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Req_LevelupRune_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_LevelupRune_CS::IsInitialized() const {
  return true;
}

void MSG_Req_LevelupRune_CS::InternalSwap(MSG_Req_LevelupRune_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  costuniqids_.InternalSwap(&other->costuniqids_);
  costthisids_.InternalSwap(&other->costthisids_);
  swap(levelupid_, other->levelupid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_LevelupRune_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_LevelupRune_SC::InitAsDefaultInstance() {
  ::rune::_MSG_Ret_LevelupRune_SC_default_instance_._instance.get_mutable()->runeitem_ = const_cast< ::rune::RuneItem*>(
      ::rune::RuneItem::internal_default_instance());
}
class MSG_Ret_LevelupRune_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_LevelupRune_SC>()._has_bits_);
  static const ::rune::RuneItem& runeitem(const MSG_Ret_LevelupRune_SC* msg);
  static void set_has_runeitem(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::rune::RuneItem&
MSG_Ret_LevelupRune_SC::_Internal::runeitem(const MSG_Ret_LevelupRune_SC* msg) {
  return *msg->runeitem_;
}
MSG_Ret_LevelupRune_SC::MSG_Ret_LevelupRune_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Ret_LevelupRune_SC)
}
MSG_Ret_LevelupRune_SC::MSG_Ret_LevelupRune_SC(const MSG_Ret_LevelupRune_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_runeitem()) {
    runeitem_ = new ::rune::RuneItem(*from.runeitem_);
  } else {
    runeitem_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Ret_LevelupRune_SC)
}

void MSG_Ret_LevelupRune_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_LevelupRune_SC_rune_2eproto.base);
  ::memset(&runeitem_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&runeitem_)) + sizeof(result_));
}

MSG_Ret_LevelupRune_SC::~MSG_Ret_LevelupRune_SC() {
  // @@protoc_insertion_point(destructor:rune.MSG_Ret_LevelupRune_SC)
  SharedDtor();
}

void MSG_Ret_LevelupRune_SC::SharedDtor() {
  if (this != internal_default_instance()) delete runeitem_;
}

void MSG_Ret_LevelupRune_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_LevelupRune_SC& MSG_Ret_LevelupRune_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_LevelupRune_SC_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_LevelupRune_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Ret_LevelupRune_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(runeitem_ != nullptr);
    runeitem_->Clear();
  }
  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_LevelupRune_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .rune.RuneItem runeitem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_runeitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_LevelupRune_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Ret_LevelupRune_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .rune.RuneItem runeitem = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::runeitem(this), target, stream);
  }

  // optional bool result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Ret_LevelupRune_SC)
  return target;
}

size_t MSG_Ret_LevelupRune_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Ret_LevelupRune_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .rune.RuneItem runeitem = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *runeitem_);
    }

    // optional bool result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_LevelupRune_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Ret_LevelupRune_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_LevelupRune_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_LevelupRune_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Ret_LevelupRune_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Ret_LevelupRune_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_LevelupRune_SC::MergeFrom(const MSG_Ret_LevelupRune_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Ret_LevelupRune_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_runeitem()->::rune::RuneItem::MergeFrom(from._internal_runeitem());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_LevelupRune_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Ret_LevelupRune_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_LevelupRune_SC::CopyFrom(const MSG_Ret_LevelupRune_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Ret_LevelupRune_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_LevelupRune_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_LevelupRune_SC::InternalSwap(MSG_Ret_LevelupRune_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(runeitem_, other->runeitem_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_LevelupRune_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_RunePageNameModify_CS::InitAsDefaultInstance() {
}
class MSG_Req_RunePageNameModify_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_RunePageNameModify_CS>()._has_bits_);
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pagename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_RunePageNameModify_CS::MSG_Req_RunePageNameModify_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Req_RunePageNameModify_CS)
}
MSG_Req_RunePageNameModify_CS::MSG_Req_RunePageNameModify_CS(const MSG_Req_RunePageNameModify_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pagename()) {
    pagename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pagename_);
  }
  pageid_ = from.pageid_;
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Req_RunePageNameModify_CS)
}

void MSG_Req_RunePageNameModify_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_RunePageNameModify_CS_rune_2eproto.base);
  pagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pageid_ = 0u;
}

MSG_Req_RunePageNameModify_CS::~MSG_Req_RunePageNameModify_CS() {
  // @@protoc_insertion_point(destructor:rune.MSG_Req_RunePageNameModify_CS)
  SharedDtor();
}

void MSG_Req_RunePageNameModify_CS::SharedDtor() {
  pagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_RunePageNameModify_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_RunePageNameModify_CS& MSG_Req_RunePageNameModify_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_RunePageNameModify_CS_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_RunePageNameModify_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Req_RunePageNameModify_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pagename_.ClearNonDefaultToEmptyNoArena();
  }
  pageid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_RunePageNameModify_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pagename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rune.MSG_Req_RunePageNameModify_CS.pagename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_RunePageNameModify_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Req_RunePageNameModify_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pageid(), target);
  }

  // optional string pagename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pagename().data(), static_cast<int>(this->_internal_pagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rune.MSG_Req_RunePageNameModify_CS.pagename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pagename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Req_RunePageNameModify_CS)
  return target;
}

size_t MSG_Req_RunePageNameModify_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Req_RunePageNameModify_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string pagename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pagename());
    }

    // optional uint32 pageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_RunePageNameModify_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Req_RunePageNameModify_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_RunePageNameModify_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_RunePageNameModify_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Req_RunePageNameModify_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Req_RunePageNameModify_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_RunePageNameModify_CS::MergeFrom(const MSG_Req_RunePageNameModify_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Req_RunePageNameModify_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pagename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pagename_);
    }
    if (cached_has_bits & 0x00000002u) {
      pageid_ = from.pageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_RunePageNameModify_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Req_RunePageNameModify_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_RunePageNameModify_CS::CopyFrom(const MSG_Req_RunePageNameModify_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Req_RunePageNameModify_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_RunePageNameModify_CS::IsInitialized() const {
  return true;
}

void MSG_Req_RunePageNameModify_CS::InternalSwap(MSG_Req_RunePageNameModify_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pagename_.Swap(&other->pagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pageid_, other->pageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_RunePageNameModify_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_RunePageNameModify_SC::InitAsDefaultInstance() {
}
class MSG_Ret_RunePageNameModify_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_RunePageNameModify_SC>()._has_bits_);
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pagename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_RunePageNameModify_SC::MSG_Ret_RunePageNameModify_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Ret_RunePageNameModify_SC)
}
MSG_Ret_RunePageNameModify_SC::MSG_Ret_RunePageNameModify_SC(const MSG_Ret_RunePageNameModify_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pagename()) {
    pagename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pagename_);
  }
  ::memcpy(&pageid_, &from.pageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&pageid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Ret_RunePageNameModify_SC)
}

void MSG_Ret_RunePageNameModify_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_RunePageNameModify_SC_rune_2eproto.base);
  pagename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&pageid_)) + sizeof(result_));
}

MSG_Ret_RunePageNameModify_SC::~MSG_Ret_RunePageNameModify_SC() {
  // @@protoc_insertion_point(destructor:rune.MSG_Ret_RunePageNameModify_SC)
  SharedDtor();
}

void MSG_Ret_RunePageNameModify_SC::SharedDtor() {
  pagename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_RunePageNameModify_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_RunePageNameModify_SC& MSG_Ret_RunePageNameModify_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_RunePageNameModify_SC_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_RunePageNameModify_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Ret_RunePageNameModify_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pagename_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&pageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&pageid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_RunePageNameModify_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pagename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pagename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rune.MSG_Ret_RunePageNameModify_SC.pagename");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_RunePageNameModify_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Ret_RunePageNameModify_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pageid(), target);
  }

  // optional string pagename = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pagename().data(), static_cast<int>(this->_internal_pagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rune.MSG_Ret_RunePageNameModify_SC.pagename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pagename(), target);
  }

  // optional bool result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Ret_RunePageNameModify_SC)
  return target;
}

size_t MSG_Ret_RunePageNameModify_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Ret_RunePageNameModify_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string pagename = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pagename());
    }

    // optional uint32 pageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageid());
    }

    // optional bool result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_RunePageNameModify_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Ret_RunePageNameModify_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_RunePageNameModify_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_RunePageNameModify_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Ret_RunePageNameModify_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Ret_RunePageNameModify_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_RunePageNameModify_SC::MergeFrom(const MSG_Ret_RunePageNameModify_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Ret_RunePageNameModify_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pagename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pagename_);
    }
    if (cached_has_bits & 0x00000002u) {
      pageid_ = from.pageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_RunePageNameModify_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Ret_RunePageNameModify_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_RunePageNameModify_SC::CopyFrom(const MSG_Ret_RunePageNameModify_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Ret_RunePageNameModify_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_RunePageNameModify_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_RunePageNameModify_SC::InternalSwap(MSG_Ret_RunePageNameModify_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pagename_.Swap(&other->pagename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pageid_, other->pageid_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_RunePageNameModify_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Req_RuneSwitch_CS::InitAsDefaultInstance() {
}
class MSG_Req_RuneSwitch_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Req_RuneSwitch_CS>()._has_bits_);
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_Req_RuneSwitch_CS::MSG_Req_RuneSwitch_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Req_RuneSwitch_CS)
}
MSG_Req_RuneSwitch_CS::MSG_Req_RuneSwitch_CS(const MSG_Req_RuneSwitch_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herothisid()) {
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
  pageid_ = from.pageid_;
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Req_RuneSwitch_CS)
}

void MSG_Req_RuneSwitch_CS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Req_RuneSwitch_CS_rune_2eproto.base);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pageid_ = 0u;
}

MSG_Req_RuneSwitch_CS::~MSG_Req_RuneSwitch_CS() {
  // @@protoc_insertion_point(destructor:rune.MSG_Req_RuneSwitch_CS)
  SharedDtor();
}

void MSG_Req_RuneSwitch_CS::SharedDtor() {
  herothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Req_RuneSwitch_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Req_RuneSwitch_CS& MSG_Req_RuneSwitch_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Req_RuneSwitch_CS_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Req_RuneSwitch_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Req_RuneSwitch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    herothisid_.ClearNonDefaultToEmptyNoArena();
  }
  pageid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Req_RuneSwitch_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pageid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string herothisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_herothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rune.MSG_Req_RuneSwitch_CS.herothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Req_RuneSwitch_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Req_RuneSwitch_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pageid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pageid(), target);
  }

  // optional string herothisid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herothisid().data(), static_cast<int>(this->_internal_herothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rune.MSG_Req_RuneSwitch_CS.herothisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_herothisid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Req_RuneSwitch_CS)
  return target;
}

size_t MSG_Req_RuneSwitch_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Req_RuneSwitch_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string herothisid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_herothisid());
    }

    // optional uint32 pageid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Req_RuneSwitch_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Req_RuneSwitch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Req_RuneSwitch_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Req_RuneSwitch_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Req_RuneSwitch_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Req_RuneSwitch_CS)
    MergeFrom(*source);
  }
}

void MSG_Req_RuneSwitch_CS::MergeFrom(const MSG_Req_RuneSwitch_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Req_RuneSwitch_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      pageid_ = from.pageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Req_RuneSwitch_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Req_RuneSwitch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Req_RuneSwitch_CS::CopyFrom(const MSG_Req_RuneSwitch_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Req_RuneSwitch_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Req_RuneSwitch_CS::IsInitialized() const {
  return true;
}

void MSG_Req_RuneSwitch_CS::InternalSwap(MSG_Req_RuneSwitch_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herothisid_.Swap(&other->herothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pageid_, other->pageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Req_RuneSwitch_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_Ret_RuneSwitch_SC::InitAsDefaultInstance() {
}
class MSG_Ret_RuneSwitch_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_Ret_RuneSwitch_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_herothisid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pageid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_Ret_RuneSwitch_SC::MSG_Ret_RuneSwitch_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rune.MSG_Ret_RuneSwitch_SC)
}
MSG_Ret_RuneSwitch_SC::MSG_Ret_RuneSwitch_SC(const MSG_Ret_RuneSwitch_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_herothisid()) {
    herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&pageid_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(pageid_));
  // @@protoc_insertion_point(copy_constructor:rune.MSG_Ret_RuneSwitch_SC)
}

void MSG_Ret_RuneSwitch_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_Ret_RuneSwitch_SC_rune_2eproto.base);
  herothisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pageid_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(pageid_));
}

MSG_Ret_RuneSwitch_SC::~MSG_Ret_RuneSwitch_SC() {
  // @@protoc_insertion_point(destructor:rune.MSG_Ret_RuneSwitch_SC)
  SharedDtor();
}

void MSG_Ret_RuneSwitch_SC::SharedDtor() {
  herothisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MSG_Ret_RuneSwitch_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_Ret_RuneSwitch_SC& MSG_Ret_RuneSwitch_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_Ret_RuneSwitch_SC_rune_2eproto.base);
  return *internal_default_instance();
}


void MSG_Ret_RuneSwitch_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:rune.MSG_Ret_RuneSwitch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    herothisid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&errcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pageid_) -
        reinterpret_cast<char*>(&errcode_)) + sizeof(pageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_Ret_RuneSwitch_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string herothisid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_herothisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rune.MSG_Ret_RuneSwitch_SC.herothisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pageid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pageid(&has_bits);
          pageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_Ret_RuneSwitch_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rune.MSG_Ret_RuneSwitch_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // optional string herothisid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_herothisid().data(), static_cast<int>(this->_internal_herothisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "rune.MSG_Ret_RuneSwitch_SC.herothisid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_herothisid(), target);
  }

  // optional uint32 pageid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rune.MSG_Ret_RuneSwitch_SC)
  return target;
}

size_t MSG_Ret_RuneSwitch_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rune.MSG_Ret_RuneSwitch_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string herothisid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_herothisid());
    }

    // optional uint32 errcode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errcode());
    }

    // optional uint32 pageid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pageid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_Ret_RuneSwitch_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rune.MSG_Ret_RuneSwitch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_Ret_RuneSwitch_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_Ret_RuneSwitch_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rune.MSG_Ret_RuneSwitch_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rune.MSG_Ret_RuneSwitch_SC)
    MergeFrom(*source);
  }
}

void MSG_Ret_RuneSwitch_SC::MergeFrom(const MSG_Ret_RuneSwitch_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rune.MSG_Ret_RuneSwitch_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      herothisid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.herothisid_);
    }
    if (cached_has_bits & 0x00000002u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      pageid_ = from.pageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_Ret_RuneSwitch_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rune.MSG_Ret_RuneSwitch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_Ret_RuneSwitch_SC::CopyFrom(const MSG_Ret_RuneSwitch_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rune.MSG_Ret_RuneSwitch_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_Ret_RuneSwitch_SC::IsInitialized() const {
  return true;
}

void MSG_Ret_RuneSwitch_SC::InternalSwap(MSG_Ret_RuneSwitch_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  herothisid_.Swap(&other->herothisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
  swap(pageid_, other->pageid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_Ret_RuneSwitch_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rune
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rune::RuneItem* Arena::CreateMaybeMessage< ::rune::RuneItem >(Arena* arena) {
  return Arena::CreateInternal< ::rune::RuneItem >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::RuneGrooveItem* Arena::CreateMaybeMessage< ::rune::RuneGrooveItem >(Arena* arena) {
  return Arena::CreateInternal< ::rune::RuneGrooveItem >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::RunePageData* Arena::CreateMaybeMessage< ::rune::RunePageData >(Arena* arena) {
  return Arena::CreateInternal< ::rune::RunePageData >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Req_RuneActiveData_CS* Arena::CreateMaybeMessage< ::rune::MSG_Req_RuneActiveData_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Req_RuneActiveData_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Ret_RuneActiveData_SC* Arena::CreateMaybeMessage< ::rune::MSG_Ret_RuneActiveData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Ret_RuneActiveData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Req_RunePageData_CS* Arena::CreateMaybeMessage< ::rune::MSG_Req_RunePageData_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Req_RunePageData_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Ret_RunePageData_SC* Arena::CreateMaybeMessage< ::rune::MSG_Ret_RunePageData_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Ret_RunePageData_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Req_ActiveRune_CS* Arena::CreateMaybeMessage< ::rune::MSG_Req_ActiveRune_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Req_ActiveRune_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Ret_ActiveRune_SC* Arena::CreateMaybeMessage< ::rune::MSG_Ret_ActiveRune_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Ret_ActiveRune_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Req_InsertRune_CS* Arena::CreateMaybeMessage< ::rune::MSG_Req_InsertRune_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Req_InsertRune_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Ret_InsertRune_SC* Arena::CreateMaybeMessage< ::rune::MSG_Ret_InsertRune_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Ret_InsertRune_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Req_UnloadRune_CS* Arena::CreateMaybeMessage< ::rune::MSG_Req_UnloadRune_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Req_UnloadRune_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Ret_UnloadRune_SC* Arena::CreateMaybeMessage< ::rune::MSG_Ret_UnloadRune_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Ret_UnloadRune_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Req_UnloadAllRune_CS* Arena::CreateMaybeMessage< ::rune::MSG_Req_UnloadAllRune_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Req_UnloadAllRune_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Ret_UnloadAllRune_SC* Arena::CreateMaybeMessage< ::rune::MSG_Ret_UnloadAllRune_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Ret_UnloadAllRune_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Req_LevelupRune_CS* Arena::CreateMaybeMessage< ::rune::MSG_Req_LevelupRune_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Req_LevelupRune_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Ret_LevelupRune_SC* Arena::CreateMaybeMessage< ::rune::MSG_Ret_LevelupRune_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Ret_LevelupRune_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Req_RunePageNameModify_CS* Arena::CreateMaybeMessage< ::rune::MSG_Req_RunePageNameModify_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Req_RunePageNameModify_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Ret_RunePageNameModify_SC* Arena::CreateMaybeMessage< ::rune::MSG_Ret_RunePageNameModify_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Ret_RunePageNameModify_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Req_RuneSwitch_CS* Arena::CreateMaybeMessage< ::rune::MSG_Req_RuneSwitch_CS >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Req_RuneSwitch_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::rune::MSG_Ret_RuneSwitch_SC* Arena::CreateMaybeMessage< ::rune::MSG_Ret_RuneSwitch_SC >(Arena* arena) {
  return Arena::CreateInternal< ::rune::MSG_Ret_RuneSwitch_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
