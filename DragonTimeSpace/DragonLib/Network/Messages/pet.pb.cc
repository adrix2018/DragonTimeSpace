// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pet.proto

#include "pet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_pet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PetBase_pet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropItem_pet_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_pet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SummonPetUseInfo_pet_2eproto;
namespace Pet {
class PropItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropItem> _instance;
} _PropItem_default_instance_;
class PetBaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PetBase> _instance;
} _PetBase_default_instance_;
class MSG_ReqSwitchPetState_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqSwitchPetState_CS> _instance;
} _MSG_ReqSwitchPetState_CS_default_instance_;
class MSG_RetSwitchPetState_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetSwitchPetState_SC> _instance;
} _MSG_RetSwitchPetState_SC_default_instance_;
class MSG_RetRefreshSummonPet_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetRefreshSummonPet_SC> _instance;
} _MSG_RetRefreshSummonPet_SC_default_instance_;
class MSG_RetUserPetInfo_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetUserPetInfo_SC> _instance;
} _MSG_RetUserPetInfo_SC_default_instance_;
class SummonPetUseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummonPetUseInfo> _instance;
} _SummonPetUseInfo_default_instance_;
class MSG_NotifyPetQTESkill_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_NotifyPetQTESkill_SC> _instance;
} _MSG_NotifyPetQTESkill_SC_default_instance_;
class MSG_ReqUnlockPetNum_CSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_ReqUnlockPetNum_CS> _instance;
} _MSG_ReqUnlockPetNum_CS_default_instance_;
class MSG_RetUnlockPetNum_SCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MSG_RetUnlockPetNum_SC> _instance;
} _MSG_RetUnlockPetNum_SC_default_instance_;
}  // namespace Pet
static void InitDefaultsscc_info_MSG_NotifyPetQTESkill_SC_pet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Pet::_MSG_NotifyPetQTESkill_SC_default_instance_;
    new (ptr) ::Pet::MSG_NotifyPetQTESkill_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pet::MSG_NotifyPetQTESkill_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_NotifyPetQTESkill_SC_pet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_NotifyPetQTESkill_SC_pet_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqSwitchPetState_CS_pet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Pet::_MSG_ReqSwitchPetState_CS_default_instance_;
    new (ptr) ::Pet::MSG_ReqSwitchPetState_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pet::MSG_ReqSwitchPetState_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqSwitchPetState_CS_pet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqSwitchPetState_CS_pet_2eproto}, {}};

static void InitDefaultsscc_info_MSG_ReqUnlockPetNum_CS_pet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Pet::_MSG_ReqUnlockPetNum_CS_default_instance_;
    new (ptr) ::Pet::MSG_ReqUnlockPetNum_CS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pet::MSG_ReqUnlockPetNum_CS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_ReqUnlockPetNum_CS_pet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_ReqUnlockPetNum_CS_pet_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetRefreshSummonPet_SC_pet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Pet::_MSG_RetRefreshSummonPet_SC_default_instance_;
    new (ptr) ::Pet::MSG_RetRefreshSummonPet_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pet::MSG_RetRefreshSummonPet_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetRefreshSummonPet_SC_pet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetRefreshSummonPet_SC_pet_2eproto}, {
      &scc_info_PetBase_pet_2eproto.base,}};

static void InitDefaultsscc_info_MSG_RetSwitchPetState_SC_pet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Pet::_MSG_RetSwitchPetState_SC_default_instance_;
    new (ptr) ::Pet::MSG_RetSwitchPetState_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pet::MSG_RetSwitchPetState_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetSwitchPetState_SC_pet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetSwitchPetState_SC_pet_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetUnlockPetNum_SC_pet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Pet::_MSG_RetUnlockPetNum_SC_default_instance_;
    new (ptr) ::Pet::MSG_RetUnlockPetNum_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pet::MSG_RetUnlockPetNum_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MSG_RetUnlockPetNum_SC_pet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MSG_RetUnlockPetNum_SC_pet_2eproto}, {}};

static void InitDefaultsscc_info_MSG_RetUserPetInfo_SC_pet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Pet::_MSG_RetUserPetInfo_SC_default_instance_;
    new (ptr) ::Pet::MSG_RetUserPetInfo_SC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pet::MSG_RetUserPetInfo_SC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MSG_RetUserPetInfo_SC_pet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MSG_RetUserPetInfo_SC_pet_2eproto}, {
      &scc_info_SummonPetUseInfo_pet_2eproto.base,}};

static void InitDefaultsscc_info_PetBase_pet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Pet::_PetBase_default_instance_;
    new (ptr) ::Pet::PetBase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pet::PetBase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PetBase_pet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PetBase_pet_2eproto}, {
      &scc_info_PropItem_pet_2eproto.base,}};

static void InitDefaultsscc_info_PropItem_pet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Pet::_PropItem_default_instance_;
    new (ptr) ::Pet::PropItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pet::PropItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropItem_pet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropItem_pet_2eproto}, {}};

static void InitDefaultsscc_info_SummonPetUseInfo_pet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Pet::_SummonPetUseInfo_default_instance_;
    new (ptr) ::Pet::SummonPetUseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pet::SummonPetUseInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SummonPetUseInfo_pet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SummonPetUseInfo_pet_2eproto}, {
      &scc_info_PetBase_pet_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pet_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pet_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, pdamage_),
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, pdefence_),
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, maxhp_),
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, toughness_),
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, bang_),
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, accurate_),
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, hold_),
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, hit_),
  PROTOBUF_FIELD_OFFSET(::Pet::PropItem, miss_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, id_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, name_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, tempid_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, level_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, exp_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, hp_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, quality_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, prop_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, aptitude_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, state_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, passivenum_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, activeskillid_),
  PROTOBUF_FIELD_OFFSET(::Pet::PetBase, talentskillid_),
  3,
  0,
  5,
  4,
  6,
  7,
  8,
  1,
  2,
  ~0u,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_ReqSwitchPetState_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_ReqSwitchPetState_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_ReqSwitchPetState_CS, tempid_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_ReqSwitchPetState_CS, fromstate_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_ReqSwitchPetState_CS, tostate_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetSwitchPetState_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetSwitchPetState_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetSwitchPetState_SC, errcode_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetSwitchPetState_SC, tempid_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetSwitchPetState_SC, curstate_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetRefreshSummonPet_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetRefreshSummonPet_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetRefreshSummonPet_SC, pet_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetUserPetInfo_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetUserPetInfo_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetUserPetInfo_SC, info_),
  0,
  PROTOBUF_FIELD_OFFSET(::Pet::SummonPetUseInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Pet::SummonPetUseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pet::SummonPetUseInfo, num_),
  PROTOBUF_FIELD_OFFSET(::Pet::SummonPetUseInfo, curpet_),
  PROTOBUF_FIELD_OFFSET(::Pet::SummonPetUseInfo, petlist_),
  PROTOBUF_FIELD_OFFSET(::Pet::SummonPetUseInfo, unlockcount_),
  PROTOBUF_FIELD_OFFSET(::Pet::SummonPetUseInfo, curassist_),
  1,
  0,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_NotifyPetQTESkill_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_NotifyPetQTESkill_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_NotifyPetQTESkill_SC, onoff_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_NotifyPetQTESkill_SC, bosstempid_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_NotifyPetQTESkill_SC, leftlasttime_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_NotifyPetQTESkill_SC, totallasttime_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_NotifyPetQTESkill_SC, distancetomaster_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_NotifyPetQTESkill_SC, distanceratio_),
  1,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_ReqUnlockPetNum_CS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_ReqUnlockPetNum_CS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_ReqUnlockPetNum_CS, unlockcount_),
  0,
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetUnlockPetNum_SC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetUnlockPetNum_SC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Pet::MSG_RetUnlockPetNum_SC, retcode_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::Pet::PropItem)},
  { 23, 41, sizeof(::Pet::PetBase)},
  { 54, 62, sizeof(::Pet::MSG_ReqSwitchPetState_CS)},
  { 65, 73, sizeof(::Pet::MSG_RetSwitchPetState_SC)},
  { 76, 82, sizeof(::Pet::MSG_RetRefreshSummonPet_SC)},
  { 83, 89, sizeof(::Pet::MSG_RetUserPetInfo_SC)},
  { 90, 100, sizeof(::Pet::SummonPetUseInfo)},
  { 105, 116, sizeof(::Pet::MSG_NotifyPetQTESkill_SC)},
  { 122, 128, sizeof(::Pet::MSG_ReqUnlockPetNum_CS)},
  { 129, 135, sizeof(::Pet::MSG_RetUnlockPetNum_SC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Pet::_PropItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Pet::_PetBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Pet::_MSG_ReqSwitchPetState_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Pet::_MSG_RetSwitchPetState_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Pet::_MSG_RetRefreshSummonPet_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Pet::_MSG_RetUserPetInfo_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Pet::_SummonPetUseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Pet::_MSG_NotifyPetQTESkill_SC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Pet::_MSG_ReqUnlockPetNum_CS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Pet::_MSG_RetUnlockPetNum_SC_default_instance_),
};

const char descriptor_table_protodef_pet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tpet.proto\022\003Pet\"\230\001\n\010PropItem\022\017\n\007pdamage"
  "\030\001 \001(\r\022\020\n\010pdefence\030\002 \001(\r\022\r\n\005maxhp\030\003 \001(\r\022"
  "\021\n\ttoughness\030\004 \001(\r\022\014\n\004bang\030\005 \001(\r\022\020\n\010accu"
  "rate\030\006 \001(\r\022\014\n\004hold\030\007 \001(\r\022\013\n\003hit\030\010 \001(\r\022\014\n"
  "\004miss\030\t \001(\r\"\215\002\n\007PetBase\022\n\n\002id\030\001 \001(\r\022\014\n\004n"
  "ame\030\002 \001(\t\022\016\n\006tempid\030\003 \001(\004\022\r\n\005level\030\004 \001(\r"
  "\022\013\n\003exp\030\005 \001(\r\022\n\n\002hp\030\006 \001(\r\022\022\n\007quality\030\007 \001"
  "(\r:\0010\022\033\n\004prop\030\010 \001(\0132\r.Pet.PropItem\022\037\n\010ap"
  "titude\030\t \001(\0132\r.Pet.PropItem\022\034\n\005state\030\n \003"
  "(\0162\r.Pet.PetState\022\022\n\npassivenum\030\013 \001(\r\022\025\n"
  "\ractiveskillid\030\014 \001(\r\022\025\n\rtalentskillid\030\r "
  "\001(\r\"l\n\030MSG_ReqSwitchPetState_CS\022\016\n\006tempi"
  "d\030\001 \001(\004\022 \n\tfromstate\030\002 \001(\0162\r.Pet.PetStat"
  "e\022\036\n\007tostate\030\003 \001(\0162\r.Pet.PetState\"\\\n\030MSG"
  "_RetSwitchPetState_SC\022\017\n\007errcode\030\001 \001(\r\022\016"
  "\n\006tempid\030\002 \001(\r\022\037\n\010curstate\030\003 \003(\0162\r.Pet.P"
  "etState\"7\n\032MSG_RetRefreshSummonPet_SC\022\031\n"
  "\003pet\030\001 \003(\0132\014.Pet.PetBase\"<\n\025MSG_RetUserP"
  "etInfo_SC\022#\n\004info\030\001 \001(\0132\025.Pet.SummonPetU"
  "seInfo\"v\n\020SummonPetUseInfo\022\013\n\003num\030\001 \001(\r\022"
  "\016\n\006curpet\030\002 \001(\004\022\035\n\007petlist\030\003 \003(\0132\014.Pet.P"
  "etBase\022\023\n\013unlockcount\030\004 \001(\r\022\021\n\tcurassist"
  "\030\005 \001(\004\"\233\001\n\030MSG_NotifyPetQTESkill_SC\022\r\n\005o"
  "noff\030\001 \001(\r\022\022\n\nbosstempid\030\002 \001(\004\022\024\n\014leftla"
  "sttime\030\003 \001(\r\022\025\n\rtotallasttime\030\004 \001(\r\022\030\n\020d"
  "istancetomaster\030\005 \001(\r\022\025\n\rdistanceratio\030\006"
  " \001(\r\"-\n\026MSG_ReqUnlockPetNum_CS\022\023\n\013unlock"
  "count\030\001 \001(\r\")\n\026MSG_RetUnlockPetNum_SC\022\017\n"
  "\007retcode\030\001 \001(\r*l\n\007PetProp\022\010\n\004PDAM\020\001\022\010\n\004P"
  "DEF\020\002\022\t\n\005MAXHP\020\003\022\010\n\004BANG\020\004\022\r\n\tTOUGHNESS\020"
  "\005\022\014\n\010ACCURATE\020\006\022\010\n\004HOLD\020\007\022\007\n\003HIT\020\010\022\010\n\004MI"
  "SS\020\t*m\n\010PetState\022\021\n\rPetState_None\020\000\022\021\n\rP"
  "etState_Rest\020\001\022\023\n\017PetState_Assist\020\002\022\022\n\016P"
  "etState_Fight\020\003\022\022\n\016PetState_Dying\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pet_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pet_2eproto_sccs[10] = {
  &scc_info_MSG_NotifyPetQTESkill_SC_pet_2eproto.base,
  &scc_info_MSG_ReqSwitchPetState_CS_pet_2eproto.base,
  &scc_info_MSG_ReqUnlockPetNum_CS_pet_2eproto.base,
  &scc_info_MSG_RetRefreshSummonPet_SC_pet_2eproto.base,
  &scc_info_MSG_RetSwitchPetState_SC_pet_2eproto.base,
  &scc_info_MSG_RetUnlockPetNum_SC_pet_2eproto.base,
  &scc_info_MSG_RetUserPetInfo_SC_pet_2eproto.base,
  &scc_info_PetBase_pet_2eproto.base,
  &scc_info_PropItem_pet_2eproto.base,
  &scc_info_SummonPetUseInfo_pet_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pet_2eproto_once;
static bool descriptor_table_pet_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pet_2eproto = {
  &descriptor_table_pet_2eproto_initialized, descriptor_table_protodef_pet_2eproto, "pet.proto", 1355,
  &descriptor_table_pet_2eproto_once, descriptor_table_pet_2eproto_sccs, descriptor_table_pet_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_pet_2eproto::offsets,
  file_level_metadata_pet_2eproto, 10, file_level_enum_descriptors_pet_2eproto, file_level_service_descriptors_pet_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pet_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pet_2eproto)), true);
namespace Pet {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PetProp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pet_2eproto);
  return file_level_enum_descriptors_pet_2eproto[0];
}
bool PetProp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PetState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pet_2eproto);
  return file_level_enum_descriptors_pet_2eproto[1];
}
bool PetState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PropItem::InitAsDefaultInstance() {
}
class PropItem::_Internal {
 public:
  using HasBits = decltype(std::declval<PropItem>()._has_bits_);
  static void set_has_pdamage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pdefence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maxhp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_toughness(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bang(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_accurate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hold(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_miss(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

PropItem::PropItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pet.PropItem)
}
PropItem::PropItem(const PropItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pdamage_, &from.pdamage_,
    static_cast<size_t>(reinterpret_cast<char*>(&miss_) -
    reinterpret_cast<char*>(&pdamage_)) + sizeof(miss_));
  // @@protoc_insertion_point(copy_constructor:Pet.PropItem)
}

void PropItem::SharedCtor() {
  ::memset(&pdamage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miss_) -
      reinterpret_cast<char*>(&pdamage_)) + sizeof(miss_));
}

PropItem::~PropItem() {
  // @@protoc_insertion_point(destructor:Pet.PropItem)
  SharedDtor();
}

void PropItem::SharedDtor() {
}

void PropItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PropItem& PropItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropItem_pet_2eproto.base);
  return *internal_default_instance();
}


void PropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Pet.PropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pdamage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hit_) -
        reinterpret_cast<char*>(&pdamage_)) + sizeof(hit_));
  }
  miss_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PropItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pdamage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pdamage(&has_bits);
          pdamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdefence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pdefence(&has_bits);
          pdefence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_maxhp(&has_bits);
          maxhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 toughness = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_toughness(&has_bits);
          toughness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bang = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bang(&has_bits);
          bang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 accurate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_accurate(&has_bits);
          accurate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hold = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hold(&has_bits);
          hold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_hit(&has_bits);
          hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 miss = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_miss(&has_bits);
          miss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pet.PropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pdamage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pdamage(), target);
  }

  // optional uint32 pdefence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pdefence(), target);
  }

  // optional uint32 maxhp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxhp(), target);
  }

  // optional uint32 toughness = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_toughness(), target);
  }

  // optional uint32 bang = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bang(), target);
  }

  // optional uint32 accurate = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_accurate(), target);
  }

  // optional uint32 hold = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_hold(), target);
  }

  // optional uint32 hit = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_hit(), target);
  }

  // optional uint32 miss = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_miss(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pet.PropItem)
  return target;
}

size_t PropItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pet.PropItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 pdamage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdamage());
    }

    // optional uint32 pdefence = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdefence());
    }

    // optional uint32 maxhp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhp());
    }

    // optional uint32 toughness = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_toughness());
    }

    // optional uint32 bang = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bang());
    }

    // optional uint32 accurate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accurate());
    }

    // optional uint32 hold = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hold());
    }

    // optional uint32 hit = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hit());
    }

  }
  // optional uint32 miss = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_miss());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pet.PropItem)
  GOOGLE_DCHECK_NE(&from, this);
  const PropItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pet.PropItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pet.PropItem)
    MergeFrom(*source);
  }
}

void PropItem::MergeFrom(const PropItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pet.PropItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pdamage_ = from.pdamage_;
    }
    if (cached_has_bits & 0x00000002u) {
      pdefence_ = from.pdefence_;
    }
    if (cached_has_bits & 0x00000004u) {
      maxhp_ = from.maxhp_;
    }
    if (cached_has_bits & 0x00000008u) {
      toughness_ = from.toughness_;
    }
    if (cached_has_bits & 0x00000010u) {
      bang_ = from.bang_;
    }
    if (cached_has_bits & 0x00000020u) {
      accurate_ = from.accurate_;
    }
    if (cached_has_bits & 0x00000040u) {
      hold_ = from.hold_;
    }
    if (cached_has_bits & 0x00000080u) {
      hit_ = from.hit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_miss(from._internal_miss());
  }
}

void PropItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pet.PropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropItem::CopyFrom(const PropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pet.PropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropItem::IsInitialized() const {
  return true;
}

void PropItem::InternalSwap(PropItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pdamage_, other->pdamage_);
  swap(pdefence_, other->pdefence_);
  swap(maxhp_, other->maxhp_);
  swap(toughness_, other->toughness_);
  swap(bang_, other->bang_);
  swap(accurate_, other->accurate_);
  swap(hold_, other->hold_);
  swap(hit_, other->hit_);
  swap(miss_, other->miss_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PetBase::InitAsDefaultInstance() {
  ::Pet::_PetBase_default_instance_._instance.get_mutable()->prop_ = const_cast< ::Pet::PropItem*>(
      ::Pet::PropItem::internal_default_instance());
  ::Pet::_PetBase_default_instance_._instance.get_mutable()->aptitude_ = const_cast< ::Pet::PropItem*>(
      ::Pet::PropItem::internal_default_instance());
}
class PetBase::_Internal {
 public:
  using HasBits = decltype(std::declval<PetBase>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::Pet::PropItem& prop(const PetBase* msg);
  static void set_has_prop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Pet::PropItem& aptitude(const PetBase* msg);
  static void set_has_aptitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_passivenum(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_activeskillid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_talentskillid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::Pet::PropItem&
PetBase::_Internal::prop(const PetBase* msg) {
  return *msg->prop_;
}
const ::Pet::PropItem&
PetBase::_Internal::aptitude(const PetBase* msg) {
  return *msg->aptitude_;
}
PetBase::PetBase()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pet.PetBase)
}
PetBase::PetBase(const PetBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      state_(from.state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_prop()) {
    prop_ = new ::Pet::PropItem(*from.prop_);
  } else {
    prop_ = nullptr;
  }
  if (from._internal_has_aptitude()) {
    aptitude_ = new ::Pet::PropItem(*from.aptitude_);
  } else {
    aptitude_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&talentskillid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(talentskillid_));
  // @@protoc_insertion_point(copy_constructor:Pet.PetBase)
}

void PetBase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PetBase_pet_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&prop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&talentskillid_) -
      reinterpret_cast<char*>(&prop_)) + sizeof(talentskillid_));
}

PetBase::~PetBase() {
  // @@protoc_insertion_point(destructor:Pet.PetBase)
  SharedDtor();
}

void PetBase::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete prop_;
  if (this != internal_default_instance()) delete aptitude_;
}

void PetBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PetBase& PetBase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PetBase_pet_2eproto.base);
  return *internal_default_instance();
}


void PetBase::Clear() {
// @@protoc_insertion_point(message_clear_start:Pet.PetBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prop_ != nullptr);
      prop_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(aptitude_ != nullptr);
      aptitude_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(hp_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&talentskillid_) -
        reinterpret_cast<char*>(&quality_)) + sizeof(talentskillid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PetBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Pet.PetBase.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tempid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_exp(&has_bits);
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_hp(&has_bits);
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quality = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Pet.PropItem prop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_prop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Pet.PropItem aptitude = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_aptitude(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Pet.PetState state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::Pet::PetState_IsValid(val))) {
              _internal_add_state(static_cast<::Pet::PetState>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_state(), ptr, ctx, ::Pet::PetState_IsValid, &_internal_metadata_, 10);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 passivenum = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_passivenum(&has_bits);
          passivenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 activeskillid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_activeskillid(&has_bits);
          activeskillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 talentskillid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_talentskillid(&has_bits);
          talentskillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PetBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pet.PetBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Pet.PetBase.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint64 tempid = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tempid(), target);
  }

  // optional uint32 level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // optional uint32 exp = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_exp(), target);
  }

  // optional uint32 hp = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hp(), target);
  }

  // optional uint32 quality = 7 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_quality(), target);
  }

  // optional .Pet.PropItem prop = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::prop(this), target, stream);
  }

  // optional .Pet.PropItem aptitude = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::aptitude(this), target, stream);
  }

  // repeated .Pet.PetState state = 10;
  for (int i = 0, n = this->_internal_state_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        10, this->_internal_state(i), target);
  }

  // optional uint32 passivenum = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_passivenum(), target);
  }

  // optional uint32 activeskillid = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_activeskillid(), target);
  }

  // optional uint32 talentskillid = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_talentskillid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pet.PetBase)
  return target;
}

size_t PetBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pet.PetBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Pet.PetState state = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_state_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_state(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .Pet.PropItem prop = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prop_);
    }

    // optional .Pet.PropItem aptitude = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aptitude_);
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint64 tempid = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

    // optional uint32 exp = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_exp());
    }

    // optional uint32 hp = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hp());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 quality = 7 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quality());
    }

    // optional uint32 passivenum = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_passivenum());
    }

    // optional uint32 activeskillid = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_activeskillid());
    }

    // optional uint32 talentskillid = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_talentskillid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PetBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pet.PetBase)
  GOOGLE_DCHECK_NE(&from, this);
  const PetBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PetBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pet.PetBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pet.PetBase)
    MergeFrom(*source);
  }
}

void PetBase::MergeFrom(const PetBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pet.PetBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_prop()->::Pet::PropItem::MergeFrom(from._internal_prop());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_aptitude()->::Pet::PropItem::MergeFrom(from._internal_aptitude());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      tempid_ = from.tempid_;
    }
    if (cached_has_bits & 0x00000040u) {
      exp_ = from.exp_;
    }
    if (cached_has_bits & 0x00000080u) {
      hp_ = from.hp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000200u) {
      passivenum_ = from.passivenum_;
    }
    if (cached_has_bits & 0x00000400u) {
      activeskillid_ = from.activeskillid_;
    }
    if (cached_has_bits & 0x00000800u) {
      talentskillid_ = from.talentskillid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PetBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pet.PetBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetBase::CopyFrom(const PetBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pet.PetBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetBase::IsInitialized() const {
  return true;
}

void PetBase::InternalSwap(PetBase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  state_.InternalSwap(&other->state_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(prop_, other->prop_);
  swap(aptitude_, other->aptitude_);
  swap(id_, other->id_);
  swap(level_, other->level_);
  swap(tempid_, other->tempid_);
  swap(exp_, other->exp_);
  swap(hp_, other->hp_);
  swap(quality_, other->quality_);
  swap(passivenum_, other->passivenum_);
  swap(activeskillid_, other->activeskillid_);
  swap(talentskillid_, other->talentskillid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PetBase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqSwitchPetState_CS::InitAsDefaultInstance() {
}
class MSG_ReqSwitchPetState_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqSwitchPetState_CS>()._has_bits_);
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fromstate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tostate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MSG_ReqSwitchPetState_CS::MSG_ReqSwitchPetState_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pet.MSG_ReqSwitchPetState_CS)
}
MSG_ReqSwitchPetState_CS::MSG_ReqSwitchPetState_CS(const MSG_ReqSwitchPetState_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tempid_, &from.tempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tostate_) -
    reinterpret_cast<char*>(&tempid_)) + sizeof(tostate_));
  // @@protoc_insertion_point(copy_constructor:Pet.MSG_ReqSwitchPetState_CS)
}

void MSG_ReqSwitchPetState_CS::SharedCtor() {
  ::memset(&tempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tostate_) -
      reinterpret_cast<char*>(&tempid_)) + sizeof(tostate_));
}

MSG_ReqSwitchPetState_CS::~MSG_ReqSwitchPetState_CS() {
  // @@protoc_insertion_point(destructor:Pet.MSG_ReqSwitchPetState_CS)
  SharedDtor();
}

void MSG_ReqSwitchPetState_CS::SharedDtor() {
}

void MSG_ReqSwitchPetState_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqSwitchPetState_CS& MSG_ReqSwitchPetState_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqSwitchPetState_CS_pet_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqSwitchPetState_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Pet.MSG_ReqSwitchPetState_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&tempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tostate_) -
        reinterpret_cast<char*>(&tempid_)) + sizeof(tostate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqSwitchPetState_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 tempid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Pet.PetState fromstate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Pet::PetState_IsValid(val))) {
            _internal_set_fromstate(static_cast<::Pet::PetState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Pet.PetState tostate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Pet::PetState_IsValid(val))) {
            _internal_set_tostate(static_cast<::Pet::PetState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqSwitchPetState_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pet.MSG_ReqSwitchPetState_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tempid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tempid(), target);
  }

  // optional .Pet.PetState fromstate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_fromstate(), target);
  }

  // optional .Pet.PetState tostate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_tostate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pet.MSG_ReqSwitchPetState_CS)
  return target;
}

size_t MSG_ReqSwitchPetState_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pet.MSG_ReqSwitchPetState_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 tempid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tempid());
    }

    // optional .Pet.PetState fromstate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fromstate());
    }

    // optional .Pet.PetState tostate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tostate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqSwitchPetState_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pet.MSG_ReqSwitchPetState_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqSwitchPetState_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqSwitchPetState_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pet.MSG_ReqSwitchPetState_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pet.MSG_ReqSwitchPetState_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqSwitchPetState_CS::MergeFrom(const MSG_ReqSwitchPetState_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pet.MSG_ReqSwitchPetState_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tempid_ = from.tempid_;
    }
    if (cached_has_bits & 0x00000002u) {
      fromstate_ = from.fromstate_;
    }
    if (cached_has_bits & 0x00000004u) {
      tostate_ = from.tostate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_ReqSwitchPetState_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pet.MSG_ReqSwitchPetState_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqSwitchPetState_CS::CopyFrom(const MSG_ReqSwitchPetState_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pet.MSG_ReqSwitchPetState_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqSwitchPetState_CS::IsInitialized() const {
  return true;
}

void MSG_ReqSwitchPetState_CS::InternalSwap(MSG_ReqSwitchPetState_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tempid_, other->tempid_);
  swap(fromstate_, other->fromstate_);
  swap(tostate_, other->tostate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqSwitchPetState_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetSwitchPetState_SC::InitAsDefaultInstance() {
}
class MSG_RetSwitchPetState_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetSwitchPetState_SC>()._has_bits_);
  static void set_has_errcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tempid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MSG_RetSwitchPetState_SC::MSG_RetSwitchPetState_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pet.MSG_RetSwitchPetState_SC)
}
MSG_RetSwitchPetState_SC::MSG_RetSwitchPetState_SC(const MSG_RetSwitchPetState_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      curstate_(from.curstate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&tempid_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(tempid_));
  // @@protoc_insertion_point(copy_constructor:Pet.MSG_RetSwitchPetState_SC)
}

void MSG_RetSwitchPetState_SC::SharedCtor() {
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tempid_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(tempid_));
}

MSG_RetSwitchPetState_SC::~MSG_RetSwitchPetState_SC() {
  // @@protoc_insertion_point(destructor:Pet.MSG_RetSwitchPetState_SC)
  SharedDtor();
}

void MSG_RetSwitchPetState_SC::SharedDtor() {
}

void MSG_RetSwitchPetState_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetSwitchPetState_SC& MSG_RetSwitchPetState_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetSwitchPetState_SC_pet_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetSwitchPetState_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Pet.MSG_RetSwitchPetState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curstate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&errcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tempid_) -
        reinterpret_cast<char*>(&errcode_)) + sizeof(tempid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetSwitchPetState_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_errcode(&has_bits);
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tempid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tempid(&has_bits);
          tempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Pet.PetState curstate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::Pet::PetState_IsValid(val))) {
              _internal_add_curstate(static_cast<::Pet::PetState>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_curstate(), ptr, ctx, ::Pet::PetState_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetSwitchPetState_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pet.MSG_RetSwitchPetState_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 errcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errcode(), target);
  }

  // optional uint32 tempid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tempid(), target);
  }

  // repeated .Pet.PetState curstate = 3;
  for (int i = 0, n = this->_internal_curstate_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3, this->_internal_curstate(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pet.MSG_RetSwitchPetState_SC)
  return target;
}

size_t MSG_RetSwitchPetState_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pet.MSG_RetSwitchPetState_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Pet.PetState curstate = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_curstate_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_curstate(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 errcode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_errcode());
    }

    // optional uint32 tempid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tempid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetSwitchPetState_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pet.MSG_RetSwitchPetState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetSwitchPetState_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetSwitchPetState_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pet.MSG_RetSwitchPetState_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pet.MSG_RetSwitchPetState_SC)
    MergeFrom(*source);
  }
}

void MSG_RetSwitchPetState_SC::MergeFrom(const MSG_RetSwitchPetState_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pet.MSG_RetSwitchPetState_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  curstate_.MergeFrom(from.curstate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      tempid_ = from.tempid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_RetSwitchPetState_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pet.MSG_RetSwitchPetState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetSwitchPetState_SC::CopyFrom(const MSG_RetSwitchPetState_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pet.MSG_RetSwitchPetState_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetSwitchPetState_SC::IsInitialized() const {
  return true;
}

void MSG_RetSwitchPetState_SC::InternalSwap(MSG_RetSwitchPetState_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  curstate_.InternalSwap(&other->curstate_);
  swap(errcode_, other->errcode_);
  swap(tempid_, other->tempid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetSwitchPetState_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetRefreshSummonPet_SC::InitAsDefaultInstance() {
}
class MSG_RetRefreshSummonPet_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetRefreshSummonPet_SC>()._has_bits_);
};

MSG_RetRefreshSummonPet_SC::MSG_RetRefreshSummonPet_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pet.MSG_RetRefreshSummonPet_SC)
}
MSG_RetRefreshSummonPet_SC::MSG_RetRefreshSummonPet_SC(const MSG_RetRefreshSummonPet_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pet_(from.pet_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Pet.MSG_RetRefreshSummonPet_SC)
}

void MSG_RetRefreshSummonPet_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetRefreshSummonPet_SC_pet_2eproto.base);
}

MSG_RetRefreshSummonPet_SC::~MSG_RetRefreshSummonPet_SC() {
  // @@protoc_insertion_point(destructor:Pet.MSG_RetRefreshSummonPet_SC)
  SharedDtor();
}

void MSG_RetRefreshSummonPet_SC::SharedDtor() {
}

void MSG_RetRefreshSummonPet_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetRefreshSummonPet_SC& MSG_RetRefreshSummonPet_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetRefreshSummonPet_SC_pet_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetRefreshSummonPet_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Pet.MSG_RetRefreshSummonPet_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pet_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetRefreshSummonPet_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Pet.PetBase pet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetRefreshSummonPet_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pet.MSG_RetRefreshSummonPet_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pet.PetBase pet = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pet(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pet.MSG_RetRefreshSummonPet_SC)
  return target;
}

size_t MSG_RetRefreshSummonPet_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pet.MSG_RetRefreshSummonPet_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Pet.PetBase pet = 1;
  total_size += 1UL * this->_internal_pet_size();
  for (const auto& msg : this->pet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetRefreshSummonPet_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pet.MSG_RetRefreshSummonPet_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetRefreshSummonPet_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetRefreshSummonPet_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pet.MSG_RetRefreshSummonPet_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pet.MSG_RetRefreshSummonPet_SC)
    MergeFrom(*source);
  }
}

void MSG_RetRefreshSummonPet_SC::MergeFrom(const MSG_RetRefreshSummonPet_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pet.MSG_RetRefreshSummonPet_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pet_.MergeFrom(from.pet_);
}

void MSG_RetRefreshSummonPet_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pet.MSG_RetRefreshSummonPet_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetRefreshSummonPet_SC::CopyFrom(const MSG_RetRefreshSummonPet_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pet.MSG_RetRefreshSummonPet_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetRefreshSummonPet_SC::IsInitialized() const {
  return true;
}

void MSG_RetRefreshSummonPet_SC::InternalSwap(MSG_RetRefreshSummonPet_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pet_.InternalSwap(&other->pet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetRefreshSummonPet_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetUserPetInfo_SC::InitAsDefaultInstance() {
  ::Pet::_MSG_RetUserPetInfo_SC_default_instance_._instance.get_mutable()->info_ = const_cast< ::Pet::SummonPetUseInfo*>(
      ::Pet::SummonPetUseInfo::internal_default_instance());
}
class MSG_RetUserPetInfo_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetUserPetInfo_SC>()._has_bits_);
  static const ::Pet::SummonPetUseInfo& info(const MSG_RetUserPetInfo_SC* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Pet::SummonPetUseInfo&
MSG_RetUserPetInfo_SC::_Internal::info(const MSG_RetUserPetInfo_SC* msg) {
  return *msg->info_;
}
MSG_RetUserPetInfo_SC::MSG_RetUserPetInfo_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pet.MSG_RetUserPetInfo_SC)
}
MSG_RetUserPetInfo_SC::MSG_RetUserPetInfo_SC(const MSG_RetUserPetInfo_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::Pet::SummonPetUseInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Pet.MSG_RetUserPetInfo_SC)
}

void MSG_RetUserPetInfo_SC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MSG_RetUserPetInfo_SC_pet_2eproto.base);
  info_ = nullptr;
}

MSG_RetUserPetInfo_SC::~MSG_RetUserPetInfo_SC() {
  // @@protoc_insertion_point(destructor:Pet.MSG_RetUserPetInfo_SC)
  SharedDtor();
}

void MSG_RetUserPetInfo_SC::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void MSG_RetUserPetInfo_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetUserPetInfo_SC& MSG_RetUserPetInfo_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetUserPetInfo_SC_pet_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetUserPetInfo_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Pet.MSG_RetUserPetInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(info_ != nullptr);
    info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetUserPetInfo_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Pet.SummonPetUseInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetUserPetInfo_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pet.MSG_RetUserPetInfo_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Pet.SummonPetUseInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pet.MSG_RetUserPetInfo_SC)
  return target;
}

size_t MSG_RetUserPetInfo_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pet.MSG_RetUserPetInfo_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Pet.SummonPetUseInfo info = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetUserPetInfo_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pet.MSG_RetUserPetInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetUserPetInfo_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetUserPetInfo_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pet.MSG_RetUserPetInfo_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pet.MSG_RetUserPetInfo_SC)
    MergeFrom(*source);
  }
}

void MSG_RetUserPetInfo_SC::MergeFrom(const MSG_RetUserPetInfo_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pet.MSG_RetUserPetInfo_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _internal_mutable_info()->::Pet::SummonPetUseInfo::MergeFrom(from._internal_info());
  }
}

void MSG_RetUserPetInfo_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pet.MSG_RetUserPetInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetUserPetInfo_SC::CopyFrom(const MSG_RetUserPetInfo_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pet.MSG_RetUserPetInfo_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetUserPetInfo_SC::IsInitialized() const {
  return true;
}

void MSG_RetUserPetInfo_SC::InternalSwap(MSG_RetUserPetInfo_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetUserPetInfo_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SummonPetUseInfo::InitAsDefaultInstance() {
}
class SummonPetUseInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SummonPetUseInfo>()._has_bits_);
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_curpet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unlockcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_curassist(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SummonPetUseInfo::SummonPetUseInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pet.SummonPetUseInfo)
}
SummonPetUseInfo::SummonPetUseInfo(const SummonPetUseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      petlist_(from.petlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curpet_, &from.curpet_,
    static_cast<size_t>(reinterpret_cast<char*>(&curassist_) -
    reinterpret_cast<char*>(&curpet_)) + sizeof(curassist_));
  // @@protoc_insertion_point(copy_constructor:Pet.SummonPetUseInfo)
}

void SummonPetUseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SummonPetUseInfo_pet_2eproto.base);
  ::memset(&curpet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curassist_) -
      reinterpret_cast<char*>(&curpet_)) + sizeof(curassist_));
}

SummonPetUseInfo::~SummonPetUseInfo() {
  // @@protoc_insertion_point(destructor:Pet.SummonPetUseInfo)
  SharedDtor();
}

void SummonPetUseInfo::SharedDtor() {
}

void SummonPetUseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummonPetUseInfo& SummonPetUseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummonPetUseInfo_pet_2eproto.base);
  return *internal_default_instance();
}


void SummonPetUseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Pet.SummonPetUseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  petlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&curpet_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curassist_) -
        reinterpret_cast<char*>(&curpet_)) + sizeof(curassist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SummonPetUseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 curpet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_curpet(&has_bits);
          curpet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Pet.PetBase petlist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_petlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 unlockcount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_unlockcount(&has_bits);
          unlockcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 curassist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_curassist(&has_bits);
          curassist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummonPetUseInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pet.SummonPetUseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num(), target);
  }

  // optional uint64 curpet = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_curpet(), target);
  }

  // repeated .Pet.PetBase petlist = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_petlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_petlist(i), target, stream);
  }

  // optional uint32 unlockcount = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_unlockcount(), target);
  }

  // optional uint64 curassist = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_curassist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pet.SummonPetUseInfo)
  return target;
}

size_t SummonPetUseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pet.SummonPetUseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Pet.PetBase petlist = 3;
  total_size += 1UL * this->_internal_petlist_size();
  for (const auto& msg : this->petlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 curpet = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_curpet());
    }

    // optional uint32 num = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num());
    }

    // optional uint32 unlockcount = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unlockcount());
    }

    // optional uint64 curassist = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_curassist());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummonPetUseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pet.SummonPetUseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SummonPetUseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummonPetUseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pet.SummonPetUseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pet.SummonPetUseInfo)
    MergeFrom(*source);
  }
}

void SummonPetUseInfo::MergeFrom(const SummonPetUseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pet.SummonPetUseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  petlist_.MergeFrom(from.petlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      curpet_ = from.curpet_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000004u) {
      unlockcount_ = from.unlockcount_;
    }
    if (cached_has_bits & 0x00000008u) {
      curassist_ = from.curassist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SummonPetUseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pet.SummonPetUseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummonPetUseInfo::CopyFrom(const SummonPetUseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pet.SummonPetUseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummonPetUseInfo::IsInitialized() const {
  return true;
}

void SummonPetUseInfo::InternalSwap(SummonPetUseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  petlist_.InternalSwap(&other->petlist_);
  swap(curpet_, other->curpet_);
  swap(num_, other->num_);
  swap(unlockcount_, other->unlockcount_);
  swap(curassist_, other->curassist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SummonPetUseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_NotifyPetQTESkill_SC::InitAsDefaultInstance() {
}
class MSG_NotifyPetQTESkill_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_NotifyPetQTESkill_SC>()._has_bits_);
  static void set_has_onoff(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bosstempid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_leftlasttime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_totallasttime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distancetomaster(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distanceratio(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

MSG_NotifyPetQTESkill_SC::MSG_NotifyPetQTESkill_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pet.MSG_NotifyPetQTESkill_SC)
}
MSG_NotifyPetQTESkill_SC::MSG_NotifyPetQTESkill_SC(const MSG_NotifyPetQTESkill_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bosstempid_, &from.bosstempid_,
    static_cast<size_t>(reinterpret_cast<char*>(&distanceratio_) -
    reinterpret_cast<char*>(&bosstempid_)) + sizeof(distanceratio_));
  // @@protoc_insertion_point(copy_constructor:Pet.MSG_NotifyPetQTESkill_SC)
}

void MSG_NotifyPetQTESkill_SC::SharedCtor() {
  ::memset(&bosstempid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distanceratio_) -
      reinterpret_cast<char*>(&bosstempid_)) + sizeof(distanceratio_));
}

MSG_NotifyPetQTESkill_SC::~MSG_NotifyPetQTESkill_SC() {
  // @@protoc_insertion_point(destructor:Pet.MSG_NotifyPetQTESkill_SC)
  SharedDtor();
}

void MSG_NotifyPetQTESkill_SC::SharedDtor() {
}

void MSG_NotifyPetQTESkill_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_NotifyPetQTESkill_SC& MSG_NotifyPetQTESkill_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_NotifyPetQTESkill_SC_pet_2eproto.base);
  return *internal_default_instance();
}


void MSG_NotifyPetQTESkill_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Pet.MSG_NotifyPetQTESkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&bosstempid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distanceratio_) -
        reinterpret_cast<char*>(&bosstempid_)) + sizeof(distanceratio_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_NotifyPetQTESkill_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 onoff = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_onoff(&has_bits);
          onoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bosstempid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bosstempid(&has_bits);
          bosstempid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leftlasttime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_leftlasttime(&has_bits);
          leftlasttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 totallasttime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_totallasttime(&has_bits);
          totallasttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 distancetomaster = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_distancetomaster(&has_bits);
          distancetomaster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 distanceratio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_distanceratio(&has_bits);
          distanceratio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_NotifyPetQTESkill_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pet.MSG_NotifyPetQTESkill_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 onoff = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_onoff(), target);
  }

  // optional uint64 bosstempid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bosstempid(), target);
  }

  // optional uint32 leftlasttime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_leftlasttime(), target);
  }

  // optional uint32 totallasttime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_totallasttime(), target);
  }

  // optional uint32 distancetomaster = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_distancetomaster(), target);
  }

  // optional uint32 distanceratio = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_distanceratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pet.MSG_NotifyPetQTESkill_SC)
  return target;
}

size_t MSG_NotifyPetQTESkill_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pet.MSG_NotifyPetQTESkill_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 bosstempid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bosstempid());
    }

    // optional uint32 onoff = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_onoff());
    }

    // optional uint32 leftlasttime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leftlasttime());
    }

    // optional uint32 totallasttime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_totallasttime());
    }

    // optional uint32 distancetomaster = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_distancetomaster());
    }

    // optional uint32 distanceratio = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_distanceratio());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_NotifyPetQTESkill_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pet.MSG_NotifyPetQTESkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_NotifyPetQTESkill_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_NotifyPetQTESkill_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pet.MSG_NotifyPetQTESkill_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pet.MSG_NotifyPetQTESkill_SC)
    MergeFrom(*source);
  }
}

void MSG_NotifyPetQTESkill_SC::MergeFrom(const MSG_NotifyPetQTESkill_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pet.MSG_NotifyPetQTESkill_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      bosstempid_ = from.bosstempid_;
    }
    if (cached_has_bits & 0x00000002u) {
      onoff_ = from.onoff_;
    }
    if (cached_has_bits & 0x00000004u) {
      leftlasttime_ = from.leftlasttime_;
    }
    if (cached_has_bits & 0x00000008u) {
      totallasttime_ = from.totallasttime_;
    }
    if (cached_has_bits & 0x00000010u) {
      distancetomaster_ = from.distancetomaster_;
    }
    if (cached_has_bits & 0x00000020u) {
      distanceratio_ = from.distanceratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MSG_NotifyPetQTESkill_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pet.MSG_NotifyPetQTESkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_NotifyPetQTESkill_SC::CopyFrom(const MSG_NotifyPetQTESkill_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pet.MSG_NotifyPetQTESkill_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_NotifyPetQTESkill_SC::IsInitialized() const {
  return true;
}

void MSG_NotifyPetQTESkill_SC::InternalSwap(MSG_NotifyPetQTESkill_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bosstempid_, other->bosstempid_);
  swap(onoff_, other->onoff_);
  swap(leftlasttime_, other->leftlasttime_);
  swap(totallasttime_, other->totallasttime_);
  swap(distancetomaster_, other->distancetomaster_);
  swap(distanceratio_, other->distanceratio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_NotifyPetQTESkill_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_ReqUnlockPetNum_CS::InitAsDefaultInstance() {
}
class MSG_ReqUnlockPetNum_CS::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_ReqUnlockPetNum_CS>()._has_bits_);
  static void set_has_unlockcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_ReqUnlockPetNum_CS::MSG_ReqUnlockPetNum_CS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pet.MSG_ReqUnlockPetNum_CS)
}
MSG_ReqUnlockPetNum_CS::MSG_ReqUnlockPetNum_CS(const MSG_ReqUnlockPetNum_CS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unlockcount_ = from.unlockcount_;
  // @@protoc_insertion_point(copy_constructor:Pet.MSG_ReqUnlockPetNum_CS)
}

void MSG_ReqUnlockPetNum_CS::SharedCtor() {
  unlockcount_ = 0u;
}

MSG_ReqUnlockPetNum_CS::~MSG_ReqUnlockPetNum_CS() {
  // @@protoc_insertion_point(destructor:Pet.MSG_ReqUnlockPetNum_CS)
  SharedDtor();
}

void MSG_ReqUnlockPetNum_CS::SharedDtor() {
}

void MSG_ReqUnlockPetNum_CS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_ReqUnlockPetNum_CS& MSG_ReqUnlockPetNum_CS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_ReqUnlockPetNum_CS_pet_2eproto.base);
  return *internal_default_instance();
}


void MSG_ReqUnlockPetNum_CS::Clear() {
// @@protoc_insertion_point(message_clear_start:Pet.MSG_ReqUnlockPetNum_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlockcount_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_ReqUnlockPetNum_CS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 unlockcount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unlockcount(&has_bits);
          unlockcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_ReqUnlockPetNum_CS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pet.MSG_ReqUnlockPetNum_CS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unlockcount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unlockcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pet.MSG_ReqUnlockPetNum_CS)
  return target;
}

size_t MSG_ReqUnlockPetNum_CS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pet.MSG_ReqUnlockPetNum_CS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 unlockcount = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unlockcount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_ReqUnlockPetNum_CS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pet.MSG_ReqUnlockPetNum_CS)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_ReqUnlockPetNum_CS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_ReqUnlockPetNum_CS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pet.MSG_ReqUnlockPetNum_CS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pet.MSG_ReqUnlockPetNum_CS)
    MergeFrom(*source);
  }
}

void MSG_ReqUnlockPetNum_CS::MergeFrom(const MSG_ReqUnlockPetNum_CS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pet.MSG_ReqUnlockPetNum_CS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unlockcount()) {
    _internal_set_unlockcount(from._internal_unlockcount());
  }
}

void MSG_ReqUnlockPetNum_CS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pet.MSG_ReqUnlockPetNum_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_ReqUnlockPetNum_CS::CopyFrom(const MSG_ReqUnlockPetNum_CS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pet.MSG_ReqUnlockPetNum_CS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_ReqUnlockPetNum_CS::IsInitialized() const {
  return true;
}

void MSG_ReqUnlockPetNum_CS::InternalSwap(MSG_ReqUnlockPetNum_CS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unlockcount_, other->unlockcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_ReqUnlockPetNum_CS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MSG_RetUnlockPetNum_SC::InitAsDefaultInstance() {
}
class MSG_RetUnlockPetNum_SC::_Internal {
 public:
  using HasBits = decltype(std::declval<MSG_RetUnlockPetNum_SC>()._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MSG_RetUnlockPetNum_SC::MSG_RetUnlockPetNum_SC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pet.MSG_RetUnlockPetNum_SC)
}
MSG_RetUnlockPetNum_SC::MSG_RetUnlockPetNum_SC(const MSG_RetUnlockPetNum_SC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:Pet.MSG_RetUnlockPetNum_SC)
}

void MSG_RetUnlockPetNum_SC::SharedCtor() {
  retcode_ = 0u;
}

MSG_RetUnlockPetNum_SC::~MSG_RetUnlockPetNum_SC() {
  // @@protoc_insertion_point(destructor:Pet.MSG_RetUnlockPetNum_SC)
  SharedDtor();
}

void MSG_RetUnlockPetNum_SC::SharedDtor() {
}

void MSG_RetUnlockPetNum_SC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MSG_RetUnlockPetNum_SC& MSG_RetUnlockPetNum_SC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MSG_RetUnlockPetNum_SC_pet_2eproto.base);
  return *internal_default_instance();
}


void MSG_RetUnlockPetNum_SC::Clear() {
// @@protoc_insertion_point(message_clear_start:Pet.MSG_RetUnlockPetNum_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MSG_RetUnlockPetNum_SC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 retcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MSG_RetUnlockPetNum_SC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pet.MSG_RetUnlockPetNum_SC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 retcode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pet.MSG_RetUnlockPetNum_SC)
  return target;
}

size_t MSG_RetUnlockPetNum_SC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pet.MSG_RetUnlockPetNum_SC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 retcode = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_retcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MSG_RetUnlockPetNum_SC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pet.MSG_RetUnlockPetNum_SC)
  GOOGLE_DCHECK_NE(&from, this);
  const MSG_RetUnlockPetNum_SC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MSG_RetUnlockPetNum_SC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pet.MSG_RetUnlockPetNum_SC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pet.MSG_RetUnlockPetNum_SC)
    MergeFrom(*source);
  }
}

void MSG_RetUnlockPetNum_SC::MergeFrom(const MSG_RetUnlockPetNum_SC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pet.MSG_RetUnlockPetNum_SC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _internal_set_retcode(from._internal_retcode());
  }
}

void MSG_RetUnlockPetNum_SC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pet.MSG_RetUnlockPetNum_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSG_RetUnlockPetNum_SC::CopyFrom(const MSG_RetUnlockPetNum_SC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pet.MSG_RetUnlockPetNum_SC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSG_RetUnlockPetNum_SC::IsInitialized() const {
  return true;
}

void MSG_RetUnlockPetNum_SC::InternalSwap(MSG_RetUnlockPetNum_SC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(retcode_, other->retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MSG_RetUnlockPetNum_SC::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Pet
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Pet::PropItem* Arena::CreateMaybeMessage< ::Pet::PropItem >(Arena* arena) {
  return Arena::CreateInternal< ::Pet::PropItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Pet::PetBase* Arena::CreateMaybeMessage< ::Pet::PetBase >(Arena* arena) {
  return Arena::CreateInternal< ::Pet::PetBase >(arena);
}
template<> PROTOBUF_NOINLINE ::Pet::MSG_ReqSwitchPetState_CS* Arena::CreateMaybeMessage< ::Pet::MSG_ReqSwitchPetState_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Pet::MSG_ReqSwitchPetState_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Pet::MSG_RetSwitchPetState_SC* Arena::CreateMaybeMessage< ::Pet::MSG_RetSwitchPetState_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Pet::MSG_RetSwitchPetState_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Pet::MSG_RetRefreshSummonPet_SC* Arena::CreateMaybeMessage< ::Pet::MSG_RetRefreshSummonPet_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Pet::MSG_RetRefreshSummonPet_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Pet::MSG_RetUserPetInfo_SC* Arena::CreateMaybeMessage< ::Pet::MSG_RetUserPetInfo_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Pet::MSG_RetUserPetInfo_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Pet::SummonPetUseInfo* Arena::CreateMaybeMessage< ::Pet::SummonPetUseInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Pet::SummonPetUseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Pet::MSG_NotifyPetQTESkill_SC* Arena::CreateMaybeMessage< ::Pet::MSG_NotifyPetQTESkill_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Pet::MSG_NotifyPetQTESkill_SC >(arena);
}
template<> PROTOBUF_NOINLINE ::Pet::MSG_ReqUnlockPetNum_CS* Arena::CreateMaybeMessage< ::Pet::MSG_ReqUnlockPetNum_CS >(Arena* arena) {
  return Arena::CreateInternal< ::Pet::MSG_ReqUnlockPetNum_CS >(arena);
}
template<> PROTOBUF_NOINLINE ::Pet::MSG_RetUnlockPetNum_SC* Arena::CreateMaybeMessage< ::Pet::MSG_RetUnlockPetNum_SC >(Arena* arena) {
  return Arena::CreateInternal< ::Pet::MSG_RetUnlockPetNum_SC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
