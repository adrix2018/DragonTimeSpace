// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subtitle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_subtitle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_subtitle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_subtitle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_subtitle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_subtitle_2eproto;
namespace Subtitle {
class CutSceneSubTitle;
class CutSceneSubTitleDefaultTypeInternal;
extern CutSceneSubTitleDefaultTypeInternal _CutSceneSubTitle_default_instance_;
class SubtitleContent;
class SubtitleContentDefaultTypeInternal;
extern SubtitleContentDefaultTypeInternal _SubtitleContent_default_instance_;
class TotalCutSceneSubTitle;
class TotalCutSceneSubTitleDefaultTypeInternal;
extern TotalCutSceneSubTitleDefaultTypeInternal _TotalCutSceneSubTitle_default_instance_;
}  // namespace Subtitle
PROTOBUF_NAMESPACE_OPEN
template<> ::Subtitle::CutSceneSubTitle* Arena::CreateMaybeMessage<::Subtitle::CutSceneSubTitle>(Arena*);
template<> ::Subtitle::SubtitleContent* Arena::CreateMaybeMessage<::Subtitle::SubtitleContent>(Arena*);
template<> ::Subtitle::TotalCutSceneSubTitle* Arena::CreateMaybeMessage<::Subtitle::TotalCutSceneSubTitle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Subtitle {

// ===================================================================

class SubtitleContent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Subtitle.SubtitleContent) */ {
 public:
  SubtitleContent();
  virtual ~SubtitleContent();

  SubtitleContent(const SubtitleContent& from);
  SubtitleContent(SubtitleContent&& from) noexcept
    : SubtitleContent() {
    *this = ::std::move(from);
  }

  inline SubtitleContent& operator=(const SubtitleContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubtitleContent& operator=(SubtitleContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubtitleContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubtitleContent* internal_default_instance() {
    return reinterpret_cast<const SubtitleContent*>(
               &_SubtitleContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubtitleContent& a, SubtitleContent& b) {
    a.Swap(&b);
  }
  inline void Swap(SubtitleContent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubtitleContent* New() const final {
    return CreateMaybeMessage<SubtitleContent>(nullptr);
  }

  SubtitleContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubtitleContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubtitleContent& from);
  void MergeFrom(const SubtitleContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubtitleContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Subtitle.SubtitleContent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_subtitle_2eproto);
    return ::descriptor_table_subtitle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubtitleFieldNumber = 2,
    kShowTimeFieldNumber = 1,
    kDurationFieldNumber = 3,
  };
  // optional string subtitle = 2;
  bool has_subtitle() const;
  private:
  bool _internal_has_subtitle() const;
  public:
  void clear_subtitle();
  const std::string& subtitle() const;
  void set_subtitle(const std::string& value);
  void set_subtitle(std::string&& value);
  void set_subtitle(const char* value);
  void set_subtitle(const char* value, size_t size);
  std::string* mutable_subtitle();
  std::string* release_subtitle();
  void set_allocated_subtitle(std::string* subtitle);
  private:
  const std::string& _internal_subtitle() const;
  void _internal_set_subtitle(const std::string& value);
  std::string* _internal_mutable_subtitle();
  public:

  // optional float showTime = 1;
  bool has_showtime() const;
  private:
  bool _internal_has_showtime() const;
  public:
  void clear_showtime();
  float showtime() const;
  void set_showtime(float value);
  private:
  float _internal_showtime() const;
  void _internal_set_showtime(float value);
  public:

  // optional float duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:Subtitle.SubtitleContent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_;
  float showtime_;
  float duration_;
  friend struct ::TableStruct_subtitle_2eproto;
};
// -------------------------------------------------------------------

class CutSceneSubTitle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Subtitle.CutSceneSubTitle) */ {
 public:
  CutSceneSubTitle();
  virtual ~CutSceneSubTitle();

  CutSceneSubTitle(const CutSceneSubTitle& from);
  CutSceneSubTitle(CutSceneSubTitle&& from) noexcept
    : CutSceneSubTitle() {
    *this = ::std::move(from);
  }

  inline CutSceneSubTitle& operator=(const CutSceneSubTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CutSceneSubTitle& operator=(CutSceneSubTitle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CutSceneSubTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CutSceneSubTitle* internal_default_instance() {
    return reinterpret_cast<const CutSceneSubTitle*>(
               &_CutSceneSubTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CutSceneSubTitle& a, CutSceneSubTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(CutSceneSubTitle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CutSceneSubTitle* New() const final {
    return CreateMaybeMessage<CutSceneSubTitle>(nullptr);
  }

  CutSceneSubTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CutSceneSubTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CutSceneSubTitle& from);
  void MergeFrom(const CutSceneSubTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CutSceneSubTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Subtitle.CutSceneSubTitle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_subtitle_2eproto);
    return ::descriptor_table_subtitle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubtitlelistFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .Subtitle.SubtitleContent subtitlelist = 2;
  int subtitlelist_size() const;
  private:
  int _internal_subtitlelist_size() const;
  public:
  void clear_subtitlelist();
  ::Subtitle::SubtitleContent* mutable_subtitlelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Subtitle::SubtitleContent >*
      mutable_subtitlelist();
  private:
  const ::Subtitle::SubtitleContent& _internal_subtitlelist(int index) const;
  ::Subtitle::SubtitleContent* _internal_add_subtitlelist();
  public:
  const ::Subtitle::SubtitleContent& subtitlelist(int index) const;
  ::Subtitle::SubtitleContent* add_subtitlelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Subtitle::SubtitleContent >&
      subtitlelist() const;

  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:Subtitle.CutSceneSubTitle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Subtitle::SubtitleContent > subtitlelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_subtitle_2eproto;
};
// -------------------------------------------------------------------

class TotalCutSceneSubTitle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Subtitle.TotalCutSceneSubTitle) */ {
 public:
  TotalCutSceneSubTitle();
  virtual ~TotalCutSceneSubTitle();

  TotalCutSceneSubTitle(const TotalCutSceneSubTitle& from);
  TotalCutSceneSubTitle(TotalCutSceneSubTitle&& from) noexcept
    : TotalCutSceneSubTitle() {
    *this = ::std::move(from);
  }

  inline TotalCutSceneSubTitle& operator=(const TotalCutSceneSubTitle& from) {
    CopyFrom(from);
    return *this;
  }
  inline TotalCutSceneSubTitle& operator=(TotalCutSceneSubTitle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TotalCutSceneSubTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TotalCutSceneSubTitle* internal_default_instance() {
    return reinterpret_cast<const TotalCutSceneSubTitle*>(
               &_TotalCutSceneSubTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TotalCutSceneSubTitle& a, TotalCutSceneSubTitle& b) {
    a.Swap(&b);
  }
  inline void Swap(TotalCutSceneSubTitle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TotalCutSceneSubTitle* New() const final {
    return CreateMaybeMessage<TotalCutSceneSubTitle>(nullptr);
  }

  TotalCutSceneSubTitle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TotalCutSceneSubTitle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TotalCutSceneSubTitle& from);
  void MergeFrom(const TotalCutSceneSubTitle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TotalCutSceneSubTitle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Subtitle.TotalCutSceneSubTitle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_subtitle_2eproto);
    return ::descriptor_table_subtitle_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubtitlelistFieldNumber = 1,
  };
  // repeated .Subtitle.CutSceneSubTitle subtitlelist = 1;
  int subtitlelist_size() const;
  private:
  int _internal_subtitlelist_size() const;
  public:
  void clear_subtitlelist();
  ::Subtitle::CutSceneSubTitle* mutable_subtitlelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Subtitle::CutSceneSubTitle >*
      mutable_subtitlelist();
  private:
  const ::Subtitle::CutSceneSubTitle& _internal_subtitlelist(int index) const;
  ::Subtitle::CutSceneSubTitle* _internal_add_subtitlelist();
  public:
  const ::Subtitle::CutSceneSubTitle& subtitlelist(int index) const;
  ::Subtitle::CutSceneSubTitle* add_subtitlelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Subtitle::CutSceneSubTitle >&
      subtitlelist() const;

  // @@protoc_insertion_point(class_scope:Subtitle.TotalCutSceneSubTitle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Subtitle::CutSceneSubTitle > subtitlelist_;
  friend struct ::TableStruct_subtitle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubtitleContent

// optional float showTime = 1;
inline bool SubtitleContent::_internal_has_showtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SubtitleContent::has_showtime() const {
  return _internal_has_showtime();
}
inline void SubtitleContent::clear_showtime() {
  showtime_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SubtitleContent::_internal_showtime() const {
  return showtime_;
}
inline float SubtitleContent::showtime() const {
  // @@protoc_insertion_point(field_get:Subtitle.SubtitleContent.showTime)
  return _internal_showtime();
}
inline void SubtitleContent::_internal_set_showtime(float value) {
  _has_bits_[0] |= 0x00000002u;
  showtime_ = value;
}
inline void SubtitleContent::set_showtime(float value) {
  _internal_set_showtime(value);
  // @@protoc_insertion_point(field_set:Subtitle.SubtitleContent.showTime)
}

// optional string subtitle = 2;
inline bool SubtitleContent::_internal_has_subtitle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SubtitleContent::has_subtitle() const {
  return _internal_has_subtitle();
}
inline void SubtitleContent::clear_subtitle() {
  subtitle_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SubtitleContent::subtitle() const {
  // @@protoc_insertion_point(field_get:Subtitle.SubtitleContent.subtitle)
  return _internal_subtitle();
}
inline void SubtitleContent::set_subtitle(const std::string& value) {
  _internal_set_subtitle(value);
  // @@protoc_insertion_point(field_set:Subtitle.SubtitleContent.subtitle)
}
inline std::string* SubtitleContent::mutable_subtitle() {
  // @@protoc_insertion_point(field_mutable:Subtitle.SubtitleContent.subtitle)
  return _internal_mutable_subtitle();
}
inline const std::string& SubtitleContent::_internal_subtitle() const {
  return subtitle_.GetNoArena();
}
inline void SubtitleContent::_internal_set_subtitle(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SubtitleContent::set_subtitle(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subtitle_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Subtitle.SubtitleContent.subtitle)
}
inline void SubtitleContent::set_subtitle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subtitle.SubtitleContent.subtitle)
}
inline void SubtitleContent::set_subtitle(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subtitle_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subtitle.SubtitleContent.subtitle)
}
inline std::string* SubtitleContent::_internal_mutable_subtitle() {
  _has_bits_[0] |= 0x00000001u;
  return subtitle_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubtitleContent::release_subtitle() {
  // @@protoc_insertion_point(field_release:Subtitle.SubtitleContent.subtitle)
  if (!_internal_has_subtitle()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subtitle_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubtitleContent::set_allocated_subtitle(std::string* subtitle) {
  if (subtitle != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subtitle_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subtitle);
  // @@protoc_insertion_point(field_set_allocated:Subtitle.SubtitleContent.subtitle)
}

// optional float duration = 3;
inline bool SubtitleContent::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SubtitleContent::has_duration() const {
  return _internal_has_duration();
}
inline void SubtitleContent::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SubtitleContent::_internal_duration() const {
  return duration_;
}
inline float SubtitleContent::duration() const {
  // @@protoc_insertion_point(field_get:Subtitle.SubtitleContent.duration)
  return _internal_duration();
}
inline void SubtitleContent::_internal_set_duration(float value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ = value;
}
inline void SubtitleContent::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Subtitle.SubtitleContent.duration)
}

// -------------------------------------------------------------------

// CutSceneSubTitle

// optional string key = 1;
inline bool CutSceneSubTitle::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CutSceneSubTitle::has_key() const {
  return _internal_has_key();
}
inline void CutSceneSubTitle::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CutSceneSubTitle::key() const {
  // @@protoc_insertion_point(field_get:Subtitle.CutSceneSubTitle.key)
  return _internal_key();
}
inline void CutSceneSubTitle::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Subtitle.CutSceneSubTitle.key)
}
inline std::string* CutSceneSubTitle::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Subtitle.CutSceneSubTitle.key)
  return _internal_mutable_key();
}
inline const std::string& CutSceneSubTitle::_internal_key() const {
  return key_.GetNoArena();
}
inline void CutSceneSubTitle::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CutSceneSubTitle::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Subtitle.CutSceneSubTitle.key)
}
inline void CutSceneSubTitle::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subtitle.CutSceneSubTitle.key)
}
inline void CutSceneSubTitle::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subtitle.CutSceneSubTitle.key)
}
inline std::string* CutSceneSubTitle::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CutSceneSubTitle::release_key() {
  // @@protoc_insertion_point(field_release:Subtitle.CutSceneSubTitle.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CutSceneSubTitle::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Subtitle.CutSceneSubTitle.key)
}

// repeated .Subtitle.SubtitleContent subtitlelist = 2;
inline int CutSceneSubTitle::_internal_subtitlelist_size() const {
  return subtitlelist_.size();
}
inline int CutSceneSubTitle::subtitlelist_size() const {
  return _internal_subtitlelist_size();
}
inline void CutSceneSubTitle::clear_subtitlelist() {
  subtitlelist_.Clear();
}
inline ::Subtitle::SubtitleContent* CutSceneSubTitle::mutable_subtitlelist(int index) {
  // @@protoc_insertion_point(field_mutable:Subtitle.CutSceneSubTitle.subtitlelist)
  return subtitlelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Subtitle::SubtitleContent >*
CutSceneSubTitle::mutable_subtitlelist() {
  // @@protoc_insertion_point(field_mutable_list:Subtitle.CutSceneSubTitle.subtitlelist)
  return &subtitlelist_;
}
inline const ::Subtitle::SubtitleContent& CutSceneSubTitle::_internal_subtitlelist(int index) const {
  return subtitlelist_.Get(index);
}
inline const ::Subtitle::SubtitleContent& CutSceneSubTitle::subtitlelist(int index) const {
  // @@protoc_insertion_point(field_get:Subtitle.CutSceneSubTitle.subtitlelist)
  return _internal_subtitlelist(index);
}
inline ::Subtitle::SubtitleContent* CutSceneSubTitle::_internal_add_subtitlelist() {
  return subtitlelist_.Add();
}
inline ::Subtitle::SubtitleContent* CutSceneSubTitle::add_subtitlelist() {
  // @@protoc_insertion_point(field_add:Subtitle.CutSceneSubTitle.subtitlelist)
  return _internal_add_subtitlelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Subtitle::SubtitleContent >&
CutSceneSubTitle::subtitlelist() const {
  // @@protoc_insertion_point(field_list:Subtitle.CutSceneSubTitle.subtitlelist)
  return subtitlelist_;
}

// -------------------------------------------------------------------

// TotalCutSceneSubTitle

// repeated .Subtitle.CutSceneSubTitle subtitlelist = 1;
inline int TotalCutSceneSubTitle::_internal_subtitlelist_size() const {
  return subtitlelist_.size();
}
inline int TotalCutSceneSubTitle::subtitlelist_size() const {
  return _internal_subtitlelist_size();
}
inline void TotalCutSceneSubTitle::clear_subtitlelist() {
  subtitlelist_.Clear();
}
inline ::Subtitle::CutSceneSubTitle* TotalCutSceneSubTitle::mutable_subtitlelist(int index) {
  // @@protoc_insertion_point(field_mutable:Subtitle.TotalCutSceneSubTitle.subtitlelist)
  return subtitlelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Subtitle::CutSceneSubTitle >*
TotalCutSceneSubTitle::mutable_subtitlelist() {
  // @@protoc_insertion_point(field_mutable_list:Subtitle.TotalCutSceneSubTitle.subtitlelist)
  return &subtitlelist_;
}
inline const ::Subtitle::CutSceneSubTitle& TotalCutSceneSubTitle::_internal_subtitlelist(int index) const {
  return subtitlelist_.Get(index);
}
inline const ::Subtitle::CutSceneSubTitle& TotalCutSceneSubTitle::subtitlelist(int index) const {
  // @@protoc_insertion_point(field_get:Subtitle.TotalCutSceneSubTitle.subtitlelist)
  return _internal_subtitlelist(index);
}
inline ::Subtitle::CutSceneSubTitle* TotalCutSceneSubTitle::_internal_add_subtitlelist() {
  return subtitlelist_.Add();
}
inline ::Subtitle::CutSceneSubTitle* TotalCutSceneSubTitle::add_subtitlelist() {
  // @@protoc_insertion_point(field_add:Subtitle.TotalCutSceneSubTitle.subtitlelist)
  return _internal_add_subtitlelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Subtitle::CutSceneSubTitle >&
TotalCutSceneSubTitle::subtitlelist() const {
  // @@protoc_insertion_point(field_list:Subtitle.TotalCutSceneSubTitle.subtitlelist)
  return subtitlelist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Subtitle

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_subtitle_2eproto
